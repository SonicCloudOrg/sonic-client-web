{"version":3,"file":"ModificationsManager.js","sourceRoot":"","sources":["../../../../../../front_end/services/modifications_manager/ModificationsManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as TraceEngine from '../../models/trace/trace.js';\nimport * as TimelineComponents from '../../panels/timeline/components/components.js';\nimport * as EventsSerializer from '../events_serializer/events_serializer.js';\n\nconst modificationsManagerByTraceIndex: ModificationsManager[] = [];\nlet activeManager: ModificationsManager|null;\n\ntype ModificationsManagerData = {\n  traceParsedData: TraceEngine.Handlers.Types.TraceParseData,\n  traceBounds: TraceEngine.Types.Timing.TraceWindowMicroSeconds,\n  modifications?: TraceEngine.Types.File.Modifications,\n               rawTraceEvents: readonly TraceEngine.Types.TraceEvents.TraceEventData[],\n               syntheticEvents: TraceEngine.Types.TraceEvents.SyntheticBasedEvent[],\n};\n\nexport class ModificationsManager {\n  #entriesFilter: TraceEngine.EntriesFilter.EntriesFilter;\n  #timelineBreadcrumbs: TimelineComponents.Breadcrumbs.Breadcrumbs;\n  #modifications: TraceEngine.Types.File.Modifications|null = null;\n  #traceParsedData: TraceEngine.Handlers.Types.TraceParseData;\n  #eventsSerializer: EventsSerializer.EventsSerializer;\n\n  /**\n   * Gets the ModificationsManager instance corresponding to a trace\n   * given its index used in Model#traces. If no index is passed gets\n   * the manager instance for the last trace. If no instance is found,\n   * throws.\n   */\n  static activeManager(): ModificationsManager|null {\n    return activeManager;\n  }\n\n  /**\n   * Initializes a ModificationsManager instance for a parsed trace or changes the active manager for an existing one.\n   * This needs to be called if and a trace has been parsed or switched to.\n   */\n  static initAndActivateModificationsManager(\n      traceModel: TraceEngine.TraceModel.Model<typeof TraceEngine.Handlers.ModelHandlers>, traceIndex: number): void {\n    // If a manager for a given index has already been created, active it.\n    if (modificationsManagerByTraceIndex[traceIndex]) {\n      activeManager = modificationsManagerByTraceIndex[traceIndex];\n      ModificationsManager.activeManager()?.applyModificationsIfPresent();\n    }\n    const traceParsedData = traceModel.traceParsedData(traceIndex);\n    if (!traceParsedData) {\n      throw new Error('ModificationsManager was initialized without a corresponding trace data');\n    }\n    const traceBounds = traceParsedData.Meta.traceBounds;\n    const traceEvents = traceModel.rawTraceEvents(traceIndex);\n    if (!traceEvents) {\n      throw new Error('ModificationsManager was initialized without a corresponding raw trace events array');\n    }\n    const syntheticEventsManager = traceModel.syntheticTraceEventsManager(traceIndex);\n    if (!syntheticEventsManager) {\n      throw new Error('ModificationsManager was initialized without a corresponding SyntheticEventsManager');\n    }\n    const metadata = traceModel.metadata(traceIndex);\n    const newModificationsManager = new ModificationsManager({\n      traceParsedData,\n      traceBounds,\n      rawTraceEvents: traceEvents,\n      modifications: metadata?.modifications,\n      syntheticEvents: syntheticEventsManager.getSyntheticTraceEvents(),\n    });\n    modificationsManagerByTraceIndex[traceIndex] = newModificationsManager;\n    activeManager = newModificationsManager;\n    ModificationsManager.activeManager()?.applyModificationsIfPresent();\n  }\n\n  private constructor({traceParsedData, traceBounds, modifications}: ModificationsManagerData) {\n    const entryToNodeMap = new Map([...traceParsedData.Samples.entryToNode, ...traceParsedData.Renderer.entryToNode]);\n    this.#entriesFilter = new TraceEngine.EntriesFilter.EntriesFilter(entryToNodeMap);\n    this.#timelineBreadcrumbs = new TimelineComponents.Breadcrumbs.Breadcrumbs(traceBounds);\n    this.#modifications = modifications || null;\n    this.#traceParsedData = traceParsedData;\n    this.#eventsSerializer = new EventsSerializer.EventsSerializer();\n  }\n\n  getEntriesFilter(): TraceEngine.EntriesFilter.EntriesFilter {\n    return this.#entriesFilter;\n  }\n\n  getTimelineBreadcrumbs(): TimelineComponents.Breadcrumbs.Breadcrumbs {\n    return this.#timelineBreadcrumbs;\n  }\n\n  /**\n   * Builds all modifications into a serializable object written into\n   * the 'modifications' trace file metadata field.\n   */\n  toJSON(): TraceEngine.Types.File.Modifications {\n    const hiddenEntries = this.#entriesFilter.invisibleEntries()\n                              .map(entry => this.#eventsSerializer.keyForEvent(entry))\n                              .filter(entry => entry !== null) as TraceEngine.Types.File.TraceEventSerializableKey[];\n    const expandableEntries =\n        this.#entriesFilter.expandableEntries()\n            .map(entry => this.#eventsSerializer.keyForEvent(entry))\n            .filter(entry => entry !== null) as TraceEngine.Types.File.TraceEventSerializableKey[];\n    this.#modifications = {\n      entriesModifications: {\n        hiddenEntries: hiddenEntries,\n        expandableEntries: expandableEntries,\n      },\n      initialBreadcrumb: this.#timelineBreadcrumbs.initialBreadcrumb,\n    };\n    return this.#modifications;\n  }\n\n  applyModificationsIfPresent(): void {\n    const modifications = this.#modifications;\n    if (!modifications) {\n      return;\n    }\n    const hiddenEntries = modifications.entriesModifications.hiddenEntries;\n    const expandableEntries = modifications.entriesModifications.expandableEntries;\n    this.applyEntriesFilterModifications(hiddenEntries, expandableEntries);\n    this.#timelineBreadcrumbs.setInitialBreadcrumbFromLoadedModifications(modifications.initialBreadcrumb);\n  }\n\n  applyEntriesFilterModifications(\n      hiddenEntriesKeys: TraceEngine.Types.File.TraceEventSerializableKey[],\n      expandableEntriesKeys: TraceEngine.Types.File.TraceEventSerializableKey[]): void {\n    const hiddenEntries = hiddenEntriesKeys.map(key => this.#eventsSerializer.eventForKey(key, this.#traceParsedData));\n    const expandableEntries =\n        expandableEntriesKeys.map(key => this.#eventsSerializer.eventForKey(key, this.#traceParsedData));\n    this.#entriesFilter.setHiddenAndExpandableEntries(hiddenEntries, expandableEntries);\n  }\n}\n"]}