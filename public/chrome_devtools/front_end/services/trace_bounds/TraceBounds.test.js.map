{"version":3,"file":"TraceBounds.test.js","sourceRoot":"","sources":["../../../../../../front_end/services/trace_bounds/TraceBounds.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as TraceEngine from '../../models/trace/trace.js';\nimport * as TraceBounds from './trace_bounds.js';\n\nconst baseTraceWindow: TraceEngine.Types.Timing.TraceWindowMicroSeconds = {\n  min: TraceEngine.Types.Timing.MicroSeconds(0),\n  max: TraceEngine.Types.Timing.MicroSeconds(10_000),\n  range: TraceEngine.Types.Timing.MicroSeconds(10_000),\n};\nconst baseTraceWindowMilli: TraceEngine.Types.Timing.TraceWindowMilliSeconds =\n    TraceEngine.Helpers.Timing.traceWindowMilliSeconds(baseTraceWindow);\n\ndescribe('TraceBounds', () => {\n  it('is initialized with the entire trace window and sets the state accordingly', async () => {\n    const manager =\n        TraceBounds.TraceBounds.BoundsManager.instance({forceNew: true}).resetWithNewBounds(baseTraceWindow);\n    assert.deepEqual(manager.state(), {\n      micro: {\n        entireTraceBounds: baseTraceWindow,\n        minimapTraceBounds: baseTraceWindow,\n        timelineTraceWindow: baseTraceWindow,\n      },\n      milli: {\n        entireTraceBounds: baseTraceWindowMilli,\n        minimapTraceBounds: baseTraceWindowMilli,\n        timelineTraceWindow: baseTraceWindowMilli,\n      },\n    });\n  });\n\n  it('can update the minimap bounds and dispatches a state change event', async () => {\n    const manager =\n        TraceBounds.TraceBounds.BoundsManager.instance({forceNew: true}).resetWithNewBounds(baseTraceWindow);\n    const onStateChange = sinon.spy();\n    manager.addEventListener(TraceBounds.TraceBounds.StateChangedEvent.eventName, onStateChange);\n\n    const newMiniMapBounds = {\n      min: TraceEngine.Types.Timing.MicroSeconds(10_000),\n      max: TraceEngine.Types.Timing.MicroSeconds(20_000),\n      range: TraceEngine.Types.Timing.MicroSeconds(10_000),\n    };\n\n    manager.setMiniMapBounds(newMiniMapBounds);\n    assert.strictEqual(onStateChange.callCount, 1);\n    const dataFromEvent = onStateChange.firstCall.args[0] as TraceBounds.TraceBounds.StateChangedEvent;\n    assert.strictEqual(dataFromEvent.updateType, 'MINIMAP_BOUNDS');\n    assert.deepEqual(dataFromEvent.state.micro, {\n      entireTraceBounds: baseTraceWindow,\n      minimapTraceBounds: newMiniMapBounds,\n      timelineTraceWindow: baseTraceWindow,\n    });\n  });\n\n  it('dispatches an event when the bounds are completely reset', async () => {\n    const manager =\n        TraceBounds.TraceBounds.BoundsManager.instance({forceNew: true}).resetWithNewBounds(baseTraceWindow);\n\n    const onStateChange = sinon.spy();\n    manager.addEventListener(TraceBounds.TraceBounds.StateChangedEvent.eventName, onStateChange);\n\n    const newBounds = {\n      min: TraceEngine.Types.Timing.MicroSeconds(1_000),\n      max: TraceEngine.Types.Timing.MicroSeconds(5_000),\n      range: TraceEngine.Types.Timing.MicroSeconds(4_000),\n    };\n    const newBoundsMilli = TraceEngine.Helpers.Timing.traceWindowMilliSeconds(newBounds);\n    manager.resetWithNewBounds(newBounds);\n\n    assert.strictEqual(onStateChange.callCount, 1);\n    const dataFromEvent = onStateChange.firstCall.args[0] as TraceBounds.TraceBounds.StateChangedEvent;\n    assert.strictEqual(dataFromEvent.updateType, 'RESET');\n    assert.deepEqual(dataFromEvent.state, {\n      micro: {\n        entireTraceBounds: newBounds,\n        minimapTraceBounds: newBounds,\n        timelineTraceWindow: newBounds,\n      },\n      milli: {\n        entireTraceBounds: newBoundsMilli,\n        minimapTraceBounds: newBoundsMilli,\n        timelineTraceWindow: newBoundsMilli,\n      },\n    });\n  });\n\n  it('can update the visible timeline window and dispatch an event', async () => {\n    const manager =\n        TraceBounds.TraceBounds.BoundsManager.instance({forceNew: true}).resetWithNewBounds(baseTraceWindow);\n    const onStateChange = sinon.spy();\n    manager.addEventListener(TraceBounds.TraceBounds.StateChangedEvent.eventName, onStateChange);\n\n    const newVisibleWindow = {\n      min: TraceEngine.Types.Timing.MicroSeconds(10_000),\n      max: TraceEngine.Types.Timing.MicroSeconds(20_000),\n      range: TraceEngine.Types.Timing.MicroSeconds(10_000),\n    };\n\n    manager.setTimelineVisibleWindow(newVisibleWindow);\n\n    assert.strictEqual(onStateChange.callCount, 1);\n    const dataFromEvent = onStateChange.firstCall.args[0] as TraceBounds.TraceBounds.StateChangedEvent;\n    assert.strictEqual(dataFromEvent.updateType, 'VISIBLE_WINDOW');\n    assert.deepEqual(dataFromEvent.state.micro, {\n      entireTraceBounds: baseTraceWindow,\n      minimapTraceBounds: baseTraceWindow,\n      timelineTraceWindow: newVisibleWindow,\n    });\n  });\n\n  it('does not update or dispatch if the range of the new trace window is less than 1ms', async () => {\n    const manager =\n        TraceBounds.TraceBounds.BoundsManager.instance({forceNew: true}).resetWithNewBounds(baseTraceWindow);\n    const onStateChange = sinon.spy();\n    manager.addEventListener(TraceBounds.TraceBounds.StateChangedEvent.eventName, onStateChange);\n\n    const newVisibleWindow = {\n      min: TraceEngine.Types.Timing.MicroSeconds(10_000),\n      max: TraceEngine.Types.Timing.MicroSeconds(10_500),\n      range: TraceEngine.Types.Timing.MicroSeconds(500),\n    };\n\n    manager.setTimelineVisibleWindow(newVisibleWindow);\n    assert.strictEqual(onStateChange.callCount, 0);\n    assert.deepEqual(manager.state()?.micro, {\n      entireTraceBounds: baseTraceWindow,\n      minimapTraceBounds: baseTraceWindow,\n      timelineTraceWindow: baseTraceWindow,\n    });\n  });\n\n  it('does not update or dispatch if the range of the new minimap bounds is less than 1ms', async () => {\n    const manager =\n        TraceBounds.TraceBounds.BoundsManager.instance({forceNew: true}).resetWithNewBounds(baseTraceWindow);\n    const onStateChange = sinon.spy();\n    manager.addEventListener(TraceBounds.TraceBounds.StateChangedEvent.eventName, onStateChange);\n\n    const newMiniMapBounds = {\n      min: TraceEngine.Types.Timing.MicroSeconds(10_000),\n      max: TraceEngine.Types.Timing.MicroSeconds(10_500),\n      range: TraceEngine.Types.Timing.MicroSeconds(500),\n    };\n\n    manager.setMiniMapBounds(newMiniMapBounds);\n    assert.strictEqual(onStateChange.callCount, 0);\n    assert.deepEqual(manager.state()?.micro, {\n      entireTraceBounds: baseTraceWindow,\n      minimapTraceBounds: baseTraceWindow,\n      timelineTraceWindow: baseTraceWindow,\n    });\n  });\n});\n"]}