{"version":3,"file":"i18n.test.js","sourceRoot":"","sources":["../../../../../../front_end/third_party/i18n/i18n.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from './i18n.js';\n\ndescribe('i18n', () => {\n  let i18nInstance: i18n.I18n.I18n;\n  beforeEach(() => {\n    i18nInstance = new i18n.I18n.I18n(['en-US', 'de-DE'], 'en-US');  // A fresh instance for each test.\n  });\n\n  function stringSetWith(\n      file: string, uiStrings: i18n.I18n.UIStrings, locale: string): i18n.LocalizedStringSet.LocalizedStringSet {\n    const registeredStrings = i18nInstance.registerFileStrings(file, uiStrings);\n    return registeredStrings.getLocalizedStringSetFor(locale);\n  }\n\n  it('should throw an error when no locale data is registered for the requested locale', () => {\n    const uiStrings = {key: 'string to translate'};\n    const registeredStrings = i18nInstance.registerFileStrings('test.ts', uiStrings);\n\n    assert.throws(() => registeredStrings.getLocalizedStringSetFor('en-US'), /en-US/);\n  });\n\n  it('should throw an error when a requested message is not part of the UIStrings string structure', () => {\n    i18nInstance.registerLocaleData('en-US', {'test.ts | foo': {message: 'string to translate'}});\n    const uiStrings = {};\n    const stringSet = stringSetWith('test.ts', uiStrings, 'en-US');\n\n    assert.throws(() => stringSet.getLocalizedString('string to translate'));\n  });\n\n  it('should provide the correct translation if its available', () => {\n    i18nInstance.registerLocaleData('de-DE', {'test.ts | foo': {message: 'a german foo'}});\n    const uiStrings = {foo: 'an english foo'};\n    const stringSet = stringSetWith('test.ts', uiStrings, 'de-DE');\n\n    const translatedString = stringSet.getLocalizedString(uiStrings.foo);\n\n    assert.strictEqual(translatedString, 'a german foo');\n  });\n\n  it('should provide the correct translation with placeholders', () => {\n    i18nInstance.registerLocaleData('de-DE', {'test.ts | foo': {message: 'a {PH1} german message'}});\n    const uiStrings = {foo: 'a {PH1} english message'};\n    const stringSet = stringSetWith('test.ts', uiStrings, 'de-DE');\n\n    const translatedString = stringSet.getLocalizedString(uiStrings.foo, {PH1: 'nice'});\n\n    assert.strictEqual(translatedString, 'a nice german message');\n  });\n\n  it('should fall back to the UIStrings message when no translation is available', () => {\n    i18nInstance.registerLocaleData('de-DE', {});  // Simulate string not yet translated to German.\n    const uiStrings = {foo: 'an english foo'};\n    const stringSet = stringSetWith('test.ts', uiStrings, 'de-DE');\n\n    const translatedString = stringSet.getLocalizedString(uiStrings.foo);\n\n    assert.strictEqual(translatedString, uiStrings.foo);\n  });\n\n  it('should fall back to the UIStrings message when the placeholder of a translation doesn\\'t match the UIStrings placeholder',\n     () => {\n       i18nInstance.registerLocaleData(\n           'de-DE', {'test.ts | foo': {message: 'German message with old placeholder {PH_OLD}'}});\n       const uiStrings = {foo: 'Message with a new placeholder {PH_NEW}'};\n       const stringSet = stringSetWith('test.ts', uiStrings, 'de-DE');\n\n       const translatedString = stringSet.getLocalizedString(uiStrings.foo, {PH_NEW: 'PH_NEW'});\n\n       assert.strictEqual(translatedString, 'Message with a new placeholder PH_NEW');\n     });\n\n  it('should provide the same translation for repeated calls, but substitute placeholders correctly', () => {\n    i18nInstance.registerLocaleData('de-DE', {\n      'test.ts | foo': {message: 'a german message'},\n      'test.ts | bar': {message: 'a german placeholder: {PH1}'},\n    });\n    const uiStrings = {\n      foo: 'a english message',\n      bar: 'a english placeholder: {PH1}',\n    };\n    const stringSet = stringSetWith('test.ts', uiStrings, 'de-DE');\n\n    const foo1 = stringSet.getLocalizedString(uiStrings.foo);\n    const foo2 = stringSet.getLocalizedString(uiStrings.foo);\n    const bar1 = stringSet.getLocalizedString(uiStrings.bar, {PH1: 'ok'});\n    const bar2 = stringSet.getLocalizedString(uiStrings.bar, {PH1: 'nice'});\n\n    assert.strictEqual(foo1, 'a german message');\n    assert.strictEqual(foo2, 'a german message');\n    assert.strictEqual(bar1, 'a german placeholder: ok');\n    assert.strictEqual(bar2, 'a german placeholder: nice');\n  });\n\n  describe('placeholder formatting', () => {\n    beforeEach(() => {\n      i18nInstance.registerLocaleData('en-US', {});  // Always fall-through to UIStrings.\n    });\n\n    it('should throw an error when values are needed but not provided', () => {\n      const uiStrings = {foo: 'message with {PH1}'};\n      const stringSet = stringSetWith('test.ts', uiStrings, 'en-US');\n\n      assert.throws(() => stringSet.getLocalizedString(uiStrings.foo), /message with \\{PH1\\}/);\n    });\n\n    it('should throw an error when a value is missing', () => {\n      const uiStrings = {foo: 'message {PH1} with {PH2}'};\n      const stringSet = stringSetWith('test.ts', uiStrings, 'en-US');\n\n      assert.throws(() => stringSet.getLocalizedString(uiStrings.foo, {PH1: 'bar'}), /message \\{PH1\\} with \\{PH2\\}/);\n    });\n\n    it('should format a message with plurals', () => {\n      const uiStrings = {plural: '{count, plural, =1 {1 row} other {# rows}}'};\n      const stringSet = stringSetWith('test.ts', uiStrings, 'en-US');\n\n      const pluralString1 = stringSet.getLocalizedString(uiStrings.plural, {count: 1});\n      const pluralString3 = stringSet.getLocalizedString(uiStrings.plural, {count: 3});\n\n      assert.strictEqual(pluralString1, '1 row');\n      assert.strictEqual(pluralString3, '3 rows');\n    });\n\n    it('should throw an error when a plural control value is missing', () => {\n      const uiStrings = {plural: '{count, plural, =1 {1 row} other {# rows}}'};\n      const stringSet = stringSetWith('test.ts', uiStrings, 'en-US');\n\n      assert.throws(() => stringSet.getLocalizedString(uiStrings.plural));\n    });\n\n    it('should allow nested placeholders in message with plurals', () => {\n      const uiStrings = {plural: '{count, plural, =1 {1 row in {item}} other {# rows in {item}}}'};\n      const stringSet = stringSetWith('test.ts', uiStrings, 'en-US');\n\n      const pluralString1 = stringSet.getLocalizedString(uiStrings.plural, {count: 1, item: 'table'});\n      const pluralString3 = stringSet.getLocalizedString(uiStrings.plural, {count: 3, item: 'page'});\n\n      assert.strictEqual(pluralString1, '1 row in table');\n      assert.strictEqual(pluralString3, '3 rows in page');\n    });\n  });\n\n  describe('locales', () => {\n    it('should provide the exact locale if it is supported', () => {\n      const instance = new i18n.I18n.I18n(['en-US', 'de-DE'], 'en-US');\n\n      assert.strictEqual(instance.lookupClosestSupportedLocale('de-DE'), 'de-DE');\n    });\n\n    it('should provide the closest related locale if its not supported', () => {\n      const instance = new i18n.I18n.I18n(['en-US', 'de'], 'en-US');\n\n      assert.strictEqual(instance.lookupClosestSupportedLocale('de-AT'), 'de');\n    });\n\n    it('should provide the default locale if no closely related locale was found', () => {\n      const instance = new i18n.I18n.I18n(['en-US'], 'en-US');\n\n      assert.strictEqual(instance.lookupClosestSupportedLocale('de-AT'), 'en-US');\n    });\n  });\n});\n"]}