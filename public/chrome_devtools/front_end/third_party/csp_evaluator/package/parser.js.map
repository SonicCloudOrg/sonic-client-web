{"version":3,"file":"parser.js","sourceRoot":"","sources":["../../../../../../../front_end/third_party/csp_evaluator/package/parser.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;GAgBG;AAEH,OAAO,KAAK,GAAG,MAAM,UAAU,CAAC;AAIhC;;;GAGG;AACH,MAAM,OAAO,SAAS;IACpB,GAAG,CAAU;IACb;;OAEG;IACH,YAAY,WAAmB;QAC7B;;WAEG;QACH,IAAI,CAAC,GAAG,GAAG,IAAI,GAAG,CAAC,GAAG,EAAE,CAAC;QAEzB,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;IAC1B,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,WAAmB;QACvB,4BAA4B;QAC5B,IAAI,CAAC,GAAG,GAAG,IAAI,GAAG,CAAC,GAAG,EAAE,CAAC;QAEzB,mCAAmC;QACnC,MAAM,eAAe,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC/C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAChD,MAAM,cAAc,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;YAEjD,mEAAmE;YACnE,MAAM,cAAc,GAAG,cAAc,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YACpD,IAAI,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE,CAAC;gBAClC,MAAM,aAAa,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;gBAEtD,wEAAwE;gBACxE,qEAAqE;gBACrE,gDAAgD;gBAChD,IAAI,aAAa,IAAI,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC;oBACzC,SAAS;gBACX,CAAC;gBAED,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,aAAa,CAAC,EAAE,CAAC;gBACtC,CAAC;gBAED,MAAM,eAAe,GAAa,EAAE,CAAC;gBACrC,KAAK,IAAI,cAAc,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,cAAc,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,EAC/D,CAAC,EAAE,EAAE,CAAC;oBACT,cAAc,GAAG,uBAAuB,CAAC,cAAc,CAAC,CAAC;oBACzD,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,cAAc,CAAC,EAAE,CAAC;wBAC9C,eAAe,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;oBACvC,CAAC;gBACH,CAAC;gBACD,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,aAAa,CAAC,GAAG,eAAe,CAAC;YACvD,CAAC;QACH,CAAC;QAED,OAAO,IAAI,CAAC,GAAG,CAAC;IAClB,CAAC;CACF;AAED;;;;;GAKG;AACH,SAAS,uBAAuB,CAAC,cAAsB;IACrD,cAAc,GAAG,cAAc,CAAC,IAAI,EAAE,CAAC;IACvC,MAAM,mBAAmB,GAAG,cAAc,CAAC,WAAW,EAAE,CAAC;IACzD,IAAI,GAAG,CAAC,SAAS,CAAC,mBAAmB,CAAC,IAAI,GAAG,CAAC,WAAW,CAAC,cAAc,CAAC,EAAE,CAAC;QAC1E,OAAO,mBAAmB,CAAC;IAC7B,CAAC;IACD,OAAO,cAAc,CAAC;AACxB,CAAC;AAED,MAAM,CAAC,MAAM,SAAS,GAAG,EAAC,uBAAuB,EAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2016 Google Inc. All rights reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @author lwe@google.com (Lukas Weichselbaum)\n */\n\nimport * as csp from './csp.js';\n\n\n\n/**\n * A class to hold a parser for CSP in string format.\n * @unrestricted\n */\nexport class CspParser {\n  csp: csp.Csp;\n  /**\n   * @param unparsedCsp A Content Security Policy as string.\n   */\n  constructor(unparsedCsp: string) {\n    /**\n     * Parsed CSP\n     */\n    this.csp = new csp.Csp();\n\n    this.parse(unparsedCsp);\n  }\n\n  /**\n   * Parses a CSP from a string.\n   * @param unparsedCsp CSP as string.\n   */\n  parse(unparsedCsp: string): csp.Csp {\n    // Reset the internal state:\n    this.csp = new csp.Csp();\n\n    // Split CSP into directive tokens.\n    const directiveTokens = unparsedCsp.split(';');\n    for (let i = 0; i < directiveTokens.length; i++) {\n      const directiveToken = directiveTokens[i].trim();\n\n      // Split directive tokens into directive name and directive values.\n      const directiveParts = directiveToken.match(/\\S+/g);\n      if (Array.isArray(directiveParts)) {\n        const directiveName = directiveParts[0].toLowerCase();\n\n        // If the set of directives already contains a directive whose name is a\n        // case insensitive match for directive name, ignore this instance of\n        // the directive and continue to the next token.\n        if (directiveName in this.csp.directives) {\n          continue;\n        }\n\n        if (!csp.isDirective(directiveName)) {\n        }\n\n        const directiveValues: string[] = [];\n        for (let directiveValue, j = 1; (directiveValue = directiveParts[j]);\n             j++) {\n          directiveValue = normalizeDirectiveValue(directiveValue);\n          if (!directiveValues.includes(directiveValue)) {\n            directiveValues.push(directiveValue);\n          }\n        }\n        this.csp.directives[directiveName] = directiveValues;\n      }\n    }\n\n    return this.csp;\n  }\n}\n\n/**\n * Remove whitespaces and turn to lower case if CSP keyword or protocol\n * handler.\n * @param directiveValue directive value.\n * @return normalized directive value.\n */\nfunction normalizeDirectiveValue(directiveValue: string): string {\n  directiveValue = directiveValue.trim();\n  const directiveValueLower = directiveValue.toLowerCase();\n  if (csp.isKeyword(directiveValueLower) || csp.isUrlScheme(directiveValue)) {\n    return directiveValueLower;\n  }\n  return directiveValue;\n}\n\nexport const TEST_ONLY = {normalizeDirectiveValue};\n"]}