{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../../../../front_end/third_party/csp_evaluator/package/utils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @fileoverview Utils for CSP evaluator.\n * @author lwe@google.com (Lukas Weichselbaum)\n *\n * @license\n * Copyright 2016 Google Inc. All rights reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport * as csp from './csp.js';\n\n\n/**\n * Removes scheme from url.\n * @param url Url.\n * @return url without scheme.\n */\nexport function getSchemeFreeUrl(url: string): string {\n  url = url.replace(/^\\w[+\\w.-]*:\\/\\//i, '');\n  // Remove URL scheme.\n  url = url.replace(/^\\/\\//, '');\n  // Remove protocol agnostic \"//\"\n  return url;\n}\n\n/**\n * Get the hostname from the given url string in a way that supports schemeless\n * URLs and wildcards (aka `*`) in hostnames\n */\nexport function getHostname(url: string): string {\n  const hostname =\n      new URL(\n          'https://' +\n      getSchemeFreeUrl(url)\n        .replace(':*', '')  // Remove wildcard port\n        .replace('*', 'wildcard_placeholder'))\n          .hostname.replace('wildcard_placeholder', '*');\n\n  // Some browsers strip the brackets from IPv6 addresses when you access the\n  // hostname. If the scheme free url starts with something that vaguely looks\n  // like an IPv6 address and our parsed hostname doesn't have the brackets,\n  // then we add them back to work around this\n  const ipv6Regex = /^\\[[\\d:]+\\]/;\n  if (getSchemeFreeUrl(url).match(ipv6Regex) && !hostname.match(ipv6Regex)) {\n    return '[' + hostname + ']';\n  }\n  return hostname;\n}\n\nfunction setScheme(u: string): string {\n  if (u.startsWith('//')) {\n    return u.replace('//', 'https://');\n  }\n  return u;\n}\n\n/**\n * Searches for allowlisted CSP origin (URL with wildcards) in list of urls.\n * @param cspUrlString The allowlisted CSP origin. Can contain domain and\n *   path wildcards.\n * @param listOfUrlStrings List of urls to search in.\n * @return First match found in url list, null otherwise.\n */\nexport function matchWildcardUrls(\n    cspUrlString: string, listOfUrlStrings: string[]): URL|null {\n  // non-Chromium browsers don't support wildcards in domain names. We work\n  // around this by replacing the wildcard with `wildcard_placeholder` before\n  // parsing the domain and using that as a magic string. This magic string is\n  // encapsulated in this function such that callers of this function do not\n  // have to worry about this detail.\n  const cspUrl =\n      new URL(setScheme(cspUrlString\n        .replace(':*', '')  // Remove wildcard port\n        .replace('*', 'wildcard_placeholder')));\n  const listOfUrls = listOfUrlStrings.map(u => new URL(setScheme(u)));\n  const host = cspUrl.hostname.toLowerCase();\n  const hostHasWildcard = host.startsWith('wildcard_placeholder.');\n  const wildcardFreeHost = host.replace(/^\\wildcard_placeholder/i, '');\n  const path = cspUrl.pathname;\n  const hasPath = path !== '/';\n\n  for (const url of listOfUrls) {\n    const domain = url.hostname;\n    if (!domain.endsWith(wildcardFreeHost)) {\n      // Domains don't match.\n      continue;\n    }\n\n    // If the host has no subdomain wildcard and doesn't match, continue.\n    if (!hostHasWildcard && host !== domain) {\n      continue;\n    }\n\n    // If the allowlisted url has a path, check if one of the url paths\n    // match.\n    if (hasPath) {\n      // https://www.w3.org/TR/CSP2/#source-list-path-patching\n      if (path.endsWith('/')) {\n        if (!url.pathname.startsWith(path)) {\n          continue;\n        }\n      } else {\n        if (url.pathname !== path) {\n          // Path doesn't match.\n          continue;\n        }\n      }\n    }\n\n    // We found a match.\n    return url;\n  }\n\n  // No match was found.\n  return null;\n}\n\n\n/**\n * Applies a check to all directive values of a csp.\n * @param parsedCsp Parsed CSP.\n * @param check The check function that\n *   should get applied on directive values.\n */\nexport function applyCheckFunktionToDirectives(\n    parsedCsp: csp.Csp,\n    check: (directive: string, directiveValues: string[]) => void,\n) {\n  const directiveNames = Object.keys(parsedCsp.directives);\n\n  for (const directive of directiveNames) {\n    const directiveValues = parsedCsp.directives[directive];\n    if (directiveValues) {\n      check(directive, directiveValues);\n    }\n  }\n}\n"]}