{"version":3,"file":"security_checks.js","sourceRoot":"","sources":["../../../../../../../../front_end/third_party/csp_evaluator/package/checks/security_checks.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @fileoverview Collection of CSP evaluation checks.\n * @author lwe@google.com (Lukas Weichselbaum)\n *\n * @license\n * Copyright 2016 Google Inc. All rights reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as angular from '../allowlist_bypasses/angular.js';\nimport * as flash from '../allowlist_bypasses/flash.js';\nimport * as jsonp from '../allowlist_bypasses/jsonp.js';\nimport * as csp from '../csp.js';\nimport {Csp, Directive, Keyword} from '../csp.js';\nimport {Finding, Severity, Type} from '../finding.js';\nimport * as utils from '../utils.js';\n\n\n/**\n * A list of CSP directives that can allow XSS vulnerabilities if they fail\n * validation.\n */\nexport const DIRECTIVES_CAUSING_XSS: Directive[] =\n    [Directive.SCRIPT_SRC, Directive.OBJECT_SRC, Directive.BASE_URI];\n\n/**\n * A list of URL schemes that can allow XSS vulnerabilities when requests to\n * them are made.\n */\nexport const URL_SCHEMES_CAUSING_XSS: string[] = ['data:', 'http:', 'https:'];\n\n\n/**\n * Checks if passed csp allows inline scripts.\n * Findings of this check are critical and FP free.\n * unsafe-inline is ignored in the presence of a nonce or a hash. This check\n * does not account for this and therefore the effectiveCsp needs to be passed.\n *\n * Example policy where this check would trigger:\n *  script-src 'unsafe-inline'\n *\n * @param effectiveCsp A parsed csp that only contains values which\n *  are active in a certain version of CSP (e.g. no unsafe-inline if a nonce\n *  is present).\n */\nexport function checkScriptUnsafeInline(effectiveCsp: Csp): Finding[] {\n  const directiveName =\n      effectiveCsp.getEffectiveDirective(Directive.SCRIPT_SRC);\n  const values: string[] = effectiveCsp.directives[directiveName] || [];\n\n  // Check if unsafe-inline is present.\n  if (values.includes(Keyword.UNSAFE_INLINE)) {\n    return [new Finding(\n        Type.SCRIPT_UNSAFE_INLINE,\n        `'unsafe-inline' allows the execution of unsafe in-page scripts ` +\n            'and event handlers.',\n        Severity.HIGH, directiveName, Keyword.UNSAFE_INLINE)];\n  }\n\n  return [];\n}\n\n\n/**\n * Checks if passed csp allows eval in scripts.\n * Findings of this check have a medium severity and are FP free.\n *\n * Example policy where this check would trigger:\n *  script-src 'unsafe-eval'\n *\n * @param parsedCsp Parsed CSP.\n */\nexport function checkScriptUnsafeEval(parsedCsp: Csp): Finding[] {\n  const directiveName = parsedCsp.getEffectiveDirective(Directive.SCRIPT_SRC);\n  const values: string[] = parsedCsp.directives[directiveName] || [];\n\n  // Check if unsafe-eval is present.\n  if (values.includes(Keyword.UNSAFE_EVAL)) {\n    return [new Finding(\n        Type.SCRIPT_UNSAFE_EVAL,\n        `'unsafe-eval' allows the execution of code injected into DOM APIs ` +\n            'such as eval().',\n        Severity.MEDIUM_MAYBE, directiveName, Keyword.UNSAFE_EVAL)];\n  }\n\n  return [];\n}\n\n\n/**\n * Checks if plain URL schemes (e.g. http:) are allowed in sensitive directives.\n * Findings of this check have a high severity and are FP free.\n *\n * Example policy where this check would trigger:\n *  script-src https: http: data:\n *\n * @param parsedCsp Parsed CSP.\n */\nexport function checkPlainUrlSchemes(parsedCsp: Csp): Finding[] {\n  const violations: Finding[] = [];\n  const directivesToCheck =\n      parsedCsp.getEffectiveDirectives(DIRECTIVES_CAUSING_XSS);\n\n  for (const directive of directivesToCheck) {\n    const values = parsedCsp.directives[directive] || [];\n    for (const value of values) {\n      if (URL_SCHEMES_CAUSING_XSS.includes(value)) {\n        violations.push(new Finding(\n            Type.PLAIN_URL_SCHEMES,\n            value + ' URI in ' + directive + ' allows the execution of ' +\n                'unsafe scripts.',\n            Severity.HIGH, directive, value));\n      }\n    }\n  }\n\n  return violations;\n}\n\n\n/**\n * Checks if csp contains wildcards in sensitive directives.\n * Findings of this check have a high severity and are FP free.\n *\n * Example policy where this check would trigger:\n *  script-src *\n *\n * @param parsedCsp Parsed CSP.\n */\nexport function checkWildcards(parsedCsp: Csp): Finding[] {\n  const violations: Finding[] = [];\n  const directivesToCheck =\n      parsedCsp.getEffectiveDirectives(DIRECTIVES_CAUSING_XSS);\n\n  for (const directive of directivesToCheck) {\n    const values = parsedCsp.directives[directive] || [];\n    for (const value of values) {\n      const url = utils.getSchemeFreeUrl(value);\n      if (url === '*') {\n        violations.push(new Finding(\n            Type.PLAIN_WILDCARD, directive + ` should not allow '*' as source`,\n            Severity.HIGH, directive, value));\n        continue;\n      }\n    }\n  }\n\n  return violations;\n}\n\n/**\n * Checks if object-src is restricted to none either directly or via a\n * default-src.\n */\nexport function checkMissingObjectSrcDirective(parsedCsp: Csp): Finding[] {\n  let objectRestrictions: string[]|undefined = [];\n  if (Directive.OBJECT_SRC in parsedCsp.directives) {\n    objectRestrictions = parsedCsp.directives[Directive.OBJECT_SRC];\n  } else if (Directive.DEFAULT_SRC in parsedCsp.directives) {\n    objectRestrictions = parsedCsp.directives[Directive.DEFAULT_SRC];\n  }\n  if (objectRestrictions !== undefined && objectRestrictions.length >= 1) {\n    return [];\n  }\n  return [new Finding(\n      Type.MISSING_DIRECTIVES,\n      `Missing object-src allows the injection of plugins which can execute JavaScript. Can you set it to 'none'?`,\n      Severity.HIGH, Directive.OBJECT_SRC)];\n}\n\n/**\n * Checks if script-src is restricted either directly or via a default-src.\n */\nexport function checkMissingScriptSrcDirective(parsedCsp: Csp): Finding[] {\n  if (Directive.SCRIPT_SRC in parsedCsp.directives ||\n      Directive.DEFAULT_SRC in parsedCsp.directives) {\n    return [];\n  }\n  return [new Finding(\n      Type.MISSING_DIRECTIVES, 'script-src directive is missing.',\n      Severity.HIGH, Directive.SCRIPT_SRC)];\n}\n\n/**\n * Checks if the base-uri needs to be restricted and if so, whether it has been\n * restricted.\n */\nexport function checkMissingBaseUriDirective(parsedCsp: Csp): Finding[] {\n  return checkMultipleMissingBaseUriDirective([parsedCsp]);\n}\n\n/**\n * Checks if the base-uri needs to be restricted and if so, whether it has been\n * restricted.\n */\nexport function checkMultipleMissingBaseUriDirective(parsedCsps: Csp[]):\n    Finding[] {\n  // base-uri can be used to bypass nonce based CSPs and hash based CSPs that\n  // use strict dynamic\n  const needsBaseUri = (csp: Csp) =>\n      (csp.policyHasScriptNonces() ||\n       (csp.policyHasScriptHashes() && csp.policyHasStrictDynamic()));\n  const hasBaseUri = (csp: Csp) => Directive.BASE_URI in csp.directives;\n\n  if (parsedCsps.some(needsBaseUri) && !parsedCsps.some(hasBaseUri)) {\n    const description = 'Missing base-uri allows the injection of base tags. ' +\n        'They can be used to set the base URL for all relative (script) ' +\n        'URLs to an attacker controlled domain. ' +\n        `Can you set it to 'none' or 'self'?`;\n    return [new Finding(\n        Type.MISSING_DIRECTIVES, description, Severity.HIGH,\n        Directive.BASE_URI)];\n  }\n  return [];\n}\n\n\n/**\n * Checks if all necessary directives for preventing XSS are set.\n * Findings of this check have a high severity and are FP free.\n *\n * Example policy where this check would trigger:\n *  script-src 'none'\n *\n * @param parsedCsp Parsed CSP.\n */\nexport function checkMissingDirectives(parsedCsp: Csp): Finding[] {\n  return [\n    ...checkMissingObjectSrcDirective(parsedCsp),\n    ...checkMissingScriptSrcDirective(parsedCsp),\n    ...checkMissingBaseUriDirective(parsedCsp),\n  ];\n}\n\n\n/**\n * Checks if allowlisted origins are bypassable by JSONP/Angular endpoints.\n * High severity findings of this check are FP free.\n *\n * Example policy where this check would trigger:\n *  default-src 'none'; script-src www.google.com\n *\n * @param parsedCsp Parsed CSP.\n */\nexport function checkScriptAllowlistBypass(parsedCsp: Csp): Finding[] {\n  const violations: Finding[] = [];\n  const effectiveScriptSrcDirective =\n      parsedCsp.getEffectiveDirective(Directive.SCRIPT_SRC);\n  const scriptSrcValues =\n      parsedCsp.directives[effectiveScriptSrcDirective] || [];\n  if (scriptSrcValues.includes(Keyword.NONE)) {\n    return violations;\n  }\n\n  for (const value of scriptSrcValues) {\n    if (value === Keyword.SELF) {\n      violations.push(new Finding(\n          Type.SCRIPT_ALLOWLIST_BYPASS,\n          `'self' can be problematic if you host JSONP, AngularJS or user ` +\n              'uploaded files.',\n          Severity.MEDIUM_MAYBE, effectiveScriptSrcDirective, value));\n      continue;\n    }\n\n    // Ignore keywords, nonces and hashes (they start with a single quote).\n    if (value.startsWith('\\'')) {\n      continue;\n    }\n\n    // Ignore standalone schemes and things that don't look like URLs (no dot).\n    if (csp.isUrlScheme(value) || value.indexOf('.') === -1) {\n      continue;\n    }\n\n    const url = '//' + utils.getSchemeFreeUrl(value);\n\n    const angularBypass = utils.matchWildcardUrls(url, angular.URLS);\n\n    let jsonpBypass = utils.matchWildcardUrls(url, jsonp.URLS);\n\n    // Some JSONP bypasses only work in presence of unsafe-eval.\n    if (jsonpBypass) {\n      const evalRequired = jsonp.NEEDS_EVAL.includes(jsonpBypass.hostname);\n      const evalPresent = scriptSrcValues.includes(Keyword.UNSAFE_EVAL);\n      if (evalRequired && !evalPresent) {\n        jsonpBypass = null;\n      }\n    }\n\n    if (jsonpBypass || angularBypass) {\n      let bypassDomain = '';\n      let bypassTxt = '';\n      if (jsonpBypass) {\n        bypassDomain = jsonpBypass.hostname;\n        bypassTxt = ' JSONP endpoints';\n      }\n      if (angularBypass) {\n        bypassDomain = angularBypass.hostname;\n        bypassTxt += (bypassTxt.trim() === '') ? '' : ' and';\n        bypassTxt += ' Angular libraries';\n      }\n\n      violations.push(new Finding(\n          Type.SCRIPT_ALLOWLIST_BYPASS,\n          bypassDomain + ' is known to host' + bypassTxt +\n              ' which allow to bypass this CSP.',\n          Severity.HIGH, effectiveScriptSrcDirective, value));\n    } else {\n      violations.push(new Finding(\n          Type.SCRIPT_ALLOWLIST_BYPASS,\n          `No bypass found; make sure that this URL doesn't serve JSONP ` +\n              'replies or Angular libraries.',\n          Severity.MEDIUM_MAYBE, effectiveScriptSrcDirective, value));\n    }\n  }\n\n  return violations;\n}\n\n\n/**\n * Checks if allowlisted object-src origins are bypassable.\n * Findings of this check have a high severity and are FP free.\n *\n * Example policy where this check would trigger:\n *  default-src 'none'; object-src ajax.googleapis.com\n *\n * @param parsedCsp Parsed CSP.\n */\nexport function checkFlashObjectAllowlistBypass(parsedCsp: Csp): Finding[] {\n  const violations = [];\n  const effectiveObjectSrcDirective =\n      parsedCsp.getEffectiveDirective(Directive.OBJECT_SRC);\n  const objectSrcValues =\n      parsedCsp.directives[effectiveObjectSrcDirective] || [];\n\n  // If flash is not allowed in plugin-types, continue.\n  const pluginTypes = parsedCsp.directives[Directive.PLUGIN_TYPES];\n  if (pluginTypes && !pluginTypes.includes('application/x-shockwave-flash')) {\n    return [];\n  }\n\n  for (const value of objectSrcValues) {\n    // Nothing to do here if 'none'.\n    if (value === Keyword.NONE) {\n      return [];\n    }\n\n    const url = '//' + utils.getSchemeFreeUrl(value);\n    const flashBypass = utils.matchWildcardUrls(url, flash.URLS);\n\n    if (flashBypass) {\n      violations.push(new Finding(\n          Type.OBJECT_ALLOWLIST_BYPASS,\n          flashBypass.hostname +\n              ' is known to host Flash files which allow to bypass this CSP.',\n          Severity.HIGH, effectiveObjectSrcDirective, value));\n    } else if (effectiveObjectSrcDirective === Directive.OBJECT_SRC) {\n      violations.push(new Finding(\n          Type.OBJECT_ALLOWLIST_BYPASS,\n          `Can you restrict object-src to 'none' only?`, Severity.MEDIUM_MAYBE,\n          effectiveObjectSrcDirective, value));\n    }\n  }\n\n  return violations;\n}\n\n/**\n * Returns whether the given string \"looks\" like an IP address. This function\n * only uses basic heuristics and does not accept all valid IPs nor reject all\n * invalid IPs.\n */\nexport function looksLikeIpAddress(maybeIp: string): boolean {\n  if (maybeIp.startsWith('[') && maybeIp.endsWith(']')) {\n    // Looks like an IPv6 address and not a hostname (though it may be some\n    // nonsense like `[foo]`)\n    return true;\n  }\n  if (/^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$/.test(maybeIp)) {\n    // Looks like an IPv4 address (though it may be something like\n    // `500.600.700.800`\n    return true;\n  }\n  // Won't match IP addresses encoded in other manners (eg octal or\n  // decimal)\n  return false;\n}\n\n/**\n * Checks if csp contains IP addresses.\n * Findings of this check are informal only and are FP free.\n *\n * Example policy where this check would trigger:\n *  script-src 127.0.0.1\n *\n * @param parsedCsp Parsed CSP.\n */\nexport function checkIpSource(parsedCsp: Csp): Finding[] {\n  const violations: Finding[] = [];\n\n  // Function for checking if directive values contain IP addresses.\n  const checkIp = (directive: string, directiveValues: string[]) => {\n    for (const value of directiveValues) {\n      const host = utils.getHostname(value);\n      if (looksLikeIpAddress(host)) {\n        // Check if localhost.\n        // See 4.8 in https://www.w3.org/TR/CSP2/#match-source-expression\n        if (host === '127.0.0.1') {\n          violations.push(new Finding(\n              Type.IP_SOURCE,\n              directive + ' directive allows localhost as source. ' +\n                  'Please make sure to remove this in production environments.',\n              Severity.INFO, directive, value));\n        } else {\n          violations.push(new Finding(\n              Type.IP_SOURCE,\n              directive + ' directive has an IP-Address as source: ' + host +\n                  ' (will be ignored by browsers!). ',\n              Severity.INFO, directive, value));\n        }\n      }\n    }\n  };\n\n  // Apply check to values of all directives.\n  utils.applyCheckFunktionToDirectives(parsedCsp, checkIp);\n  return violations;\n}\n\n\n/**\n * Checks if csp contains directives that are deprecated in CSP3.\n * Findings of this check are informal only and are FP free.\n *\n * Example policy where this check would trigger:\n *  report-uri foo.bar/csp\n *\n * @param parsedCsp Parsed CSP.\n */\nexport function checkDeprecatedDirective(parsedCsp: Csp): Finding[] {\n  const violations = [];\n\n  // More details: https://www.chromestatus.com/feature/5769374145183744\n  if (Directive.REFLECTED_XSS in parsedCsp.directives) {\n    violations.push(new Finding(\n        Type.DEPRECATED_DIRECTIVE,\n        'reflected-xss is deprecated since CSP2. ' +\n            'Please, use the X-XSS-Protection header instead.',\n        Severity.INFO, Directive.REFLECTED_XSS));\n  }\n\n  // More details: https://www.chromestatus.com/feature/5680800376815616\n  if (Directive.REFERRER in parsedCsp.directives) {\n    violations.push(new Finding(\n        Type.DEPRECATED_DIRECTIVE,\n        'referrer is deprecated since CSP2. ' +\n            'Please, use the Referrer-Policy header instead.',\n        Severity.INFO, Directive.REFERRER));\n  }\n\n  // More details: https://github.com/w3c/webappsec-csp/pull/327\n  if (Directive.DISOWN_OPENER in parsedCsp.directives) {\n    violations.push(new Finding(\n        Type.DEPRECATED_DIRECTIVE,\n        'disown-opener is deprecated since CSP3. ' +\n            'Please, use the Cross Origin Opener Policy header instead.',\n        Severity.INFO, Directive.DISOWN_OPENER));\n  }\n  return violations;\n}\n\n\n/**\n * Checks if csp nonce is at least 8 characters long.\n * Findings of this check are of medium severity and are FP free.\n *\n * Example policy where this check would trigger:\n *  script-src 'nonce-short'\n *\n * @param parsedCsp Parsed CSP.\n */\nexport function checkNonceLength(parsedCsp: Csp): Finding[] {\n  const noncePattern = new RegExp('^\\'nonce-(.+)\\'$');\n  const violations: Finding[] = [];\n\n  utils.applyCheckFunktionToDirectives(\n      parsedCsp, (directive, directiveValues) => {\n        for (const value of directiveValues) {\n          const match = value.match(noncePattern);\n          if (!match) {\n            continue;\n          }\n          // Not a nonce.\n\n          const nonceValue = match[1];\n          if (nonceValue.length < 8) {\n            violations.push(new Finding(\n                Type.NONCE_LENGTH,\n                'Nonces should be at least 8 characters long.', Severity.MEDIUM,\n                directive, value));\n          }\n\n          if (!csp.isNonce(value, true)) {\n            violations.push(new Finding(\n                Type.NONCE_CHARSET,\n                'Nonces should only use the base64 charset.', Severity.INFO,\n                directive, value));\n          }\n        }\n      });\n\n  return violations;\n}\n\n\n/**\n * Checks if CSP allows sourcing from http://\n * Findings of this check are of medium severity and are FP free.\n *\n * Example policy where this check would trigger:\n *  report-uri http://foo.bar/csp\n *\n * @param parsedCsp Parsed CSP.\n */\nexport function checkSrcHttp(parsedCsp: Csp): Finding[] {\n  const violations: Finding[] = [];\n\n  utils.applyCheckFunktionToDirectives(\n      parsedCsp, (directive, directiveValues) => {\n        for (const value of directiveValues) {\n          const description = directive === Directive.REPORT_URI ?\n              'Use HTTPS to send violation reports securely.' :\n              'Allow only resources downloaded over HTTPS.';\n          if (value.startsWith('http://')) {\n            violations.push(new Finding(\n                Type.SRC_HTTP, description, Severity.MEDIUM, directive, value));\n          }\n        }\n      });\n\n  return violations;\n}\n\n/**\n * Checks if the policy has configured reporting in a robust manner.\n */\nexport function checkHasConfiguredReporting(parsedCsp: Csp): Finding[] {\n  const reportUriValues: string[] =\n      parsedCsp.directives[Directive.REPORT_URI] || [];\n  if (reportUriValues.length > 0) {\n    return [];\n  }\n\n  const reportToValues: string[] =\n      parsedCsp.directives[Directive.REPORT_TO] || [];\n  if (reportToValues.length > 0) {\n    return [new Finding(\n        Type.REPORT_TO_ONLY,\n        `This CSP policy only provides a reporting destination via the 'report-to' directive. This directive is only supported in Chromium-based browsers so it is recommended to also use a 'report-uri' directive.`,\n        Severity.INFO, Directive.REPORT_TO)];\n  }\n\n  return [new Finding(\n      Type.REPORTING_DESTINATION_MISSING,\n      'This CSP policy does not configure a reporting destination. This makes it difficult to maintain the CSP policy over time and monitor for any breakages.',\n      Severity.INFO, Directive.REPORT_URI)];\n}\n"]}