{"version":3,"file":"strictcsp_checks.js","sourceRoot":"","sources":["../../../../../../../../front_end/third_party/csp_evaluator/package/checks/strictcsp_checks.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @fileoverview Collection of \"strict\" CSP and backward compatibility checks.\n * A \"strict\" CSP is based on nonces or hashes and drops the allowlist.\n * These checks ensure that 'strict-dynamic' and a CSP nonce/hash are present.\n * Due to 'strict-dynamic' any allowlist will get dropped in CSP3.\n * The backward compatibility checks ensure that the strict nonce/hash based CSP\n * will be a no-op in older browsers by checking for presence of 'unsafe-inline'\n * (will be dropped in newer browsers if a nonce or hash is present) and for\n * prsensence of http: and https: url schemes (will be droped in the presence of\n * 'strict-dynamic' in newer browsers).\n *\n * @author lwe@google.com (Lukas Weichselbaum)\n *\n * @license\n * Copyright 2016 Google Inc. All rights reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as csp from '../csp.js';\nimport {Csp, Keyword} from '../csp.js';\n\nimport {Finding, Severity, Type} from '../finding.js';\n\n\n/**\n * Checks if 'strict-dynamic' is present.\n *\n * Example policy where this check would trigger:\n *  script-src foo.bar\n *\n * @param parsedCsp A parsed csp.\n */\nexport function checkStrictDynamic(parsedCsp: Csp): Finding[] {\n  const directiveName =\n      parsedCsp.getEffectiveDirective(csp.Directive.SCRIPT_SRC);\n  const values: string[] = parsedCsp.directives[directiveName] || [];\n\n  const schemeOrHostPresent = values.some((v) => !v.startsWith('\\''));\n\n  // Check if strict-dynamic is present in case a host/scheme allowlist is used.\n  if (schemeOrHostPresent && !values.includes(Keyword.STRICT_DYNAMIC)) {\n    return [new Finding(\n        Type.STRICT_DYNAMIC,\n        'Host allowlists can frequently be bypassed. Consider using ' +\n            '\\'strict-dynamic\\' in combination with CSP nonces or hashes.',\n        Severity.STRICT_CSP, directiveName)];\n  }\n\n  return [];\n}\n\n\n/**\n * Checks if 'strict-dynamic' is only used together with a nonce or a hash.\n *\n * Example policy where this check would trigger:\n *  script-src 'strict-dynamic'\n *\n * @param parsedCsp A parsed csp.\n */\nexport function checkStrictDynamicNotStandalone(parsedCsp: Csp): Finding[] {\n  const directiveName =\n      parsedCsp.getEffectiveDirective(csp.Directive.SCRIPT_SRC);\n  const values: string[] = parsedCsp.directives[directiveName] || [];\n\n  if (values.includes(Keyword.STRICT_DYNAMIC) &&\n      (!parsedCsp.policyHasScriptNonces() &&\n       !parsedCsp.policyHasScriptHashes())) {\n    return [new Finding(\n        Type.STRICT_DYNAMIC_NOT_STANDALONE,\n        '\\'strict-dynamic\\' without a CSP nonce/hash will block all scripts.',\n        Severity.INFO, directiveName)];\n  }\n\n  return [];\n}\n\n\n/**\n * Checks if the policy has 'unsafe-inline' when a nonce or hash are present.\n * This will ensure backward compatibility to browser that don't support\n * CSP nonces or hasehs.\n *\n * Example policy where this check would trigger:\n *  script-src 'nonce-test'\n *\n * @param parsedCsp A parsed csp.\n */\nexport function checkUnsafeInlineFallback(parsedCsp: Csp): Finding[] {\n  if (!parsedCsp.policyHasScriptNonces() &&\n      !parsedCsp.policyHasScriptHashes()) {\n    return [];\n  }\n\n  const directiveName =\n      parsedCsp.getEffectiveDirective(csp.Directive.SCRIPT_SRC);\n  const values: string[] = parsedCsp.directives[directiveName] || [];\n\n  if (!values.includes(Keyword.UNSAFE_INLINE)) {\n    return [new Finding(\n        Type.UNSAFE_INLINE_FALLBACK,\n        'Consider adding \\'unsafe-inline\\' (ignored by browsers supporting ' +\n            'nonces/hashes) to be backward compatible with older browsers.',\n        Severity.STRICT_CSP, directiveName)];\n  }\n\n  return [];\n}\n\n\n/**\n * Checks if the policy has an allowlist fallback (* or http: and https:) when\n * 'strict-dynamic' is present.\n * This will ensure backward compatibility to browser that don't support\n * 'strict-dynamic'.\n *\n * Example policy where this check would trigger:\n *  script-src 'nonce-test' 'strict-dynamic'\n *\n * @param parsedCsp A parsed csp.\n */\nexport function checkAllowlistFallback(parsedCsp: Csp): Finding[] {\n  const directiveName =\n      parsedCsp.getEffectiveDirective(csp.Directive.SCRIPT_SRC);\n  const values: string[] = parsedCsp.directives[directiveName] || [];\n\n  if (!values.includes(Keyword.STRICT_DYNAMIC)) {\n    return [];\n  }\n\n  // Check if there's already an allowlist (url scheme or url)\n  if (!values.some(\n          (v) => ['http:', 'https:', '*'].includes(v) || v.includes('.'))) {\n    return [new Finding(\n        Type.ALLOWLIST_FALLBACK,\n        'Consider adding https: and http: url schemes (ignored by browsers ' +\n            'supporting \\'strict-dynamic\\') to be backward compatible with older ' +\n            'browsers.',\n        Severity.STRICT_CSP, directiveName)];\n  }\n\n  return [];\n}\n\n\n/**\n * Checks if the policy requires Trusted Types for scripts.\n *\n * I.e. the policy should have the following dirctive:\n *  require-trusted-types-for 'script'\n *\n * @param parsedCsp A parsed csp.\n */\nexport function checkRequiresTrustedTypesForScripts(parsedCsp: Csp): Finding[] {\n  const directiveName =\n      parsedCsp.getEffectiveDirective(csp.Directive.REQUIRE_TRUSTED_TYPES_FOR);\n  const values: string[] = parsedCsp.directives[directiveName] || [];\n\n  if (!values.includes(csp.TrustedTypesSink.SCRIPT)) {\n    return [new Finding(\n        Type.REQUIRE_TRUSTED_TYPES_FOR_SCRIPTS,\n        'Consider requiring Trusted Types for scripts to lock down DOM XSS ' +\n            'injection sinks. You can do this by adding ' +\n            '\"require-trusted-types-for \\'script\\'\" to your policy.',\n        Severity.INFO, csp.Directive.REQUIRE_TRUSTED_TYPES_FOR)];\n  }\n\n  return [];\n}\n"]}