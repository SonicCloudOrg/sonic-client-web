{"version":3,"file":"ClientVariations.test.js","sourceRoot":"","sources":["../../../../../../../front_end/third_party/chromium/client-variations/ClientVariations.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as ClientVariations from './client-variations.js';\n\ndescribe('formatClientVariations', () => {\n  it('formats input containing both types of variation IDs', () => {\n    const result = ClientVariations.formatClientVariations({\n      variationIds: [111, 222, 333],\n      triggerVariationIds: [444, 555],\n    });\n    assert.deepEqual(\n        result,\n        'message ClientVariations {\\n  // Active Google-visible variation IDs on this client. These are reported for analysis, but do not directly affect any server-side behavior.\\n  repeated int32 variation_id = [111, 222, 333];\\n  // Active Google-visible variation IDs on this client that trigger server-side behavior. These are reported for analysis *and* directly affect server-side behavior.\\n  repeated int32 trigger_variation_id = [444, 555];\\n}');\n  });\n\n  it('formats input containing only plain variation IDs', () => {\n    const result = ClientVariations.formatClientVariations({\n      variationIds: [111, 222, 333],\n      triggerVariationIds: [],\n    });\n    assert.deepEqual(\n        result,\n        'message ClientVariations {\\n  // Active Google-visible variation IDs on this client. These are reported for analysis, but do not directly affect any server-side behavior.\\n  repeated int32 variation_id = [111, 222, 333];\\n}');\n  });\n\n  it('formats input containing only trigger variation IDs', () => {\n    const result = ClientVariations.formatClientVariations({\n      variationIds: [],\n      triggerVariationIds: [444, 555],\n    });\n    assert.deepEqual(\n        result,\n        'message ClientVariations {\\n  // Active Google-visible variation IDs on this client that trigger server-side behavior. These are reported for analysis *and* directly affect server-side behavior.\\n  repeated int32 trigger_variation_id = [444, 555];\\n}');\n  });\n\n  it('formats input containing no variation IDs', () => {\n    const result = ClientVariations.formatClientVariations({\n      variationIds: [],\n      triggerVariationIds: [],\n    });\n    assert.deepEqual(result, 'message ClientVariations {\\n}');\n  });\n});\n\ndescribe('parseClientVariations', () => {\n  it('returns empty lists for unparseable text', () => {\n    const result = ClientVariations.parseClientVariations('gibberish');\n    assert.deepEqual(result, {\n      variationIds: [],\n      triggerVariationIds: [],\n    });\n  });\n\n  it('returns empty lists for empty input', () => {\n    const result = ClientVariations.parseClientVariations('');\n    assert.deepEqual(result, {\n      variationIds: [],\n      triggerVariationIds: [],\n    });\n  });\n\n  it('parses a valid serialized proto', () => {\n    const result = ClientVariations.parseClientVariations('CG8I3gEIzQIYvAMYqwQ=');\n    assert.deepEqual(result, {\n      variationIds: [111, 222, 333],\n      triggerVariationIds: [444, 555],\n    });\n  });\n\n  // Please refer crbug.com/1160346 for more details.\n  it('returns empty lists for invalid encoded data', () => {\n    const result = ClientVariations.parseClientVariations('Z2liYmVyaXNo');\n    assert.deepEqual(result, {\n      variationIds: [],\n      triggerVariationIds: [],\n    });\n  });\n});\n"]}