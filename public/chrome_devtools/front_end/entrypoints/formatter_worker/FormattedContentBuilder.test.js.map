{"version":3,"file":"FormattedContentBuilder.test.js","sourceRoot":"","sources":["../../../../../../front_end/entrypoints/formatter_worker/FormattedContentBuilder.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as FormatterWorker from './formatter_worker.js';\n\ndescribe('FormattedContentBuilder', () => {\n  it('can add a token successfully', () => {\n    const formattedContentBuilder = new FormatterWorker.FormattedContentBuilder.FormattedContentBuilder('  ');\n    formattedContentBuilder.addToken('Test Script', 0);\n    assert.strictEqual(formattedContentBuilder.content(), 'Test Script');\n  });\n\n  it('returns the previous enforceSpaceBetweenWords value', () => {\n    const formattedContentBuilder = new FormatterWorker.FormattedContentBuilder.FormattedContentBuilder('  ');\n    formattedContentBuilder.setEnforceSpaceBetweenWords(false);\n    const result = formattedContentBuilder.setEnforceSpaceBetweenWords(true);\n    assert.strictEqual(result, false);\n  });\n\n  it('should squash new lines by default', () => {\n    const builder = new FormatterWorker.FormattedContentBuilder.FormattedContentBuilder('  ');\n    builder.addToken('Token 1', 0);\n    builder.addNewLine();\n    builder.addNewLine();\n    builder.addToken('Token 2', 0);\n\n    assert.strictEqual(builder.content(), 'Token 1\\nToken 2');\n  });\n\n  it('should respect the noSquash parameter', () => {\n    const builder = new FormatterWorker.FormattedContentBuilder.FormattedContentBuilder('  ');\n    builder.addToken('Token 1', 0);\n    builder.addNewLine();\n    builder.addNewLine(true);\n    builder.addToken('Token 2', 0);\n\n    assert.strictEqual(builder.content(), 'Token 1\\n\\nToken 2');\n  });\n\n  it('should avoid leading newlines', () => {\n    const builder = new FormatterWorker.FormattedContentBuilder.FormattedContentBuilder('  ');\n    builder.addNewLine();\n    builder.addToken('Token', 0);\n\n    assert.strictEqual(builder.content(), 'Token');\n  });\n\n  it('not add more than one newline at the end', () => {\n    const builder = new FormatterWorker.FormattedContentBuilder.FormattedContentBuilder('  ');\n    builder.addToken('Token', 0);\n    builder.addNewLine();\n    builder.addNewLine(true);\n\n    assert.strictEqual(builder.content(), 'Token\\n');\n  });\n\n  it('should not collapse hard spaces', () => {\n    const builder = new FormatterWorker.FormattedContentBuilder.FormattedContentBuilder('  ');\n    builder.addToken('Token 1', 0);\n    builder.addHardSpace();\n    builder.addHardSpace();\n    builder.addHardSpace();\n    builder.addToken('Token 2', 0);\n\n    assert.strictEqual(builder.content(), 'Token 1   Token 2', 'expected three spaces between the tokens');\n  });\n\n  it('should collapse soft spaces', () => {\n    const builder = new FormatterWorker.FormattedContentBuilder.FormattedContentBuilder('  ');\n    builder.addToken('Token 1', 0);\n    builder.addSoftSpace();\n    builder.addSoftSpace();\n    builder.addSoftSpace();\n    builder.addToken('Token 2', 0);\n\n    assert.strictEqual(builder.content(), 'Token 1 Token 2', 'expected a single space between the tokens');\n  });\n\n  it('should ignore a soft space after a hard space', () => {\n    const builder = new FormatterWorker.FormattedContentBuilder.FormattedContentBuilder('  ');\n    builder.addToken('Token 1', 0);\n    builder.addHardSpace();\n    builder.addSoftSpace();\n    builder.addToken('Token 2', 0);\n\n    assert.strictEqual(builder.content(), 'Token 1 Token 2', 'expected a single space between the tokens');\n  });\n\n  it('should ignore a soft space before a hard space', () => {\n    const builder = new FormatterWorker.FormattedContentBuilder.FormattedContentBuilder('  ');\n    builder.addToken('Token 1', 0);\n    builder.addSoftSpace();\n    builder.addHardSpace();\n    builder.addToken('Token 2', 0);\n\n    assert.strictEqual(builder.content(), 'Token 1 Token 2', 'expected a single space between the tokens');\n  });\n\n  it('should handle the nesting level correctly', () => {\n    const builder = new FormatterWorker.FormattedContentBuilder.FormattedContentBuilder('  ');\n    builder.addToken('Token 1', 0);\n    builder.addNewLine();\n    builder.increaseNestingLevel();\n    builder.addToken('Token 2', 0);\n    builder.addNewLine();\n    builder.increaseNestingLevel();\n    builder.addToken('Token 3', 0);\n    builder.addNewLine();\n    builder.decreaseNestingLevel();\n    builder.addToken('Token 4', 0);\n    builder.addNewLine();\n    builder.decreaseNestingLevel();\n    builder.addToken('Token 5', 0);\n    builder.addNewLine();\n    builder.decreaseNestingLevel();\n    builder.addToken('Token 6', 0);\n\n    assert.strictEqual(builder.content(), 'Token 1\\n  Token 2\\n    Token 3\\n  Token 4\\nToken 5\\nToken 6');\n  });\n\n  it('should allow mapping from unformatted source positions to formatted ones', () => {\n    const builder = new FormatterWorker.FormattedContentBuilder.FormattedContentBuilder('  ');\n    builder.addToken('#main', 0);\n    builder.addSoftSpace();\n    builder.addToken('{', 5);\n    builder.addNewLine();\n    builder.increaseNestingLevel();\n    builder.addToken('color', 6);\n    builder.addToken(':', 11);\n    builder.addSoftSpace();\n    builder.addToken('red', 13);\n    builder.addToken(';', 16);\n    builder.addNewLine();\n    builder.decreaseNestingLevel();\n    builder.addToken('}', 17);\n    builder.addNewLine();\n\n    const {original, formatted} = builder.mapping;\n    assert.deepEqual(original, [0, 5, 6, 17]);\n    assert.deepEqual(formatted, [0, 6, 10, 22]);\n    assert.strictEqual(builder.content(), '#main {\\n  color: red;\\n}\\n');\n  });\n\n  it('should not cache the identation for more than 20 nesting levels', () => {\n    let x = 0;\n    const builder = new FormatterWorker.FormattedContentBuilder.FormattedContentBuilder({\n      toString() {\n        return x++;\n      },\n    } as unknown as string);\n    for (let i = 0; i < 20; i++) {\n      builder.increaseNestingLevel();\n    }\n\n    builder.addToken('Token 1', 0);\n    builder.addNewLine();\n    builder.addToken('Token 2', 0);\n\n    assert.strictEqual(builder.content(), 'Token 1\\n012345678910111213141516171819Token 2');\n\n    builder.addNewLine();\n    builder.addToken('Token 3', 0);\n\n    assert.strictEqual(\n        builder.content(), 'Token 1\\n012345678910111213141516171819Token 2\\n012345678910111213141516171819Token 3');\n\n    builder.increaseNestingLevel();\n\n    builder.addNewLine();\n    builder.addToken('Token 4', 0);\n\n    assert.strictEqual(\n        builder.content(),\n        'Token 1\\n012345678910111213141516171819Token 2\\n012345678910111213141516171819Token 3\\n202122232425262728293031323334353637383940Token 4');\n  });\n});\n"]}