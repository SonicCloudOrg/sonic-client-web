{"version":3,"file":"ScopeParser.test.js","sourceRoot":"","sources":["../../../../../../front_end/entrypoints/formatter_worker/ScopeParser.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as FormatterWorker from './formatter_worker.js';\n\ndescribe('ScopeParser', () => {\n  describe('parseScopes', () => {\n    const {parseScopes} = FormatterWorker.ScopeParser;\n\n    it('parses simple function', () => {\n      const scopes = parseScopes('function foo(a){}');\n\n      const innerScope = scopes?.children[0];\n      assert.strictEqual(innerScope?.start, 12);\n      assert.strictEqual(innerScope?.end, 17);\n      assert.deepEqual(innerScope?.variables?.get('a')?.uses.map(u => u.offset), [13]);\n    });\n\n    it('parses arrow function', () => {\n      const scopes = parseScopes('let f = (a) => {}');\n\n      assert.strictEqual(scopes?.children.length, 1);\n      const innerScope = scopes?.children[0];\n      assert.strictEqual(innerScope?.start, 8);\n      assert.strictEqual(innerScope?.end, 17);\n      assert.deepEqual(innerScope?.variables?.size, 1);\n      assert.deepEqual(innerScope?.variables?.get('a')?.uses.map(u => u.offset), [9]);\n    });\n\n    it('parses for loop', () => {\n      const scopes = parseScopes('for (let i = 0; i < 3; i++) console.log(i);');\n\n      const innerScope = scopes?.children[0];\n      assert.strictEqual(innerScope?.start, 0);\n      assert.strictEqual(innerScope?.end, 43);\n      assert.deepEqual(innerScope?.variables?.size, 1);\n      assert.deepEqual(innerScope?.variables?.get('i')?.uses.map(u => u.offset), [9, 16, 23, 40]);\n    });\n\n    it('parses block scope', () => {\n      const scopes = parseScopes('let x; { let y; }');\n\n      assert.strictEqual(scopes?.start, 0);\n      assert.strictEqual(scopes?.end, 17);\n      assert.deepEqual(scopes?.variables?.size, 1);\n      assert.deepEqual(scopes?.variables?.get('x')?.uses.map(u => u.offset), [4]);\n      const blockScope = scopes?.children[0];\n      assert.strictEqual(blockScope?.start, 7);\n      assert.strictEqual(blockScope?.end, 17);\n      assert.deepEqual(blockScope?.variables?.size, 1);\n      assert.deepEqual(blockScope?.variables?.get('y')?.uses.map(u => u.offset), [13]);\n    });\n\n    it('parses object destructuring', () => {\n      const source = 'let {x: y} = {}';\n      const scopes = parseScopes(source);\n\n      assert.exists(scopes);\n      assert.isEmpty(scopes.children);\n      assert.strictEqual(scopes.variables.size, 1);\n      const [[name, {uses}]] = scopes.variables;\n      assert.strictEqual(name, 'y');\n      assert.lengthOf(uses, 1);\n      assert.strictEqual(uses[0].offset, source.indexOf('y'));\n    });\n\n    it('parses object destructuring with default values', () => {\n      const source = 'let {x: y = 42} = {}';\n      const scopes = parseScopes(source);\n\n      assert.exists(scopes);\n      assert.isEmpty(scopes.children);\n      assert.strictEqual(scopes.variables.size, 1);\n      const [[name, {uses}]] = scopes.variables;\n      assert.strictEqual(name, 'y');\n      assert.lengthOf(uses, 1);\n      assert.strictEqual(uses[0].offset, source.indexOf('y'));\n    });\n\n    it('parses object destructuring with short-hand syntax', () => {\n      const source = 'let {x} = {}';\n      const scopes = parseScopes(source);\n\n      assert.exists(scopes);\n      assert.isEmpty(scopes.children);\n      assert.strictEqual(scopes.variables.size, 1);\n      const [[name, {uses}]] = scopes.variables;\n      assert.strictEqual(name, 'x');\n      assert.lengthOf(uses, 1);\n      assert.strictEqual(uses[0].offset, source.indexOf('x'));\n    });\n\n    it('parses object destructuring with short-hand syntax and default values', () => {\n      const source = 'let {x = 42} = {}';\n      const scopes = parseScopes(source);\n\n      assert.exists(scopes);\n      assert.isEmpty(scopes.children);\n      assert.strictEqual(scopes.variables.size, 1);\n      const [[name, {uses}]] = scopes.variables;\n      assert.strictEqual(name, 'x');\n      assert.lengthOf(uses, 1);\n      assert.strictEqual(uses[0].offset, source.indexOf('x'));\n    });\n\n    it('parses ES modules', () => {\n      const source = 'import * as Foo from \"./foo.js\"; Foo.foo();';\n      const scopes = parseScopes(source, 'module');\n\n      assert.exists(scopes);\n      assert.isEmpty(scopes.children);\n      assert.strictEqual(scopes.variables.size, 1);\n      const [[name, {uses}]] = scopes.variables;\n      assert.strictEqual(name, 'Foo');\n      assert.lengthOf(uses, 1);\n      const firstOccurence = source.indexOf('Foo');\n      assert.strictEqual(uses[0].offset, source.indexOf('Foo', firstOccurence + 1));\n    });\n  });\n});\n"]}