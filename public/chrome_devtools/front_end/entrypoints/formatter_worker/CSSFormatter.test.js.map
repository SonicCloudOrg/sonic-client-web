{"version":3,"file":"CSSFormatter.test.js","sourceRoot":"","sources":["../../../../../../front_end/entrypoints/formatter_worker/CSSFormatter.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,eAAe,MAAM,uBAAuB,CAAC;AAEzD,SAAS,SAAS,CAAC,IAAY;IAC7B,OAAO,eAAe,CAAC,eAAe,CAAC,MAAM,CAAC,UAAU,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,OAAO,CAAC;AAChF,CAAC;AAED,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;IAC5B,EAAE,CAAC,mCAAmC,EAAE,GAAG,EAAE;QAC3C,MAAM,aAAa,GAAG,SAAS,CAAC,eAAe,CAAC,CAAC;QACjD,MAAM,CAAC,WAAW,CAAC,aAAa,EAAE;;;CAGrC,CAAC,CAAC;IACD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8BAA8B,EAAE,GAAG,EAAE;QACtC,MAAM,aAAa,GAAG,SAAS,CAAC,eAAe,CAAC,CAAC;QACjD,MAAM,CAAC,WAAW,CAAC,aAAa,EAAE,eAAe,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACnC,MAAM,aAAa,GAAG,SAAS,CAAC,oBAAoB,CAAC,CAAC;QACtD,MAAM,CAAC,WAAW,CAAC,aAAa,EAAE,oBAAoB,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sBAAsB,EAAE,GAAG,EAAE;QAC9B,MAAM,aAAa,GAAG,SAAS,CAC3B,2GAA2G,CAAC,CAAC;QACjH,MAAM,CAAC,WAAW,CAAC,aAAa,EAAE;;;;;;;;;CASrC,CAAC,CAAC;IACD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE,GAAG,EAAE;QACvC,MAAM,aAAa,GAAG,SAAS,CAAC,iCAAiC,CAAC,CAAC;QACnE,MAAM,CAAC,WAAW,CAAC,aAAa,EAAE;;;CAGrC,CAAC,CAAC;IACD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;QACzC,MAAM,aAAa,GACf,SAAS,CAAC,4FAA4F,CAAC,CAAC;QAC5G,MAAM,CAAC,WAAW,CAAC,aAAa,EAAE;;;;CAIrC,CAAC,CAAC;IACD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;QACzC,MAAM,aAAa,GAAG,SAAS,CAC3B,0JAA0J,CAAC,CAAC;QAChK,MAAM,CAAC,WAAW,CAAC,aAAa,EAAE;;;;;;;;;;;;;;;;;;;;CAoBrC,CAAC,CAAC;IACD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oDAAoD,EAAE,GAAG,EAAE;QAC5D,MAAM,aAAa,GAAG,SAAS,CAAC;;oBAEhB,CAAC,CAAC;QAClB,MAAM,CAAC,WAAW,CAAC,aAAa,EAAE;;;CAGrC,CAAC,CAAC;IACD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;QAC7C,MAAM,aAAa,GAAG,SAAS,CAAC,8CAA8C,CAAC,CAAC;QAChF,MAAM,CAAC,WAAW,CAAC,aAAa,EAAE;;;CAGrC,CAAC,CAAC;IACD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;QAC/C,MAAM,aAAa,GAAG,SAAS,CAC3B,iKAAiK,CAAC,CAAC;QACvK,MAAM,CAAC,WAAW,CAAC,aAAa,EAAE;;;;;;;;;CASrC,CAAC,CAAC;IACD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;QACxC,MAAM,aAAa,GAAG,SAAS,CAAC,sCAAsC,CAAC,CAAC;QACxE,MAAM,CAAC,WAAW,CAAC,aAAa,EAAE;;;CAGrC,CAAC,CAAC;IACD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE,GAAG,EAAE;QACvC,MAAM,aAAa,GAAG,SAAS,CAAC,wEAAwE,CAAC,CAAC;QAC1G,MAAM,CAAC,WAAW,CAAC,aAAa,EAAE;;;CAGrC,CAAC,CAAC;IACD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;QACxD,MAAM,aAAa,GACf,SAAS,CAAC,8FAA8F,CAAC,CAAC;QAC9G,MAAM,CAAC,WAAW,CAAC,aAAa,EAAE;;;;CAIrC,CAAC,CAAC;IACD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;QACxD,MAAM,aAAa,GAAG,SAAS,CAC3B,wIAAwI,CAAC,CAAC;QAC9I,MAAM,CAAC,WAAW,CAAC,aAAa,EAAE;;;;;;;;;;;;;;;;;;;CAmBrC,CAAC,CAAC;IACD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;QAC1C,MAAM,aAAa,GAAG,SAAS,CAAC,6DAA6D,CAAC,CAAC;QAC/F,MAAM,CAAC,WAAW,CAAC,aAAa,EAAE;;;CAGrC,CAAC,CAAC;IACD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;QACrC,MAAM,aAAa,GAAG,SAAS,CAAC,+CAA+C,CAAC,CAAC;QACjF,MAAM,CAAC,WAAW,CAAC,aAAa,EAAE;;;;;;;CAOrC,CAAC,CAAC;IACD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;QACzC,MAAM,aAAa,GAAG,SAAS,CAAC,oEAAoE,CAAC,CAAC;QACtG,MAAM,CAAC,WAAW,CAAC,aAAa,EAAE;;;;;;;;;CASrC,CAAC,CAAC;IACD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uDAAuD,EAAE,GAAG,EAAE;QAC/D,MAAM,aAAa,GAAG,SAAS,CAAC,kEAAkE,CAAC,CAAC;QACpG,MAAM,CAAC,WAAW,CAAC,aAAa,EAAE;;;;;CAKrC,CAAC,CAAC;IACD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as FormatterWorker from './formatter_worker.js';\n\nfunction formatCSS(text: string): string {\n  return FormatterWorker.FormatterWorker.format('text/css', text, '  ').content;\n}\n\ndescribe('CSSFormatter', () => {\n  it('formats simple selector correctly', () => {\n    const formattedCode = formatCSS('a{color:red;}');\n    assert.strictEqual(formattedCode, `a {\n  color: red;\n}\n`);\n  });\n\n  it('formats selector with quotes', () => {\n    const formattedCode = formatCSS('a[href=\\'/\\']');\n    assert.strictEqual(formattedCode, 'a[href=\\'/\\']');\n  });\n\n  it('formats compound selector', () => {\n    const formattedCode = formatCSS('#content > a:hover');\n    assert.strictEqual(formattedCode, '#content > a:hover');\n  });\n\n  it('formats color values', () => {\n    const formattedCode = formatCSS(\n        'p { color: color; red: red; color: #000; color: #FFF; color: #123AbC; color: #faebfe; color:papayawhip; }');\n    assert.strictEqual(formattedCode, `p {\n  color: color;\n  red: red;\n  color: #000;\n  color: #FFF;\n  color: #123AbC;\n  color: #faebfe;\n  color: papayawhip;\n}\n`);\n  });\n\n  it('formats important declaration', () => {\n    const formattedCode = formatCSS('p { margin: -10px !important; }');\n    assert.strictEqual(formattedCode, `p {\n  margin: -10px !important;\n}\n`);\n  });\n\n  it('formats with comments correctly', () => {\n    const formattedCode =\n        formatCSS('a { /* pre-comment */ color /* after name */ : /* before value */ red /* post-comment */ }');\n    assert.strictEqual(formattedCode, `a {\n  /* pre-comment */\n  color /* after name */ : /* before value */ red /* post-comment */\n}\n`);\n  });\n\n  it('formats media queries correctly', () => {\n    const formattedCode = formatCSS(\n        '@media screen{  html{color:green;foo-property:bar-value}} body{background-color:black;} @media screen,print{body{line-height:1.2}}span{line-height:10px}');\n    assert.strictEqual(formattedCode, `@media screen {\n  html {\n    color: green;\n    foo-property: bar-value\n  }\n}\n\nbody {\n  background-color: black;\n}\n\n@media screen,print {\n  body {\n    line-height: 1.2\n  }\n}\n\nspan {\n  line-height: 10px\n}\n`);\n  });\n\n  it('formats styles with prepending new lines correctly', () => {\n    const formattedCode = formatCSS(`\n\ndiv { color: red; }`);\n    assert.strictEqual(formattedCode, `div {\n  color: red;\n}\n`);\n  });\n\n  it('formats complex selectors correctly', () => {\n    const formattedCode = formatCSS('a.b.c:hover,.d.e.f.g::before,h.i{color:red;}');\n    assert.strictEqual(formattedCode, `a.b.c:hover,.d.e.f.g::before,h.i {\n  color: red;\n}\n`);\n  });\n\n  it('formats font-face selectors correctly', () => {\n    const formattedCode = formatCSS(\n        '@font-face{font-family:MyHelvetica;src:local(\\'Helvetica Neue Bold\\'),local(\\'HelveticaNeue-Bold\\'),url(MgOpenModernaBold.ttf);font-weight:bold;}div{color:red}');\n    assert.strictEqual(formattedCode, `@font-face {\n  font-family: MyHelvetica;\n  src: local(\\'Helvetica Neue Bold\\'),local(\\'HelveticaNeue-Bold\\'),url(MgOpenModernaBold.ttf);\n  font-weight: bold;\n}\n\ndiv {\n  color: red\n}\n`);\n  });\n\n  it('formats charset rule correctly', () => {\n    const formattedCode = formatCSS('@charset \\'iso-8859-15\\';p{margin:0}');\n    assert.strictEqual(formattedCode, `@charset \\'iso-8859-15\\';p {\n  margin: 0\n}\n`);\n  });\n\n  it('formats import rule correctly', () => {\n    const formattedCode = formatCSS('@import url(\\'bluish.css\\') projection,tv;span{border:1px solid black}');\n    assert.strictEqual(formattedCode, `@import url(\\'bluish.css\\') projection,tv;span {\n  border: 1px solid black\n}\n`);\n  });\n\n  it('formats import rule with media query correctly', () => {\n    const formattedCode =\n        formatCSS('@import url(\\'landscape.css\\') screen and (orientation:landscape);article{background:yellow}');\n    assert.strictEqual(formattedCode, `@import url(\\'landscape.css\\') screen and (orientation: landscape);\narticle {\n  background: yellow\n}\n`);\n  });\n\n  it('formats import rule with media query correctly', () => {\n    const formattedCode = formatCSS(\n        'p{animation-duration:3s;}@keyframes slidein{from{margin-left:100%;width:300%;}to{margin-left:0%;width:100%;}}p{animation-name:slidein}');\n    assert.strictEqual(formattedCode, `p {\n  animation-duration: 3s;\n}\n\n@keyframes slidein {\n  from {\n    margin-left: 100%;\n    width: 300%;\n  }\n\n  to {\n    margin-left: 0%;\n    width: 100%;\n  }\n}\n\np {\n  animation-name: slidein\n}\n`);\n  });\n\n  it('formats namespace rule correctly', () => {\n    const formattedCode = formatCSS('@namespace svg url(http://www.w3.org/2000/svg);g{color:red}');\n    assert.strictEqual(formattedCode, `@namespace svg url(http://www.w3.org/2000/svg);g {\n  color: red\n}\n`);\n  });\n\n  it('formats page rule correctly', () => {\n    const formattedCode = formatCSS('@page :first{margin:2in 3in;}span{color:blue}');\n    assert.strictEqual(formattedCode, `@page :first {\n  margin: 2in 3in;\n}\n\nspan {\n  color: blue\n}\n`);\n  });\n\n  it('formats supports rule correctly', () => {\n    const formattedCode = formatCSS('@supports(--foo:green){body{color:green;}}#content{font-size:14px}');\n    assert.strictEqual(formattedCode, `@supports(--foo: green) {\n  body {\n    color:green;\n  }\n}\n\n#content {\n  font-size: 14px\n}\n`);\n  });\n\n  it('formats css-variable definitions and usages correctly', () => {\n    const formattedCode = formatCSS('html { --foo: bar; --color: red; background-color: var(--foo); }');\n    assert.strictEqual(formattedCode, `html {\n  --foo: bar;\n  --color: red;\n  background-color: var(--foo);\n}\n`);\n  });\n});\n"]}