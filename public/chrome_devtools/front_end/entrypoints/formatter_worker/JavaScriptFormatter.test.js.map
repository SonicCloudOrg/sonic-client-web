{"version":3,"file":"JavaScriptFormatter.test.js","sourceRoot":"","sources":["../../../../../../front_end/entrypoints/formatter_worker/JavaScriptFormatter.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as FormatterWorker from './formatter_worker.js';\n\nfunction formatJavaScript(text: string): string {\n  return FormatterWorker.FormatterWorker.format('text/javascript', text, '  ').content;\n}\n\ndescribe('JavaScriptFormatter', () => {\n  it('formats await expressions correctly', () => {\n    const formattedCode =\n        formatJavaScript('(async () => { await someFunctionThatNeedsAwaiting(); callSomeOtherFunction(); })();');\n    assert.strictEqual(\n        formattedCode, '(async()=>{\\n  await someFunctionThatNeedsAwaiting();\\n  callSomeOtherFunction();\\n}\\n)();\\n');\n  });\n\n  it('formats async-function expressions correctly', () => {\n    const formattedCode = formatJavaScript('async function foo() {return await Promise.resolve(1);}');\n    assert.strictEqual(formattedCode, `async function foo() {\n  return await Promise.resolve(1);\n}\n`);\n  });\n\n  it('formats top-level await correctly', () => {\n    const formattedCode = formatJavaScript('const myFile=await import(\\n\"my-file.mjs\");');\n    assert.strictEqual(formattedCode, 'const myFile = await import(\"my-file.mjs\");\\n');\n  });\n\n  it('formats identifiers containing escaped characters correctly', () => {\n    const formattedCode = formatJavaScript(String.raw`const x=42;let \\u0275_escaped;`);\n    assert.strictEqual(formattedCode, 'const x = 42;\\nlet \\\\u0275_escaped;\\n');\n  });\n\n  it('formats nullish coalescing expressions correctly', () => {\n    const formattedCode = formatJavaScript('false??true');\n    assert.strictEqual(formattedCode, 'false ?? true\\n');\n  });\n\n  it('formats optional chaining expressions correctly', () => {\n    const formattedCode = formatJavaScript('var x=a?.b;');\n    assert.strictEqual(formattedCode, 'var x = a?.b;\\n');\n  });\n\n  it('formats logical assignment expressions correctly', () => {\n    const formattedCode = formatJavaScript('x||=1;');\n    assert.strictEqual(formattedCode, 'x ||= 1;\\n');\n  });\n\n  it('formats numeric separators correctly', () => {\n    const formattedCode = formatJavaScript('x=1_000;');\n    assert.strictEqual(formattedCode, 'x = 1_000;\\n');\n  });\n\n  it('formats do-while loops correctly', () => {\n    const formattedCode = formatJavaScript(`function demo() {\n  do {} while (false);\n  if (true) {}\n}\nfunction demo() {do {} while (false);if (true) {}}`);\n    assert.strictEqual(formattedCode, `function demo() {\n  do {} while (false);\n  if (true) {}\n}\nfunction demo() {\n  do {} while (false);\n  if (true) {}\n}\n`);\n  });\n\n  it('formats while loops correctly', () => {\n    const formattedCode = formatJavaScript('while(true){print(\\'infinity\\');}');\n    assert.strictEqual(formattedCode, `while (true) {\n  print(\\'infinity\\');\n}\n`);\n  });\n\n  it('formats function statements correctly', () => {\n    const formattedCode = formatJavaScript('function test(a,b,c){a*=b;return c+a;}');\n    assert.strictEqual(formattedCode, `function test(a, b, c) {\n  a *= b;\n  return c + a;\n}\n`);\n  });\n\n  it('formats variable statements correctly', () => {\n    const formattedCode = formatJavaScript('var a=1,b={},c=2,d=\"hello world\";var a,b,c,d=2,e,f=3;var a={};');\n    assert.strictEqual(formattedCode, `var a = 1\n  , b = {}\n  , c = 2\n  , d = \"hello world\";\nvar a, b, c, d = 2, e, f = 3;\nvar a = {};\n`);\n  });\n\n  it('formats array-literals correctly', () => {\n    const formattedCode = formatJavaScript('var arr=[3,2,1,0]');\n    assert.strictEqual(formattedCode, `var arr = [3, 2, 1, 0]\n`);\n  });\n\n  it('formats ternary expressions correctly', () => {\n    const formattedCode = formatJavaScript('a>b?a:b');\n    assert.strictEqual(formattedCode, `a > b ? a : b\n`);\n  });\n\n  it('formats labeled statements correctly', () => {\n    const formattedCode = formatJavaScript('firstLoop:while(true){break firstLoop;continue firstLoop;}');\n    assert.strictEqual(formattedCode, `firstLoop: while (true) {\n  break firstLoop;\n  continue firstLoop;\n}\n`);\n  });\n\n  it('formats multiple statements on the same line correctly', () => {\n    const formattedCode = formatJavaScript('rebuild(),show(),hasNew?refresh():noop();');\n    assert.strictEqual(formattedCode, `rebuild(),\nshow(),\nhasNew ? refresh() : noop();\n`);\n  });\n\n  it('formats if-statements correctly', () => {\n    const formattedCode = formatJavaScript(\n        'if(a<b)log(a);else log(b);if(a<b){log(a)}else{log(b);}if(a===b)log(\\'equals\\');if(a!==b){log(\\'non-eq\\');}if(a>b&&b>c){print(a);print(b);}');\n    assert.strictEqual(formattedCode, `if (a < b)\n  log(a);\nelse\n  log(b);\nif (a < b) {\n  log(a)\n} else {\n  log(b);\n}\nif (a === b)\n  log('equals');\nif (a !== b) {\n  log('non-eq');\n}\nif (a > b && b > c) {\n  print(a);\n  print(b);\n}\n`);\n  });\n\n  it('formats break- and continue-statements in for-loops correctly', () => {\n    const formattedCode = formatJavaScript(`for(var i in set)if(i%2===0)break;else continue;\nfunction foo(){while(1){if (a)continue;test();}}`);\n    assert.strictEqual(formattedCode, `for (var i in set)\n  if (i % 2 === 0)\n    break;\n  else\n    continue;\nfunction foo() {\n  while (1) {\n    if (a)\n      continue;\n    test();\n  }\n}\n`);\n  });\n\n  it('formats null-keyword correctly', () => {\n    const formattedCode = formatJavaScript('1||null;');\n    assert.strictEqual(formattedCode, `1 || null;\n`);\n  });\n\n  it('formats exponential operator correctly', () => {\n    const formattedCode = formatJavaScript('2**3');\n    assert.strictEqual(formattedCode, `2 ** 3\n`);\n  });\n\n  it('formats for-loops correctly', () => {\n    const formattedCode = formatJavaScript(\n        'for(var value of map)if (value.length%3===0)console.log(value);for(var key in myMap)print(key);for(var value of myMap)print(value);');\n    assert.strictEqual(formattedCode, `for (var value of map)\n  if (value.length % 3 === 0)\n    console.log(value);\nfor (var key in myMap)\n  print(key);\nfor (var value of myMap)\n  print(value);\n`);\n  });\n\n  it('formats chained and nested if-statements correctly', () => {\n    const formattedCode = formatJavaScript(\n        'if(a%7===0)b=1;else if(a%9===1) b =  2;else if(a%5===3){b=a/2;b++;} else b= 3;{if (a>b){a();pretty();}else if (a+b)e();reset();}');\n    assert.strictEqual(formattedCode, `if (a % 7 === 0)\n  b = 1;\nelse if (a % 9 === 1)\n  b = 2;\nelse if (a % 5 === 3) {\n  b = a / 2;\n  b++;\n} else\n  b = 3;\n{\n  if (a > b) {\n    a();\n    pretty();\n  } else if (a + b)\n    e();\n  reset();\n}\n`);\n  });\n\n  it('formats try-catch statements correctly', () => {\n    const formattedCode = formatJavaScript('try{a(b());}catch(e){f()}finally{f();}');\n    assert.strictEqual(formattedCode, `try {\n  a(b());\n} catch (e) {\n  f()\n} finally {\n  f();\n}\n`);\n  });\n\n  it('formats object-spreads correctly', () => {\n    const formattedCode = formatJavaScript('const a = {a:4,...{a: 5,b: 42}};');\n    assert.strictEqual(formattedCode, `const a = {\n  a: 4,\n  ...{\n    a: 5,\n    b: 42\n  }\n};\n`);\n  });\n\n  it('formats object destructuring correctly', () => {\n    const formattedCode = formatJavaScript('let{x,y}=getXYFromTouchOrPointer(e);var test = function({x,y}){foo(x,y);}');\n    assert.strictEqual(formattedCode, `let {x, y} = getXYFromTouchOrPointer(e);\nvar test = function({x, y}) {\n  foo(x, y);\n}\n`);\n  });\n\n  it('formats let declaration for \"$\" correctly', () => {\n    const formattedCode = formatJavaScript('let $=1;');\n    assert.strictEqual(formattedCode, 'let $ = 1;\\n');\n  });\n\n  it('formats let declaration for \"_\" correctly', () => {\n    const formattedCode = formatJavaScript('let _=1;');\n    assert.strictEqual(formattedCode, 'let _ = 1;\\n');\n  });\n\n  it('formats let declaration for unicode name correctly', () => {\n    const formattedCode = formatJavaScript('let \\u00e1=1;');\n    assert.strictEqual(formattedCode, 'let \\u00e1 = 1;\\n');\n  });\n\n  it('formats const declaration for unicode name correctly', () => {\n    const formattedCode = formatJavaScript('const \\u00e1=1;');\n    assert.strictEqual(formattedCode, 'const \\u00e1 = 1;\\n');\n  });\n\n  it('formats yield <number> correctly', () => {\n    const formattedCode = formatJavaScript('function *one() {yield 1;}');\n    assert.strictEqual(formattedCode, `function *one() {\n  yield 1;\n}\n`);\n  });\n\n  it('formats object-expressions correctly', () => {\n    const formattedCode = formatJavaScript(\n        'var mapping={original:[1,2,3],formatted:[],count:0};var obj={\\'foo\\':1,bar:\"2\",cat:{dog:\\'1989\\'}}');\n    assert.strictEqual(formattedCode, `var mapping = {\n  original: [1, 2, 3],\n  formatted: [],\n  count: 0\n};\nvar obj = {\n  'foo': 1,\n  bar: \"2\",\n  cat: {\n    dog: '1989'\n  }\n}\n`);\n  });\n\n  it('formats block-statements correctly', () => {\n    const formattedCode = formatJavaScript('{ print(1); print(2); }');\n    assert.strictEqual(formattedCode, `{\n  print(1);\n  print(2);\n}\n`);\n  });\n\n  it('formats assignment expressions correctly', () => {\n    const formattedCode = formatJavaScript('var exp=\\'a string\\';c=+a+(0>a?b:0);c=(1);var a=(1);');\n    assert.strictEqual(formattedCode, `var exp = 'a string';\nc = +a + (0 > a ? b : 0);\nc = (1);\nvar a = (1);\n`);\n  });\n\n  it('formats with-statements correctly', () => {\n    const formattedCode = formatJavaScript('with(obj)log(\\'first\\');with(nice){log(1);log(2);}done();');\n    assert.strictEqual(formattedCode, `with (obj)\n  log(\\'first\\');\nwith (nice) {\n  log(1);\n  log(2);\n}\ndone();\n`);\n  });\n\n  it('formats switch-statements correctly', () => {\n    const formattedCode = formatJavaScript(\n        'switch (a) { case 1, 3: log(\"odd\");break;case 2:log(\"even\");break;case 42:case 89: log(a);default:log(\"interesting\");log(a);}log(\"done\");');\n    assert.strictEqual(formattedCode, `switch (a) {\ncase 1, 3:\n  log(\"odd\");\n  break;\ncase 2:\n  log(\"even\");\n  break;\ncase 42:\ncase 89:\n  log(a);\ndefault:\n  log(\"interesting\");\n  log(a);\n}\nlog(\"done\");\n`);\n  });\n\n  it('formats generator-expressions correctly', () => {\n    const formattedCode =\n        formatJavaScript('function *max(){var a=yield;var b=yield 10;if(a>b)return a;else return b;}');\n    assert.strictEqual(formattedCode, `function *max() {\n  var a = yield;\n  var b = yield 10;\n  if (a > b)\n    return a;\n  else\n    return b;\n}\n`);\n  });\n\n  it('formats block-comments correctly', () => {\n    const formattedCode = formatJavaScript(`/** this\n * is\n * block\n * comment\n */\nvar a = 10;`);\n    assert.strictEqual(formattedCode, `/** this\n * is\n * block\n * comment\n */\nvar a = 10;\n`);\n  });\n\n  it('formats let-assignments correctly', () => {\n    const formattedCode = formatJavaScript('for(var i=0;i<names.length;++i){let name=names[i];let person=persons[i];}');\n    assert.strictEqual(formattedCode, `for (var i = 0; i < names.length; ++i) {\n  let name = names[i];\n  let person = persons[i];\n}\n`);\n  });\n\n  it('formats anonymous functions correctly', () => {\n    const formattedCode =\n        formatJavaScript(`setTimeout(function(){alert(1);},2000); function test(arg){console.log(arg);}test(a=>a+2);\nvar onClick = function() { console.log(\\'click!\\'); };console.log(\\'done\\');var onStart = function() { a(); }, onFinish = function() { b(); };\nvar onStart = function() {}, delay=1000, belay=document.activeElement;`);\n    assert.strictEqual(formattedCode, `setTimeout(function() {\n  alert(1);\n}, 2000);\nfunction test(arg) {\n  console.log(arg);\n}\ntest(a=>a + 2);\nvar onClick = function() {\n  console.log('click!');\n};\nconsole.log('done');\nvar onStart = function() {\n  a();\n}\n  , onFinish = function() {\n  b();\n};\nvar onStart = function() {}\n  , delay = 1000\n  , belay = document.activeElement;\n`);\n  });\n\n  describe('formats files with comments', () => {\n    it('handles 1 leading comment correctly', () => {\n      const formattedCode = formatJavaScript(`// This is a starting comment\nconsole.log('5');`);\n      assert.strictEqual(formattedCode, `// This is a starting comment\nconsole.log('5');\n`);\n    });\n\n    it('handles leading hashbang correctly', () => {\n      const formattedCode = formatJavaScript(`#! hashbang\n{{{console.log(1)}}}`);\n      assert.strictEqual(formattedCode, `#! hashbang\n{\n  {\n    {\n      console.log(1)\n    }\n  }\n}\n`);\n    });\n\n    it('handles 1 trailing comment correctly', () => {\n      const formattedCode = formatJavaScript('console.log(\\'5\\'); // This is a trailing comment');\n      assert.strictEqual(formattedCode, `console.log('5');\n// This is a trailing comment\n`);\n    });\n\n    it('handles 1 trailing comment on a new line correctly', () => {\n      const formattedCode = formatJavaScript(`console.log('5');\n// This is a new line comment`);\n      assert.strictEqual(formattedCode, `console.log('5');\n// This is a new line comment\n`);\n    });\n\n    it('handles 2 leading comments', () => {\n      const formattedCode = formatJavaScript(`// This is a starting line comment\n/* This is a starting block comment */\nconsole.log('5');`);\n      assert.strictEqual(formattedCode, `// This is a starting line comment\n/* This is a starting block comment */\nconsole.log('5');\n`);\n    });\n\n    it('handles 2 trailing comments correctly', () => {\n      const formattedCode = formatJavaScript(`console.log('5'); // This is a trailing comment same line\n// This is a trailing new line comment`);\n      assert.strictEqual(formattedCode, `console.log('5');\n// This is a trailing comment same line\n// This is a trailing new line comment\n`);\n    });\n\n    it('handles leading and trailing comments correctly', () => {\n      const formattedCode = formatJavaScript(`// This is a starting line comment\n/* This is a starting block comment */\nconsole.log('5'); // This is a trailing comment same line\n// This is a trailing new line comment`);\n      assert.strictEqual(formattedCode, `// This is a starting line comment\n/* This is a starting block comment */\nconsole.log('5');\n// This is a trailing comment same line\n// This is a trailing new line comment\n`);\n    });\n\n    it('handles a hashbang, leading and trailing comments correctly', () => {\n      const formattedCode = formatJavaScript(`#! hashbang\n// This is a starting line comment\n/* This is a starting block comment */\nconsole.log('5'); // This is a trailing comment same line\n// This is a trailing new line comment`);\n      assert.strictEqual(formattedCode, `#! hashbang\n// This is a starting line comment\n/* This is a starting block comment */\nconsole.log('5');\n// This is a trailing comment same line\n// This is a trailing new line comment\n`);\n    });\n  });\n\n  describe('formats files with classes', () => {\n    it('handles an empty class correctly', () => {\n      const formattedCode = formatJavaScript('class Test{}');\n      assert.strictEqual(formattedCode, `class Test {\n}\n`);\n    });\n\n    it('handles an empty constructor correctly', () => {\n      const formattedCode = formatJavaScript('class Test{constructor(){}}');\n      assert.strictEqual(formattedCode, `class Test {\n  constructor() {}\n}\n`);\n    });\n\n    it('handles a single method correctly', () => {\n      const formattedCode = formatJavaScript('class Test{constructor(){this.bar=10;}givemebar(){return this.bar;}}');\n      assert.strictEqual(formattedCode, `class Test {\n  constructor() {\n    this.bar = 10;\n  }\n  givemebar() {\n    return this.bar;\n  }\n}\n`);\n    });\n\n    it('handles extending a super class correctly', () => {\n      const formattedCode =\n          formatJavaScript('class Foo extends Bar{constructor(name){super(name);}getName(){return super.getName();}}');\n      assert.strictEqual(formattedCode, `class Foo extends Bar {\n  constructor(name) {\n    super(name);\n  }\n  getName() {\n    return super.getName();\n  }\n}\n`);\n    });\n\n    it('handles consecutive class declarations correctly', () => {\n      const formattedCode = formatJavaScript('class A{}class B extends A{constructor(){super();}}');\n      assert.strictEqual(formattedCode, `class A {\n}\nclass B extends A {\n  constructor() {\n    super();\n  }\n}\n`);\n    });\n\n    it('handles static methods correctly', () => {\n      const formattedCode = formatJavaScript(\n          'class Employer{static count(){this._counter = (this._counter || 0) + 1; return this._counter;}}');\n      assert.strictEqual(formattedCode, `class Employer {\n  static count() {\n    this._counter = (this._counter || 0) + 1;\n    return this._counter;\n  }\n}\n`);\n    });\n\n    it('handles class expressions correctly', () => {\n      const formattedCode = formatJavaScript('new(class{constructor(){debugger}})');\n      assert.strictEqual(formattedCode, `new (class {\n  constructor() {\n    debugger\n  }\n}\n)\n`);\n    });\n  });\n\n  describe('formats files with template literals', () => {\n    it('handles simple template literal correctly', () => {\n      const formattedCode = formatJavaScript('var foo = `bar`;');\n      assert.strictEqual(formattedCode, `var foo = \\`bar\\`;\n`);\n    });\n\n    it('handles multi-line template literals correctly', () => {\n      const formattedCode = formatJavaScript(`var foo = \\`this\nbar\\`;`);\n      assert.strictEqual(formattedCode, `var foo = \\`this\nbar\\`;\n`);\n    });\n\n    it('handles string substitution in template literals correctly', () => {\n      const formattedCode = formatJavaScript(`var a=\\`I have \\${credit+cash}$\\`;\nvar a=\\`\\${name} has \\${credit+cash}\\${currency?currency:\"$\"}\\`;`);\n      assert.strictEqual(formattedCode, `var a = \\`I have \\${credit + cash}$\\`;\nvar a = \\`\\${name} has \\${credit + cash}\\${currency ? currency : \"$\"}\\`;\n`);\n    });\n\n    it('handles tagged template literals correctly', () => {\n      const formattedCode = formatJavaScript('escapeHtml`<div class=${classnName} width=${a+b}/>`;');\n      assert.strictEqual(formattedCode, `escapeHtml\\`<div class=\\${classnName} width=\\${a + b}/>\\`;\n`);\n    });\n  });\n\n  it('removes consecutive new lines', () => {\n    const formattedCode = formatJavaScript(`a();\n\n\n\n\n\n\n\n\nb();`);\n    assert.strictEqual(formattedCode, `a();\n\nb();\n`);\n  });\n\n  it('formats expressions in parentheses correctly', () => {\n    const formattedCode = formatJavaScript('if((a))((b));else (c);');\n    assert.strictEqual(formattedCode, `if ((a))\n  ((b));\nelse\n  (c);\n`);\n  });\n\n  it('formats obfuscated code', () => {\n    const formattedCode = formatJavaScript(`function formatted1()\n    {\n        var variable1 = 0;\n    }\n\n    function withComments()\n    {\n    // comment\n        return \"functionWithComments\";\n    }\n\n    try{onmessage=function(event){var source=event.data;var formattedSource=beautify(source);var mapping=buildMapping(source,formattedSource);postMessage({formattedSource:formattedSource,mapping:mapping})};function beautify(source){var ast=parse.parse(source);var beautifyOptions=\n    {indent_level:4,indent_start:0,quote_keys:false,space_colon:false};return process.gen_code(ast,beautifyOptions)}function buildMapping(source,formattedSource){var mapping={original:[],formatted:[]};var lastPosition=0;var regexp=/(^|[^\\\\])\\b((?=\\D)[\\$\\.\\w]+)\\b/g;while(true)\n    {var match=regexp.exec(formattedSource);if(!match)break;var position=source.indexOf(match[2],lastPosition);if(position===-1)throw\"No match found in original source for \"+match[2];mapping.original.push(position);mapping.formatted.push(match.index+match[1].length);\n    lastPosition=position+match[2].length}return mapping}function require(){return parse}var exports={};importScripts(\"UglifyJS/parse-js.js\");var parse=exports;var exports={};importScripts(\"UglifyJS/process.js\");var process=exports;}catch(e){}\n\n    function formatted2()\n    {\n        var variable2 = 0;\n    }`);\n    assert.strictEqual(formattedCode, `function formatted1() {\n  var variable1 = 0;\n}\n\nfunction withComments() {\n  // comment\n  return \"functionWithComments\";\n}\n\ntry {\n  onmessage = function(event) {\n    var source = event.data;\n    var formattedSource = beautify(source);\n    var mapping = buildMapping(source, formattedSource);\n    postMessage({\n      formattedSource: formattedSource,\n      mapping: mapping\n    })\n  }\n  ;\n  function beautify(source) {\n    var ast = parse.parse(source);\n    var beautifyOptions = {\n      indent_level: 4,\n      indent_start: 0,\n      quote_keys: false,\n      space_colon: false\n    };\n    return process.gen_code(ast, beautifyOptions)\n  }\n  function buildMapping(source, formattedSource) {\n    var mapping = {\n      original: [],\n      formatted: []\n    };\n    var lastPosition = 0;\n    var regexp = /(^|[^\\\\])\\b((?=D)[$.w]+)\\b/g;\n    while (true) {\n      var match = regexp.exec(formattedSource);\n      if (!match)\n        break;\n      var position = source.indexOf(match[2], lastPosition);\n      if (position === -1)\n        throw \"No match found in original source for \" + match[2];\n      mapping.original.push(position);\n      mapping.formatted.push(match.index + match[1].length);\n      lastPosition = position + match[2].length\n    }\n    return mapping\n  }\n  function require() {\n    return parse\n  }\n  var exports = {};\n  importScripts(\"UglifyJS/parse-js.js\");\n  var parse = exports;\n  var exports = {};\n  importScripts(\"UglifyJS/process.js\");\n  var process = exports;\n} catch (e) {}\n\nfunction formatted2() {\n  var variable2 = 0;\n}\n`);\n  });\n\n  it('formats functions using `import.meta.url` correctly', () => {\n    const formattedCode = formatJavaScript('function foo(){console.log(import.meta.url);}');\n    assert.strictEqual(formattedCode, `function foo() {\n  console.log(import.meta.url);\n}\n`);\n  });\n\n  it('formats class fields correctly', () => {\n    const formattedCode = formatJavaScript('class Clazz {map=new Map();someMethod(){console.log(42);}map2=new Map();}');\n    assert.strictEqual(formattedCode, `class Clazz {\n  map = new Map();\n  someMethod() {\n    console.log(42);\n  }\n  map2 = new Map();\n}\n`);\n  });\n\n  it('formats template literals correctly', () => {\n    const formattedCode = formatJavaScript('`foo${bar}`');\n    assert.strictEqual(formattedCode, '`foo${bar}`\\n');\n  });\n});\n"]}