{"version":3,"file":"InspectorMain.test.js","sourceRoot":"","sources":["../../../../../../front_end/entrypoints/inspector_main/InspectorMain.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,cAAc,MAAM,+CAA+C,CAAC;AAChF,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAChD,OAAO,KAAK,GAAG,MAAM,uBAAuB,CAAC;AAE7C,OAAO,EACL,YAAY,EACZ,gBAAgB,GACjB,MAAM,qCAAqC,CAAC;AAC7C,OAAO,EAAC,UAAU,EAAC,MAAM,iCAAiC,CAAC;AAC3D,OAAO,EACL,0BAA0B,EAC1B,gCAAgC,GACjC,MAAM,iCAAiC,CAAC;AAGzC,OAAO,KAAK,aAAa,MAAM,qBAAqB,CAAC;AAErD,0BAA0B,CAAC,6BAA6B,EAAE,GAAG,EAAE;IAC7D,EAAE,CAAC,iBAAiB,EAAE,KAAK,IAAI,EAAE;QAC/B,MAAM,SAAS,GAAG,YAAY,CAAC,EAAC,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAC,CAAC,CAAC;QAC5D,YAAY,CAAC,EAAC,YAAY,EAAE,SAAS,EAAE,OAAO,EAAE,WAAW,EAAC,CAAC,CAAC;QAC9D,MAAM,WAAW,GAAG,YAAY,CAAC,EAAC,YAAY,EAAE,SAAS,EAAC,CAAC,CAAC;QAC5D,MAAM,QAAQ,GAAG,IAAI,aAAa,CAAC,aAAa,CAAC,2BAA2B,EAAE,CAAC;QAC/E,MAAM,YAAY,GAAG,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,SAAS,EAAE,EAAE,qBAAqB,CAAC,CAAC;QAC/E,QAAQ,CAAC,YAAY,CAAC,EAAwB,EAAE,KAAK,CAAC,CAAC;QACvD,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,0BAA0B,CAAC,mBAAmB,EAAE,GAAG,EAAE;IACnD,MAAM,WAAW,GAAG,YAAiD,CAAC;IAEtE,MAAM,eAAe,GAAG,KAAK,IAAI,EAAE;QACjC,MAAM,aAAa,GAAG,aAAa,CAAC,aAAa,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;QAC/F,MAAM,UAAU,GAAG,aAAa,CAAC,GAAG,EAAE,CAAC;QACvC,MAAM,UAAU,GAAG,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,CAAC;QAC3E,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,YAAY,CACnD,cAA0C,EAAE,UAAU,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC;QAC1G,MAAM,UAAU,CAAC;IACnB,CAAC,CAAC;IAEF,UAAU,CAAC,GAAG,EAAE;QACd,gBAAgB,EAAE,CAAC;QACnB,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;IACvE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;QACrE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QAClE,MAAM,aAAa,GAAG,aAAa,CAAC,aAAa,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;QAC/F,IAAI,QAAQ,GAAG,KAAK,CAAC;QACrB,aAAa,CAAC,GAAG,EAAE;aACd,IAAI,CAAC,GAAG,EAAE;YACT,QAAQ,GAAG,IAAI,CAAC;QAClB,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,CAAC,EAAE;YACT,MAAM,CAAC,CAAC;QACV,CAAC,CAAC,CAAC;QACP,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;QACrD,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACzB,MAAM,UAAU,GAAG,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,CAAC;QAC3E,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,YAAY,CACnD,cAA0C,EAAE,UAAU,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC;QAC1G,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;QACrD,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IAC1B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6DAA6D,EAAE,KAAK,IAAI,EAAE;QAC3E,MAAM,aAAa,GAAG,aAAa,CAAC,aAAa,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;QAC/F,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAC/D,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,CAAC,CAAC;QAC1E,MAAM,aAAa,CAAC,GAAG,EAAE,CAAC;QAE1B,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,EAAE,IAAI,EAAE,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1G,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oEAAoE,EAAE,KAAK,IAAI,EAAE;QAClF,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QAClE,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,CAAC,CAAC;QAC1E,MAAM,eAAe,EAAE,CAAC;QAExB,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,EAAE,IAAI,EAAE,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACzG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;IACjE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;QACzD,MAAM,aAAa,GAAG,aAAa,CAAC,aAAa,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;QAC/F,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,CAAC,CAAC;QAC1E,MAAM,aAAa,CAAC,GAAG,EAAE,CAAC;QAE1B,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,EAAE,IAAI,EAAE,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC7G,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2FAA2F,EAAE,KAAK,IAAI,EAAE;QACzG,MAAM,aAAa,GAAG,aAAa,CAAC,aAAa,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;QAC/F,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QACjE,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,CAAC,CAAC;QAE1E,MAAM,eAAe,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;QACpC,MAAM,aAAa,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;QAClC,gCAAgC,CAAC,sBAAsB,EAAE,eAAe,CAAC,CAAC;QAC1E,gCAAgC,CAAC,iBAAiB,EAAE,GAAG,EAAE,CAAC,CAAC,EAAC,UAAU,EAAE,WAAW,EAAC,CAAC,CAAC,CAAC;QACvF,gCAAgC,CAAC,gBAAgB,EAAE,aAAa,CAAC,CAAC;QAClE,MAAM,aAAa,CAAC,GAAG,EAAE,CAAC;QAC1B,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QAC1C,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QAExC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;IAC5D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;QACtE,MAAM,aAAa,GAAG,aAAa,CAAC,aAAa,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;QAC/F,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QACjE,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,CAAC,CAAC;QAE1E,MAAM,aAAa,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;QACnC,gCAAgC,CAAC,gBAAgB,EAAE,aAAa,CAAC,CAAC;QAClE,MAAM,mBAAmB,GAAG,UAAU,CAAC,aAAa,CAAC,CAAC;QAEtD,IAAI,cAAc,GAAG,CAAC,CAAmC,EAAE,EAAE,GAAE,CAAC,CAAC;QACjE,gCAAgC,CAAC,iBAAiB,EAAE,GAAG,EAAE,CAAC,IAAI,OAAO,CAAmC,OAAO,CAAC,EAAE;YAC5D,cAAc,GAAG,OAAO,CAAC;QAC3B,CAAC,CAAC,CAAC,CAAC;QAExD,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,CAAC,CAAC;QAC1E,MAAM,MAAM,GAAG,aAAa,CAAC,GAAG,EAAE,CAAC;QACnC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QACrC,cAAc,CAAC,EAAC,UAAU,EAAE,WAAW,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC,SAAS,EAAC,CAAC,CAAC;QACrE,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,mBAAmB,EAAE,MAAM,CAAC,CAAC,CAAC;QACjD,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QACxC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;IAC5D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;QACrE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAC/D,MAAM,aAAa,GAAG,aAAa,CAAC,aAAa,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;QAC/F,MAAM,uBAAuB,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;QAC5C,gCAAgC,CAAC,iCAAiC,EAAE,uBAAuB,CAAC,CAAC;QAC7F,MAAM,aAAa,CAAC,GAAG,EAAE,CAAC;QAC1B,MAAM,CAAC,MAAM,CAAC,uBAAuB,CAAC,UAAU,CAAC,CAAC;QAClD,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;QACtE,MAAM,aAAa,GAAG,aAAa,CAAC,aAAa,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;QAC/F,MAAM,uBAAuB,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;QAC5C,gCAAgC,CAAC,iCAAiC,EAAE,uBAAuB,CAAC,CAAC;QAC7F,MAAM,aAAa,CAAC,GAAG,EAAE,CAAC;QAC1B,MAAM,CAAC,MAAM,CAAC,uBAAuB,CAAC,UAAU,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8DAA8D,EAAE,KAAK,IAAI,EAAE;QAC5E,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QAClE,MAAM,uBAAuB,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;QAC5C,gCAAgC,CAAC,iCAAiC,EAAE,uBAAuB,CAAC,CAAC;QAC7F,MAAM,eAAe,EAAE,CAAC;QACxB,MAAM,CAAC,OAAO,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC;QAC/C,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;IACjE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;QAC3C,MAAM,aAAa,GAAG,aAAa,CAAC,aAAa,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;QAC/F,MAAM,uBAAuB,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;QAC5C,gCAAgC,CAAC,iCAAiC,EAAE,uBAAuB,CAAC,CAAC;QAC7F,MAAM,aAAa,CAAC,GAAG,EAAE,CAAC;QAC1B,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,EAAE,IAAI,EAAE,EAAE,MAAM,CAAC,CAAC;IAC9F,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE;QACxC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QAClE,MAAM,uBAAuB,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;QAC5C,gCAAgC,CAAC,iCAAiC,EAAE,uBAAuB,CAAC,CAAC;QAC7F,MAAM,eAAe,EAAE,CAAC;QACxB,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,EAAE,IAAI,EAAE,EAAE,KAAK,CAAC,CAAC;QAC3F,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;IACjE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;QAChD,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QAClE,MAAM,aAAa,GAAG,aAAa,CAAC,aAAa,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;QAC/F,MAAM,uBAAuB,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;QAC5C,gCAAgC,CAAC,iCAAiC,EAAE,uBAAuB,CAAC,CAAC;QAC7F,MAAM,UAAU,GAAG,aAAa,CAAC,GAAG,EAAE,CAAC;QACvC,MAAM,eAAe,GAAG,YAAY,CAChC,EAAC,YAAY,EAAE,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,IAAI,SAAS,EAAE,OAAO,EAAE,WAAW,EAAC,CAAC,CAAC;QAChH,MAAM,eAAe,GACjB,YAAY,CAAC,EAAC,YAAY,EAAE,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,IAAI,SAAS,EAAC,CAAC,CAAC;QACvG,MAAM,UAAU,CAAC;QACjB,MAAM,CAAC,cAAc,CAAC,eAAe,CAAC,IAAI,EAAE,EAAE,MAAM,CAAC,CAAC;QACtD,MAAM,CAAC,WAAW,CAAC,eAAe,CAAC,IAAI,EAAE,EAAE,MAAM,CAAC,CAAC;QACnD,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;IACjE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as ProtocolClient from '../../core/protocol_client/protocol_client.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport {\n  createTarget,\n  stubNoopSettings,\n} from '../../testing/EnvironmentHelpers.js';\nimport {expectCall} from '../../testing/ExpectStubCall.js';\nimport {\n  describeWithMockConnection,\n  setMockConnectionResponseHandler,\n} from '../../testing/MockConnection.js';\nimport type * as UI from '../../ui/legacy/legacy.js';\n\nimport * as InspectorMain from './inspector_main.js';\n\ndescribeWithMockConnection('FocusDebuggeeActionDelegate', () => {\n  it('uses main frame', async () => {\n    const tabTarget = createTarget({type: SDK.Target.Type.Tab});\n    createTarget({parentTarget: tabTarget, subtype: 'prerender'});\n    const frameTarget = createTarget({parentTarget: tabTarget});\n    const delegate = new InspectorMain.InspectorMain.FocusDebuggeeActionDelegate();\n    const bringToFront = sinon.spy(frameTarget.pageAgent(), 'invoke_bringToFront');\n    delegate.handleAction({} as UI.Context.Context, 'foo');\n    assert.isTrue(bringToFront.calledOnce);\n  });\n});\n\ndescribeWithMockConnection('InspectorMainImpl', () => {\n  const DEBUGGER_ID = 'debuggerId' as Protocol.Runtime.UniqueDebuggerId;\n\n  const runForTabTarget = async () => {\n    const inspectorMain = InspectorMain.InspectorMain.InspectorMainImpl.instance({forceNew: true});\n    const runPromise = inspectorMain.run();\n    const rootTarget = SDK.TargetManager.TargetManager.instance().rootTarget();\n    SDK.TargetManager.TargetManager.instance().createTarget(\n        'someTargetID' as Protocol.Target.TargetID, 'someName', SDK.Target.Type.Frame, rootTarget, undefined);\n    await runPromise;\n  };\n\n  beforeEach(() => {\n    stubNoopSettings();\n    sinon.stub(ProtocolClient.InspectorBackend.Connection, 'setFactory');\n  });\n\n  it('continues only after primary page target is available', async () => {\n    Root.Runtime.Runtime.setQueryParamForTesting('targetType', 'tab');\n    const inspectorMain = InspectorMain.InspectorMain.InspectorMainImpl.instance({forceNew: true});\n    let finished = false;\n    inspectorMain.run()\n        .then(() => {\n          finished = true;\n        })\n        .catch(e => {\n          throw e;\n        });\n    await new Promise(resolve => setTimeout(resolve, 0));\n    assert.isFalse(finished);\n    const rootTarget = SDK.TargetManager.TargetManager.instance().rootTarget();\n    SDK.TargetManager.TargetManager.instance().createTarget(\n        'someTargetID' as Protocol.Target.TargetID, 'someName', SDK.Target.Type.Frame, rootTarget, undefined);\n    await new Promise(resolve => setTimeout(resolve, 0));\n    assert.isTrue(finished);\n  });\n\n  it('sets main target type to Node if v8only query param present', async () => {\n    const inspectorMain = InspectorMain.InspectorMain.InspectorMainImpl.instance({forceNew: true});\n    Root.Runtime.Runtime.setQueryParamForTesting('v8only', 'true');\n    assert.notExists(SDK.TargetManager.TargetManager.instance().rootTarget());\n    await inspectorMain.run();\n\n    assert.strictEqual(SDK.TargetManager.TargetManager.instance().rootTarget()?.type(), SDK.Target.Type.Node);\n    Root.Runtime.Runtime.setQueryParamForTesting('v8only', '');\n  });\n\n  it('sets main target type to Tab if targetType=tab query param present', async () => {\n    Root.Runtime.Runtime.setQueryParamForTesting('targetType', 'tab');\n    assert.notExists(SDK.TargetManager.TargetManager.instance().rootTarget());\n    await runForTabTarget();\n\n    assert.strictEqual(SDK.TargetManager.TargetManager.instance().rootTarget()?.type(), SDK.Target.Type.Tab);\n    Root.Runtime.Runtime.setQueryParamForTesting('targetType', '');\n  });\n\n  it('sets main target type to Frame by default', async () => {\n    const inspectorMain = InspectorMain.InspectorMain.InspectorMainImpl.instance({forceNew: true});\n    assert.notExists(SDK.TargetManager.TargetManager.instance().rootTarget());\n    await inspectorMain.run();\n\n    assert.strictEqual(SDK.TargetManager.TargetManager.instance().rootTarget()?.type(), SDK.Target.Type.Frame);\n  });\n\n  it('creates main target waiting for debugger if the main target is frame and panel is sources', async () => {\n    const inspectorMain = InspectorMain.InspectorMain.InspectorMainImpl.instance({forceNew: true});\n    Root.Runtime.Runtime.setQueryParamForTesting('panel', 'sources');\n    assert.notExists(SDK.TargetManager.TargetManager.instance().rootTarget());\n\n    const waitForDebugger = sinon.spy();\n    const debuggerPause = sinon.spy();\n    setMockConnectionResponseHandler('Page.waitForDebugger', waitForDebugger);\n    setMockConnectionResponseHandler('Debugger.enable', () => ({debuggerId: DEBUGGER_ID}));\n    setMockConnectionResponseHandler('Debugger.pause', debuggerPause);\n    await inspectorMain.run();\n    assert.isTrue(waitForDebugger.calledOnce);\n    assert.isTrue(debuggerPause.calledOnce);\n\n    Root.Runtime.Runtime.setQueryParamForTesting('panel', '');\n  });\n\n  it('wait for Debugger.enable before calling Debugger.pause', async () => {\n    const inspectorMain = InspectorMain.InspectorMain.InspectorMainImpl.instance({forceNew: true});\n    Root.Runtime.Runtime.setQueryParamForTesting('panel', 'sources');\n    assert.notExists(SDK.TargetManager.TargetManager.instance().rootTarget());\n\n    const debuggerPause = sinon.stub();\n    setMockConnectionResponseHandler('Debugger.pause', debuggerPause);\n    const debuggerPauseCalled = expectCall(debuggerPause);\n\n    let debuggerEnable = (_: Protocol.Debugger.EnableResponse) => {};\n    setMockConnectionResponseHandler('Debugger.enable', () => new Promise<Protocol.Debugger.EnableResponse>(resolve => {\n                                                          debuggerEnable = resolve;\n                                                        }));\n\n    assert.notExists(SDK.TargetManager.TargetManager.instance().rootTarget());\n    const result = inspectorMain.run();\n    assert.isFalse(debuggerPause.called);\n    debuggerEnable({debuggerId: DEBUGGER_ID, getError: () => undefined});\n    await Promise.all([debuggerPauseCalled, result]);\n    assert.isTrue(debuggerPause.calledOnce);\n    Root.Runtime.Runtime.setQueryParamForTesting('panel', '');\n  });\n\n  it('calls Runtime.runIfWaitingForDebugger for Node target', async () => {\n    Root.Runtime.Runtime.setQueryParamForTesting('v8only', 'true');\n    const inspectorMain = InspectorMain.InspectorMain.InspectorMainImpl.instance({forceNew: true});\n    const runIfWaitingForDebugger = sinon.spy();\n    setMockConnectionResponseHandler('Runtime.runIfWaitingForDebugger', runIfWaitingForDebugger);\n    await inspectorMain.run();\n    assert.isTrue(runIfWaitingForDebugger.calledOnce);\n    Root.Runtime.Runtime.setQueryParamForTesting('v8only', '');\n  });\n\n  it('calls Runtime.runIfWaitingForDebugger for frame target', async () => {\n    const inspectorMain = InspectorMain.InspectorMain.InspectorMainImpl.instance({forceNew: true});\n    const runIfWaitingForDebugger = sinon.spy();\n    setMockConnectionResponseHandler('Runtime.runIfWaitingForDebugger', runIfWaitingForDebugger);\n    await inspectorMain.run();\n    assert.isTrue(runIfWaitingForDebugger.calledOnce);\n  });\n\n  it('does not call Runtime.runIfWaitingForDebugger for Tab target', async () => {\n    Root.Runtime.Runtime.setQueryParamForTesting('targetType', 'tab');\n    const runIfWaitingForDebugger = sinon.spy();\n    setMockConnectionResponseHandler('Runtime.runIfWaitingForDebugger', runIfWaitingForDebugger);\n    await runForTabTarget();\n    assert.isFalse(runIfWaitingForDebugger.called);\n    Root.Runtime.Runtime.setQueryParamForTesting('targetType', '');\n  });\n\n  it('sets frame target to \"main\"', async () => {\n    const inspectorMain = InspectorMain.InspectorMain.InspectorMainImpl.instance({forceNew: true});\n    const runIfWaitingForDebugger = sinon.spy();\n    setMockConnectionResponseHandler('Runtime.runIfWaitingForDebugger', runIfWaitingForDebugger);\n    await inspectorMain.run();\n    assert.strictEqual(SDK.TargetManager.TargetManager.instance().rootTarget()?.name(), 'Main');\n  });\n\n  it('sets tab target to \"tab\"', async () => {\n    Root.Runtime.Runtime.setQueryParamForTesting('targetType', 'tab');\n    const runIfWaitingForDebugger = sinon.spy();\n    setMockConnectionResponseHandler('Runtime.runIfWaitingForDebugger', runIfWaitingForDebugger);\n    await runForTabTarget();\n    assert.strictEqual(SDK.TargetManager.TargetManager.instance().rootTarget()?.name(), 'Tab');\n    Root.Runtime.Runtime.setQueryParamForTesting('targetType', '');\n  });\n\n  it('sets main frame target to \"main\"', async () => {\n    Root.Runtime.Runtime.setQueryParamForTesting('targetType', 'tab');\n    const inspectorMain = InspectorMain.InspectorMain.InspectorMainImpl.instance({forceNew: true});\n    const runIfWaitingForDebugger = sinon.spy();\n    setMockConnectionResponseHandler('Runtime.runIfWaitingForDebugger', runIfWaitingForDebugger);\n    const runPromise = inspectorMain.run();\n    const prerenderTarget = createTarget(\n        {parentTarget: SDK.TargetManager.TargetManager.instance().rootTarget() || undefined, subtype: 'prerender'});\n    const mainFrameTarget =\n        createTarget({parentTarget: SDK.TargetManager.TargetManager.instance().rootTarget() || undefined});\n    await runPromise;\n    assert.notStrictEqual(prerenderTarget.name(), 'Main');\n    assert.strictEqual(mainFrameTarget.name(), 'Main');\n    Root.Runtime.Runtime.setQueryParamForTesting('targetType', '');\n  });\n});\n"]}