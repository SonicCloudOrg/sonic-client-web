{"version":3,"file":"SettingTracker.js","sourceRoot":"","sources":["../../../../../../front_end/entrypoints/main/SettingTracker.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,MAAM,MAAM,6BAA6B,CAAC;AAEtD,MAAM,iCAAiC,GAAG,0BAA0B,CAAC;AACrE,8DAA8D;AAC9D,MAAM,iCAAiC,GAAG,0BAA0B,CAAC;AAErE,MAAM,OAAO,cAAc;IACzB;QACE,IAAI,CAAC,0CAA0C,EAAE,CAAC;QAClD,IAAI,CAAC,iCAAiC,EAAE,CAAC;IAC3C,CAAC;IAED,8BAA8B;QAC5B,+CAA+C;QAC/C,IAAI,IAAI,CAAC,iBAAiB,CAAC,iCAAiC,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC;YACrE,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,kBAAkB,CAAC,sCAAsC,EAAE,KAAK,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACnH,CAAC;QACD,2EAA2E;QAC3E,oDAAoD;QACpD,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,kBAAkB,CAAC,iCAAiC,EAAE,KAAK,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC7G,CAAC;IAED,iCAAiC;QAC/B,IAAI,CAAC,iBAAiB,CAAC,iCAAiC,CAAC;YACrD,EAAE,iBAAiB,CAAC,IAAI,CAAC,8BAA8B,EAAE,IAAI,CAAC,CAAC;IACrE,CAAC;IAED,OAAO;QACL,IAAI,CAAC,iBAAiB,CAAC,iCAAiC,CAAC;YACrD,EAAE,oBAAoB,CAAC,IAAI,CAAC,8BAA8B,EAAE,IAAI,CAAC,CAAC;IACxE,CAAC;IAED,iBAAiB,CAAC,IAAY;QAC5B,IAAI,CAAC;YACH,OAAO,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC7C,CAAC;QAAC,MAAM,CAAC;YACP,OAAO;QACT,CAAC;IACH,CAAC;IAED,0CAA0C;QACxC,MAAM,cAAc,GAChB,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,kBAAkB,CAAC,iCAAiC,EAAE,KAAK,CAAC,CAAC;QACrG,MAAM,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAC,iCAAiC,CAAC,CAAC;QACjF,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,EAAE,CAAC;YAC1B,mEAAmE;YACnE,MAAM,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,aAAa,EAAE,CAAC;YACnE,cAAc,EAAE,GAAG,CAAC,MAAM,EAAE,uBAAuB,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC;QACtE,CAAC;IACH,CAAC;CACF","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\n\nconst consoleInsightsToggledSettingName = 'console-insights-toggled';\n// Keep setting names in sync with front_end/panels/explain/*.\nconst consoleInsightsEnabledSettingName = 'console-insights-enabled';\n\nexport class SettingTracker {\n  constructor() {\n    this.#syncConsoleInsightSettingsWithQueryParams();\n    this.#trackConsoleInsightSettingChange();\n  }\n\n  #onConsoleInsightSettingChange(): void {\n    // If setting was turned on, reset the consent.\n    if (this.#getModuleSetting(consoleInsightsEnabledSettingName)?.get()) {\n      Common.Settings.Settings.instance().createLocalSetting('console-insights-onboarding-finished', false).set(false);\n    }\n    // If console-insights-enabled was edited by the user, it becomes \"sticky\",\n    // which means Finch won't change the setting state.\n    Common.Settings.Settings.instance().createLocalSetting(consoleInsightsToggledSettingName, false).set(true);\n  }\n\n  #trackConsoleInsightSettingChange(): void {\n    this.#getModuleSetting(consoleInsightsEnabledSettingName)\n        ?.addChangeListener(this.#onConsoleInsightSettingChange, this);\n  }\n\n  dispose(): void {\n    this.#getModuleSetting(consoleInsightsEnabledSettingName)\n        ?.removeChangeListener(this.#onConsoleInsightSettingChange, this);\n  }\n\n  #getModuleSetting(name: string): Common.Settings.Setting<unknown>|undefined {\n    try {\n      return Common.Settings.moduleSetting(name);\n    } catch {\n      return;\n    }\n  }\n\n  #syncConsoleInsightSettingsWithQueryParams(): void {\n    const toggledSetting =\n        Common.Settings.Settings.instance().createLocalSetting(consoleInsightsToggledSettingName, false);\n    const enabledSetting = this.#getModuleSetting(consoleInsightsEnabledSettingName);\n    if (!toggledSetting.get()) {\n      // If the setting was not toggled, update according to host config.\n      const config = Common.Settings.Settings.instance().getHostConfig();\n      enabledSetting?.set(config?.devToolsConsoleInsights.optIn !== true);\n    }\n  }\n}\n"]}