{"version":3,"file":"LighthouseWorkerService.js","sourceRoot":"","sources":["../../../../../../front_end/entrypoints/lighthouse_worker/LighthouseWorkerService.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Root from '../../core/root/root.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as PuppeteerService from '../../services/puppeteer/puppeteer.js';\n\nfunction disableLoggingForTest(): void {\n  console.log = (): void => undefined;  // eslint-disable-line no-console\n}\n\n/**\n * ConnectionProxy is a SDK interface, but the implementation has no knowledge it's a parallelConnection.\n * The CDP traffic is smuggled back and forth by the system described in LighthouseProtocolService\n */\nclass ConnectionProxy implements SDK.Connections.ParallelConnectionInterface {\n  sessionId: string;\n  onMessage: ((arg0: Object) => void)|null;\n  onDisconnect: ((arg0: string) => void)|null;\n\n  constructor(sessionId: string) {\n    this.sessionId = sessionId;\n    this.onMessage = null;\n    this.onDisconnect = null;\n  }\n\n  setOnMessage(onMessage: (arg0: (Object|string)) => void): void {\n    this.onMessage = onMessage;\n  }\n\n  setOnDisconnect(onDisconnect: (arg0: string) => void): void {\n    this.onDisconnect = onDisconnect;\n  }\n\n  getOnDisconnect(): (((arg0: string) => void)|null) {\n    return this.onDisconnect;\n  }\n\n  getSessionId(): string {\n    return this.sessionId;\n  }\n\n  sendRawMessage(message: string): void {\n    notifyFrontendViaWorkerMessage('sendProtocolMessage', {message});\n  }\n\n  async disconnect(): Promise<void> {\n    this.onDisconnect?.('force disconnect');\n    this.onDisconnect = null;\n    this.onMessage = null;\n  }\n}\n\nlet cdpConnection: ConnectionProxy|undefined;\nlet endTimespan: (() => unknown)|undefined;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function invokeLH(action: string, args: any): Promise<unknown> {\n  if (Root.Runtime.Runtime.queryParam('isUnderTest')) {\n    disableLoggingForTest();\n    args.flags.maxWaitForLoad = 2 * 1000;\n  }\n\n  // @ts-expect-error https://github.com/GoogleChrome/lighthouse/issues/11628\n  self.listenForStatus(message => {\n    notifyFrontendViaWorkerMessage('statusUpdate', {message: message[1]});\n  });\n\n  let puppeteerHandle: Awaited<ReturnType<\n      typeof PuppeteerService.PuppeteerConnection.PuppeteerConnectionHelper['connectPuppeteerToConnectionViaTab']>>|\n      undefined;\n\n  try {\n    // For timespan we only need to perform setup on startTimespan.\n    // Config, flags, locale, etc. should be stored in the closure of endTimespan.\n    if (action === 'endTimespan') {\n      if (!endTimespan) {\n        throw new Error('Cannot end a timespan before starting one');\n      }\n      const result = await endTimespan();\n      endTimespan = undefined;\n      return result;\n    }\n\n    const locale = await fetchLocaleData(args.locales);\n    const flags = args.flags;\n    flags.logLevel = flags.logLevel || 'info';\n    flags.channel = 'devtools';\n    flags.locale = locale;\n\n    // @ts-expect-error https://github.com/GoogleChrome/lighthouse/issues/11628\n    const config = args.config || self.createConfig(args.categoryIDs, flags.formFactor);\n    const url = args.url;\n\n    const {rootTargetId, mainSessionId} = args;\n    cdpConnection = new ConnectionProxy(mainSessionId);\n    puppeteerHandle =\n        await PuppeteerService.PuppeteerConnection.PuppeteerConnectionHelper.connectPuppeteerToConnectionViaTab({\n          connection: cdpConnection,\n          rootTargetId,\n          // Lighthouse can only audit normal pages.\n          isPageTargetCallback: targetInfo => targetInfo.type === 'page',\n        });\n\n    const {page} = puppeteerHandle;\n    if (!page) {\n      throw new Error('Could not create page handle for the target page');\n    }\n\n    if (action === 'snapshot') {\n      // @ts-expect-error https://github.com/GoogleChrome/lighthouse/issues/11628\n      return await self.snapshot(page, {config, flags});\n    }\n\n    if (action === 'startTimespan') {\n      // @ts-expect-error https://github.com/GoogleChrome/lighthouse/issues/11628\n      const timespan = await self.startTimespan(page, {config, flags});\n      endTimespan = timespan.endTimespan;\n      return;\n    }\n\n    // @ts-expect-error https://github.com/GoogleChrome/lighthouse/issues/11628\n    return await self.navigation(page, url, {config, flags});\n  } catch (err) {\n    return ({\n      fatal: true,\n      message: err.message,\n      stack: err.stack,\n    });\n  } finally {\n    // endTimespan will need to use the same connection as startTimespan.\n    if (action !== 'startTimespan') {\n      await puppeteerHandle?.browser.disconnect();\n    }\n  }\n}\n\n/**\n * Finds a locale supported by Lighthouse from the user's system locales.\n * If no matching locale is found, or if fetching locale data fails, this function returns nothing\n * and Lighthouse will use `en-US` by default.\n */\nasync function fetchLocaleData(locales: string[]): Promise<string|void> {\n  // @ts-expect-error https://github.com/GoogleChrome/lighthouse/issues/11628\n  const locale = self.lookupLocale(locales);\n\n  // If the locale is en-US, no need to fetch locale data.\n  if (locale === 'en-US' || locale === 'en') {\n    return;\n  }\n\n  // Try to load the locale data.\n  try {\n    const remoteBase = Root.Runtime.getRemoteBase();\n    let localeUrl: string;\n    if (remoteBase && remoteBase.base) {\n      localeUrl = `${remoteBase.base}third_party/lighthouse/locales/${locale}.json`;\n    } else {\n      localeUrl = new URL(`../../third_party/lighthouse/locales/${locale}.json`, import.meta.url).toString();\n    }\n\n    const timeoutPromise = new Promise<string>(\n        (resolve, reject) => setTimeout(() => reject(new Error('timed out fetching locale')), 5000));\n    const localeData = await Promise.race([timeoutPromise, fetch(localeUrl).then(result => result.json())]);\n    // @ts-expect-error https://github.com/GoogleChrome/lighthouse/issues/11628\n    self.registerLocaleData(locale, localeData);\n    return locale;\n  } catch (err) {\n    console.error(err);\n  }\n\n  return;\n}\n\n/**\n * `notifyFrontendViaWorkerMessage` and `onFrontendMessage` work with the FE's ProtocolService.\n *\n * onFrontendMessage takes action-wrapped messages and either invoking lighthouse or delivering it CDP traffic.\n * notifyFrontendViaWorkerMessage posts action-wrapped messages to the FE.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction notifyFrontendViaWorkerMessage(action: string, args: any): void {\n  self.postMessage({action, args});\n}\n\nasync function onFrontendMessage(event: MessageEvent): Promise<void> {\n  const messageFromFrontend = event.data;\n  switch (messageFromFrontend.action) {\n    case 'startTimespan':\n    case 'endTimespan':\n    case 'snapshot':\n    case 'navigation': {\n      const result = await invokeLH(messageFromFrontend.action, messageFromFrontend.args);\n      if (result && typeof result === 'object') {\n        // Report isn't used upstream.\n        if ('report' in result) {\n          delete result.report;\n        }\n\n        // Logger PerformanceTiming objects cannot be cloned by this worker's `postMessage` function.\n        if ('artifacts' in result) {\n          // @ts-expect-error\n          result.artifacts.Timing = JSON.parse(JSON.stringify(result.artifacts.Timing));\n        }\n      }\n      self.postMessage({id: messageFromFrontend.id, result});\n      break;\n    }\n    case 'dispatchProtocolMessage': {\n      cdpConnection?.onMessage?.(messageFromFrontend.args.message);\n      break;\n    }\n    default: {\n      throw new Error(`Unknown event: ${event.data}`);\n    }\n  }\n}\n\nself.onmessage = onFrontendMessage;\n\n// Make lighthouse and traceviewer happy.\n// @ts-ignore https://github.com/GoogleChrome/lighthouse/issues/11628\nglobalThis.global = self;\n// @ts-expect-error https://github.com/GoogleChrome/lighthouse/issues/11628\nglobalThis.global.isVinn = true;\n// @ts-expect-error https://github.com/GoogleChrome/lighthouse/issues/11628\nglobalThis.global.document = {};\n// @ts-expect-error https://github.com/GoogleChrome/lighthouse/issues/11628\nglobalThis.global.document.documentElement = {};\n// @ts-expect-error https://github.com/GoogleChrome/lighthouse/issues/11628\nglobalThis.global.document.documentElement.style = {\n  WebkitAppearance: 'WebkitAppearance',\n};\n"]}