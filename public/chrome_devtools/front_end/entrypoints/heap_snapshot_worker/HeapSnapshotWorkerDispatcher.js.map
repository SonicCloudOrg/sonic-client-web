{"version":3,"file":"HeapSnapshotWorkerDispatcher.js","sourceRoot":"","sources":["../../../../../../front_end/entrypoints/heap_snapshot_worker/HeapSnapshotWorkerDispatcher.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as HeapSnapshotModel from '../../models/heap_snapshot_model/heap_snapshot_model.js';\n\n// We mirror what heap_snapshot_worker.ts does, but we can't use it here as we'd have a\n// cyclic GN dependency otherwise.\n\nimport * as AllocationProfile from './AllocationProfile.js';\nimport * as HeapSnapshot from './HeapSnapshot.js';\nimport * as HeapSnapshotLoader from './HeapSnapshotLoader.js';\n\ninterface DispatcherResponse {\n  callId?: number;\n  result: unknown;\n  error?: string;\n  errorCallStack?: Object;\n  errorMethodName?: string;\n}\n\nexport class HeapSnapshotWorkerDispatcher {\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  #objects: any[];\n  readonly #postMessage: typeof Window.prototype.postMessage;\n  constructor(postMessage: typeof Window.prototype.postMessage) {\n    this.#objects = [];\n    this.#postMessage = postMessage;\n  }\n\n  sendEvent(name: string, data: unknown): void {\n    this.#postMessage({eventName: name, data: data});\n  }\n\n  dispatchMessage({data}: {data: HeapSnapshotModel.HeapSnapshotModel.WorkerCommand}): void {\n    const response: DispatcherResponse =\n        {callId: data.callId, result: null, error: undefined, errorCallStack: undefined, errorMethodName: undefined};\n    try {\n      switch (data.disposition) {\n        case 'createLoader':\n          this.#objects[data.objectId] = new HeapSnapshotLoader.HeapSnapshotLoader(this);\n          break;\n        case 'dispose': {\n          delete this.#objects[data.objectId];\n          break;\n        }\n        case 'getter': {\n          const object = this.#objects[data.objectId];\n          const result = object[data.methodName];\n          response.result = result;\n          break;\n        }\n        case 'factory': {\n          const object = this.#objects[data.objectId];\n          const result = object[data.methodName].apply(object, data.methodArguments);\n          if (result) {\n            this.#objects[data.newObjectId] = result;\n          }\n          response.result = Boolean(result);\n          break;\n        }\n        case 'method': {\n          const object = this.#objects[data.objectId];\n          response.result = object[data.methodName].apply(object, data.methodArguments);\n          break;\n        }\n        case 'evaluateForTest': {\n          try {\n            // Make 'HeapSnapshotWorker' and 'HeapSnapshotModel' available to web tests. 'eval' can't use 'import'.\n            // @ts-ignore\n            globalThis.HeapSnapshotWorker = {\n              AllocationProfile,\n              HeapSnapshot,\n              HeapSnapshotLoader,\n            };\n            // @ts-ignore\n            globalThis.HeapSnapshotModel = HeapSnapshotModel;\n            response.result = self.eval(data.source);\n          } catch (error) {\n            response.result = error.toString();\n          }\n          break;\n        }\n      }\n    } catch (error) {\n      response.error = error.toString();\n      response.errorCallStack = error.stack;\n      if (data.methodName) {\n        response.errorMethodName = data.methodName;\n      }\n    }\n    this.#postMessage(response);\n  }\n}\n"]}