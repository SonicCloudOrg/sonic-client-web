{"version":3,"file":"DOMExtension.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/dom_extension/DOMExtension.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,oBAAoB,CAAC;AAS5B,SAAS,UAAU,CAAC,MAAmB,EAAE,IAAa;IACpD,MAAM,IAAI,GAAG,MAAM,CAAC,WAAW,CAAC,MAAM,CAAoB,CAAC;IAC3D,IAAI,IAAI,EAAE,CAAC;QACT,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAS,WAAW,CAAC,MAAmB,EAAE,OAAe,EAAE,IAAa,EAAE,IAAI,GAAG,EAAE;IACjF,MAAM,KAAK,GAAG,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAChD,IAAI,IAAI,EAAE,CAAC;QACT,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC;IACpB,CAAC;IACD,KAAK,CAAC,WAAW,GAAG,IAAI,CAAC;IACzB,OAAO,KAAK,CAAC;AACf,CAAC;AAED,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;IACxB,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;QACrC,MAAM,UAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACjD,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QACvC,WAAW,CAAC,UAAU,EAAE,KAAK,EAAE,oBAAoB,EAAE,QAAQ,CAAC,CAAC;QAC/D,WAAW,CAAC,UAAU,EAAE,KAAK,EAAE,oBAAoB,EAAE,QAAQ,CAAC,CAAC;QAC/D,WAAW,CAAC,UAAU,EAAE,MAAM,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACrD,WAAW,CAAC,UAAU,EAAE,MAAM,EAAE,oBAAoB,EAAE,QAAQ,CAAC,CAAC;QAEhE,eAAe;QACf;;;;;;cAMM;QAEN,IAAI,IAAI,GAAgB,UAAU,CAAC;QACnC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,8BAA8B,CAAC,CAAC;QACzE,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,6BAA6B,CAAC,CAAC;QACxE,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY,EAAE,8BAA8B,CAAC,CAAC;QAEjF,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,oCAAoC,CAAC,CAAC;QAC/E,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,oBAAoB,EAAE,gCAAgC,CAAC,CAAC;QAE3F,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,EAAE,sCAAsC,CAAC,CAAC;QAErF,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,qCAAqC,CAAC,CAAC;QAChF,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,oBAAoB,EAAE,iCAAiC,CAAC,CAAC;QAE5F,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,EAAE,sCAAsC,CAAC,CAAC;QAErF,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,EAAE,oCAAoC,CAAC,CAAC;QAChF,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,EAAE,gCAAgC,CAAC,CAAC;QAEzE,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,EAAE,qCAAqC,CAAC,CAAC;QAEpF,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,EAAE,oCAAoC,CAAC,CAAC;QAChF,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,oBAAoB,EAAE,gCAAgC,CAAC,CAAC;QAE3F,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,EAAE,qCAAqC,CAAC,CAAC;IACtF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4BAA4B,EAAE,GAAG,EAAE;QACpC,MAAM,UAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACjD,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QACvC,MAAM,OAAO,GAAG,UAAU,CAAC,YAAY,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC;QACxD,MAAM,cAAc,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACrD,cAAc,CAAC,SAAS,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;QAClD,OAAO,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;QACpC,MAAM,UAAU,GAAG,cAAc,CAAC,WAAW,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;QACnE,MAAM,OAAO,GAAG,UAAU,CAAC,YAAY,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC;QACxD,MAAM,cAAc,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACrD,cAAc,CAAC,SAAS,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;QAClD,OAAO,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;QACpC,MAAM,MAAM,GAAG,WAAW,CAAC,cAAc,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;QAC7D,WAAW,CAAC,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,iBAAiB,CAAC,CAAC;QAEzD,eAAe;QACf;;;;cAIM;QAEN,IAAI,IAAI,GAAgB,UAAU,CAAC;QACnC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,6BAA6B,CAAC,CAAC;QACxE,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY,EAAE,8BAA8B,CAAC,CAAC;QAEjF,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,oBAAoB,EAAE,gDAAgD,CAAC,CAAC;QAE1G,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,sDAAsD,CAAC,CAAC;QACjG,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,mBAAmB,EAAE,sDAAsD,CAAC,CAAC;QAEhH,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;QAEjD,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,oBAAoB,CAAC,CAAC;QAExD,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,mBAAmB,CAAC,CAAC;QAExD,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QAE9C,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;QAEvC,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QAC3C,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,iBAAiB,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0BAA0B,EAAE,GAAG,EAAE;QAClC,MAAM,UAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACjD,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QACvC,MAAM,OAAO,GAAG,UAAU,CAAC,YAAY,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC;QACxD,MAAM,cAAc,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACrD,cAAc,CAAC,SAAS,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;QAClD,OAAO,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;QACpC,UAAU,CAAC,cAAc,EAAE,oBAAoB,CAAC,CAAC;QACjD,UAAU,CAAC,cAAc,CAAC,CAAC;QAC3B,MAAM,UAAU,GAAG,cAAc,CAAC,WAAW,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;QACnE,MAAM,OAAO,GAAG,UAAU,CAAC,YAAY,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC;QACxD,UAAU,CAAC,UAAU,EAAE,oBAAoB,CAAC,CAAC;QAC7C,WAAW,CAAC,UAAU,EAAE,KAAK,EAAE,oBAAoB,EAAE,2BAA2B,CAAC,CAAC;QAClF,MAAM,cAAc,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACrD,cAAc,CAAC,SAAS,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;QAClD,OAAO,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;QACpC,MAAM,MAAM,GAAG,WAAW,CAAC,cAAc,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;QAC7D,WAAW,CAAC,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,iBAAiB,CAAC,CAAC;QACzD,UAAU,CAAC,MAAM,CAAC,CAAC;QACnB,UAAU,CAAC,MAAM,EAAE,oBAAoB,CAAC,CAAC;QAEzC,eAAe;QACf;;;;;;;;;;;;;;;;;cAiBM;QAEN,IAAI,IAAI,GAAgB,UAAU,CAAC;QACnC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,6BAA6B,CAAC,CAAC;QACxE,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY,EAAE,8BAA8B,CAAC,CAAC;QAEjF,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,oBAAoB,EAAE,gDAAgD,CAAC,CAAC;QAE1G,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,sDAAsD,CAAC,CAAC;QACjG,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,mBAAmB,EAAE,sDAAsD,CAAC,CAAC;QAEhH,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,EAAE,mCAAmC,CAAC,CAAC;QAE/E,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,EAAE,oCAAoC,CAAC,CAAC;QAEhF,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;QAEjD,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,oBAAoB,CAAC,CAAC;QAExD,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,mBAAmB,CAAC,CAAC;QAExD,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QAE9C,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;QAEvC,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,iBAAiB,CAAC,CAAC;QACtD,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QAE3C,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAE1C,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAE1C,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAE1C,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,oBAAoB,CAAC,CAAC;QAEzD,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,2BAA2B,CAAC,CAAC;QAChE,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport './dom_extension.js';\n\ndeclare global {\n  interface HTMLElement {\n    traverseNextNode(node: HTMLElement): HTMLElement;\n    createChild(tagName: string, className?: string, content?: string): HTMLElement;\n  }\n}\n\nfunction createSlot(parent: HTMLElement, name?: string) {\n  const slot = parent.createChild('slot') as HTMLSlotElement;\n  if (name) {\n    slot.name = name;\n  }\n  return slot;\n}\n\nfunction createChild(parent: HTMLElement, tagName: string, name?: string, text = '') {\n  const child = parent.createChild(tagName, name);\n  if (name) {\n    child.slot = name;\n  }\n  child.textContent = text;\n  return child;\n}\n\ndescribe('DataGrid', () => {\n  it('Traverse Node with Children', () => {\n    const component1 = document.createElement('div');\n    component1.classList.add('component1');\n    createChild(component1, 'div', 'component1-content', 'text 1');\n    createChild(component1, 'div', 'component2-content', 'text 2');\n    createChild(component1, 'span', undefined, 'text 3');\n    createChild(component1, 'span', 'component1-content', 'text 4');\n\n    // Now we have:\n    /*\n        * <div class=\"component1\">\n        *    <div class=\"component1-content\" slot=\"component1-content\">text 1</div>\n        *    <div class=\"component2-content\" slot=\"component2-content\">text 2</div>\n        *    <span>text 3</span><span class=\"component1-content\" slot=\"component1-content\">text 4</span>\n        * </div>\n        */\n\n    let node: HTMLElement = component1;\n    assert.strictEqual(node.nodeValue, null, 'root node value is incorrect');\n    assert.strictEqual(node.nodeName, 'DIV', 'root node name is incorrect');\n    assert.strictEqual(node.className, 'component1', 'root node class is incorrect');\n\n    node = node.traverseNextNode(component1);\n    assert.strictEqual(node.nodeName, 'DIV', 'first child node name is incorrect');\n    assert.strictEqual(node.className, 'component1-content', 'first child class is incorrect');\n\n    node = node.traverseNextNode(component1);\n    assert.strictEqual(node.nodeValue, 'text 1', 'second child node value is incorrect');\n\n    node = node.traverseNextNode(component1);\n    assert.strictEqual(node.nodeName, 'DIV', 'second child node name is incorrect');\n    assert.strictEqual(node.className, 'component2-content', 'second child class is incorrect');\n\n    node = node.traverseNextNode(component1);\n    assert.strictEqual(node.nodeValue, 'text 2', 'second child node value is incorrect');\n\n    node = node.traverseNextNode(component1);\n    assert.strictEqual(node.nodeName, 'SPAN', 'third child node name is incorrect');\n    assert.strictEqual(node.className, '', 'third child class is incorrect');\n\n    node = node.traverseNextNode(component1);\n    assert.strictEqual(node.nodeValue, 'text 3', 'third child node value is incorrect');\n\n    node = node.traverseNextNode(component1);\n    assert.strictEqual(node.nodeName, 'SPAN', 'forth child node name is incorrect');\n    assert.strictEqual(node.className, 'component1-content', 'forth child class is incorrect');\n\n    node = node.traverseNextNode(component1);\n    assert.strictEqual(node.nodeValue, 'text 4', 'forth child node value is incorrect');\n  });\n\n  it('Traverse Node with Shadows', () => {\n    const component1 = document.createElement('div');\n    component1.classList.add('component1');\n    const shadow1 = component1.attachShadow({mode: 'open'});\n    const shadow1Content = document.createElement('div');\n    shadow1Content.classList.add('shadow-component1');\n    shadow1.appendChild(shadow1Content);\n    const component2 = shadow1Content.createChild('div', 'component2');\n    const shadow2 = component2.attachShadow({mode: 'open'});\n    const shadow2Content = document.createElement('div');\n    shadow2Content.classList.add('shadow-component1');\n    shadow2.appendChild(shadow2Content);\n    const midDiv = createChild(shadow2Content, 'div', 'mid-div');\n    createChild(midDiv, 'div', undefined, 'component2-text');\n\n    // Now we have:\n    /*\n        * <div class=\"component1\"></div>\n        * <div class=\"shadow-component1\"><div class=\"component2\"></div></div>\n        * <div class=\"shadow-component1\"><div class=\"mid-div\" slot=\"mid-div\"><div>component2-text</div></div></div>\n        */\n\n    let node: HTMLElement = component1;\n    assert.strictEqual(node.nodeName, 'DIV', 'root node name is incorrect');\n    assert.strictEqual(node.className, 'component1', 'root node class is incorrect');\n\n    node = node.traverseNextNode(component1);\n    assert.strictEqual(node.nodeName, '#document-fragment', 'first document fragment node name is incorrect');\n\n    node = node.traverseNextNode(component1);\n    assert.strictEqual(node.nodeName, 'DIV', 'first document fragment child node name is incorrect');\n    assert.strictEqual(node.className, 'shadow-component1', 'first document fragment child node name is incorrect');\n\n    node = node.traverseNextNode(component1);\n    assert.strictEqual(node.nodeName, 'DIV');\n    assert.strictEqual(node.className, 'component2');\n\n    node = node.traverseNextNode(component1);\n    assert.strictEqual(node.nodeName, '#document-fragment');\n\n    node = node.traverseNextNode(component1);\n    assert.strictEqual(node.nodeName, 'DIV');\n    assert.strictEqual(node.className, 'shadow-component1');\n\n    node = node.traverseNextNode(component1);\n    assert.strictEqual(node.nodeName, 'DIV');\n    assert.strictEqual(node.className, 'mid-div');\n\n    node = node.traverseNextNode(component1);\n    assert.strictEqual(node.nodeName, 'DIV');\n    assert.strictEqual(node.className, '');\n\n    node = node.traverseNextNode(component1);\n    assert.strictEqual(node.nodeName, '#text');\n    assert.strictEqual(node.nodeValue, 'component2-text');\n  });\n\n  it('Traverse Node with Slots', () => {\n    const component1 = document.createElement('div');\n    component1.classList.add('component1');\n    const shadow1 = component1.attachShadow({mode: 'open'});\n    const shadow1Content = document.createElement('div');\n    shadow1Content.classList.add('shadow-component1');\n    shadow1.appendChild(shadow1Content);\n    createSlot(shadow1Content, 'component1-content');\n    createSlot(shadow1Content);\n    const component2 = shadow1Content.createChild('div', 'component2');\n    const shadow2 = component2.attachShadow({mode: 'open'});\n    createSlot(component2, 'component2-content');\n    createChild(component2, 'div', 'component2-content', 'component2 light dom text');\n    const shadow2Content = document.createElement('div');\n    shadow2Content.classList.add('shadow-component1');\n    shadow2.appendChild(shadow2Content);\n    const midDiv = createChild(shadow2Content, 'div', 'mid-div');\n    createChild(midDiv, 'div', undefined, 'component2-text');\n    createSlot(midDiv);\n    createSlot(midDiv, 'component2-content');\n\n    // Now we have:\n    /*\n        * <div class=\"component1\"></div>\n        * <div class=\"shadow-component1\">\n        *    <slot name=\"component1-content\"></slot>\n        *    <slot></slot>\n        *    <div class=\"component2\">\n        *       <slot name=\"component2-content\"></slot>\n        *       <div class=\"component2-content\" slot=\"component2-content\">component2 light dom text</div>\n        *    </div>\n        * </div>\n        * <div class=\"shadow-component1\">\n        *    <div class=\"mid-div\" slot=\"mid-div\">\n        *       <div>component2-text</div>\n        *       <slot></slot>\n        *       <slot name=\"component2-content\"></slot>\n        *    </div>\n        * </div>\n        */\n\n    let node: HTMLElement = component1;\n    assert.strictEqual(node.nodeName, 'DIV', 'root node name is incorrect');\n    assert.strictEqual(node.className, 'component1', 'root node class is incorrect');\n\n    node = node.traverseNextNode(component1);\n    assert.strictEqual(node.nodeName, '#document-fragment', 'first document fragment node name is incorrect');\n\n    node = node.traverseNextNode(component1);\n    assert.strictEqual(node.nodeName, 'DIV', 'first document fragment child node name is incorrect');\n    assert.strictEqual(node.className, 'shadow-component1', 'first document fragment child node name is incorrect');\n\n    node = node.traverseNextNode(component1);\n    assert.strictEqual(node.nodeName, 'SLOT', 'first slot node name is incorrect');\n\n    node = node.traverseNextNode(component1);\n    assert.strictEqual(node.nodeName, 'SLOT', 'second slot node name is incorrect');\n\n    node = node.traverseNextNode(component1);\n    assert.strictEqual(node.nodeName, 'DIV');\n    assert.strictEqual(node.className, 'component2');\n\n    node = node.traverseNextNode(component1);\n    assert.strictEqual(node.nodeName, '#document-fragment');\n\n    node = node.traverseNextNode(component1);\n    assert.strictEqual(node.nodeName, 'DIV');\n    assert.strictEqual(node.className, 'shadow-component1');\n\n    node = node.traverseNextNode(component1);\n    assert.strictEqual(node.nodeName, 'DIV');\n    assert.strictEqual(node.className, 'mid-div');\n\n    node = node.traverseNextNode(component1);\n    assert.strictEqual(node.nodeName, 'DIV');\n    assert.strictEqual(node.className, '');\n\n    node = node.traverseNextNode(component1);\n    assert.strictEqual(node.nodeValue, 'component2-text');\n    assert.strictEqual(node.nodeName, '#text');\n\n    node = node.traverseNextNode(component1);\n    assert.strictEqual(node.nodeName, 'SLOT');\n\n    node = node.traverseNextNode(component1);\n    assert.strictEqual(node.nodeName, 'SLOT');\n\n    node = node.traverseNextNode(component1);\n    assert.strictEqual(node.nodeName, 'SLOT');\n\n    node = node.traverseNextNode(component1);\n    assert.strictEqual(node.nodeName, 'DIV');\n    assert.strictEqual(node.className, 'component2-content');\n\n    node = node.traverseNextNode(component1);\n    assert.strictEqual(node.nodeValue, 'component2 light dom text');\n    assert.strictEqual(node.nodeName, '#text');\n  });\n});\n"]}