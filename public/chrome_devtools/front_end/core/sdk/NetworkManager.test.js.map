{"version":3,"file":"NetworkManager.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/NetworkManager.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Protocol from '../../generated/protocol.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as Persistence from '../../models/persistence/persistence.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\nimport {createTarget, describeWithEnvironment} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\nimport {createWorkspaceProject} from '../../testing/OverridesHelpers.js';\nimport * as Common from '../common/common.js';\nimport * as Platform from '../platform/platform.js';\n\nimport * as SDK from './sdk.js';\n\nconst LONG_URL_PART =\n    'LoremIpsumDolorSitAmetConsecteturAdipiscingElitPhasellusVitaeOrciInAugueCondimentumTinciduntUtEgetDolorQuisqueEfficiturUltricesTinciduntVivamusVelitPurusCommodoQuisErosSitAmetTemporMalesuadaNislNullamTtempusVulputateAugueEgetScelerisqueLacusVestibulumNon/index.html';\n\ndescribeWithMockConnection('MultitargetNetworkManager', () => {\n  describe('Trust Token done event', () => {\n    it('is not lost when arriving before the corresponding requestWillBeSent event', () => {\n      // 1) Setup a NetworkManager and listen to \"RequestStarted\" events.\n      const networkManager = new Common.ObjectWrapper.ObjectWrapper<SDK.NetworkManager.EventTypes>();\n      const startedRequests: SDK.NetworkRequest.NetworkRequest[] = [];\n      networkManager.addEventListener(SDK.NetworkManager.Events.RequestStarted, event => {\n        startedRequests.push(event.data.request);\n      });\n      const networkDispatcher =\n          new SDK.NetworkManager.NetworkDispatcher(networkManager as SDK.NetworkManager.NetworkManager);\n\n      // 2) Fire a trust token event, followed by a requestWillBeSent event.\n      const mockEvent = {requestId: 'mockId'} as Protocol.Network.TrustTokenOperationDoneEvent;\n      networkDispatcher.trustTokenOperationDone(mockEvent);\n      networkDispatcher.requestWillBeSent(\n          {requestId: 'mockId', request: {url: 'example.com'}} as Protocol.Network.RequestWillBeSentEvent);\n\n      // 3) Check that the resulting NetworkRequest has the Trust Token Event data associated with it.\n      assert.strictEqual(startedRequests.length, 1);\n      assert.strictEqual(startedRequests[0].trustTokenOperationDoneEvent(), mockEvent);\n    });\n  });\n\n  it('uses main frame to get certificate', () => {\n    SDK.ChildTargetManager.ChildTargetManager.install();\n    const tabTarget = createTarget({type: SDK.Target.Type.Tab});\n    const mainFrameTarget = createTarget({parentTarget: tabTarget});\n    const prerenderTarget = createTarget({parentTarget: tabTarget, subtype: 'prerender'});\n    const subframeTarget = createTarget({parentTarget: mainFrameTarget, subtype: ''});\n\n    const unexpectedCalls =\n        [tabTarget, prerenderTarget, subframeTarget].map(t => sinon.spy(t.networkAgent(), 'invoke_getCertificate'));\n    const expectedCall = sinon.spy(mainFrameTarget.networkAgent(), 'invoke_getCertificate');\n    void SDK.NetworkManager.MultitargetNetworkManager.instance().getCertificate('https://example.com');\n    for (const unexpectedCall of unexpectedCalls) {\n      assert.isTrue(unexpectedCall.notCalled);\n    }\n    assert.isTrue(expectedCall.calledOnceWith({origin: 'https://example.com'}));\n  });\n});\n\ndescribe('NetworkDispatcher', () => {\n  const requestWillBeSentEvent = {requestId: 'mockId', request: {url: 'example.com'}} as\n      Protocol.Network.RequestWillBeSentEvent;\n  const loadingFinishedEvent = {requestId: 'mockId', timestamp: 42, encodedDataLength: 42} as\n      Protocol.Network.LoadingFinishedEvent;\n  describeWithEnvironment('request', () => {\n    let networkDispatcher: SDK.NetworkManager.NetworkDispatcher;\n\n    beforeEach(() => {\n      const networkManager: Common.ObjectWrapper.ObjectWrapper<unknown>&{target?: () => void} =\n          new Common.ObjectWrapper.ObjectWrapper();\n      networkManager.target = () => ({\n        model: () => null,\n      });\n      networkDispatcher = new SDK.NetworkManager.NetworkDispatcher(networkManager as SDK.NetworkManager.NetworkManager);\n    });\n\n    it('is preserved after loadingFinished', () => {\n      networkDispatcher.requestWillBeSent(requestWillBeSentEvent);\n      networkDispatcher.loadingFinished(loadingFinishedEvent);\n\n      assert.exists(networkDispatcher.requestForId('mockId'));\n    });\n\n    it('clears finished requests on clearRequests()', () => {\n      networkDispatcher.requestWillBeSent(requestWillBeSentEvent);\n      networkDispatcher.loadingFinished(loadingFinishedEvent);\n\n      const unfinishedRequestWillBeSentEvent = {requestId: 'unfinishedRequestId', request: {url: 'example.com'}} as\n          Protocol.Network.RequestWillBeSentEvent;\n      networkDispatcher.requestWillBeSent(unfinishedRequestWillBeSentEvent);\n\n      networkDispatcher.clearRequests();\n      assert.notExists(networkDispatcher.requestForId('mockId'));\n      assert.exists(networkDispatcher.requestForId('unfinishedRequestId'));\n    });\n\n    it('preserves extra info for unfinished clearRequests()', () => {\n      const requestWillBeSentExtraInfoEvent = {\n        requestId: 'mockId',\n        associatedCookies: [],\n        headers: {'Header-From-Extra-Info': 'foo'},\n        connectTiming: {requestTime: 0},\n      } as unknown as Protocol.Network.RequestWillBeSentExtraInfoEvent;\n      networkDispatcher.requestWillBeSentExtraInfo(requestWillBeSentExtraInfoEvent);\n\n      networkDispatcher.clearRequests();\n      networkDispatcher.requestWillBeSent(requestWillBeSentEvent);\n      assert.exists(networkDispatcher.requestForId('mockId'));\n      assert.deepEqual(\n          networkDispatcher.requestForId('mockId')?.requestHeaders(), [{name: 'Header-From-Extra-Info', value: 'foo'}]);\n    });\n\n    it('response headers are overwritten by request interception', () => {\n      const responseReceivedExtraInfoEvent = {\n        requestId: 'mockId' as Protocol.Network.RequestId,\n        blockedCookies: [],\n        headers: {\n          'test-header': 'first',\n        } as Protocol.Network.Headers,\n        resourceIPAddressSpace: Protocol.Network.IPAddressSpace.Public,\n        statusCode: 200,\n      } as Protocol.Network.ResponseReceivedExtraInfoEvent;\n      const mockResponseReceivedEventWithHeaders = (headers: Protocol.Network.Headers) => {\n        return {\n          requestId: 'mockId',\n          loaderId: 'mockLoaderId',\n          frameId: 'mockFrameId',\n          timestamp: 581734.083213,\n          type: Protocol.Network.ResourceType.Document,\n          response: {\n            url: 'example.com',\n            status: 200,\n            statusText: '',\n            headers,\n            mimeType: 'text/html',\n            connectionReused: true,\n            connectionId: 12345,\n            encodedDataLength: 100,\n            securityState: 'secure',\n          } as Protocol.Network.Response,\n        } as Protocol.Network.ResponseReceivedEvent;\n      };\n\n      networkDispatcher.requestWillBeSent(requestWillBeSentEvent);\n      networkDispatcher.responseReceivedExtraInfo(responseReceivedExtraInfoEvent);\n\n      // ResponseReceived does not overwrite response headers.\n      networkDispatcher.responseReceived(mockResponseReceivedEventWithHeaders({'test-header': 'second'}));\n      assert.deepEqual(\n          networkDispatcher.requestForId('mockId')?.responseHeaders, [{name: 'test-header', value: 'first'}]);\n\n      // ResponseReceived does overwrite response headers if request is marked as intercepted.\n      SDK.NetworkManager.MultitargetNetworkManager.instance().dispatchEventToListeners(\n          SDK.NetworkManager.MultitargetNetworkManager.Events.RequestIntercepted, 'mockId');\n      networkDispatcher.responseReceived(mockResponseReceivedEventWithHeaders({'test-header': 'third'}));\n      assert.deepEqual(\n          networkDispatcher.requestForId('mockId')?.responseHeaders, [{name: 'test-header', value: 'third'}]);\n    });\n\n    it('has populated \\'originalHeaders\\' after receiving \\'responseReceivedExtraInfo\\'', () => {\n      const responseReceivedExtraInfoEvent = {\n        requestId: 'mockId' as Protocol.Network.RequestId,\n        blockedCookies: [],\n        headers: {\n          'test-header': 'first',\n          'set-cookie': 'foo=bar\\ncolor=green',\n        } as Protocol.Network.Headers,\n        resourceIPAddressSpace: Protocol.Network.IPAddressSpace.Public,\n        statusCode: 200,\n      } as Protocol.Network.ResponseReceivedExtraInfoEvent;\n\n      networkDispatcher.requestWillBeSent(requestWillBeSentEvent);\n      networkDispatcher.responseReceivedExtraInfo(responseReceivedExtraInfoEvent);\n\n      assert.deepEqual(networkDispatcher.requestForId('mockId')?.responseHeaders, [\n        {name: 'test-header', value: 'first'},\n        {name: 'set-cookie', value: 'foo=bar'},\n        {name: 'set-cookie', value: 'color=green'},\n      ]);\n    });\n\n    it('Correctly set early hints properties on receivedResponse event', () => {\n      const responseReceivedEvent = {\n        requestId: 'mockId',\n        loaderId: 'mockLoaderId',\n        frameId: 'mockFrameId',\n        timestamp: 581734.083213,\n        type: Protocol.Network.ResourceType.Document,\n        response: {\n          url: 'example.com',\n          status: 200,\n          statusText: '',\n          headers: {\n            'test-header': 'first',\n          } as Protocol.Network.Headers,\n          mimeType: 'text/html',\n          connectionReused: true,\n          connectionId: 12345,\n          encodedDataLength: 100,\n          securityState: 'secure',\n          fromEarlyHints: true,\n        } as Protocol.Network.Response,\n      } as Protocol.Network.ResponseReceivedEvent;\n\n      networkDispatcher.requestWillBeSent(requestWillBeSentEvent);\n      networkDispatcher.responseReceived(responseReceivedEvent);\n\n      assert.deepEqual(networkDispatcher.requestForId('mockId')?.fromEarlyHints(), true);\n    });\n\n    it('has populated early hints headers after receiving \\'repsonseReceivedEarlyHints\\'', () => {\n      const earlyHintsEvent = {\n        requestId: 'mockId' as Protocol.Network.RequestId,\n        headers: {\n          'link': '</style.css>; as=style;',\n        } as Protocol.Network.Headers,\n      };\n      networkDispatcher.requestWillBeSent(requestWillBeSentEvent);\n      networkDispatcher.loadingFinished(loadingFinishedEvent);\n      networkDispatcher.responseReceivedEarlyHints(earlyHintsEvent);\n\n      assert.deepEqual(networkDispatcher.requestForId('mockId')?.earlyHintsHeaders, [\n        {name: 'link', value: '</style.css>; as=style;'},\n      ]);\n    });\n  });\n\n  describeWithEnvironment('WebBundle requests', () => {\n    let networkDispatcher: SDK.NetworkManager.NetworkDispatcher;\n    const webBundleMetadataReceivedEvent = {requestId: 'mockId', urls: ['foo']} as\n        Protocol.Network.SubresourceWebBundleMetadataReceivedEvent;\n    const webBundleInnerResponseParsedEvent = {bundleRequestId: 'bundleRequestId', innerRequestId: 'mockId'} as\n        Protocol.Network.SubresourceWebBundleInnerResponseParsedEvent;\n    const resourceUrlsFoo = ['foo'] as Platform.DevToolsPath.UrlString[];\n\n    beforeEach(() => {\n      const networkManager = new Common.ObjectWrapper.ObjectWrapper();\n      networkDispatcher = new SDK.NetworkManager.NetworkDispatcher(networkManager as SDK.NetworkManager.NetworkManager);\n    });\n\n    it('have webbundle info when webbundle event happen between browser events', () => {\n      networkDispatcher.requestWillBeSent(requestWillBeSentEvent);\n      networkDispatcher.subresourceWebBundleMetadataReceived(webBundleMetadataReceivedEvent);\n      networkDispatcher.loadingFinished(loadingFinishedEvent);\n\n      assert.deepEqual(networkDispatcher.requestForId('mockId')?.webBundleInfo()?.resourceUrls, resourceUrlsFoo);\n    });\n\n    it('have webbundle info when webbundle event happen before browser events', () => {\n      networkDispatcher.subresourceWebBundleMetadataReceived(webBundleMetadataReceivedEvent);\n      networkDispatcher.requestWillBeSent(requestWillBeSentEvent);\n      networkDispatcher.loadingFinished(loadingFinishedEvent);\n\n      assert.deepEqual(networkDispatcher.requestForId('mockId')?.webBundleInfo()?.resourceUrls, resourceUrlsFoo);\n    });\n\n    it('have webbundle info when webbundle event happen after browser events', () => {\n      networkDispatcher.requestWillBeSent(requestWillBeSentEvent);\n      networkDispatcher.loadingFinished(loadingFinishedEvent);\n      networkDispatcher.subresourceWebBundleMetadataReceived(webBundleMetadataReceivedEvent);\n\n      assert.deepEqual(networkDispatcher.requestForId('mockId')?.webBundleInfo()?.resourceUrls, resourceUrlsFoo);\n    });\n\n    it('have webbundle info only for the final request but nor redirect', () => {\n      networkDispatcher.requestWillBeSent(requestWillBeSentEvent);\n      networkDispatcher.requestWillBeSent(\n          {requestId: 'mockId', request: {url: 'redirect.example.com'}, redirectResponse: {url: 'example.com'}} as\n          Protocol.Network.RequestWillBeSentEvent);\n      networkDispatcher.subresourceWebBundleMetadataReceived(webBundleMetadataReceivedEvent);\n      networkDispatcher.loadingFinished(loadingFinishedEvent);\n\n      assert.deepEqual(networkDispatcher.requestForId('mockId')?.webBundleInfo()?.resourceUrls, resourceUrlsFoo);\n      assert.exists(networkDispatcher.requestForId('mockId')?.redirectSource());\n      assert.notExists(networkDispatcher.requestForId('mockId')?.redirectSource()?.webBundleInfo());\n    });\n\n    it('have webbundle info on error', () => {\n      networkDispatcher.requestWillBeSent(requestWillBeSentEvent);\n      networkDispatcher.loadingFinished(loadingFinishedEvent);\n      networkDispatcher.subresourceWebBundleMetadataError(\n          {requestId: 'mockId', errorMessage: 'Kaboom!'} as Protocol.Network.SubresourceWebBundleMetadataErrorEvent);\n\n      assert.deepEqual(networkDispatcher.requestForId('mockId')?.webBundleInfo()?.errorMessage, 'Kaboom!');\n    });\n\n    it('have webbundle inner request info when webbundle event happen between browser events', () => {\n      networkDispatcher.requestWillBeSent(requestWillBeSentEvent);\n      networkDispatcher.subresourceWebBundleInnerResponseParsed(webBundleInnerResponseParsedEvent);\n      networkDispatcher.loadingFinished(loadingFinishedEvent);\n\n      assert.deepEqual(\n          networkDispatcher.requestForId('mockId')?.webBundleInnerRequestInfo()?.bundleRequestId, 'bundleRequestId');\n    });\n\n    it('have webbundle inner request info when webbundle event happen before browser events', () => {\n      networkDispatcher.subresourceWebBundleInnerResponseParsed(webBundleInnerResponseParsedEvent);\n      networkDispatcher.requestWillBeSent(requestWillBeSentEvent);\n      networkDispatcher.loadingFinished(loadingFinishedEvent);\n\n      assert.deepEqual(\n          networkDispatcher.requestForId('mockId')?.webBundleInnerRequestInfo()?.bundleRequestId, 'bundleRequestId');\n    });\n\n    it('have webbundle inner request info when webbundle event happen after browser events', () => {\n      networkDispatcher.requestWillBeSent(requestWillBeSentEvent);\n      networkDispatcher.loadingFinished(loadingFinishedEvent);\n      networkDispatcher.subresourceWebBundleInnerResponseParsed(webBundleInnerResponseParsedEvent);\n\n      assert.deepEqual(\n          networkDispatcher.requestForId('mockId')?.webBundleInnerRequestInfo()?.bundleRequestId, 'bundleRequestId');\n    });\n\n    it('have webbundle inner request info on error', () => {\n      networkDispatcher.requestWillBeSent(requestWillBeSentEvent);\n      networkDispatcher.loadingFinished(loadingFinishedEvent);\n      networkDispatcher.subresourceWebBundleInnerResponseError(\n          {innerRequestId: 'mockId', errorMessage: 'Kaboom!'} as\n          Protocol.Network.SubresourceWebBundleInnerResponseErrorEvent);\n\n      assert.deepEqual(networkDispatcher.requestForId('mockId')?.webBundleInnerRequestInfo()?.errorMessage, 'Kaboom!');\n    });\n  });\n});\n\ninterface OverriddenResponse {\n  requestId: Protocol.Fetch.RequestId;\n  responseCode: number;\n  body: string;\n  responseHeaders: Protocol.Fetch.HeaderEntry[];\n}\n\ndescribeWithMockConnection('InterceptedRequest', () => {\n  let target: SDK.Target.Target;\n  let fulfillRequestSpy: sinon.SinonSpy;\n\n  async function checkRequestOverride(\n      target: SDK.Target.Target, request: Protocol.Network.Request, requestId: Protocol.Fetch.RequestId,\n      responseStatusCode: number, responseHeaders: Protocol.Fetch.HeaderEntry[], responseBody: string,\n      expectedOverriddenResponse: OverriddenResponse, expectedSetCookieHeaders: Protocol.Fetch.HeaderEntry[] = []) {\n    const multitargetNetworkManager = SDK.NetworkManager.MultitargetNetworkManager.instance();\n    const fetchAgent = target.fetchAgent();\n\n    const fulfilledRequest = new Promise(resolve => {\n      multitargetNetworkManager.addEventListener(\n          SDK.NetworkManager.MultitargetNetworkManager.Events.RequestFulfilled, resolve);\n    });\n    const networkRequest = SDK.NetworkRequest.NetworkRequest.create(\n        requestId as unknown as Protocol.Network.RequestId, request.url as Platform.DevToolsPath.UrlString,\n        request.url as Platform.DevToolsPath.UrlString, null, null, null);\n\n    networkRequest.originalResponseHeaders = responseHeaders;\n\n    // The response headers passed to 'interceptedRequest' do not contain any\n    // 'set-cookie' headers, because they originate from CDP's 'Fetch.requestPaused'\n    // which receives its header information via mojo which in turn filters out\n    // 'set-cookie' headers.\n    const filteredResponseHeaders = responseHeaders.filter(header => header.name !== 'set-cookie');\n    const interceptedRequest = new SDK.NetworkManager.InterceptedRequest(\n        fetchAgent, request, Protocol.Network.ResourceType.Document, requestId, networkRequest, responseStatusCode,\n        filteredResponseHeaders);\n    interceptedRequest.responseBody = async () => {\n      return new TextUtils.ContentData.ContentData(responseBody, false, 'text/html');\n    };\n\n    assert.isTrue(fulfillRequestSpy.notCalled);\n    await multitargetNetworkManager.requestIntercepted(interceptedRequest);\n    await fulfilledRequest;\n    assert.isTrue(fulfillRequestSpy.calledOnceWithExactly(expectedOverriddenResponse));\n    assert.deepEqual(networkRequest.setCookieHeaders, expectedSetCookieHeaders);\n    fulfillRequestSpy.resetHistory();\n  }\n\n  async function checkSetCookieOverride(\n      url: string, headersFromServer: Protocol.Fetch.HeaderEntry[],\n      expectedOverriddenHeaders: Protocol.Fetch.HeaderEntry[],\n      expectedPersistedSetCookieHeaders: Protocol.Fetch.HeaderEntry[]): Promise<void> {\n    const responseCode = 200;\n    const requestId = 'request_id_for_cookies' as Protocol.Fetch.RequestId;\n    const responseBody = 'interceptedRequest content';\n    const networkRequest = {\n      method: 'GET',\n      url,\n    } as Protocol.Network.Request;\n    await checkRequestOverride(\n        target, networkRequest, requestId, responseCode, headersFromServer, responseBody, {\n          requestId,\n          responseCode,\n          body: btoa(responseBody),\n          responseHeaders: expectedOverriddenHeaders,\n        },\n        expectedPersistedSetCookieHeaders);\n  }\n\n  beforeEach(async () => {\n    SDK.NetworkManager.MultitargetNetworkManager.dispose();\n    target = createTarget();\n    const networkPersistenceManager =\n        await createWorkspaceProject('file:///path/to/overrides' as Platform.DevToolsPath.UrlString, [\n          {\n            name: '.headers',\n            path: 'www.example.com/',\n            content: `[\n            {\n              \"applyTo\": \"index.html\",\n              \"headers\": [{\n                \"name\": \"index-only\",\n                \"value\": \"only added to index.html\"\n              }]\n            },\n            {\n              \"applyTo\": \"*.css\",\n              \"headers\": [{\n                \"name\": \"css-only\",\n                \"value\": \"only added to css files\"\n              }]\n            },\n            {\n              \"applyTo\": \"path/to/*.js\",\n              \"headers\": [{\n                \"name\": \"another-header\",\n                \"value\": \"only added to specific path\"\n              }]\n            },\n            {\n              \"applyTo\": \"withCookie.html\",\n              \"headers\": [{\n                \"name\": \"set-cookie\",\n                \"value\": \"userId=12345\"\n              }]\n            },\n            {\n              \"applyTo\": \"withCookie2.html\",\n              \"headers\": [\n                {\n                  \"name\": \"set-cookie\",\n                  \"value\": \"userName=DevTools\"\n                },\n                {\n                  \"name\": \"set-cookie\",\n                  \"value\": \"themeColour=dark\"\n                }\n              ]\n            },\n            {\n              \"applyTo\": \"withCookie3.html\",\n              \"headers\": [\n                {\n                  \"name\": \"set-cookie\",\n                  \"value\": \"userName=DevTools\"\n                },\n                {\n                  \"name\": \"set-cookie\",\n                  \"value\": \"malformed_override\"\n                }\n              ]\n            },\n            {\n              \"applyTo\": \"cookies/*\",\n              \"headers\": [\n                {\n                  \"name\": \"set-cookie\",\n                  \"value\": \"unique=value\"\n                },\n                {\n                  \"name\": \"set-cookie\",\n                  \"value\": \"override-me=first\"\n                }\n              ]\n            },\n            {\n              \"applyTo\": \"cookies/mergeCookies.html\",\n              \"headers\": [\n                {\n                  \"name\": \"set-cookie\",\n                  \"value\": \"override-me=second\"\n                },\n                {\n                  \"name\": \"set-cookie\",\n                  \"value\": \"foo=bar\"\n                }\n              ]\n            }\n          ]`,\n          },\n          {\n            name: '.headers',\n            path: '',\n            content: `[\n            {\n              \"applyTo\": \"*\",\n              \"headers\": [{\n                \"name\": \"age\",\n                \"value\": \"overridden\"\n              }]\n            }\n          ]`,\n          },\n          {name: 'helloWorld.html', path: 'www.example.com/', content: 'Hello World!'},\n          {name: 'utf16.html', path: 'www.example.com/', content: 'Overwritten with non-UTF16 (TODO: fix this!)'},\n          {name: 'something.html', path: 'file:/usr/local/foo/content/', content: 'Override for something'},\n          {\n            name: '.headers',\n            path: 'file:/usr/local/example/',\n            content: `[\n            {\n              \"applyTo\": \"*\",\n              \"headers\": [{\n                \"name\": \"test-file-urls\",\n                \"value\": \"file url value\"\n              }]\n            }\n          ]`,\n          },\n          {name: 'index.html', path: 'file:/usr/local/example/', content: 'Overridden file content'},\n          {\n            name: '.headers',\n            path: 'www.longurl.com/longurls/',\n            content: `[\n            {\n              \"applyTo\": \"index.html-${\n                Platform.StringUtilities.hashCode('www.longurl.com/' + LONG_URL_PART).toString(16)}.html\",\n              \"headers\": [{\n                \"name\": \"long-url-header\",\n                \"value\": \"long url header value\"\n              }]\n            }\n          ]`,\n          },\n          {\n            name:\n                `index.html-${Platform.StringUtilities.hashCode('www.longurl.com/' + LONG_URL_PART).toString(16)}.html`,\n            path: 'www.longurl.com/longurls/',\n            content: 'Overridden long URL file content',\n          },\n          {\n            name: '.headers',\n            path: 'file:/longurls/',\n            content: `[\n            {\n              \"applyTo\": \"index.html-${\n                Platform.StringUtilities\n                    .hashCode(\n                        Persistence.NetworkPersistenceManager.NetworkPersistenceManager\n                            .encodeEncodedPathToLocalPathParts('file:' as Platform.DevToolsPath.EncodedPathString)[0] +\n                        '/' + LONG_URL_PART)\n                    .toString(16)}.html\",\n              \"headers\": [{\n                \"name\": \"long-file-url-header\",\n                \"value\": \"long file url header value\"\n              }]\n            }\n          ]`,\n          },\n        ]);\n    sinon.stub(target.fetchAgent(), 'invoke_enable');\n    fulfillRequestSpy = sinon.spy(target.fetchAgent(), 'invoke_fulfillRequest');\n    await networkPersistenceManager.updateInterceptionPatternsForTests();\n  });\n\n  it('can override headers-only for a status 200 request', async () => {\n    const responseCode = 200;\n    const requestId = 'request_id_1' as Protocol.Fetch.RequestId;\n    const responseBody = 'interceptedRequest content';\n    await checkRequestOverride(\n        target, {\n          method: 'GET',\n          url: 'https://www.example.com/styles.css',\n        } as Protocol.Network.Request,\n        requestId, responseCode, [{name: 'content-type', value: 'text/html; charset=utf-8'}], responseBody, {\n          requestId,\n          responseCode,\n          body: btoa(responseBody),\n          responseHeaders: [\n            {name: 'css-only', value: 'only added to css files'},\n            {name: 'age', value: 'overridden'},\n            {name: 'content-type', value: 'text/html; charset=utf-8'},\n          ],\n        });\n  });\n\n  it('does not intercept OPTIONS requests', async () => {\n    const requestId = 'request_id_1' as Protocol.Fetch.RequestId;\n    const request = {\n      method: 'OPTIONS',\n      url: 'https://www.example.com/styles.css',\n    } as Protocol.Network.Request;\n    const fetchAgent = target.fetchAgent();\n    const continueRequestSpy = sinon.spy(fetchAgent, 'invoke_continueRequest');\n\n    const networkRequest = SDK.NetworkRequest.NetworkRequest.create(\n        requestId as unknown as Protocol.Network.RequestId, request.url as Platform.DevToolsPath.UrlString,\n        request.url as Platform.DevToolsPath.UrlString, null, null, null);\n\n    const interceptedRequest = new SDK.NetworkManager.InterceptedRequest(\n        fetchAgent, request, Protocol.Network.ResourceType.Document, requestId, networkRequest);\n    interceptedRequest.responseBody = async () => {\n      return new TextUtils.ContentData.ContentData('interceptedRequest content', false, 'text/html');\n    };\n\n    assert.isTrue(continueRequestSpy.notCalled);\n    await SDK.NetworkManager.MultitargetNetworkManager.instance().requestIntercepted(interceptedRequest);\n    assert.isTrue(fulfillRequestSpy.notCalled);\n    assert.isTrue(continueRequestSpy.calledOnce);\n  });\n\n  it('can override headers and content for a status 200 request', async () => {\n    const responseCode = 200;\n    const requestId = 'request_id_2' as Protocol.Fetch.RequestId;\n    const responseBody = 'interceptedRequest content';\n    await checkRequestOverride(\n        target, {\n          method: 'GET',\n          url: 'https://www.example.com/helloWorld.html',\n        } as Protocol.Network.Request,\n        requestId, responseCode, [{name: 'content-type', value: 'text/html; charset=utf-8'}], responseBody, {\n          requestId,\n          responseCode,\n          body: btoa('Hello World!'),\n          responseHeaders: [\n            {name: 'age', value: 'overridden'},\n            {name: 'content-type', value: 'text/html; charset=utf-8'},\n          ],\n        });\n  });\n\n  describe('NetworkPersistenceManager', () => {\n    it('decodes the intercepted response body with the right charset', async () => {\n      const requestId = 'request_id_utf_16' as Protocol.Fetch.RequestId;\n      const request = {\n        method: 'GET',\n        url: 'https://www.example.com/utf16.html',\n      } as Protocol.Network.Request;\n      const fetchAgent = target.fetchAgent();\n      sinon.spy(fetchAgent, 'invoke_continueRequest');\n\n      const networkRequest = SDK.NetworkRequest.NetworkRequest.create(\n          requestId as unknown as Protocol.Network.RequestId, request.url as Platform.DevToolsPath.UrlString,\n          request.url as Platform.DevToolsPath.UrlString, null, null, null);\n      networkRequest.originalResponseHeaders = [{name: 'content-type', value: 'text/html; charset-utf-16'}];\n\n      // Create a quick'n dirty network UISourceCode for the request manually. We need to establish a binding to the\n      // overridden file system UISourceCode.\n      const networkProject = new Bindings.ContentProviderBasedProject.ContentProviderBasedProject(\n          Workspace.Workspace.WorkspaceImpl.instance(), 'testing-network', Workspace.Workspace.projectTypes.Network,\n          'Override network project', false);\n      Workspace.Workspace.WorkspaceImpl.instance().addProject(networkProject);\n      const uiSourceCode = networkProject.createUISourceCode(\n          'https://www.example.com/utf16.html' as Platform.DevToolsPath.UrlString,\n          Common.ResourceType.resourceTypes.Document);\n      networkProject.addUISourceCode(uiSourceCode);\n\n      const interceptedRequest = new SDK.NetworkManager.InterceptedRequest(\n          fetchAgent, request, Protocol.Network.ResourceType.Document, requestId, networkRequest, 200,\n          [{name: 'content-type', value: 'text/html; charset-utf-16'}]);\n      interceptedRequest.responseBody = async () => {\n        // Very simple HTML doc base64 encoded.\n        return new TextUtils.ContentData.ContentData(\n            '//48ACEARABPAEMAVABZAFAARQAgAGgAdABtAGwAPgAKADwAcAA+AEkA8QB0AOsAcgBuAOIAdABpAPQAbgDgAGwAaQB6AOYAdABpAPgAbgADJjTYBt88AC8AcAA+AAoA',\n            true, 'text/html', 'utf-16');\n      };\n\n      await SDK.NetworkManager.MultitargetNetworkManager.instance().requestIntercepted(interceptedRequest);\n      const content = await Persistence.NetworkPersistenceManager.NetworkPersistenceManager.instance()\n                          .originalContentForUISourceCode(uiSourceCode);\n\n      assert.strictEqual(content, '<!DOCTYPE html>\\n<p>Iñtërnâtiônàlizætiøn☃𝌆</p>\\n');\n    });\n  });\n\n  it('can override headers-only for a status 300 (redirect) request', async () => {\n    const responseCode = 300;\n    const requestId = 'request_id_3' as Protocol.Fetch.RequestId;\n    const responseBody = 'interceptedRequest content';\n    await checkRequestOverride(\n        target, {\n          method: 'GET',\n          url: 'https://www.example.com/path/to/foo.js',\n        } as Protocol.Network.Request,\n        requestId, responseCode, [{name: 'content-type', value: 'text/html; charset=utf-8'}], responseBody, {\n          requestId,\n          responseCode,\n          body: '',\n          responseHeaders: [\n            {name: 'another-header', value: 'only added to specific path'},\n            {name: 'age', value: 'overridden'},\n            {name: 'content-type', value: 'text/html; charset=utf-8'},\n          ],\n        });\n  });\n\n  it('can override headers and content for a status 300 (redirect) request', async () => {\n    const responseCode = 300;\n    const requestId = 'request_id_4' as Protocol.Fetch.RequestId;\n    const responseBody = 'interceptedRequest content';\n    await checkRequestOverride(\n        target, {\n          method: 'GET',\n          url: 'https://www.example.com/helloWorld.html',\n        } as Protocol.Network.Request,\n        requestId, responseCode, [{name: 'content-type', value: 'text/html; charset=utf-8'}], responseBody, {\n          requestId,\n          responseCode: 200,\n          body: btoa('Hello World!'),\n          responseHeaders: [\n            {name: 'age', value: 'overridden'},\n            {name: 'content-type', value: 'text/html; charset=utf-8'},\n          ],\n        });\n  });\n\n  it('can override headers-only for a status 404 (not found) request', async () => {\n    const responseCode = 404;\n    const requestId = 'request_id_5' as Protocol.Fetch.RequestId;\n    const responseBody = 'interceptedRequest content';\n    await checkRequestOverride(\n        target, {\n          method: 'GET',\n          url: 'https://www.example.com/doesNotExist.html',\n        } as Protocol.Network.Request,\n        requestId, responseCode, [{name: 'content-type', value: 'text/html; charset=utf-8'}], responseBody, {\n          requestId,\n          responseCode,\n          body: btoa(responseBody),\n          responseHeaders: [\n            {name: 'age', value: 'overridden'},\n            {name: 'content-type', value: 'text/html; charset=utf-8'},\n          ],\n        });\n  });\n\n  it('can override headers and content for a status 404 (not found) request', async () => {\n    const responseCode = 404;\n    const requestId = 'request_id_6' as Protocol.Fetch.RequestId;\n    const responseBody = 'interceptedRequest content';\n    await checkRequestOverride(\n        target, {\n          method: 'GET',\n          url: 'https://www.example.com/helloWorld.html',\n        } as Protocol.Network.Request,\n        requestId, responseCode, [{name: 'content-type', value: 'text/html; charset=utf-8'}], responseBody, {\n          requestId,\n          responseCode: 200,\n          body: btoa('Hello World!'),\n          responseHeaders: [\n            {name: 'age', value: 'overridden'},\n            {name: 'content-type', value: 'text/html; charset=utf-8'},\n          ],\n        });\n  });\n\n  it('can override headers and content for a request with a \\'file:/\\'-URL', async () => {\n    const responseCode = 200;\n    const requestId = 'request_id_8' as Protocol.Fetch.RequestId;\n    const responseBody = 'interceptedRequest content';\n    await checkRequestOverride(\n        target, {\n          method: 'GET',\n          url: 'file:///usr/local/example/index.html',\n        } as Protocol.Network.Request,\n        requestId, responseCode,\n        [\n          {name: 'content-type', value: 'text/html; charset=utf-8'},\n          {name: 'age', value: 'original'},\n        ],\n        responseBody, {\n          requestId,\n          responseCode,\n          body: btoa('Overridden file content'),\n          responseHeaders: [\n            {name: 'test-file-urls', value: 'file url value'},\n            {name: 'age', value: 'overridden'},\n            {name: 'content-type', value: 'text/html; charset=utf-8'},\n          ],\n        });\n  });\n\n  it('can apply global header overrides to a request with a \\'file:/\\'-URL', async () => {\n    const responseCode = 200;\n    const requestId = 'request_id_9' as Protocol.Fetch.RequestId;\n    const responseBody = 'content of something/index.html';\n    await checkRequestOverride(\n        target, {\n          method: 'GET',\n          url: 'file:///usr/local/whatever/index.html',\n        } as Protocol.Network.Request,\n        requestId, responseCode,\n        [\n          {name: 'content-type', value: 'text/html; charset=utf-8'},\n          {name: 'age', value: 'original'},\n        ],\n        responseBody, {\n          requestId,\n          responseCode,\n          body: btoa(responseBody),\n          responseHeaders: [\n            {name: 'age', value: 'overridden'},\n            {name: 'content-type', value: 'text/html; charset=utf-8'},\n          ],\n        });\n  });\n\n  it('can override headers and content for a request with a very long URL', async () => {\n    const responseCode = 200;\n    const requestId = 'request_id_10' as Protocol.Fetch.RequestId;\n    const responseBody = 'interceptedRequest content';\n    await checkRequestOverride(\n        target, {\n          method: 'GET',\n          url: `https://www.longurl.com/${LONG_URL_PART}`,\n        } as Protocol.Network.Request,\n        requestId, responseCode,\n        [\n          {name: 'content-type', value: 'text/html; charset=utf-8'},\n          {name: 'age', value: 'original'},\n        ],\n        responseBody, {\n          requestId,\n          responseCode,\n          body: btoa('Overridden long URL file content'),\n          responseHeaders: [\n            {name: 'long-url-header', value: 'long url header value'},\n            {name: 'age', value: 'overridden'},\n            {name: 'content-type', value: 'text/html; charset=utf-8'},\n          ],\n        });\n  });\n\n  it('can override headers for a request with a very long \\'file:/\\'-URL', async () => {\n    const responseCode = 200;\n    const requestId = 'request_id_11' as Protocol.Fetch.RequestId;\n    const responseBody = 'interceptedRequest content';\n    await checkRequestOverride(\n        target, {\n          method: 'GET',\n          url: 'file:///' + LONG_URL_PART,\n        } as Protocol.Network.Request,\n        requestId, responseCode,\n        [\n          {name: 'content-type', value: 'text/html; charset=utf-8'},\n          {name: 'age', value: 'original'},\n        ],\n        responseBody, {\n          requestId,\n          responseCode,\n          body: btoa(responseBody),\n          responseHeaders: [\n            {name: 'long-file-url-header', value: 'long file url header value'},\n            {name: 'age', value: 'overridden'},\n            {name: 'content-type', value: 'text/html; charset=utf-8'},\n          ],\n        });\n  });\n\n  it('can override \\'set-cookie\\' headers', async () => {\n    const headersFromServer = [{name: 'content-type', value: 'text/html; charset=utf-8'}];\n    const expectedOverriddenHeaders = [\n      {name: 'age', value: 'overridden'},\n      {name: 'content-type', value: 'text/html; charset=utf-8'},\n      {name: 'set-cookie', value: 'userId=12345'},\n    ];\n    const expectedPersistedSetCookieHeaders = [{name: 'set-cookie', value: 'userId=12345'}];\n    await checkSetCookieOverride(\n        'https://www.example.com/withCookie.html', headersFromServer, expectedOverriddenHeaders,\n        expectedPersistedSetCookieHeaders);\n  });\n\n  it('marks both requests as overridden when there are 2 requests with the same URL', async () => {\n    const responseCode = 200;\n    const requestId1 = 'request_id_1' as Protocol.Fetch.RequestId;\n    const requestId2 = 'request_id_2' as Protocol.Fetch.RequestId;\n    const body = 'interceptedRequest content';\n    const request = {\n      method: 'GET',\n      url: 'https://www.example.com/styles.css',\n    } as Protocol.Network.Request;\n    const originalResponseHeaders = [{name: 'content-type', value: 'text/html; charset=utf-8'}];\n    const responseHeaders = [\n      {name: 'css-only', value: 'only added to css files'},\n      {name: 'age', value: 'overridden'},\n      {name: 'content-type', value: 'text/html; charset=utf-8'},\n    ];\n\n    const {dispatcher} = target.model(SDK.NetworkManager.NetworkManager)!;\n    dispatcher.requestWillBeSent({requestId: requestId1 as string, request} as Protocol.Network.RequestWillBeSentEvent);\n    dispatcher.requestWillBeSent({requestId: requestId2 as string, request} as Protocol.Network.RequestWillBeSentEvent);\n\n    await checkRequestOverride(target, request, requestId1, responseCode, originalResponseHeaders, body, {\n      requestId: requestId1,\n      responseCode,\n      body: btoa(body),\n      responseHeaders,\n    });\n    await checkRequestOverride(target, request, requestId2, responseCode, originalResponseHeaders, body, {\n      requestId: requestId2,\n      responseCode,\n      body: btoa(body),\n      responseHeaders,\n    });\n    assert.isTrue(dispatcher.requestForId(requestId1)?.wasIntercepted());\n    assert.isTrue(dispatcher.requestForId(requestId2)?.wasIntercepted());\n  });\n\n  it('stores \\'set-cookie\\' headers on the request', async () => {\n    const headersFromServer = [{name: 'set-cookie', value: 'foo=bar'}];\n    const expectedOverriddenHeaders = [\n      {name: 'age', value: 'overridden'},\n    ];\n    const expectedPersistedSetCookieHeaders = [{name: 'set-cookie', value: 'foo=bar'}];\n    await checkSetCookieOverride(\n        'https://www.example.com/noCookie.html', headersFromServer, expectedOverriddenHeaders,\n        expectedPersistedSetCookieHeaders);\n  });\n\n  it('can override \\'set-cookie\\' headers when there server also sends \\'set-cookie\\' headers', async () => {\n    const headersFromServer = [{name: 'set-cookie', value: 'foo=bar'}];\n    const expectedOverriddenHeaders = [\n      {name: 'age', value: 'overridden'},\n      {name: 'set-cookie', value: 'userId=12345'},\n    ];\n    const expectedPersistedSetCookieHeaders =\n        [{name: 'set-cookie', value: 'foo=bar'}, {name: 'set-cookie', value: 'userId=12345'}];\n    await checkSetCookieOverride(\n        'https://www.example.com/withCookie.html', headersFromServer, expectedOverriddenHeaders,\n        expectedPersistedSetCookieHeaders);\n  });\n\n  it('can overwrite a cookie value from server with a cookie value from overrides', async () => {\n    const headersFromServer = [{name: 'set-cookie', value: 'userId=999'}];\n    const expectedOverriddenHeaders = [\n      {name: 'age', value: 'overridden'},\n      {name: 'set-cookie', value: 'userId=12345'},\n    ];\n    const expectedPersistedSetCookieHeaders = [{name: 'set-cookie', value: 'userId=12345'}];\n    await checkSetCookieOverride(\n        'https://www.example.com/withCookie.html', headersFromServer, expectedOverriddenHeaders,\n        expectedPersistedSetCookieHeaders);\n  });\n\n  it('correctly merges cookies from server and from overrides', async () => {\n    const headersFromServer = [\n      {name: 'set-cookie', value: 'foo=bar'},\n      {name: 'set-cookie', value: 'userName=server'},\n    ];\n    const expectedOverriddenHeaders = [\n      {name: 'age', value: 'overridden'},\n      {name: 'set-cookie', value: 'userName=DevTools'},\n      {name: 'set-cookie', value: 'themeColour=dark'},\n    ];\n    const expectedPersistedSetCookieHeaders = [\n      {name: 'set-cookie', value: 'foo=bar'},\n      {name: 'set-cookie', value: 'userName=DevTools'},\n      {name: 'set-cookie', value: 'themeColour=dark'},\n    ];\n    await checkSetCookieOverride(\n        'https://www.example.com/withCookie2.html', headersFromServer, expectedOverriddenHeaders,\n        expectedPersistedSetCookieHeaders);\n  });\n\n  it('correctly merges malformed cookies from server and from overrides', async () => {\n    const headersFromServer = [\n      {name: 'set-cookie', value: 'malformed_original'},\n      {name: 'set-cookie', value: 'userName=server'},\n    ];\n    const expectedOverriddenHeaders = [\n      {name: 'age', value: 'overridden'},\n      {name: 'set-cookie', value: 'userName=DevTools'},\n      {name: 'set-cookie', value: 'malformed_override'},\n    ];\n    const expectedPersistedSetCookieHeaders = [\n      {name: 'set-cookie', value: 'malformed_original'},\n      {name: 'set-cookie', value: 'userName=DevTools'},\n      {name: 'set-cookie', value: 'malformed_override'},\n    ];\n    await checkSetCookieOverride(\n        'https://www.example.com/withCookie3.html', headersFromServer, expectedOverriddenHeaders,\n        expectedPersistedSetCookieHeaders);\n  });\n\n  it('correctly merges \\'set-cookie\\' headers from server with multiple defined overrides', async () => {\n    const headersFromServer = [\n      {name: 'set-cookie', value: 'userName=server'},\n      {name: 'set-cookie', value: 'override-me=zero'},\n    ];\n    const expectedOverriddenHeaders = [\n      {name: 'age', value: 'overridden'},\n      {name: 'set-cookie', value: 'unique=value'},\n      {name: 'set-cookie', value: 'override-me=second'},\n      {name: 'set-cookie', value: 'foo=bar'},\n    ];\n    const expectedPersistedSetCookieHeaders = [\n      {name: 'set-cookie', value: 'userName=server'},\n      {name: 'set-cookie', value: 'override-me=second'},\n      {name: 'set-cookie', value: 'unique=value'},\n      {name: 'set-cookie', value: 'foo=bar'},\n    ];\n    await checkSetCookieOverride(\n        'https://www.example.com/cookies/mergeCookies.html', headersFromServer, expectedOverriddenHeaders,\n        expectedPersistedSetCookieHeaders);\n  });\n\n  it('correctly merges \\'set-cookie\\' headers with duplicates', () => {\n    const original = [\n      {name: 'set-cookie', value: 'foo=original'},\n      {name: 'set-cookie', value: 'bar=original'},\n      {name: 'set-cookie', value: 'baz=original'},\n      {name: 'set-cookie', value: 'duplicate=duplicate'},\n      {name: 'set-cookie', value: 'duplicate=duplicate'},\n      {name: 'set-cookie', value: 'duplicate2=duplicate2'},\n      {name: 'set-cookie', value: 'duplicate2=duplicate2'},\n      {name: 'set-cookie', value: 'duplicate3=duplicate3'},\n      {name: 'set-cookie', value: 'duplicate3=duplicate3'},\n      {name: 'set-cookie', value: 'malformed'},\n      {name: 'set-cookie', value: 'both'},\n      {name: 'set-cookie', value: 'double'},\n      {name: 'set-cookie', value: 'double'},\n      {name: 'set-cookie', value: 'original_duplicate'},\n      {name: 'set-cookie', value: 'original_duplicate'},\n      {name: 'set-cookie', value: 'override_duplicate'},\n    ];\n    const overrides = [\n      {name: 'set-cookie', value: 'bar=overridden'},\n      {name: 'set-cookie', value: 'baz=overridden1'},\n      {name: 'set-cookie', value: 'baz=overridden2'},\n      {name: 'set-cookie', value: 'duplicate2=overridden'},\n      {name: 'set-cookie', value: 'duplicate3=overridden'},\n      {name: 'set-cookie', value: 'duplicate3=overridden'},\n      {name: 'set-cookie', value: 'malformed_override'},\n      {name: 'set-cookie', value: 'both'},\n      {name: 'set-cookie', value: 'original_duplicate'},\n      {name: 'set-cookie', value: 'override_duplicate'},\n      {name: 'set-cookie', value: 'override_duplicate'},\n    ];\n    const expected = [\n      {name: 'set-cookie', value: 'foo=original'},\n      {name: 'set-cookie', value: 'bar=overridden'},\n      {name: 'set-cookie', value: 'baz=overridden1'},\n      {name: 'set-cookie', value: 'baz=overridden2'},\n      {name: 'set-cookie', value: 'duplicate=duplicate'},\n      {name: 'set-cookie', value: 'duplicate=duplicate'},\n      {name: 'set-cookie', value: 'duplicate2=overridden'},\n      {name: 'set-cookie', value: 'duplicate3=overridden'},\n      {name: 'set-cookie', value: 'duplicate3=overridden'},\n      {name: 'set-cookie', value: 'malformed'},\n      {name: 'set-cookie', value: 'both'},\n      {name: 'set-cookie', value: 'double'},\n      {name: 'set-cookie', value: 'double'},\n      {name: 'set-cookie', value: 'original_duplicate'},\n      {name: 'set-cookie', value: 'override_duplicate'},\n      {name: 'set-cookie', value: 'override_duplicate'},\n      {name: 'set-cookie', value: 'malformed_override'},\n    ];\n    assert.deepStrictEqual(SDK.NetworkManager.InterceptedRequest.mergeSetCookieHeaders(original, overrides), expected);\n  });\n});\n"]}