{"version":3,"file":"CPUThrottlingManager.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/CPUThrottlingManager.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EAAC,0BAA0B,EAAC,MAAM,iCAAiC,CAAC;AAE3E,OAAO,KAAK,GAAG,MAAM,UAAU,CAAC;AAEhC,0BAA0B,CAAC,sBAAsB,EAAE,GAAG,EAAE;IACtD,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;QACxD,MAAM,OAAO,GAAG,GAAG,CAAC,oBAAoB,CAAC,oBAAoB,CAAC,QAAQ,EAAE,CAAC;QACzE,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,sBAAsB,EAAE,CAAC;QAC3D,MAAM,CAAC,SAAS,CAAC,WAAW,EAAE,SAAS,CAAC,mBAAmB,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;QACxD,MAAM,OAAO,GAAG,GAAG,CAAC,oBAAoB,CAAC,oBAAoB,CAAC,QAAQ,EAAE,CAAC;QACzE,MAAM,iBAAiB,GAAG,SAAS,CAAC,mBAAmB,CAAC;QACxD,OAAO,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;QAClC,CAAC;YACC,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,sBAAsB,EAAE,CAAC;YAC3D,MAAM,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC,YAAY,CAAC,WAAW,EAAE,iBAAiB,CAAC,CAAC;QACtD,CAAC;QACD,CAAC;YACC,OAAO,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;YAClC,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,sBAAsB,EAAE,CAAC;YAC3D,MAAM,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;QACnC,CAAC;QACD,CAAC;YACC,OAAO,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC,CAAC;YACnC,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,sBAAsB,EAAE,CAAC;YAC3D,MAAM,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;QACnC,CAAC;QACD,CAAC;YACC,OAAO,CAAC,sBAAsB,CAAC,CAAC,GAAG,iBAAiB,CAAC,CAAC;YACtD,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,sBAAsB,EAAE,CAAC;YAC3D,MAAM,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,GAAG,iBAAiB,CAAC,CAAC;QACvD,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {describeWithRealConnection} from '../../testing/RealConnection.js';\n\nimport * as SDK from './sdk.js';\n\ndescribeWithRealConnection('CPUThrottlingManager', () => {\n  it('can get the current hardwareConcurrency.', async () => {\n    const manager = SDK.CPUThrottlingManager.CPUThrottlingManager.instance();\n    const concurrency = await manager.getHardwareConcurrency();\n    assert.deepEqual(concurrency, navigator.hardwareConcurrency);\n  });\n\n  it('can set the current hardwareConcurrency.', async () => {\n    const manager = SDK.CPUThrottlingManager.CPUThrottlingManager.instance();\n    const nativeConcurrency = navigator.hardwareConcurrency;\n    manager.setHardwareConcurrency(5);\n    {\n      const concurrency = await manager.getHardwareConcurrency();\n      assert.deepEqual(concurrency, 5);\n      assert.notDeepEqual(concurrency, nativeConcurrency);\n    }\n    {\n      manager.setHardwareConcurrency(0);\n      const concurrency = await manager.getHardwareConcurrency();\n      assert.deepEqual(concurrency, 5);\n    }\n    {\n      manager.setHardwareConcurrency(-1);\n      const concurrency = await manager.getHardwareConcurrency();\n      assert.deepEqual(concurrency, 5);\n    }\n    {\n      manager.setHardwareConcurrency(2 * nativeConcurrency);\n      const concurrency = await manager.getHardwareConcurrency();\n      assert.deepEqual(concurrency, 2 * nativeConcurrency);\n    }\n  });\n});\n"]}