{"version":3,"file":"ServiceWorkerCacheModel.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/ServiceWorkerCacheModel.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../common/common.js';\nimport * as i18n from '../i18n/i18n.js';\nimport type * as Platform from '../platform/platform.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport {type NameValue} from './NetworkRequest.js';\n\nimport {Capability, type Target} from './Target.js';\nimport {SDKModel} from './SDKModel.js';\n\nimport {Events as StorageBucketsModelEvents, StorageBucketsModel, type BucketEvent} from './StorageBucketsModel.js';\n\nconst UIStrings = {\n  /**\n   *@description Text in Service Worker Cache Model\n   *@example {https://cache} PH1\n   *@example {error message} PH2\n   */\n  serviceworkercacheagentError: '`ServiceWorkerCacheAgent` error deleting cache entry {PH1} in cache: {PH2}',\n};\nconst str_ = i18n.i18n.registerUIStrings('core/sdk/ServiceWorkerCacheModel.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class ServiceWorkerCacheModel extends SDKModel<EventTypes> implements ProtocolProxyApi.StorageDispatcher {\n  readonly cacheAgent: ProtocolProxyApi.CacheStorageApi;\n  readonly #storageAgent: ProtocolProxyApi.StorageApi;\n  readonly #storageBucketModel: StorageBucketsModel;\n\n  readonly #cachesInternal = new Map<string, Cache>();\n  readonly #storageKeysTracked = new Set<string>();\n  readonly #storageBucketsUpdated = new Set<Protocol.Storage.StorageBucket>();\n  readonly #throttler = new Common.Throttler.Throttler(2000);\n  #enabled = false;\n\n  // Used by tests to remove the Throttler timeout.\n  #scheduleAsSoonAsPossible = false;\n\n  /**\n   * Invariant: This #model can only be constructed on a ServiceWorker target.\n   */\n  constructor(target: Target) {\n    super(target);\n    target.registerStorageDispatcher(this);\n\n    this.cacheAgent = target.cacheStorageAgent();\n    this.#storageAgent = target.storageAgent();\n    this.#storageBucketModel = (target.model(StorageBucketsModel) as StorageBucketsModel);\n  }\n\n  enable(): void {\n    if (this.#enabled) {\n      return;\n    }\n\n    this.#storageBucketModel.addEventListener(StorageBucketsModelEvents.BucketAdded, this.storageBucketAdded, this);\n    this.#storageBucketModel.addEventListener(StorageBucketsModelEvents.BucketRemoved, this.storageBucketRemoved, this);\n\n    for (const storageBucket of this.#storageBucketModel.getBuckets()) {\n      this.addStorageBucket(storageBucket.bucket);\n    }\n    this.#enabled = true;\n  }\n\n  clearForStorageKey(storageKey: string): void {\n    for (const [opaqueId, cache] of this.#cachesInternal.entries()) {\n      if (cache.storageKey === storageKey) {\n        this.#cachesInternal.delete((opaqueId as string));\n        this.cacheRemoved((cache as Cache));\n      }\n    }\n    for (const storageBucket of this.#storageBucketModel.getBucketsForStorageKey(storageKey)) {\n      void this.loadCacheNames(storageBucket.bucket);\n    }\n  }\n\n  refreshCacheNames(): void {\n    for (const cache of this.#cachesInternal.values()) {\n      this.cacheRemoved(cache);\n    }\n    this.#cachesInternal.clear();\n    const storageBuckets = this.#storageBucketModel.getBuckets();\n    for (const storageBucket of storageBuckets) {\n      void this.loadCacheNames(storageBucket.bucket);\n    }\n  }\n\n  async deleteCache(cache: Cache): Promise<void> {\n    const response = await this.cacheAgent.invoke_deleteCache({cacheId: cache.cacheId});\n    if (response.getError()) {\n      console.error(`ServiceWorkerCacheAgent error deleting cache ${cache.toString()}: ${response.getError()}`);\n      return;\n    }\n    this.#cachesInternal.delete(cache.cacheId);\n    this.cacheRemoved(cache);\n  }\n\n  async deleteCacheEntry(cache: Cache, request: string): Promise<void> {\n    const response = await this.cacheAgent.invoke_deleteEntry({cacheId: cache.cacheId, request});\n    if (response.getError()) {\n      Common.Console.Console.instance().error(i18nString(\n          UIStrings.serviceworkercacheagentError, {PH1: cache.toString(), PH2: String(response.getError())}));\n      return;\n    }\n  }\n\n  loadCacheData(\n      cache: Cache, skipCount: number, pageSize: number, pathFilter: string,\n      callback: (arg0: Array<Protocol.CacheStorage.DataEntry>, arg1: number) => void): void {\n    void this.requestEntries(cache, skipCount, pageSize, pathFilter, callback);\n  }\n\n  loadAllCacheData(\n      cache: Cache, pathFilter: string,\n      callback: (arg0: Array<Protocol.CacheStorage.DataEntry>, arg1: number) => void): void {\n    void this.requestAllEntries(cache, pathFilter, callback);\n  }\n\n  caches(): Cache[] {\n    const caches = new Array();\n    for (const cache of this.#cachesInternal.values()) {\n      caches.push(cache);\n    }\n    return caches;\n  }\n\n  override dispose(): void {\n    for (const cache of this.#cachesInternal.values()) {\n      this.cacheRemoved(cache);\n    }\n    this.#cachesInternal.clear();\n    if (this.#enabled) {\n      this.#storageBucketModel.removeEventListener(\n          StorageBucketsModelEvents.BucketAdded, this.storageBucketAdded, this);\n      this.#storageBucketModel.removeEventListener(\n          StorageBucketsModelEvents.BucketRemoved, this.storageBucketRemoved, this);\n    }\n  }\n\n  private addStorageBucket(storageBucket: Protocol.Storage.StorageBucket): void {\n    void this.loadCacheNames(storageBucket);\n    if (!this.#storageKeysTracked.has(storageBucket.storageKey)) {\n      this.#storageKeysTracked.add(storageBucket.storageKey);\n      void this.#storageAgent.invoke_trackCacheStorageForStorageKey({storageKey: storageBucket.storageKey});\n    }\n  }\n\n  private removeStorageBucket(storageBucket: Protocol.Storage.StorageBucket): void {\n    let storageKeyCount = 0;\n    for (const [opaqueId, cache] of this.#cachesInternal.entries()) {\n      if (storageBucket.storageKey === cache.storageKey) {\n        storageKeyCount++;\n      }\n      if (cache.inBucket(storageBucket)) {\n        storageKeyCount--;\n        this.#cachesInternal.delete((opaqueId as string));\n        this.cacheRemoved((cache as Cache));\n      }\n    }\n    if (storageKeyCount === 0) {\n      this.#storageKeysTracked.delete(storageBucket.storageKey);\n      void this.#storageAgent.invoke_untrackCacheStorageForStorageKey({storageKey: storageBucket.storageKey});\n    }\n  }\n\n  private async loadCacheNames(storageBucket: Protocol.Storage.StorageBucket): Promise<void> {\n    const response = await this.cacheAgent.invoke_requestCacheNames({storageBucket});\n    if (response.getError()) {\n      return;\n    }\n    this.updateCacheNames(storageBucket, response.caches);\n  }\n\n  private updateCacheNames(storageBucket: Protocol.Storage.StorageBucket, cachesJson: Protocol.CacheStorage.Cache[]):\n      void {\n    function deleteAndSaveOldCaches(this: ServiceWorkerCacheModel, cache: Cache): void {\n      if (cache.inBucket(storageBucket) && !updatingCachesIds.has(cache.cacheId)) {\n        oldCaches.set(cache.cacheId, cache);\n        this.#cachesInternal.delete(cache.cacheId);\n      }\n    }\n\n    const updatingCachesIds = new Set<string>();\n    const newCaches = new Map<string, Cache>();\n    const oldCaches = new Map<string, Cache>();\n\n    for (const cacheJson of cachesJson) {\n      const storageBucket = cacheJson.storageBucket ??\n          this.#storageBucketModel.getDefaultBucketForStorageKey(cacheJson.storageKey)?.bucket;\n      if (!storageBucket) {\n        continue;\n      }\n      const cache = new Cache(this, storageBucket, cacheJson.cacheName, cacheJson.cacheId);\n      updatingCachesIds.add(cache.cacheId);\n      if (this.#cachesInternal.has(cache.cacheId)) {\n        continue;\n      }\n      newCaches.set(cache.cacheId, cache);\n      this.#cachesInternal.set(cache.cacheId, cache);\n    }\n    this.#cachesInternal.forEach(deleteAndSaveOldCaches, this);\n    newCaches.forEach(this.cacheAdded, this);\n    oldCaches.forEach(this.cacheRemoved, this);\n  }\n\n  private storageBucketAdded({data: {bucketInfo: {bucket}}}: Common.EventTarget.EventTargetEvent<BucketEvent>): void {\n    this.addStorageBucket(bucket);\n  }\n\n  private storageBucketRemoved({data: {bucketInfo: {bucket}}}: Common.EventTarget.EventTargetEvent<BucketEvent>): void {\n    this.removeStorageBucket(bucket);\n  }\n\n  private cacheAdded(cache: Cache): void {\n    this.dispatchEventToListeners(Events.CacheAdded, {model: this, cache: cache});\n  }\n\n  private cacheRemoved(cache: Cache): void {\n    this.dispatchEventToListeners(Events.CacheRemoved, {model: this, cache: cache});\n  }\n\n  private async requestEntries(\n      cache: Cache, skipCount: number, pageSize: number, pathFilter: string,\n      callback: (arg0: Array<Protocol.CacheStorage.DataEntry>, arg1: number) => void): Promise<void> {\n    const response =\n        await this.cacheAgent.invoke_requestEntries({cacheId: cache.cacheId, skipCount, pageSize, pathFilter});\n    if (response.getError()) {\n      console.error('ServiceWorkerCacheAgent error while requesting entries: ', response.getError());\n      return;\n    }\n    callback(response.cacheDataEntries, response.returnCount);\n  }\n\n  private async requestAllEntries(\n      cache: Cache, pathFilter: string,\n      callback: (arg0: Array<Protocol.CacheStorage.DataEntry>, arg1: number) => void): Promise<void> {\n    const response = await this.cacheAgent.invoke_requestEntries({cacheId: cache.cacheId, pathFilter});\n    if (response.getError()) {\n      console.error('ServiceWorkerCacheAgent error while requesting entries: ', response.getError());\n      return;\n    }\n    callback(response.cacheDataEntries, response.returnCount);\n  }\n\n  cacheStorageListUpdated({bucketId}: Protocol.Storage.CacheStorageListUpdatedEvent): void {\n    const storageBucket = this.#storageBucketModel.getBucketById(bucketId)?.bucket;\n    if (storageBucket) {\n      this.#storageBucketsUpdated.add(storageBucket);\n\n      void this.#throttler.schedule(\n          () => {\n            const promises =\n                Array.from(this.#storageBucketsUpdated, storageBucket => this.loadCacheNames(storageBucket));\n            this.#storageBucketsUpdated.clear();\n            return Promise.all(promises);\n          },\n          this.#scheduleAsSoonAsPossible ? Common.Throttler.Scheduling.AsSoonAsPossible :\n                                           Common.Throttler.Scheduling.Default);\n    }\n  }\n\n  cacheStorageContentUpdated({bucketId, cacheName}: Protocol.Storage.CacheStorageContentUpdatedEvent): void {\n    const storageBucket = this.#storageBucketModel.getBucketById(bucketId)?.bucket;\n    if (storageBucket) {\n      this.dispatchEventToListeners(Events.CacheStorageContentUpdated, {storageBucket, cacheName});\n    }\n  }\n\n  attributionReportingTriggerRegistered(_event: Protocol.Storage.AttributionReportingTriggerRegisteredEvent): void {\n  }\n\n  indexedDBListUpdated(_event: Protocol.Storage.IndexedDBListUpdatedEvent): void {\n  }\n\n  indexedDBContentUpdated(_event: Protocol.Storage.IndexedDBContentUpdatedEvent): void {\n  }\n\n  interestGroupAuctionEventOccurred(_event: Protocol.Storage.InterestGroupAuctionEventOccurredEvent): void {\n  }\n\n  interestGroupAccessed(_event: Protocol.Storage.InterestGroupAccessedEvent): void {\n  }\n\n  interestGroupAuctionNetworkRequestCreated(_event: Protocol.Storage.InterestGroupAuctionNetworkRequestCreatedEvent):\n      void {\n  }\n\n  sharedStorageAccessed(_event: Protocol.Storage.SharedStorageAccessedEvent): void {\n  }\n\n  storageBucketCreatedOrUpdated(_event: Protocol.Storage.StorageBucketCreatedOrUpdatedEvent): void {\n  }\n\n  storageBucketDeleted(_event: Protocol.Storage.StorageBucketDeletedEvent): void {\n  }\n\n  setThrottlerSchedulesAsSoonAsPossibleForTest(): void {\n    this.#scheduleAsSoonAsPossible = true;\n  }\n\n  attributionReportingSourceRegistered(_event: Protocol.Storage.AttributionReportingSourceRegisteredEvent): void {\n  }\n}\n\nexport const enum Events {\n  CacheAdded = 'CacheAdded',\n  CacheRemoved = 'CacheRemoved',\n  CacheStorageContentUpdated = 'CacheStorageContentUpdated',\n}\n\nexport interface CacheEvent {\n  model: ServiceWorkerCacheModel;\n  cache: Cache;\n}\n\nexport interface CacheStorageContentUpdatedEvent {\n  storageBucket: Protocol.Storage.StorageBucket;\n  cacheName: string;\n}\n\nexport type EventTypes = {\n  [Events.CacheAdded]: CacheEvent,\n  [Events.CacheRemoved]: CacheEvent,\n  [Events.CacheStorageContentUpdated]: CacheStorageContentUpdatedEvent,\n};\n\nexport class Cache {\n  readonly #model: ServiceWorkerCacheModel;\n  storageKey: string;\n  storageBucket: Protocol.Storage.StorageBucket;\n  cacheName: string;\n  cacheId: Protocol.CacheStorage.CacheId;\n\n  constructor(\n      model: ServiceWorkerCacheModel, storageBucket: Protocol.Storage.StorageBucket, cacheName: string,\n      cacheId: Protocol.CacheStorage.CacheId) {\n    this.#model = model;\n    this.storageBucket = storageBucket;\n    this.storageKey = storageBucket.storageKey;\n    this.cacheName = cacheName;\n    this.cacheId = cacheId;\n  }\n\n  inBucket(storageBucket: Protocol.Storage.StorageBucket): boolean {\n    return this.storageKey === storageBucket.storageKey && this.storageBucket.name === storageBucket.name;\n  }\n\n  equals(cache: Cache): boolean {\n    return this.cacheId === cache.cacheId;\n  }\n\n  toString(): string {\n    return this.storageKey + this.cacheName;\n  }\n\n  async requestCachedResponse(url: Platform.DevToolsPath.UrlString, requestHeaders: NameValue[]):\n      Promise<Protocol.CacheStorage.CachedResponse|null> {\n    const response = await this.#model.cacheAgent.invoke_requestCachedResponse(\n        {cacheId: this.cacheId, requestURL: url, requestHeaders});\n    if (response.getError()) {\n      return null;\n    }\n    return response.response;\n  }\n}\n\nSDKModel.register(ServiceWorkerCacheModel, {capabilities: Capability.Storage, autostart: false});\n"]}