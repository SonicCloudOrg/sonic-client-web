{"version":3,"file":"OverlayModel.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/OverlayModel.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Protocol from '../../generated/protocol.js';\nimport {\n  createTarget,\n} from '../../testing/EnvironmentHelpers.js';\nimport {\n  describeWithMockConnection,\n  setMockConnectionResponseHandler,\n} from '../../testing/MockConnection.js';\nimport type * as Platform from '../platform/platform.js';\n\nimport * as SDK from './sdk.js';\n\ndescribeWithMockConnection('OverlayModel', () => {\n  const DOCUMENT_URL_FOR_TEST = 'https://example.com/' as Platform.DevToolsPath.UrlString;\n\n  let cssModel: SDK.CSSModel.CSSModel|null;\n  let windowControls: SDK.OverlayModel.WindowControls|null;\n  let overlayModel: SDK.OverlayModel.OverlayModel|null;\n\n  const header: Protocol.CSS.CSSStyleSheetHeader = {\n    styleSheetId: 'stylesheet' as Protocol.CSS.StyleSheetId,\n    frameId: 'frame' as Protocol.Page.FrameId,\n    sourceURL: `${DOCUMENT_URL_FOR_TEST}styles.css`,\n    origin: Protocol.CSS.StyleSheetOrigin.Regular,\n    title: 'title',\n    disabled: false,\n    isInline: false,\n    isMutable: false,\n    isConstructed: false,\n    loadingFailed: false,\n    startLine: 0,\n    startColumn: 0,\n    length: 0,\n    endLine: 0,\n    endColumn: 0,\n  };\n\n  const defaultStyleSheet = `.titlebar {\n    left: env(titlebar-area-x);\n    top: env(titlebar-area-y);\n    width: env(titlebar-area-width);\n    height: env(titlebar-area-height);}`;\n\n  beforeEach(() => {\n    const target = createTarget({url: DOCUMENT_URL_FOR_TEST});\n    overlayModel = target.model(SDK.OverlayModel.OverlayModel);\n    cssModel = target.model(SDK.CSSModel.CSSModel);\n    assert.exists(cssModel);\n    windowControls = new SDK.OverlayModel.WindowControls(cssModel);\n\n    // Set up mock response handler to get the default style sheet\n    setMockConnectionResponseHandler('CSS.getStyleSheetText', () => {\n      return {text: defaultStyleSheet};\n    });\n  });\n\n  it('toggles controls toolbar', async () => {\n    assert.exists(overlayModel);\n    let config;\n\n    // Set up mock response handler to set the configuration\n    setMockConnectionResponseHandler('Overlay.setShowWindowControlsOverlay', request => {\n      config = request;\n      return request;\n    });\n\n    // Verify the config is empty when toggling toolbar to be false\n    await overlayModel.toggleWindowControlsToolbar(false);\n    assert.deepEqual(config, {}, 'Expect config to be empty when toolbar is toggled false');\n\n    // Verify the current config is sent when toggling toolbar to be true\n    await overlayModel.toggleWindowControlsToolbar(true);\n    const expectedDefaultConfig = {windowControlsOverlayConfig: overlayModel.getWindowControlsConfig()};\n    assert.deepEqual(config, expectedDefaultConfig, 'Expect default config sent when toolbar is toggled true');\n  });\n\n  it('initializes the style sheet text', async () => {\n    assert.exists(cssModel);\n    assert.exists(windowControls);\n\n    // Verify the style sheet is not initialized when no styles are present\n    const checkStyleSheet = await windowControls.initializeStyleSheetText(DOCUMENT_URL_FOR_TEST);\n    assert.isFalse(checkStyleSheet, 'Style should not be initialized if no CSS stylesheets are present');\n\n    // Add a style sheet and verify it gets added\n    cssModel.styleSheetAdded(header);\n    const styleSheetIds =\n        cssModel.getStyleSheetIdsForURL(`${DOCUMENT_URL_FOR_TEST}styles.css` as Platform.DevToolsPath.UrlString);\n    assert.deepEqual(styleSheetIds, ['stylesheet']);\n\n    // Verify style sheet gets initialized\n    const isInitialized = await windowControls.initializeStyleSheetText(DOCUMENT_URL_FOR_TEST);\n    assert.isTrue(isInitialized, 'Expect the style sheet to be initialized when CSS stylesheets are present');\n  });\n\n  it('toggles the emulated overlay', async () => {\n    assert.exists(cssModel);\n    assert.exists(windowControls);\n    let styleSheet;\n\n    // Set up mock response handler to set the style sheet\n    setMockConnectionResponseHandler('CSS.setStyleSheetText', req => {\n      styleSheet = req.text;\n      return req;\n    });\n\n    // Toggle emulated overlay and verify no emulated overlay when no styles are preset\n    await windowControls.toggleEmulatedOverlay(true);\n    assert.isUndefined(styleSheet, 'Expect overlay to not be toggled if no styles are present');\n\n    // Add style sheet and verify it gets added\n    cssModel.styleSheetAdded(header);\n    const styleSheetIds =\n        cssModel.getStyleSheetIdsForURL(`${DOCUMENT_URL_FOR_TEST}styles.css` as Platform.DevToolsPath.UrlString);\n    assert.deepEqual(styleSheetIds, ['stylesheet']);\n\n    // Initialize style sheet & verify it gets initialized\n    const isInitialized = await windowControls.initializeStyleSheetText(DOCUMENT_URL_FOR_TEST);\n    assert.isTrue(isInitialized);\n\n    // Toggle the emulated overlay and verify original style sheet gets replaced with emulated overlay\n    await windowControls.toggleEmulatedOverlay(true);\n    const expectedWindowsOverlay = `.titlebar {\n    left: env(titlebar-area-x, 0px);\n    top: env(titlebar-area-y, 0px);\n    width: env(titlebar-area-width, calc(100% - 238px));\n    height: env(titlebar-area-height, 33px);}`;\n\n    assert.strictEqual(styleSheet, expectedWindowsOverlay, 'Expect emulated overlay stylesheet to be used');\n\n    // Toggle the emulated overlay off and verify original style sheet is used\n    await windowControls.toggleEmulatedOverlay(false);\n    assert.strictEqual(styleSheet, defaultStyleSheet, 'Expect original default stylesheet to be used');\n  });\n\n  it('parses styles and replaces variables for style sheet correctly', () => {\n    assert.exists(windowControls);\n\n    const x = 85;\n    const y = 0;\n    const width = 185;\n    const height = 40;\n\n    let originalStyleSheet = `.titlebar {\n      position: absolute;\n      left: env(titlebar-area-x);\n      top: env(titlebar-area-y);\n      width: env(titlebar-area-width);\n      height: env(titlebar-area-height);\n    }`;\n\n    let expectedStyleSheet = `.titlebar {\n      position: absolute;\n      left: env(titlebar-area-x, ${x}px);\n      top: env(titlebar-area-y, ${y}px);\n      width: env(titlebar-area-width, calc(100% - ${width}px));\n      height: env(titlebar-area-height, ${height}px);\n    }`;\n\n    // Verify the original style sheet gets transformed to the expected style sheet for the given x, y, width, and height dimensions\n    let parsedStyleSheet = windowControls.transformStyleSheetforTesting(x, y, width, height, originalStyleSheet);\n    assert.strictEqual(parsedStyleSheet, expectedStyleSheet);\n\n    // Verify the original style sheet does not get transformed when no original stylesheet\n    originalStyleSheet = '';\n    parsedStyleSheet = windowControls.transformStyleSheetforTesting(x, y, width, height, originalStyleSheet);\n    assert.isUndefined(parsedStyleSheet);\n\n    // Verify the original style sheet gets transformed to the expected style sheet for partial CSS properties\n    originalStyleSheet = ': env(titlebar-area-xxx, 9px); width: env(titlebar-area-width);';\n    expectedStyleSheet = `: env(titlebar-area-xxx, 9px); width: env(titlebar-area-width, calc(100% - ${width}px));`;\n    parsedStyleSheet = windowControls.transformStyleSheetforTesting(x, y, width, height, originalStyleSheet);\n    assert.strictEqual(parsedStyleSheet, expectedStyleSheet);\n  });\n});\n"]}