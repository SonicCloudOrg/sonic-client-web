{"version":3,"file":"StorageKeyManager.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/StorageKeyManager.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\nimport type * as Platform from '../platform/platform.js';\n\nimport * as SDK from './sdk.js';\n\ndescribeWithMockConnection('StorageKeyManager', () => {\n  let manager: SDK.StorageKeyManager.StorageKeyManager;\n  beforeEach(() => {\n    const target = createTarget();\n    manager = new SDK.StorageKeyManager.StorageKeyManager(target);\n  });\n\n  it('updates storage keys and emits events correctly', () => {\n    let eventFired: boolean = false;\n    const keys = ['storagekey1', 'storagekey2'];\n\n    assert.isEmpty(manager.storageKeys());\n    manager.addEventListener(SDK.StorageKeyManager.Events.StorageKeyAdded, () => {\n      eventFired = true;\n    });\n    manager.updateStorageKeys(new Set<string>(keys));\n    assert.isTrue(eventFired);\n    assert.deepEqual(manager.storageKeys(), keys);\n\n    eventFired = false;\n    manager.addEventListener(SDK.StorageKeyManager.Events.StorageKeyRemoved, () => {\n      eventFired = true;\n    });\n    manager.updateStorageKeys(new Set<string>());\n    assert.isTrue(eventFired);\n    assert.isEmpty(manager.storageKeys());\n  });\n\n  it('updates main storage key and emits event correctly', () => {\n    const mainKey = 'storagekey1';\n    let eventFired = false;\n\n    assert.isEmpty(manager.mainStorageKey());\n    manager.addEventListener(SDK.StorageKeyManager.Events.MainStorageKeyChanged, () => {\n      eventFired = true;\n    });\n    manager.setMainStorageKey(mainKey);\n    assert.isTrue(eventFired);\n    assert.strictEqual(manager.mainStorageKey(), mainKey);\n  });\n});\n\ndescribe('parseStorageKey', () => {\n  it('parses first-party key', () => {\n    const storageKey = SDK.StorageKeyManager.parseStorageKey('https://example.com/');\n    assert.deepEqual(storageKey.origin, 'https://example.com' as Platform.DevToolsPath.UrlString);\n    assert.deepEqual([...storageKey.components], []);\n  });\n\n  it('parses ancestor chain bit', () => {\n    const storageKey = SDK.StorageKeyManager.parseStorageKey('https://example.com/^31');\n    assert.strictEqual(storageKey.origin, 'https://example.com');\n    assert.deepEqual([...storageKey.components], [[SDK.StorageKeyManager.StorageKeyComponent.ANCESTOR_CHAIN_BIT, '1']]);\n  });\n\n  it('parses top-level site', () => {\n    const storageKey = SDK.StorageKeyManager.parseStorageKey('https://test.example/^0https://example.com');\n    assert.strictEqual(storageKey.origin, 'https://test.example');\n    assert.deepEqual(\n        [...storageKey.components],\n        [[SDK.StorageKeyManager.StorageKeyComponent.TOP_LEVEL_SITE, 'https://example.com']]);\n  });\n\n  it('parses opaque top-level site', () => {\n    const storageKey = SDK.StorageKeyManager.parseStorageKey(\n        'https://sub.example.com/^43735928559^5110521^6https://sub.notexample.com');\n    assert.strictEqual(storageKey.origin, 'https://sub.example.com');\n    assert.deepEqual([...storageKey.components], [\n      [SDK.StorageKeyManager.StorageKeyComponent.TOP_LEVEL_SITE_OPAQUE_NONCE_HIGH, '3735928559'],\n      [SDK.StorageKeyManager.StorageKeyComponent.TOP_LEVEL_SITE_OPAQUE_NONCE_LOW, '110521'],\n      [SDK.StorageKeyManager.StorageKeyComponent.TOP_LEVEL_SITE_OPAQUE_NONCE_PRECURSOR, 'https://sub.notexample.com'],\n    ]);\n  });\n\n  it('parses nonce', () => {\n    const storageKey = SDK.StorageKeyManager.parseStorageKey('https://example.com/^112345^267890');\n    assert.strictEqual(storageKey.origin, 'https://example.com');\n    assert.deepEqual([...storageKey.components], [\n      [SDK.StorageKeyManager.StorageKeyComponent.NONCE_HIGH, '12345'],\n      [SDK.StorageKeyManager.StorageKeyComponent.NONCE_LOW, '67890'],\n    ]);\n  });\n});\n"]}