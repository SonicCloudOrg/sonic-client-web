{"version":3,"file":"PreloadingModel.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/PreloadingModel.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAG7B,OAAO,EAAC,YAAY,EAAC,MAAM,qCAAqC,CAAC;AACjE,OAAO,EACL,0BAA0B,EAC1B,aAAa,GACd,MAAM,iCAAiC,CAAC;AACzC,OAAO,EAAC,YAAY,EAAE,QAAQ,EAAC,MAAM,sCAAsC,CAAC;AAG5E,OAAO,KAAK,GAAG,MAAM,UAAU,CAAC;AAEhC,0BAA0B,CAAC,iBAAiB,EAAE,GAAG,EAAE;IACjD,EAAE,CAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;QACnE,MAAM,MAAM,GAAG,YAAY,EAAE,CAAC;QAC9B,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC;QAChE,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAErB,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,cAAc,EAAE,EAAE,EAAE,CAAC,CAAC;QAE7C,MAAM,QAAQ,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,QAAqC,CAAC;QAE5E,aAAa,CAAC,MAAM,EAAE,wBAAwB,EAAE;YAC9C,OAAO,EAAE;gBACP,EAAE,EAAE,aAAa;gBACjB,QAAQ;gBACR,UAAU,EAAE;;;;;;;;;CASnB;aACM;SACF,CAAC,CAAC;QACH,aAAa,CAAC,MAAM,EAAE,yCAAyC,EAAE;YAC/D,QAAQ;YACR,wBAAwB,EAAE;gBACxB;oBACE,GAAG,EAAE;wBACH,QAAQ;wBACR,MAAM,8DAA6C;wBACnD,GAAG,EAAE,oCAAoC;qBAC1C;oBACD,UAAU,EAAE,CAAC,aAAa,CAAC;oBAC3B,OAAO,EAAE,CAAC,CAAC,CAAC;iBACb;aACF;SACF,CAAC,CAAC;QACH,aAAa,CAAC,MAAM,EAAE,+BAA+B,EAAE;YACrD,GAAG,EAAE;gBACH,QAAQ;gBACR,MAAM,8DAA6C;gBACnD,GAAG,EAAE,oCAAoC;aAC1C;YACD,MAAM,8DAA8C;YACpD,SAAS,EAAE,aAAa;SACzB,CAAC,CAAC;QAEH,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,cAAc,EAAE,EAAE;YACvC;gBACE,EAAE,EAAE,aAA2C;gBAC/C,KAAK,EAAE;oBACL,EAAE,EAAE,aAA2C;oBAC/C,QAAQ;oBACR,UAAU,EAAE;;;;;;;;;CASrB;iBACQ;aACF;SACF,CAAC,CAAC;QACH,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,qBAAqB,CAAC,IAAI,CAAC,EAAE;YAClD;gBACE,EAAE,EAAE,GAAG,QAAQ,wDAAwD;gBACvE,KAAK,EAAE;oBACL,MAAM,8DAA6C;oBACnD,GAAG,EAAE;wBACH,QAAQ;wBACR,MAAM,8DAA6C;wBACnD,GAAG,EAAE,oCAAuE;qBAC7E;oBACD,MAAM,8DAA8C;oBACpD,cAAc,EAAE,IAAI;oBACpB,SAAS,EAAE,aAA2C;oBACtD,UAAU,EAAE,CAAC,aAAa,CAAiC;oBAC3D,OAAO,EAAE,CAAC,CAAC,CAAiC;iBAC7C;aACF;SACF,CAAC,CAAC;QAEH,aAAa,CAAC,MAAM,EAAE,wBAAwB,EAAE;YAC9C,OAAO,EAAE;gBACP,EAAE,EAAE,aAAa;gBACjB,QAAQ;gBACR,UAAU,EAAE;;;;;;;;;CASnB;aACM;SACF,CAAC,CAAC;QACH,aAAa,CAAC,MAAM,EAAE,yCAAyC,EAAE;YAC/D,QAAQ;YACR,wBAAwB,EAAE;gBACxB;oBACE,GAAG,EAAE;wBACH,QAAQ;wBACR,MAAM,8DAA6C;wBACnD,GAAG,EAAE,oCAAoC;qBAC1C;oBACD,UAAU,EAAE,CAAC,aAAa,CAAC;oBAC3B,OAAO,EAAE,CAAC,CAAC,CAAC;iBACb;gBACD;oBACE,GAAG,EAAE;wBACH,QAAQ;wBACR,MAAM,gEAA8C;wBACpD,GAAG,EAAE,+BAA+B;qBACrC;oBACD,UAAU,EAAE,CAAC,aAAa,CAAC;oBAC3B,OAAO,EAAE,CAAC,CAAC,CAAC;iBACb;aACF;SACF,CAAC,CAAC;QACH,aAAa,CAAC,MAAM,EAAE,gCAAgC,EAAE;YACtD,GAAG,EAAE;gBACH,QAAQ;gBACR,MAAM,gEAA8C;gBACpD,GAAG,EAAE,+BAA+B;aACrC;YACD,MAAM,8DAA8C;SACrD,CAAC,CAAC;QAEH,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,cAAc,EAAE,EAAE;YACvC;gBACE,EAAE,EAAE,aAA2C;gBAC/C,KAAK,EAAE;oBACL,EAAE,EAAE,aAA2C;oBAC/C,QAAQ;oBACR,UAAU,EAAE;;;;;;;;;CASrB;iBACQ;aACF;YACD;gBACE,EAAE,EAAE,aAA2C;gBAC/C,KAAK,EAAE;oBAEL,EAAE,EAAE,aAA2C;oBAC/C,QAAQ;oBACR,UAAU,EAAE;;;;;;;;;CASrB;iBACQ;aACF;SACF,CAAC,CAAC;QACH,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,qBAAqB,CAAC,IAAI,CAAC,EAAE;YAClD;gBACE,EAAE,EAAE,GAAG,QAAQ,wDAAwD;gBACvE,KAAK,EAAE;oBACL,MAAM,8DAA6C;oBACnD,GAAG,EAAE;wBACH,QAAQ;wBACR,MAAM,8DAA6C;wBACnD,GAAG,EAAE,oCAAuE;qBAC7E;oBACD,MAAM,8DAA8C;oBACpD,cAAc,EAAE,IAAI;oBACpB,SAAS,EAAE,aAA2C;oBACtD,UAAU,EAAE,CAAC,aAAa,CAAiC;oBAC3D,OAAO,EAAE,CAAC,CAAC,CAAiC;iBAC7C;aACF;YACD;gBACE,EAAE,EAAE,GAAG,QAAQ,oDAAoD;gBACnE,KAAK,EAAE;oBACL,MAAM,gEAA8C;oBACpD,GAAG,EAAE;wBACH,QAAQ;wBACR,MAAM,gEAA8C;wBACpD,GAAG,EAAE,+BAAkE;qBACxE;oBACD,MAAM,8DAA8C;oBACpD,eAAe,EAAE,IAAI;oBACrB,uBAAuB,EAAE,IAAI;oBAC7B,iBAAiB,EAAE,IAAI;oBACvB,UAAU,EAAE,CAAC,aAAa,CAAiC;oBAC3D,OAAO,EAAE,CAAC,CAAC,CAAiC;iBAC7C;aACF;SACF,CAAC,CAAC;QAEH,aAAa,CAAC,MAAM,EAAE,wBAAwB,EAAE;YAC9C,EAAE,EAAE,aAAa;SAClB,CAAC,CAAC;QACH,aAAa,CAAC,MAAM,EAAE,yCAAyC,EAAE;YAC/D,QAAQ;YACR,wBAAwB,EAAE;gBACxB;oBACE,GAAG,EAAE;wBACH,QAAQ;wBACR,MAAM,gEAA8C;wBACpD,GAAG,EAAE,+BAA+B;qBACrC;oBACD,UAAU,EAAE,CAAC,aAAa,CAAC;oBAC3B,OAAO,EAAE,CAAC,CAAC,CAAC;iBACb;aACF;SACF,CAAC,CAAC;QACH,aAAa,CAAC,MAAM,EAAE,+BAA+B,EAAE;YACrD,GAAG,EAAE;gBACH,QAAQ;gBACR,MAAM,8DAA6C;gBACnD,GAAG,EAAE,oCAAoC;aAC1C;YACD,MAAM,8DAA8C;YACpD,SAAS,EAAE,aAAa;SACzB,CAAC,CAAC;QAEH,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,cAAc,EAAE,EAAE;YACvC;gBACE,EAAE,EAAE,aAA2C;gBAC/C,KAAK,EAAE;oBACL,EAAE,EAAE,aAA2C;oBAC/C,QAAQ;oBACR,UAAU,EAAE;;;;;;;;;CASrB;iBACQ;aACF;SACF,CAAC,CAAC;QACH,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,qBAAqB,CAAC,IAAI,CAAC,EAAE;YAClD;gBACE,EAAE,EAAE,GAAG,QAAQ,wDAAwD;gBACvE,KAAK,EAAE;oBACL,MAAM,8DAA6C;oBACnD,GAAG,EAAE;wBACH,QAAQ;wBACR,MAAM,8DAA6C;wBACnD,GAAG,EAAE,oCAAuE;qBAC7E;oBACD,MAAM,8DAA8C;oBACpD,cAAc,EAAE,IAAI;oBACpB,SAAS,EAAE,aAA2C;oBACtD,2DAA2D;oBAC3D,sDAAsD;oBACtD,6DAA6D;oBAC7D,2DAA2D;oBAC3D,OAAO;oBACP,EAAE;oBACF,4DAA4D;oBAC5D,UAAU,EAAE,EAAkC;oBAC9C,OAAO,EAAE,EAAkC;iBAC5C;aACF;YACD;gBACE,EAAE,EAAE,GAAG,QAAQ,oDAAoD;gBACnE,KAAK,EAAE;oBACL,MAAM,gEAA8C;oBACpD,GAAG,EAAE;wBACH,QAAQ;wBACR,MAAM,gEAA8C;wBACpD,GAAG,EAAE,+BAAkE;qBACxE;oBACD,MAAM,8DAA8C;oBACpD,eAAe,EAAE,IAAI;oBACrB,uBAAuB,EAAE,IAAI;oBAC7B,iBAAiB,EAAE,IAAI;oBACvB,UAAU,EAAE,CAAC,aAAa,CAAiC;oBAC3D,OAAO,EAAE,CAAC,CAAC,CAAiC;iBAC7C;aACF;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;QACtE,MAAM,MAAM,GAAG,YAAY,EAAE,CAAC;QAC9B,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC;QAChE,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAErB,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,cAAc,EAAE,EAAE,EAAE,CAAC,CAAC;QAE7C,MAAM,QAAQ,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,QAAqC,CAAC;QAC5E,aAAa,CAAC,MAAM,EAAE,wBAAwB,EAAE;YAC9C,OAAO,EAAE;gBACP,EAAE,EAAE,aAAa;gBACjB,QAAQ;gBACR,UAAU,EAAE;;;;;;;;;CASnB;aACM;SACF,CAAC,CAAC;QACH,aAAa,CAAC,MAAM,EAAE,yCAAyC,EAAE;YAC/D,QAAQ;YACR,wBAAwB,EAAE;gBACxB;oBACE,GAAG,EAAE;wBACH,QAAQ;wBACR,MAAM,8DAA6C;wBACnD,GAAG,EAAE,oCAAoC;qBAC1C;oBACD,UAAU,EAAE,CAAC,aAAa,CAAC;oBAC3B,OAAO,EAAE,CAAC,CAAC,CAAC;iBACb;aACF;SACF,CAAC,CAAC;QAEH,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,qBAAqB,CAAC,IAAI,CAAC,EAAE;YAClD;gBACE,EAAE,EAAE,GAAG,QAAQ,wDAAwD;gBACvE,KAAK,EAAE;oBACL,MAAM,8DAA6C;oBACnD,GAAG,EAAE;wBACH,QAAQ;wBACR,MAAM,8DAA6C;wBACnD,GAAG,EAAE,oCAAuE;qBAC7E;oBACD,MAAM,wEAAmD;oBACzD,cAAc,EAAE,IAAI;oBACpB,qBAAqB;oBACrB,SAAS,EAAE,EAAgC;oBAC3C,UAAU,EAAE,CAAC,aAAa,CAAiC;oBAC3D,OAAO,EAAE,CAAC,CAAC,CAAiC;iBAC7C;aACF;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6DAA6D,EAAE,KAAK,IAAI,EAAE;QAC3E,MAAM,MAAM,GAAG,YAAY,EAAE,CAAC;QAC9B,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC;QAChE,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAErB,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,cAAc,EAAE,EAAE,EAAE,CAAC,CAAC;QAC7C,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,qBAAqB,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;QAExD,IAAI,QAAQ,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,QAAqC,CAAC;QAE1E,aAAa,CAAC,MAAM,EAAE,wBAAwB,EAAE;YAC9C,OAAO,EAAE;gBACP,EAAE,EAAE,aAAa;gBACjB,QAAQ;gBACR,UAAU,EAAE;;;;;;;;;CASnB;aACM;SACF,CAAC,CAAC;QACH,aAAa,CAAC,MAAM,EAAE,yCAAyC,EAAE;YAC/D,QAAQ;YACR,wBAAwB,EAAE;gBACxB;oBACE,GAAG,EAAE;wBACH,QAAQ;wBACR,MAAM,8DAA6C;wBACnD,GAAG,EAAE,qCAAqC;qBAC3C;oBACD,UAAU,EAAE,CAAC,aAAa,CAAC;oBAC3B,OAAO,EAAE,CAAC,CAAC,CAAC;iBACb;aACF;SACF,CAAC,CAAC;QACH,aAAa,CAAC,MAAM,EAAE,+BAA+B,EAAE;YACrD,GAAG,EAAE;gBACH,QAAQ;gBACR,MAAM,8DAA6C;gBACnD,GAAG,EAAE,qCAAqC;aAC3C;YACD,MAAM,8DAA8C;SACrD,CAAC,CAAC;QAEH,QAAQ,GAAG,YAAyC,CAAC;QACrD,QAAQ,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,EAAC,QAAQ,EAAC,CAAC,CAAC;QAE3C,aAAa,CAAC,MAAM,EAAE,wBAAwB,EAAE;YAC9C,OAAO,EAAE;gBACP,EAAE,EAAE,aAAa;gBACjB,QAAQ;gBACR,UAAU,EAAE;;;;;;;;;CASnB;aACM;SACF,CAAC,CAAC;QACH,aAAa,CAAC,MAAM,EAAE,yCAAyC,EAAE;YAC/D,QAAQ;YACR,wBAAwB,EAAE;gBACxB;oBACE,GAAG,EAAE;wBACH,QAAQ;wBACR,MAAM,8DAA6C;wBACnD,GAAG,EAAE,qCAAqC;qBAC3C;oBACD,UAAU,EAAE,CAAC,aAAa,CAAC;oBAC3B,OAAO,EAAE,CAAC,CAAC,CAAC;iBACb;aACF;SACF,CAAC,CAAC;QACH,aAAa,CAAC,MAAM,EAAE,+BAA+B,EAAE;YACrD,GAAG,EAAE;gBACH,QAAQ;gBACR,MAAM,8DAA6C;gBACnD,GAAG,EAAE,qCAAqC;aAC3C;YACD,MAAM,8DAA8C;YACpD,SAAS,EAAE,aAAa;SACzB,CAAC,CAAC;QAEH,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,cAAc,EAAE,EAAE;YACvC;gBACE,EAAE,EAAE,aAA2C;gBAC/C,KAAK,EAAE;oBACL,EAAE,EAAE,aAA2C;oBAC/C,QAAQ;oBACR,UAAU,EAAE;;;;;;;;;CASrB;iBACQ;aACF;SACF,CAAC,CAAC;QACH,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,qBAAqB,CAAC,IAAI,CAAC,EAAE;YAClD;gBACE,EAAE,EAAE,GAAG,QAAQ,yDAAyD;gBACxE,KAAK,EAAE;oBACL,MAAM,8DAA6C;oBACnD,GAAG,EAAE;wBACH,QAAQ;wBACR,MAAM,8DAA6C;wBACnD,GAAG,EAAE,qCAAwE;qBAC9E;oBACD,MAAM,8DAA8C;oBACpD,cAAc,EAAE,IAAI;oBACpB,SAAS,EAAE,aAA2C;oBACtD,UAAU,EAAE,CAAC,aAAa,CAAiC;oBAC3D,OAAO,EAAE,CAAC,CAAC,CAAiC;iBAC7C;aACF;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;QAC1D,MAAM,MAAM,GAAG,YAAY,EAAE,CAAC;QAC9B,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC;QAChE,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAErB,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,cAAc,EAAE,EAAE,EAAE,CAAC,CAAC;QAC7C,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,qBAAqB,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;QAExD,MAAM,QAAQ,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,QAAqC,CAAC;QAE5E,aAAa,CAAC,MAAM,EAAE,wBAAwB,EAAE;YAC9C,OAAO,EAAE;gBACP,EAAE,EAAE,aAAa;gBACjB,QAAQ;gBACR,UAAU,EAAE;;;;;;;;;CASnB;aACM;SACF,CAAC,CAAC;QACH,aAAa,CAAC,MAAM,EAAE,wBAAwB,EAAE;YAC9C,OAAO,EAAE;gBACP,EAAE,EAAE,aAAa;gBACjB,QAAQ;gBACR,UAAU,EAAE;;;;;;;;;CASnB;aACM;SACF,CAAC,CAAC;QACH,aAAa,CAAC,MAAM,EAAE,yCAAyC,EAAE;YAC/D,QAAQ;YACR,wBAAwB,EAAE;gBACxB;oBACE,MAAM,8DAA6C;oBACnD,GAAG,EAAE;wBACH,QAAQ;wBACR,MAAM,8DAA6C;wBACnD,GAAG,EAAE,sCAAsC;qBAC5C;oBACD,UAAU,EAAE,CAAC,aAAa,EAAE,aAAa,CAAC;oBAC1C,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;iBAChB;gBACD;oBACE,MAAM,8DAA6C;oBACnD,GAAG,EAAE;wBACH,QAAQ;wBACR,MAAM,8DAA6C;wBACnD,GAAG,EAAE,qCAAqC;qBAC3C;oBACD,UAAU,EAAE,CAAC,aAAa,CAAC;oBAC3B,OAAO,EAAE,CAAC,CAAC,CAAC;iBACb;aACF;SACF,CAAC,CAAC;QACH,aAAa,CAAC,MAAM,EAAE,+BAA+B,EAAE;YACrD,GAAG,EAAE;gBACH,QAAQ;gBACR,MAAM,8DAA6C;gBACnD,GAAG,EAAE,sCAAsC;aAC5C;YACD,MAAM,8DAA8C;YACpD,SAAS,EAAE,aAAa;SACzB,CAAC,CAAC;QACH,aAAa,CAAC,MAAM,EAAE,+BAA+B,EAAE;YACrD,GAAG,EAAE;gBACH,QAAQ;gBACR,MAAM,8DAA6C;gBACnD,GAAG,EAAE,qCAAqC;aAC3C;YACD,MAAM,8DAA8C;YACpD,SAAS,EAAE,aAAa;SACzB,CAAC,CAAC;QAEH,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,qBAAqB,CAAC,IAAI,CAAC,EAAE;YAClD;gBACE,EAAE,EAAE,GAAG,QAAQ,0DAA0D;gBACzE,KAAK,EAAE;oBACL,MAAM,8DAA6C;oBACnD,GAAG,EAAE;wBACH,QAAQ;wBACR,MAAM,8DAA6C;wBACnD,GAAG,EAAE,sCAAyE;qBAC/E;oBACD,MAAM,8DAA8C;oBACpD,cAAc,EAAE,IAAI;oBACpB,SAAS,EAAE,aAA2C;oBACtD,UAAU,EAAE,CAAC,aAAa,EAAE,aAAa,CAAiC;oBAC1E,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,CAAiC;iBAChD;aACF;YACD;gBACE,EAAE,EAAE,GAAG,QAAQ,yDAAyD;gBACxE,KAAK,EAAE;oBACL,MAAM,8DAA6C;oBACnD,GAAG,EAAE;wBACH,QAAQ;wBACR,MAAM,8DAA6C;wBACnD,GAAG,EAAE,qCAAwE;qBAC9E;oBACD,MAAM,8DAA8C;oBACpD,cAAc,EAAE,IAAI;oBACpB,SAAS,EAAE,aAA2C;oBACtD,UAAU,EAAE,CAAC,aAAa,CAAiC;oBAC3D,OAAO,EAAE,CAAC,CAAC,CAAiC;iBAC7C;aACF;SACF,CAAC,CAAC;QAEH,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,qBAAqB,CAAC,aAA2C,CAAC,EAAE;YACzF;gBACE,EAAE,EAAE,GAAG,QAAQ,0DAA0D;gBACzE,KAAK,EAAE;oBACL,MAAM,8DAA6C;oBACnD,GAAG,EAAE;wBACH,QAAQ;wBACR,MAAM,8DAA6C;wBACnD,GAAG,EAAE,sCAAyE;qBAC/E;oBACD,MAAM,8DAA8C;oBACpD,cAAc,EAAE,IAAI;oBACpB,SAAS,EAAE,aAA2C;oBACtD,UAAU,EAAE,CAAC,aAAa,EAAE,aAAa,CAAiC;oBAC1E,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,CAAiC;iBAChD;aACF;SACF,CAAC,CAAC;QAEH,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,qBAAqB,CAAC,aAA2C,CAAC,EAAE;YACzF;gBACE,EAAE,EAAE,GAAG,QAAQ,0DAA0D;gBACzE,KAAK,EAAE;oBACL,MAAM,8DAA6C;oBACnD,GAAG,EAAE;wBACH,QAAQ;wBACR,MAAM,8DAA6C;wBACnD,GAAG,EAAE,sCAAyE;qBAC/E;oBACD,MAAM,8DAA8C;oBACpD,cAAc,EAAE,IAAI;oBACpB,SAAS,EAAE,aAA2C;oBACtD,UAAU,EAAE,CAAC,aAAa,EAAE,aAAa,CAAiC;oBAC1E,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,CAAiC;iBAChD;aACF;YACD;gBACE,EAAE,EAAE,GAAG,QAAQ,yDAAyD;gBACxE,KAAK,EAAE;oBACL,MAAM,8DAA6C;oBACnD,GAAG,EAAE;wBACH,QAAQ;wBACR,MAAM,8DAA6C;wBACnD,GAAG,EAAE,qCAAwE;qBAC9E;oBACD,MAAM,8DAA8C;oBACpD,cAAc,EAAE,IAAI;oBACpB,SAAS,EAAE,aAA2C;oBACtD,UAAU,EAAE,CAAC,aAAa,CAAiC;oBAC3D,OAAO,EAAE,CAAC,CAAC,CAAiC;iBAC7C;aACF;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Protocol from '../../generated/protocol.js';\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {\n  describeWithMockConnection,\n  dispatchEvent,\n} from '../../testing/MockConnection.js';\nimport {getMainFrame, navigate} from '../../testing/ResourceTreeHelpers.js';\nimport type * as Platform from '../platform/platform.js';\n\nimport * as SDK from './sdk.js';\n\ndescribeWithMockConnection('PreloadingModel', () => {\n  it('adds and deletes rule sets and preloeading attempts', async () => {\n    const target = createTarget();\n    const model = target.model(SDK.PreloadingModel.PreloadingModel);\n    assert.exists(model);\n\n    assert.deepEqual(model.getAllRuleSets(), []);\n\n    const loaderId = getMainFrame(target).loaderId as Protocol.Network.LoaderId;\n\n    dispatchEvent(target, 'Preload.ruleSetUpdated', {\n      ruleSet: {\n        id: 'ruleSetId:1',\n        loaderId,\n        sourceText: `\n{\n  \"prefetch\":[\n    {\n      \"source\": \"list\",\n      \"urls\": [\"/subresource.js\"]\n    }\n  ]\n}\n`,\n      },\n    });\n    dispatchEvent(target, 'Preload.preloadingAttemptSourcesUpdated', {\n      loaderId,\n      preloadingAttemptSources: [\n        {\n          key: {\n            loaderId,\n            action: Protocol.Preload.SpeculationAction.Prefetch,\n            url: 'https://example.com/subresource.js',\n          },\n          ruleSetIds: ['ruleSetId:1'],\n          nodeIds: [1],\n        },\n      ],\n    });\n    dispatchEvent(target, 'Preload.prefetchStatusUpdated', {\n      key: {\n        loaderId,\n        action: Protocol.Preload.SpeculationAction.Prefetch,\n        url: 'https://example.com/subresource.js',\n      },\n      status: SDK.PreloadingModel.PreloadingStatus.Running,\n      requestId: 'requestId:1',\n    });\n\n    assert.deepEqual(model.getAllRuleSets(), [\n      {\n        id: 'ruleSetId:1' as Protocol.Preload.RuleSetId,\n        value: {\n          id: 'ruleSetId:1' as Protocol.Preload.RuleSetId,\n          loaderId,\n          sourceText: `\n{\n  \"prefetch\":[\n    {\n      \"source\": \"list\",\n      \"urls\": [\"/subresource.js\"]\n    }\n  ]\n}\n`,\n        },\n      },\n    ]);\n    assert.deepEqual(model.getPreloadingAttempts(null), [\n      {\n        id: `${loaderId}:Prefetch:https://example.com/subresource.js:undefined`,\n        value: {\n          action: Protocol.Preload.SpeculationAction.Prefetch,\n          key: {\n            loaderId,\n            action: Protocol.Preload.SpeculationAction.Prefetch,\n            url: 'https://example.com/subresource.js' as Platform.DevToolsPath.UrlString,\n          },\n          status: SDK.PreloadingModel.PreloadingStatus.Running,\n          prefetchStatus: null,\n          requestId: 'requestId:1' as Protocol.Network.RequestId,\n          ruleSetIds: ['ruleSetId:1'] as Protocol.Preload.RuleSetId[],\n          nodeIds: [1] as Protocol.DOM.BackendNodeId[],\n        },\n      },\n    ]);\n\n    dispatchEvent(target, 'Preload.ruleSetUpdated', {\n      ruleSet: {\n        id: 'ruleSetId:2',\n        loaderId,\n        sourceText: `\n{\n  \"prerender\":[\n    {\n      \"source\": \"list\",\n      \"urls\": [\"/page.html\"]\n    }\n  ]\n}\n`,\n      },\n    });\n    dispatchEvent(target, 'Preload.preloadingAttemptSourcesUpdated', {\n      loaderId,\n      preloadingAttemptSources: [\n        {\n          key: {\n            loaderId,\n            action: Protocol.Preload.SpeculationAction.Prefetch,\n            url: 'https://example.com/subresource.js',\n          },\n          ruleSetIds: ['ruleSetId:1'],\n          nodeIds: [1],\n        },\n        {\n          key: {\n            loaderId,\n            action: Protocol.Preload.SpeculationAction.Prerender,\n            url: 'https://example.com/page.html',\n          },\n          ruleSetIds: ['ruleSetId:2'],\n          nodeIds: [2],\n        },\n      ],\n    });\n    dispatchEvent(target, 'Preload.prerenderStatusUpdated', {\n      key: {\n        loaderId,\n        action: Protocol.Preload.SpeculationAction.Prerender,\n        url: 'https://example.com/page.html',\n      },\n      status: SDK.PreloadingModel.PreloadingStatus.Running,\n    });\n\n    assert.deepEqual(model.getAllRuleSets(), [\n      {\n        id: 'ruleSetId:1' as Protocol.Preload.RuleSetId,\n        value: {\n          id: 'ruleSetId:1' as Protocol.Preload.RuleSetId,\n          loaderId,\n          sourceText: `\n{\n  \"prefetch\":[\n    {\n      \"source\": \"list\",\n      \"urls\": [\"/subresource.js\"]\n    }\n  ]\n}\n`,\n        },\n      },\n      {\n        id: 'ruleSetId:2' as Protocol.Preload.RuleSetId,\n        value: {\n\n          id: 'ruleSetId:2' as Protocol.Preload.RuleSetId,\n          loaderId,\n          sourceText: `\n{\n  \"prerender\":[\n    {\n      \"source\": \"list\",\n      \"urls\": [\"/page.html\"]\n    }\n  ]\n}\n`,\n        },\n      },\n    ]);\n    assert.deepEqual(model.getPreloadingAttempts(null), [\n      {\n        id: `${loaderId}:Prefetch:https://example.com/subresource.js:undefined`,\n        value: {\n          action: Protocol.Preload.SpeculationAction.Prefetch,\n          key: {\n            loaderId,\n            action: Protocol.Preload.SpeculationAction.Prefetch,\n            url: 'https://example.com/subresource.js' as Platform.DevToolsPath.UrlString,\n          },\n          status: SDK.PreloadingModel.PreloadingStatus.Running,\n          prefetchStatus: null,\n          requestId: 'requestId:1' as Protocol.Network.RequestId,\n          ruleSetIds: ['ruleSetId:1'] as Protocol.Preload.RuleSetId[],\n          nodeIds: [1] as Protocol.DOM.BackendNodeId[],\n        },\n      },\n      {\n        id: `${loaderId}:Prerender:https://example.com/page.html:undefined`,\n        value: {\n          action: Protocol.Preload.SpeculationAction.Prerender,\n          key: {\n            loaderId,\n            action: Protocol.Preload.SpeculationAction.Prerender,\n            url: 'https://example.com/page.html' as Platform.DevToolsPath.UrlString,\n          },\n          status: SDK.PreloadingModel.PreloadingStatus.Running,\n          prerenderStatus: null,\n          disallowedMojoInterface: null,\n          mismatchedHeaders: null,\n          ruleSetIds: ['ruleSetId:2'] as Protocol.Preload.RuleSetId[],\n          nodeIds: [2] as Protocol.DOM.BackendNodeId[],\n        },\n      },\n    ]);\n\n    dispatchEvent(target, 'Preload.ruleSetRemoved', {\n      id: 'ruleSetId:1',\n    });\n    dispatchEvent(target, 'Preload.preloadingAttemptSourcesUpdated', {\n      loaderId,\n      preloadingAttemptSources: [\n        {\n          key: {\n            loaderId,\n            action: Protocol.Preload.SpeculationAction.Prerender,\n            url: 'https://example.com/page.html',\n          },\n          ruleSetIds: ['ruleSetId:2'],\n          nodeIds: [2],\n        },\n      ],\n    });\n    dispatchEvent(target, 'Preload.prefetchStatusUpdated', {\n      key: {\n        loaderId,\n        action: Protocol.Preload.SpeculationAction.Prefetch,\n        url: 'https://example.com/subresource.js',\n      },\n      status: SDK.PreloadingModel.PreloadingStatus.Failure,\n      requestId: 'requestId:1',\n    });\n\n    assert.deepEqual(model.getAllRuleSets(), [\n      {\n        id: 'ruleSetId:2' as Protocol.Preload.RuleSetId,\n        value: {\n          id: 'ruleSetId:2' as Protocol.Preload.RuleSetId,\n          loaderId,\n          sourceText: `\n{\n  \"prerender\":[\n    {\n      \"source\": \"list\",\n      \"urls\": [\"/page.html\"]\n    }\n  ]\n}\n`,\n        },\n      },\n    ]);\n    assert.deepEqual(model.getPreloadingAttempts(null), [\n      {\n        id: `${loaderId}:Prefetch:https://example.com/subresource.js:undefined`,\n        value: {\n          action: Protocol.Preload.SpeculationAction.Prefetch,\n          key: {\n            loaderId,\n            action: Protocol.Preload.SpeculationAction.Prefetch,\n            url: 'https://example.com/subresource.js' as Platform.DevToolsPath.UrlString,\n          },\n          status: SDK.PreloadingModel.PreloadingStatus.Failure,\n          prefetchStatus: null,\n          requestId: 'requestId:1' as Protocol.Network.RequestId,\n          // Note that current implementation doesn't show associated\n          // rule sets when preloading is cancelled by rule sets\n          // deletion. One can treat this case special, i.e. associated\n          // rule sets decreasing one to zero, and show the last rule\n          // set.\n          //\n          // TODO(https://crbug.com/1410709): Consider the above case.\n          ruleSetIds: [] as Protocol.Preload.RuleSetId[],\n          nodeIds: [] as Protocol.DOM.BackendNodeId[],\n        },\n      },\n      {\n        id: `${loaderId}:Prerender:https://example.com/page.html:undefined`,\n        value: {\n          action: Protocol.Preload.SpeculationAction.Prerender,\n          key: {\n            loaderId,\n            action: Protocol.Preload.SpeculationAction.Prerender,\n            url: 'https://example.com/page.html' as Platform.DevToolsPath.UrlString,\n          },\n          status: SDK.PreloadingModel.PreloadingStatus.Running,\n          prerenderStatus: null,\n          disallowedMojoInterface: null,\n          mismatchedHeaders: null,\n          ruleSetIds: ['ruleSetId:2'] as Protocol.Preload.RuleSetId[],\n          nodeIds: [2] as Protocol.DOM.BackendNodeId[],\n        },\n      },\n    ]);\n  });\n\n  it('registers preloeading attempt with status NotTriggered', async () => {\n    const target = createTarget();\n    const model = target.model(SDK.PreloadingModel.PreloadingModel);\n    assert.exists(model);\n\n    assert.deepEqual(model.getAllRuleSets(), []);\n\n    const loaderId = getMainFrame(target).loaderId as Protocol.Network.LoaderId;\n    dispatchEvent(target, 'Preload.ruleSetUpdated', {\n      ruleSet: {\n        id: 'ruleSetId:1',\n        loaderId,\n        sourceText: `\n{\n  \"prefetch\":[\n    {\n      \"source\": \"list\",\n      \"urls\": [\"/subresource.js\"]\n    }\n  ]\n}\n`,\n      },\n    });\n    dispatchEvent(target, 'Preload.preloadingAttemptSourcesUpdated', {\n      loaderId,\n      preloadingAttemptSources: [\n        {\n          key: {\n            loaderId,\n            action: Protocol.Preload.SpeculationAction.Prefetch,\n            url: 'https://example.com/subresource.js',\n          },\n          ruleSetIds: ['ruleSetId:1'],\n          nodeIds: [1],\n        },\n      ],\n    });\n\n    assert.deepEqual(model.getPreloadingAttempts(null), [\n      {\n        id: `${loaderId}:Prefetch:https://example.com/subresource.js:undefined`,\n        value: {\n          action: Protocol.Preload.SpeculationAction.Prefetch,\n          key: {\n            loaderId,\n            action: Protocol.Preload.SpeculationAction.Prefetch,\n            url: 'https://example.com/subresource.js' as Platform.DevToolsPath.UrlString,\n          },\n          status: SDK.PreloadingModel.PreloadingStatus.NotTriggered,\n          prefetchStatus: null,\n          // Invalid request id\n          requestId: '' as Protocol.Network.RequestId,\n          ruleSetIds: ['ruleSetId:1'] as Protocol.Preload.RuleSetId[],\n          nodeIds: [1] as Protocol.DOM.BackendNodeId[],\n        },\n      },\n    ]);\n  });\n\n  it('clears rule sets and preloading attempts for previous pages', async () => {\n    const target = createTarget();\n    const model = target.model(SDK.PreloadingModel.PreloadingModel);\n    assert.exists(model);\n\n    assert.deepEqual(model.getAllRuleSets(), []);\n    assert.deepEqual(model.getPreloadingAttempts(null), []);\n\n    let loaderId = getMainFrame(target).loaderId as Protocol.Network.LoaderId;\n\n    dispatchEvent(target, 'Preload.ruleSetUpdated', {\n      ruleSet: {\n        id: 'ruleSetId:1',\n        loaderId,\n        sourceText: `\n{\n  \"prefetch\": [\n    {\n      \"source\": \"list\",\n      \"urls\": [\"/subresource1.js\"]\n    }\n  ]\n}\n`,\n      },\n    });\n    dispatchEvent(target, 'Preload.preloadingAttemptSourcesUpdated', {\n      loaderId,\n      preloadingAttemptSources: [\n        {\n          key: {\n            loaderId,\n            action: Protocol.Preload.SpeculationAction.Prefetch,\n            url: 'https://example.com/subresource1.js',\n          },\n          ruleSetIds: ['ruleSetId:1'],\n          nodeIds: [1],\n        },\n      ],\n    });\n    dispatchEvent(target, 'Preload.prefetchStatusUpdated', {\n      key: {\n        loaderId,\n        action: Protocol.Preload.SpeculationAction.Prefetch,\n        url: 'https://example.com/subresource1.js',\n      },\n      status: SDK.PreloadingModel.PreloadingStatus.Running,\n    });\n\n    loaderId = 'loaderId:2' as Protocol.Network.LoaderId;\n    navigate(getMainFrame(target), {loaderId});\n\n    dispatchEvent(target, 'Preload.ruleSetUpdated', {\n      ruleSet: {\n        id: 'ruleSetId:2',\n        loaderId,\n        sourceText: `\n{\n  \"prefetch\": [\n    {\n      \"source\": \"list\",\n      \"urls\": [\"/subresource2.js\"]\n    }\n  ]\n}\n`,\n      },\n    });\n    dispatchEvent(target, 'Preload.preloadingAttemptSourcesUpdated', {\n      loaderId,\n      preloadingAttemptSources: [\n        {\n          key: {\n            loaderId,\n            action: Protocol.Preload.SpeculationAction.Prefetch,\n            url: 'https://example.com/subresource2.js',\n          },\n          ruleSetIds: ['ruleSetId:2'],\n          nodeIds: [2],\n        },\n      ],\n    });\n    dispatchEvent(target, 'Preload.prefetchStatusUpdated', {\n      key: {\n        loaderId,\n        action: Protocol.Preload.SpeculationAction.Prefetch,\n        url: 'https://example.com/subresource2.js',\n      },\n      status: SDK.PreloadingModel.PreloadingStatus.Running,\n      requestId: 'requestId:1',\n    });\n\n    assert.deepEqual(model.getAllRuleSets(), [\n      {\n        id: 'ruleSetId:2' as Protocol.Preload.RuleSetId,\n        value: {\n          id: 'ruleSetId:2' as Protocol.Preload.RuleSetId,\n          loaderId,\n          sourceText: `\n{\n  \"prefetch\": [\n    {\n      \"source\": \"list\",\n      \"urls\": [\"/subresource2.js\"]\n    }\n  ]\n}\n`,\n        },\n      },\n    ]);\n    assert.deepEqual(model.getPreloadingAttempts(null), [\n      {\n        id: `${loaderId}:Prefetch:https://example.com/subresource2.js:undefined`,\n        value: {\n          action: Protocol.Preload.SpeculationAction.Prefetch,\n          key: {\n            loaderId,\n            action: Protocol.Preload.SpeculationAction.Prefetch,\n            url: 'https://example.com/subresource2.js' as Platform.DevToolsPath.UrlString,\n          },\n          status: SDK.PreloadingModel.PreloadingStatus.Running,\n          prefetchStatus: null,\n          requestId: 'requestId:1' as Protocol.Network.RequestId,\n          ruleSetIds: ['ruleSetId:2'] as Protocol.Preload.RuleSetId[],\n          nodeIds: [2] as Protocol.DOM.BackendNodeId[],\n        },\n      },\n    ]);\n  });\n\n  it('filters preloading attempts by rule set id', async () => {\n    const target = createTarget();\n    const model = target.model(SDK.PreloadingModel.PreloadingModel);\n    assert.exists(model);\n\n    assert.deepEqual(model.getAllRuleSets(), []);\n    assert.deepEqual(model.getPreloadingAttempts(null), []);\n\n    const loaderId = getMainFrame(target).loaderId as Protocol.Network.LoaderId;\n\n    dispatchEvent(target, 'Preload.ruleSetUpdated', {\n      ruleSet: {\n        id: 'ruleSetId:1',\n        loaderId,\n        sourceText: `\n{\n  \"prefetch\": [\n    {\n      \"source\": \"list\",\n      \"urls\": [\"/subresource12.js\"]\n    }\n  ]\n}\n`,\n      },\n    });\n    dispatchEvent(target, 'Preload.ruleSetUpdated', {\n      ruleSet: {\n        id: 'ruleSetId:2',\n        loaderId,\n        sourceText: `\n{\n  \"prefetch\": [\n    {\n      \"source\": \"list\",\n      \"urls\": [\"/subresource12.js\", \"/subresource2.js\"]\n    }\n  ]\n}\n`,\n      },\n    });\n    dispatchEvent(target, 'Preload.preloadingAttemptSourcesUpdated', {\n      loaderId,\n      preloadingAttemptSources: [\n        {\n          action: Protocol.Preload.SpeculationAction.Prefetch,\n          key: {\n            loaderId,\n            action: Protocol.Preload.SpeculationAction.Prefetch,\n            url: 'https://example.com/subresource12.js',\n          },\n          ruleSetIds: ['ruleSetId:1', 'ruleSetId:2'],\n          nodeIds: [1, 2],\n        },\n        {\n          action: Protocol.Preload.SpeculationAction.Prefetch,\n          key: {\n            loaderId,\n            action: Protocol.Preload.SpeculationAction.Prefetch,\n            url: 'https://example.com/subresource2.js',\n          },\n          ruleSetIds: ['ruleSetId:2'],\n          nodeIds: [2],\n        },\n      ],\n    });\n    dispatchEvent(target, 'Preload.prefetchStatusUpdated', {\n      key: {\n        loaderId,\n        action: Protocol.Preload.SpeculationAction.Prefetch,\n        url: 'https://example.com/subresource12.js',\n      },\n      status: SDK.PreloadingModel.PreloadingStatus.Running,\n      requestId: 'requestId:1',\n    });\n    dispatchEvent(target, 'Preload.prefetchStatusUpdated', {\n      key: {\n        loaderId,\n        action: Protocol.Preload.SpeculationAction.Prefetch,\n        url: 'https://example.com/subresource2.js',\n      },\n      status: SDK.PreloadingModel.PreloadingStatus.Running,\n      requestId: 'requestId:2',\n    });\n\n    assert.deepEqual(model.getPreloadingAttempts(null), [\n      {\n        id: `${loaderId}:Prefetch:https://example.com/subresource12.js:undefined`,\n        value: {\n          action: Protocol.Preload.SpeculationAction.Prefetch,\n          key: {\n            loaderId,\n            action: Protocol.Preload.SpeculationAction.Prefetch,\n            url: 'https://example.com/subresource12.js' as Platform.DevToolsPath.UrlString,\n          },\n          status: SDK.PreloadingModel.PreloadingStatus.Running,\n          prefetchStatus: null,\n          requestId: 'requestId:1' as Protocol.Network.RequestId,\n          ruleSetIds: ['ruleSetId:1', 'ruleSetId:2'] as Protocol.Preload.RuleSetId[],\n          nodeIds: [1, 2] as Protocol.DOM.BackendNodeId[],\n        },\n      },\n      {\n        id: `${loaderId}:Prefetch:https://example.com/subresource2.js:undefined`,\n        value: {\n          action: Protocol.Preload.SpeculationAction.Prefetch,\n          key: {\n            loaderId,\n            action: Protocol.Preload.SpeculationAction.Prefetch,\n            url: 'https://example.com/subresource2.js' as Platform.DevToolsPath.UrlString,\n          },\n          status: SDK.PreloadingModel.PreloadingStatus.Running,\n          prefetchStatus: null,\n          requestId: 'requestId:2' as Protocol.Network.RequestId,\n          ruleSetIds: ['ruleSetId:2'] as Protocol.Preload.RuleSetId[],\n          nodeIds: [2] as Protocol.DOM.BackendNodeId[],\n        },\n      },\n    ]);\n\n    assert.deepEqual(model.getPreloadingAttempts('ruleSetId:1' as Protocol.Preload.RuleSetId), [\n      {\n        id: `${loaderId}:Prefetch:https://example.com/subresource12.js:undefined`,\n        value: {\n          action: Protocol.Preload.SpeculationAction.Prefetch,\n          key: {\n            loaderId,\n            action: Protocol.Preload.SpeculationAction.Prefetch,\n            url: 'https://example.com/subresource12.js' as Platform.DevToolsPath.UrlString,\n          },\n          status: SDK.PreloadingModel.PreloadingStatus.Running,\n          prefetchStatus: null,\n          requestId: 'requestId:1' as Protocol.Network.RequestId,\n          ruleSetIds: ['ruleSetId:1', 'ruleSetId:2'] as Protocol.Preload.RuleSetId[],\n          nodeIds: [1, 2] as Protocol.DOM.BackendNodeId[],\n        },\n      },\n    ]);\n\n    assert.deepEqual(model.getPreloadingAttempts('ruleSetId:2' as Protocol.Preload.RuleSetId), [\n      {\n        id: `${loaderId}:Prefetch:https://example.com/subresource12.js:undefined`,\n        value: {\n          action: Protocol.Preload.SpeculationAction.Prefetch,\n          key: {\n            loaderId,\n            action: Protocol.Preload.SpeculationAction.Prefetch,\n            url: 'https://example.com/subresource12.js' as Platform.DevToolsPath.UrlString,\n          },\n          status: SDK.PreloadingModel.PreloadingStatus.Running,\n          prefetchStatus: null,\n          requestId: 'requestId:1' as Protocol.Network.RequestId,\n          ruleSetIds: ['ruleSetId:1', 'ruleSetId:2'] as Protocol.Preload.RuleSetId[],\n          nodeIds: [1, 2] as Protocol.DOM.BackendNodeId[],\n        },\n      },\n      {\n        id: `${loaderId}:Prefetch:https://example.com/subresource2.js:undefined`,\n        value: {\n          action: Protocol.Preload.SpeculationAction.Prefetch,\n          key: {\n            loaderId,\n            action: Protocol.Preload.SpeculationAction.Prefetch,\n            url: 'https://example.com/subresource2.js' as Platform.DevToolsPath.UrlString,\n          },\n          status: SDK.PreloadingModel.PreloadingStatus.Running,\n          prefetchStatus: null,\n          requestId: 'requestId:2' as Protocol.Network.RequestId,\n          ruleSetIds: ['ruleSetId:2'] as Protocol.Preload.RuleSetId[],\n          nodeIds: [2] as Protocol.DOM.BackendNodeId[],\n        },\n      },\n    ]);\n  });\n});\n"]}