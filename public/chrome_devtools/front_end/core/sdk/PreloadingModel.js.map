{"version":3,"file":"PreloadingModel.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/PreloadingModel.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../common/common.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\n\nimport {assertNotNullOrUndefined} from '../platform/platform.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport {SDKModel} from './SDKModel.js';\nimport {Capability, type Target} from './Target.js';\nimport {TargetManager} from './TargetManager.js';\nimport {\n  Events as ResourceTreeModelEvents,\n  PrimaryPageChangeType,\n  ResourceTreeModel,\n  type ResourceTreeFrame,\n} from './ResourceTreeModel.js';\n\nexport interface WithId<I, V> {\n  id: I;\n  value: V;\n}\n\n// Holds preloading related information.\n//\n// - SpeculationRule rule sets\n// - Preloading attempts\n// - Relationship between rule sets and preloading attempts\nexport class PreloadingModel extends SDKModel<EventTypes> {\n  private agent: ProtocolProxyApi.PreloadApi;\n  private loaderIds: Protocol.Network.LoaderId[] = [];\n  private targetJustAttached: boolean = true;\n  private lastPrimaryPageModel: PreloadingModel|null = null;\n  private documents: Map<Protocol.Network.LoaderId, DocumentPreloadingData> =\n      new Map<Protocol.Network.LoaderId, DocumentPreloadingData>();\n\n  constructor(target: Target) {\n    super(target);\n\n    target.registerPreloadDispatcher(new PreloadDispatcher(this));\n\n    this.agent = target.preloadAgent();\n    void this.agent.invoke_enable();\n\n    const targetInfo = target.targetInfo();\n    if (targetInfo !== undefined && targetInfo.subtype === 'prerender') {\n      this.lastPrimaryPageModel = TargetManager.instance().primaryPageTarget()?.model(PreloadingModel) || null;\n    }\n\n    TargetManager.instance().addModelListener(\n        ResourceTreeModel, ResourceTreeModelEvents.PrimaryPageChanged, this.onPrimaryPageChanged, this);\n  }\n\n  override dispose(): void {\n    super.dispose();\n\n    TargetManager.instance().removeModelListener(\n        ResourceTreeModel, ResourceTreeModelEvents.PrimaryPageChanged, this.onPrimaryPageChanged, this);\n\n    void this.agent.invoke_disable();\n  }\n\n  private ensureDocumentPreloadingData(loaderId: Protocol.Network.LoaderId): void {\n    if (this.documents.get(loaderId) === undefined) {\n      this.documents.set(loaderId, new DocumentPreloadingData());\n    }\n  }\n\n  private currentLoaderId(): Protocol.Network.LoaderId|null {\n    // Target is just attached and didn't received CDP events that we can infer loaderId.\n    if (this.targetJustAttached) {\n      return null;\n    }\n\n    if (this.loaderIds.length === 0) {\n      throw new Error('unreachable');\n    }\n\n    return this.loaderIds[this.loaderIds.length - 1];\n  }\n\n  private currentDocument(): DocumentPreloadingData|null {\n    const loaderId = this.currentLoaderId();\n    return loaderId === null ? null : this.documents.get(loaderId) || null;\n  }\n\n  // Returns a rule set of the current page.\n  //\n  // Returns reference. Don't save returned values.\n  // Returned value may or may not be updated as the time grows.\n  getRuleSetById(id: Protocol.Preload.RuleSetId): Protocol.Preload.RuleSet|null {\n    return this.currentDocument()?.ruleSets.getById(id) || null;\n  }\n\n  // Returns rule sets of the current page.\n  //\n  // Returns array of pairs of id and reference. Don't save returned references.\n  // Returned values may or may not be updated as the time grows.\n  getAllRuleSets(): WithId<Protocol.Preload.RuleSetId, Protocol.Preload.RuleSet>[] {\n    return this.currentDocument()?.ruleSets.getAll() || [];\n  }\n\n  getPreloadCountsByRuleSetId(): Map<Protocol.Preload.RuleSetId|null, Map<PreloadingStatus, number>> {\n    const countsByRuleSetId = new Map<Protocol.Preload.RuleSetId|null, Map<PreloadingStatus, number>>();\n\n    for (const {value} of this.getPreloadingAttempts(null)) {\n      for (const ruleSetId of [null, ...value.ruleSetIds]) {\n        if (countsByRuleSetId.get(ruleSetId) === undefined) {\n          countsByRuleSetId.set(ruleSetId, new Map<PreloadingStatus, number>());\n        }\n\n        const countsByStatus = countsByRuleSetId.get(ruleSetId);\n        assertNotNullOrUndefined(countsByStatus);\n        const i = countsByStatus.get(value.status) || 0;\n        countsByStatus.set(value.status, i + 1);\n      }\n    }\n\n    return countsByRuleSetId;\n  }\n\n  // Returns a preloading attempt of the current page.\n  //\n  // Returns reference. Don't save returned values.\n  // Returned value may or may not be updated as the time grows.\n  getPreloadingAttemptById(id: PreloadingAttemptId): PreloadingAttempt|null {\n    const document = this.currentDocument();\n    if (document === null) {\n      return null;\n    }\n\n    return document.preloadingAttempts.getById(id, document.sources) || null;\n  }\n\n  // Returs preloading attempts of the current page that triggered by the rule set with `ruleSetId`.\n  // `ruleSetId === null` means \"do not filter\".\n  //\n  // Returns array of pairs of id and reference. Don't save returned references.\n  // Returned values may or may not be updated as the time grows.\n  getPreloadingAttempts(ruleSetId: Protocol.Preload.RuleSetId|null): WithId<PreloadingAttemptId, PreloadingAttempt>[] {\n    const document = this.currentDocument();\n    if (document === null) {\n      return [];\n    }\n\n    return document.preloadingAttempts.getAll(ruleSetId, document.sources);\n  }\n\n  // Returs preloading attempts of the previousPgae.\n  //\n  // Returns array of pairs of id and reference. Don't save returned references.\n  // Returned values may or may not be updated as the time grows.\n  getPreloadingAttemptsOfPreviousPage(): WithId<PreloadingAttemptId, PreloadingAttempt>[] {\n    if (this.loaderIds.length <= 1) {\n      return [];\n    }\n\n    const document = this.documents.get(this.loaderIds[this.loaderIds.length - 2]);\n    if (document === undefined) {\n      return [];\n    }\n\n    return document.preloadingAttempts.getAll(null, document.sources);\n  }\n\n  private onPrimaryPageChanged(\n      event: Common.EventTarget.EventTargetEvent<{frame: ResourceTreeFrame, type: PrimaryPageChangeType}>): void {\n    const {frame, type} = event.data;\n\n    // Model of prerendered page's target will hands over. Do nothing for the initiator page.\n    if (this.lastPrimaryPageModel === null && type === PrimaryPageChangeType.Activation) {\n      return;\n    }\n\n    if (this.lastPrimaryPageModel !== null && type !== PrimaryPageChangeType.Activation) {\n      return;\n    }\n\n    if (this.lastPrimaryPageModel !== null && type === PrimaryPageChangeType.Activation) {\n      // Hand over from the model of the last primary page.\n      this.loaderIds = this.lastPrimaryPageModel.loaderIds;\n      for (const [loaderId, prev] of this.lastPrimaryPageModel.documents.entries()) {\n        this.ensureDocumentPreloadingData(loaderId);\n        this.documents.get(loaderId)?.mergePrevious(prev);\n      }\n    }\n\n    this.lastPrimaryPageModel = null;\n\n    // Note that at this timing ResourceTreeFrame.loaderId is ensured to\n    // be non empty and Protocol.Network.LoaderId because it is filled\n    // by ResourceTreeFrame.navigate.\n    const currentLoaderId = frame.loaderId as Protocol.Network.LoaderId;\n\n    // Holds histories for two pages at most.\n    this.loaderIds.push(currentLoaderId);\n    this.loaderIds = this.loaderIds.slice(-2);\n    this.ensureDocumentPreloadingData(currentLoaderId);\n    for (const loaderId of this.documents.keys()) {\n      if (!this.loaderIds.includes(loaderId)) {\n        this.documents.delete(loaderId);\n      }\n    }\n\n    this.dispatchEventToListeners(Events.ModelUpdated);\n  }\n\n  onRuleSetUpdated(event: Protocol.Preload.RuleSetUpdatedEvent): void {\n    const ruleSet = event.ruleSet;\n\n    const loaderId = ruleSet.loaderId;\n\n    // Infer current loaderId if DevTools is opned at the current page.\n    if (this.currentLoaderId() === null) {\n      this.loaderIds = [loaderId];\n      this.targetJustAttached = false;\n    }\n\n    this.ensureDocumentPreloadingData(loaderId);\n    this.documents.get(loaderId)?.ruleSets.upsert(ruleSet);\n    this.dispatchEventToListeners(Events.ModelUpdated);\n  }\n\n  onRuleSetRemoved(event: Protocol.Preload.RuleSetRemovedEvent): void {\n    const id = event.id;\n\n    for (const document of this.documents.values()) {\n      document.ruleSets.delete(id);\n    }\n    this.dispatchEventToListeners(Events.ModelUpdated);\n  }\n\n  onPreloadingAttemptSourcesUpdated(event: Protocol.Preload.PreloadingAttemptSourcesUpdatedEvent): void {\n    const loaderId = event.loaderId;\n    this.ensureDocumentPreloadingData(loaderId);\n\n    const document = this.documents.get(loaderId);\n    if (document === undefined) {\n      return;\n    }\n\n    document.sources.update(event.preloadingAttemptSources);\n    document.preloadingAttempts.maybeRegisterNotTriggered(document.sources);\n    this.dispatchEventToListeners(Events.ModelUpdated);\n  }\n\n  onPrefetchStatusUpdated(event: Protocol.Preload.PrefetchStatusUpdatedEvent): void {\n    const loaderId = event.key.loaderId;\n    this.ensureDocumentPreloadingData(loaderId);\n    const attempt: PrefetchAttemptInternal = {\n      action: Protocol.Preload.SpeculationAction.Prefetch,\n      key: event.key,\n      status: convertPreloadingStatus(event.status),\n      prefetchStatus: event.prefetchStatus || null,\n      requestId: event.requestId,\n    };\n    this.documents.get(loaderId)?.preloadingAttempts.upsert(attempt);\n    this.dispatchEventToListeners(Events.ModelUpdated);\n  }\n\n  onPrerenderStatusUpdated(event: Protocol.Preload.PrerenderStatusUpdatedEvent): void {\n    const loaderId = event.key.loaderId;\n    this.ensureDocumentPreloadingData(loaderId);\n    const attempt: PrerenderAttemptInternal = {\n      action: Protocol.Preload.SpeculationAction.Prerender,\n      key: event.key,\n      status: convertPreloadingStatus(event.status),\n      prerenderStatus: event.prerenderStatus || null,\n      disallowedMojoInterface: event.disallowedMojoInterface || null,\n      mismatchedHeaders: event.mismatchedHeaders || null,\n    };\n    this.documents.get(loaderId)?.preloadingAttempts.upsert(attempt);\n    this.dispatchEventToListeners(Events.ModelUpdated);\n  }\n\n  onPreloadEnabledStateUpdated(event: Protocol.Preload.PreloadEnabledStateUpdatedEvent): void {\n    this.dispatchEventToListeners(Events.WarningsUpdated, event);\n  }\n}\n\nSDKModel.register(PreloadingModel, {capabilities: Capability.DOM, autostart: false});\n\nexport const enum Events {\n  ModelUpdated = 'ModelUpdated',\n  WarningsUpdated = 'WarningsUpdated',\n}\n\nexport type EventTypes = {\n  [Events.ModelUpdated]: void,\n  [Events.WarningsUpdated]: Protocol.Preload.PreloadEnabledStateUpdatedEvent,\n};\n\nclass PreloadDispatcher implements ProtocolProxyApi.PreloadDispatcher {\n  private model: PreloadingModel;\n\n  constructor(model: PreloadingModel) {\n    this.model = model;\n  }\n\n  ruleSetUpdated(event: Protocol.Preload.RuleSetUpdatedEvent): void {\n    this.model.onRuleSetUpdated(event);\n  }\n\n  ruleSetRemoved(event: Protocol.Preload.RuleSetRemovedEvent): void {\n    this.model.onRuleSetRemoved(event);\n  }\n\n  preloadingAttemptSourcesUpdated(event: Protocol.Preload.PreloadingAttemptSourcesUpdatedEvent): void {\n    this.model.onPreloadingAttemptSourcesUpdated(event);\n  }\n\n  prefetchStatusUpdated(event: Protocol.Preload.PrefetchStatusUpdatedEvent): void {\n    this.model.onPrefetchStatusUpdated(event);\n  }\n\n  prerenderStatusUpdated(event: Protocol.Preload.PrerenderStatusUpdatedEvent): void {\n    this.model.onPrerenderStatusUpdated(event);\n  }\n\n  preloadEnabledStateUpdated(event: Protocol.Preload.PreloadEnabledStateUpdatedEvent): void {\n    void this.model.onPreloadEnabledStateUpdated(event);\n  }\n}\n\nclass DocumentPreloadingData {\n  ruleSets: RuleSetRegistry = new RuleSetRegistry();\n  preloadingAttempts: PreloadingAttemptRegistry = new PreloadingAttemptRegistry();\n  sources: SourceRegistry = new SourceRegistry();\n\n  mergePrevious(prev: DocumentPreloadingData): void {\n    // Note that CDP events Preload.ruleSetUpdated/Deleted and\n    // Preload.preloadingAttemptSourcesUpdated with a loaderId are emitted to target that bounded to\n    // a document with the loaderId. On the other hand, prerendering activation changes targets\n    // of Preload.prefetch/prerenderStatusUpdated, i.e. activated page receives those events for\n    // triggering outcome \"Success\".\n    if (!this.ruleSets.isEmpty() || !this.sources.isEmpty()) {\n      throw new Error('unreachable');\n    }\n\n    this.ruleSets = prev.ruleSets;\n    this.preloadingAttempts.mergePrevious(prev.preloadingAttempts);\n    this.sources = prev.sources;\n  }\n}\n\nclass RuleSetRegistry {\n  private map: Map<Protocol.Preload.RuleSetId, Protocol.Preload.RuleSet> =\n      new Map<Protocol.Preload.RuleSetId, Protocol.Preload.RuleSet>();\n\n  isEmpty(): boolean {\n    return this.map.size === 0;\n  }\n\n  // Returns reference. Don't save returned values.\n  // Returned values may or may not be updated as the time grows.\n  getById(id: Protocol.Preload.RuleSetId): Protocol.Preload.RuleSet|null {\n    return this.map.get(id) || null;\n  }\n\n  // Returns reference. Don't save returned values.\n  // Returned values may or may not be updated as the time grows.\n  getAll(): WithId<Protocol.Preload.RuleSetId, Protocol.Preload.RuleSet>[] {\n    return Array.from(this.map.entries()).map(([id, value]) => ({id, value}));\n  }\n\n  upsert(ruleSet: Protocol.Preload.RuleSet): void {\n    this.map.set(ruleSet.id, ruleSet);\n  }\n\n  delete(id: Protocol.Preload.RuleSetId): void {\n    this.map.delete(id);\n  }\n}\n\n// Protocol.Preload.PreloadingStatus|'NotTriggered'\n//\n// A renderer sends SpeculationCandidate to the browser process and the\n// browser process checks eligibilities, and starts PreloadingAttempt.\n//\n// In the frontend, \"NotTriggered\" is used to denote that a\n// PreloadingAttempt is waiting for at trigger event (eg:\n// mousedown/mouseover). All PreloadingAttempts will start off as\n// \"NotTriggered\", but \"eager\" preloading attempts (attempts not\n// actually waiting for any trigger) will be processed by the browser\n// immediately, and will not stay in this state for long.\n//\n// TODO(https://crbug.com/1384419): Add NotEligible.\nexport const enum PreloadingStatus {\n  NotTriggered = 'NotTriggered',\n  Pending = 'Pending',\n  Running = 'Running',\n  Ready = 'Ready',\n  Success = 'Success',\n  Failure = 'Failure',\n  NotSupported = 'NotSupported',\n}\n\nfunction convertPreloadingStatus(status: Protocol.Preload.PreloadingStatus): PreloadingStatus {\n  switch (status) {\n    case Protocol.Preload.PreloadingStatus.Pending:\n      return PreloadingStatus.Pending;\n    case Protocol.Preload.PreloadingStatus.Running:\n      return PreloadingStatus.Running;\n    case Protocol.Preload.PreloadingStatus.Ready:\n      return PreloadingStatus.Ready;\n    case Protocol.Preload.PreloadingStatus.Success:\n      return PreloadingStatus.Success;\n    case Protocol.Preload.PreloadingStatus.Failure:\n      return PreloadingStatus.Failure;\n    case Protocol.Preload.PreloadingStatus.NotSupported:\n      return PreloadingStatus.NotSupported;\n  }\n\n  throw new Error('unreachable');\n}\n\nexport type PreloadingAttemptId = string;\n\nexport type PreloadingAttempt = PrefetchAttempt|PrerenderAttempt;\n\nexport interface PrefetchAttempt {\n  action: Protocol.Preload.SpeculationAction.Prefetch;\n  key: Protocol.Preload.PreloadingAttemptKey;\n  status: PreloadingStatus;\n  prefetchStatus: Protocol.Preload.PrefetchStatus|null;\n  requestId: Protocol.Network.RequestId;\n  ruleSetIds: Protocol.Preload.RuleSetId[];\n  nodeIds: Protocol.DOM.BackendNodeId[];\n}\n\nexport interface PrerenderAttempt {\n  action: Protocol.Preload.SpeculationAction.Prerender;\n  key: Protocol.Preload.PreloadingAttemptKey;\n  status: PreloadingStatus;\n  prerenderStatus: Protocol.Preload.PrerenderFinalStatus|null;\n  disallowedMojoInterface: string|null;\n  mismatchedHeaders: Protocol.Preload.PrerenderMismatchedHeaders[]|null;\n  ruleSetIds: Protocol.Preload.RuleSetId[];\n  nodeIds: Protocol.DOM.BackendNodeId[];\n}\n\nexport type PreloadingAttemptInternal = PrefetchAttemptInternal|PrerenderAttemptInternal;\n\nexport interface PrefetchAttemptInternal {\n  action: Protocol.Preload.SpeculationAction.Prefetch;\n  key: Protocol.Preload.PreloadingAttemptKey;\n  status: PreloadingStatus;\n  prefetchStatus: Protocol.Preload.PrefetchStatus|null;\n  requestId: Protocol.Network.RequestId;\n}\n\nexport interface PrerenderAttemptInternal {\n  action: Protocol.Preload.SpeculationAction.Prerender;\n  key: Protocol.Preload.PreloadingAttemptKey;\n  status: PreloadingStatus;\n  prerenderStatus: Protocol.Preload.PrerenderFinalStatus|null;\n  disallowedMojoInterface: string|null;\n  mismatchedHeaders: Protocol.Preload.PrerenderMismatchedHeaders[]|null;\n}\n\nfunction makePreloadingAttemptId(key: Protocol.Preload.PreloadingAttemptKey): PreloadingAttemptId {\n  let action;\n  switch (key.action) {\n    case Protocol.Preload.SpeculationAction.Prefetch:\n      action = 'Prefetch';\n      break;\n    case Protocol.Preload.SpeculationAction.Prerender:\n      action = 'Prerender';\n      break;\n  }\n\n  let targetHint;\n  switch (key.targetHint) {\n    case undefined:\n      targetHint = 'undefined';\n      break;\n    case Protocol.Preload.SpeculationTargetHint.Blank:\n      targetHint = 'Blank';\n      break;\n    case Protocol.Preload.SpeculationTargetHint.Self:\n      targetHint = 'Self';\n      break;\n  }\n\n  return `${key.loaderId}:${action}:${key.url}:${targetHint}`;\n}\n\nclass PreloadingAttemptRegistry {\n  private map: Map<PreloadingAttemptId, PreloadingAttemptInternal> =\n      new Map<PreloadingAttemptId, PreloadingAttemptInternal>();\n\n  private enrich(attempt: PreloadingAttemptInternal, source: Protocol.Preload.PreloadingAttemptSource|null):\n      PreloadingAttempt {\n    let ruleSetIds: Protocol.Preload.RuleSetId[] = [];\n    let nodeIds: Protocol.DOM.BackendNodeId[] = [];\n    if (source !== null) {\n      ruleSetIds = source.ruleSetIds;\n      nodeIds = source.nodeIds;\n    }\n\n    return {\n      ...attempt,\n      ruleSetIds,\n      nodeIds,\n    };\n  }\n\n  // Returns reference. Don't save returned values.\n  // Returned values may or may not be updated as the time grows.\n  getById(id: PreloadingAttemptId, sources: SourceRegistry): PreloadingAttempt|null {\n    const attempt = this.map.get(id) || null;\n    if (attempt === null) {\n      return null;\n    }\n\n    return this.enrich(attempt, sources.getById(id));\n  }\n\n  // Returs preloading attempts that triggered by the rule set with `ruleSetId`.\n  // `ruleSetId === null` means \"do not filter\".\n  //\n  // Returns reference. Don't save returned values.\n  // Returned values may or may not be updated as the time grows.\n  getAll(ruleSetId: Protocol.Preload.RuleSetId|null, sources: SourceRegistry):\n      WithId<PreloadingAttemptId, PreloadingAttempt>[] {\n    return [...this.map.entries()]\n        .map(([id, value]) => ({id, value: this.enrich(value, sources.getById(id))}))\n        .filter(({value}) => !ruleSetId || value.ruleSetIds.includes(ruleSetId));\n  }\n\n  upsert(attempt: PreloadingAttemptInternal): void {\n    const id = makePreloadingAttemptId(attempt.key);\n\n    this.map.set(id, attempt);\n  }\n\n  // Speculation rules emits a CDP event Preload.preloadingAttemptSourcesUpdated\n  // and an IPC SpeculationHost::UpdateSpeculationCandidates. The latter emits\n  // Preload.prefetch/prerenderAttemptUpdated for each preload attempt triggered.\n  // In general, \"Not triggered to triggered\" period is short (resp. long) for\n  // eager (resp. non-eager) preloads. For not yet emitted ones, we fill\n  // \"Not triggered\" preload attempts and show them.\n  maybeRegisterNotTriggered(sources: SourceRegistry): void {\n    for (const [id, {key}] of sources.entries()) {\n      if (this.map.get(id) !== undefined) {\n        continue;\n      }\n\n      let attempt: PreloadingAttemptInternal;\n      switch (key.action) {\n        case Protocol.Preload.SpeculationAction.Prefetch:\n          attempt = {\n            action: Protocol.Preload.SpeculationAction.Prefetch,\n            key,\n            status: PreloadingStatus.NotTriggered,\n            prefetchStatus: null,\n            // Fill invalid request id.\n            requestId: '' as Protocol.Network.RequestId,\n          };\n          break;\n        case Protocol.Preload.SpeculationAction.Prerender:\n          attempt = {\n            action: Protocol.Preload.SpeculationAction.Prerender,\n            key,\n            status: PreloadingStatus.NotTriggered,\n            prerenderStatus: null,\n            disallowedMojoInterface: null,\n            mismatchedHeaders: null,\n          };\n          break;\n      }\n      this.map.set(id, attempt);\n    }\n  }\n\n  mergePrevious(prev: PreloadingAttemptRegistry): void {\n    for (const [id, attempt] of this.map.entries()) {\n      prev.map.set(id, attempt);\n    }\n\n    this.map = prev.map;\n  }\n}\n\nclass SourceRegistry {\n  private map: Map<PreloadingAttemptId, Protocol.Preload.PreloadingAttemptSource> =\n      new Map<PreloadingAttemptId, Protocol.Preload.PreloadingAttemptSource>();\n\n  entries(): IterableIterator<[PreloadingAttemptId, Protocol.Preload.PreloadingAttemptSource]> {\n    return this.map.entries();\n  }\n\n  isEmpty(): boolean {\n    return this.map.size === 0;\n  }\n\n  getById(id: PreloadingAttemptId): Protocol.Preload.PreloadingAttemptSource|null {\n    return this.map.get(id) || null;\n  }\n\n  update(sources: Protocol.Preload.PreloadingAttemptSource[]): void {\n    this.map = new Map(sources.map(s => [makePreloadingAttemptId(s.key), s]));\n  }\n}\n"]}