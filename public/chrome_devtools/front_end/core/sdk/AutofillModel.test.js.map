{"version":3,"file":"AutofillModel.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/AutofillModel.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Protocol from '../../generated/protocol.js';\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\n\nimport * as SDK from './sdk.js';\n\ndescribeWithMockConnection('AutofillModel', () => {\n  it('can enable and disable the Autofill CDP domain', () => {\n    const target = createTarget();\n    const autofillModel = target.model(SDK.AutofillModel.AutofillModel);\n    const enableSpy = sinon.spy(autofillModel!.agent, 'invoke_enable');\n    const disableSpy = sinon.spy(autofillModel!.agent, 'invoke_disable');\n    assert.isTrue(enableSpy.notCalled);\n    assert.isTrue(disableSpy.notCalled);\n\n    autofillModel!.disable();\n    assert.isTrue(enableSpy.notCalled);\n    assert.isTrue(disableSpy.calledOnce);\n    disableSpy.resetHistory();\n\n    autofillModel!.enable();\n    assert.isTrue(enableSpy.calledOnce);\n    assert.isTrue(disableSpy.notCalled);\n  });\n\n  it('sets test addresses by calling the Autofill backend', () => {\n    const target = createTarget();\n    const autofillModel = target.model(SDK.AutofillModel.AutofillModel);\n    const setAddressSpy = sinon.spy(autofillModel!.agent, 'invoke_setAddresses');\n    assert.isTrue(setAddressSpy.notCalled);\n\n    autofillModel!.disable();\n    assert.isTrue(setAddressSpy.notCalled);\n\n    autofillModel!.enable();\n    assert.isTrue(setAddressSpy.calledOnce);\n  });\n\n  it('dispatches addressFormFilledEvent on autofill event', () => {\n    const target = createTarget();\n    const autofillModel = target.model(SDK.AutofillModel.AutofillModel);\n\n    const dispatchedEvents: Array<SDK.AutofillModel.AddressFormFilledEvent> = [];\n    autofillModel!.addEventListener(SDK.AutofillModel.Events.AddressFormFilled, e => dispatchedEvents.push(e.data));\n\n    const addressFormFilledEvent: Protocol.Autofill.AddressFormFilledEvent = {\n      addressUi: {\n        addressFields: [\n          {\n            fields: [\n              {name: 'NAME_FULL', value: 'Crocodile Dundee'},\n            ],\n          },\n        ],\n      },\n      filledFields: [\n        {\n          htmlType: 'text',\n          id: 'input1',\n          name: '',\n          value: 'Crocodile',\n          autofillType: 'First name',\n          fillingStrategy: Protocol.Autofill.FillingStrategy.AutofillInferred,\n          fieldId: 1 as Protocol.DOM.BackendNodeId,\n          frameId: '1' as Protocol.Page.FrameId,\n        },\n      ],\n    };\n    autofillModel!.addressFormFilled(addressFormFilledEvent);\n    assert.lengthOf(dispatchedEvents, 1);\n    assert.deepStrictEqual(dispatchedEvents[0].event, addressFormFilledEvent);\n  });\n});\n"]}