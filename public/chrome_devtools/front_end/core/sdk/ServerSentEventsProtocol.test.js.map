{"version":3,"file":"ServerSentEventsProtocol.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/ServerSentEventsProtocol.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,GAAG,MAAM,UAAU,CAAC;AAEhC,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;IACtC,IAAI,MAA0D,CAAC;IAC/D,IAAI,MAAiE,CAAC;IAEtE;;;OAGG;IACH,SAAS,OAAO,CAAC,GAAW,EAAE,OAA4B;QACxD,MAAM,QAAQ,GAAG,OAAO,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAC9D,MAAM,KAAK,GAAG,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAC5C,OAAO,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,QAAQ,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;IACzF,CAAC;IAED;;OAEG;IACH,KAAK,UAAU,eAAe,CAAC,GAAW,EAAE,OAA4B;QACtE,IAAI,OAAO,EAAE,SAAS,EAAE,CAAC;YACvB,MAAM,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACjD,MAAM,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACjD,MAAM,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QACnD,CAAC;QAED,MAAM,KAAK,GAAG,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAC5C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,CAAC;YACtC,MAAM,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3E,CAAC;IACH,CAAC;IAED,UAAU,CAAC,GAAG,EAAE;QACd,MAAM,GAAG,EAAE,CAAC;QACZ,MAAM,GAAG,IAAI,GAAG,CAAC,uBAAuB,CAAC,sBAAsB,CAAC,CAAC,SAAS,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE;YAC3F,MAAM,CAAC,IAAI,CAAC,EAAC,SAAS,EAAE,IAAI,EAAE,OAAO,EAAC,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;QAC7D,MAAM,OAAO,CAAC,IAAI,CAAC,CAAC;QAEpB,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;QACvD,MAAM,OAAO,CAAC,gBAAgB,CAAC,CAAC;QAEhC,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAC3B,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QACnD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QAC1C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;QACvC,MAAM,OAAO,CAAC,0BAA0B,CAAC,CAAC;QAE1C,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAC3B,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QACnD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QAC1C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;QACpE,MAAM,OAAO,CAAC,uBAAuB,CAAC,CAAC;QAEvC,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAC3B,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QACnD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAC5C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qEAAqE,EAAE,KAAK,IAAI,EAAE;QACnF,MAAM,OAAO,CAAC,WAAW,CAAC,CAAC;QAC3B,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAE3B,MAAM,OAAO,CAAC,gBAAgB,CAAC,CAAC;QAEhC,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAC3B,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QACnD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAC5C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;QAC3C,MAAM,OAAO,CAAC,2BAA2B,CAAC,CAAC;QAE3C,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAC3B,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAC/C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QAC1C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;QAC1D,MAAM,OAAO,CAAC,uCAAuC,CAAC,CAAC;QAEvD,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAC3B,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAC/C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAE5C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QACnD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;QAChD,MAAM,OAAO,CAAC,sCAAsC,CAAC,CAAC;QAEtD,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAC3B,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAC/C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;QAC1D,MAAM,OAAO,CAAC,mCAAmC,CAAC,CAAC;QAEnD,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAC3B,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAC5C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAE5C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAC5C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;QACvC,MAAM,OAAO,CAAC,gBAAgB,CAAC,CAAC;QAEhC,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;QACpD,MAAM,OAAO,CAAC,8BAA8B,CAAC,CAAC;QAE9C,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;QAC3C,MAAM,OAAO,CAAC,6CAA6C,CAAC,CAAC;QAE7D,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAC3B,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QACnD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QAC1C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kBAAkB,EAAE,KAAK,IAAI,EAAE;QAChC,MAAM,OAAO,CAAC,4CAA4C,CAAC,CAAC;QAE5D,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAC3B,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QACnD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QAC1C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,aAAa,EAAE,KAAK,IAAI,EAAE;QAC3B,+DAA+D;QAC/D,MAAM,OAAO,CAAC,cAAc,EAAE,EAAC,SAAS,EAAE,IAAI,EAAC,CAAC,CAAC;QACjD,yDAAyD;QACzD,MAAM,OAAO,CAAC,YAAY,EAAE,EAAC,SAAS,EAAE,IAAI,EAAC,CAAC,CAAC;QAC/C,MAAM,OAAO,CAAC,IAAI,CAAC,CAAC;QAEpB,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAC3B,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QACnD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QAC1C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE;QACxC,+DAA+D;QAC/D,MAAM,eAAe,CAAC,cAAc,EAAE,EAAC,SAAS,EAAE,IAAI,EAAC,CAAC,CAAC;QACzD,yDAAyD;QACzD,MAAM,eAAe,CAAC,YAAY,EAAE,EAAC,SAAS,EAAE,IAAI,EAAC,CAAC,CAAC;QACvD,MAAM,eAAe,CAAC,IAAI,CAAC,CAAC;QAE5B,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAC3B,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QACnD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QAC1C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;QAC/D,MAAM,OAAO,CAAC,kCAAkC,CAAC,CAAC;QAElD,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAC3B,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QACnD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;QAChE,MAAM,OAAO,CAAC,mCAAmC,CAAC,CAAC;QAEnD,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAC3B,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QAClD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;QACtE,MAAM,eAAe,CAAC,0EAA0E,CAAC,CAAC;QAElG,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAC3B,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;QAC7C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;QAC3C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;QAEnD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QACnD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;QAC3C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;QACtD,MAAM,OAAO,CAAC,kCAAkC,CAAC,CAAC;QAElD,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAC3B,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QACnD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,yBAAyB,CAAC,CAAC;IAChE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from './sdk.js';\n\ndescribe('ServerSentEventsParser', () => {\n  let parser: SDK.ServerSentEventProtocol.ServerSentEventsParser;\n  let events: Array<{eventId: string, eventType: string, data: string}>;\n\n  /**\n   * Encodes `str` first as UTF-8 and then as Base64 to simulate CDP.\n   * @returns A promise that fulfills when the parser is done handling the chunk.\n   */\n  function enqueue(str: string, options?: {prefixBOM?: true}): Promise<void> {\n    const maybeBom = options?.prefixBOM ? [0xef, 0xbb, 0xbf] : [];\n    const bytes = new TextEncoder().encode(str);\n    return parser.addBase64Chunk(window.btoa(String.fromCodePoint(...maybeBom, ...bytes)));\n  }\n\n  /**\n   * Same as `enqueue` but feeds the resulting bytes one by one into the parser.\n   */\n  async function enqueueOneByOne(str: string, options?: {prefixBOM?: true}): Promise<void> {\n    if (options?.prefixBOM) {\n      await parser.addBase64Chunk(window.btoa('\\xef'));\n      await parser.addBase64Chunk(window.btoa('\\xbb'));\n      await parser.addBase64Chunk(window.btoa('\\xbf'));\n    }\n\n    const bytes = new TextEncoder().encode(str);\n    for (let i = 0; i < bytes.length; ++i) {\n      await parser.addBase64Chunk(window.btoa(String.fromCodePoint(bytes[i])));\n    }\n  }\n\n  beforeEach(() => {\n    events = [];\n    parser = new SDK.ServerSentEventProtocol.ServerSentEventsParser((eventType, data, eventId) => {\n      events.push({eventType, data, eventId});\n    });\n  });\n\n  it('does not dispatch an event for empty messages', async () => {\n    await enqueue('\\n');\n\n    assert.lengthOf(events, 0);\n  });\n\n  it('dispatches an event for simple messages', async () => {\n    await enqueue('data:hello\\n\\n');\n\n    assert.lengthOf(events, 1);\n    assert.strictEqual(events[0].eventType, 'message');\n    assert.strictEqual(events[0].eventId, '');\n    assert.strictEqual(events[0].data, 'hello');\n  });\n\n  it('accumulates data fields', async () => {\n    await enqueue('data:hello\\ndata:bye\\n\\n');\n\n    assert.lengthOf(events, 1);\n    assert.strictEqual(events[0].eventType, 'message');\n    assert.strictEqual(events[0].eventId, '');\n    assert.strictEqual(events[0].data, 'hello\\nbye');\n  });\n\n  it('dispatches an event with the right id if one was set', async () => {\n    await enqueue('id:42\\ndata:hello\\n\\n');\n\n    assert.lengthOf(events, 1);\n    assert.strictEqual(events[0].eventType, 'message');\n    assert.strictEqual(events[0].eventId, '42');\n    assert.strictEqual(events[0].data, 'hello');\n  });\n\n  it('remembers the id even when data is empty and no event is dispatched', async () => {\n    await enqueue('id:42\\n\\n');\n    assert.lengthOf(events, 0);\n\n    await enqueue('data:hello\\n\\n');\n\n    assert.lengthOf(events, 1);\n    assert.strictEqual(events[0].eventType, 'message');\n    assert.strictEqual(events[0].eventId, '42');\n    assert.strictEqual(events[0].data, 'hello');\n  });\n\n  it('supports custom event types', async () => {\n    await enqueue('event:foo\\ndata:hello\\n\\n');\n\n    assert.lengthOf(events, 1);\n    assert.strictEqual(events[0].eventType, 'foo');\n    assert.strictEqual(events[0].eventId, '');\n    assert.strictEqual(events[0].data, 'hello');\n  });\n\n  it('resets the event type after dispatching it', async () => {\n    await enqueue('event:foo\\ndata:hello\\n\\ndata:bye\\n\\n');\n\n    assert.lengthOf(events, 2);\n    assert.strictEqual(events[0].eventType, 'foo');\n    assert.strictEqual(events[0].data, 'hello');\n\n    assert.strictEqual(events[1].eventType, 'message');\n    assert.strictEqual(events[1].data, 'bye');\n  });\n\n  it('does not accumulate event fields', async () => {\n    await enqueue('data:hello\\nevent:foo\\nevent:bar\\n\\n');\n\n    assert.lengthOf(events, 1);\n    assert.strictEqual(events[0].eventType, 'bar');\n    assert.strictEqual(events[0].data, 'hello');\n  });\n\n  it('does not reset the id after dispatching it', async () => {\n    await enqueue('id:42\\ndata:hello\\n\\ndata:bye\\n\\n');\n\n    assert.lengthOf(events, 2);\n    assert.strictEqual(events[0].eventId, '42');\n    assert.strictEqual(events[0].data, 'hello');\n\n    assert.strictEqual(events[1].eventId, '42');\n    assert.strictEqual(events[1].data, 'bye');\n  });\n\n  it('ignores the retry field', async () => {\n    await enqueue('retry:9999\\n\\n');\n\n    assert.lengthOf(events, 0);\n  });\n\n  it('supports different types of newlines', async () => {\n    await enqueue('data:hello\\r\\n\\rdata:bye\\r\\r');\n\n    assert.lengthOf(events, 2);\n  });\n\n  it('ignores unrecognized fields', async () => {\n    await enqueue('data:hello\\nfoo:bar\\nanotherRandomFIeld\\n\\n');\n\n    assert.lengthOf(events, 1);\n    assert.strictEqual(events[0].eventType, 'message');\n    assert.strictEqual(events[0].eventId, '');\n    assert.strictEqual(events[0].data, 'hello');\n  });\n\n  it('ignores comments', async () => {\n    await enqueue('data:hello\\n:comment one\\n:comment two\\n\\n');\n\n    assert.lengthOf(events, 1);\n    assert.strictEqual(events[0].eventType, 'message');\n    assert.strictEqual(events[0].eventId, '');\n    assert.strictEqual(events[0].data, 'hello');\n  });\n\n  it('ignores BOM', async () => {\n    // This line are the first bytes, so the BOM should be ignored.\n    await enqueue('data:hello\\n', {prefixBOM: true});\n    // In this line the BOM bytes are part of the field name.\n    await enqueue('data:bye\\n', {prefixBOM: true});\n    await enqueue('\\n');\n\n    assert.lengthOf(events, 1);\n    assert.strictEqual(events[0].eventType, 'message');\n    assert.strictEqual(events[0].eventId, '');\n    assert.strictEqual(events[0].data, 'hello');\n  });\n\n  it('ignores BOM (one-by-one)', async () => {\n    // This line are the first bytes, so the BOM should be ignored.\n    await enqueueOneByOne('data:hello\\n', {prefixBOM: true});\n    // In this line the BOM bytes are part of the field name.\n    await enqueueOneByOne('data:bye\\n', {prefixBOM: true});\n    await enqueueOneByOne('\\n');\n\n    assert.lengthOf(events, 1);\n    assert.strictEqual(events[0].eventType, 'message');\n    assert.strictEqual(events[0].eventId, '');\n    assert.strictEqual(events[0].data, 'hello');\n  });\n\n  it('treats lines without a colon as field name only', async () => {\n    await enqueue('data:hello\\nevent:foo\\nevent\\n\\n');\n\n    assert.lengthOf(events, 1);\n    assert.strictEqual(events[0].eventType, 'message');\n    assert.strictEqual(events[0].data, 'hello');\n  });\n\n  it('skips at most one leading space for field values', async () => {\n    await enqueue('data:  hello  \\nevent:  type \\n\\n');\n\n    assert.lengthOf(events, 1);\n    assert.strictEqual(events[0].eventType, ' type ');\n    assert.strictEqual(events[0].data, ' hello  ');\n  });\n\n  it('works correctly if data is received one byte at a time', async () => {\n    await enqueueOneByOne('data:hello\\r\\ndata:world\\revent:a\\revent:b\\nid:4\\n\\nid:8\\ndata:bye\\r\\n\\r');\n\n    assert.lengthOf(events, 2);\n    assert.strictEqual(events[0].eventType, 'b');\n    assert.strictEqual(events[0].eventId, '4');\n    assert.strictEqual(events[0].data, 'hello\\nworld');\n\n    assert.strictEqual(events[1].eventType, 'message');\n    assert.strictEqual(events[1].eventId, '8');\n    assert.strictEqual(events[1].data, 'bye');\n  });\n\n  it('handles non-ASCII characters correctly', async () => {\n    await enqueue('data:Iñtërnâtiônàlizætiøn☃𝌆\\n\\n');\n\n    assert.lengthOf(events, 1);\n    assert.strictEqual(events[0].eventType, 'message');\n    assert.strictEqual(events[0].data, 'Iñtërnâtiônàlizætiøn☃𝌆');\n  });\n});\n"]}