{"version":3,"file":"StorageBucketsModel.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/StorageBucketsModel.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Protocol from '../../generated/protocol.js';\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\nimport type * as Common from '../common/common.js';\n\nimport * as SDK from './sdk.js';\n\nimport BucketEvents = SDK.StorageBucketsModel.Events;\n\nclass StorageBucketModelListener {\n  #model: SDK.StorageBucketsModel.StorageBucketsModel;\n  #bucketEvents = new Map<BucketEvents, Array<SDK.StorageBucketsModel.BucketEvent>>();\n\n  constructor(model: SDK.StorageBucketsModel.StorageBucketsModel) {\n    this.#model = model;\n\n    this.#addEventListener(BucketEvents.BucketAdded);\n    this.#addEventListener(BucketEvents.BucketRemoved);\n    this.#addEventListener(BucketEvents.BucketChanged);\n  }\n\n  events(eventType: BucketEvents) {\n    let bucketEvents = this.#bucketEvents.get(eventType);\n    if (!bucketEvents) {\n      bucketEvents = new Array<SDK.StorageBucketsModel.BucketEvent>();\n      this.#bucketEvents.set(eventType, bucketEvents);\n    }\n    return bucketEvents;\n  }\n\n  bucketInfos(eventType: BucketEvents) {\n    return this.events(eventType).map(event => event.bucketInfo);\n  }\n\n  eventCount(eventType: BucketEvents) {\n    return this.events(eventType).length;\n  }\n\n  async waitForBucketEvents(eventType: BucketEvents, eventCount: number) {\n    while (this.eventCount(eventType) < eventCount) {\n      await this.#model.once(eventType);\n    }\n  }\n\n  #addEventListener(eventType: BucketEvents) {\n    this.#model.addEventListener(\n        eventType, (event: Common.EventTarget.EventTargetEvent<SDK.StorageBucketsModel.BucketEvent>) => {\n          this.events(eventType).push(event.data);\n        });\n  }\n}\n\ndescribeWithMockConnection('StorageBucketsModel', () => {\n  let storageKeyManager: SDK.StorageKeyManager.StorageKeyManager;\n  let storageBucketsModel: SDK.StorageBucketsModel.StorageBucketsModel;\n  let target: SDK.Target.Target;\n  let listener: StorageBucketModelListener;\n\n  const STORAGE_KEYS: string[] = [\n    'storagekey1',\n    'storagekey2',\n    'storagekey3',\n  ];\n\n  const STORAGE_BUCKET_INFOS: Protocol.Storage.StorageBucketInfo[] = [\n    {\n      bucket: {\n        storageKey: STORAGE_KEYS[0],\n      },\n      id: '0',\n      expiration: 0,\n      quota: 0,\n      persistent: false,\n      durability: Protocol.Storage.StorageBucketsDurability.Strict,\n    },\n    {\n      bucket: {\n        storageKey: STORAGE_KEYS[0],\n        name: 'bucket1',\n      },\n      id: '1',\n      expiration: 0,\n      quota: 0,\n      persistent: false,\n      durability: Protocol.Storage.StorageBucketsDurability.Strict,\n    },\n    {\n      bucket: {\n        storageKey: STORAGE_KEYS[1],\n        name: 'bucket2',\n      },\n      id: '2',\n      expiration: 0,\n      quota: 0,\n      persistent: false,\n      durability: Protocol.Storage.StorageBucketsDurability.Strict,\n    },\n    {\n      bucket: {\n        storageKey: STORAGE_KEYS[2],\n        name: 'bucket3',\n      },\n      id: '3',\n      expiration: 0,\n      quota: 0,\n      persistent: false,\n      durability: Protocol.Storage.StorageBucketsDurability.Strict,\n    },\n  ];\n\n  const getBucketsForStorageKeys = (...storageKeys: string[]) => {\n    return STORAGE_BUCKET_INFOS.filter(({bucket}) => storageKeys.includes(bucket.storageKey));\n  };\n\n  const setStorageBucketTrackingStub = ({storageKey}: {storageKey: string}) => {\n    for (const bucketInfo of getBucketsForStorageKeys(storageKey)) {\n      storageBucketsModel.storageBucketCreatedOrUpdated({bucketInfo});\n    }\n    return Promise.resolve({\n      getError: () => undefined,\n    });\n  };\n\n  beforeEach(() => {\n    target = createTarget();\n    storageKeyManager =\n        target.model(SDK.StorageKeyManager.StorageKeyManager) as SDK.StorageKeyManager.StorageKeyManager;\n    storageBucketsModel =\n        target.model(SDK.StorageBucketsModel.StorageBucketsModel) as SDK.StorageBucketsModel.StorageBucketsModel;\n    listener = new StorageBucketModelListener(storageBucketsModel);\n  });\n\n  describe('StorageKeyAdded', () => {\n    it('starts tracking for the storage key', async () => {\n      const storageKey = STORAGE_KEYS[0];\n\n      const setStorageBucketTrackingSpy =\n          sinon.stub(storageBucketsModel.storageAgent, 'invoke_setStorageBucketTracking').resolves({\n            getError: () => undefined,\n          });\n      storageBucketsModel.enable();\n\n      assert.isTrue(setStorageBucketTrackingSpy.notCalled);\n      storageKeyManager.updateStorageKeys(new Set([storageKey]));\n      assert.isTrue(setStorageBucketTrackingSpy.calledOnceWithExactly({storageKey, enable: true}));\n    });\n\n    it('adds buckets for storage keys that already have been added', async () => {\n      const storageKeys = [STORAGE_KEYS[0], STORAGE_KEYS[2]];\n      const bucketsForStorageKeyCount = 3;\n      sinon.stub(storageBucketsModel.storageAgent, 'invoke_setStorageBucketTracking')\n          .callsFake(setStorageBucketTrackingStub);\n\n      storageKeyManager.updateStorageKeys(new Set(storageKeys));\n      storageBucketsModel.enable();\n\n      await listener.waitForBucketEvents(BucketEvents.BucketAdded, bucketsForStorageKeyCount);\n      assert.isTrue(listener.eventCount(BucketEvents.BucketAdded) === bucketsForStorageKeyCount);\n      assert.deepEqual(getBucketsForStorageKeys(...storageKeys), listener.bucketInfos(BucketEvents.BucketAdded));\n    });\n  });\n\n  describe('StorageKeyRemoved', () => {\n    it('stops tracking for the storage key', async () => {\n      const storageKey = STORAGE_KEYS[0];\n\n      const setStorageBucketTrackingSpy =\n          sinon.stub(storageBucketsModel.storageAgent, 'invoke_setStorageBucketTracking').resolves({\n            getError: () => undefined,\n          });\n\n      storageBucketsModel.enable();\n      assert.isTrue(setStorageBucketTrackingSpy.notCalled);\n\n      storageKeyManager.updateStorageKeys(new Set([storageKey]));\n      storageKeyManager.updateStorageKeys(new Set([]));\n      assert.isTrue(setStorageBucketTrackingSpy.callCount === 2);\n      assert.isTrue(setStorageBucketTrackingSpy.secondCall.calledWithExactly({storageKey, enable: false}));\n    });\n\n    it('removes all buckets for removed storage key', async () => {\n      const storageKeys = [STORAGE_KEYS[2], STORAGE_KEYS[0]];\n      sinon.stub(storageBucketsModel.storageAgent, 'invoke_setStorageBucketTracking')\n          .callsFake(setStorageBucketTrackingStub);\n\n      storageBucketsModel.enable();\n      storageKeyManager.updateStorageKeys(new Set(storageKeys));\n      await listener.waitForBucketEvents(BucketEvents.BucketAdded, 3);\n\n      const removedStorageKey = storageKeys.pop() as string;\n      storageKeyManager.updateStorageKeys(new Set(storageKeys));\n      await listener.waitForBucketEvents(BucketEvents.BucketRemoved, 2);\n      assert.isTrue(listener.eventCount(BucketEvents.BucketRemoved) === 2);\n      assert.deepEqual(getBucketsForStorageKeys(removedStorageKey), listener.bucketInfos(BucketEvents.BucketRemoved));\n    });\n  });\n\n  describe('CreatedUpdatedDeletedBucket', () => {\n    it('notifies when a bucket is created', async () => {\n      const STORAGE_BUCKET_INFO_TO_CREATE = {\n        bucket: {\n          storageKey: STORAGE_KEYS[0],\n          name: 'bucket4',\n        },\n        id: '4',\n        expiration: 0,\n        quota: 0,\n        persistent: false,\n        durability: Protocol.Storage.StorageBucketsDurability.Strict,\n      };\n      const storageKeys = [STORAGE_KEYS[0], STORAGE_KEYS[2]];\n      sinon.stub(storageBucketsModel.storageAgent, 'invoke_setStorageBucketTracking')\n          .callsFake(setStorageBucketTrackingStub);\n\n      storageBucketsModel.enable();\n      storageKeyManager.updateStorageKeys(new Set(storageKeys));\n\n      await listener.waitForBucketEvents(BucketEvents.BucketAdded, 3);\n      assert.isTrue(listener.eventCount(BucketEvents.BucketAdded) === 3);\n      const expectedBuckets = getBucketsForStorageKeys(...storageKeys);\n      assert.deepEqual(expectedBuckets, listener.bucketInfos(BucketEvents.BucketAdded));\n\n      storageBucketsModel.storageBucketCreatedOrUpdated({bucketInfo: STORAGE_BUCKET_INFO_TO_CREATE});\n      await listener.waitForBucketEvents(BucketEvents.BucketAdded, 4);\n      assert.isTrue(listener.eventCount(BucketEvents.BucketAdded) === 4);\n      expectedBuckets.push(STORAGE_BUCKET_INFO_TO_CREATE);\n      assert.deepEqual(expectedBuckets, listener.bucketInfos(BucketEvents.BucketAdded));\n    });\n\n    it('notifies when a bucket is updated', async () => {\n      const STORAGE_BUCKET_INFO_UPDATED = {...STORAGE_BUCKET_INFOS[0], expiration: 100};\n      const storageKeys = [STORAGE_KEYS[0], STORAGE_KEYS[2]];\n      sinon.stub(storageBucketsModel.storageAgent, 'invoke_setStorageBucketTracking')\n          .callsFake(setStorageBucketTrackingStub);\n\n      storageBucketsModel.enable();\n      storageKeyManager.updateStorageKeys(new Set(storageKeys));\n\n      await listener.waitForBucketEvents(BucketEvents.BucketAdded, 3);\n      assert.isTrue(listener.eventCount(BucketEvents.BucketChanged) === 0);\n\n      storageBucketsModel.storageBucketCreatedOrUpdated({bucketInfo: STORAGE_BUCKET_INFO_UPDATED});\n      await listener.waitForBucketEvents(BucketEvents.BucketChanged, 1);\n      assert.isTrue(listener.eventCount(BucketEvents.BucketChanged) === 1);\n      assert.deepEqual(listener.bucketInfos(BucketEvents.BucketChanged)[0], STORAGE_BUCKET_INFO_UPDATED);\n    });\n\n    it('notifies when a bucket is deleted', async () => {\n      const STORAGE_BUCKET_INFO_REMOVED = STORAGE_BUCKET_INFOS[0];\n      const storageKeys = [STORAGE_KEYS[0], STORAGE_KEYS[2]];\n      sinon.stub(storageBucketsModel.storageAgent, 'invoke_setStorageBucketTracking')\n          .callsFake(setStorageBucketTrackingStub);\n\n      storageBucketsModel.enable();\n      storageKeyManager.updateStorageKeys(new Set(storageKeys));\n\n      await listener.waitForBucketEvents(BucketEvents.BucketAdded, 3);\n      assert.isTrue(listener.eventCount(BucketEvents.BucketRemoved) === 0);\n\n      storageBucketsModel.storageBucketDeleted({bucketId: STORAGE_BUCKET_INFO_REMOVED.id});\n      await listener.waitForBucketEvents(BucketEvents.BucketRemoved, 1);\n      assert.isTrue(listener.eventCount(BucketEvents.BucketRemoved) === 1);\n      assert.deepEqual(listener.bucketInfos(BucketEvents.BucketRemoved)[0], STORAGE_BUCKET_INFO_REMOVED);\n    });\n  });\n\n  describe('GetBucketFunctions', () => {\n    it('gets all buckets', async () => {\n      sinon.stub(storageBucketsModel.storageAgent, 'invoke_setStorageBucketTracking')\n          .callsFake(setStorageBucketTrackingStub);\n\n      storageBucketsModel.enable();\n      storageKeyManager.updateStorageKeys(new Set(STORAGE_KEYS));\n\n      await listener.waitForBucketEvents(BucketEvents.BucketAdded, 4);\n      assert.deepEqual(new Set(STORAGE_BUCKET_INFOS), storageBucketsModel.getBuckets());\n    });\n\n    it('gets buckets for storage key', async () => {\n      sinon.stub(storageBucketsModel.storageAgent, 'invoke_setStorageBucketTracking')\n          .callsFake(setStorageBucketTrackingStub);\n\n      storageBucketsModel.enable();\n      storageKeyManager.updateStorageKeys(new Set(STORAGE_KEYS));\n\n      await listener.waitForBucketEvents(BucketEvents.BucketAdded, 4);\n      assert.deepEqual(\n          new Set(getBucketsForStorageKeys(STORAGE_KEYS[0])),\n          storageBucketsModel.getBucketsForStorageKey(STORAGE_KEYS[0]));\n      assert.deepEqual(\n          new Set(getBucketsForStorageKeys(STORAGE_KEYS[1])),\n          storageBucketsModel.getBucketsForStorageKey(STORAGE_KEYS[1]));\n      assert.deepEqual(\n          new Set(getBucketsForStorageKeys(STORAGE_KEYS[2])),\n          storageBucketsModel.getBucketsForStorageKey(STORAGE_KEYS[2]));\n    });\n\n    it('gets buckets by id', async () => {\n      sinon.stub(storageBucketsModel.storageAgent, 'invoke_setStorageBucketTracking')\n          .callsFake(setStorageBucketTrackingStub);\n\n      storageBucketsModel.enable();\n      storageKeyManager.updateStorageKeys(new Set(STORAGE_KEYS));\n\n      await listener.waitForBucketEvents(BucketEvents.BucketAdded, 4);\n      assert.deepEqual(STORAGE_BUCKET_INFOS[0], storageBucketsModel.getBucketById(STORAGE_BUCKET_INFOS[0].id));\n      assert.deepEqual(STORAGE_BUCKET_INFOS[1], storageBucketsModel.getBucketById(STORAGE_BUCKET_INFOS[1].id));\n      assert.deepEqual(STORAGE_BUCKET_INFOS[2], storageBucketsModel.getBucketById(STORAGE_BUCKET_INFOS[2].id));\n      assert.deepEqual(STORAGE_BUCKET_INFOS[3], storageBucketsModel.getBucketById(STORAGE_BUCKET_INFOS[3].id));\n    });\n\n    it('gets bucket by name', async () => {\n      sinon.stub(storageBucketsModel.storageAgent, 'invoke_setStorageBucketTracking')\n          .callsFake(setStorageBucketTrackingStub);\n\n      storageBucketsModel.enable();\n      storageKeyManager.updateStorageKeys(new Set(STORAGE_KEYS));\n\n      await listener.waitForBucketEvents(BucketEvents.BucketAdded, 4);\n      assert.deepEqual(\n          STORAGE_BUCKET_INFOS[0],\n          storageBucketsModel.getBucketByName(\n              STORAGE_BUCKET_INFOS[0].bucket.storageKey, STORAGE_BUCKET_INFOS[0].bucket.name));\n      assert.deepEqual(\n          STORAGE_BUCKET_INFOS[1],\n          storageBucketsModel.getBucketByName(\n              STORAGE_BUCKET_INFOS[1].bucket.storageKey, STORAGE_BUCKET_INFOS[1].bucket.name));\n      assert.deepEqual(\n          STORAGE_BUCKET_INFOS[2],\n          storageBucketsModel.getBucketByName(\n              STORAGE_BUCKET_INFOS[2].bucket.storageKey, STORAGE_BUCKET_INFOS[2].bucket.name));\n      assert.deepEqual(\n          STORAGE_BUCKET_INFOS[3],\n          storageBucketsModel.getBucketByName(\n              STORAGE_BUCKET_INFOS[3].bucket.storageKey, STORAGE_BUCKET_INFOS[3].bucket.name));\n    });\n\n    it('gets default bucket when name isnt given', async () => {\n      sinon.stub(storageBucketsModel.storageAgent, 'invoke_setStorageBucketTracking')\n          .callsFake(setStorageBucketTrackingStub);\n\n      storageBucketsModel.enable();\n      storageKeyManager.updateStorageKeys(new Set(STORAGE_KEYS));\n\n      await listener.waitForBucketEvents(BucketEvents.BucketAdded, 4);\n      {\n        const bucketInfo = STORAGE_BUCKET_INFOS[0];\n        const {bucket: {storageKey, name}} = bucketInfo;\n        assert.deepEqual(bucketInfo, storageBucketsModel.getBucketByName(storageKey, name));\n      }\n      {\n        const bucketInfo = STORAGE_BUCKET_INFOS[1];\n        const {bucket: {storageKey, name}} = bucketInfo;\n        assert.deepEqual(bucketInfo, storageBucketsModel.getBucketByName(storageKey, name));\n      }\n      {\n        const bucketInfo = STORAGE_BUCKET_INFOS[2];\n        const {bucket: {storageKey, name}} = bucketInfo;\n        assert.deepEqual(bucketInfo, storageBucketsModel.getBucketByName(storageKey, name));\n      }\n      {\n        const bucketInfo = STORAGE_BUCKET_INFOS[3];\n        const {bucket: {storageKey, name}} = bucketInfo;\n        assert.deepEqual(bucketInfo, storageBucketsModel.getBucketByName(storageKey, name));\n      }\n    });\n  });\n\n  it('deletes the bucket', () => {\n    const {bucket} = STORAGE_BUCKET_INFOS[0];\n    const setStorageBucketTrackingSpy =\n        sinon.stub(storageBucketsModel.storageAgent, 'invoke_deleteStorageBucket').resolves({\n          getError: () => undefined,\n        });\n\n    storageBucketsModel.deleteBucket(bucket);\n    assert.isTrue(setStorageBucketTrackingSpy.calledOnceWithExactly({bucket}));\n  });\n});\n"]}