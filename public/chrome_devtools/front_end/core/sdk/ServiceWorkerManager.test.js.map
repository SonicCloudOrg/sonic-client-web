{"version":3,"file":"ServiceWorkerManager.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/ServiceWorkerManager.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport * as SDK from './sdk.js';\n\ndescribe('ServiceWorkerVersion', () => {\n  const REGISTRATION_PAYLOAD = {registrationId: 'foo', scopeURL: 'https://example.com', isDeleted: false} as\n      Protocol.ServiceWorker.ServiceWorkerRegistration;\n\n  const VERSION_PAYLOAD = {\n    versionId: '12345',\n    scriptURL: 'http://example.com/script.js',\n    runningStatus: 'stopped',\n    status: 'new',\n    scriptLastModified: 1234567890,\n    scriptResponseTime: 12345,\n    controlledClients: ['client1', 'client2'],\n    targetId: 'target1',\n    routerRules: '[{\"condition\":{\"requestMethod\":\"POST\"},\"source\":[\"fetch\",\"network\"],\"id\":1}]',\n  } as Protocol.ServiceWorker.ServiceWorkerVersion;\n\n  function makeVersion(\n      registrationPayload: Protocol.ServiceWorker.ServiceWorkerRegistration,\n      versionPayload: Protocol.ServiceWorker.ServiceWorkerVersion): SDK.ServiceWorkerManager.ServiceWorkerVersion {\n    return new SDK.ServiceWorkerManager.ServiceWorkerVersion(\n        new SDK.ServiceWorkerManager.ServiceWorkerRegistration(registrationPayload), versionPayload);\n  }\n\n  it('initializes with a given payload', () => {\n    const version = makeVersion(REGISTRATION_PAYLOAD, VERSION_PAYLOAD);\n\n    const expectedRouterRules =\n        [{condition: '{\"requestMethod\":\"POST\"}', source: '[\"fetch\",\"network\"]', id: 1} as\n         SDK.ServiceWorkerManager.ServiceWorkerRouterRule];\n\n    assert.strictEqual(version.id, VERSION_PAYLOAD.versionId);\n    assert.strictEqual(version.scriptURL, VERSION_PAYLOAD.scriptURL);\n    assert.strictEqual(version.runningStatus, VERSION_PAYLOAD.runningStatus);\n    assert.strictEqual(version.status, VERSION_PAYLOAD.status);\n    assert.strictEqual(version.scriptLastModified, VERSION_PAYLOAD.scriptLastModified);\n    assert.strictEqual(version.scriptResponseTime, VERSION_PAYLOAD.scriptResponseTime);\n    assert.deepStrictEqual(version.controlledClients, VERSION_PAYLOAD.controlledClients);\n    assert.strictEqual(version.targetId, VERSION_PAYLOAD.targetId);\n    assert.deepStrictEqual(version.routerRules, expectedRouterRules);\n  });\n\n  it('should update the version with the given payload', () => {\n    const version = makeVersion(REGISTRATION_PAYLOAD, VERSION_PAYLOAD);\n\n    version.update({\n      versionId: '67890',\n      scriptURL: 'http://example.com/script2.js',\n      runningStatus: 'starting',\n      status: 'installing',\n      scriptLastModified: 1234567891,\n      scriptResponseTime: 12346,\n      controlledClients: ['client3', 'client4'],\n      targetId: 'target2',\n    } as Protocol.ServiceWorker.ServiceWorkerVersion);\n\n    assert.strictEqual(version.id, '67890');\n    assert.strictEqual(version.scriptURL, 'http://example.com/script2.js');\n    assert.strictEqual(version.runningStatus, 'starting');\n    assert.strictEqual(version.status, 'installing');\n    assert.strictEqual(version.scriptLastModified, 1234567891);\n    assert.strictEqual(version.scriptResponseTime, 12346);\n    assert.deepStrictEqual(version.controlledClients, ['client3', 'client4']);\n    assert.strictEqual(version.targetId, 'target2');\n  });\n\n  it('identifies when the worker is startable', () => {\n    const version = makeVersion(\n        REGISTRATION_PAYLOAD,\n        {...VERSION_PAYLOAD, runningStatus: 'stopped', status: 'activated'} as\n            Protocol.ServiceWorker.ServiceWorkerVersion);\n\n    assert.isTrue(version.isStartable());\n  });\n\n  it('identifies when the worker is not startable', () => {\n    let version = makeVersion(\n        {...REGISTRATION_PAYLOAD, isDeleted: true},\n        {...VERSION_PAYLOAD, runningStatus: 'stopped', status: 'activated'} as\n            Protocol.ServiceWorker.ServiceWorkerVersion);\n    assert.isFalse(version.isStartable());\n\n    version = makeVersion(\n        REGISTRATION_PAYLOAD,\n        {...VERSION_PAYLOAD, runningStatus: 'stopped', status: 'new'} as Protocol.ServiceWorker.ServiceWorkerVersion);\n    assert.isFalse(version.isStartable());\n\n    version = makeVersion(\n        REGISTRATION_PAYLOAD,\n        {...VERSION_PAYLOAD, runningStatus: 'starting', status: 'activated'} as\n            Protocol.ServiceWorker.ServiceWorkerVersion);\n    assert.isFalse(version.isStartable());\n  });\n\n  it('identifies when the worker is stopped and redundant', () => {\n    const version = makeVersion(\n        REGISTRATION_PAYLOAD,\n        {...VERSION_PAYLOAD, runningStatus: 'stopped', status: 'redundant'} as\n            Protocol.ServiceWorker.ServiceWorkerVersion);\n\n    assert.isTrue(version.isStoppedAndRedundant());\n  });\n\n  it('identifies when the worker is not stopped and redundant', () => {\n    let version = makeVersion(\n        REGISTRATION_PAYLOAD,\n        {...VERSION_PAYLOAD, runningStatus: 'stopped', status: 'activated'} as\n            Protocol.ServiceWorker.ServiceWorkerVersion);\n    assert.isFalse(version.isStoppedAndRedundant());\n\n    version = makeVersion(\n        REGISTRATION_PAYLOAD,\n        {...VERSION_PAYLOAD, runningStatus: 'starting', status: 'redundant'} as\n            Protocol.ServiceWorker.ServiceWorkerVersion);\n    assert.isFalse(version.isStoppedAndRedundant());\n  });\n\n  it('identifies when the worker is stopped', () => {\n    let version = makeVersion(\n        REGISTRATION_PAYLOAD,\n        {...VERSION_PAYLOAD, runningStatus: 'stopped'} as Protocol.ServiceWorker.ServiceWorkerVersion);\n    assert.isTrue(version.isStopped());\n\n    version = makeVersion(\n        REGISTRATION_PAYLOAD,\n        {...VERSION_PAYLOAD, runningStatus: 'starting'} as Protocol.ServiceWorker.ServiceWorkerVersion);\n    assert.isFalse(version.isStopped());\n  });\n\n  it('identifies when the worker is starting', () => {\n    let version = makeVersion(\n        REGISTRATION_PAYLOAD,\n        {...VERSION_PAYLOAD, runningStatus: 'starting'} as Protocol.ServiceWorker.ServiceWorkerVersion);\n    assert.isTrue(version.isStarting());\n\n    version = makeVersion(\n        REGISTRATION_PAYLOAD,\n        {...VERSION_PAYLOAD, runningStatus: 'stopped'} as Protocol.ServiceWorker.ServiceWorkerVersion);\n    assert.isFalse(version.isStarting());\n  });\n\n  it('identifies when the worker is running', () => {\n    let version = makeVersion(\n        REGISTRATION_PAYLOAD,\n        {...VERSION_PAYLOAD, runningStatus: 'running'} as Protocol.ServiceWorker.ServiceWorkerVersion);\n    assert.isTrue(version.isRunning());\n\n    version = makeVersion(\n        REGISTRATION_PAYLOAD,\n        {...VERSION_PAYLOAD, runningStatus: 'stopped'} as Protocol.ServiceWorker.ServiceWorkerVersion);\n    assert.isFalse(version.isRunning());\n  });\n\n  it('identifies when the worker is stopping', () => {\n    let version = makeVersion(\n        REGISTRATION_PAYLOAD,\n        {...VERSION_PAYLOAD, runningStatus: 'stopping'} as Protocol.ServiceWorker.ServiceWorkerVersion);\n    assert.isTrue(version.isStopping());\n\n    version = makeVersion(\n        REGISTRATION_PAYLOAD,\n        {...VERSION_PAYLOAD, runningStatus: 'stopped'} as Protocol.ServiceWorker.ServiceWorkerVersion);\n    assert.isFalse(version.isStopping());\n  });\n\n  it('identifies when the worker is new', () => {\n    let version = makeVersion(\n        REGISTRATION_PAYLOAD, {...VERSION_PAYLOAD, status: 'new'} as Protocol.ServiceWorker.ServiceWorkerVersion);\n    assert.isTrue(version.isNew());\n\n    version = makeVersion(\n        REGISTRATION_PAYLOAD, {...VERSION_PAYLOAD, status: 'activated'} as Protocol.ServiceWorker.ServiceWorkerVersion);\n    assert.isFalse(version.isNew());\n  });\n\n  it('identifies when the worker is installing', () => {\n    let version = makeVersion(\n        REGISTRATION_PAYLOAD,\n        {...VERSION_PAYLOAD, status: 'installing'} as Protocol.ServiceWorker.ServiceWorkerVersion);\n    assert.isTrue(version.isInstalling());\n\n    version = makeVersion(\n        REGISTRATION_PAYLOAD, {...VERSION_PAYLOAD, status: 'activated'} as Protocol.ServiceWorker.ServiceWorkerVersion);\n    assert.isFalse(version.isInstalling());\n  });\n\n  it('identifies when the worker is installed', () => {\n    let version = makeVersion(\n        REGISTRATION_PAYLOAD, {...VERSION_PAYLOAD, status: 'installed'} as Protocol.ServiceWorker.ServiceWorkerVersion);\n    assert.isTrue(version.isInstalled());\n\n    version = makeVersion(\n        REGISTRATION_PAYLOAD, {...VERSION_PAYLOAD, status: 'activated'} as Protocol.ServiceWorker.ServiceWorkerVersion);\n    assert.isFalse(version.isInstalled());\n  });\n\n  it('identifies when the worker is activating', () => {\n    let version = makeVersion(\n        REGISTRATION_PAYLOAD,\n        {...VERSION_PAYLOAD, status: 'activating'} as Protocol.ServiceWorker.ServiceWorkerVersion);\n    assert.isTrue(version.isActivating());\n\n    version = makeVersion(\n        REGISTRATION_PAYLOAD, {...VERSION_PAYLOAD, status: 'activated'} as Protocol.ServiceWorker.ServiceWorkerVersion);\n    assert.isFalse(version.isActivating());\n  });\n\n  it('identifies when the worker is activated', () => {\n    let version = makeVersion(\n        REGISTRATION_PAYLOAD, {...VERSION_PAYLOAD, status: 'activated'} as Protocol.ServiceWorker.ServiceWorkerVersion);\n    assert.isTrue(version.isActivated());\n\n    version = makeVersion(\n        REGISTRATION_PAYLOAD,\n        {...VERSION_PAYLOAD, status: 'activating'} as Protocol.ServiceWorker.ServiceWorkerVersion);\n    assert.isFalse(version.isActivated());\n  });\n\n  it('identifies when the worker is redundant', () => {\n    let version = makeVersion(\n        REGISTRATION_PAYLOAD, {...VERSION_PAYLOAD, status: 'redundant'} as Protocol.ServiceWorker.ServiceWorkerVersion);\n    assert.isTrue(version.isRedundant());\n\n    version = makeVersion(\n        REGISTRATION_PAYLOAD,\n        {...VERSION_PAYLOAD, status: 'activating'} as Protocol.ServiceWorker.ServiceWorkerVersion);\n    assert.isFalse(version.isRedundant());\n  });\n\n  it('identifies when the worker is in installing mode', () => {\n    let version = makeVersion(\n        REGISTRATION_PAYLOAD, {...VERSION_PAYLOAD, status: 'new'} as Protocol.ServiceWorker.ServiceWorkerVersion);\n    assert.strictEqual(version.mode(), SDK.ServiceWorkerManager.ServiceWorkerVersion.Modes.Installing);\n\n    version = makeVersion(\n        REGISTRATION_PAYLOAD,\n        {...VERSION_PAYLOAD, status: 'installing'} as Protocol.ServiceWorker.ServiceWorkerVersion);\n    assert.strictEqual(version.mode(), SDK.ServiceWorkerManager.ServiceWorkerVersion.Modes.Installing);\n  });\n\n  it('identifies when the worker is in waiting mode', () => {\n    const version = makeVersion(\n        REGISTRATION_PAYLOAD, {...VERSION_PAYLOAD, status: 'installed'} as Protocol.ServiceWorker.ServiceWorkerVersion);\n    assert.strictEqual(version.mode(), SDK.ServiceWorkerManager.ServiceWorkerVersion.Modes.Waiting);\n  });\n\n  it('identifies when the worker is in active mode', () => {\n    let version = makeVersion(\n        REGISTRATION_PAYLOAD,\n        {...VERSION_PAYLOAD, status: 'activating'} as Protocol.ServiceWorker.ServiceWorkerVersion);\n    assert.strictEqual(version.mode(), SDK.ServiceWorkerManager.ServiceWorkerVersion.Modes.Active);\n\n    version = makeVersion(\n        REGISTRATION_PAYLOAD, {...VERSION_PAYLOAD, status: 'activated'} as Protocol.ServiceWorker.ServiceWorkerVersion);\n    assert.strictEqual(version.mode(), SDK.ServiceWorkerManager.ServiceWorkerVersion.Modes.Active);\n  });\n\n  it('identifies when the worker is in redundant mode', () => {\n    const version = makeVersion(\n        REGISTRATION_PAYLOAD, {...VERSION_PAYLOAD, status: 'redundant'} as Protocol.ServiceWorker.ServiceWorkerVersion);\n    assert.strictEqual(version.mode(), SDK.ServiceWorkerManager.ServiceWorkerVersion.Modes.Redundant);\n  });\n\n  it('routerRules should be null if not provided', () => {\n    const VERSION_PAYLOAD_WITHOUT_ROUTER_RULES = {\n      versionId: '12345',\n      scriptURL: 'http://example.com/script.js',\n      runningStatus: 'stopped',\n      status: 'new',\n      scriptLastModified: 1234567890,\n      scriptResponseTime: 12345,\n      controlledClients: ['client1', 'client2'],\n      targetId: 'target1',\n    } as Protocol.ServiceWorker.ServiceWorkerVersion;\n\n    const version = makeVersion(REGISTRATION_PAYLOAD, VERSION_PAYLOAD_WITHOUT_ROUTER_RULES);\n\n    assert.isNull(version.routerRules);\n  });\n});\n"]}