{"version":3,"file":"ServiceWorkerCacheModel.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/ServiceWorkerCacheModel.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {\n  clearMockConnectionResponseHandler,\n  describeWithMockConnection,\n  setMockConnectionResponseHandler,\n} from '../../testing/MockConnection.js';\n\nimport * as SDK from './sdk.js';\n\ndescribeWithMockConnection('ServiceWorkerCacheModel', () => {\n  let cacheStorageModel: SDK.ServiceWorkerCacheModel.ServiceWorkerCacheModel;\n  let cache: SDK.ServiceWorkerCacheModel.Cache;\n  let target: SDK.Target.Target;\n  let manager: SDK.StorageBucketsModel.StorageBucketsModel|null;\n  let cacheAgent: ProtocolProxyApi.CacheStorageApi;\n\n  const testKey = 'test-key';\n  const testStorageBucket = {\n    storageKey: testKey,\n    name: 'inbox',\n  };\n\n  const testStorageBucketInfo = {\n    id: '0',\n    bucket: testStorageBucket,\n    expiration: 0,\n    quota: 0,\n    persistent: false,\n    durability: Protocol.Storage.StorageBucketsDurability.Strict,\n  };\n\n  beforeEach(() => {\n    target = createTarget();\n    cacheStorageModel = new SDK.ServiceWorkerCacheModel.ServiceWorkerCacheModel(target);\n    cache = new SDK.ServiceWorkerCacheModel.Cache(\n        cacheStorageModel, testStorageBucket, 'test-cache', 'id' as Protocol.CacheStorage.CacheId);\n    manager = target.model(SDK.StorageBucketsModel.StorageBucketsModel);\n    cacheAgent = target.cacheStorageAgent();\n  });\n\n  describe('StorageKeyAdded', () => {\n    it('registers cache only when the model is enabled', async () => {\n      const cacheAdeddSpy = sinon.spy(cacheStorageModel, 'dispatchEventToListeners');\n      const cacheNamePromise = new Promise<string>(resolve => {\n        cacheStorageModel.addEventListener(SDK.ServiceWorkerCacheModel.Events.CacheAdded, event => {\n          resolve(event.data.cache.cacheName);\n        });\n      });\n      setMockConnectionResponseHandler(\n          'CacheStorage.requestCacheNames',\n          () => ({\n            caches: [{cacheId: 'id', storageKey: testKey, storageBucket: testStorageBucket, cacheName: 'test-cache'}],\n          }));\n\n      manager?.storageBucketCreatedOrUpdated({bucketInfo: testStorageBucketInfo});\n      assert.isFalse(cacheAdeddSpy.calledWithExactly(\n          SDK.ServiceWorkerCacheModel.Events.CacheAdded as unknown as sinon.SinonMatcher,\n          {model: cacheStorageModel, cache}));\n\n      cacheStorageModel.enable();\n      manager?.storageBucketCreatedOrUpdated({bucketInfo: testStorageBucketInfo});\n      assert.strictEqual(await cacheNamePromise, 'test-cache');\n    });\n\n    it('starts tracking cache', () => {\n      const trackCacheSpy = sinon.spy(target.storageAgent(), 'invoke_trackCacheStorageForStorageKey' as never);\n\n      cacheStorageModel.enable();\n      manager?.storageBucketCreatedOrUpdated({bucketInfo: testStorageBucketInfo});\n\n      assert.isTrue(trackCacheSpy.calledOnceWithExactly({storageKey: testKey}));\n    });\n  });\n\n  it('stops tracking cache', () => {\n    const untrackCacheSpy = sinon.spy(target.storageAgent(), 'invoke_untrackCacheStorageForStorageKey' as never);\n\n    cacheStorageModel.enable();\n    manager?.storageBucketCreatedOrUpdated({bucketInfo: testStorageBucketInfo});\n    manager?.storageBucketDeleted({bucketId: testStorageBucketInfo.id});\n\n    assert.isTrue(untrackCacheSpy.calledOnceWithExactly({storageKey: testKey}));\n  });\n\n  it('detaches storage key event listeners on dispose', () => {\n    const trackCacheSpy = sinon.spy(target.storageAgent(), 'invoke_trackCacheStorageForStorageKey' as never);\n    const untrackCacheSpy = sinon.spy(target.storageAgent(), 'invoke_untrackCacheStorageForStorageKey' as never);\n    cacheStorageModel.enable();\n\n    cacheStorageModel.dispose();\n    manager?.storageBucketCreatedOrUpdated({bucketInfo: testStorageBucketInfo});\n    manager?.storageBucketDeleted({bucketId: testStorageBucketInfo.id});\n\n    assert.isTrue(trackCacheSpy.notCalled);\n    assert.isTrue(untrackCacheSpy.notCalled);\n  });\n\n  it('calls protocol method and dispatches event on refreshCacheNames', async () => {\n    const requestCacheNamesSpy = sinon.spy(cacheAgent, 'invoke_requestCacheNames');\n    const cacheAddedPromise = new Promise<void>(resolve => {\n      cacheStorageModel.addEventListener(SDK.ServiceWorkerCacheModel.Events.CacheAdded, () => {\n        resolve();\n      });\n    });\n    setMockConnectionResponseHandler(\n        'CacheStorage.requestCacheNames',\n        () => ({\n          caches: [{cacheId: 'id', storageKey: testKey, storageBucket: testStorageBucket, cacheName: 'test-cache'}],\n        }));\n    cacheStorageModel.enable();\n    manager?.storageBucketCreatedOrUpdated({bucketInfo: testStorageBucketInfo});\n\n    void cacheStorageModel.refreshCacheNames();\n\n    assert.isTrue(requestCacheNamesSpy.calledWithExactly({storageBucket: testStorageBucket}));\n    await cacheAddedPromise;\n  });\n\n  it('dispatches event on cacheStorageContentUpdated', () => {\n    const dispatcherSpy = sinon.spy(cacheStorageModel, 'dispatchEventToListeners');\n\n    manager?.storageBucketCreatedOrUpdated({bucketInfo: testStorageBucketInfo});\n    cacheStorageModel.cacheStorageContentUpdated(\n        {origin: '', storageKey: testKey, bucketId: testStorageBucketInfo.id, cacheName: 'test-cache'});\n\n    assert.isTrue(dispatcherSpy.calledOnceWithExactly(\n        SDK.ServiceWorkerCacheModel.Events.CacheStorageContentUpdated as unknown as sinon.SinonMatcher,\n        {storageBucket: testStorageBucket, cacheName: 'test-cache'}));\n  });\n\n  it('requests cache names on cacheStorageListUpdated', async () => {\n    const requestCacheNamesSpy = sinon.spy(cacheAgent, 'invoke_requestCacheNames');\n    cacheStorageModel.enable();\n    manager?.storageBucketCreatedOrUpdated({bucketInfo: testStorageBucketInfo});\n\n    cacheStorageModel.cacheStorageListUpdated({origin: '', storageKey: testKey, bucketId: testStorageBucketInfo.id});\n\n    assert.isTrue(requestCacheNamesSpy.calledWithExactly({storageBucket: testStorageBucket}));\n  });\n\n  it('gets caches added for storage key', async () => {\n    const cacheNames = ['test-cache-1', 'test-cache-2'];\n    const cachesAddedPromise = new Promise<void>(resolve => {\n      cacheStorageModel.addEventListener(SDK.ServiceWorkerCacheModel.Events.CacheAdded, () => {\n        resolve();\n      });\n    });\n    setMockConnectionResponseHandler(\n        'CacheStorage.requestCacheNames',\n        () => ({\n          caches: [\n            {cacheId: 'id1', storageKey: testKey, storageBucket: testStorageBucket, cacheName: 'test-cache-1'},\n            {cacheId: 'id2', storageKey: testKey, storageBucket: testStorageBucket, cacheName: 'test-cache-2'},\n          ],\n        }));\n    cacheStorageModel.enable();\n    manager?.storageBucketCreatedOrUpdated({bucketInfo: testStorageBucketInfo});\n    // make sure enough time passed for caches to populate\n    await cachesAddedPromise;\n\n    const caches = cacheStorageModel.caches();\n\n    assert.deepEqual(caches.map(cache => cache.cacheName), cacheNames);\n  });\n\n  it('removes caches for storage key on clearForStorageKey', async () => {\n    setMockConnectionResponseHandler(\n        'CacheStorage.requestCacheNames',\n        () => ({\n          caches: [\n            {cacheId: 'id1', storageKey: testKey, storageBucket: testStorageBucket, cacheName: 'test-cache-1'},\n            {cacheId: 'id2', storageKey: testKey, storageBucket: testStorageBucket, cacheName: 'test-cache-2'},\n          ],\n        }));\n    cacheStorageModel.enable();\n    manager?.storageBucketCreatedOrUpdated({bucketInfo: testStorageBucketInfo});\n    cacheStorageModel.refreshCacheNames();\n    clearMockConnectionResponseHandler('CacheStorage.requestCacheNames');\n\n    cacheStorageModel.clearForStorageKey(testKey);\n\n    assert.isEmpty(cacheStorageModel.caches());\n  });\n\n  it('registers storage key on enable', async () => {\n    const trackCacheSpy = sinon.spy(target.storageAgent(), 'invoke_trackCacheStorageForStorageKey' as never);\n\n    manager?.storageBucketCreatedOrUpdated({bucketInfo: testStorageBucketInfo});\n    cacheStorageModel.enable();\n\n    assert.isTrue(trackCacheSpy.calledOnceWithExactly({storageKey: testKey}));\n  });\n});\n"]}