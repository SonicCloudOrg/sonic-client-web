{"version":3,"file":"NetworkRequest.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/NetworkRequest.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Protocol from '../../generated/protocol.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport {expectCookie} from '../../testing/Cookies.js';\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {\n  describeWithMockConnection,\n  setMockConnectionResponseHandler,\n} from '../../testing/MockConnection.js';\nimport * as Platform from '../platform/platform.js';\n\nimport * as SDK from './sdk.js';\n\ndescribe('NetworkRequest', () => {\n  it('can parse statusText from the first line of responseReceivedExtraInfo\\'s headersText', () => {\n    assert.strictEqual(\n        SDK.NetworkRequest.NetworkRequest.parseStatusTextFromResponseHeadersText('HTTP/1.1 304 not modified'),\n        'not modified');\n    assert.strictEqual(\n        SDK.NetworkRequest.NetworkRequest.parseStatusTextFromResponseHeadersText('HTTP/1.1 200 OK'), 'OK');\n    assert.strictEqual(\n        SDK.NetworkRequest.NetworkRequest.parseStatusTextFromResponseHeadersText('HTTP/1.1 200 OK\\r\\n\\r\\nfoo: bar\\r\\n'),\n        'OK');\n  });\n\n  it('parses reponse cookies from headers', () => {\n    const request = SDK.NetworkRequest.NetworkRequest.createWithoutBackendRequest(\n        'requestId', 'url' as Platform.DevToolsPath.UrlString, 'documentURL' as Platform.DevToolsPath.UrlString, null);\n    request.addExtraResponseInfo({\n      blockedResponseCookies: [],\n      responseHeaders: [{name: 'Set-Cookie', value: 'foo=bar'}, {name: 'Set-Cookie', value: 'baz=qux'}],\n      resourceIPAddressSpace: 'Public' as Protocol.Network.IPAddressSpace,\n    } as unknown as SDK.NetworkRequest.ExtraResponseInfo);\n    assert.strictEqual(request.responseCookies.length, 2);\n    expectCookie(request.responseCookies[0], {name: 'foo', value: 'bar', size: 8});\n    expectCookie(request.responseCookies[1], {name: 'baz', value: 'qux', size: 7});\n  });\n\n  it('infers status text from status code if none given', () => {\n    const fakeRequest = SDK.NetworkRequest.NetworkRequest.createWithoutBackendRequest(\n        'fakeRequestId',\n        'url1' as Platform.DevToolsPath.UrlString,\n        'documentURL' as Platform.DevToolsPath.UrlString,\n        null,\n    );\n    fakeRequest.statusCode = 200;\n\n    assert.strictEqual(fakeRequest.statusText, '');\n    assert.strictEqual(fakeRequest.getInferredStatusText(), 'OK');\n  });\n\n  it('does not infer status text from unknown status code', () => {\n    const fakeRequest = SDK.NetworkRequest.NetworkRequest.createWithoutBackendRequest(\n        'fakeRequestId',\n        'url1' as Platform.DevToolsPath.UrlString,\n        'documentURL' as Platform.DevToolsPath.UrlString,\n        null,\n    );\n    fakeRequest.statusCode = 999;\n\n    assert.strictEqual(fakeRequest.statusText, '');\n    assert.strictEqual(fakeRequest.getInferredStatusText(), '');\n  });\n\n  it('infers status text only when no status text given', () => {\n    const fakeRequest = SDK.NetworkRequest.NetworkRequest.createWithoutBackendRequest(\n        'fakeRequestId',\n        'url1' as Platform.DevToolsPath.UrlString,\n        'documentURL' as Platform.DevToolsPath.UrlString,\n        null,\n    );\n    fakeRequest.statusCode = 200;\n    fakeRequest.statusText = 'Prefer me';\n\n    assert.strictEqual(fakeRequest.statusText, 'Prefer me');\n    assert.strictEqual(fakeRequest.getInferredStatusText(), 'Prefer me');\n  });\n\n  it('includes partition key in response cookies', () => {\n    const request = SDK.NetworkRequest.NetworkRequest.createWithoutBackendRequest(\n        'requestId', 'url' as Platform.DevToolsPath.UrlString, 'documentURL' as Platform.DevToolsPath.UrlString, null);\n    request.addExtraResponseInfo({\n      blockedResponseCookies: [],\n      responseHeaders:\n          [{name: 'Set-Cookie', value: 'foo=bar'}, {name: 'Set-Cookie', value: 'baz=qux; Secure;Partitioned'}],\n      resourceIPAddressSpace: 'Public' as Protocol.Network.IPAddressSpace,\n      cookiePartitionKey: {topLevelSite: 'partitionKey', hasCrossSiteAncestor: false},\n    } as unknown as SDK.NetworkRequest.ExtraResponseInfo);\n    assert.strictEqual(request.responseCookies.length, 2);\n    expectCookie(request.responseCookies[0], {name: 'foo', value: 'bar', size: 8});\n    expectCookie(request.responseCookies[1], {\n      name: 'baz',\n      value: 'qux',\n      secure: true,\n      partitionKey: {topLevelSite: 'partitionKey', hasCrossSiteAncestor: false},\n      size: 27,\n    });\n  });\n\n  it('determines whether the response headers have been overridden', () => {\n    const request = SDK.NetworkRequest.NetworkRequest.createWithoutBackendRequest(\n        'requestId', 'url' as Platform.DevToolsPath.UrlString, 'documentURL' as Platform.DevToolsPath.UrlString, null);\n    request.responseHeaders = [{name: 'foo', value: 'bar'}];\n\n    request.originalResponseHeaders = [{name: 'foo', value: 'baz'}];\n    assert.isTrue(request.hasOverriddenHeaders());\n\n    request.originalResponseHeaders = [];\n    assert.isFalse(request.hasOverriddenHeaders());\n\n    request.originalResponseHeaders = [{name: 'Foo', value: 'bar'}];\n    assert.isFalse(request.hasOverriddenHeaders());\n\n    request.originalResponseHeaders = [{name: 'Foo', value: 'Bar'}];\n    assert.isTrue(request.hasOverriddenHeaders());\n\n    request.responseHeaders = [{name: 'one', value: 'first'}, {name: 'two', value: 'second'}];\n    request.originalResponseHeaders = [{name: 'ONE', value: 'first'}, {name: 'Two', value: 'second'}];\n    assert.isFalse(request.hasOverriddenHeaders());\n\n    request.originalResponseHeaders = [{name: 'one', value: 'first'}];\n    assert.isTrue(request.hasOverriddenHeaders());\n\n    request.originalResponseHeaders = [{name: 'two', value: 'second'}, {name: 'one', value: 'first'}];\n    assert.isFalse(request.hasOverriddenHeaders());\n\n    request.originalResponseHeaders = [{name: 'one', value: 'second'}, {name: 'two', value: 'first'}];\n    assert.isTrue(request.hasOverriddenHeaders());\n\n    request.originalResponseHeaders =\n        [{name: 'one', value: 'first'}, {name: 'two', value: 'second'}, {name: 'two', value: 'second'}];\n    assert.isTrue(request.hasOverriddenHeaders());\n  });\n\n  it('considers duplicate headers which only differ in the order of their values as overridden', () => {\n    const request = SDK.NetworkRequest.NetworkRequest.createWithoutBackendRequest(\n        'requestId', 'url' as Platform.DevToolsPath.UrlString, 'documentURL' as Platform.DevToolsPath.UrlString, null);\n    request.responseHeaders = [{name: 'duplicate', value: 'first'}, {name: 'duplicate', value: 'second'}];\n    request.originalResponseHeaders = [{name: 'duplicate', value: 'second'}, {name: 'duplicate', value: 'first'}];\n    assert.isTrue(request.hasOverriddenHeaders());\n  });\n\n  it('can handle the case of duplicate cookies with only 1 of them being blocked', async () => {\n    const request = SDK.NetworkRequest.NetworkRequest.create(\n        'requestId' as Protocol.Network.RequestId, 'url' as Platform.DevToolsPath.UrlString,\n        'documentURL' as Platform.DevToolsPath.UrlString, null, null, null);\n    request.addExtraResponseInfo({\n      responseHeaders: [{name: 'Set-Cookie', value: 'foo=duplicate; Path=/\\nfoo=duplicate; Path=/'}],\n      blockedResponseCookies: [{\n        blockedReasons: [Protocol.Network.SetCookieBlockedReason.SameSiteNoneInsecure],\n        cookie: null,\n        cookieLine: 'foo=duplicate; Path=/',\n      }],\n      resourceIPAddressSpace: Protocol.Network.IPAddressSpace.Public,\n      statusCode: undefined,\n      cookiePartitionKey: undefined,\n      cookiePartitionKeyOpaque: undefined,\n      exemptedResponseCookies: undefined,\n    });\n\n    assert.deepEqual(\n        request.responseCookies.map(cookie => cookie.getCookieLine()),\n        ['foo=duplicate; Path=/', 'foo=duplicate; Path=/']);\n    assert.deepEqual(request.blockedResponseCookies(), [{\n                       blockedReasons: [Protocol.Network.SetCookieBlockedReason.SameSiteNoneInsecure],\n                       cookie: null,\n                       cookieLine: 'foo=duplicate; Path=/',\n                     }]);\n    assert.deepEqual(\n        request.nonBlockedResponseCookies().map(cookie => cookie.getCookieLine()), ['foo=duplicate; Path=/']);\n  });\n\n  it('can handle the case of exempted cookies', async () => {\n    const request = SDK.NetworkRequest.NetworkRequest.create(\n        'requestId' as Protocol.Network.RequestId, 'url' as Platform.DevToolsPath.UrlString,\n        'documentURL' as Platform.DevToolsPath.UrlString, null, null, null);\n\n    const cookie = new SDK.Cookie.Cookie('name', 'value');\n    cookie.addAttribute(SDK.Cookie.Attribute.SameSite, 'None');\n    cookie.addAttribute(SDK.Cookie.Attribute.Secure, true);\n    cookie.setCookieLine('name=value; Path=/; SameSite=None; Secure;');\n    request.addExtraResponseInfo({\n      responseHeaders: [{name: 'Set-Cookie', value: cookie.getCookieLine() as string}],\n      blockedResponseCookies: [],\n      resourceIPAddressSpace: Protocol.Network.IPAddressSpace.Public,\n      statusCode: undefined,\n      cookiePartitionKey: undefined,\n      cookiePartitionKeyOpaque: undefined,\n      exemptedResponseCookies: [{\n        cookie: cookie,\n        cookieLine: cookie.getCookieLine() as string,\n        exemptionReason: Protocol.Network.CookieExemptionReason.TPCDHeuristics,\n      }],\n    });\n\n    assert.deepEqual(\n        request.responseCookies.map(cookie => cookie.getCookieLine()), ['name=value; Path=/; SameSite=None; Secure;']);\n    assert.deepEqual(\n        request.nonBlockedResponseCookies().map(cookie => cookie.getCookieLine()),\n        ['name=value; Path=/; SameSite=None; Secure;']);\n    assert.deepEqual(\n        request.exemptedResponseCookies().map(cookie => cookie.cookie.getCookieLine()),\n        ['name=value; Path=/; SameSite=None; Secure;']);\n    assert.deepEqual(\n        request.exemptedResponseCookies().map(cookie => cookie.exemptionReason),\n        [Protocol.Network.CookieExemptionReason.TPCDHeuristics]);\n\n    request.addExtraRequestInfo({\n      blockedRequestCookies: [],\n      requestHeaders: [],\n      includedRequestCookies: [{exemptionReason: Protocol.Network.CookieExemptionReason.EnterprisePolicy, cookie}],\n      connectTiming: {requestTime: 0},\n    });\n\n    assert.deepEqual(\n        request.includedRequestCookies().map(included => included.cookie.getCookieLine()),\n        ['name=value; Path=/; SameSite=None; Secure;']);\n    assert.deepEqual(\n        request.includedRequestCookies().map(included => included.exemptionReason),\n        [Protocol.Network.CookieExemptionReason.EnterprisePolicy]);\n  });\n\n  it('preserves order of headers in case of duplicates', () => {\n    const request = SDK.NetworkRequest.NetworkRequest.createWithoutBackendRequest(\n        'requestId', 'url' as Platform.DevToolsPath.UrlString, 'documentURL' as Platform.DevToolsPath.UrlString, null);\n    const responseHeaders = [{name: '1ab', value: 'middle'}, {name: '1aB', value: 'last'}];\n    request.addExtraResponseInfo({\n      blockedResponseCookies: [],\n      responseHeaders,\n      resourceIPAddressSpace: 'Public' as Protocol.Network.IPAddressSpace,\n    } as unknown as SDK.NetworkRequest.ExtraResponseInfo);\n    assert.deepEqual(request.sortedResponseHeaders, responseHeaders);\n  });\n\n  it('treats multiple headers with the same name the same as single header with comma-separated values', () => {\n    const request = SDK.NetworkRequest.NetworkRequest.createWithoutBackendRequest(\n        'requestId', 'url' as Platform.DevToolsPath.UrlString, 'documentURL' as Platform.DevToolsPath.UrlString, null);\n    request.responseHeaders = [{name: 'duplicate', value: 'first, second'}];\n    request.originalResponseHeaders = [{name: 'duplicate', value: 'first'}, {name: 'duplicate', value: 'second'}];\n    assert.isFalse(request.hasOverriddenHeaders());\n  });\n});\n\ndescribeWithMockConnection('NetworkRequest', () => {\n  let networkManagerForRequestStub: sinon.SinonStub;\n  let cookie: SDK.Cookie.Cookie;\n  let addBlockedCookieSpy: sinon.SinonSpy;\n  let target: SDK.Target.Target;\n\n  beforeEach(() => {\n    target = createTarget();\n    const networkManager = target.model(SDK.NetworkManager.NetworkManager);\n    assert.exists(networkManager);\n    networkManagerForRequestStub = sinon.stub(SDK.NetworkManager.NetworkManager, 'forRequest').returns(networkManager);\n    cookie = new SDK.Cookie.Cookie('name', 'value');\n    addBlockedCookieSpy = sinon.spy(SDK.CookieModel.CookieModel.prototype, 'addBlockedCookie');\n  });\n\n  afterEach(() => {\n    networkManagerForRequestStub.restore();\n  });\n\n  it('adds blocked response cookies to - and removes exempted cookies from cookieModel', async () => {\n    const removeBlockedCookieSpy = sinon.spy(SDK.CookieModel.CookieModel.prototype, 'removeBlockedCookie');\n    setMockConnectionResponseHandler('Network.getCookies', () => ({cookies: []}));\n    const cookieModel = target.model(SDK.CookieModel.CookieModel);\n    assert.exists(cookieModel);\n    const url = 'url' as Platform.DevToolsPath.UrlString;\n    const request = SDK.NetworkRequest.NetworkRequest.create(\n        'requestId' as Protocol.Network.RequestId, url, 'documentURL' as Platform.DevToolsPath.UrlString, null, null,\n        null);\n\n    request.addExtraResponseInfo({\n      responseHeaders: [{name: 'Set-Cookie', value: 'name=value; Path=/'}],\n      blockedResponseCookies: [{\n        blockedReasons: [Protocol.Network.SetCookieBlockedReason.ThirdPartyPhaseout],\n        cookie,\n        cookieLine: 'name=value; Path=/',\n      }],\n      resourceIPAddressSpace: Protocol.Network.IPAddressSpace.Public,\n      statusCode: undefined,\n      cookiePartitionKey: undefined,\n      cookiePartitionKeyOpaque: undefined,\n      exemptedResponseCookies: undefined,\n    });\n    assert.isTrue(addBlockedCookieSpy.calledOnceWith(\n        cookie, [{\n          attribute: null,\n          uiString: 'Setting this cookie was blocked due to third-party cookie phaseout. Learn more in the Issues tab.',\n        }]));\n    assert.deepStrictEqual(await cookieModel.getCookiesForDomain(''), [cookie]);\n\n    request.addExtraResponseInfo({\n      responseHeaders: [{name: 'Set-Cookie', value: 'name=value; Path=/'}],\n      blockedResponseCookies: [],\n      resourceIPAddressSpace: Protocol.Network.IPAddressSpace.Public,\n      statusCode: undefined,\n      cookiePartitionKey: undefined,\n      cookiePartitionKeyOpaque: undefined,\n      exemptedResponseCookies: [{\n        cookie,\n        cookieLine: cookie.getCookieLine() as string,\n        exemptionReason: Protocol.Network.CookieExemptionReason.TPCDHeuristics,\n      }],\n    });\n    assert.isTrue(removeBlockedCookieSpy.calledOnceWith(cookie));\n    assert.isEmpty(await cookieModel.getCookiesForDomain(''));\n  });\n});\n\ndescribeWithMockConnection('ServerSentEvents', () => {\n  let target: SDK.Target.Target;\n  let networkManager: SDK.NetworkManager.NetworkManager;\n\n  beforeEach(() => {\n    target = createTarget();\n    networkManager = target.model(SDK.NetworkManager.NetworkManager) as SDK.NetworkManager.NetworkManager;\n  });\n\n  it('sends EventSourceMessageAdded events for EventSource text/event-stream', () => {\n    networkManager.dispatcher.requestWillBeSent({\n      requestId: '1' as Protocol.Network.RequestId,\n      request: {\n        url: 'https://example.com/sse',\n      },\n      type: 'EventSource',\n    } as Protocol.Network.RequestWillBeSentEvent);\n    networkManager.dispatcher.responseReceived({\n      requestId: '1' as Protocol.Network.RequestId,\n      response: {\n        url: 'https://example.com/sse',\n        mimeType: 'text/event-stream',\n      } as Protocol.Network.Response,\n    } as Protocol.Network.ResponseReceivedEvent);\n\n    const networkEvents: SDK.NetworkRequest.EventSourceMessage[] = [];\n    networkManager.requestForId('1')!.addEventListener(\n        SDK.NetworkRequest.Events.EventSourceMessageAdded, ({data}) => networkEvents.push(data));\n\n    networkManager.dispatcher.eventSourceMessageReceived({\n      requestId: '1' as Protocol.Network.RequestId,\n      timestamp: 21,\n      data: 'foo',\n      eventId: 'fooId',\n      eventName: 'fooName',\n    });\n    networkManager.dispatcher.eventSourceMessageReceived({\n      requestId: '1' as Protocol.Network.RequestId,\n      timestamp: 42,\n      data: 'bar',\n      eventId: 'barId',\n      eventName: 'barName',\n    });\n\n    assert.lengthOf(networkEvents, 2);\n    assert.deepStrictEqual(networkEvents[0], {data: 'foo', eventId: 'fooId', eventName: 'fooName', time: 21});\n    assert.deepStrictEqual(networkEvents[1], {data: 'bar', eventId: 'barId', eventName: 'barName', time: 42});\n  });\n\n  it('sends EventSourceMessageAdded events for raw text/event-stream', async () => {\n    setMockConnectionResponseHandler('Network.streamResourceContent', () => ({\n                                                                        getError() {\n                                                                          return undefined;\n                                                                        },\n                                                                        bufferedData: '',\n                                                                      }));\n    networkManager.dispatcher.requestWillBeSent({\n      requestId: '1' as Protocol.Network.RequestId,\n      request: {\n        url: 'https://example.com/sse',\n      },\n      type: 'Fetch',\n    } as Protocol.Network.RequestWillBeSentEvent);\n    networkManager.dispatcher.responseReceived({\n      requestId: '1' as Protocol.Network.RequestId,\n      response: {\n        url: 'https://example.com/sse',\n        mimeType: 'text/event-stream',\n      } as Protocol.Network.Response,\n    } as Protocol.Network.ResponseReceivedEvent);\n\n    const networkEvents: SDK.NetworkRequest.EventSourceMessage[] = [];\n    const {promise: twoEventsReceivedPromise, resolve} = Platform.PromiseUtilities.promiseWithResolvers<void>();\n    networkManager.requestForId('1')!.addEventListener(SDK.NetworkRequest.Events.EventSourceMessageAdded, ({data}) => {\n      networkEvents.push(data);\n      if (networkEvents.length === 2) {\n        resolve();\n      }\n    });\n\n    const message = `\nid: fooId\nevent: fooName\ndata: foo\n\nid: barId\nevent: barName\ndata: bar\\n\\n`;\n\n    // Send `message` piecemeal via dataReceived events.\n    let time = 0;\n    for (const c of message) {\n      networkManager.dispatcher.dataReceived({\n        requestId: '1' as Protocol.Network.RequestId,\n        dataLength: 1,\n        encodedDataLength: 1,\n        timestamp: time++,\n        data: window.btoa(c),\n      });\n    }\n\n    await twoEventsReceivedPromise;\n\n    // Omit time from expectation as the dataReceived loop is racing against the text decoder.\n    assert.lengthOf(networkEvents, 2);\n    assert.deepInclude(networkEvents[0], {data: 'foo', eventId: 'fooId', eventName: 'fooName'});\n    assert.deepInclude(networkEvents[1], {data: 'bar', eventId: 'barId', eventName: 'barName'});\n  });\n});\n\ndescribeWithMockConnection('requestStreamingContent', () => {\n  let target: SDK.Target.Target;\n  let networkManager: SDK.NetworkManager.NetworkManager;\n\n  beforeEach(() => {\n    target = createTarget();\n    networkManager = target.model(SDK.NetworkManager.NetworkManager) as SDK.NetworkManager.NetworkManager;\n  });\n\n  it('retrieves the full response body for finished requests', () => {\n    networkManager.dispatcher.requestWillBeSent({\n      requestId: '1' as Protocol.Network.RequestId,\n      request: {\n        url: 'https://example.com/index.html',\n      },\n      type: 'Document',\n    } as Protocol.Network.RequestWillBeSentEvent);\n    networkManager.dispatcher.responseReceived({\n      requestId: '1' as Protocol.Network.RequestId,\n      response: {\n        url: 'https://example.com/index.html',\n        mimeType: 'text/html',\n      } as Protocol.Network.Response,\n    } as Protocol.Network.ResponseReceivedEvent);\n    networkManager.dispatcher.loadingFinished({\n      requestId: '1' as Protocol.Network.RequestId,\n    } as Protocol.Network.LoadingFinishedEvent);\n\n    const responseBodySpy = sinon.spy(target.networkAgent(), 'invoke_getResponseBody');\n\n    void networkManager.requestForId('1')!.requestStreamingContent();\n\n    assert.isTrue(responseBodySpy.calledOnce);\n  });\n\n  it('streams the full response body for in-flight requests', () => {\n    networkManager.dispatcher.requestWillBeSent({\n      requestId: '1' as Protocol.Network.RequestId,\n      request: {\n        url: 'https://example.com/index.html',\n      },\n      type: 'Document',\n    } as Protocol.Network.RequestWillBeSentEvent);\n    networkManager.dispatcher.responseReceived({\n      requestId: '1' as Protocol.Network.RequestId,\n      response: {\n        url: 'https://example.com/index.html',\n        mimeType: 'text/html',\n      } as Protocol.Network.Response,\n    } as Protocol.Network.ResponseReceivedEvent);\n\n    const responseBodySpy = sinon.spy(target.networkAgent(), 'invoke_streamResourceContent');\n\n    void networkManager.requestForId('1')!.requestStreamingContent();\n\n    assert.isTrue(responseBodySpy.calledOnce);\n  });\n\n  it('sends ChunkAdded events when new data is received', async () => {\n    networkManager.dispatcher.requestWillBeSent({\n      requestId: '1' as Protocol.Network.RequestId,\n      request: {\n        url: 'https://example.com/index.html',\n      },\n      type: 'Document',\n    } as Protocol.Network.RequestWillBeSentEvent);\n    networkManager.dispatcher.responseReceived({\n      requestId: '1' as Protocol.Network.RequestId,\n      response: {\n        url: 'https://example.com/index.html',\n        mimeType: 'text/html',\n      } as Protocol.Network.Response,\n    } as Protocol.Network.ResponseReceivedEvent);\n\n    sinon.stub(SDK.NetworkManager.NetworkManager, 'streamResponseBody')\n        .returns(Promise.resolve(new TextUtils.ContentData.ContentData('Zm9v', true, 'text/html')));\n\n    const maybeStreamingContent = await networkManager.requestForId('1')!.requestStreamingContent();\n    assert.isFalse(TextUtils.StreamingContentData.isError(maybeStreamingContent));\n    const streamingContent = maybeStreamingContent as TextUtils.StreamingContentData.StreamingContentData;\n    const eventPromise = streamingContent.once(TextUtils.StreamingContentData.Events.ChunkAdded);\n\n    networkManager.dispatcher.dataReceived({\n      requestId: '1' as Protocol.Network.RequestId,\n      data: 'YmFy',\n      dataLength: 4,\n      encodedDataLength: 4,\n      timestamp: 42,\n    });\n\n    const {chunk} = await eventPromise;\n    assert.strictEqual(chunk, 'YmFy');\n    assert.strictEqual(streamingContent.content().text, 'foobar');\n  });\n\n  it('waits for \"responseReceived\" event to construct the StreamingContentData', async () => {\n    networkManager.dispatcher.requestWillBeSent({\n      requestId: '1' as Protocol.Network.RequestId,\n      request: {\n        url: 'https://example.com/index.html',\n      },\n      type: 'Document',\n    } as Protocol.Network.RequestWillBeSentEvent);\n    sinon.stub(target.networkAgent(), 'invoke_streamResourceContent')\n        .returns(Promise.resolve({bufferedData: '', getError: () => undefined}));\n\n    const streamingContentDataPromise = networkManager.requestForId('1')!.requestStreamingContent();\n\n    // Trigger the \"responseReceived\" on the next event loop tick.\n    setTimeout(() => {\n      networkManager.dispatcher.responseReceived({\n        requestId: '1' as Protocol.Network.RequestId,\n        response: {\n          url: 'https://example.com/index.html',\n          mimeType: 'text/html',\n        } as Protocol.Network.Response,\n      } as Protocol.Network.ResponseReceivedEvent);\n    }, 0);\n\n    const maybeStreamingContent = await streamingContentDataPromise;\n    assert.isFalse(TextUtils.StreamingContentData.isError(maybeStreamingContent));\n    const streamingContent = maybeStreamingContent as TextUtils.StreamingContentData.StreamingContentData;\n    assert.strictEqual(streamingContent.mimeType, 'text/html');\n  });\n});\n"]}