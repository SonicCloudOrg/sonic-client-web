{"version":3,"file":"CSSPropertyParser.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/CSSPropertyParser.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAC7B,OAAO,EAAC,OAAO,EAAC,MAAM,iCAAiC,CAAC;AAGxD,OAAO,KAAK,GAAG,MAAM,UAAU,CAAC;AAEhC,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;IACjC,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAC7B,MAAM,aAAa,GAAG,GAAG,CAAC,iBAAiB,CAAC,aAAa,CAAC;QAE1D,EAAE,CAAC,+BAA+B,EAAE,GAAG,EAAE;YACvC,MAAM,CAAC,WAAW,CAAC,aAAa,CAAC,yBAAyB,CAAC,EAAE,YAAY,CAAC,CAAC;QAC7E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;YAC1C,MAAM,CAAC,WAAW,CACd,aAAa,CAAC;iCACS,CAAC,EACxB,YAAY,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oDAAoD,EAAE,GAAG,EAAE;YAC5D,MAAM,CAAC,WAAW,CAAC,aAAa,CAAC,oCAAoC,CAAC,EAAE,YAAY,CAAC,CAAC;QACxF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;YACxC,MAAM,CAAC,WAAW,CAAC,aAAa,CAAC,4CAA4C,CAAC,EAAE,kBAAkB,CAAC,CAAC;QACtG,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,4BAA4B,EAAE,GAAG,EAAE;QAC1C,MAAM,0BAA0B,GAAG,GAAG,CAAC,iBAAiB,CAAC,0BAA0B,CAAC;QAEpF,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;YACnD,MAAM,CAAC,SAAS,CAAC,0BAA0B,CAAC,WAAW,CAAC,EAAE,CAAC,EAAC,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,EAAC,CAAC,CAAC,CAAC;QACxF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;YACpD,MAAM,CAAC,SAAS,CACZ,0BAA0B,CAAC,sBAAsB,CAAC,EAAE,CAAC,EAAC,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,EAAC,EAAE,EAAC,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,EAAC,CAAC,CAAC,CAAC;QAChH,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;YACzD,MAAM,CAAC,SAAS,CAAC,0BAA0B,CAAC,YAAY,CAAC,EAAE,CAAC,EAAC,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,EAAC,CAAC,CAAC,CAAC;QAC1F,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,MAAM,eAAe,GAAG,GAAG,CAAC,iBAAiB,CAAC,eAAe,CAAC;QAE9D,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;YAC7C,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;YACvD,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,aAAa,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;YACvD,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,eAAe,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;YACrC,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,gCAAgC,CAAC,EAAE,CAAC,OAAO,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC,CAAC;QACvG,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,MAAM,UAAW,SAAQ,GAAG,CAAC,iBAAiB,CAAC,UAAU;QACvD,MAAM,GAA+B,IAAI,CAAC;QAC1C,UAAU,CAA2C;QAErD,YAAY,GAAqC,EAAE,SAAmD;YACpG,KAAK,CAAC,GAAG,CAAC,CAAC;YACX,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC9B,CAAC;QAEkB,KAAK,CAAC,EAAC,IAAI,EAAsC;YAClE,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;gBAChB,OAAO,KAAK,CAAC;YACf,CAAC;YAED,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC;gBAC1B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC;gBAClC,OAAO,KAAK,CAAC;YACf,CAAC;YACD,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,GAAqC,EAAE,SAAmD;YAEpG,OAAO,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC,MAAM,CAAC;QAChD,CAAC;QAED,MAAM,CAAC,OAAO,CAAC,GAAqC,EAAE,SAAmD;YAEvG,MAAM,UAAU,GAA4B,EAAE,CAAC;YAC/C,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAA2B,EAAE,EAAE;gBACnD,IAAI,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC;oBACpB,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACxB,CAAC;gBAED,OAAO,KAAK,CAAC;YACf,CAAC,CAAC,CAAC;YACH,OAAO,UAAU,CAAC;QACpB,CAAC;KACF;IAED,SAAS,gBAAgB,CACrB,IAAY,EAAE,KAAa,EAAE,OAAyC;QAExE,MAAM,GAAG,GAAG,GAAG,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACnE,IAAI,CAAC,GAAG,EAAE,CAAC;YACT,OAAO,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAC,CAAC;QACzC,CAAC;QAED,MAAM,aAAa,GAAG,GAAG,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;QACtF,MAAM,WAAW,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,YAAY,OAAO,CAAC,SAAS,CAAC,CAAC;QACtG,MAAM,KAAK,GAAG,WAAW,IAAI,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;QAEjE,OAAO;YACL,GAAG;YACH,KAAK,EAAE,KAAK,YAAY,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI;YACxD,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE;SAC9B,CAAC;IACJ,CAAC;IAED,SAAS,mBAAmB,CAAC,IAAY,EAAE,KAAa;QACtD,MAAM,GAAG,GAAG,GAAG,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACnE,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC;QAC1D,OAAO,GAAG,CAAC;IACb,CAAC;IAED,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,8BAA8B,EAAE,GAAG,EAAE;YACtC,MAAM,aAAa,GAAG,CAAC,CAAS,EAAE,CAAS,EAAE,EAAE,CAC3C,GAAG,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAEpG,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC;YAC1C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;YAC/C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;YAC/C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;YAC/C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;YAC/C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;YAE/C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC;YAC1C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;YAChD,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;YAChD,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;YAChD,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;YAChD,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC;YAC/C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;YAChD,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;YAChD,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;YAEhD,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,iBAAiB,CAAC,aAAa,CAC7C,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1G,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,iBAAiB,CAAC,aAAa,CAC7C,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1G,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,iBAAiB,CAAC,aAAa,CAC7C,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,EAChE,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YACvE,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,aAAa,CAC9C,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3G,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,aAAa,CAC9C,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3G,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,aAAa,CAC9C,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,EAChE,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE;YACzB,MAAM,QAAQ,GAAG,sCAAsC,CAAC;YACxD,MAAM,GAAG,GAAG,mBAAmB,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;YACxD,MAAM,OAAO,GAAG,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC;YAChD,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YACvB,MAAM,CAAC,WAAW,CACd,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE;;;;;;;;;;;;MAY9C,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;YAC1C,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;YACpE,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;YACtE,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;QACvE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;YACzC,MAAM,CAAC,WAAW,CAAC,mBAAmB,CAAC,mBAAmB,EAAE,KAAK,CAAC,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;YAC3F,MAAM,CAAC,WAAW,CAAC,mBAAmB,CAAC,6BAA6B,EAAE,KAAK,CAAC,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;YACrG,MAAM,CAAC,WAAW,CAAC,mBAAmB,CAAC,mBAAmB,EAAE,KAAK,CAAC,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;YAC3F,MAAM,CAAC,WAAW,CAAC,mBAAmB,CAAC,kBAAkB,EAAE,KAAK,CAAC,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;YACxF,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC;QAC5E,CAAC,CAAC,CAAC;QAEH,MAAM,iBAAiB;YAEA;YAAuB;YAD5C,IAAI,CAAwB;YAC5B,YAAqB,IAAY,EAAW,eAAuB;gBAA9C,SAAI,GAAJ,IAAI,CAAQ;gBAAW,oBAAe,GAAf,eAAe,CAAQ;gBACjE,IAAI,CAAC,IAAI,GAAG,EAA2B,CAAC;YAC1C,CAAC;YACD,YAAY;gBACV,OAAO,IAAI,CAAC,eAAe,CAAC;YAC9B,CAAC;SACF;QAED,EAAE,CAAC,uBAAuB,EAAE,GAAG,EAAE;YAC/B,MAAM,YAAY,GAAG,4BAA4B,CAAC;YAClD,iDAAiD;YACjD,2GAA2G;YAC3G,oBAAoB;YAEpB,MAAM,YAAY,GAAG,IAAI,GAAG,CAAC,iBAAiB,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;YAE1E,+BAA+B;YAC/B,YAAY;YACZ,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;YAErD,YAAY,CAAC,IAAI,CAAC,IAAI,iBAAiB,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;YACpF,YAAY,CAAC,IAAI,CAAC,IAAI,iBAAiB,CAAC,QAAQ,EAAE,EAAE,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;YAElF,qGAAqG;YACrG,+BAA+B;YAC/B,YAAY;YACZ,+BAA+B;YAC/B,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;YAEpG,oDAAoD;YACpD,+BAA+B;YAC/B,mBAAmB;YACnB,+BAA+B;YAC/B,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC;YAE3G,+DAA+D;YAC/D,+BAA+B;YAC/B,aAAa;YACb,+BAA+B;YAC/B,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;YAErG,yDAAyD;YACzD,+BAA+B;YAC/B,kBAAkB;YAClB,+BAA+B;YAC/B,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;YAEzG,qDAAqD;YACrD,+BAA+B;YAC/B,8BAA8B;YAC9B,+BAA+B;YAC/B,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,oBAAoB,CAAC,CAAC;YAEjH,yEAAyE;YACzE,+BAA+B;YAC/B,8BAA8B;YAC9B,+BAA+B;YAC/B,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YAErG,6DAA6D;YAC7D,+BAA+B;YAC/B,6BAA6B;YAC7B,+BAA+B;YAC/B,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,kBAAkB,CAAC,CAAC;YAE/G,gDAAgD;YAChD,+BAA+B;YAC/B,qBAAqB;YACrB,+BAA+B;YAC/B,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YAEjG,kCAAkC;YAClC,+BAA+B;YAC/B,qBAAqB;YACrB,+BAA+B;YAC/B,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;YAEtG,mCAAmC;YACnC,+BAA+B;YAC/B,8BAA8B;YAC9B,+BAA+B;YAC/B,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;YAEhG,wCAAwC;YACxC,+BAA+B;YAC/B,oBAAoB;YACpB,+BAA+B;YAC/B,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;YAErG,sCAAsC;YACtC,+BAA+B;YAC/B,gBAAgB;YAChB,+BAA+B;YAC/B,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;QACvG,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;YACvD,MAAM,YAAY,GAAG,4BAA4B,CAAC;YAClD,MAAM,YAAY,GAAG,IAAI,GAAG,CAAC,iBAAiB,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;YAE1E,MAAM,IAAI,GAAG,CAAC,IAAY,EAAE,EAAU,EAAE,EAAE;gBACxC,MAAM,IAAI,GAAG,YAAY,CAAC,SAAS,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC9F,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;gBAC/B,6GAA6G;gBAC7G,sBAAsB;gBACtB,YAAY,CAAC,IAAI,CAAC,IAAI,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACpG,CAAC,CAAC;YAEF,+BAA+B;YAC/B,mBAAmB;YACnB,YAAY;YACZ,iDAAiD;YACjD,qBAAqB;YACrB,aAAa;YACb,YAAY;YACZ,aAAa;YACb,YAAY;YACZ,YAAY,CAAC,KAAK,EAAE,CAAC;YACrB,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YACf,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YACf,MAAM,CAAC,WAAW,CACd,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,oBAAoB,CAAC,CAAC;YACtG,MAAM,CAAC,WAAW,CACd,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,kBAAkB,CAAC,CAAC;YACpG,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;YAC7G,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;YAC3G,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;YAC3G,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;YAEzG,+BAA+B;YAC/B,mBAAmB;YACnB,iBAAiB;YACjB,qBAAqB;YACrB,kBAAkB;YAClB,kBAAkB;YAClB,iBAAiB;YACjB,iBAAiB;YACjB,YAAY,CAAC,KAAK,EAAE,CAAC;YACrB,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YACf,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YACf,MAAM,CAAC,WAAW,CACd,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,oBAAoB,CAAC,CAAC;YACtG,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;YAC3G,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;YAC7G,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC;YAChH,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;YAE9G,+BAA+B;YAC/B,mBAAmB;YACnB,mBAAmB;YACnB,qBAAqB;YACrB,mBAAmB;YACnB,mBAAmB;YACnB,YAAY,CAAC,KAAK,EAAE,CAAC;YACrB,4DAA4D;YAC5D,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YACf,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YACf,MAAM,CAAC,WAAW,CACd,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,oBAAoB,CAAC,CAAC;YACtG,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;YACzG,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;YAE3G,+BAA+B;YAC/B,mBAAmB;YACnB,iBAAiB;YACjB,qBAAqB;YACrB,iBAAiB;YACjB,kBAAkB;YAClB,aAAa;YACb,YAAY;YACZ,iBAAiB;YACjB,kBAAkB;YAClB,YAAY,CAAC,KAAK,EAAE,CAAC;YACrB,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YACf,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YACf,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YACf,MAAM,CAAC,WAAW,CACd,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,oBAAoB,CAAC,CAAC;YACtG,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,iBAAiB,CAAC,CAAC;YAClH,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC;YAChH,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;YAC3G,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;YACzG,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;YACzG,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;YAE3G,gCAAgC;YAChC,mBAAmB;YACnB,kBAAkB;YAClB,qBAAqB;YACrB,kBAAkB;YAClB,mBAAmB;YACnB,kBAAkB;YAClB,mBAAmB;YACnB,gCAAgC;YAChC,aAAa;YACb,cAAc;YACd,aAAa;YACb,cAAc;YACd,gCAAgC;YAChC,kBAAkB;YAClB,kBAAkB;YAClB,mBAAmB;YACnB,mBAAmB;YACnB,gCAAgC;YAChC,YAAY,CAAC,KAAK,EAAE,CAAC;YACrB,4DAA4D;YAC5D,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YACf,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YACf,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YACf,MAAM,CAAC,WAAW,CACd,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,oBAAoB,CAAC,CAAC;YACtG,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,iBAAiB,CAAC,CAAC;YAClH,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC;YAChH,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC;YAChH,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,iBAAiB,CAAC,CAAC;YAClH,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;YAC3G,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;YAC7G,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;YACzG,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;YAC3G,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;YACzG,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;YACvG,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;YAC3G,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;QAC3G,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;YACxD,MAAM,YAAY,GAAG,IAAI,GAAG,CAAC,iBAAiB,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;YACxE,YAAY,CAAC,IAAI,CAAC,IAAI,iBAAiB,CAAC,MAAM,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;YAC7D,YAAY,CAAC,IAAI,CAAC,IAAI,iBAAiB,CAAC,MAAM,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;YAC7D,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sDAAsD,EAAE,GAAG,EAAE;YAC9D,MAAM,GAAG,GAAG,mBAAmB,CAAC,YAAY,EAAE,qBAAqB,CAAC,CAAC;YACrE,MAAM,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;YACjD,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACrB,MAAM,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YAC7C,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACrB,MAAM,QAAQ,GAAG,GAAG,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;YAC1E,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,wBAAwB,CAAC,CAAC;YACjF,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,eAAe,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;YAC3D,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,eAAe,CAAC,KAAK,CAAC,EAAE,OAAO,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;YACnD,MAAM,GAAG,GAAG,mBAAmB,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;YAC9D,MAAM,QAAQ,GAAG,GAAG,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;YAC1E,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,uBAAuB,CAAC,CAAC;QAClF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uBAAuB,EAAE,GAAG,EAAE;YAC/B,KAAK,MAAM,OAAO,IACN,CAAC,UAAU,EAAE,eAAe,EAAE,qBAAqB,EAAE,oBAAoB,EAAE,yBAAyB;gBACnG,iBAAiB,CAAC,EAAE,CAAC;gBAChC,MAAM,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAC,GACpB,gBAAgB,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,GAAG,CAAC,iBAAiB,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAE5F,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;gBAC5B,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;gBAC3B,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;gBACxC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;gBACtC,MAAM,CAAC,IAAI,EAAE,GAAG,QAAQ,CAAC,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,EAAE,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBACjF,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBACrC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAC1F,CAAC;YACD,KAAK,MAAM,IAAI,IAAI,CAAC,KAAK,EAAE,oBAAoB,EAAE,QAAQ,EAAE,SAAS,CAAC,EAAE,CAAC;gBACtE,MAAM,EAAC,KAAK,EAAE,IAAI,EAAC,GAAG,gBAAgB,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,GAAG,CAAC,iBAAiB,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAE3G,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC7B,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport {Printer} from '../../testing/PropertyParser.js';\nimport type * as CodeMirror from '../../third_party/codemirror.next/codemirror.next.js';\n\nimport * as SDK from './sdk.js';\n\ndescribe('CSSPropertyParser', () => {\n  describe('stripComments', () => {\n    const stripComments = SDK.CSSPropertyParser.stripComments;\n\n    it('should strip a single comment', () => {\n      assert.strictEqual(stripComments('text /* comment */ text'), 'text  text');\n    });\n\n    it('should strip a multiline comment', () => {\n      assert.strictEqual(\n          stripComments(`text /* comment\n      some other comment */ text`),\n          'text  text');\n    });\n\n    it('should strip a comment with a comment start string', () => {\n      assert.strictEqual(stripComments('text /* comment /* comment */ text'), 'text  text');\n    });\n\n    it('should strip multiple commnets', () => {\n      assert.strictEqual(stripComments('text /* comment */ text /* comment */ text'), 'text  text  text');\n    });\n  });\n\n  describe('parseFontVariationSettings', () => {\n    const parseFontVariationSettings = SDK.CSSPropertyParser.parseFontVariationSettings;\n\n    it('should parse settings with a single value', () => {\n      assert.deepEqual(parseFontVariationSettings('\"wght\" 10'), [{tag: 'wght', value: 10}]);\n    });\n\n    it('should parse settings with multiple values', () => {\n      assert.deepEqual(\n          parseFontVariationSettings('\"wght\" 10, \"wdth\" 20'), [{tag: 'wght', value: 10}, {tag: 'wdth', value: 20}]);\n    });\n\n    it('should parse settings with a single float value', () => {\n      assert.deepEqual(parseFontVariationSettings('\"wght\" 5.5'), [{tag: 'wght', value: 5.5}]);\n    });\n  });\n\n  describe('parseFontFamily', () => {\n    const parseFontFamily = SDK.CSSPropertyParser.parseFontFamily;\n\n    it('should parse a single unquoted name', () => {\n      assert.deepEqual(parseFontFamily('Arial'), ['Arial']);\n    });\n\n    it('should parse a double quoted name with spaces', () => {\n      assert.deepEqual(parseFontFamily('\"Some font\"'), ['Some font']);\n    });\n\n    it('should parse a single quoted name with spaces', () => {\n      assert.deepEqual(parseFontFamily('\\'Some font\\''), ['Some font']);\n    });\n\n    it('should parse multiple names', () => {\n      assert.deepEqual(parseFontFamily('  Arial  , \"Some font\" , serif'), ['Arial', 'Some font', 'serif']);\n    });\n  });\n\n  class TreeSearch extends SDK.CSSPropertyParser.TreeWalker {\n    #found: CodeMirror.SyntaxNode|null = null;\n    #predicate: (node: CodeMirror.SyntaxNode) => boolean;\n\n    constructor(ast: SDK.CSSPropertyParser.SyntaxTree, predicate: (node: CodeMirror.SyntaxNode) => boolean) {\n      super(ast);\n      this.#predicate = predicate;\n    }\n\n    protected override enter({node}: SDK.CSSPropertyParser.SyntaxNodeRef): boolean {\n      if (this.#found) {\n        return false;\n      }\n\n      if (this.#predicate(node)) {\n        this.#found = this.#found ?? node;\n        return false;\n      }\n      return true;\n    }\n\n    static find(ast: SDK.CSSPropertyParser.SyntaxTree, predicate: (node: CodeMirror.SyntaxNode) => boolean):\n        CodeMirror.SyntaxNode|null {\n      return TreeSearch.walk(ast, predicate).#found;\n    }\n\n    static findAll(ast: SDK.CSSPropertyParser.SyntaxTree, predicate: (node: CodeMirror.SyntaxNode) => boolean):\n        CodeMirror.SyntaxNode[] {\n      const foundNodes: CodeMirror.SyntaxNode[] = [];\n      TreeSearch.walk(ast, (node: CodeMirror.SyntaxNode) => {\n        if (predicate(node)) {\n          foundNodes.push(node);\n        }\n\n        return false;\n      });\n      return foundNodes;\n    }\n  }\n\n  function matchSingleValue<T extends SDK.CSSPropertyParser.Match>(\n      name: string, value: string, matcher: SDK.CSSPropertyParser.Matcher<T>):\n      {ast: SDK.CSSPropertyParser.SyntaxTree|null, match: T|null, text: string} {\n    const ast = SDK.CSSPropertyParser.tokenizeDeclaration(name, value);\n    if (!ast) {\n      return {ast, match: null, text: value};\n    }\n\n    const matchedResult = SDK.CSSPropertyParser.BottomUpTreeMatching.walk(ast, [matcher]);\n    const matchedNode = TreeSearch.find(ast, n => matchedResult.getMatch(n) instanceof matcher.matchType);\n    const match = matchedNode && matchedResult.getMatch(matchedNode);\n\n    return {\n      ast,\n      match: match instanceof matcher.matchType ? match : null,\n      text: Printer.walk(ast).get(),\n    };\n  }\n\n  function tokenizeDeclaration(name: string, value: string): SDK.CSSPropertyParser.SyntaxTree {\n    const ast = SDK.CSSPropertyParser.tokenizeDeclaration(name, value);\n    assert.exists(ast, Printer.rule(`*{${name}: ${value};}`));\n    return ast;\n  }\n\n  describe('PropertyParser', () => {\n    it('correctly identifies spacing', () => {\n      const requiresSpace = (a: string, b: string) =>\n          SDK.CSSPropertyParser.requiresSpace([document.createTextNode(a)], [document.createTextNode(b)]);\n\n      assert.isTrue(requiresSpace('a', 'b'));\n      assert.isFalse(requiresSpace('', 'text'));\n      assert.isFalse(requiresSpace('(', 'text'));\n      assert.isFalse(requiresSpace(' ', 'text'));\n      assert.isFalse(requiresSpace('{', 'text'));\n      assert.isFalse(requiresSpace('}', 'text'));\n      assert.isFalse(requiresSpace(';', 'text'));\n      assert.isFalse(requiresSpace('text(', 'text'));\n      assert.isFalse(requiresSpace('text ', 'text'));\n      assert.isFalse(requiresSpace('text{', 'text'));\n      assert.isFalse(requiresSpace('text}', 'text'));\n      assert.isFalse(requiresSpace('text;', 'text'));\n\n      assert.isFalse(requiresSpace('text', ''));\n      assert.isFalse(requiresSpace('text', '('));\n      assert.isFalse(requiresSpace('text', ')'));\n      assert.isFalse(requiresSpace('text', ','));\n      assert.isFalse(requiresSpace('text', ':'));\n      assert.isFalse(requiresSpace('text', ' '));\n      assert.isFalse(requiresSpace('text', '*'));\n      assert.isFalse(requiresSpace('text', '{'));\n      assert.isFalse(requiresSpace('text', ';'));\n      assert.isFalse(requiresSpace('text', '( text'));\n      assert.isFalse(requiresSpace('text', ') text'));\n      assert.isFalse(requiresSpace('text', ', text'));\n      assert.isFalse(requiresSpace('text', ': text'));\n      assert.isFalse(requiresSpace('text', ' text'));\n      assert.isFalse(requiresSpace('text', '* text'));\n      assert.isFalse(requiresSpace('text', '{ text'));\n      assert.isFalse(requiresSpace('text', '; text'));\n\n      assert.isTrue(SDK.CSSPropertyParser.requiresSpace(\n          [document.createTextNode('text'), document.createElement('div')], [document.createTextNode('text')]));\n      assert.isTrue(SDK.CSSPropertyParser.requiresSpace(\n          [document.createTextNode('text')], [document.createElement('div'), document.createTextNode('text')]));\n      assert.isTrue(SDK.CSSPropertyParser.requiresSpace(\n          [document.createTextNode('text'), document.createElement('div')],\n          [document.createElement('div'), document.createTextNode('text')]));\n      assert.isFalse(SDK.CSSPropertyParser.requiresSpace(\n          [document.createTextNode('text'), document.createElement('div')], [document.createTextNode(' text')]));\n      assert.isFalse(SDK.CSSPropertyParser.requiresSpace(\n          [document.createTextNode('text')], [document.createElement('div'), document.createTextNode(' text')]));\n      assert.isFalse(SDK.CSSPropertyParser.requiresSpace(\n          [document.createTextNode('text'), document.createElement('div')],\n          [document.createElement('div'), document.createTextNode(' text')]));\n    });\n\n    it('parses comments', () => {\n      const property = '/* color: red */blue/* color: red */';\n      const ast = tokenizeDeclaration('--property', property);\n      const topNode = ast.tree.parent?.parent?.parent;\n      assert.exists(topNode);\n      assert.strictEqual(\n          Printer.walk(ast.subtree(topNode)).get(), ` StyleSheet: *{--property: /* color: red */blue/* color: red */;}\n| RuleSet: *{--property: /* color: red */blue/* color: red */;}\n|| UniversalSelector: *\n|| Block: {--property: /* color: red */blue/* color: red */;}\n||| {\n||| Declaration: --property: /* color: red */blue\n|||| VariableName: --property\n|||| :\n|||| Comment: /* color: red */\n|||| ValueName: blue\n||| Comment: /* color: red */\n||| ;\n||| }`);\n    });\n\n    it('correctly tokenizes invalid text', () => {\n      assert.isNull(SDK.CSSPropertyParser.tokenizeDeclaration('--p', ''));\n      assert.isNull(SDK.CSSPropertyParser.tokenizeDeclaration('--p', '/*'));\n      assert.isNull(SDK.CSSPropertyParser.tokenizeDeclaration('--p', '}'));\n    });\n\n    it('correctly parses property names', () => {\n      assert.strictEqual(tokenizeDeclaration('color /*comment*/', 'red')?.propertyName, 'color');\n      assert.strictEqual(tokenizeDeclaration('/*comment*/color/*comment*/', 'red')?.propertyName, 'color');\n      assert.strictEqual(tokenizeDeclaration(' /*comment*/color', 'red')?.propertyName, 'color');\n      assert.strictEqual(tokenizeDeclaration('co/*comment*/lor', 'red')?.propertyName, 'lor');\n      assert.isNull(SDK.CSSPropertyParser.tokenizeDeclaration('co:lor', 'red'));\n    });\n\n    class ComputedTextMatch implements SDK.CSSPropertyParser.Match {\n      node: CodeMirror.SyntaxNode;\n      constructor(readonly text: string, readonly constructedText: string) {\n        this.node = {} as CodeMirror.SyntaxNode;\n      }\n      computedText?(): string {\n        return this.constructedText;\n      }\n    }\n\n    it('computes ComputedText', () => {\n      const originalText = 'abcdefghijklmnopqrstuvwxyz';\n      // computed text:    '        +++--     ------  '\n      // Where + means a replacement, - means a deletion, i.e., computed texts are shorter than the corresponding\n      // original snippet.\n\n      const computedText = new SDK.CSSPropertyParser.ComputedText(originalText);\n\n      // 'abcdefghijklmnopqrstuvwxyz'\n      //    |----|\n      assert.strictEqual(computedText.get(2, 8), 'cdefgh');\n\n      computedText.push(new ComputedTextMatch('ijklm', '012'), originalText.indexOf('i'));\n      computedText.push(new ComputedTextMatch('stuvwx', ''), originalText.indexOf('s'));\n\n      // Range starts in original text before the first chunk, ends in original text before the first chunk\n      // 'abcdefghijklmnopqrstuvwxyz'\n      //    |----|\n      // 'abcdefgh012  nopqr      yz'\n      assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('h')), 'cdefg');\n\n      // Range ends in original text after the first chunk\n      // 'abcdefghijklmnopqrstuvwxyz'\n      //    |-----------|\n      // 'abcdefgh012  nopqr      yz'\n      assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('o')), 'cdefgh 012 n');\n\n      // Range ends in original text ends on the beginning of a chunk\n      // 'abcdefghijklmnopqrstuvwxyz'\n      //    |-----|\n      // 'abcdefgh012  nopqr      yz'\n      assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('i')), 'cdefgh');\n\n      // Range ends in original text ends on the end of a chunk\n      // 'abcdefghijklmnopqrstuvwxyz'\n      //    |----------|\n      // 'abcdefgh012  nopqr      yz'\n      assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('n')), 'cdefgh 012');\n\n      // Range ends in original text after the second chunk\n      // 'abcdefghijklmnopqrstuvwxyz'\n      //    |----------------------|\n      // 'abcdefgh012  nopqr      yz'\n      assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('z')), 'cdefgh 012 nopqr y');\n\n      // Range ends in original text after the second chunk containing no chunk\n      // 'abcdefghijklmnopqrstuvwxyz'\n      //                          ||\n      // 'abcdefgh012  nopqr      yz'\n      assert.strictEqual(computedText.get(originalText.indexOf('y'), originalText.indexOf('z') + 1), 'yz');\n\n      // Range ends in original text on the end of the second chunk\n      // 'abcdefghijklmnopqrstuvwxyz'\n      //    |---------------------|\n      // 'abcdefgh012  nopqr      yz'\n      assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('y')), 'cdefgh 012 nopqr');\n\n      // range starts in original text after the chunk\n      // 'abcdefghijklmnopqrstuvwxyz'\n      //                |-|\n      // 'abcdefgh012  nopqr      yz'\n      assert.strictEqual(computedText.get(originalText.indexOf('o'), originalText.indexOf('q')), 'op');\n\n      // range starts on the first chunk\n      // 'abcdefghijklmnopqrstuvwxyz'\n      //          |-------|\n      // 'abcdefgh012  nopqr      yz'\n      assert.strictEqual(computedText.get(originalText.indexOf('i'), originalText.indexOf('q')), '012 nop');\n\n      // range starts on the second chunk\n      // 'abcdefghijklmnopqrstuvwxyz'\n      //                    |------|\n      // 'abcdefgh012  nopqr      yz'\n      assert.strictEqual(computedText.get(originalText.indexOf('s'), originalText.indexOf('z')), 'y');\n\n      // range starts in the middle of a chunk\n      // 'abcdefghijklmnopqrstuvwxyz'\n      //           |-----|\n      // 'abcdefgh012  nopqr      yz'\n      assert.strictEqual(computedText.get(originalText.indexOf('j'), originalText.indexOf('p')), 'jklmno');\n\n      // range ends in the middle of a chunk\n      // 'abcdefghijklmnopqrstuvwxyz'\n      //       |-----|\n      // 'abcdefgh012  nopqr      yz'\n      assert.strictEqual(computedText.get(originalText.indexOf('f'), originalText.indexOf('l')), 'fghijk');\n    });\n\n    it('computes ComputedText with overlapping ranges', () => {\n      const originalText = 'abcdefghijklmnopqrstuvwxyz';\n      const computedText = new SDK.CSSPropertyParser.ComputedText(originalText);\n\n      const push = (from: string, to: string) => {\n        const text = originalText.substring(originalText.indexOf(from), originalText.indexOf(to) + 1);\n        assert.isAbove(text.length, 1);\n        // This means computed and authored test have identical length, but we're testing the computed text stitching\n        // sufficiently above.\n        computedText.push(new ComputedTextMatch(text, text.toUpperCase()), originalText.indexOf(text[0]));\n      };\n\n      // 'abcdefghijklmnopqrstuvwxyz'\n      //    |-----------|\n      //    |----|\n      //   ++++++++++++++++          (requested ranges)\n      //    +++++++++++++++\n      //   ++++++++\n      //   +++++++\n      //    +++++++\n      //    ++++++\n      computedText.clear();\n      push('c', 'o');\n      push('c', 'h');\n      assert.strictEqual(\n          computedText.get(originalText.indexOf('b'), originalText.indexOf('q') + 1), 'b CDEFGHIJKLMNO pq');\n      assert.strictEqual(\n          computedText.get(originalText.indexOf('c'), originalText.indexOf('q') + 1), 'CDEFGHIJKLMNO pq');\n      assert.strictEqual(computedText.get(originalText.indexOf('b'), originalText.indexOf('i') + 1), 'b CDEFGH i');\n      assert.strictEqual(computedText.get(originalText.indexOf('b'), originalText.indexOf('h') + 1), 'b CDEFGH');\n      assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('i') + 1), 'CDEFGH i');\n      assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('h') + 1), 'CDEFGH');\n\n      // 'abcdefghijklmnopqrstuvwxyz'\n      //    |-----------|\n      //         |----|\n      //   ++++++++++++++++\n      //         +++++++\n      //        ++++++++\n      //   ++++++++++++\n      //    +++++++++++\n      computedText.clear();\n      push('c', 'o');\n      push('h', 'm');\n      assert.strictEqual(\n          computedText.get(originalText.indexOf('b'), originalText.indexOf('q') + 1), 'b CDEFGHIJKLMNO pq');\n      assert.strictEqual(computedText.get(originalText.indexOf('h'), originalText.indexOf('n') + 1), 'HIJKLM n');\n      assert.strictEqual(computedText.get(originalText.indexOf('g'), originalText.indexOf('n') + 1), 'g HIJKLM n');\n      assert.strictEqual(computedText.get(originalText.indexOf('b'), originalText.indexOf('m') + 1), 'bcdefg HIJKLM');\n      assert.strictEqual(computedText.get(originalText.indexOf('d'), originalText.indexOf('m') + 1), 'defg HIJKLM');\n\n      // 'abcdefghijklmnopqrstuvwxyz'\n      //    |-----------|\n      //           |----|\n      //   ++++++++++++++++\n      //           ++++++\n      //          +++++++\n      computedText.clear();\n      // Swap the insertion order around to test sorting behavior.\n      push('j', 'o');\n      push('c', 'o');\n      assert.strictEqual(\n          computedText.get(originalText.indexOf('b'), originalText.indexOf('q') + 1), 'b CDEFGHIJKLMNO pq');\n      assert.strictEqual(computedText.get(originalText.indexOf('j'), originalText.indexOf('o') + 1), 'JKLMNO');\n      assert.strictEqual(computedText.get(originalText.indexOf('i'), originalText.indexOf('o') + 1), 'i JKLMNO');\n\n      // 'abcdefghijklmnopqrstuvwxyz'\n      //    |-----------|\n      //    |----| |--|\n      //   ++++++++++++++++\n      //    +++++++++++\n      //    ++++++++++++\n      //    +++++++\n      //    ++++++\n      //          +++++\n      //          ++++++\n      computedText.clear();\n      push('c', 'o');\n      push('c', 'h');\n      push('j', 'm');\n      assert.strictEqual(\n          computedText.get(originalText.indexOf('b'), originalText.indexOf('q') + 1), 'b CDEFGHIJKLMNO pq');\n      assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('n') + 1), 'CDEFGH i JKLM n');\n      assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('m') + 1), 'CDEFGH i JKLM');\n      assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('i') + 1), 'CDEFGH i');\n      assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('h') + 1), 'CDEFGH');\n      assert.strictEqual(computedText.get(originalText.indexOf('i'), originalText.indexOf('m') + 1), 'i JKLM');\n      assert.strictEqual(computedText.get(originalText.indexOf('i'), originalText.indexOf('n') + 1), 'i JKLM n');\n\n      // 'abcdefghijklmnopqrstuvwxyz';\n      //    |-----------|\n      //     |----| |--|\n      //   ++++++++++++++++\n      //    ++++++++++++\n      //    +++++++++++++\n      //     +++++++++++\n      //     ++++++++++++\n      // 'abcdefghijklmnopqrstuvwxyz';\n      //    +++++++\n      //    ++++++++\n      //     ++++++\n      //     +++++++\n      // 'abcdefghijklmnopqrstuvwxyz';\n      //           +++++\n      //            ++++\n      //           ++++++\n      //            +++++\n      // 'abcdefghijklmnopqrstuvwxyz';\n      computedText.clear();\n      // Swap the insertion order around to test sorting behavior.\n      push('k', 'n');\n      push('c', 'o');\n      push('d', 'i');\n      assert.strictEqual(\n          computedText.get(originalText.indexOf('b'), originalText.indexOf('q') + 1), 'b CDEFGHIJKLMNO pq');\n      assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('n') + 1), 'c DEFGHI j KLMN');\n      assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('o') + 1), 'CDEFGHIJKLMNO');\n      assert.strictEqual(computedText.get(originalText.indexOf('d'), originalText.indexOf('n') + 1), 'DEFGHI j KLMN');\n      assert.strictEqual(computedText.get(originalText.indexOf('d'), originalText.indexOf('o') + 1), 'DEFGHI j KLMN o');\n      assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('i') + 1), 'c DEFGHI');\n      assert.strictEqual(computedText.get(originalText.indexOf('c'), originalText.indexOf('j') + 1), 'c DEFGHI j');\n      assert.strictEqual(computedText.get(originalText.indexOf('d'), originalText.indexOf('i') + 1), 'DEFGHI');\n      assert.strictEqual(computedText.get(originalText.indexOf('d'), originalText.indexOf('j') + 1), 'DEFGHI j');\n      assert.strictEqual(computedText.get(originalText.indexOf('j'), originalText.indexOf('n') + 1), 'j KLMN');\n      assert.strictEqual(computedText.get(originalText.indexOf('k'), originalText.indexOf('n') + 1), 'KLMN');\n      assert.strictEqual(computedText.get(originalText.indexOf('j'), originalText.indexOf('o') + 1), 'j KLMN o');\n      assert.strictEqual(computedText.get(originalText.indexOf('k'), originalText.indexOf('o') + 1), 'KLMN o');\n    });\n\n    it('computes ComputedText with back-to-back chunks', () => {\n      const computedText = new SDK.CSSPropertyParser.ComputedText('abcdefgh');\n      computedText.push(new ComputedTextMatch('abcd', '01234'), 0);\n      computedText.push(new ComputedTextMatch('efgh', '56789'), 4);\n      assert.strictEqual(computedText.get(0, 8), '01234 56789');\n    });\n\n    it('correctly produces the computed text during matching', () => {\n      const ast = tokenizeDeclaration('--property', '1px /* red */ solid');\n      const width = ast.tree.getChild('NumberLiteral');\n      assert.exists(width);\n      const style = ast.tree.getChild('ValueName');\n      assert.exists(style);\n      const matching = SDK.CSSPropertyParser.BottomUpTreeMatching.walk(ast, []);\n      assert.strictEqual(matching.getComputedText(ast.tree), '--property: 1px  solid');\n      assert.strictEqual(matching.getComputedText(width), '1px');\n      assert.strictEqual(matching.getComputedText(style), 'solid');\n    });\n\n    it('retains tokenization in the computed text', () => {\n      const ast = tokenizeDeclaration('--property', 'dark/**/gray');\n      const matching = SDK.CSSPropertyParser.BottomUpTreeMatching.walk(ast, []);\n      assert.strictEqual(matching.getComputedText(ast.tree), '--property: dark gray');\n    });\n\n    it('parses vars correctly', () => {\n      for (const succeed\n               of ['var(--a)', 'var(--a, 123)', 'var(--a, calc(1+1))', 'var(--a, var(--b))', 'var(--a, var(--b, 123))',\n                   'var(--a, a b c)']) {\n        const {ast, match, text} =\n            matchSingleValue('width', succeed, new SDK.CSSPropertyParser.VariableMatcher(() => ''));\n\n        assert.exists(ast, succeed);\n        assert.exists(match, text);\n        assert.strictEqual(match.text, succeed);\n        assert.strictEqual(match.name, '--a');\n        const [name, ...fallback] = succeed.substring(4, succeed.length - 1).split(', ');\n        assert.strictEqual(match.name, name);\n        assert.strictEqual(match.fallback.map(n => ast.text(n)).join(' '), fallback.join(', '));\n      }\n      for (const fail of ['var', 'var(--a, 123, 123)', 'var(a)', 'var(--a']) {\n        const {match, text} = matchSingleValue('width', fail, new SDK.CSSPropertyParser.VariableMatcher(() => ''));\n\n        assert.isNull(match, text);\n      }\n    });\n  });\n});\n"]}