{"version":3,"file":"EventBreakpointsModel.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/EventBreakpointsModel.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\n\nimport {CategorizedBreakpoint, Category} from './CategorizedBreakpoint.js';\nimport {type EventListenerPausedDetailsAuxData} from './DebuggerModel.js';\nimport {SDKModel} from './SDKModel.js';\nimport {Capability, type Target} from './Target.js';\nimport {type SDKModelObserver, TargetManager} from './TargetManager.js';\n\nexport const enum InstrumentationNames {\n  BeforeBidderWorkletBiddingStart = 'beforeBidderWorkletBiddingStart',\n  BeforeBidderWorkletReportingStart = 'beforeBidderWorkletReportingStart',\n  BeforeSellerWorkletScoringStart = 'beforeSellerWorkletScoringStart',\n  BeforeSellerWorkletReportingStart = 'beforeSellerWorkletReportingStart',\n  SetTimeout = 'setTimeout',\n  ClearTimeout = 'clearTimeout',\n  SetInterval = 'setInterval',\n  ClearInterval = 'clearInterval',\n  SetTimeoutCallback = 'setTimeout.callback',\n  SetIntervalCallback = 'setInterval.callback',\n  ScriptFirstStatement = 'scriptFirstStatement',\n  ScriptBlockedByCSP = 'scriptBlockedByCSP',\n  SharedStorageWorkletScriptFirstStatement = 'sharedStorageWorkletScriptFirstStatement',\n  RequestAnimationFrame = 'requestAnimationFrame',\n  CancelAnimationFrame = 'cancelAnimationFrame',\n  RequestAnimationFrameCallback = 'requestAnimationFrame.callback',\n  WebGLErrorFired = 'webglErrorFired',\n  WebGLWarningFired = 'webglWarningFired',\n  ElementSetInnerHTML = 'Element.setInnerHTML',\n  CanvasContextCreated = 'canvasContextCreated',\n  GeolocationGetCurrentPosition = 'Geolocation.getCurrentPosition',\n  GeolocationWatchPosition = 'Geolocation.watchPosition',\n  NotificationRequestPermission = 'Notification.requestPermission',\n  DOMWindowClose = 'DOMWindow.close',\n  DocumentWrite = 'Document.write',\n  AudioContextCreated = 'audioContextCreated',\n  AudioContextClosed = 'audioContextClosed',\n  AudioContextResumed = 'audioContextResumed',\n  AudioContextSuspended = 'audioContextSuspended',\n}\n\nexport class EventBreakpointsModel extends SDKModel<void> {\n  readonly agent: ProtocolProxyApi.EventBreakpointsApi;\n\n  constructor(target: Target) {\n    super(target);\n    this.agent = target.eventBreakpointsAgent();\n  }\n}\n\n// This implementation (as opposed to similar class in DOMDebuggerModel) is for\n// instrumentation breakpoints in targets that run JS but do not have a DOM.\nclass EventListenerBreakpoint extends CategorizedBreakpoint {\n\n  override setEnabled(enabled: boolean): void {\n    if (this.enabled() === enabled) {\n      return;\n    }\n    super.setEnabled(enabled);\n    for (const model of TargetManager.instance().models(EventBreakpointsModel)) {\n      this.updateOnModel(model);\n    }\n  }\n\n  updateOnModel(model: EventBreakpointsModel): void {\n    if (this.enabled()) {\n      void model.agent.invoke_setInstrumentationBreakpoint({eventName: this.name});\n    } else {\n      void model.agent.invoke_removeInstrumentationBreakpoint({eventName: this.name});\n    }\n  }\n\n  static readonly instrumentationPrefix = 'instrumentation:';\n}\n\nlet eventBreakpointManagerInstance: EventBreakpointsManager;\n\nexport class EventBreakpointsManager implements SDKModelObserver<EventBreakpointsModel> {\n  readonly #eventListenerBreakpointsInternal: EventListenerBreakpoint[] = [];\n\n  constructor() {\n    this.createInstrumentationBreakpoints(Category.AuctionWorklet, [\n      InstrumentationNames.BeforeBidderWorkletBiddingStart,\n      InstrumentationNames.BeforeBidderWorkletReportingStart,\n      InstrumentationNames.BeforeSellerWorkletScoringStart,\n      InstrumentationNames.BeforeSellerWorkletReportingStart,\n    ]);\n    this.createInstrumentationBreakpoints(Category.Animation, [\n      InstrumentationNames.RequestAnimationFrame,\n      InstrumentationNames.CancelAnimationFrame,\n      InstrumentationNames.RequestAnimationFrameCallback,\n    ]);\n    this.createInstrumentationBreakpoints(Category.Canvas, [\n      InstrumentationNames.CanvasContextCreated,\n      InstrumentationNames.WebGLErrorFired,\n      InstrumentationNames.WebGLWarningFired,\n    ]);\n    this.createInstrumentationBreakpoints(Category.Geolocation, [\n      InstrumentationNames.GeolocationGetCurrentPosition,\n      InstrumentationNames.GeolocationWatchPosition,\n    ]);\n    this.createInstrumentationBreakpoints(Category.Notification, [\n      InstrumentationNames.NotificationRequestPermission,\n    ]);\n    this.createInstrumentationBreakpoints(Category.Parse, [\n      InstrumentationNames.ElementSetInnerHTML,\n      InstrumentationNames.DocumentWrite,\n    ]);\n    this.createInstrumentationBreakpoints(Category.Script, [\n      InstrumentationNames.ScriptFirstStatement,\n      InstrumentationNames.ScriptBlockedByCSP,\n    ]);\n    this.createInstrumentationBreakpoints(Category.SharedStorageWorklet, [\n      InstrumentationNames.SharedStorageWorkletScriptFirstStatement,\n    ]);\n    this.createInstrumentationBreakpoints(Category.Timer, [\n      InstrumentationNames.SetTimeout,\n      InstrumentationNames.ClearTimeout,\n      InstrumentationNames.SetInterval,\n      InstrumentationNames.ClearInterval,\n      InstrumentationNames.SetTimeoutCallback,\n      InstrumentationNames.SetIntervalCallback,\n    ]);\n    this.createInstrumentationBreakpoints(Category.Window, [\n      InstrumentationNames.DOMWindowClose,\n    ]);\n    this.createInstrumentationBreakpoints(Category.WebAudio, [\n      InstrumentationNames.AudioContextCreated,\n      InstrumentationNames.AudioContextClosed,\n      InstrumentationNames.AudioContextResumed,\n      InstrumentationNames.AudioContextSuspended,\n    ]);\n\n    TargetManager.instance().observeModels(EventBreakpointsModel, this);\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): EventBreakpointsManager {\n    const {forceNew} = opts;\n    if (!eventBreakpointManagerInstance || forceNew) {\n      eventBreakpointManagerInstance = new EventBreakpointsManager();\n    }\n\n    return eventBreakpointManagerInstance;\n  }\n\n  private createInstrumentationBreakpoints(category: Category, instrumentationNames: InstrumentationNames[]): void {\n    for (const instrumentationName of instrumentationNames) {\n      this.#eventListenerBreakpointsInternal.push(new EventListenerBreakpoint(category, instrumentationName));\n    }\n  }\n\n  eventListenerBreakpoints(): EventListenerBreakpoint[] {\n    return this.#eventListenerBreakpointsInternal.slice();\n  }\n\n  resolveEventListenerBreakpoint({eventName}: EventListenerPausedDetailsAuxData): EventListenerBreakpoint|null {\n    if (!eventName.startsWith(EventListenerBreakpoint.instrumentationPrefix)) {\n      return null;\n    }\n\n    const instrumentationName = eventName.substring(EventListenerBreakpoint.instrumentationPrefix.length);\n    return this.#eventListenerBreakpointsInternal.find(b => b.name === instrumentationName) || null;\n  }\n\n  modelAdded(eventBreakpointModel: EventBreakpointsModel): void {\n    for (const breakpoint of this.#eventListenerBreakpointsInternal) {\n      if (breakpoint.enabled()) {\n        breakpoint.updateOnModel(eventBreakpointModel);\n      }\n    }\n  }\n\n  modelRemoved(_eventBreakpointModel: EventBreakpointsModel): void {\n  }\n}\n\nSDKModel.register(EventBreakpointsModel, {capabilities: Capability.EventBreakpoints, autostart: false});\n"]}