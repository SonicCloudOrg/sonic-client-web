{"version":3,"file":"StorageKeyManager.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/StorageKeyManager.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAG7B,OAAO,EAAC,QAAQ,EAAC,MAAM,eAAe,CAAC;AACvC,OAAO,KAAK,MAAM,MAAM,qBAAqB,CAAC;AAG9C,MAAM,OAAO,iBAAkB,SAAQ,QAAoB;IACzD,uBAAuB,CAAS;IAChC,oBAAoB,CAAc;IAClC,YAAY,MAAc;QACxB,KAAK,CAAC,MAAM,CAAC,CAAC;QAEd,IAAI,CAAC,uBAAuB,GAAG,EAAE,CAAC;QAClC,IAAI,CAAC,oBAAoB,GAAG,IAAI,GAAG,EAAE,CAAC;IACxC,CAAC;IAED,iBAAiB,CAAC,WAAwB;QACxC,MAAM,cAAc,GAAG,IAAI,CAAC,oBAAoB,CAAC;QACjD,IAAI,CAAC,oBAAoB,GAAG,WAAW,CAAC;QAExC,KAAK,MAAM,UAAU,IAAI,cAAc,EAAE,CAAC;YACxC,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC;gBAC/C,IAAI,CAAC,wBAAwB,qDAA2B,UAAU,CAAC,CAAC;YACtE,CAAC;QACH,CAAC;QAED,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,oBAAoB,EAAE,CAAC;YACnD,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC;gBACpC,IAAI,CAAC,wBAAwB,iDAAyB,UAAU,CAAC,CAAC;YACpE,CAAC;QACH,CAAC;IACH,CAAC;IAED,WAAW;QACT,OAAO,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,CAAC;IACxC,CAAC;IAED,cAAc;QACZ,OAAO,IAAI,CAAC,uBAAuB,CAAC;IACtC,CAAC;IAED,iBAAiB,CAAC,UAAkB;QAClC,IAAI,CAAC,uBAAuB,GAAG,UAAU,CAAC;QAC1C,IAAI,CAAC,wBAAwB,6DAA+B;YAC1D,cAAc,EAAE,IAAI,CAAC,uBAAuB;SAC7C,CAAC,CAAC;IACL,CAAC;CACF;AAED,MAAM,UAAU,eAAe,CAAC,gBAAwB;IACtD,sEAAsE;IACtE,sDAAsD;IACtD,MAAM,UAAU,GAAG,gBAAgB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC/C,MAAM,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,CAAoC,CAAC,CAAC;IAC1G,MAAM,UAAU,GAAG,EAAC,MAAM,EAAE,UAAU,EAAE,IAAI,GAAG,EAA+B,EAAC,CAAC;IAChF,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,CAAC;QAC3C,UAAU,CAAC,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAwB,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;IACxG,CAAC;IACD,OAAO,UAAU,CAAC;AACpB,CAAC;AAiCD,6FAA6F;AAC7F,QAAQ,CAAC,QAAQ,CAAC,iBAAiB,EAAE,EAAC,YAAY,yBAAiB,EAAE,SAAS,EAAE,KAAK,EAAC,CAAC,CAAC","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {Capability, type Target} from './Target.js';\nimport {SDKModel} from './SDKModel.js';\nimport * as Common from '../common/common.js';\nimport type * as Platform from '../platform/platform.js';\n\nexport class StorageKeyManager extends SDKModel<EventTypes> {\n  #mainStorageKeyInternal: string;\n  #storageKeysInternal: Set<string>;\n  constructor(target: Target) {\n    super(target);\n\n    this.#mainStorageKeyInternal = '';\n    this.#storageKeysInternal = new Set();\n  }\n\n  updateStorageKeys(storageKeys: Set<string>): void {\n    const oldStorageKeys = this.#storageKeysInternal;\n    this.#storageKeysInternal = storageKeys;\n\n    for (const storageKey of oldStorageKeys) {\n      if (!this.#storageKeysInternal.has(storageKey)) {\n        this.dispatchEventToListeners(Events.StorageKeyRemoved, storageKey);\n      }\n    }\n\n    for (const storageKey of this.#storageKeysInternal) {\n      if (!oldStorageKeys.has(storageKey)) {\n        this.dispatchEventToListeners(Events.StorageKeyAdded, storageKey);\n      }\n    }\n  }\n\n  storageKeys(): string[] {\n    return [...this.#storageKeysInternal];\n  }\n\n  mainStorageKey(): string {\n    return this.#mainStorageKeyInternal;\n  }\n\n  setMainStorageKey(storageKey: string): void {\n    this.#mainStorageKeyInternal = storageKey;\n    this.dispatchEventToListeners(Events.MainStorageKeyChanged, {\n      mainStorageKey: this.#mainStorageKeyInternal,\n    });\n  }\n}\n\nexport function parseStorageKey(storageKeyString: string): StorageKey {\n  // Based on the canonical implementation of StorageKey::Deserialize in\n  // third_party/blink/common/storage_key/storage_key.cc\n  const components = storageKeyString.split('^');\n  const origin = Common.ParsedURL.ParsedURL.extractOrigin(components[0] as Platform.DevToolsPath.UrlString);\n  const storageKey = {origin, components: new Map<StorageKeyComponent, string>()};\n  for (let i = 1; i < components.length; ++i) {\n    storageKey.components.set(components[i].charAt(0) as StorageKeyComponent, components[i].substring(1));\n  }\n  return storageKey;\n}\n\nexport const enum StorageKeyComponent {\n  TOP_LEVEL_SITE = '0',\n  NONCE_HIGH = '1',\n  NONCE_LOW = '2',\n  ANCESTOR_CHAIN_BIT = '3',\n  TOP_LEVEL_SITE_OPAQUE_NONCE_HIGH = '4',\n  TOP_LEVEL_SITE_OPAQUE_NONCE_LOW = '5',\n  TOP_LEVEL_SITE_OPAQUE_NONCE_PRECURSOR = '6',\n}\n\nexport interface StorageKey {\n  origin: Platform.DevToolsPath.UrlString;\n  components: Map<StorageKeyComponent, string>;\n}\n\nexport const enum Events {\n  StorageKeyAdded = 'StorageKeyAdded',\n  StorageKeyRemoved = 'StorageKeyRemoved',\n  MainStorageKeyChanged = 'MainStorageKeyChanged',\n}\n\nexport interface MainStorageKeyChangedEvent {\n  mainStorageKey: string;\n}\n\nexport type EventTypes = {\n  [Events.StorageKeyAdded]: string,\n  [Events.StorageKeyRemoved]: string,\n  [Events.MainStorageKeyChanged]: MainStorageKeyChangedEvent,\n};\n\n// TODO(jarhar): this is the one of the two usages of Capability.None. Do something about it!\nSDKModel.register(StorageKeyManager, {capabilities: Capability.None, autostart: false});\n"]}