{"version":3,"file":"NetworkManager.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/NetworkManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the #name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as Common from '../common/common.js';\nimport {type Serializer} from '../common/Settings.js';\nimport * as Host from '../host/host.js';\nimport * as i18n from '../i18n/i18n.js';\nimport * as Platform from '../platform/platform.js';\n\nimport {Cookie} from './Cookie.js';\nimport {\n  type BlockedCookieWithReason,\n  Events as NetworkRequestEvents,\n  type ExtraRequestInfo,\n  type ExtraResponseInfo,\n  type IncludedCookieWithReason,\n  type NameValue,\n  NetworkRequest,\n  type WebBundleInfo,\n  type WebBundleInnerRequestInfo,\n} from './NetworkRequest.js';\nimport {SDKModel} from './SDKModel.js';\nimport {Capability, type Target} from './Target.js';\nimport {type SDKModelObserver, TargetManager} from './TargetManager.js';\n\nconst UIStrings = {\n  /**\n   *@description Explanation why no content is shown for WebSocket connection.\n   */\n  noContentForWebSocket: 'Content for WebSockets is currently not supported',\n  /**\n   *@description Explanation why no content is shown for redirect response.\n   */\n  noContentForRedirect: 'No content available because this request was redirected',\n  /**\n   *@description Explanation why no content is shown for preflight request.\n   */\n  noContentForPreflight: 'No content available for preflight request',\n  /**\n   *@description Text to indicate that network throttling is disabled\n   */\n  noThrottling: 'No throttling',\n  /**\n   *@description Text to indicate the network connectivity is offline\n   */\n  offline: 'Offline',\n  /**\n   *@description Text in Network Manager representing the \"3G\" throttling preset.\n   */\n  slowG: '3G',  // Named `slowG` for legacy reasons and because this value\n                // is serialized locally on the user's machine: if we\n                // change it we break their stored throttling settings.\n                // (See crrev.com/c/2947255)\n  /**\n   *@description Text in Network Manager representing the \"Slow 4G\" throttling preset\n   */\n  fastG: 'Slow 4G',  // Named `fastG` for legacy reasons and because this value\n                     // is serialized locally on the user's machine: if we\n                     // change it we break their stored throttling settings.\n                     // (See crrev.com/c/2947255)\n  /**\n   *@description Text in Network Manager representing the \"Fast 4G\" throttling preset\n   */\n  fast4G: 'Fast 4G',\n  /**\n   *@description Text in Network Manager\n   *@example {https://example.com} PH1\n   */\n  requestWasBlockedByDevtoolsS: 'Request was blocked by DevTools: \"{PH1}\"',\n  /**\n   *@description Message in Network Manager\n   *@example {XHR} PH1\n   *@example {GET} PH2\n   *@example {https://example.com} PH3\n   */\n  sFailedLoadingSS: '{PH1} failed loading: {PH2} \"{PH3}\".',\n  /**\n   *@description Message in Network Manager\n   *@example {XHR} PH1\n   *@example {GET} PH2\n   *@example {https://example.com} PH3\n   */\n  sFinishedLoadingSS: '{PH1} finished loading: {PH2} \"{PH3}\".',\n};\nconst str_ = i18n.i18n.registerUIStrings('core/sdk/NetworkManager.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(undefined, str_);\n\nconst requestToManagerMap = new WeakMap<NetworkRequest, NetworkManager>();\n\nconst CONNECTION_TYPES = new Map([\n  ['2g', Protocol.Network.ConnectionType.Cellular2g],\n  ['3g', Protocol.Network.ConnectionType.Cellular3g],\n  ['4g', Protocol.Network.ConnectionType.Cellular4g],\n  ['bluetooth', Protocol.Network.ConnectionType.Bluetooth],\n  ['wifi', Protocol.Network.ConnectionType.Wifi],\n  ['wimax', Protocol.Network.ConnectionType.Wimax],\n]);\n\nexport class NetworkManager extends SDKModel<EventTypes> {\n  readonly dispatcher: NetworkDispatcher;\n  readonly fetchDispatcher: FetchDispatcher;\n  readonly #networkAgent: ProtocolProxyApi.NetworkApi;\n  readonly #bypassServiceWorkerSetting: Common.Settings.Setting<boolean>;\n\n  constructor(target: Target) {\n    super(target);\n    this.dispatcher = new NetworkDispatcher(this);\n    this.fetchDispatcher = new FetchDispatcher(target.fetchAgent(), this);\n    this.#networkAgent = target.networkAgent();\n    target.registerNetworkDispatcher(this.dispatcher);\n    target.registerFetchDispatcher(this.fetchDispatcher);\n    if (Common.Settings.Settings.instance().moduleSetting('cache-disabled').get()) {\n      void this.#networkAgent.invoke_setCacheDisabled({cacheDisabled: true});\n    }\n\n    void this.#networkAgent.invoke_enable({maxPostDataSize: MAX_EAGER_POST_REQUEST_BODY_LENGTH});\n    void this.#networkAgent.invoke_setAttachDebugStack({enabled: true});\n\n    this.#bypassServiceWorkerSetting =\n        Common.Settings.Settings.instance().createSetting('bypass-service-worker', false);\n    if (this.#bypassServiceWorkerSetting.get()) {\n      this.bypassServiceWorkerChanged();\n    }\n    this.#bypassServiceWorkerSetting.addChangeListener(this.bypassServiceWorkerChanged, this);\n\n    Common.Settings.Settings.instance()\n        .moduleSetting('cache-disabled')\n        .addChangeListener(this.cacheDisabledSettingChanged, this);\n  }\n\n  static forRequest(request: NetworkRequest): NetworkManager|null {\n    return requestToManagerMap.get(request) || null;\n  }\n\n  static canReplayRequest(request: NetworkRequest): boolean {\n    return Boolean(requestToManagerMap.get(request)) && Boolean(request.backendRequestId()) && !request.isRedirect() &&\n        request.resourceType() === Common.ResourceType.resourceTypes.XHR;\n  }\n\n  static replayRequest(request: NetworkRequest): void {\n    const manager = requestToManagerMap.get(request);\n    const requestId = request.backendRequestId();\n    if (!manager || !requestId || request.isRedirect()) {\n      return;\n    }\n    void manager.#networkAgent.invoke_replayXHR({requestId});\n  }\n\n  static async searchInRequest(request: NetworkRequest, query: string, caseSensitive: boolean, isRegex: boolean):\n      Promise<TextUtils.ContentProvider.SearchMatch[]> {\n    const manager = NetworkManager.forRequest(request);\n    const requestId = request.backendRequestId();\n    if (!manager || !requestId || request.isRedirect()) {\n      return [];\n    }\n    const response = await manager.#networkAgent.invoke_searchInResponseBody(\n        {requestId, query: query, caseSensitive: caseSensitive, isRegex: isRegex});\n    return TextUtils.TextUtils.performSearchInSearchMatches(response.result || [], query, caseSensitive, isRegex);\n  }\n\n  static async requestContentData(request: NetworkRequest): Promise<TextUtils.ContentData.ContentDataOrError> {\n    if (request.resourceType() === Common.ResourceType.resourceTypes.WebSocket) {\n      return {error: i18nString(UIStrings.noContentForWebSocket)};\n    }\n    if (!request.finished) {\n      await request.once(NetworkRequestEvents.FinishedLoading);\n    }\n    if (request.isRedirect()) {\n      return {error: i18nString(UIStrings.noContentForRedirect)};\n    }\n    if (request.isPreflightRequest()) {\n      return {error: i18nString(UIStrings.noContentForPreflight)};\n    }\n    const manager = NetworkManager.forRequest(request);\n    if (!manager) {\n      return {error: 'No network manager for request'};\n    }\n    const requestId = request.backendRequestId();\n    if (!requestId) {\n      return {error: 'No backend request id for request'};\n    }\n    const response = await manager.#networkAgent.invoke_getResponseBody({requestId});\n    const error = response.getError();\n    if (error) {\n      return {error};\n    }\n    return new TextUtils.ContentData.ContentData(\n        response.body, response.base64Encoded, request.mimeType, request.charset() ?? undefined);\n  }\n\n  /**\n   * Returns the already received bytes for an in-flight request. After calling this method\n   * \"dataReceived\" events will contain additional data.\n   */\n  static async streamResponseBody(request: NetworkRequest): Promise<TextUtils.ContentData.ContentDataOrError> {\n    if (request.finished) {\n      return {error: 'Streaming the response body is only available for in-flight requests.'};\n    }\n    const manager = NetworkManager.forRequest(request);\n    if (!manager) {\n      return {error: 'No network manager for request'};\n    }\n    const requestId = request.backendRequestId();\n    if (!requestId) {\n      return {error: 'No backend request id for request'};\n    }\n    const response = await manager.#networkAgent.invoke_streamResourceContent({requestId});\n    const error = response.getError();\n    if (error) {\n      return {error};\n    }\n    // Wait for at least the `responseReceived event so we have accurate mimetype and charset.\n    await request.waitForResponseReceived();\n    return new TextUtils.ContentData.ContentData(\n        response.bufferedData, /* isBase64=*/ true, request.mimeType, request.charset() ?? undefined);\n  }\n\n  static async requestPostData(request: NetworkRequest): Promise<string|null> {\n    const manager = NetworkManager.forRequest(request);\n    if (!manager) {\n      console.error('No network manager for request');\n      return null;\n    }\n    const requestId = request.backendRequestId();\n    if (!requestId) {\n      console.error('No backend request id for request');\n      return null;\n    }\n    try {\n      const {postData} = await manager.#networkAgent.invoke_getRequestPostData({requestId});\n      return postData;\n    } catch (e) {\n      return e.message;\n    }\n  }\n\n  static connectionType(conditions: Conditions): Protocol.Network.ConnectionType {\n    if (!conditions.download && !conditions.upload) {\n      return Protocol.Network.ConnectionType.None;\n    }\n    try {\n      const title =\n          typeof conditions.title === 'function' ? conditions.title().toLowerCase() : conditions.title.toLowerCase();\n      for (const [name, protocolType] of CONNECTION_TYPES) {\n        if (title.includes(name)) {\n          return protocolType;\n        }\n      }\n    } catch {\n      // If the i18nKey for this condition has changed, calling conditions.title() will break, so in that case we reset to NONE\n      return Protocol.Network.ConnectionType.None;\n    }\n\n    return Protocol.Network.ConnectionType.Other;\n  }\n\n  static lowercaseHeaders(headers: Protocol.Network.Headers): Protocol.Network.Headers {\n    const newHeaders: Protocol.Network.Headers = {};\n    for (const headerName in headers) {\n      newHeaders[headerName.toLowerCase()] = headers[headerName];\n    }\n    return newHeaders;\n  }\n\n  requestForURL(url: Platform.DevToolsPath.UrlString): NetworkRequest|null {\n    return this.dispatcher.requestForURL(url);\n  }\n\n  requestForId(id: string): NetworkRequest|null {\n    return this.dispatcher.requestForId(id);\n  }\n\n  requestForLoaderId(loaderId: Protocol.Network.LoaderId): NetworkRequest|null {\n    return this.dispatcher.requestForLoaderId(loaderId);\n  }\n\n  private cacheDisabledSettingChanged({data: enabled}: Common.EventTarget.EventTargetEvent<boolean>): void {\n    void this.#networkAgent.invoke_setCacheDisabled({cacheDisabled: enabled});\n  }\n\n  override dispose(): void {\n    Common.Settings.Settings.instance()\n        .moduleSetting('cache-disabled')\n        .removeChangeListener(this.cacheDisabledSettingChanged, this);\n  }\n\n  private bypassServiceWorkerChanged(): void {\n    void this.#networkAgent.invoke_setBypassServiceWorker({bypass: this.#bypassServiceWorkerSetting.get()});\n  }\n\n  async getSecurityIsolationStatus(frameId: Protocol.Page.FrameId|\n                                   null): Promise<Protocol.Network.SecurityIsolationStatus|null> {\n    const result = await this.#networkAgent.invoke_getSecurityIsolationStatus({frameId: frameId ?? undefined});\n    if (result.getError()) {\n      return null;\n    }\n    return result.status;\n  }\n\n  async enableReportingApi(enable: boolean = true): Promise<Promise<Protocol.ProtocolResponseWithError>> {\n    return this.#networkAgent.invoke_enableReportingApi({enable});\n  }\n\n  async loadNetworkResource(\n      frameId: Protocol.Page.FrameId|null, url: Platform.DevToolsPath.UrlString,\n      options: Protocol.Network.LoadNetworkResourceOptions): Promise<Protocol.Network.LoadNetworkResourcePageResult> {\n    const result = await this.#networkAgent.invoke_loadNetworkResource({frameId: frameId ?? undefined, url, options});\n    if (result.getError()) {\n      throw new Error(result.getError());\n    }\n    return result.resource;\n  }\n\n  clearRequests(): void {\n    this.dispatcher.clearRequests();\n  }\n}\n\nexport enum Events {\n  RequestStarted = 'RequestStarted',\n  RequestUpdated = 'RequestUpdated',\n  RequestFinished = 'RequestFinished',\n  RequestUpdateDropped = 'RequestUpdateDropped',\n  ResponseReceived = 'ResponseReceived',\n  MessageGenerated = 'MessageGenerated',\n  RequestRedirected = 'RequestRedirected',\n  LoadingFinished = 'LoadingFinished',\n  ReportingApiReportAdded = 'ReportingApiReportAdded',\n  ReportingApiReportUpdated = 'ReportingApiReportUpdated',\n  ReportingApiEndpointsChangedForOrigin = 'ReportingApiEndpointsChangedForOrigin',\n}\n\nexport interface RequestStartedEvent {\n  request: NetworkRequest;\n  originalRequest: Protocol.Network.Request|null;\n}\n\nexport interface ResponseReceivedEvent {\n  request: NetworkRequest;\n  response: Protocol.Network.Response;\n}\n\nexport interface MessageGeneratedEvent {\n  message: Common.UIString.LocalizedString;\n  requestId: string;\n  warning: boolean;\n}\n\nexport type EventTypes = {\n  [Events.RequestStarted]: RequestStartedEvent,\n  [Events.RequestUpdated]: NetworkRequest,\n  [Events.RequestFinished]: NetworkRequest,\n  [Events.RequestUpdateDropped]: RequestUpdateDroppedEventData,\n  [Events.ResponseReceived]: ResponseReceivedEvent,\n  [Events.MessageGenerated]: MessageGeneratedEvent,\n  [Events.RequestRedirected]: NetworkRequest,\n  [Events.LoadingFinished]: NetworkRequest,\n  [Events.ReportingApiReportAdded]: Protocol.Network.ReportingApiReport,\n  [Events.ReportingApiReportUpdated]: Protocol.Network.ReportingApiReport,\n  [Events.ReportingApiEndpointsChangedForOrigin]: Protocol.Network.ReportingApiEndpointsChangedForOriginEvent,\n};\n\n/**\n * Define some built-in DevTools throttling presets.\n * Note that for the download, upload and RTT values we multiply them by adjustment factors to make DevTools' emulation more accurate.\n * @see https://docs.google.com/document/d/10lfVdS1iDWCRKQXPfbxEn4Or99D64mvNlugP1AQuFlE/edit for historical context.\n * @see https://crbug.com/342406608#comment10 for context around the addition of 4G presets in June 2024.\n */\n\nexport const NoThrottlingConditions: Conditions = {\n  title: i18nLazyString(UIStrings.noThrottling),\n  i18nTitleKey: UIStrings.noThrottling,\n  download: -1,\n  upload: -1,\n  latency: 0,\n};\n\nexport const OfflineConditions: Conditions = {\n  title: i18nLazyString(UIStrings.offline),\n  i18nTitleKey: UIStrings.offline,\n  download: 0,\n  upload: 0,\n  latency: 0,\n};\n\nexport const Slow3GConditions: Conditions = {\n  title: i18nLazyString(UIStrings.slowG),\n  i18nTitleKey: UIStrings.slowG,\n  // ~500Kbps down\n  download: 500 * 1000 / 8 * .8,\n  // ~500Kbps up\n  upload: 500 * 1000 / 8 * .8,\n  // 400ms RTT\n  latency: 400 * 5,\n};\n\n// Note for readers: this used to be called \"Fast 3G\" but it was renamed in May\n// 2024 to align with LH (crbug.com/342406608).\nexport const Slow4GConditions: Conditions = {\n  title: i18nLazyString(UIStrings.fastG),\n  i18nTitleKey: UIStrings.fastG,\n  // ~1.6 Mbps down\n  download: 1.6 * 1000 * 1000 / 8 * .9,\n  // ~0.75 Mbps up\n  upload: 750 * 1000 / 8 * .9,\n  // 150ms RTT\n  latency: 150 * 3.75,\n};\n\nexport const Fast4GConditions: Conditions = {\n  title: i18nLazyString(UIStrings.fast4G),\n  i18nTitleKey: UIStrings.fast4G,\n  // 9 Mbps down\n  download: 9 * 1000 * 1000 / 8 * .9,\n  // 1.5 Mbps up\n  upload: 1.5 * 1000 * 1000 / 8 * .9,\n  // 60ms RTT\n  latency: 60 * 2.75,\n};\n\nconst MAX_EAGER_POST_REQUEST_BODY_LENGTH = 64 * 1024;  // bytes\n\nexport class FetchDispatcher implements ProtocolProxyApi.FetchDispatcher {\n  readonly #fetchAgent: ProtocolProxyApi.FetchApi;\n  readonly #manager: NetworkManager;\n\n  constructor(agent: ProtocolProxyApi.FetchApi, manager: NetworkManager) {\n    this.#fetchAgent = agent;\n    this.#manager = manager;\n  }\n\n  requestPaused({requestId, request, resourceType, responseStatusCode, responseHeaders, networkId}:\n                    Protocol.Fetch.RequestPausedEvent): void {\n    const networkRequest = networkId ? this.#manager.requestForId(networkId) : null;\n    // If there was no 'Network.responseReceivedExtraInfo' event (e.g. for 'file:/' URLSs),\n    // populate 'originalResponseHeaders' with the headers from the 'Fetch.requestPaused' event.\n    if (networkRequest?.originalResponseHeaders.length === 0 && responseHeaders) {\n      networkRequest.originalResponseHeaders = responseHeaders;\n    }\n    void MultitargetNetworkManager.instance().requestIntercepted(new InterceptedRequest(\n        this.#fetchAgent, request, resourceType, requestId, networkRequest, responseStatusCode, responseHeaders));\n  }\n\n  authRequired({}: Protocol.Fetch.AuthRequiredEvent): void {\n  }\n}\n\nexport class NetworkDispatcher implements ProtocolProxyApi.NetworkDispatcher {\n  readonly #manager: NetworkManager;\n  #requestsById: Map<string, NetworkRequest>;\n  #requestsByURL: Map<Platform.DevToolsPath.UrlString, NetworkRequest>;\n  #requestsByLoaderId: Map<Protocol.Network.LoaderId, NetworkRequest>;\n  #requestIdToExtraInfoBuilder: Map<string, ExtraInfoBuilder>;\n  readonly #requestIdToTrustTokenEvent: Map<string, Protocol.Network.TrustTokenOperationDoneEvent>;\n  constructor(manager: NetworkManager) {\n    this.#manager = manager;\n    this.#requestsById = new Map();\n    this.#requestsByURL = new Map();\n    this.#requestsByLoaderId = new Map();\n    this.#requestIdToExtraInfoBuilder = new Map();\n    /**\n     * In case of an early abort or a cache hit, the Trust Token done event is\n     * reported before the request itself is created in `requestWillBeSent`.\n     * This causes the event to be lost as no `NetworkRequest` instance has been\n     * created yet.\n     * This map caches the events temporarliy and populates the NetworKRequest\n     * once it is created in `requestWillBeSent`.\n     */\n    this.#requestIdToTrustTokenEvent = new Map();\n\n    MultitargetNetworkManager.instance().addEventListener(\n        MultitargetNetworkManager.Events.RequestIntercepted, this.#markAsIntercepted.bind(this));\n  }\n\n  #markAsIntercepted(event: Common.EventTarget.EventTargetEvent<string>): void {\n    const request = this.requestForId(event.data);\n    if (request) {\n      request.setWasIntercepted(true);\n    }\n  }\n\n  private headersMapToHeadersArray(headersMap: Protocol.Network.Headers): NameValue[] {\n    const result = [];\n    for (const name in headersMap) {\n      const values = headersMap[name].split('\\n');\n      for (let i = 0; i < values.length; ++i) {\n        result.push({name: name, value: values[i]});\n      }\n    }\n    return result;\n  }\n\n  private updateNetworkRequestWithRequest(networkRequest: NetworkRequest, request: Protocol.Network.Request): void {\n    networkRequest.requestMethod = request.method;\n    networkRequest.setRequestHeaders(this.headersMapToHeadersArray(request.headers));\n    networkRequest.setRequestFormData(Boolean(request.hasPostData), request.postData || null);\n    networkRequest.setInitialPriority(request.initialPriority);\n    networkRequest.mixedContentType = request.mixedContentType || Protocol.Security.MixedContentType.None;\n    networkRequest.setReferrerPolicy(request.referrerPolicy);\n    networkRequest.setIsSameSite(request.isSameSite || false);\n  }\n\n  private updateNetworkRequestWithResponse(networkRequest: NetworkRequest, response: Protocol.Network.Response): void {\n    if (response.url && networkRequest.url() !== response.url) {\n      networkRequest.setUrl(response.url as Platform.DevToolsPath.UrlString);\n    }\n    networkRequest.mimeType = response.mimeType;\n    networkRequest.setCharset(response.charset);\n    if (!networkRequest.statusCode || networkRequest.wasIntercepted()) {\n      networkRequest.statusCode = response.status;\n    }\n    if (!networkRequest.statusText || networkRequest.wasIntercepted()) {\n      networkRequest.statusText = response.statusText;\n    }\n    if (!networkRequest.hasExtraResponseInfo() || networkRequest.wasIntercepted()) {\n      networkRequest.responseHeaders = this.headersMapToHeadersArray(response.headers);\n    }\n\n    if (response.encodedDataLength >= 0) {\n      networkRequest.setTransferSize(response.encodedDataLength);\n    }\n\n    if (response.requestHeaders && !networkRequest.hasExtraRequestInfo()) {\n      // TODO(http://crbug.com/1004979): Stop using response.requestHeaders and\n      //   response.requestHeadersText once shared workers\n      //   emit Network.*ExtraInfo events for their network #requests.\n      networkRequest.setRequestHeaders(this.headersMapToHeadersArray(response.requestHeaders));\n      networkRequest.setRequestHeadersText(response.requestHeadersText || '');\n    }\n\n    networkRequest.connectionReused = response.connectionReused;\n    networkRequest.connectionId = String(response.connectionId);\n    if (response.remoteIPAddress) {\n      networkRequest.setRemoteAddress(response.remoteIPAddress, response.remotePort || -1);\n    }\n\n    if (response.fromServiceWorker) {\n      networkRequest.fetchedViaServiceWorker = true;\n    }\n\n    if (response.fromDiskCache) {\n      networkRequest.setFromDiskCache();\n    }\n\n    if (response.fromPrefetchCache) {\n      networkRequest.setFromPrefetchCache();\n    }\n\n    if (response.fromEarlyHints) {\n      networkRequest.setFromEarlyHints();\n    }\n\n    if (response.cacheStorageCacheName) {\n      networkRequest.setResponseCacheStorageCacheName(response.cacheStorageCacheName);\n    }\n\n    if (response.serviceWorkerRouterInfo) {\n      networkRequest.serviceWorkerRouterInfo = response.serviceWorkerRouterInfo;\n    }\n\n    if (response.responseTime) {\n      networkRequest.setResponseRetrievalTime(new Date(response.responseTime));\n    }\n\n    networkRequest.timing = response.timing;\n\n    networkRequest.protocol = response.protocol || '';\n\n    networkRequest.alternateProtocolUsage = response.alternateProtocolUsage;\n\n    if (response.serviceWorkerResponseSource) {\n      networkRequest.setServiceWorkerResponseSource(response.serviceWorkerResponseSource);\n    }\n\n    networkRequest.setSecurityState(response.securityState);\n\n    if (response.securityDetails) {\n      networkRequest.setSecurityDetails(response.securityDetails);\n    }\n\n    const newResourceType = Common.ResourceType.ResourceType.fromMimeTypeOverride(networkRequest.mimeType);\n    if (newResourceType) {\n      networkRequest.setResourceType(newResourceType);\n    }\n    if (networkRequest.responseReceivedPromiseResolve) {\n      // Anyone interested in waiting for response headers being available?\n      networkRequest.responseReceivedPromiseResolve();\n    } else {\n      // If not, make sure no one will wait on it in the future.\n      networkRequest.responseReceivedPromise = Promise.resolve();\n    }\n  }\n\n  requestForId(id: string): NetworkRequest|null {\n    return this.#requestsById.get(id) || null;\n  }\n\n  requestForURL(url: Platform.DevToolsPath.UrlString): NetworkRequest|null {\n    return this.#requestsByURL.get(url) || null;\n  }\n\n  requestForLoaderId(loaderId: Protocol.Network.LoaderId): NetworkRequest|null {\n    return this.#requestsByLoaderId.get(loaderId) || null;\n  }\n\n  resourceChangedPriority({requestId, newPriority}: Protocol.Network.ResourceChangedPriorityEvent): void {\n    const networkRequest = this.#requestsById.get(requestId);\n    if (networkRequest) {\n      networkRequest.setPriority(newPriority);\n    }\n  }\n\n  signedExchangeReceived({requestId, info}: Protocol.Network.SignedExchangeReceivedEvent): void {\n    // While loading a signed exchange, a signedExchangeReceived event is sent\n    // between two requestWillBeSent events.\n    // 1. The first requestWillBeSent is sent while starting the navigation (or\n    //    prefetching).\n    // 2. This signedExchangeReceived event is sent when the browser detects the\n    //    signed exchange.\n    // 3. The second requestWillBeSent is sent with the generated redirect\n    //    response and a new redirected request which URL is the inner request\n    //    URL of the signed exchange.\n    let networkRequest = this.#requestsById.get(requestId);\n    // |requestId| is available only for navigation #requests. If the request was\n    // sent from a renderer process for prefetching, it is not available. In the\n    // case, need to fallback to look for the URL.\n    // TODO(crbug/841076): Sends the request ID of prefetching to the browser\n    // process and DevTools to find the matching request.\n    if (!networkRequest) {\n      networkRequest = this.#requestsByURL.get(info.outerResponse.url as Platform.DevToolsPath.UrlString);\n      if (!networkRequest) {\n        return;\n      }\n    }\n    networkRequest.setSignedExchangeInfo(info);\n    networkRequest.setResourceType(Common.ResourceType.resourceTypes.SignedExchange);\n\n    this.updateNetworkRequestWithResponse(networkRequest, info.outerResponse);\n    this.updateNetworkRequest(networkRequest);\n    this.#manager.dispatchEventToListeners(\n        Events.ResponseReceived, {request: networkRequest, response: info.outerResponse});\n  }\n\n  requestWillBeSent({\n    requestId,\n    loaderId,\n    documentURL,\n    request,\n    timestamp,\n    wallTime,\n    initiator,\n    redirectResponse,\n    type,\n    frameId,\n    hasUserGesture,\n  }: Protocol.Network.RequestWillBeSentEvent): void {\n    let networkRequest = this.#requestsById.get(requestId);\n    if (networkRequest) {\n      // FIXME: move this check to the backend.\n      if (!redirectResponse) {\n        return;\n      }\n      // If signedExchangeReceived event has already been sent for the request,\n      // ignores the internally generated |redirectResponse|. The\n      // |outerResponse| of SignedExchangeInfo was set to |networkRequest| in\n      // signedExchangeReceived().\n      if (!networkRequest.signedExchangeInfo()) {\n        this.responseReceived({\n          requestId,\n          loaderId,\n          timestamp,\n          type: type || Protocol.Network.ResourceType.Other,\n          response: redirectResponse,\n          hasExtraInfo: false,\n          frameId,\n        });\n      }\n      networkRequest = this.appendRedirect(requestId, timestamp, request.url as Platform.DevToolsPath.UrlString);\n      this.#manager.dispatchEventToListeners(Events.RequestRedirected, networkRequest);\n    } else {\n      networkRequest = NetworkRequest.create(\n          requestId, request.url as Platform.DevToolsPath.UrlString, documentURL as Platform.DevToolsPath.UrlString,\n          frameId ?? null, loaderId, initiator, hasUserGesture);\n      requestToManagerMap.set(networkRequest, this.#manager);\n    }\n    networkRequest.hasNetworkData = true;\n    this.updateNetworkRequestWithRequest(networkRequest, request);\n    networkRequest.setIssueTime(timestamp, wallTime);\n    networkRequest.setResourceType(\n        type ? Common.ResourceType.resourceTypes[type] : Common.ResourceType.resourceTypes.Other);\n    if (request.trustTokenParams) {\n      networkRequest.setTrustTokenParams(request.trustTokenParams);\n    }\n    const maybeTrustTokenEvent = this.#requestIdToTrustTokenEvent.get(requestId);\n    if (maybeTrustTokenEvent) {\n      networkRequest.setTrustTokenOperationDoneEvent(maybeTrustTokenEvent);\n      this.#requestIdToTrustTokenEvent.delete(requestId);\n    }\n\n    this.getExtraInfoBuilder(requestId).addRequest(networkRequest);\n\n    this.startNetworkRequest(networkRequest, request);\n  }\n\n  requestServedFromCache({requestId}: Protocol.Network.RequestServedFromCacheEvent): void {\n    const networkRequest = this.#requestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.setFromMemoryCache();\n  }\n\n  responseReceived({requestId, loaderId, timestamp, type, response, frameId}: Protocol.Network.ResponseReceivedEvent):\n      void {\n    const networkRequest = this.#requestsById.get(requestId);\n    const lowercaseHeaders = NetworkManager.lowercaseHeaders(response.headers);\n    if (!networkRequest) {\n      const lastModifiedHeader = lowercaseHeaders['last-modified'];\n      // We missed the requestWillBeSent.\n      const eventData: RequestUpdateDroppedEventData = {\n        url: response.url as Platform.DevToolsPath.UrlString,\n        frameId: frameId ?? null,\n        loaderId: loaderId,\n        resourceType: type,\n        mimeType: response.mimeType,\n        lastModified: lastModifiedHeader ? new Date(lastModifiedHeader) : null,\n      };\n      this.#manager.dispatchEventToListeners(Events.RequestUpdateDropped, eventData);\n      return;\n    }\n\n    networkRequest.responseReceivedTime = timestamp;\n    networkRequest.setResourceType(Common.ResourceType.resourceTypes[type]);\n\n    this.updateNetworkRequestWithResponse(networkRequest, response);\n\n    this.updateNetworkRequest(networkRequest);\n    this.#manager.dispatchEventToListeners(Events.ResponseReceived, {request: networkRequest, response});\n  }\n\n  dataReceived(event: Protocol.Network.DataReceivedEvent): void {\n    let networkRequest: NetworkRequest|null|undefined = this.#requestsById.get(event.requestId);\n    if (!networkRequest) {\n      networkRequest = this.maybeAdoptMainResourceRequest(event.requestId);\n    }\n    if (!networkRequest) {\n      return;\n    }\n    networkRequest.addDataReceivedEvent(event);\n    this.updateNetworkRequest(networkRequest);\n  }\n\n  loadingFinished({requestId, timestamp: finishTime, encodedDataLength}: Protocol.Network.LoadingFinishedEvent): void {\n    let networkRequest: NetworkRequest|null|undefined = this.#requestsById.get(requestId);\n    if (!networkRequest) {\n      networkRequest = this.maybeAdoptMainResourceRequest(requestId);\n    }\n    if (!networkRequest) {\n      return;\n    }\n    this.getExtraInfoBuilder(requestId).finished();\n    this.finishNetworkRequest(networkRequest, finishTime, encodedDataLength);\n    this.#manager.dispatchEventToListeners(Events.LoadingFinished, networkRequest);\n  }\n\n  loadingFailed({\n    requestId,\n    timestamp: time,\n    type: resourceType,\n    errorText: localizedDescription,\n    canceled,\n    blockedReason,\n    corsErrorStatus,\n  }: Protocol.Network.LoadingFailedEvent): void {\n    const networkRequest = this.#requestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.failed = true;\n    networkRequest.setResourceType(Common.ResourceType.resourceTypes[resourceType]);\n    networkRequest.canceled = Boolean(canceled);\n    if (blockedReason) {\n      networkRequest.setBlockedReason(blockedReason);\n      if (blockedReason === Protocol.Network.BlockedReason.Inspector) {\n        const message = i18nString(UIStrings.requestWasBlockedByDevtoolsS, {PH1: networkRequest.url()});\n        this.#manager.dispatchEventToListeners(\n            Events.MessageGenerated, {message: message, requestId: requestId, warning: true});\n      }\n    }\n    if (corsErrorStatus) {\n      networkRequest.setCorsErrorStatus(corsErrorStatus);\n    }\n    networkRequest.localizedFailDescription = localizedDescription;\n    this.getExtraInfoBuilder(requestId).finished();\n    this.finishNetworkRequest(networkRequest, time, -1);\n  }\n\n  webSocketCreated({requestId, url: requestURL, initiator}: Protocol.Network.WebSocketCreatedEvent): void {\n    const networkRequest =\n        NetworkRequest.createForWebSocket(requestId, requestURL as Platform.DevToolsPath.UrlString, initiator);\n    requestToManagerMap.set(networkRequest, this.#manager);\n    networkRequest.setResourceType(Common.ResourceType.resourceTypes.WebSocket);\n    this.startNetworkRequest(networkRequest, null);\n  }\n\n  webSocketWillSendHandshakeRequest({requestId, timestamp: time, wallTime, request}:\n                                        Protocol.Network.WebSocketWillSendHandshakeRequestEvent): void {\n    const networkRequest = this.#requestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.requestMethod = 'GET';\n    networkRequest.setRequestHeaders(this.headersMapToHeadersArray(request.headers));\n    networkRequest.setIssueTime(time, wallTime);\n\n    this.updateNetworkRequest(networkRequest);\n  }\n\n  webSocketHandshakeResponseReceived({requestId, timestamp: time, response}:\n                                         Protocol.Network.WebSocketHandshakeResponseReceivedEvent): void {\n    const networkRequest = this.#requestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.statusCode = response.status;\n    networkRequest.statusText = response.statusText;\n    networkRequest.responseHeaders = this.headersMapToHeadersArray(response.headers);\n    networkRequest.responseHeadersText = response.headersText || '';\n    if (response.requestHeaders) {\n      networkRequest.setRequestHeaders(this.headersMapToHeadersArray(response.requestHeaders));\n    }\n    if (response.requestHeadersText) {\n      networkRequest.setRequestHeadersText(response.requestHeadersText);\n    }\n    networkRequest.responseReceivedTime = time;\n    networkRequest.protocol = 'websocket';\n\n    this.updateNetworkRequest(networkRequest);\n  }\n\n  webSocketFrameReceived({requestId, timestamp: time, response}: Protocol.Network.WebSocketFrameReceivedEvent): void {\n    const networkRequest = this.#requestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.addProtocolFrame(response, time, false);\n    networkRequest.responseReceivedTime = time;\n\n    this.updateNetworkRequest(networkRequest);\n  }\n\n  webSocketFrameSent({requestId, timestamp: time, response}: Protocol.Network.WebSocketFrameSentEvent): void {\n    const networkRequest = this.#requestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.addProtocolFrame(response, time, true);\n    networkRequest.responseReceivedTime = time;\n\n    this.updateNetworkRequest(networkRequest);\n  }\n\n  webSocketFrameError({requestId, timestamp: time, errorMessage}: Protocol.Network.WebSocketFrameErrorEvent): void {\n    const networkRequest = this.#requestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.addProtocolFrameError(errorMessage, time);\n    networkRequest.responseReceivedTime = time;\n\n    this.updateNetworkRequest(networkRequest);\n  }\n\n  webSocketClosed({requestId, timestamp: time}: Protocol.Network.WebSocketClosedEvent): void {\n    const networkRequest = this.#requestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n    this.finishNetworkRequest(networkRequest, time, -1);\n  }\n\n  eventSourceMessageReceived({requestId, timestamp: time, eventName, eventId, data}:\n                                 Protocol.Network.EventSourceMessageReceivedEvent): void {\n    const networkRequest = this.#requestsById.get(requestId);\n    if (!networkRequest) {\n      return;\n    }\n    networkRequest.addEventSourceMessage(time, eventName, eventId, data);\n  }\n\n  requestIntercepted({}: Protocol.Network.RequestInterceptedEvent): void {\n  }\n\n  requestWillBeSentExtraInfo(\n      {requestId, associatedCookies, headers, clientSecurityState, connectTiming, siteHasCookieInOtherPartition}:\n          Protocol.Network.RequestWillBeSentExtraInfoEvent): void {\n    const blockedRequestCookies: BlockedCookieWithReason[] = [];\n    const includedRequestCookies: IncludedCookieWithReason[] = [];\n    for (const {blockedReasons, exemptionReason, cookie} of associatedCookies) {\n      if (blockedReasons.length === 0) {\n        includedRequestCookies.push({exemptionReason, cookie: Cookie.fromProtocolCookie(cookie)});\n      } else {\n        blockedRequestCookies.push({blockedReasons, cookie: Cookie.fromProtocolCookie(cookie)});\n      }\n    }\n    const extraRequestInfo = {\n      blockedRequestCookies,\n      includedRequestCookies,\n      requestHeaders: this.headersMapToHeadersArray(headers),\n      clientSecurityState,\n      connectTiming,\n      siteHasCookieInOtherPartition,\n    };\n    this.getExtraInfoBuilder(requestId).addRequestExtraInfo(extraRequestInfo);\n  }\n\n  responseReceivedEarlyHints({\n    requestId,\n    headers,\n  }: Protocol.Network.ResponseReceivedEarlyHintsEvent): void {\n    this.getExtraInfoBuilder(requestId).setEarlyHintsHeaders(this.headersMapToHeadersArray(headers));\n  }\n\n  responseReceivedExtraInfo({\n    requestId,\n    blockedCookies,\n    headers,\n    headersText,\n    resourceIPAddressSpace,\n    statusCode,\n    cookiePartitionKey,\n    cookiePartitionKeyOpaque,\n    exemptedCookies,\n  }: Protocol.Network.ResponseReceivedExtraInfoEvent): void {\n    const extraResponseInfo: ExtraResponseInfo = {\n      blockedResponseCookies:\n          blockedCookies.map(blockedCookie => ({\n                               blockedReasons: blockedCookie.blockedReasons,\n                               cookieLine: blockedCookie.cookieLine,\n                               cookie: blockedCookie.cookie ? Cookie.fromProtocolCookie(blockedCookie.cookie) : null,\n                             })),\n      responseHeaders: this.headersMapToHeadersArray(headers),\n      responseHeadersText: headersText,\n      resourceIPAddressSpace,\n      statusCode,\n      cookiePartitionKey,\n      cookiePartitionKeyOpaque,\n      exemptedResponseCookies: exemptedCookies?.map(exemptedCookie => ({\n                                                      cookie: Cookie.fromProtocolCookie(exemptedCookie.cookie),\n                                                      cookieLine: exemptedCookie.cookieLine,\n                                                      exemptionReason: exemptedCookie.exemptionReason,\n                                                    })),\n    };\n    this.getExtraInfoBuilder(requestId).addResponseExtraInfo(extraResponseInfo);\n  }\n\n  private getExtraInfoBuilder(requestId: string): ExtraInfoBuilder {\n    let builder: ExtraInfoBuilder;\n    if (!this.#requestIdToExtraInfoBuilder.has(requestId)) {\n      builder = new ExtraInfoBuilder();\n      this.#requestIdToExtraInfoBuilder.set(requestId, builder);\n    } else {\n      builder = (this.#requestIdToExtraInfoBuilder.get(requestId) as ExtraInfoBuilder);\n    }\n    return builder;\n  }\n\n  private appendRedirect(\n      requestId: Protocol.Network.RequestId, time: number,\n      redirectURL: Platform.DevToolsPath.UrlString): NetworkRequest {\n    const originalNetworkRequest = this.#requestsById.get(requestId);\n    if (!originalNetworkRequest) {\n      throw new Error(`Could not find original network request for ${requestId}`);\n    }\n    let redirectCount = 0;\n    for (let redirect = originalNetworkRequest.redirectSource(); redirect; redirect = redirect.redirectSource()) {\n      redirectCount++;\n    }\n\n    originalNetworkRequest.markAsRedirect(redirectCount);\n    this.finishNetworkRequest(originalNetworkRequest, time, -1);\n    const newNetworkRequest = NetworkRequest.create(\n        requestId, redirectURL, originalNetworkRequest.documentURL, originalNetworkRequest.frameId,\n        originalNetworkRequest.loaderId, originalNetworkRequest.initiator(),\n        originalNetworkRequest.hasUserGesture() ?? undefined);\n    requestToManagerMap.set(newNetworkRequest, this.#manager);\n    newNetworkRequest.setRedirectSource(originalNetworkRequest);\n    originalNetworkRequest.setRedirectDestination(newNetworkRequest);\n    return newNetworkRequest;\n  }\n\n  private maybeAdoptMainResourceRequest(requestId: string): NetworkRequest|null {\n    const request = MultitargetNetworkManager.instance().inflightMainResourceRequests.get(requestId);\n    if (!request) {\n      return null;\n    }\n    const oldDispatcher = (NetworkManager.forRequest(request) as NetworkManager).dispatcher;\n    oldDispatcher.#requestsById.delete(requestId);\n    oldDispatcher.#requestsByURL.delete(request.url());\n    const loaderId = request.loaderId;\n    if (loaderId) {\n      oldDispatcher.#requestsByLoaderId.delete(loaderId);\n    }\n    const builder = oldDispatcher.#requestIdToExtraInfoBuilder.get(requestId);\n    oldDispatcher.#requestIdToExtraInfoBuilder.delete(requestId);\n    this.#requestsById.set(requestId, request);\n    this.#requestsByURL.set(request.url(), request);\n    if (loaderId) {\n      this.#requestsByLoaderId.set(loaderId, request);\n    }\n    if (builder) {\n      this.#requestIdToExtraInfoBuilder.set(requestId, builder);\n    }\n    requestToManagerMap.set(request, this.#manager);\n    return request;\n  }\n\n  private startNetworkRequest(networkRequest: NetworkRequest, originalRequest: Protocol.Network.Request|null): void {\n    this.#requestsById.set(networkRequest.requestId(), networkRequest);\n    this.#requestsByURL.set(networkRequest.url(), networkRequest);\n    const loaderId = networkRequest.loaderId;\n    if (loaderId) {\n      this.#requestsByLoaderId.set(loaderId, networkRequest);\n    }\n    // The following relies on the fact that loaderIds and requestIds are\n    // globally unique and that the main request has them equal.\n    if (networkRequest.loaderId === networkRequest.requestId()) {\n      MultitargetNetworkManager.instance().inflightMainResourceRequests.set(networkRequest.requestId(), networkRequest);\n    }\n\n    this.#manager.dispatchEventToListeners(Events.RequestStarted, {request: networkRequest, originalRequest});\n  }\n\n  private updateNetworkRequest(networkRequest: NetworkRequest): void {\n    this.#manager.dispatchEventToListeners(Events.RequestUpdated, networkRequest);\n  }\n\n  private finishNetworkRequest(\n      networkRequest: NetworkRequest,\n      finishTime: number,\n      encodedDataLength: number,\n      ): void {\n    networkRequest.endTime = finishTime;\n    networkRequest.finished = true;\n    if (encodedDataLength >= 0) {\n      const redirectSource = networkRequest.redirectSource();\n      if (redirectSource && redirectSource.signedExchangeInfo()) {\n        networkRequest.setTransferSize(0);\n        redirectSource.setTransferSize(encodedDataLength);\n        this.updateNetworkRequest(redirectSource);\n      } else {\n        networkRequest.setTransferSize(encodedDataLength);\n      }\n    }\n    this.#manager.dispatchEventToListeners(Events.RequestFinished, networkRequest);\n    MultitargetNetworkManager.instance().inflightMainResourceRequests.delete(networkRequest.requestId());\n\n    if (Common.Settings.Settings.instance().moduleSetting('monitoring-xhr-enabled').get() &&\n        networkRequest.resourceType().category() === Common.ResourceType.resourceCategories.XHR) {\n      let message;\n      const failedToLoad = networkRequest.failed || networkRequest.hasErrorStatusCode();\n      if (failedToLoad) {\n        message = i18nString(\n            UIStrings.sFailedLoadingSS,\n            {PH1: networkRequest.resourceType().title(), PH2: networkRequest.requestMethod, PH3: networkRequest.url()});\n      } else {\n        message = i18nString(\n            UIStrings.sFinishedLoadingSS,\n            {PH1: networkRequest.resourceType().title(), PH2: networkRequest.requestMethod, PH3: networkRequest.url()});\n      }\n\n      this.#manager.dispatchEventToListeners(\n          Events.MessageGenerated, {message: message, requestId: networkRequest.requestId(), warning: false});\n    }\n  }\n\n  clearRequests(): void {\n    for (const [requestId, request] of this.#requestsById) {\n      if (request.finished) {\n        this.#requestsById.delete(requestId);\n      }\n    }\n    for (const [requestURL, request] of this.#requestsByURL) {\n      if (request.finished) {\n        this.#requestsByURL.delete(requestURL);\n      }\n    }\n    for (const [requestLoaderId, request] of this.#requestsByLoaderId) {\n      if (request.finished) {\n        this.#requestsByLoaderId.delete(requestLoaderId);\n      }\n    }\n    for (const [requestId, builder] of this.#requestIdToExtraInfoBuilder) {\n      if (builder.isFinished()) {\n        this.#requestIdToExtraInfoBuilder.delete(requestId);\n      }\n    }\n  }\n\n  webTransportCreated({transportId, url: requestURL, timestamp: time, initiator}:\n                          Protocol.Network.WebTransportCreatedEvent): void {\n    const networkRequest =\n        NetworkRequest.createForWebSocket(transportId, requestURL as Platform.DevToolsPath.UrlString, initiator);\n    networkRequest.hasNetworkData = true;\n    requestToManagerMap.set(networkRequest, this.#manager);\n    networkRequest.setResourceType(Common.ResourceType.resourceTypes.WebTransport);\n    networkRequest.setIssueTime(time, 0);\n    // TODO(yoichio): Add appropreate events to address abort cases.\n    this.startNetworkRequest(networkRequest, null);\n  }\n\n  webTransportConnectionEstablished({transportId, timestamp: time}:\n                                        Protocol.Network.WebTransportConnectionEstablishedEvent): void {\n    const networkRequest = this.#requestsById.get(transportId);\n    if (!networkRequest) {\n      return;\n    }\n\n    // This dummy deltas are needed to show this request as being\n    // downloaded(blue) given typical WebTransport is kept for a while.\n    // TODO(yoichio): Add appropreate events to fix these dummy datas.\n    // DNS lookup?\n    networkRequest.responseReceivedTime = time;\n    networkRequest.endTime = time + 0.001;\n    this.updateNetworkRequest(networkRequest);\n  }\n\n  webTransportClosed({transportId, timestamp: time}: Protocol.Network.WebTransportClosedEvent): void {\n    const networkRequest = this.#requestsById.get(transportId);\n    if (!networkRequest) {\n      return;\n    }\n\n    networkRequest.endTime = time;\n    this.finishNetworkRequest(networkRequest, time, 0);\n  }\n\n  trustTokenOperationDone(event: Protocol.Network.TrustTokenOperationDoneEvent): void {\n    const request = this.#requestsById.get(event.requestId);\n    if (!request) {\n      this.#requestIdToTrustTokenEvent.set(event.requestId, event);\n      return;\n    }\n    request.setTrustTokenOperationDoneEvent(event);\n  }\n\n  subresourceWebBundleMetadataReceived({requestId, urls}: Protocol.Network.SubresourceWebBundleMetadataReceivedEvent):\n      void {\n    const extraInfoBuilder = this.getExtraInfoBuilder(requestId);\n    extraInfoBuilder.setWebBundleInfo({resourceUrls: urls as Platform.DevToolsPath.UrlString[]});\n    const finalRequest = extraInfoBuilder.finalRequest();\n    if (finalRequest) {\n      this.updateNetworkRequest(finalRequest);\n    }\n  }\n\n  subresourceWebBundleMetadataError({requestId, errorMessage}: Protocol.Network.SubresourceWebBundleMetadataErrorEvent):\n      void {\n    const extraInfoBuilder = this.getExtraInfoBuilder(requestId);\n    extraInfoBuilder.setWebBundleInfo({errorMessage});\n    const finalRequest = extraInfoBuilder.finalRequest();\n    if (finalRequest) {\n      this.updateNetworkRequest(finalRequest);\n    }\n  }\n\n  subresourceWebBundleInnerResponseParsed({innerRequestId, bundleRequestId}:\n                                              Protocol.Network.SubresourceWebBundleInnerResponseParsedEvent): void {\n    const extraInfoBuilder = this.getExtraInfoBuilder(innerRequestId);\n    extraInfoBuilder.setWebBundleInnerRequestInfo({bundleRequestId});\n    const finalRequest = extraInfoBuilder.finalRequest();\n    if (finalRequest) {\n      this.updateNetworkRequest(finalRequest);\n    }\n  }\n\n  subresourceWebBundleInnerResponseError({innerRequestId, errorMessage}:\n                                             Protocol.Network.SubresourceWebBundleInnerResponseErrorEvent): void {\n    const extraInfoBuilder = this.getExtraInfoBuilder(innerRequestId);\n    extraInfoBuilder.setWebBundleInnerRequestInfo({errorMessage});\n    const finalRequest = extraInfoBuilder.finalRequest();\n    if (finalRequest) {\n      this.updateNetworkRequest(finalRequest);\n    }\n  }\n\n  reportingApiReportAdded(data: Protocol.Network.ReportingApiReportAddedEvent): void {\n    this.#manager.dispatchEventToListeners(Events.ReportingApiReportAdded, data.report);\n  }\n\n  reportingApiReportUpdated(data: Protocol.Network.ReportingApiReportUpdatedEvent): void {\n    this.#manager.dispatchEventToListeners(Events.ReportingApiReportUpdated, data.report);\n  }\n\n  reportingApiEndpointsChangedForOrigin(data: Protocol.Network.ReportingApiEndpointsChangedForOriginEvent): void {\n    this.#manager.dispatchEventToListeners(Events.ReportingApiEndpointsChangedForOrigin, data);\n  }\n\n  /**\n   * @deprecated\n   * This method is only kept for usage in a web test.\n   */\n  private createNetworkRequest(\n      requestId: Protocol.Network.RequestId, frameId: Protocol.Page.FrameId, loaderId: Protocol.Network.LoaderId,\n      url: string, documentURL: string, initiator: Protocol.Network.Initiator|null): NetworkRequest {\n    const request = NetworkRequest.create(\n        requestId, url as Platform.DevToolsPath.UrlString, documentURL as Platform.DevToolsPath.UrlString, frameId,\n        loaderId, initiator);\n    requestToManagerMap.set(request, this.#manager);\n    return request;\n  }\n}\n\nlet multiTargetNetworkManagerInstance: MultitargetNetworkManager|null;\n\nexport class MultitargetNetworkManager extends Common.ObjectWrapper.ObjectWrapper<MultitargetNetworkManager.EventTypes>\n    implements SDKModelObserver<NetworkManager> {\n  #userAgentOverrideInternal: string;\n  #userAgentMetadataOverride: Protocol.Emulation.UserAgentMetadata|null;\n  #customAcceptedEncodings: Protocol.Network.ContentEncoding[]|null;\n  readonly #networkAgents: Set<ProtocolProxyApi.NetworkApi>;\n  readonly #fetchAgents: Set<ProtocolProxyApi.FetchApi>;\n  readonly inflightMainResourceRequests: Map<string, NetworkRequest>;\n  #networkConditionsInternal: Conditions;\n  #updatingInterceptionPatternsPromise: Promise<void>|null;\n  readonly #blockingEnabledSetting: Common.Settings.Setting<boolean>;\n  readonly #blockedPatternsSetting: Common.Settings.Setting<BlockedPattern[]>;\n  #effectiveBlockedURLs: string[];\n  readonly #urlsForRequestInterceptor:\n      Platform.MapUtilities.Multimap<(arg0: InterceptedRequest) => Promise<void>, InterceptionPattern>;\n  #extraHeaders?: Protocol.Network.Headers;\n  #customUserAgent?: string;\n\n  constructor() {\n    super();\n    this.#userAgentOverrideInternal = '';\n    this.#userAgentMetadataOverride = null;\n    this.#customAcceptedEncodings = null;\n    this.#networkAgents = new Set();\n    this.#fetchAgents = new Set();\n    this.inflightMainResourceRequests = new Map();\n    this.#networkConditionsInternal = NoThrottlingConditions;\n    this.#updatingInterceptionPatternsPromise = null;\n\n    // TODO(allada) Remove these and merge it with request interception.\n    this.#blockingEnabledSetting = Common.Settings.Settings.instance().moduleSetting('request-blocking-enabled');\n    this.#blockedPatternsSetting = Common.Settings.Settings.instance().createSetting('network-blocked-patterns', []);\n    this.#effectiveBlockedURLs = [];\n    this.updateBlockedPatterns();\n\n    this.#urlsForRequestInterceptor = new Platform.MapUtilities.Multimap();\n\n    TargetManager.instance().observeModels(NetworkManager, this);\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n  } = {forceNew: null}): MultitargetNetworkManager {\n    const {forceNew} = opts;\n    if (!multiTargetNetworkManagerInstance || forceNew) {\n      multiTargetNetworkManagerInstance = new MultitargetNetworkManager();\n    }\n\n    return multiTargetNetworkManagerInstance;\n  }\n\n  static dispose(): void {\n    multiTargetNetworkManagerInstance = null;\n  }\n\n  static getChromeVersion(): string {\n    const chromeRegex = /(?:^|\\W)(?:Chrome|HeadlessChrome)\\/(\\S+)/;\n    const chromeMatch = navigator.userAgent.match(chromeRegex);\n    if (chromeMatch && chromeMatch.length > 1) {\n      return chromeMatch[1];\n    }\n    return '';\n  }\n\n  static patchUserAgentWithChromeVersion(uaString: string): string {\n    // Patches Chrome/ChrOS version from user #agent (\"1.2.3.4\" when user #agent is: \"Chrome/1.2.3.4\").\n    // Otherwise, ignore it. This assumes additional appVersions appear after the Chrome version.\n    const chromeVersion = MultitargetNetworkManager.getChromeVersion();\n    if (chromeVersion.length > 0) {\n      // \"1.2.3.4\" becomes \"1.0.100.0\"\n      const additionalAppVersion = chromeVersion.split('.', 1)[0] + '.0.100.0';\n      return Platform.StringUtilities.sprintf(uaString, chromeVersion, additionalAppVersion);\n    }\n    return uaString;\n  }\n\n  static patchUserAgentMetadataWithChromeVersion(userAgentMetadata: Protocol.Emulation.UserAgentMetadata): void {\n    // Patches Chrome/ChrOS version from user #agent metadata (\"1.2.3.4\" when user #agent is: \"Chrome/1.2.3.4\").\n    // Otherwise, ignore it. This assumes additional appVersions appear after the Chrome version.\n    if (!userAgentMetadata.brands) {\n      return;\n    }\n    const chromeVersion = MultitargetNetworkManager.getChromeVersion();\n    if (chromeVersion.length === 0) {\n      return;\n    }\n\n    const majorVersion = chromeVersion.split('.', 1)[0];\n    for (const brand of userAgentMetadata.brands) {\n      if (brand.version.includes('%s')) {\n        brand.version = Platform.StringUtilities.sprintf(brand.version, majorVersion);\n      }\n    }\n\n    if (userAgentMetadata.fullVersion) {\n      if (userAgentMetadata.fullVersion.includes('%s')) {\n        userAgentMetadata.fullVersion = Platform.StringUtilities.sprintf(userAgentMetadata.fullVersion, chromeVersion);\n      }\n    }\n  }\n\n  modelAdded(networkManager: NetworkManager): void {\n    const networkAgent = networkManager.target().networkAgent();\n    const fetchAgent = networkManager.target().fetchAgent();\n    if (this.#extraHeaders) {\n      void networkAgent.invoke_setExtraHTTPHeaders({headers: this.#extraHeaders});\n    }\n    if (this.currentUserAgent()) {\n      void networkAgent.invoke_setUserAgentOverride(\n          {userAgent: this.currentUserAgent(), userAgentMetadata: this.#userAgentMetadataOverride || undefined});\n    }\n    if (this.#effectiveBlockedURLs.length) {\n      void networkAgent.invoke_setBlockedURLs({urls: this.#effectiveBlockedURLs});\n    }\n    if (this.isIntercepting()) {\n      void fetchAgent.invoke_enable({patterns: this.#urlsForRequestInterceptor.valuesArray()});\n    }\n    if (this.#customAcceptedEncodings === null) {\n      void networkAgent.invoke_clearAcceptedEncodingsOverride();\n    } else {\n      void networkAgent.invoke_setAcceptedEncodings({encodings: this.#customAcceptedEncodings});\n    }\n    this.#networkAgents.add(networkAgent);\n    this.#fetchAgents.add(fetchAgent);\n    if (this.isThrottling()) {\n      this.updateNetworkConditions(networkAgent);\n    }\n  }\n\n  modelRemoved(networkManager: NetworkManager): void {\n    for (const entry of this.inflightMainResourceRequests) {\n      const manager = NetworkManager.forRequest((entry[1] as NetworkRequest));\n      if (manager !== networkManager) {\n        continue;\n      }\n      this.inflightMainResourceRequests.delete((entry[0] as string));\n    }\n    this.#networkAgents.delete(networkManager.target().networkAgent());\n    this.#fetchAgents.delete(networkManager.target().fetchAgent());\n  }\n\n  isThrottling(): boolean {\n    return this.#networkConditionsInternal.download >= 0 || this.#networkConditionsInternal.upload >= 0 ||\n        this.#networkConditionsInternal.latency > 0;\n  }\n\n  isOffline(): boolean {\n    return !this.#networkConditionsInternal.download && !this.#networkConditionsInternal.upload;\n  }\n\n  setNetworkConditions(conditions: Conditions): void {\n    this.#networkConditionsInternal = conditions;\n    for (const agent of this.#networkAgents) {\n      this.updateNetworkConditions(agent);\n    }\n    this.dispatchEventToListeners(MultitargetNetworkManager.Events.ConditionsChanged);\n  }\n\n  networkConditions(): Conditions {\n    return this.#networkConditionsInternal;\n  }\n\n  private updateNetworkConditions(networkAgent: ProtocolProxyApi.NetworkApi): void {\n    const conditions = this.#networkConditionsInternal;\n    if (!this.isThrottling()) {\n      void networkAgent.invoke_emulateNetworkConditions({\n        offline: false,\n        latency: 0,\n        downloadThroughput: 0,\n        uploadThroughput: 0,\n      });\n    } else {\n      void networkAgent.invoke_emulateNetworkConditions({\n        offline: this.isOffline(),\n        latency: conditions.latency,\n        downloadThroughput: conditions.download < 0 ? 0 : conditions.download,\n        uploadThroughput: conditions.upload < 0 ? 0 : conditions.upload,\n        packetLoss: (conditions.packetLoss ?? 0) < 0 ? 0 : conditions.packetLoss,\n        packetQueueLength: conditions.packetQueueLength,\n        packetReordering: conditions.packetReordering,\n        connectionType: NetworkManager.connectionType(conditions),\n      });\n    }\n  }\n\n  setExtraHTTPHeaders(headers: Protocol.Network.Headers): void {\n    this.#extraHeaders = headers;\n    for (const agent of this.#networkAgents) {\n      void agent.invoke_setExtraHTTPHeaders({headers: this.#extraHeaders});\n    }\n  }\n\n  currentUserAgent(): string {\n    return this.#customUserAgent ? this.#customUserAgent : this.#userAgentOverrideInternal;\n  }\n\n  private updateUserAgentOverride(): void {\n    const userAgent = this.currentUserAgent();\n    for (const agent of this.#networkAgents) {\n      void agent.invoke_setUserAgentOverride(\n          {userAgent: userAgent, userAgentMetadata: this.#userAgentMetadataOverride || undefined});\n    }\n  }\n\n  setUserAgentOverride(userAgent: string, userAgentMetadataOverride: Protocol.Emulation.UserAgentMetadata|null): void {\n    const uaChanged = (this.#userAgentOverrideInternal !== userAgent);\n    this.#userAgentOverrideInternal = userAgent;\n    if (!this.#customUserAgent) {\n      this.#userAgentMetadataOverride = userAgentMetadataOverride;\n      this.updateUserAgentOverride();\n    } else {\n      this.#userAgentMetadataOverride = null;\n    }\n\n    if (uaChanged) {\n      this.dispatchEventToListeners(MultitargetNetworkManager.Events.UserAgentChanged);\n    }\n  }\n\n  userAgentOverride(): string {\n    return this.#userAgentOverrideInternal;\n  }\n\n  setCustomUserAgentOverride(\n      userAgent: string, userAgentMetadataOverride: Protocol.Emulation.UserAgentMetadata|null = null): void {\n    this.#customUserAgent = userAgent;\n    this.#userAgentMetadataOverride = userAgentMetadataOverride;\n    this.updateUserAgentOverride();\n  }\n\n  setCustomAcceptedEncodingsOverride(acceptedEncodings: Protocol.Network.ContentEncoding[]): void {\n    this.#customAcceptedEncodings = acceptedEncodings;\n    this.updateAcceptedEncodingsOverride();\n    this.dispatchEventToListeners(MultitargetNetworkManager.Events.AcceptedEncodingsChanged);\n  }\n\n  clearCustomAcceptedEncodingsOverride(): void {\n    this.#customAcceptedEncodings = null;\n    this.updateAcceptedEncodingsOverride();\n    this.dispatchEventToListeners(MultitargetNetworkManager.Events.AcceptedEncodingsChanged);\n  }\n\n  isAcceptedEncodingOverrideSet(): boolean {\n    return this.#customAcceptedEncodings !== null;\n  }\n\n  private updateAcceptedEncodingsOverride(): void {\n    const customAcceptedEncodings = this.#customAcceptedEncodings;\n    for (const agent of this.#networkAgents) {\n      if (customAcceptedEncodings === null) {\n        void agent.invoke_clearAcceptedEncodingsOverride();\n      } else {\n        void agent.invoke_setAcceptedEncodings({encodings: customAcceptedEncodings});\n      }\n    }\n  }\n\n  // TODO(allada) Move all request blocking into interception and let view manage blocking.\n  blockedPatterns(): BlockedPattern[] {\n    return this.#blockedPatternsSetting.get().slice();\n  }\n\n  blockingEnabled(): boolean {\n    return this.#blockingEnabledSetting.get();\n  }\n\n  isBlocking(): boolean {\n    return Boolean(this.#effectiveBlockedURLs.length);\n  }\n\n  setBlockedPatterns(patterns: BlockedPattern[]): void {\n    this.#blockedPatternsSetting.set(patterns);\n    this.updateBlockedPatterns();\n    this.dispatchEventToListeners(MultitargetNetworkManager.Events.BlockedPatternsChanged);\n  }\n\n  setBlockingEnabled(enabled: boolean): void {\n    if (this.#blockingEnabledSetting.get() === enabled) {\n      return;\n    }\n    this.#blockingEnabledSetting.set(enabled);\n    this.updateBlockedPatterns();\n    this.dispatchEventToListeners(MultitargetNetworkManager.Events.BlockedPatternsChanged);\n  }\n\n  private updateBlockedPatterns(): void {\n    const urls = [];\n    if (this.#blockingEnabledSetting.get()) {\n      for (const pattern of this.#blockedPatternsSetting.get()) {\n        if (pattern.enabled) {\n          urls.push(pattern.url);\n        }\n      }\n    }\n\n    if (!urls.length && !this.#effectiveBlockedURLs.length) {\n      return;\n    }\n    this.#effectiveBlockedURLs = urls;\n    for (const agent of this.#networkAgents) {\n      void agent.invoke_setBlockedURLs({urls: this.#effectiveBlockedURLs});\n    }\n  }\n\n  isIntercepting(): boolean {\n    return Boolean(this.#urlsForRequestInterceptor.size);\n  }\n\n  setInterceptionHandlerForPatterns(\n      patterns: InterceptionPattern[], requestInterceptor: (arg0: InterceptedRequest) => Promise<void>): Promise<void> {\n    // Note: requestInterceptors may receive interception #requests for patterns they did not subscribe to.\n    this.#urlsForRequestInterceptor.deleteAll(requestInterceptor);\n    for (const newPattern of patterns) {\n      this.#urlsForRequestInterceptor.set(requestInterceptor, newPattern);\n    }\n    return this.updateInterceptionPatternsOnNextTick();\n  }\n\n  private updateInterceptionPatternsOnNextTick(): Promise<void> {\n    // This is used so we can register and unregister patterns in loops without sending lots of protocol messages.\n    if (!this.#updatingInterceptionPatternsPromise) {\n      this.#updatingInterceptionPatternsPromise = Promise.resolve().then(this.updateInterceptionPatterns.bind(this));\n    }\n    return this.#updatingInterceptionPatternsPromise;\n  }\n\n  private async updateInterceptionPatterns(): Promise<void> {\n    if (!Common.Settings.Settings.instance().moduleSetting('cache-disabled').get()) {\n      Common.Settings.Settings.instance().moduleSetting('cache-disabled').set(true);\n    }\n    this.#updatingInterceptionPatternsPromise = null;\n    const promises = ([] as Promise<unknown>[]);\n    for (const agent of this.#fetchAgents) {\n      promises.push(agent.invoke_enable({patterns: this.#urlsForRequestInterceptor.valuesArray()}));\n    }\n    this.dispatchEventToListeners(MultitargetNetworkManager.Events.InterceptorsChanged);\n    await Promise.all(promises);\n  }\n\n  async requestIntercepted(interceptedRequest: InterceptedRequest): Promise<void> {\n    for (const requestInterceptor of this.#urlsForRequestInterceptor.keysArray()) {\n      await requestInterceptor(interceptedRequest);\n      if (interceptedRequest.hasResponded() && interceptedRequest.networkRequest) {\n        this.dispatchEventToListeners(\n            MultitargetNetworkManager.Events.RequestIntercepted, interceptedRequest.networkRequest.requestId());\n        return;\n      }\n    }\n    if (!interceptedRequest.hasResponded()) {\n      interceptedRequest.continueRequestWithoutChange();\n    }\n  }\n\n  clearBrowserCache(): void {\n    for (const agent of this.#networkAgents) {\n      void agent.invoke_clearBrowserCache();\n    }\n  }\n\n  clearBrowserCookies(): void {\n    for (const agent of this.#networkAgents) {\n      void agent.invoke_clearBrowserCookies();\n    }\n  }\n\n  async getCertificate(origin: string): Promise<string[]> {\n    const target = TargetManager.instance().primaryPageTarget();\n    if (!target) {\n      return [];\n    }\n    const certificate = await target.networkAgent().invoke_getCertificate({origin});\n    if (!certificate) {\n      return [];\n    }\n    return certificate.tableNames;\n  }\n\n  async loadResource(url: Platform.DevToolsPath.UrlString): Promise<{\n    success: boolean,\n    content: string,\n    errorDescription: Host.ResourceLoader.LoadErrorDescription,\n  }> {\n    const headers: {\n      [x: string]: string,\n    } = {};\n\n    const currentUserAgent = this.currentUserAgent();\n    if (currentUserAgent) {\n      headers['User-Agent'] = currentUserAgent;\n    }\n\n    if (Common.Settings.Settings.instance().moduleSetting('cache-disabled').get()) {\n      headers['Cache-Control'] = 'no-cache';\n    }\n\n    const allowRemoteFilePaths =\n        Common.Settings.Settings.instance().moduleSetting('network.enable-remote-file-loading').get();\n\n    return new Promise(\n        resolve => Host.ResourceLoader.load(url, headers, (success, _responseHeaders, content, errorDescription) => {\n          resolve({success, content, errorDescription});\n        }, allowRemoteFilePaths));\n  }\n}\n\nexport namespace MultitargetNetworkManager {\n  export const enum Events {\n    BlockedPatternsChanged = 'BlockedPatternsChanged',\n    ConditionsChanged = 'ConditionsChanged',\n    UserAgentChanged = 'UserAgentChanged',\n    InterceptorsChanged = 'InterceptorsChanged',\n    AcceptedEncodingsChanged = 'AcceptedEncodingsChanged',\n    RequestIntercepted = 'RequestIntercepted',\n    RequestFulfilled = 'RequestFulfilled',\n  }\n\n  export type EventTypes = {\n    [Events.BlockedPatternsChanged]: void,\n    [Events.ConditionsChanged]: void,\n    [Events.UserAgentChanged]: void,\n    [Events.InterceptorsChanged]: void,\n    [Events.AcceptedEncodingsChanged]: void,\n    [Events.RequestIntercepted]: string,\n    [Events.RequestFulfilled]: Platform.DevToolsPath.UrlString,\n  };\n}\n\nexport class InterceptedRequest {\n  readonly #fetchAgent: ProtocolProxyApi.FetchApi;\n  #hasRespondedInternal: boolean;\n  request: Protocol.Network.Request;\n  resourceType: Protocol.Network.ResourceType;\n  responseStatusCode: number|undefined;\n  responseHeaders: Protocol.Fetch.HeaderEntry[]|undefined;\n  requestId: Protocol.Fetch.RequestId;\n  networkRequest: NetworkRequest|null;\n\n  constructor(\n      fetchAgent: ProtocolProxyApi.FetchApi,\n      request: Protocol.Network.Request,\n      resourceType: Protocol.Network.ResourceType,\n      requestId: Protocol.Fetch.RequestId,\n      networkRequest: NetworkRequest|null,\n      responseStatusCode?: number,\n      responseHeaders?: Protocol.Fetch.HeaderEntry[],\n  ) {\n    this.#fetchAgent = fetchAgent;\n    this.#hasRespondedInternal = false;\n    this.request = request;\n    this.resourceType = resourceType;\n    this.responseStatusCode = responseStatusCode;\n    this.responseHeaders = responseHeaders;\n    this.requestId = requestId;\n    this.networkRequest = networkRequest;\n  }\n\n  hasResponded(): boolean {\n    return this.#hasRespondedInternal;\n  }\n\n  static mergeSetCookieHeaders(\n      originalSetCookieHeaders: Protocol.Fetch.HeaderEntry[],\n      setCookieHeadersFromOverrides: Protocol.Fetch.HeaderEntry[]): Protocol.Fetch.HeaderEntry[] {\n    // Generates a map containing the `set-cookie` headers. Valid `set-cookie`\n    // headers are stored by the cookie name. Malformed `set-cookie` headers are\n    // stored by the whole header value. Duplicates are allowed.\n    const generateHeaderMap = (headers: Protocol.Fetch.HeaderEntry[]): Map<string, string[]> => {\n      const result = new Map<string, string[]>();\n      for (const header of headers) {\n        // The regex matches cookie headers of the form '<header-name>=<header-value>'.\n        // <header-name> is a token as defined in https://www.rfc-editor.org/rfc/rfc9110.html#name-tokens.\n        // The shape of <header-value> is not being validated at all here.\n        const match = header.value.match(/^([a-zA-Z0-9!#$%&'*+.^_`|~-]+=)(.*)$/);\n        if (match) {\n          if (result.has(match[1])) {\n            result.get(match[1])?.push(header.value);\n          } else {\n            result.set(match[1], [header.value]);\n          }\n        } else {\n          if (result.has(header.value)) {\n            result.get(header.value)?.push(header.value);\n          } else {\n            result.set(header.value, [header.value]);\n          }\n        }\n      }\n      return result;\n    };\n\n    const originalHeadersMap = generateHeaderMap(originalSetCookieHeaders);\n    const overridesHeaderMap = generateHeaderMap(setCookieHeadersFromOverrides);\n\n    // Iterate over original headers. If the same key is found among the\n    // overrides, use those instead.\n    const mergedHeaders: Protocol.Fetch.HeaderEntry[] = [];\n    for (const [key, headerValues] of originalHeadersMap) {\n      if (overridesHeaderMap.has(key)) {\n        for (const headerValue of overridesHeaderMap.get(key) || []) {\n          mergedHeaders.push({name: 'set-cookie', value: headerValue});\n        }\n      } else {\n        for (const headerValue of headerValues) {\n          mergedHeaders.push({name: 'set-cookie', value: headerValue});\n        }\n      }\n    }\n\n    // Finally add all overrides which have not been added yet.\n    for (const [key, headerValues] of overridesHeaderMap) {\n      if (originalHeadersMap.has(key)) {\n        continue;\n      }\n      for (const headerValue of headerValues) {\n        mergedHeaders.push({name: 'set-cookie', value: headerValue});\n      }\n    }\n    return mergedHeaders;\n  }\n\n  async continueRequestWithContent(\n      contentBlob: Blob, encoded: boolean, responseHeaders: Protocol.Fetch.HeaderEntry[],\n      isBodyOverridden: boolean): Promise<void> {\n    this.#hasRespondedInternal = true;\n    const body = encoded ? await contentBlob.text() : await Common.Base64.encode(contentBlob).catch(err => {\n      console.error(err);\n      return '';\n    });\n    const responseCode = isBodyOverridden ? 200 : (this.responseStatusCode || 200);\n\n    if (this.networkRequest) {\n      const originalSetCookieHeaders =\n          this.networkRequest?.originalResponseHeaders.filter(header => header.name === 'set-cookie') || [];\n      const setCookieHeadersFromOverrides = responseHeaders.filter(header => header.name === 'set-cookie');\n      this.networkRequest.setCookieHeaders =\n          InterceptedRequest.mergeSetCookieHeaders(originalSetCookieHeaders, setCookieHeadersFromOverrides);\n      this.networkRequest.hasOverriddenContent = isBodyOverridden;\n    }\n\n    void this.#fetchAgent.invoke_fulfillRequest({requestId: this.requestId, responseCode, body, responseHeaders});\n    MultitargetNetworkManager.instance().dispatchEventToListeners(\n        MultitargetNetworkManager.Events.RequestFulfilled, this.request.url as Platform.DevToolsPath.UrlString);\n  }\n\n  continueRequestWithoutChange(): void {\n    console.assert(!this.#hasRespondedInternal);\n    this.#hasRespondedInternal = true;\n    void this.#fetchAgent.invoke_continueRequest({requestId: this.requestId});\n  }\n\n  continueRequestWithError(errorReason: Protocol.Network.ErrorReason): void {\n    console.assert(!this.#hasRespondedInternal);\n    this.#hasRespondedInternal = true;\n    void this.#fetchAgent.invoke_failRequest({requestId: this.requestId, errorReason});\n  }\n\n  async responseBody(): Promise<TextUtils.ContentData.ContentDataOrError> {\n    const response = await this.#fetchAgent.invoke_getResponseBody({requestId: this.requestId});\n    const error = response.getError();\n    if (error) {\n      return {error};\n    }\n\n    const {mimeType, charset} = this.getMimeTypeAndCharset();\n    return new TextUtils.ContentData.ContentData(\n        response.body, response.base64Encoded, mimeType ?? 'application/octet-stream', charset ?? undefined);\n  }\n\n  isRedirect(): boolean {\n    return this.responseStatusCode !== undefined && this.responseStatusCode >= 300 && this.responseStatusCode < 400;\n  }\n\n  /**\n   * Tries to determine the MIME type and charset for this intercepted request.\n   * Looks at the interecepted response headers first (for Content-Type header), then\n   * checks the `NetworkRequest` if we have one.\n   */\n  getMimeTypeAndCharset(): {mimeType: string|null, charset: string|null} {\n    for (const header of this.responseHeaders ?? []) {\n      if (header.name.toLowerCase() === 'content-type') {\n        return Platform.MimeType.parseContentType(header.value);\n      }\n    }\n\n    const mimeType = this.networkRequest?.mimeType ?? null;\n    const charset = this.networkRequest?.charset() ?? null;\n    return {mimeType, charset};\n  }\n}\n\n/**\n * Helper class to match #requests created from requestWillBeSent with\n * requestWillBeSentExtraInfo and responseReceivedExtraInfo when they have the\n * same requestId due to redirects.\n */\nclass ExtraInfoBuilder {\n  readonly #requests: NetworkRequest[];\n  #requestExtraInfos: (ExtraRequestInfo|null)[];\n  #responseExtraInfos: (ExtraResponseInfo|null)[];\n  #responseEarlyHintsHeaders: NameValue[];\n  #finishedInternal: boolean;\n  #webBundleInfo: WebBundleInfo|null;\n  #webBundleInnerRequestInfo: WebBundleInnerRequestInfo|null;\n\n  constructor() {\n    this.#requests = [];\n    this.#requestExtraInfos = [];\n    this.#responseEarlyHintsHeaders = [];\n    this.#responseExtraInfos = [];\n    this.#finishedInternal = false;\n    this.#webBundleInfo = null;\n    this.#webBundleInnerRequestInfo = null;\n  }\n\n  addRequest(req: NetworkRequest): void {\n    this.#requests.push(req);\n    this.sync(this.#requests.length - 1);\n  }\n\n  addRequestExtraInfo(info: ExtraRequestInfo): void {\n    this.#requestExtraInfos.push(info);\n    this.sync(this.#requestExtraInfos.length - 1);\n  }\n\n  addResponseExtraInfo(info: ExtraResponseInfo): void {\n    this.#responseExtraInfos.push(info);\n    this.sync(this.#responseExtraInfos.length - 1);\n  }\n\n  setEarlyHintsHeaders(earlyHintsHeaders: NameValue[]): void {\n    this.#responseEarlyHintsHeaders = earlyHintsHeaders;\n    this.updateFinalRequest();\n  }\n\n  setWebBundleInfo(info: WebBundleInfo): void {\n    this.#webBundleInfo = info;\n    this.updateFinalRequest();\n  }\n\n  setWebBundleInnerRequestInfo(info: WebBundleInnerRequestInfo): void {\n    this.#webBundleInnerRequestInfo = info;\n    this.updateFinalRequest();\n  }\n\n  finished(): void {\n    this.#finishedInternal = true;\n    this.updateFinalRequest();\n  }\n\n  isFinished(): boolean {\n    return this.#finishedInternal;\n  }\n\n  private sync(index: number): void {\n    const req = this.#requests[index];\n    if (!req) {\n      return;\n    }\n\n    const requestExtraInfo = this.#requestExtraInfos[index];\n    if (requestExtraInfo) {\n      req.addExtraRequestInfo(requestExtraInfo);\n      this.#requestExtraInfos[index] = null;\n    }\n\n    const responseExtraInfo = this.#responseExtraInfos[index];\n    if (responseExtraInfo) {\n      req.addExtraResponseInfo(responseExtraInfo);\n      this.#responseExtraInfos[index] = null;\n    }\n  }\n\n  finalRequest(): NetworkRequest|null {\n    if (!this.#finishedInternal) {\n      return null;\n    }\n    return this.#requests[this.#requests.length - 1] || null;\n  }\n\n  private updateFinalRequest(): void {\n    if (!this.#finishedInternal) {\n      return;\n    }\n    const finalRequest = this.finalRequest();\n    finalRequest?.setWebBundleInfo(this.#webBundleInfo);\n    finalRequest?.setWebBundleInnerRequestInfo(this.#webBundleInnerRequestInfo);\n    finalRequest?.setEarlyHintsHeaders(this.#responseEarlyHintsHeaders);\n  }\n}\n\nSDKModel.register(NetworkManager, {capabilities: Capability.Network, autostart: true});\n\nexport class ConditionsSerializer implements Serializer<Conditions, Conditions> {\n  stringify(value: unknown): string {\n    const conditions = value as Conditions;\n    return JSON.stringify({\n      ...conditions,\n      title: typeof conditions.title === 'function' ? conditions.title() : conditions.title,\n    });\n  }\n\n  parse(serialized: string): Conditions {\n    const parsed = JSON.parse(serialized);\n    return {\n      ...parsed,\n      // eslint-disable-next-line rulesdir/l10n_i18nString_call_only_with_uistrings\n      title: parsed.i18nTitleKey ? i18nLazyString(parsed.i18nTitleKey) : parsed.title,\n    };\n  }\n}\n\nexport function networkConditionsEqual(first: Conditions, second: Conditions): boolean {\n  // Caution: titles might be different function instances, which produce\n  // the same value.\n  // We prefer to use the i18nTitleKey to prevent against locale changes or\n  // UIString changes that might change the value vs what the user has stored\n  // locally.\n  const firstTitle = first.i18nTitleKey || (typeof first.title === 'function' ? first.title() : first.title);\n  const secondTitle = second.i18nTitleKey || (typeof second.title === 'function' ? second.title() : second.title);\n  return second.download === first.download && second.upload === first.upload && second.latency === first.latency &&\n      first.packetLoss === second.packetLoss && first.packetQueueLength === second.packetQueueLength &&\n      first.packetReordering === second.packetReordering && secondTitle === firstTitle;\n}\n\nexport interface Conditions {\n  download: number;\n  upload: number;\n  latency: number;\n  packetLoss?: number;\n  packetQueueLength?: number;\n  packetReordering?: boolean;\n  // TODO(crbug.com/1219425): In the future, it might be worthwhile to\n  // consider avoiding mixing up presentation state (e.g.: displayed\n  // titles) with behavioral state (e.g.: the throttling amounts). In\n  // this particular case, the title (along with other properties)\n  // doubles as both part of group of fields which (loosely) uniquely\n  // identify instances, as well as the literal string displayed in the\n  // UI, which leads to complications around persistance.\n  title: string|(() => string);\n  // Instances may be serialized to local storage, so localized titles\n  // should not be irrecoverably baked, just in case the string changes\n  // (or the user switches locales).\n  i18nTitleKey?: string;\n}\n\nexport interface BlockedPattern {\n  url: string;\n  enabled: boolean;\n}\n\nexport interface Message {\n  message: string;\n  requestId: string;\n  warning: boolean;\n}\n\nexport interface InterceptionPattern {\n  urlPattern: string;\n  requestStage: Protocol.Fetch.RequestStage;\n}\n\nexport type RequestInterceptor = (request: InterceptedRequest) => Promise<void>;\n\nexport interface RequestUpdateDroppedEventData {\n  url: Platform.DevToolsPath.UrlString;\n  frameId: Protocol.Page.FrameId|null;\n  loaderId: Protocol.Network.LoaderId;\n  resourceType: Protocol.Network.ResourceType;\n  mimeType: string;\n  lastModified: Date|null;\n}\n"]}