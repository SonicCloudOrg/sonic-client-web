{"version":3,"file":"OverlayPersistentHighlighter.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/OverlayPersistentHighlighter.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport {describeWithEnvironment} from '../../testing/EnvironmentHelpers.js';\nimport * as Common from '../common/common.js';\nimport type * as Platform from '../platform/platform.js';\n\nimport * as SDK from './sdk.js';\n\ntype PersistentHighlightSettingItem = SDK.OverlayPersistentHighlighter.PersistentHighlightSettingItem;\ntype PersistentHighlighterCallbacks = SDK.OverlayPersistentHighlighter.PersistentHighlighterCallbacks;\n\nfunction resetSavedSetting(forcedState: Array<PersistentHighlightSettingItem> = []): void {\n  const setting = Common.Settings.Settings.instance().createLocalSetting<PersistentHighlightSettingItem[]>(\n      'persistent-highlight-setting', []);\n  setting.set(forcedState);\n}\n\nfunction assertSavedSettingState(expected: unknown): void {\n  const setting = Common.Settings.Settings.instance().createLocalSetting<PersistentHighlightSettingItem[]>(\n      'persistent-highlight-setting', []);\n  assert.deepEqual(setting.get(), expected);\n}\n\nconst NON_RELATED_DOCUMENT_URL_FOR_TEST = 'https://notexample.com/' as Platform.DevToolsPath.UrlString;\nconst DOCUMENT_URL_FOR_TEST = 'https://example.com/' as Platform.DevToolsPath.UrlString;\nconst NODE_PATH_FOR_TEST = 'body > div';\nconst EXISTING_NODE_ID = 1 as Protocol.DOM.NodeId;\n\nconst PATH_TO_NODE_ID_FOR_TEST: Record<string, Protocol.DOM.NodeId> = {\n  'body > div': EXISTING_NODE_ID,\n  'body > div + a': 2 as Protocol.DOM.NodeId,\n};\nconst NODE_ID_TO_PATH_FOR_TEST =\n    Object.fromEntries(Object.entries(PATH_TO_NODE_ID_FOR_TEST).map(([path, nodeId]) => [nodeId, path]));\n\nfunction createStubDOMNode(nodeId: Protocol.DOM.NodeId|null): SDK.DOMModel.DOMNode|null {\n  if (!nodeId) {\n    return null;\n  }\n\n  const path = NODE_ID_TO_PATH_FOR_TEST[nodeId];\n  if (!path) {\n    return null;\n  }\n\n  const domNode = sinon.createStubInstance(SDK.DOMModel.DOMNode, {\n    path,\n  });\n  domNode.id = nodeId;\n  return domNode;\n}\n\ndescribeWithEnvironment('OverlayPersistentHighlighter', () => {\n  let mockOverlayModel: sinon.SinonStubbedInstance<SDK.OverlayModel.OverlayModel>;\n  let stubbedCallbacks: sinon.SinonStubbedInstance<PersistentHighlighterCallbacks>;\n  let highlighter: SDK.OverlayPersistentHighlighter.OverlayPersistentHighlighter;\n\n  beforeEach(() => {\n    stubbedCallbacks = {\n      onFlexOverlayStateChanged: sinon.stub(),\n      onGridOverlayStateChanged: sinon.stub(),\n      onScrollSnapOverlayStateChanged: sinon.stub(),\n      onContainerQueryOverlayStateChanged: sinon.stub(),\n    };\n\n    const stubDOMDocument = sinon.createStubInstance(SDK.DOMModel.DOMDocument);\n    // Somehow we're not able to stub this properly\n    // sinon says cannot stub non-existent property.\n    stubDOMDocument.documentURL = DOCUMENT_URL_FOR_TEST;\n\n    mockOverlayModel = sinon.createStubInstance(SDK.OverlayModel.OverlayModel, {\n      getDOMModel: sinon.createStubInstance(SDK.DOMModel.DOMModel, {\n        existingDocument: stubDOMDocument,\n        requestDocument: sinon.stub<[], Promise<SDK.DOMModel.DOMDocument>>().resolves(stubDOMDocument),\n        nodeForId: sinon.stub<[Protocol.DOM.NodeId | null], SDK.DOMModel.DOMNode|null>().callsFake(createStubDOMNode),\n        pushNodeByPathToFrontend:\n            sinon.stub<[string], Promise<Protocol.DOM.NodeId|null>>().callsFake(async (path: string) => {\n              return PATH_TO_NODE_ID_FOR_TEST[path] ?? null;\n            }),\n      }),\n      target: sinon.createStubInstance(SDK.Target.Target, {\n        overlayAgent: {\n          invoke_setShowGridOverlays: sinon.stub(),\n          invoke_setShowFlexOverlays: sinon.stub(),\n          invoke_setShowScrollSnapOverlays: sinon.stub(),\n          invoke_setShowContainerQueryOverlays: sinon.stub(),\n          invoke_setShowIsolatedElements: sinon.stub(),\n        } as sinon.SinonStubbedInstance<ProtocolProxyApi.OverlayApi>,\n      }),\n    });\n\n    highlighter = new SDK.OverlayPersistentHighlighter.OverlayPersistentHighlighter(mockOverlayModel, stubbedCallbacks);\n    resetSavedSetting();\n  });\n\n  it('is able to highlight flexbox elements', () => {\n    highlighter.highlightFlexInOverlay(EXISTING_NODE_ID);\n    assert.deepEqual(\n        stubbedCallbacks.onFlexOverlayStateChanged.firstCall.args, [{nodeId: EXISTING_NODE_ID, enabled: true}]);\n    assert(highlighter.isFlexHighlighted(EXISTING_NODE_ID));\n    assertSavedSettingState([{\n      path: NODE_PATH_FOR_TEST,\n      url: DOCUMENT_URL_FOR_TEST,\n      type: SDK.OverlayPersistentHighlighter.HighlightType.FLEX,\n    }]);\n\n    highlighter.hideFlexInOverlay(EXISTING_NODE_ID);\n    assert.deepEqual(\n        stubbedCallbacks.onFlexOverlayStateChanged.secondCall.args, [{nodeId: EXISTING_NODE_ID, enabled: false}]);\n    assert(!highlighter.isFlexHighlighted(EXISTING_NODE_ID));\n    assertSavedSettingState([]);\n  });\n\n  it('is able to highlight grid elements', () => {\n    highlighter.highlightGridInOverlay(EXISTING_NODE_ID);\n    assert(highlighter.isGridHighlighted(EXISTING_NODE_ID));\n    assert.deepEqual(\n        stubbedCallbacks.onGridOverlayStateChanged.firstCall.args, [{nodeId: EXISTING_NODE_ID, enabled: true}]);\n    assertSavedSettingState([{\n      path: NODE_PATH_FOR_TEST,\n      url: DOCUMENT_URL_FOR_TEST,\n      type: SDK.OverlayPersistentHighlighter.HighlightType.GRID,\n    }]);\n\n    highlighter.hideGridInOverlay(EXISTING_NODE_ID);\n    assert.deepEqual(\n        stubbedCallbacks.onGridOverlayStateChanged.secondCall.args, [{nodeId: EXISTING_NODE_ID, enabled: false}]);\n    assert(!highlighter.isGridHighlighted(EXISTING_NODE_ID));\n    assertSavedSettingState([]);\n  });\n\n  it('is able to highlight scroll snap elements', () => {\n    highlighter.highlightScrollSnapInOverlay(EXISTING_NODE_ID);\n    assert(highlighter.isScrollSnapHighlighted(EXISTING_NODE_ID));\n    assert.deepEqual(\n        stubbedCallbacks.onScrollSnapOverlayStateChanged.firstCall.args, [{nodeId: EXISTING_NODE_ID, enabled: true}]);\n    assertSavedSettingState([{\n      path: NODE_PATH_FOR_TEST,\n      url: DOCUMENT_URL_FOR_TEST,\n      type: SDK.OverlayPersistentHighlighter.HighlightType.SCROLL_SNAP,\n    }]);\n\n    highlighter.hideScrollSnapInOverlay(EXISTING_NODE_ID);\n    assert(!highlighter.isScrollSnapHighlighted(EXISTING_NODE_ID));\n    assert.deepEqual(\n        stubbedCallbacks.onScrollSnapOverlayStateChanged.secondCall.args, [{nodeId: EXISTING_NODE_ID, enabled: false}]);\n    assertSavedSettingState([]);\n  });\n\n  it('is able to highlight container query elements', () => {\n    highlighter.highlightContainerQueryInOverlay(EXISTING_NODE_ID);\n    assert(highlighter.isContainerQueryHighlighted(EXISTING_NODE_ID));\n    assert.deepEqual(\n        stubbedCallbacks.onContainerQueryOverlayStateChanged.firstCall.args,\n        [{nodeId: EXISTING_NODE_ID, enabled: true}]);\n    assertSavedSettingState([{\n      path: NODE_PATH_FOR_TEST,\n      url: DOCUMENT_URL_FOR_TEST,\n      type: SDK.OverlayPersistentHighlighter.HighlightType.CONTAINER_QUERY,\n    }]);\n\n    highlighter.hideContainerQueryInOverlay(EXISTING_NODE_ID);\n    assert(!highlighter.isContainerQueryHighlighted(EXISTING_NODE_ID));\n    assert.deepEqual(\n        stubbedCallbacks.onContainerQueryOverlayStateChanged.secondCall.args,\n        [{nodeId: EXISTING_NODE_ID, enabled: false}]);\n    assertSavedSettingState([]);\n  });\n\n  it('is able to highlight isolated elements', () => {\n    highlighter.highlightIsolatedElementInOverlay(EXISTING_NODE_ID);\n    assert(highlighter.isIsolatedElementHighlighted(EXISTING_NODE_ID));\n    assertSavedSettingState([{\n      path: NODE_PATH_FOR_TEST,\n      url: DOCUMENT_URL_FOR_TEST,\n      type: SDK.OverlayPersistentHighlighter.HighlightType.ISOLATED_ELEMENT,\n    }]);\n\n    highlighter.hideIsolatedElementInOverlay(EXISTING_NODE_ID);\n    assert(!highlighter.isIsolatedElementHighlighted(EXISTING_NODE_ID));\n    assertSavedSettingState([]);\n  });\n\n  it('updating setting state keeps the highlights not related to the current document', () => {\n    resetSavedSetting([{\n      url: NON_RELATED_DOCUMENT_URL_FOR_TEST,\n      path: NODE_PATH_FOR_TEST,\n      type: SDK.OverlayPersistentHighlighter.HighlightType.FLEX,\n    }]);\n\n    highlighter.highlightFlexInOverlay(EXISTING_NODE_ID);\n    highlighter.hideFlexInOverlay(EXISTING_NODE_ID);\n\n    assertSavedSettingState([{\n      url: NON_RELATED_DOCUMENT_URL_FOR_TEST,\n      path: NODE_PATH_FOR_TEST,\n      type: SDK.OverlayPersistentHighlighter.HighlightType.FLEX,\n    }]);\n  });\n\n  it('restoring highlights for document highlights all the saved higlights in the setting for the current document',\n     async () => {\n       const paths = Object.keys(PATH_TO_NODE_ID_FOR_TEST);\n       resetSavedSetting([\n         {\n           url: DOCUMENT_URL_FOR_TEST,\n           path: paths[0],\n           type: SDK.OverlayPersistentHighlighter.HighlightType.GRID,\n         },\n         {\n           url: DOCUMENT_URL_FOR_TEST,\n           path: paths[1],\n           type: SDK.OverlayPersistentHighlighter.HighlightType.FLEX,\n         },\n       ]);\n\n       await highlighter.restoreHighlightsForDocument();\n\n       assert(stubbedCallbacks.onGridOverlayStateChanged.calledWith(\n           {nodeId: PATH_TO_NODE_ID_FOR_TEST[paths[0]], enabled: true}));\n       assert(highlighter.isGridHighlighted(PATH_TO_NODE_ID_FOR_TEST[paths[0]]));\n       assert(stubbedCallbacks.onFlexOverlayStateChanged.calledWith(\n           {nodeId: PATH_TO_NODE_ID_FOR_TEST[paths[1]], enabled: true}));\n       assert(highlighter.isFlexHighlighted(PATH_TO_NODE_ID_FOR_TEST[paths[1]]));\n     });\n});\n"]}