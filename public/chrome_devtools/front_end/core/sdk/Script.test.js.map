{"version":3,"file":"Script.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/Script.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Protocol from '../../generated/protocol.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {\n  describeWithMockConnection,\n  dispatchEvent,\n  setMockConnectionResponseHandler,\n} from '../../testing/MockConnection.js';\n\nimport * as SDK from './sdk.js';\n\ndescribeWithMockConnection('Script', () => {\n  describe('originalContentProvider', () => {\n    it('doesn\\'t strip //# sourceURL annotations', async () => {\n      const target = createTarget();\n      const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel) as SDK.DebuggerModel.DebuggerModel;\n      const url = 'webpack:///src/foo.js';\n      const scriptId = '1';\n      const scriptSource = `\nconsole.log(\"foo\");\n//# sourceURL=${url}\n`;\n      dispatchEvent(target, 'Debugger.scriptParsed', {\n        scriptId,\n        url,\n        startLine: 2,\n        startColumn: 14,\n        endLine: 5,\n        endColumn: 0,\n        executionContextId: 1,\n        hash: '',\n        hasSourceURL: true,\n      });\n      setMockConnectionResponseHandler('Debugger.getScriptSource', () => {\n        return {\n          scriptSource,\n          getError() {\n            return undefined;\n          },\n        };\n      });\n      const script = debuggerModel.scriptForId(scriptId) as SDK.Script.Script;\n      const content = await script.originalContentProvider().requestContentData();\n      assert.instanceOf(content, TextUtils.ContentData.ContentData);\n      assert.strictEqual(content.text, scriptSource);\n    });\n  });\n\n  describe('editSource', () => {\n    function setupEditTest(scriptId: string, scriptSource: string = '') {\n      const target = createTarget();\n      const model = target.model(SDK.DebuggerModel.DebuggerModel) as SDK.DebuggerModel.DebuggerModel;\n      dispatchEvent(target, 'Debugger.scriptParsed', {\n        scriptId,\n        url: 'https://example.com/test.js',\n        startLine: 0,\n        startColumn: 0,\n        endLine: 2,\n        endColumn: 0,\n        executionContextId: 1,\n        hash: '',\n        hasSourceURL: false,\n      });\n      setMockConnectionResponseHandler('Debugger.getScriptSource', () => {\n        return {\n          scriptSource,\n          getError: () => undefined,\n        };\n      });\n\n      const script = model.scriptForId(scriptId) as SDK.Script.Script;\n      return {script, target, model};\n    }\n\n    it('does not invoke the backend when new content and old content match', async () => {\n      const {script} = setupEditTest('1', 'console.log(\"foo\")');\n      setMockConnectionResponseHandler('Debugger.setScriptSource', () => {\n        throw new Error('Debugger.setScriptSource must not be called');\n      });\n\n      const {status} = await script.editSource('console.log(\"foo\")');\n\n      assert.strictEqual(status, Protocol.Debugger.SetScriptSourceResponseStatus.Ok);\n    });\n\n    it('updates the source content when the live edit succeeds', async () => {\n      const {script} = setupEditTest('1', 'console.log(\"foo\")');\n      setMockConnectionResponseHandler('Debugger.setScriptSource', () => {\n        return {\n          status: Protocol.Debugger.SetScriptSourceResponseStatus.Ok,\n        };\n      });\n      const newContent = 'console.log(\"bar\")';\n\n      const {status} = await script.editSource(newContent);\n\n      assert.strictEqual(status, Protocol.Debugger.SetScriptSourceResponseStatus.Ok);\n      const contentData = await script.requestContentData();\n      assert.instanceOf(contentData, TextUtils.ContentData.ContentData);\n      assert.strictEqual(contentData.text, newContent);\n    });\n\n    it('does not update the source content when the live edit fails', async () => {\n      const scriptContent = 'console.log(\"foo\")';\n      const {script} = setupEditTest('1', scriptContent);\n      setMockConnectionResponseHandler('Debugger.setScriptSource', () => {\n        return {\n          status: Protocol.Debugger.SetScriptSourceResponseStatus.CompileError,\n        };\n      });\n\n      const {status} = await script.editSource('console.log(\"bar\")');\n\n      assert.strictEqual(status, Protocol.Debugger.SetScriptSourceResponseStatus.CompileError);\n      const contentData = await script.requestContentData();\n      assert.instanceOf(contentData, TextUtils.ContentData.ContentData);\n      assert.strictEqual(contentData.text, scriptContent);\n    });\n\n    it('throws an error for protocol failures', done => {\n      const {script, target} = setupEditTest('1', 'console.log(\"foo\")');\n      sinon.stub(target.debuggerAgent(), 'invoke_setScriptSource').returns(Promise.resolve({\n        status: undefined as unknown as Protocol.Debugger.SetScriptSourceResponseStatus,  // Make TS happy.\n        getError: () => 'setScriptSource failed for some reason',\n      }));\n\n      script.editSource('console.log(\"bar\")')\n          .then(() => {\n            assert.fail('expected \"editSource\" to throw an exception!');\n          })\n          .catch(() => done());\n    });\n\n    it('fires an event on the DebuggerModel after returning from the backend', async () => {\n      const {script, model} = setupEditTest('1', 'console.log(\"foo\")');\n      setMockConnectionResponseHandler('Debugger.setScriptSource', () => {\n        return {\n          status: Protocol.Debugger.SetScriptSourceResponseStatus.Ok,\n        };\n      });\n      const newContent = 'console.log(\"bar\")';\n      const eventPromise = model.once(SDK.DebuggerModel.Events.ScriptSourceWasEdited);\n\n      void script.editSource(newContent);\n\n      const {script: eventScript, status} = await eventPromise;\n      assert.strictEqual(eventScript, script);\n      assert.strictEqual(status, Protocol.Debugger.SetScriptSourceResponseStatus.Ok);\n    });\n  });\n});\n"]}