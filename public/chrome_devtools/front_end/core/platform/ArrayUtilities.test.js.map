{"version":3,"file":"ArrayUtilities.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/platform/ArrayUtilities.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from './platform.js';\n\nfunction comparator(a: number, b: number): number {\n  return a < b ? -1 : (a > b ? 1 : 0);\n}\n\ndescribe('ArrayUtilities', () => {\n  describe('removeElement', () => {\n    it('removes elements', () => {\n      const testCases = [\n        {input: [], expectedFirstOnlyTrue: [], expectedFirstOnlyFalse: []},\n        {input: [1], expectedFirstOnlyTrue: [1], expectedFirstOnlyFalse: [1]},\n        {\n          input: [1, 2, 3, 4, 5, 4, 3, 2, 1],\n          expectedFirstOnlyTrue: [1, 3, 4, 5, 4, 3, 2, 1],\n          expectedFirstOnlyFalse: [1, 3, 4, 5, 4, 3, 1],\n        },\n        {input: [2, 2, 2, 2, 2], expectedFirstOnlyTrue: [2, 2, 2, 2], expectedFirstOnlyFalse: []},\n        {input: [2, 2, 2, 1, 2, 2, 3, 2], expectedFirstOnlyTrue: [2, 2, 1, 2, 2, 3, 2], expectedFirstOnlyFalse: [1, 3]},\n      ];\n\n      for (const testCase of testCases) {\n        const actualFirstOnlyTrue = [...testCase.input];\n\n        Platform.ArrayUtilities.removeElement(actualFirstOnlyTrue, 2, true);\n        assert.deepStrictEqual(actualFirstOnlyTrue, testCase.expectedFirstOnlyTrue, 'Removing firstOnly (true) failed');\n\n        const actualFirstOnlyFalse = [...testCase.input];\n        Platform.ArrayUtilities.removeElement(actualFirstOnlyFalse, 2, false);\n        assert.deepStrictEqual(\n            actualFirstOnlyFalse, testCase.expectedFirstOnlyFalse, 'Removing firstOnly (false) failed');\n      }\n    });\n  });\n\n  const fixtures = [\n    [],\n    [1],\n    [2, 1],\n    [6, 4, 2, 7, 10, 15, 1],\n    [10, 44, 3, 6, 56, 66, 10, 55, 32, 56, 2, 5],\n  ];\n  for (let i = 0; i < fixtures.length; i++) {\n    const fixture = fixtures[i];\n\n    it(`sorts ranges, fixture ${i}`, () => {\n      for (let left = 0, l = fixture.length - 1; left < l; ++left) {\n        for (let right = left, r = fixture.length; right < r; ++right) {\n          for (let first = left; first <= right; ++first) {\n            for (let count = 1, k = right - first + 1; count <= k; ++count) {\n              const actual = fixture.slice(0);\n              Platform.ArrayUtilities.sortRange(actual, comparator, left, right, first, first + count - 1);\n              assert.deepStrictEqual(\n                  fixture.slice(0, left), actual.slice(0, left), 'left ' + left + ' ' + right + ' ' + count);\n              assert.deepStrictEqual(\n                  fixture.slice(right + 1), actual.slice(right + 1), 'right ' + left + ' ' + right + ' ' + count);\n\n              const middle = fixture.slice(left, right + 1);\n              middle.sort(comparator);\n              assert.deepStrictEqual(\n                  middle.slice(first - left, first - left + count), actual.slice(first, first + count),\n                  'sorted ' + left + ' ' + right + ' ' + first + ' ' + count);\n\n              const actualRest = actual.slice(first + count, right + 1);\n              actualRest.sort(comparator);\n              assert.deepStrictEqual(\n                  middle.slice(first - left + count), actualRest,\n                  'unsorted ' + left + ' ' + right + ' ' + first + ' ' + count);\n            }\n          }\n        }\n      }\n    });\n  }\n  describe('binaryIndexOf', () => {\n    it('calculates the correct binary index', () => {\n      const fixtures = [\n        [],\n        [1],\n        [1, 10],\n        [1, 10, 11, 12, 13, 14, 100],\n        [-100, -50, 0, 50, 100],\n        [-100, -14, -13, -12, -11, -10, -1],\n      ];\n\n      function testArray(array: number[]) {\n        function comparator(a: number, b: number) {\n          return a < b ? -1 : (a > b ? 1 : 0);\n        }\n\n        for (let i = -100; i <= 100; ++i) {\n          const reference = array.indexOf(i);\n          const actual = Platform.ArrayUtilities.binaryIndexOf(array, i, comparator);\n          assert.strictEqual(reference, actual);\n        }\n      }\n\n      for (const fixture of fixtures) {\n        testArray(fixture);\n      }\n    });\n  });\n  describe('merge and intersect', () => {\n    it('orders merge intersect', () => {\n      function comparator(a: number, b: number) {\n        return a - b;\n      }\n\n      function count(a: number[], x: number) {\n        return Platform.ArrayUtilities.upperBound(a, x, Platform.ArrayUtilities.DEFAULT_COMPARATOR) -\n            Platform.ArrayUtilities.lowerBound(a, x, Platform.ArrayUtilities.DEFAULT_COMPARATOR);\n      }\n\n      function testAll(a: number[], b: number[]) {\n        testOperation(a, b, Platform.ArrayUtilities.mergeOrdered(a, b, comparator), Math.max, 'U');\n        testOperation(a, b, Platform.ArrayUtilities.intersectOrdered(a, b, comparator), Math.min, 'x');\n      }\n\n      function testOperation(\n          a: number[], b: number[], actual: number[], checkOperation: (...values: number[]) => number, opName: string) {\n        const allValues = a.concat(b).concat(actual);\n        let expectedCount: number;\n        let actualCount: number;\n\n        for (let i = 0; i < allValues.length; ++i) {\n          const value = allValues[i];\n          expectedCount = checkOperation(count(a, value), count(b, value));\n          actualCount = count(actual, value);\n          assert.strictEqual(\n              expectedCount, actualCount,\n              'Incorrect result for value: ' + value + ' at [' + a + '] ' + opName + ' [' + b + '] -> [' + actual +\n                  ']');\n        }\n\n        const shallowCopy = [...actual];\n        assert.deepStrictEqual(actual.sort(), shallowCopy, 'Result array is ordered');\n      }\n\n      const fixtures = new Map([\n        [[], []],\n        [[1], []],\n        [[1, 2, 2, 2, 3], []],\n        [[4, 5, 5, 8, 8], [1, 1, 1, 2, 6]],\n        [[1, 2, 2, 2, 2, 3, 3, 4], [2, 2, 2, 3, 3, 3, 3]],\n        [[1, 2, 3, 4, 5], [1, 2, 3]],\n      ]);\n\n      for (const [a, b] of fixtures) {\n        testAll(a, b);\n        testAll(b, a);\n      }\n    });\n  });\n\n  describe('upperBound', () => {\n    it('finds the first object after the needle whose value is greater than the needle', async () => {\n      const input = [0, 1, 2, 3, 4, 5];\n      const index = Platform.ArrayUtilities.upperBound(input, 2, Platform.ArrayUtilities.DEFAULT_COMPARATOR);\n      assert.strictEqual(index, 3);\n    });\n\n    it('can take left and right params to alter the range', async () => {\n      const input = [0, 1, 2, 3, 4, 5];\n      const index = Platform.ArrayUtilities.upperBound(input, 2, Platform.ArrayUtilities.DEFAULT_COMPARATOR, 4, 6);\n      assert.strictEqual(index, 4);\n    });\n\n    it('can take a custom comparator to determine how to compare elements', async () => {\n      const input = [{time: 0, name: 'test1'}, {time: 6, name: 'test2'}];\n      const index = Platform.ArrayUtilities.upperBound(input, 2, (needle, element) => {\n        if (needle > element.time) {\n          return 1;\n        }\n        if (element.time > needle) {\n          return -1;\n        }\n        return 0;\n      });\n      assert.strictEqual(index, 1);\n    });\n  });\n\n  describe('lowerBound', () => {\n    it('finds the first object after the needle whose value is equal to or greater than the needle', async () => {\n      const input = [0, 1, 2, 3, 4, 5];\n      const index = Platform.ArrayUtilities.lowerBound(input, 2, Platform.ArrayUtilities.DEFAULT_COMPARATOR);\n      assert.strictEqual(index, 2);\n    });\n\n    it('can take left and right params to alter the range', async () => {\n      const input = [0, 1, 2, 3, 4, 5];\n      const index = Platform.ArrayUtilities.lowerBound(input, 2, Platform.ArrayUtilities.DEFAULT_COMPARATOR, 5, 6);\n      assert.strictEqual(index, 5);\n    });\n\n    it('can take a custom comparator to determine how to compare elements', async () => {\n      const input = [{time: 0, name: 'test1'}, {time: 2, name: 'test2'}, {time: 3, name: 'test3'}];\n      const index = Platform.ArrayUtilities.lowerBound(input, 2, (needle, element) => {\n        if (needle > element.time) {\n          return 1;\n        }\n        if (element.time > needle) {\n          return -1;\n        }\n        return 0;\n      });\n      assert.strictEqual(index, 1);\n    });\n  });\n\n  describe('Nearest', () => {\n    describe('Finding the last item where predicate is true', () => {\n      it('works with an even number of entries', () => {\n        const ascEntries = [{a: 1}, {a: 3}, {a: 3}, {a: 12}, {a: 13}, {a: 18}, {a: 23}, {a: 24}];\n        let nearest = Platform.ArrayUtilities.nearestIndexFromEnd(ascEntries, value => value.a < 7);\n\n        assert.strictEqual(nearest, 2);\n\n        const descEntries = [{a: 23}, {a: 18}, {a: 13}, {a: 12}, {a: 12}, {a: 3}, {a: 1}, {a: 0}];\n        nearest = Platform.ArrayUtilities.nearestIndexFromEnd(descEntries, value => value.a > 7);\n\n        assert.strictEqual(nearest, 4);\n      });\n\n      it('works with an odd number of entries', () => {\n        const ascEntries = [\n          {a: 1},\n          {a: 3},\n          {a: 12},\n          {a: 13},\n          {a: 18},\n          {a: 23},\n          {a: 23},\n          {a: 32},\n          {a: 33},\n        ];\n        let nearest = Platform.ArrayUtilities.nearestIndexFromEnd(ascEntries, value => value.a < 31);\n        assert.strictEqual(nearest, 6);\n\n        const descEntries = [\n          {a: 32},\n          {a: 23},\n          {a: 18},\n          {a: 13},\n          {a: 12},\n          {a: 3},\n          {a: 3},\n          {a: 1},\n        ];\n        nearest = Platform.ArrayUtilities.nearestIndexFromEnd(descEntries, value => value.a > 2);\n        assert.strictEqual(nearest, 6);\n      });\n\n      it('returns null if there are no matches at all', () => {\n        const ascEntries = [\n          {a: 1},\n          {a: 3},\n          {a: 12},\n          {a: 13},\n          {a: 18},\n          {a: 23},\n          {a: 32},\n        ];\n        let zeroth = Platform.ArrayUtilities.nearestIndexFromEnd(ascEntries, value => value.a < 0);\n        assert.isNull(zeroth);\n\n        const descEntries = [\n          {a: 32},\n          {a: 23},\n          {a: 18},\n          {a: 13},\n          {a: 12},\n          {a: 3},\n          {a: 1},\n        ];\n        zeroth = Platform.ArrayUtilities.nearestIndexFromEnd(descEntries, value => value.a > 40);\n        assert.isNull(zeroth);\n      });\n\n      it('works when the result is the last item', () => {\n        const ascEntries = [\n          {a: 1},\n          {a: 3},\n          {a: 12},\n          {a: 13},\n          {a: 18},\n          {a: 23},\n          {a: 32},\n          {a: 32},\n        ];\n        let last = Platform.ArrayUtilities.nearestIndexFromEnd(ascEntries, value => value.a < 40);\n        assert.strictEqual(last, ascEntries.length - 1);\n\n        const descEntries = [\n          {a: 32},\n          {a: 23},\n          {a: 18},\n          {a: 13},\n          {a: 12},\n          {a: 3},\n          {a: 1},\n          {a: 1},\n        ];\n        last = Platform.ArrayUtilities.nearestIndexFromEnd(descEntries, value => value.a > 0);\n        assert.strictEqual(last, descEntries.length - 1);\n      });\n\n      it('works on exact values', () => {\n        const ascEntries = [\n          {a: 1},\n          {a: 2},\n          {a: 3},\n          {a: 3},\n          {a: 4},\n          {a: 5},\n          {a: 6},\n        ];\n        const predicateFunc = (value: {a: number}) => value.a <= 3;\n\n        // Odd number of entries.\n        // Note that the predicate is allowing an the exact match.\n        let nearest = Platform.ArrayUtilities.nearestIndexFromEnd(ascEntries, predicateFunc);\n        assert.strictEqual(nearest, 3);\n\n        // Even number of entries.\n        ascEntries.push({a: 7});\n        nearest = Platform.ArrayUtilities.nearestIndexFromEnd(ascEntries, predicateFunc);\n        assert.strictEqual(nearest, 3);\n\n        const descEntries = [\n          {a: 6},\n          {a: 5},\n          {a: 4},\n          {a: 3},\n          {a: 3},\n          {a: 2},\n          {a: 1},\n        ];\n        // Note that the predicate is allowing an the exact match.\n        const gePredicate = (value: {a: number}) => value.a >= 3;\n\n        // Odd number of entries.\n        nearest = Platform.ArrayUtilities.nearestIndexFromEnd(descEntries, gePredicate);\n        assert.strictEqual(nearest, 4);\n\n        // Even number of entries.\n        descEntries.push({a: 7});\n        nearest = Platform.ArrayUtilities.nearestIndexFromEnd(descEntries, gePredicate);\n        assert.strictEqual(nearest, 4);\n      });\n    });\n    describe('Finding the first item in the array where predicate is true', () => {\n      it('works with an even number of entries', () => {\n        const ascEntries = [{a: 1}, {a: 3}, {a: 12}, {a: 12}, {a: 13}, {a: 18}, {a: 23}, {a: 24}];\n        let nearest = Platform.ArrayUtilities.nearestIndexFromBeginning(ascEntries, value => value.a > 7);\n        assert.strictEqual(nearest, 2);\n\n        const descEntries = [{a: 23}, {a: 18}, {a: 13}, {a: 12}, {a: 12}, {a: 3}, {a: 1}, {a: 0}];\n        nearest = Platform.ArrayUtilities.nearestIndexFromBeginning(descEntries, value => value.a < 13);\n        assert.strictEqual(nearest, 3);\n      });\n\n      it('works with an odd number of entries', () => {\n        const ascEntries = [\n          {a: 1},\n          {a: 3},\n          {a: 12},\n          {a: 13},\n          {a: 18},\n          {a: 23},\n          {a: 32},\n          {a: 32},\n          {a: 33},\n        ];\n        let nearest = Platform.ArrayUtilities.nearestIndexFromBeginning(ascEntries, value => value.a > 31);\n        assert.strictEqual(nearest, 6);\n\n        const descEntries = [\n          {a: 33},\n          {a: 32},\n          {a: 23},\n          {a: 23},\n          {a: 18},\n          {a: 23},\n          {a: 32},\n          {a: 3},\n          {a: 1},\n        ];\n        nearest = Platform.ArrayUtilities.nearestIndexFromBeginning(descEntries, value => value.a < 32);\n        assert.strictEqual(nearest, 2);\n      });\n\n      it('returns null if there are no matches at all', () => {\n        const entries = [\n          {a: 1},\n          {a: 3},\n          {a: 12},\n          {a: 13},\n          {a: 18},\n          {a: 23},\n          {a: 32},\n        ];\n        const predicate = (value: {a: number}) => value.a > 33;\n        const nearest = Platform.ArrayUtilities.nearestIndexFromBeginning(entries, predicate);\n        assert.isNull(nearest);\n      });\n\n      it('works when the result is the first item', () => {\n        const ascEntries = [\n          {a: 1},\n          {a: 1},\n          {a: 3},\n          {a: 12},\n          {a: 13},\n          {a: 18},\n          {a: 23},\n          {a: 32},\n        ];\n        const greaterThanPredicate = (value: {a: number}) => value.a > 0;\n        let first = Platform.ArrayUtilities.nearestIndexFromBeginning(ascEntries, greaterThanPredicate);\n        assert.strictEqual(first, 0);\n\n        const descEntries = [\n          {a: 32},\n          {a: 32},\n          {a: 23},\n          {a: 18},\n          {a: 13},\n          {a: 12},\n          {a: 5},\n          {a: 5},\n        ];\n        const predicate = (value: {a: number}) => value.a < 64;\n        first = Platform.ArrayUtilities.nearestIndexFromBeginning(descEntries, predicate);\n        assert.strictEqual(first, 0);\n      });\n\n      it('works on exact values', () => {\n        const ascEntries = [\n          {a: 1},\n          {a: 2},\n          {a: 3},\n          {a: 3},\n          {a: 4},\n          {a: 5},\n          {a: 6},\n        ];\n        // Note that the predicate is allowing an the exact match.\n        const gePredicate = (value: {a: number}) => value.a >= 3;\n\n        // Even number of entries.\n        let nearest = Platform.ArrayUtilities.nearestIndexFromBeginning(ascEntries, gePredicate);\n        assert.strictEqual(nearest, 2);\n\n        // Odd number of entries.\n        ascEntries.push({a: 7});\n        nearest = Platform.ArrayUtilities.nearestIndexFromBeginning(ascEntries, gePredicate);\n        assert.strictEqual(nearest, 2);\n\n        const descEntries = [\n          {a: 6},\n          {a: 5},\n          {a: 4},\n          {a: 3},\n          {a: 3},\n          {a: 2},\n          {a: 1},\n        ];\n        // Note that the predicate is allowing an the exact match.\n        const predicateFunc = (value: {a: number}) => value.a <= 3;\n\n        // Even number of entries.\n        nearest = Platform.ArrayUtilities.nearestIndexFromBeginning(descEntries, predicateFunc);\n        assert.strictEqual(nearest, 3);\n\n        // Odd number of entries.\n        descEntries.push({a: 7});\n        nearest = Platform.ArrayUtilities.nearestIndexFromBeginning(descEntries, predicateFunc);\n\n        assert.strictEqual(nearest, 3);\n      });\n    });\n  });\n\n  describe('arrayDoesNotContainNullOrUndefined', () => {\n    it('should return false when array contains null', () => {\n      assert.isFalse(Platform.ArrayUtilities.arrayDoesNotContainNullOrUndefined([1, null, 2]));\n    });\n    it('should return false when array contains undefined', () => {\n      assert.isFalse(Platform.ArrayUtilities.arrayDoesNotContainNullOrUndefined([1, undefined, 2]));\n    });\n    it('should return true when array does not contain undefined and null', () => {\n      assert.isTrue(Platform.ArrayUtilities.arrayDoesNotContainNullOrUndefined([1, 2]));\n    });\n  });\n});\n"]}