{"version":3,"file":"StringUtilities.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/platform/StringUtilities.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from './platform.js';\n\ndescribe('StringUtilities', () => {\n  describe('escapeCharacters', () => {\n    it('escapes the given characters', () => {\n      const inputString = 'My string with a single quote \\' in the middle';\n      const charsToEscape = '\\'';\n      const outputString = Platform.StringUtilities.escapeCharacters(inputString, charsToEscape);\n\n      assert.strictEqual(outputString, 'My string with a single quote \\\\\\' in the middle');\n    });\n\n    it('leaves the string alone if the characters are not found', () => {\n      const inputString = 'Just a boring string';\n      const charsToEscape = '\\'';\n      const outputString = Platform.StringUtilities.escapeCharacters(inputString, charsToEscape);\n      assert.strictEqual(outputString, inputString);\n    });\n  });\n\n  describe('toBase64', () => {\n    it('encodes correctly and supports unicode characters', () => {\n      const fixtures = new Map([\n        ['', ''],\n        ['a', 'YQ=='],\n        ['bc', 'YmM='],\n        ['def', 'ZGVm'],\n        ['ghij', 'Z2hpag=='],\n        ['klmno', 'a2xtbm8='],\n        ['pqrstu', 'cHFyc3R1'],\n        ['\\u0444\\u5555\\u6666\\u7777', '0YTllZXmmabnnbc='],\n      ]);\n      for (const [inputString, encodedString] of fixtures) {\n        assert.strictEqual(\n            encodedString, Platform.StringUtilities.toBase64(inputString), `failed to encode ${inputString} correctly`);\n      }\n    });\n  });\n\n  describe('findIndexesOfSubstring', () => {\n    it('finds the expected indexes', () => {\n      const inputString = '111111F1111111F11111111F';\n      const indexes = Platform.StringUtilities.findIndexesOfSubString(inputString, 'F');\n      assert.deepEqual(indexes, [6, 14, 23]);\n    });\n  });\n\n  describe('findLineEndingIndexes', () => {\n    it('finds the indexes of the line endings and returns them', () => {\n      const inputString = `1234\n56\n78\n9`;\n      const indexes = Platform.StringUtilities.findLineEndingIndexes(inputString);\n      assert.deepEqual(indexes, [4, 7, 10, 12]);\n    });\n  });\n\n  describe('isWhitespace', () => {\n    it('correctly recognizes different kinds of whitespace', () => {\n      assert.isTrue(Platform.StringUtilities.isWhitespace(''));\n      assert.isTrue(Platform.StringUtilities.isWhitespace('  '));\n      assert.isTrue(Platform.StringUtilities.isWhitespace('\\t'));\n      assert.isTrue(Platform.StringUtilities.isWhitespace('\\n'));\n\n      assert.isFalse(Platform.StringUtilities.isWhitespace('  foo '));\n    });\n  });\n\n  describe('trimURL', () => {\n    it('trims the protocol and an optional domain from URLs', () => {\n      const baseURLDomain = 'www.chromium.org';\n      const fixtures = new Map([\n        ['http://www.chromium.org/foo/bar', '/foo/bar'],\n        ['https://www.CHromium.ORG/BAZ/zoo', '/BAZ/zoo'],\n        ['https://example.com/foo[]', 'example.com/foo[]'],\n      ]);\n      for (const [url, expected] of fixtures) {\n        assert.strictEqual(Platform.StringUtilities.trimURL(url, baseURLDomain), expected, url);\n      }\n    });\n  });\n\n  describe('collapseWhitespace', () => {\n    it('collapses consecutive whitespace chars down to a single one', () => {\n      const inputString = 'look                at this!';\n      const outputString = Platform.StringUtilities.collapseWhitespace(inputString);\n      assert.strictEqual(outputString, 'look at this!');\n    });\n\n    it('matches globally and collapses all whitespace sections', () => {\n      const inputString = 'a     b           c';\n      const outputString = Platform.StringUtilities.collapseWhitespace(inputString);\n      assert.strictEqual(outputString, 'a b c');\n    });\n  });\n\n  describe('reverse', () => {\n    it('reverses the string', () => {\n      const inputString = 'abc';\n      assert.strictEqual(Platform.StringUtilities.reverse(inputString), 'cba');\n    });\n\n    it('does nothing to an empty string', () => {\n      assert.strictEqual('', Platform.StringUtilities.reverse(''));\n    });\n  });\n\n  describe('replaceControlCharacters', () => {\n    it('replaces C0 and C1 control character sets with the replacement character', () => {\n      const charsThatShouldBeEscaped = [\n        '\\0',   '\\x01', '\\x02', '\\x03', '\\x04', '\\x05', '\\x06', '\\x07', '\\b',   '\\x0B', '\\f',   '\\x0E', '\\x0F',\n        '\\x10', '\\x11', '\\x12', '\\x13', '\\x14', '\\x15', '\\x16', '\\x17', '\\x18', '\\x19', '\\x1A', '\\x1B', '\\x1C',\n        '\\x1D', '\\x1E', '\\x1F', '\\x80', '\\x81', '\\x82', '\\x83', '\\x84', '\\x85', '\\x86', '\\x87', '\\x88', '\\x89',\n        '\\x8A', '\\x8B', '\\x8C', '\\x8D', '\\x8E', '\\x8F', '\\x90', '\\x91', '\\x92', '\\x93', '\\x94', '\\x95', '\\x96',\n        '\\x97', '\\x98', '\\x99', '\\x9A', '\\x9B', '\\x9C', '\\x9D', '\\x9E', '\\x9F',\n      ];\n\n      const inputString = charsThatShouldBeEscaped.join('');\n      const outputString = Platform.StringUtilities.replaceControlCharacters(inputString);\n\n      const replacementCharacter = '\\uFFFD';\n      const expectedString = charsThatShouldBeEscaped.fill(replacementCharacter).join('');\n      assert.strictEqual(outputString, expectedString);\n    });\n\n    it('does not replace \\n \\t or \\r', () => {\n      const inputString = '\\nhello world\\t\\r';\n      const outputString = Platform.StringUtilities.replaceControlCharacters(inputString);\n      assert.strictEqual(inputString, outputString);\n    });\n  });\n\n  describe('countWtf8Bytes', () => {\n    it('produces the correct WTF-8 byte size', () => {\n      assert.strictEqual(Platform.StringUtilities.countWtf8Bytes('a'), 1);\n      assert.strictEqual(Platform.StringUtilities.countWtf8Bytes('\\x7F'), 1);\n      assert.strictEqual(Platform.StringUtilities.countWtf8Bytes('\\u07FF'), 2);\n      assert.strictEqual(Platform.StringUtilities.countWtf8Bytes('\\uD800'), 3);\n      assert.strictEqual(Platform.StringUtilities.countWtf8Bytes('\\uDBFF'), 3);\n      assert.strictEqual(Platform.StringUtilities.countWtf8Bytes('\\uDC00'), 3);\n      assert.strictEqual(Platform.StringUtilities.countWtf8Bytes('\\uDFFF'), 3);\n      assert.strictEqual(Platform.StringUtilities.countWtf8Bytes('\\uFFFF'), 3);\n      assert.strictEqual(Platform.StringUtilities.countWtf8Bytes('\\u{10FFFF}'), 4);\n      assert.strictEqual(Platform.StringUtilities.countWtf8Bytes('Iñtërnâtiônàlizætiøn☃💩'), 34);\n\n      // An arbitrary lead surrogate (D800..DBFF).\n      const leadSurrogate = '\\uDABC';\n      // An arbitrary trail surrogate (DC00..DFFF).\n      const trailSurrogate = '\\uDEF0';\n      assert.strictEqual(Platform.StringUtilities.countWtf8Bytes(`${leadSurrogate}${trailSurrogate}`), 4);\n      assert.strictEqual(Platform.StringUtilities.countWtf8Bytes(`${trailSurrogate}${leadSurrogate}`), 6);\n      assert.strictEqual(Platform.StringUtilities.countWtf8Bytes(`${leadSurrogate}`), 3);\n      assert.strictEqual(Platform.StringUtilities.countWtf8Bytes(`${trailSurrogate}`), 3);\n    });\n  });\n\n  describe('stripLineBreaks', () => {\n    it('strips linebreaks from strings', () => {\n      assert.strictEqual(Platform.StringUtilities.stripLineBreaks('a\\nb'), 'ab');\n      assert.strictEqual(Platform.StringUtilities.stripLineBreaks('a\\r\\nb'), 'ab');\n    });\n  });\n\n  describe('isExtendedKebab', () => {\n    const {isExtendedKebabCase} = Platform.StringUtilities;\n\n    it('yields `true` for kebab case strings', () => {\n      assert.isTrue(isExtendedKebabCase('a-b-c'));\n      assert.isTrue(isExtendedKebabCase('a-b'));\n      assert.isTrue(isExtendedKebabCase('abc'));\n    });\n\n    it('yields `true` for kebab case strings with dots', () => {\n      assert.isTrue(isExtendedKebabCase('quick-open.show'));\n      assert.isTrue(isExtendedKebabCase('main.target.reload-page'));\n    });\n\n    it('yields `false` for broken kebab case', () => {\n      assert.isFalse(isExtendedKebabCase('a-b-'));\n      assert.isFalse(isExtendedKebabCase('-abc'));\n      assert.isFalse(isExtendedKebabCase('a--c'));\n    });\n\n    it('yields `false` for other cases', () => {\n      assert.isFalse(isExtendedKebabCase('quickOpen.show'));\n      assert.isFalse(isExtendedKebabCase('inspector_main.reload'));\n      assert.isFalse(isExtendedKebabCase('Main.target.ReloadPage'));\n    });\n  });\n\n  describe('toTitleCase', () => {\n    it('converts a string to title case', () => {\n      const output = Platform.StringUtilities.toTitleCase('foo bar baz');\n      assert.strictEqual(output, 'Foo bar baz');\n    });\n  });\n\n  describe('removeURLFragment', () => {\n    it('removes the URL fragment if found', () => {\n      const input = 'http://www.example.com/foo.html#blah';\n      assert.strictEqual(Platform.StringUtilities.removeURLFragment(input), 'http://www.example.com/foo.html');\n    });\n\n    it('returns the same string if there is no fragment', () => {\n      const input = 'http://www.example.com/foo.html';\n      assert.strictEqual(Platform.StringUtilities.removeURLFragment(input), input);\n    });\n\n    it('does not strip query parameters', () => {\n      const input = 'http://www.example.com/foo.html?x=1#blah';\n      assert.strictEqual(Platform.StringUtilities.removeURLFragment(input), 'http://www.example.com/foo.html?x=1');\n    });\n  });\n  describe('filterRegex', () => {\n    it('should prepend [^\\\\0 ]* patterns for all characters', () => {\n      const regex = Platform.StringUtilities.filterRegex('bar');\n      assert.strictEqual(regex.toString(), '/^(?:.*\\\\0)?[^\\\\0b]*b[^\\\\0a]*a[^\\\\0r]*r/i');\n    });\n\n    it('should escape special characters', () => {\n      const regex = Platform.StringUtilities.filterRegex('{?}');\n      assert.strictEqual(regex.toString(), '/^(?:.*\\\\0)?[^\\\\0\\\\{]*\\\\{[^\\\\0\\\\?]*\\\\?[^\\\\0\\\\}]*\\\\}/i');\n    });\n\n    it('should match strings that have the query characters in the same order', () => {\n      const testCases = [\n        {query: 'abc', pos: ['abc', 'adabxac', 'AbC', 'a\\x00abc'], neg: ['ab', 'acb', 'a\\x00bc']},\n        {query: 'aba', pos: ['abba', 'abracadabra'], neg: ['ab', 'aab', 'baa']},\n        {query: '.?a*', pos: ['x.y?ax*b'], neg: ['', 'a?a*', 'a*', '.?']},\n      ];\n      for (const {query, pos, neg} of testCases) {\n        const regex = Platform.StringUtilities.filterRegex(query);\n        assert.exists(regex, `Could not create regex from query \"${query}\"`);\n        for (const example of pos) {\n          assert.isTrue(regex.test(example), `query \"${query}\" should match \"${example}\"`);\n        }\n        for (const example of neg) {\n          assert.isFalse(regex.test(example), `query \"${query}\" should not match \"${example}\"`);\n        }\n      }\n    });\n  });\n\n  describe('createSearchRegex', () => {\n    it('returns a case sensitive regex if the call states it is case sensitive', () => {\n      const regex = Platform.StringUtilities.createSearchRegex('foo', true, false);\n      assert.strictEqual(regex.ignoreCase, false);\n      assert.strictEqual(regex.source, 'foo');\n    });\n\n    it('creates a regex from plain text if the given input is not already a regex', () => {\n      const regex = Platform.StringUtilities.createSearchRegex('[foo]', false, false);\n      assert.strictEqual(regex.source, '\\\\[foo\\\\]');\n    });\n\n    it('leaves the input be if it is already a regex', () => {\n      const regex = Platform.StringUtilities.createSearchRegex('[foo]', false, true);\n      assert.strictEqual(regex.source, '[foo]');\n    });\n  });\n\n  describe('hashCode', () => {\n    it('hashes strings', () => {\n      const stringA = ' '.repeat(10000);\n      const stringB = stringA + ' ';\n      const hashA = Platform.StringUtilities.hashCode(stringA);\n      assert.isTrue(hashA !== Platform.StringUtilities.hashCode(stringB));\n      assert.isTrue(isFinite(hashA));\n      assert.isTrue(hashA + 1 !== hashA);\n    });\n  });\n\n  describe('compare', () => {\n    it('returns 1 if the string is > the other string', () => {\n      const result = Platform.StringUtilities.compare('b', 'a');\n      assert.strictEqual(result, 1);\n    });\n\n    it('returns -1 if the string is < the other string', () => {\n      const result = Platform.StringUtilities.compare('a', 'b');\n      assert.strictEqual(result, -1);\n    });\n\n    it('returns 0 if the strings are equal', () => {\n      const result = Platform.StringUtilities.compare('a', 'a');\n      assert.strictEqual(result, 0);\n    });\n  });\n\n  describe('trimMiddle', () => {\n    const fixtures = [\n      '',\n      '!',\n      '\\u{1F648}A\\u{1F648}L\\u{1F648}I\\u{1F648}N\\u{1F648}A\\u{1F648}\\u{1F648}',\n      'test',\n    ];\n\n    for (let i = 0; i < fixtures.length; i++) {\n      const string = fixtures[i];\n      it(`trims the middle of strings, fixture ${i}`, () => {\n        for (let maxLength = string.length + 1; maxLength > 0; --maxLength) {\n          const trimmed = Platform.StringUtilities.trimMiddle(string, maxLength);\n          assert.isTrue(trimmed.length <= maxLength);\n        }\n      });\n    }\n  });\n\n  describe('escapeForRegExp', () => {\n    it('escapes regex characters', () => {\n      const inputString = '^[]{}()\\\\.^$*+?|-';\n      const outputString = Platform.StringUtilities.escapeForRegExp(inputString);\n      assert.strictEqual(outputString, '\\\\^\\\\[\\\\]\\\\{\\\\}\\\\(\\\\)\\\\\\\\\\\\.\\\\^\\\\$\\\\*\\\\+\\\\?\\\\|\\\\-');\n    });\n  });\n\n  describe('naturalOrderComparator', () => {\n    it('sorts natural order', () => {\n      const testArray = [\n        'dup', 'a1',   'a4222',  'a91',       'a07',      'dup', 'a7',        'a007',      'abc00',     'abc0',\n        'abc', 'abcd', 'abc000', 'x10y20z30', 'x9y19z29', 'dup', 'x09y19z29', 'x10y22z23', 'x10y19z43', '1',\n        '10',  '11',   'dup',    '2',         '2',        '2',   '555555',    '5',         '5555',      'dup',\n      ];\n\n      for (let i = 0, n = testArray.length; i < n; ++i) {\n        assert.strictEqual(\n            0, Platform.StringUtilities.naturalOrderComparator(testArray[i], testArray[i]), 'comparing equal strings');\n      }\n\n      testArray.sort(Platform.StringUtilities.naturalOrderComparator);\n\n      // Check comparator's transitivity.\n      for (let i = 0, n = testArray.length; i < n; ++i) {\n        for (let j = 0; j < n; ++j) {\n          const a = testArray[i];\n          const b = testArray[j];\n          const diff = Platform.StringUtilities.naturalOrderComparator(a, b);\n          if (diff === 0) {\n            assert.strictEqual(a, b, 'zero diff');\n          } else if (diff < 0) {\n            assert.isTrue(i < j);\n          } else {\n            assert.isTrue(i > j);\n          }\n        }\n      }\n    });\n  });\n\n  describe('base64ToSize', () => {\n    it('calculates length correctly', () => {\n      const inputString = 'foo';\n      const base64String = btoa(inputString);\n      assert.strictEqual(Platform.StringUtilities.base64ToSize(base64String), inputString.length);\n    });\n\n    it('calculates length of null string correctly', () => {\n      const inputString = null;\n      assert.strictEqual(Platform.StringUtilities.base64ToSize(inputString), 0);\n    });\n\n    it('calcualtes length of string with two = at the end', () => {\n      const inputString = 'fooo';\n      const base64String = btoa(inputString);\n      assert.strictEqual(base64String, 'Zm9vbw==');\n      assert.strictEqual(Platform.StringUtilities.base64ToSize(base64String), inputString.length);\n    });\n\n    it('calcualtes length of string with one = at the end', () => {\n      const inputString = 'foooo';\n      const base64String = btoa(inputString);\n      assert.strictEqual(base64String, 'Zm9vb28=');\n      assert.strictEqual(Platform.StringUtilities.base64ToSize(base64String), inputString.length);\n    });\n  });\n\n  describe('formatAsJSLiteral', () => {\n    it('wraps plain string in single quotes', () => {\n      const inputString = 'foo';\n      assert.strictEqual(String.raw`'foo'`, Platform.StringUtilities.formatAsJSLiteral(inputString));\n    });\n\n    it('wraps string containing single quotes in double quotes', () => {\n      const inputString = String.raw`'foo' and 'bar'`;\n      assert.strictEqual(String.raw`\"'foo' and 'bar'\"`, Platform.StringUtilities.formatAsJSLiteral(inputString));\n    });\n\n    it('wraps string containing both single and double quotes in back ticks', () => {\n      const inputString = String.raw`'foo' and \"bar\"`;\n      assert.strictEqual('`\\'foo\\' and \"bar\"`', Platform.StringUtilities.formatAsJSLiteral(inputString));\n    });\n\n    it('wraps string containing all three quotes in single quotes', () => {\n      const inputString = '\\'foo\\' `and` \"bar\"';\n      assert.strictEqual('\\'\\\\\\'foo\\\\\\' `and` \"bar\"\\'', Platform.StringUtilities.formatAsJSLiteral(inputString));\n    });\n\n    it('does not use back ticks when content contains ${', () => {\n      const inputString = '\\'foo\\' \"and\" ${bar}';\n      assert.strictEqual('\\'\\\\\\'foo\\\\\\' \"and\" ${bar}\\'', Platform.StringUtilities.formatAsJSLiteral(inputString));\n    });\n\n    it('should escape lone leading surrogates', () => {\n      const inputString = '\\uD800 \\uDA00 \\uDBFF';\n      assert.strictEqual('\\'\\\\uD800 \\\\uDA00 \\\\uDBFF\\'', Platform.StringUtilities.formatAsJSLiteral(inputString));\n    });\n\n    it('should escape lone trail surrogates', () => {\n      const inputString = '\\uDC00 \\uDEEE \\uDFFF';\n      assert.strictEqual('\\'\\\\uDC00 \\\\uDEEE \\\\uDFFF\\'', Platform.StringUtilities.formatAsJSLiteral(inputString));\n    });\n\n    it('should not escape valid surrogate pairs', () => {\n      const inputString = '\\uD800\\uDC00 \\uDA00\\uDEEE \\uDBFF\\uDFFF';\n      assert.strictEqual(`'${inputString}'`, Platform.StringUtilities.formatAsJSLiteral(inputString));\n    });\n\n    it('should escape invalid surrogate pairs', () => {\n      const inputString = '\\uDC00\\uD800 \\uDA00\\uDA00 \\uDEEE\\uDEEE';\n      const expectedString = '\\'\\\\uDC00\\\\uD800 \\\\uDA00\\\\uDA00 \\\\uDEEE\\\\uDEEE\\'';\n      assert.strictEqual(expectedString, Platform.StringUtilities.formatAsJSLiteral(inputString));\n    });\n\n    it('escapes whitespace characters appropriately', () => {\n      const inputString =\n          '\\t\\n\\v\\f\\r \\x85\\xA0\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000';\n      const expectedString =\n          '\\\\t\\\\n\\\\v\\\\f\\\\r \\\\x85\\xA0\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000';\n      assert.strictEqual('\\'' + expectedString + '\\'', Platform.StringUtilities.formatAsJSLiteral(inputString));\n    });\n\n    it('escapes problematic script tags', () => {\n      const inputString = '<!-- <script </script';\n      const expectedString = String.raw`\\x3C!-- \\x3Cscript \\x3C/script`;\n      assert.strictEqual('\\'' + expectedString + '\\'', Platform.StringUtilities.formatAsJSLiteral(inputString));\n    });\n\n    it('escapes \\\\x00-\\\\x1F and \\\\x7F-\\\\x9F', () => {\n      const inputStrings = [\n        '\\x00', '\\x01', '\\x02', '\\x03', '\\x04', '\\x05', '\\x06', '\\x07', '\\b',   '\\v',   '\\f',   '\\x0E', '\\x0F',\n        '\\x10', '\\x11', '\\x12', '\\x13', '\\x14', '\\x15', '\\x16', '\\x17', '\\x18', '\\x19', '\\x1A', '\\x1B', '\\x1C',\n        '\\x1D', '\\x1E', '\\x1F', '\\x80', '\\x81', '\\x82', '\\x83', '\\x84', '\\x85', '\\x86', '\\x87', '\\x88', '\\x89',\n        '\\x8A', '\\x8B', '\\x8C', '\\x8D', '\\x8E', '\\x8F', '\\x90', '\\x91', '\\x92', '\\x93', '\\x94', '\\x95', '\\x96',\n        '\\x97', '\\x98', '\\x99', '\\x9A', '\\x9B', '\\x9C', '\\x9D', '\\x9E', '\\x9F',\n      ];\n      const expectedStrings = [\n        '\\'\\\\x00\\'', '\\'\\\\x01\\'', '\\'\\\\x02\\'', '\\'\\\\x03\\'', '\\'\\\\x04\\'', '\\'\\\\x05\\'', '\\'\\\\x06\\'', '\\'\\\\x07\\'',\n        '\\'\\\\b\\'',   '\\'\\\\v\\'',   '\\'\\\\f\\'',   '\\'\\\\x0E\\'', '\\'\\\\x0F\\'', '\\'\\\\x10\\'', '\\'\\\\x11\\'', '\\'\\\\x12\\'',\n        '\\'\\\\x13\\'', '\\'\\\\x14\\'', '\\'\\\\x15\\'', '\\'\\\\x16\\'', '\\'\\\\x17\\'', '\\'\\\\x18\\'', '\\'\\\\x19\\'', '\\'\\\\x1A\\'',\n        '\\'\\\\x1B\\'', '\\'\\\\x1C\\'', '\\'\\\\x1D\\'', '\\'\\\\x1E\\'', '\\'\\\\x1F\\'', '\\'\\\\x80\\'', '\\'\\\\x81\\'', '\\'\\\\x82\\'',\n        '\\'\\\\x83\\'', '\\'\\\\x84\\'', '\\'\\\\x85\\'', '\\'\\\\x86\\'', '\\'\\\\x87\\'', '\\'\\\\x88\\'', '\\'\\\\x89\\'', '\\'\\\\x8A\\'',\n        '\\'\\\\x8B\\'', '\\'\\\\x8C\\'', '\\'\\\\x8D\\'', '\\'\\\\x8E\\'', '\\'\\\\x8F\\'', '\\'\\\\x90\\'', '\\'\\\\x91\\'', '\\'\\\\x92\\'',\n        '\\'\\\\x93\\'', '\\'\\\\x94\\'', '\\'\\\\x95\\'', '\\'\\\\x96\\'', '\\'\\\\x97\\'', '\\'\\\\x98\\'', '\\'\\\\x99\\'', '\\'\\\\x9A\\'',\n        '\\'\\\\x9B\\'', '\\'\\\\x9C\\'', '\\'\\\\x9D\\'', '\\'\\\\x9E\\'', '\\'\\\\x9F\\'',\n      ];\n      assert.strictEqual(expectedStrings.join(), inputStrings.map(Platform.StringUtilities.formatAsJSLiteral).join());\n    });\n\n    it('escapes backslashes', () => {\n      const inputString = '\\\\';\n      const expectedString = String.raw`\\\\`;\n      assert.strictEqual('\\'' + expectedString + '\\'', Platform.StringUtilities.formatAsJSLiteral(inputString));\n    });\n  });\n\n  describe('findUnclosedCssQuote', () => {\n    it('correctly finds unclosed quotes', () => {\n      assert.strictEqual(Platform.StringUtilities.findUnclosedCssQuote('\\'de'), Platform.StringUtilities.SINGLE_QUOTE);\n      assert.strictEqual(\n          Platform.StringUtilities.findUnclosedCssQuote('abc\\'de\\'f\\'g'), Platform.StringUtilities.SINGLE_QUOTE);\n      assert.strictEqual(\n          Platform.StringUtilities.findUnclosedCssQuote('abc\\\\\\'de\\'fg'), Platform.StringUtilities.SINGLE_QUOTE);\n      assert.strictEqual(\n          Platform.StringUtilities.findUnclosedCssQuote('\\'ab\"c\\'de\\\\\\'f\\'g'), Platform.StringUtilities.SINGLE_QUOTE);\n      assert.strictEqual(Platform.StringUtilities.findUnclosedCssQuote('\"de'), Platform.StringUtilities.DOUBLE_QUOTE);\n      assert.strictEqual(\n          Platform.StringUtilities.findUnclosedCssQuote('a\\\\\"b\\\\\"\"c\\'de\\'f\\'g'), Platform.StringUtilities.DOUBLE_QUOTE);\n      assert.strictEqual(\n          Platform.StringUtilities.findUnclosedCssQuote('\"ab\"c\"de\\\\\\'f\\'g'), Platform.StringUtilities.DOUBLE_QUOTE);\n      assert.strictEqual(Platform.StringUtilities.findUnclosedCssQuote('a'), '');\n      assert.strictEqual(Platform.StringUtilities.findUnclosedCssQuote('\"ab\"c\\'de\\'f'), '');\n      assert.strictEqual(Platform.StringUtilities.findUnclosedCssQuote('\"a\\\\\\'b\"c\\\\\\'de\\'f\\\\\\'\\''), '');\n    });\n  });\n\n  describe('countUnmatchedLeftParentheses', () => {\n    it('correctly counts unmatched left parentheses', () => {\n      assert.strictEqual(Platform.StringUtilities.countUnmatchedLeftParentheses('a(b'), 1);\n      assert.strictEqual(Platform.StringUtilities.countUnmatchedLeftParentheses('a(b)'), 0);\n      assert.strictEqual(Platform.StringUtilities.countUnmatchedLeftParentheses(')a(b)'), 0);\n      assert.strictEqual(Platform.StringUtilities.countUnmatchedLeftParentheses(')a(()bc(d(f)('), 3);\n    });\n  });\n\n  describe('sprintf', () => {\n    it('correctly deals with empty format string', () => {\n      assert.strictEqual(Platform.StringUtilities.sprintf(''), '');\n      assert.strictEqual(Platform.StringUtilities.sprintf('', 1), '');\n    });\n\n    it('replaces %% with %', () => {\n      assert.strictEqual(Platform.StringUtilities.sprintf('%%s %%d %%f'), '%s %d %f');\n    });\n\n    it('correctly substitutes %d', () => {\n      assert.strictEqual(Platform.StringUtilities.sprintf('%d', NaN), '0');\n      assert.strictEqual(Platform.StringUtilities.sprintf('%d days', 1.5), '1 days');\n    });\n\n    it('correctly substitutes %d with precision', () => {\n      assert.strictEqual(Platform.StringUtilities.sprintf('%.1d', 2), '2');\n      assert.strictEqual(Platform.StringUtilities.sprintf('%.2d', 3), '03');\n      assert.strictEqual(Platform.StringUtilities.sprintf('%.2d', 333), '333');\n    });\n\n    it('correctly substitutes %f', () => {\n      assert.strictEqual(Platform.StringUtilities.sprintf('%f', NaN), '0');\n      assert.strictEqual(Platform.StringUtilities.sprintf('%f', 1), '1');\n    });\n\n    it('correctly substitutes %f with precision', () => {\n      assert.strictEqual(Platform.StringUtilities.sprintf('%.2f', NaN), '0.00');\n      assert.strictEqual(Platform.StringUtilities.sprintf('%.2f', 1), '1.00');\n      assert.strictEqual(Platform.StringUtilities.sprintf('%.2f', 1.23456), '1.23');\n      assert.strictEqual(Platform.StringUtilities.sprintf('%.3f', 1.23456), '1.235');\n    });\n\n    it('correctly substitutes %s', () => {\n      assert.strictEqual(Platform.StringUtilities.sprintf('Hello %s!', 'World'), 'Hello World!');\n      assert.strictEqual(Platform.StringUtilities.sprintf('Hello %s!', '%d', 1), 'Hello %d!');\n    });\n\n    it('correctly substitutes %s with precision', () => {\n      assert.strictEqual(Platform.StringUtilities.sprintf('Hello %.1s!', 'World'), 'Hello W!');\n      assert.strictEqual(Platform.StringUtilities.sprintf('Hello %.10s!', 'World'), 'Hello World!');\n    });\n\n    it('triggers correct type conversion', () => {\n      const obj = {\n        toString() {\n          return '5';\n        },\n        valueOf() {\n          return 6;\n        },\n      };\n      assert.strictEqual(Platform.StringUtilities.sprintf('%d', obj), '6');\n      assert.strictEqual(Platform.StringUtilities.sprintf('%.2f', obj), '6.00');\n      assert.strictEqual(Platform.StringUtilities.sprintf('%s', obj), '5');\n    });\n\n    it('deals with parameter indices', () => {\n      assert.strictEqual(Platform.StringUtilities.sprintf('%2$s %1$s!', 'World', 'Hello'), 'Hello World!');\n      assert.throws(() => Platform.StringUtilities.sprintf('%0$s', 'World'));\n    });\n\n    it('signals error when too few parameters are given', () => {\n      assert.throws(() => Platform.StringUtilities.sprintf('%2$s', 'World'));\n      assert.throws(() => Platform.StringUtilities.sprintf('%2$s %s!', 'World', 'Hello'));\n      assert.throws(() => Platform.StringUtilities.sprintf('%s %d', 'World'));\n    });\n  });\n\n  describe('LowerCaseString', () => {\n    function fnExpectingLowerCaseString(lowerCaseString: Platform.StringUtilities.LowerCaseString): void {\n      lowerCaseString;\n    }\n\n    // @ts-expect-error Passing a plain string when LowerCaseString is expected\n    fnExpectingLowerCaseString('Foo');\n\n    const lower = Platform.StringUtilities.toLowerCaseString('lower case string');\n    fnExpectingLowerCaseString(lower);\n  });\n\n  describe('replaceLast', () => {\n    it('should return the input string when the search is not found', () => {\n      const output = Platform.StringUtilities.replaceLast('input', 'search', 'repl');\n      assert.strictEqual(output, 'input');\n    });\n\n    it('should replace the occurrance when the search exists inside the input', () => {\n      const output = Platform.StringUtilities.replaceLast('input', 'pu', 'r');\n      assert.strictEqual(output, 'inrt');\n    });\n\n    it('should replace the last occurrence when there are multiple matches', () => {\n      const output = Platform.StringUtilities.replaceLast('inpuput', 'pu', 'r');\n      assert.strictEqual(output, 'inpurt');\n    });\n  });\n\n  describe('stringifyWithPrecision', () => {\n    it('should stringify with 2 precision if precision argument is not given', () => {\n      assert.strictEqual('0.69', Platform.StringUtilities.stringifyWithPrecision(0.685733));\n    });\n\n    it('should stringify with given precision', () => {\n      assert.strictEqual('0.686', Platform.StringUtilities.stringifyWithPrecision(0.685733, 3));\n    });\n  });\n\n  describe('concatBase64', () => {\n    it('correctly concatenates two base64 strings', () => {\n      const str = 'This is a small sample sentence for encoding.';\n      const strAsBase64 = window.btoa(str);\n\n      for (let i = 0; i < str.length; ++i) {\n        const lhs = window.btoa(str.substring(0, i));\n        const rhs = window.btoa(str.substring(i));\n\n        assert.strictEqual(Platform.StringUtilities.concatBase64(lhs, rhs), strAsBase64);\n      }\n    });\n  });\n\n  describe('toKebabCase', () => {\n    const toKebabCase = Platform.StringUtilities.toKebabCase;\n    it('should convert camelCase to kebab-case', () => {\n      assert.strictEqual(toKebabCase('activeKeybindSet'), 'active-keybind-set');\n    });\n\n    it('should convert PascalCase to kebab-case', () => {\n      assert.strictEqual(toKebabCase('MediaPanelSplitViewState'), 'media-panel-split-view-state');\n    });\n\n    it('should convert snake_case to kebab-case', () => {\n      assert.strictEqual(toKebabCase('recorder_preferred_copy_format'), 'recorder-preferred-copy-format');\n    });\n\n    it('should convert UPPER_SNAKE_CASE to kebab-case', () => {\n      assert.strictEqual(toKebabCase('REGULAR_BREAKPOINT'), 'regular-breakpoint');\n    });\n\n    it('should handle uppercase acronyms as words', () => {\n      assert.strictEqual(toKebabCase('showUAShadowDOM'), 'show-ua-shadow-dom');\n    });\n\n    it('should handle uppercase acronyms as words', () => {\n      assert.strictEqual(toKebabCase('showUAShadowDOM'), 'show-ua-shadow-dom');\n    });\n\n    it('should preserve \\'.\\' characters', () => {\n      assert.strictEqual(\n          toKebabCase('InspectorView.screencastSplitViewState'), 'inspector-view.screencast-split-view-state');\n      assert.strictEqual(toKebabCase('version1.2.3'), 'version-1.2.3');\n    });\n\n    it('should handle numeronyms', () => {\n      assert.strictEqual(toKebabCase('lighthouse.cat_a11y'), 'lighthouse.cat-a11y');\n      assert.strictEqual(toKebabCase('i18n'), 'i18n');\n      assert.strictEqual(toKebabCase('timeline-v8-runtime-call-stats'), 'timeline-v8-runtime-call-stats');\n    });\n\n    it('should handle numbers', () => {\n      assert.strictEqual(toKebabCase('Margin: 2px'), 'margin-2px');\n      assert.strictEqual(toKebabCase('Margin2px'), 'margin-2px');\n      assert.strictEqual(toKebabCase('Layers 3D display'), 'layers-3d-display');\n      assert.strictEqual(toKebabCase('perfmonActiveIndicators2'), 'perfmon-active-indicators-2');\n      assert.strictEqual(\n          toKebabCase('HideIssueByCodeSetting-Experiment-2021'), 'hide-issue-by-code-setting-experiment-2021');\n    });\n\n    it('should handle mixed cases', () => {\n      assert.strictEqual(toKebabCase('CamelCase_with.DOTS123'), 'camel-case-with.dots-123');\n    });\n  });\n});\n"]}