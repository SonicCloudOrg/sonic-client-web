{"version":3,"file":"NumberUtilities.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/platform/NumberUtilities.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from './platform.js';\n\ndescribe('NumberUtilities', () => {\n  describe('clamp', () => {\n    it('takes the lower bound if the number is smaller', () => {\n      assert.strictEqual(5, Platform.NumberUtilities.clamp(1, 5, 10));\n    });\n\n    it('takes the upper bound if the number is larger', () => {\n      assert.strictEqual(10, Platform.NumberUtilities.clamp(20, 5, 10));\n    });\n\n    it('returns the original number if it is in bounds', () => {\n      assert.strictEqual(7, Platform.NumberUtilities.clamp(7, 5, 10));\n    });\n  });\n\n  describe('mod', () => {\n    it('returns the remainder', () => {\n      const result = Platform.NumberUtilities.mod(12, 5);\n      assert.strictEqual(result, 2);\n    });\n  });\n\n  describe('bytesToString', () => {\n    it('formats for < 1000 bytes', () => {\n      assert.deepEqual(Platform.NumberUtilities.bytesToString(50), '50\\xA0B');\n    });\n\n    it('formats for < 100 kilobytes', () => {\n      assert.deepEqual(Platform.NumberUtilities.bytesToString(5 * 1000), '5.0\\xA0kB');\n    });\n\n    it('formats for < 1000 kilobytes', () => {\n      assert.deepEqual(Platform.NumberUtilities.bytesToString(500 * 1000), '500\\xA0kB');\n    });\n\n    it('formats for < 100 megabytes', () => {\n      const oneAndAHalfMegabytes = 1500 * 1000;\n      assert.deepEqual(Platform.NumberUtilities.bytesToString(oneAndAHalfMegabytes), '1.5\\xA0MB');\n    });\n\n    it('formats for > 100 megabytes', () => {\n      const oneMegabyte = 1000 * 1000;\n      const twoHundredAndTenMegabytes = oneMegabyte * 210;\n      assert.deepEqual(Platform.NumberUtilities.bytesToString(twoHundredAndTenMegabytes), '210\\xA0MB');\n    });\n  });\n\n  describe('toFixedIfFloating', () => {\n    it('converts a decimal to a fixed string with 3 decimal places', () => {\n      const output = Platform.NumberUtilities.toFixedIfFloating('1.23456');\n      assert.strictEqual(output, '1.235');\n    });\n\n    it('leaves whole numbers alone', () => {\n      const output = Platform.NumberUtilities.toFixedIfFloating('233');\n      assert.strictEqual(output, '233');\n    });\n\n    it('leaves values that parse to NaN alone', () => {\n      const output = Platform.NumberUtilities.toFixedIfFloating('SoNotANumber');\n      assert.strictEqual(output, 'SoNotANumber');\n    });\n\n    it('leaves falsey values alone', () => {\n      const output = Platform.NumberUtilities.toFixedIfFloating('');\n      assert.strictEqual(output, '');\n    });\n  });\n\n  describe('floor', () => {\n    it('it works for integers', () => {\n      assert.strictEqual(10, Platform.NumberUtilities.floor(10));\n    });\n\n    it('it rounds down float with precision', () => {\n      assert.strictEqual(1.1, Platform.NumberUtilities.floor(1.1111, 1));\n      assert.strictEqual(1.11, Platform.NumberUtilities.floor(1.1111, 2));\n      assert.strictEqual(1.9, Platform.NumberUtilities.floor(1.9999, 1));\n      assert.strictEqual(1.99, Platform.NumberUtilities.floor(1.9999, 2));\n    });\n  });\n\n  describe('greatestCommonDivisor', () => {\n    it('it works', () => {\n      assert.strictEqual(0, Platform.NumberUtilities.greatestCommonDivisor(0, 0));\n      assert.strictEqual(1, Platform.NumberUtilities.greatestCommonDivisor(1, 0));\n      assert.strictEqual(1, Platform.NumberUtilities.greatestCommonDivisor(0, 1));\n      assert.strictEqual(200, Platform.NumberUtilities.greatestCommonDivisor(600, 800));\n      assert.strictEqual(200, Platform.NumberUtilities.greatestCommonDivisor(800, 600));\n      assert.strictEqual(-200, Platform.NumberUtilities.greatestCommonDivisor(-800, -600));\n      assert.strictEqual(1, Platform.NumberUtilities.greatestCommonDivisor(0.5, 0.5));\n    });\n  });\n\n  describe('aspectRatio', () => {\n    it('it works', () => {\n      assert.strictEqual('0∶0', Platform.NumberUtilities.aspectRatio(0, 0));\n      assert.strictEqual('0∶1', Platform.NumberUtilities.aspectRatio(0, 1));\n      assert.strictEqual('1∶0', Platform.NumberUtilities.aspectRatio(1, 0));\n      assert.strictEqual('1∶1', Platform.NumberUtilities.aspectRatio(1, 1));\n      assert.strictEqual('4∶3', Platform.NumberUtilities.aspectRatio(800, 600));\n      assert.strictEqual('3∶4', Platform.NumberUtilities.aspectRatio(600, 800));\n      assert.strictEqual('4∶3', Platform.NumberUtilities.aspectRatio(-800, -600));\n      assert.strictEqual('16∶9', Platform.NumberUtilities.aspectRatio(5120, 2880));\n      assert.strictEqual('16∶10', Platform.NumberUtilities.aspectRatio(2560, 1600));\n    });\n  });\n\n  describe('numberWithThousandSeparator', () => {\n    it('separates 1000', () => {\n      const inputNumber = 1000;\n      const outputString = Platform.NumberUtilities.withThousandsSeparator(inputNumber);\n      assert.strictEqual(outputString, '1\\xA0000');\n    });\n\n    it('does not separate 1', () => {\n      const inputNumber = 1;\n      const outputString = Platform.NumberUtilities.withThousandsSeparator(inputNumber);\n      assert.strictEqual(outputString, '1');\n    });\n\n    it('separates a billion', () => {\n      const inputNumber = 7654321;\n      const outputString = Platform.NumberUtilities.withThousandsSeparator(inputNumber);\n      assert.strictEqual(outputString, '7\\xA0654\\xA0321');\n    });\n\n    it('separates decimal points', () => {\n      const inputNumber = 0.0001;\n      const outputString = Platform.NumberUtilities.withThousandsSeparator(inputNumber);\n      assert.strictEqual(outputString, '0.0\\xA0001');\n    });\n  });\n});\n"]}