{"version":3,"file":"NodeURL.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/protocol_client/NodeURL.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../host/host.js';\n\nimport * as ProtocolClient from './protocol_client.js';\n\ndescribe('NodeURL', () => {\n  describe('platform detection for paths', () => {\n    it('works correctly on windows', () => {\n      const isWindows = true;\n      assert.isTrue(ProtocolClient.NodeURL.NodeURL.isPlatformPath('c:\\\\prog\\\\foobar.js', isWindows));\n      assert.isFalse(ProtocolClient.NodeURL.NodeURL.isPlatformPath('/usr/local/foobar.js', isWindows));\n    });\n\n    it('works correctly on linux', () => {\n      const isWindows = false;\n      assert.isFalse(ProtocolClient.NodeURL.NodeURL.isPlatformPath('c:\\\\prog\\\\foobar.js', isWindows));\n      assert.isTrue(ProtocolClient.NodeURL.NodeURL.isPlatformPath('/usr/local/foobar.js', isWindows));\n    });\n  });\n\n  describe('patch', () => {\n    const url = Host.Platform.isWin() ? 'C:\\\\prog\\\\foobar.js' : '/usr/local/home/prog/foobar.js';\n    const validPatchedUrl =\n        Host.Platform.isWin() ? 'file:///C:/prog/foobar.js' : 'file:///usr/local/home/prog/foobar.js';\n\n    it('does patch url fields', () => {\n      const object = {url, result: null};\n\n      ProtocolClient.NodeURL.NodeURL.patch(object);\n\n      assert.strictEqual(object.url, validPatchedUrl);\n    });\n\n    it('does not patch the url of the result', () => {\n      const object = {\n        url: '',\n        result: {\n          result: {\n            value: {url},\n          },\n        },\n      };\n\n      ProtocolClient.NodeURL.NodeURL.patch(object);\n\n      assert.strictEqual(object.result.result.value.url, url);\n    });\n\n    it('does patch all urls in an example protocol message', () => {\n      const object = {\n        exceptionDetails: {\n          url,\n          stackTrace: {\n            callFrames: [{\n              columnNumber: 0,\n              functionName: '',\n              lineNumber: 0,\n              scriptId: '0',\n              url,\n            }],\n          },\n        },\n      };\n\n      ProtocolClient.NodeURL.NodeURL.patch(object as unknown as {url: string});\n\n      assert.strictEqual(object.exceptionDetails.url, validPatchedUrl);\n      assert.strictEqual(object.exceptionDetails.stackTrace.callFrames[0].url, validPatchedUrl);\n    });\n  });\n});\n"]}