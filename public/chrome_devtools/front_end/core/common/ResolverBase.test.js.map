{"version":3,"file":"ResolverBase.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/common/ResolverBase.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from './common.js';\n\nclass TestClass {}\n\nexport class ResolverTestImpl extends Common.ResolverBase.ResolverBase<string, TestClass> {\n  items = new Map<string, TestClass>();\n  currentlyListening = false;\n\n  constructor(id?: string, obj?: TestClass) {\n    super();\n    if (id !== undefined && obj !== undefined) {\n      this.items.set(id, obj);\n    }\n  }\n\n  protected getForId(id: string): TestClass|null {\n    return this.items.get(id) || null;\n  }\n\n  protected override startListening(): void {\n    this.currentlyListening = true;\n  }\n\n  protected override stopListening(): void {\n    this.currentlyListening = false;\n  }\n\n  assertIsListening(): void {\n    assert.isTrue(this.currentlyListening, 'Expected to be listening');\n  }\n\n  assertIsNotListening(): void {\n    assert.isFalse(this.currentlyListening, 'Expected to be listening');\n  }\n\n  override onResolve(id: string, obj: TestClass) {\n    super.onResolve(id, obj);\n  }\n}\n\ndescribe('ResolverBase', () => {\n  const id = 'foo';\n  const testObj = new TestClass();\n\n  describe('tryGet', () => {\n    it('should resolve a known object', () => {\n      const resolver = new ResolverTestImpl(id, testObj);\n      const obj = resolver.tryGet(id, () => {\n        throw new Error('This should not get called');\n      });\n      resolver.assertIsNotListening();\n      assert.strictEqual(obj, testObj);\n    });\n\n    it('should not resolve an unknown object', () => {\n      const resolver = new ResolverTestImpl();\n      const obj = resolver.tryGet(id, () => {\n        throw new Error('This should not get called');\n      });\n      resolver.assertIsListening();\n      assert.strictEqual(obj, null);\n      resolver.clear();\n    });\n\n    it('should resolve a previously unknown object when it becomes available', async () => {\n      const resolver = new ResolverTestImpl();\n      const waitForCall = new Promise<TestClass>(resolve => {\n        const obj = resolver.tryGet(id, resolve);\n        assert.strictEqual(obj, null);\n      });\n      resolver.assertIsListening();\n      resolver.onResolve(id, testObj);\n      const obj = await waitForCall;\n      resolver.assertIsNotListening();\n      assert.strictEqual(obj, testObj);\n    });\n  });\n\n  describe('waitFor', () => {\n    it('should resolve an existing object', async () => {\n      const resolver = new ResolverTestImpl(id, testObj);\n      const obj = await resolver.waitFor(id);\n      resolver.assertIsNotListening();\n      assert.strictEqual(obj, testObj);\n    });\n\n    it('should reject the promise after `clear` has been called', async () => {\n      const resolver = new ResolverTestImpl();\n      const obj = resolver.waitFor(id);\n      resolver.assertIsListening();\n      resolver.clear();\n      resolver.assertIsNotListening();\n      try {\n        await obj;\n      } catch (e) {\n        return;\n      }\n      assert.fail('Expected `await obj` to throw.');\n    });\n\n    it('should resolve a previously unknown object when it becomes available', async () => {\n      const resolver = new ResolverTestImpl();\n      const objPromise = resolver.waitFor(id);\n      resolver.assertIsListening();\n      resolver.onResolve(id, testObj);\n      const obj = await objPromise;\n      resolver.assertIsNotListening();\n      assert.strictEqual(obj, obj);\n    });\n  });\n});\n"]}