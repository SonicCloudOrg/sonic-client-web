{"version":3,"file":"Color.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/common/Color.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from './common.js';\n\nconst Color = Common.Color;\n\nconst parseAndAssertNotNull = (value: string) => {\n  const result = Color.parse(value);\n  assert.isNotNull(result, `failed to parse '${value} as color`);\n  return result.asLegacyColor();\n};\n\nconst deepCloseTo = (actual: number[], expected: number[], delta: number, message?: string) => {\n  for (let i = 0; i <= 3; ++i) {\n    assert.closeTo(actual[i], expected[i], delta, `in component ${i}${message ? `: ${message}` : ''}`);\n  }\n};\n\nconst tolerance = 0.0001;\nconst colorSpaceConversionTolerance = 0.001;\n\ndescribe('Color', () => {\n  it('can be instantiated without issues', () => {\n    const color = new Color.Legacy([0.5, 0.5, 0.5, 0.5], Color.Format.RGBA, 'testColor');\n    assert.deepEqual(color.rgba(), [0.5, 0.5, 0.5, 0.5], 'RGBA array was not set correctly');\n    assert.strictEqual(color.getAuthoredText(), 'testColor', 'original text was not set correctly');\n    assert.strictEqual(color.asString(), 'rgb(128 128 128 / 50%)');\n    assert.strictEqual(color.format(), Color.Format.RGBA, 'format was not set correctly');\n  });\n\n  it('defaults RGBA value to 0 if the RGBA initializing value given was negative', () => {\n    const color = new Color.Legacy([-0.5, 0.5, 0.5, 0.5], Color.Format.RGBA, 'testColor');\n    assert.deepEqual(color.rgba(), [0, 0.5, 0.5, 0.5], 'RGBA array was not set correctly');\n    assert.strictEqual(color.asString(), 'rgb(0 128 128 / 50%)', 'original text was not ignored as expected');\n    assert.strictEqual(color.format(), Color.Format.RGBA, 'format was not set correctly');\n  });\n\n  it('defaults RGBA value to 1 if the RGBA initializing value given was above one', () => {\n    const color = new Color.Legacy([1.1, 0.5, 0.5, 0.5], Color.Format.RGBA, 'testColor');\n    assert.deepEqual(color.rgba(), [1, 0.5, 0.5, 0.5], 'RGBA array was not set correctly');\n    assert.strictEqual(color.asString(), 'rgb(255 128 128 / 50%)', 'original text was not ignored as expected');\n    assert.strictEqual(color.format(), Color.Format.RGBA, 'format was not set correctly');\n  });\n\n  it('is able to create a color class from an HSVA value', () => {\n    const color = Color.Legacy.fromHSVA([0.5, 0.5, 0.5, 100]);\n    assert.deepEqual(color.rgba(), [0.25, 0.49999999999999994, 0.5, 1], 'RGBA array was not set correctly');\n  });\n\n  it('is able to return the HSVA value of a color', () => {\n    const color = new Color.Legacy([0.5, 0.5, 0.5, 0.5], Color.Format.RGBA, 'testColor');\n    const hsva = color.as(Common.Color.Format.HSL).hsva();\n    assert.deepEqual(hsva, [0, 0, 0.5, 0.5], 'HSVA was not calculated correctly');\n  });\n\n  it('is able to return a lighter luminance according to a given contrast value', () => {\n    const result = Color.desiredLuminance(0.2, 2, true);\n    assert.strictEqual(result, 0.45, 'luminance was not calculated correctly');\n  });\n\n  it('is able to return a darker luminance according to a given contrast value', () => {\n    const result = Color.desiredLuminance(0.2, 2, false);\n    assert.strictEqual(result, 0.075, 'luminance was not calculated correctly');\n  });\n\n  it('is able to return a darker luminance if the lighter one falls out of the inclusive range [0, 1]', () => {\n    const result = Color.desiredLuminance(0.2, 5, true);\n    assert.strictEqual(result, 0, 'luminance was not calculated correctly');\n  });\n\n  it('is able to return canonical HSLA for a color', () => {\n    const color = new Color.Legacy([0.5, 0.5, 0.5, 0.5], Color.Format.RGBA, 'testColor');\n    const result = color.as(Common.Color.Format.HSL).canonicalHSLA();\n    assert.deepEqual(result, [0, 0, 50, 0.5], 'canonical HSLA was not calculated correctly');\n  });\n\n  it('is able to return canonical HWBA for a color', () => {\n    const color = new Color.Legacy([0.5, 0.5, 0.5, 0.5], Color.Format.RGBA, 'testColorGray');\n    const result = color.as(Color.Format.HWB).canonicalHWBA();\n    deepCloseTo(result, [0, 50, 50, 0.5], tolerance, 'canonical HWBA was not calculated correctly');\n  });\n\n  it('parses hex values', () => {\n    assert.deepEqual(parseAndAssertNotNull('#FF00FF').rgba(), [1, 0, 1, 1]);\n    assert.deepEqual(parseAndAssertNotNull('#F0F').rgba(), [1, 0, 1, 1]);\n    assert.deepEqual(parseAndAssertNotNull('#F0F0').rgba(), [1, 0, 1, 0]);\n    assert.deepEqual(parseAndAssertNotNull('#FF00FF00').rgba(), [1, 0, 1, 0]);\n  });\n\n  it('does not parse hex values with whitespace', () => {\n    assert.isNull(Color.parse('#FF00FF 00'));\n  });\n\n  it('parses nickname values', () => {\n    assert.deepEqual(parseAndAssertNotNull('red').rgba(), [1, 0, 0, 1]);\n  });\n\n  it('does not parse nickname values with whitespace', () => {\n    assert.isNull(Color.parse('blue red'));\n  });\n\n  it('parses rgb(a) values', () => {\n    const colorOne = parseAndAssertNotNull('rgb(255, 255, 0)');\n    assert.deepEqual(colorOne.rgba(), [1, 1, 0, 1]);\n\n    const colorTwo = parseAndAssertNotNull('rgba(0, 255, 255, 0.5)');\n    assert.deepEqual(colorTwo.rgba(), [0, 1, 1, 0.5]);\n\n    const colorThree = parseAndAssertNotNull('rgb(255 255 255)');\n    assert.deepEqual(colorThree.rgba(), [1, 1, 1, 1]);\n\n    const colorFour = parseAndAssertNotNull('rgb(10% 10% 10%)');\n    assert.deepEqual(colorFour.rgba(), [0.1, 0.1, 0.1, 1]);\n\n    const colorFive = parseAndAssertNotNull('rgb(10% 10% 10% / 0.4)');\n    assert.deepEqual(colorFive.rgba(), [0.1, 0.1, 0.1, 0.4]);\n\n    const colorSix = parseAndAssertNotNull('rgb(10% 10% 10% / 40%)');\n    assert.deepEqual(colorSix.rgba(), [0.1, 0.1, 0.1, 0.4]);\n  });\n\n  it('parses hsl(a) values', () => {\n    const colorOne = parseAndAssertNotNull('hsl(0, 100%, 50%)');\n    assert.deepEqual(colorOne.rgba(), [1, 0, 0, 1]);\n\n    const colorTwo = parseAndAssertNotNull('hsla(0, 100%, 50%, 0.5)');\n    assert.deepEqual(colorTwo.rgba(), [1, 0, 0, 0.5]);\n\n    const colorThree = parseAndAssertNotNull('hsla(50deg 100% 100% / 50%)');\n    assert.deepEqual(colorThree.rgba(), [1, 1, 1, 0.5]);\n\n    const colorFour = parseAndAssertNotNull('hsl(0 100% 50% / 0.5)');\n    assert.deepEqual(colorFour.rgba(), [1, 0, 0, 0.5]);\n\n    const colorFive = parseAndAssertNotNull('hsl(0 100% 50% / 50%)');\n    assert.deepEqual(colorFive.rgba(), [1, 0, 0, 0.5]);\n\n    const colorSix = parseAndAssertNotNull('hsl(0deg 100% 50% / 50%)');\n    assert.deepEqual(colorSix.rgba(), [1, 0, 0, 0.5]);\n  });\n\n  it('parses hwb values', () => {\n    const colorOne = parseAndAssertNotNull('hwb(300 0% 0%)');\n    deepCloseTo(colorOne.rgba(), [1, 0, 1, 1], tolerance);\n\n    const colorTwo = parseAndAssertNotNull('hwb(0 0% 0% / 0.5)');\n    deepCloseTo(colorTwo.rgba(), [1, 0, 0, 0.5], tolerance);\n\n    const colorThree = parseAndAssertNotNull('hwb(60deg 0% 0% / 50%)');\n    deepCloseTo(colorThree.rgba(), [1, 1, 0, 0.5], tolerance);\n\n    const colorFour = parseAndAssertNotNull('hwb(0deg 100% 0% / 0.2)');\n    deepCloseTo(colorFour.rgba(), [1, 1, 1, 0.2], tolerance);\n\n    const colorFive = parseAndAssertNotNull('hwb(180deg 0% 0%)');\n    deepCloseTo(colorFive.rgba(), [0, 1, 1, 1], tolerance);\n\n    const colorSix = parseAndAssertNotNull('hwb(240deg 0% 0% / 90%)');\n    deepCloseTo(colorSix.rgba(), [0, 0, 1, 0.9], tolerance);\n  });\n\n  it('parses lch values', () => {\n    // White in sRGB\n    const colorOne = parseAndAssertNotNull('lch(99 0.09 312)');\n    deepCloseTo(colorOne.rgba(), [0.989, 0.989, 0.989, 1], colorSpaceConversionTolerance);\n\n    // Parses out of sRGB gamut values too\n    const colorTwo = parseAndAssertNotNull('lch(99 112 312)');\n    deepCloseTo(colorTwo.rgba(), [1, 0.762, 1, 1], colorSpaceConversionTolerance);\n\n    // Parses none values too\n    const colorThree = parseAndAssertNotNull('lch(99 112 none)');\n    deepCloseTo(colorThree.rgba(), [1, 0.484, 1, 1], colorSpaceConversionTolerance);\n\n    // Parses syntax from Color Syntax mega list https://cdpn.io/pen/debug/RwyOyeq\n    const colorCases = [\n      ['lch(58% 32 241deg)', [0.2830, 0.5834, 0.7366, 1]],\n      ['lch(58 32 241deg)', [0.2830, 0.5834, 0.7366, 1]],\n      ['lch(58 32 241)', [0.2830, 0.5834, 0.7366, 1]],\n      ['lch(58% 32 241 / 50%)', [0.2830, 0.5834, 0.7366, 0.5]],\n      ['lch(58% 32 241 / .5)', [0.2830, 0.5834, 0.7366, 0.5]],\n      ['lch(100% 0 0)', [0.9999, 1.0001, 1.0000, 1]],\n      ['lch(100 0 0)', [0.9999, 1.0001, 1.0000, 1]],\n      ['lch(100 none none)', [0.9999, 1.0001, 1.0000, 1]],\n      ['lch(0% 0 0)', [0, 0, 0, 1]],\n      ['lch(0 0 0)', [0, 0, 0, 1]],\n      ['lch(none none none)', [0, 0, 0, 1]],\n    ];\n\n    for (const [syntax, expectedRgba] of colorCases) {\n      const color = parseAndAssertNotNull(syntax as string);\n      deepCloseTo(\n          color.rgba(), expectedRgba as number[], colorSpaceConversionTolerance,\n          'LCH parsing from syntax list is not correct');\n    }\n  });\n\n  // TODO(ergunsh): Add tests for `oklch` after clearing situation\n  it('parses lab values', () => {\n    // White in sRGB\n    const colorOne = parseAndAssertNotNull('lab(99 0 0)');\n    deepCloseTo(colorOne.rgba(), [0.989, 0.989, 0.989, 1], colorSpaceConversionTolerance);\n\n    // Parses out of sRGB gamut values too\n    const colorTwo = parseAndAssertNotNull('lab(99 58 64)');\n    deepCloseTo(colorTwo.rgba(), [1, 0.794, 0.508, 1], colorSpaceConversionTolerance);\n\n    // Parses none values too\n    const colorThree = parseAndAssertNotNull('lch(99 none none)');\n    deepCloseTo(colorThree.rgba(), [0.989, 0.989, 0.989, 1], colorSpaceConversionTolerance);\n\n    // Parses syntax from Color Syntax mega list https://cdpn.io/pen/debug/RwyOyeq\n    const colorCases = [\n      ['lab(58% -16 -30)', [0.2585, 0.5848, 0.7505, 1]],\n      ['lab(58 -16 -30)', [0.2585, 0.5848, 0.7505, 1]],\n      ['lab(58% -16 -30 / 50%)', [0.2585, 0.5848, 0.7505, 0.5]],\n      ['lab(58% -16 -30 / .5)', [0.2585, 0.5848, 0.7505, 0.5]],\n      ['lab(100% 0 0)', [1, 1, 1, 1]],\n      ['lab(100 0 0)', [1, 1, 1, 1]],\n      ['lab(100 none none)', [1, 1, 1, 1]],\n      ['lab(0% 0 0)', [0, 0, 0, 1]],\n      ['lab(0 0 0)', [0, 0, 0, 1]],\n      ['lab(none none none)', [0, 0, 0, 1]],\n    ];\n\n    for (const [syntax, expectedRgba] of colorCases) {\n      const color = parseAndAssertNotNull(syntax as string);\n      deepCloseTo(\n          color.rgba(), expectedRgba as number[], colorSpaceConversionTolerance,\n          'lab() parsing from syntax list is not correct');\n    }\n  });\n\n  // TODO(ergunsh): Add tests for `oklab` after clearing situation\n  it('parses color() values', () => {\n    // White in sRGB\n    const colorOne = parseAndAssertNotNull('color(srgb 100% 100% 100% / 50%)');\n    deepCloseTo(colorOne.rgba(), [1, 1, 1, 0.5], colorSpaceConversionTolerance);\n\n    const colorTwo = parseAndAssertNotNull('color(srgb 100% 100% 100%/50%)');\n    deepCloseTo(colorTwo.rgba(), [1, 1, 1, 0.5], colorSpaceConversionTolerance);\n\n    const colorThree = parseAndAssertNotNull('color(srgb 100% 100% 100%/ 50%)');\n    deepCloseTo(colorThree.rgba(), [1, 1, 1, 0.5], colorSpaceConversionTolerance);\n\n    const colorFour = parseAndAssertNotNull('color(srgb 100% 100% 100% /50%)');\n    deepCloseTo(colorFour.rgba(), [1, 1, 1, 0.5], colorSpaceConversionTolerance);\n\n    // Does not parse invalid syntax\n    const invalidSyntaxes = [\n      // Not known color space\n      'color(not-known-color-space)',\n      // Contains comma\n      'color(srgb, 100%)',\n      // Alpha is not at the end\n      'color(srgb / 50% 100%)',\n    ];\n\n    for (const invalidSyntax of invalidSyntaxes) {\n      assert.isNull(Color.parse(invalidSyntax));\n    }\n\n    // All defined color spaces are parsed\n    // srgb | srgb-linear | display-p3 | a98-rgb | prophoto-rgb | rec2020 | xyz | xyz-d50 | xyz-d65\n    const colorSpaceCases = [\n      'color(srgb)',\n      'color(srgb-linear)',\n      'color(display-p3)',\n      'color(a98-rgb)',\n      'color(prophoto-rgb)',\n      'color(rec2020)',\n      'color(xyz-d50)',\n      'color(xyz-d65)',\n    ];\n    for (const colorSpaceCase of colorSpaceCases) {\n      const color = Color.parse(colorSpaceCase);\n      assert.isNotNull(color);\n    }\n\n    // Parses correctly from syntax list\n    const colorCases = [\n      ['color(display-p3 34% 58% 73%)', [0.246, 0.587, 0.745, 1]],\n      ['color(display-p3 1 0.71 0.73)', [1, 0.695, 0.725, 1]],\n      ['color(display-p3 34% / 50%)', [0.3748, 0, 0, 0.5]],\n      ['color(rec2020 34% 58% 73%)', [0, 0.641, 0.774, 1]],\n      ['color(rec2020 .34 .58 .73 / .5)', [0, 0.641, 0.774, 0.5]],\n      ['color(a98-rgb 34% 58% 73% / 50%)', [0.1, 0.585, 0.741, 0.5]],\n      ['color(a98-rgb none none none)', [0, 0, 0, 1]],\n      ['color(a98-rgb 0)', [0, 0, 0, 1]],\n      ['color(xyz-d50 .22 .26 .53)', [0.0929, 0.584, 0.855, 1]],\n      ['color(xyz 100% 100% 100%)', [1, 0.977, 0.959, 1]],\n      ['color(xyz-d65 100% 100% 100%)', [1, 0.977, 0.959, 1]],\n    ];\n\n    for (const [syntax, expectedRgba] of colorCases) {\n      const color = parseAndAssertNotNull(syntax as string);\n      deepCloseTo(\n          color.rgba(), expectedRgba as number[], colorSpaceConversionTolerance,\n          `color() parsing from syntax list is not correct for ${syntax}`);\n    }\n  });\n\n  it('handles invalid values', () => {\n    assert.isNull(Color.parse('#FAFAFA       Trailing'));\n    assert.isNull(Color.parse('#FAFAFG'));\n    assert.isNull(Color.parse('gooseberry'));\n    assert.isNull(Color.parse('rgb(10% 10% 10% /)'));\n    assert.isNull(Color.parse('rgb(10% 10% 10% 0.4 40)'));\n    assert.isNull(Color.parse('hsl(0, carrot, 30%)'));\n    assert.isNull(Color.parse('hsl(0)'));\n    assert.isNull(Color.parse('hwb(0)'));\n    // Unlike HSL, HWB does not allow comma-separated input\n    assert.isNull(Color.parse('hwb(0%, 50%, 50%)'));\n    assert.isNull(Color.parse('rgb(255)'));\n    assert.isNull(Color.parse('rgba(1 golf 30)'));\n  });\n\n  it('is able to return whether or not the color has an alpha value', () => {\n    const color = new Color.Legacy([0.5, 0.5, 0.5, 0.5], Color.Format.RGBA, 'testColor');\n    assert.isTrue(color.hasAlpha(), 'the color should be considered to have an alpha value');\n  });\n\n  it('is able to detect the HEX format of a color with an alpha value', () => {\n    const color = new Color.Legacy([0.5, 0.5, 0.5, 0.5], Color.Format.RGBA, 'testColor');\n    const result = color.detectHEXFormat();\n    assert.strictEqual(result, 'hexa', 'format was not detected correctly');\n  });\n\n  it('is able to detect the HEX format of a color without an alpha value', () => {\n    const color = new Color.Legacy([0.5, 0.5, 0.5, 1], Color.Format.RGBA, 'testColor');\n    const result = color.detectHEXFormat();\n    assert.strictEqual(result, 'hex', 'format was not detected correctly');\n  });\n\n  it('is able to return the canonical RGBA of a color', () => {\n    const color = new Color.Legacy([0.5, 0.5, 0.5, 0.5], Color.Format.RGBA, 'testColor');\n    const result = color.canonicalRGBA();\n    assert.deepEqual(result, [128, 128, 128, 0.5], 'canonical RGBA was not returned correctly');\n  });\n\n  it('is able to return the nickname of a color', () => {\n    const color = new Color.Legacy([1, 0, 0, 1], Color.Format.RGBA, 'testColor');\n    const result = color.nickname();\n    assert.strictEqual(result, 'red', 'nickname was not returned correctly');\n  });\n\n  it('returns null as a nickname if the color was not recognized', () => {\n    const color = new Color.Legacy([0.5, 0.5, 0.5, 0.5], Color.Format.RGBA, 'testColor');\n    const result = color.nickname();\n    assert.isNull(result, 'nickname should be returned as Null');\n  });\n\n  it('is able to convert the color to a protocol RGBA', () => {\n    const color = new Color.Legacy([0.5, 0.5, 0.5, 0.5], Color.Format.RGBA, 'testColor');\n    const result = color.toProtocolRGBA();\n    assert.deepEqual(result, {r: 128, g: 128, b: 128, a: 0.5}, 'conversion to protocol RGBA was not correct');\n  });\n\n  it('is able to invert a color', () => {\n    const color = new Color.Legacy([1, 0, 0, 1], Color.Format.RGBA, 'testColor');\n    const result = color.invert().rgba();\n    assert.deepEqual(result, [0, 1, 1, 1], 'inversion was not successful');\n  });\n\n  it('is able to set the alpha value of a color', () => {\n    const color = new Color.Legacy([1, 0, 0, 1], Color.Format.RGBA, 'testColor');\n    const result = color.setAlpha(0.5).rgba();\n    assert.deepEqual(result, [1, 0, 0, 0.5], 'alpha value was not set correctly');\n  });\n\n  it('can blend with another color', () => {\n    const color = new Color.Legacy([1, 0, 0, 0.5], Color.Format.RGBA, 'testColor');\n    const otherColor = new Color.Legacy([0, 0, 1, 0.5], Color.Format.RGBA, 'testColor');\n    const result = color.blendWith(otherColor).rgba();\n    assert.deepEqual(result, [0.5, 0, 0.5, 0.75], 'color was not blended correctly');\n  });\n\n  it('returns the nickname when turned into a string if its format was \"nickname\"', () => {\n    const color = new Color.Legacy([1, 0, 0, 1], Color.Format.Nickname);\n    const result = color.asString();\n    assert.strictEqual(result, 'red', 'color was not converted to a string correctly');\n  });\n\n  it('returns the HEX value when turned into a string if its format was \"hex\"', () => {\n    const color = new Color.Legacy([1, 0, 0, 1], Color.Format.HEX);\n    const result = color.asString();\n    assert.strictEqual(result, '#ff0000', 'color was not converted to a string correctly');\n  });\n\n  it('returns the short HEX value when turned into a string if its format was \"shorthex\"', () => {\n    const color = new Color.Legacy([1, 0, 0, 1], Color.Format.ShortHEX);\n    const result = color.asString();\n    assert.strictEqual(result, '#f00', 'color was not converted to a string correctly');\n  });\n\n  it('returns the HEXA value when turned into a string if its format was \"hexa\"', () => {\n    const color = new Color.Legacy([1, 0, 0, 1], Color.Format.HEXA);\n    const result = color.asString();\n    assert.strictEqual(result, '#ff0000ff', 'color was not converted to a string correctly');\n  });\n\n  it('returns the short HEXA value when turned into a string if its format was \"shorthexa\"', () => {\n    const color = new Color.Legacy([1, 0, 0, 1], Color.Format.ShortHEXA);\n    const result = color.asString();\n    assert.strictEqual(result, '#f00f', 'color was not converted to a string correctly');\n  });\n\n  it('returns the RGB value when turned into a string if its format was \"rgb\"', () => {\n    const color = new Color.Legacy([1, 0, 0, 1], Color.Format.RGB);\n    const result = color.asString();\n    assert.strictEqual(result, 'rgb(255 0 0)', 'color was not converted to a string correctly');\n  });\n\n  it('returns the RGBA value when turned into a string if its format was \"rgba\"', () => {\n    const color = new Color.Legacy([1, 0, 0, 0.42], Color.Format.RGBA);\n    const result = color.asString();\n    assert.strictEqual(result, 'rgb(255 0 0 / 42%)', 'color was not converted to a string correctly');\n  });\n\n  it('omits the alpha value when it’s 100% if its format was \"rgba\"', () => {\n    const color = new Color.Legacy([1, 0, 0, 1], Color.Format.RGBA);\n    const result = color.asString();\n    assert.strictEqual(result, 'rgb(255 0 0)', 'color was not converted to a string correctly');\n  });\n\n  it('returns the HSL value when turned into a string if its format was \"hsl\"', () => {\n    const color = new Color.Legacy([1, 0, 0, 1], Color.Format.RGB);\n    const result = color.asString(Common.Color.Format.HSL);\n    assert.strictEqual(result, 'hsl(0deg 100% 50%)', 'color was not converted to a string correctly');\n  });\n\n  it('returns the HSLA value when turned into a string if its format was \"hsla\"', () => {\n    const color = new Color.Legacy([1, 0, 0, 0.42], Color.Format.RGBA);\n    const result = color.asString(Common.Color.Format.HSL);\n    assert.strictEqual(result, 'hsl(0deg 100% 50% / 42%)', 'color was not converted to a string correctly');\n  });\n\n  it('omits the alpha value when it’s 100% if its format was \"hsla\"', () => {\n    const color = new Color.Legacy([1, 0, 0, 1], Color.Format.RGBA);\n    const result = color.asString(Common.Color.Format.HSLA);\n    assert.strictEqual(result, 'hsl(0deg 100% 50%)', 'color was not converted to a string correctly');\n  });\n\n  it('returns the HWB value when turned into a string if its format was \"hwb\"', () => {\n    const color = new Color.Legacy([0, 0, 1, 1], Color.Format.RGBA).as(Color.Format.HWB);\n    const result = color.asString();\n    assert.strictEqual(result, 'hwb(240deg 0% 0%)', 'color was not converted to a string correctly');\n  });\n\n  it('returns the HWB value when turned into a string if its format was \"hwba\"', () => {\n    const color = new Color.Legacy([0, 0, 0, 0.42], Color.Format.RGBA).as(Color.Format.HWBA);\n    const result = color.asString();\n    assert.strictEqual(result, 'hwb(0deg 0% 100% / 42%)', 'color was not converted to a string correctly');\n  });\n\n  it('omits the alpha value when it’s 100% if its format was \"hwba\"', () => {\n    const color = new Color.Legacy([1, 0, 0, 1], Color.Format.RGBA).as(Color.Format.HWBA);\n    const result = color.asString();\n    assert.strictEqual(result, 'hwb(0deg 0% 0%)', 'color was not converted to a string correctly');\n  });\n\n  it('is able to return a color in a different format than the one the color was originally set with', () => {\n    const color = new Color.Legacy([1, 0, 0, 1], Color.Format.RGB);\n    const result = color.asString(Color.Format.Nickname);\n    assert.strictEqual(result, 'red', 'color was not converted to a string correctly');\n  });\n\n  it('is able to change color format', () => {\n    const color = new Color.Legacy([1, 0, 0, 1], Color.Format.RGB);\n    color.setFormat(Color.Format.HEXA);\n    assert.strictEqual(color.asString(), '#ff0000ff', 'format was not set correctly');\n  });\n\n  it('suggests colors with good contrast', () => {\n    const colors = [\n      {\n        bgColor: 'salmon',\n        fgColor: 'white',\n        contrast: 4.5,\n        result: 'hsl(0deg 0% 22.96%)',\n      },\n      {\n        bgColor: 'Lightblue',\n        fgColor: 'white',\n        contrast: 4.5,\n        result: 'hsl(0deg 0% 35.34%)',\n      },\n      {\n        bgColor: 'white',\n        fgColor: 'hsl(0 53% 52% / 87%)',\n        contrast: 7.0,\n        result: 'hsl(0deg 48.92% 31.54% / 87%)',\n      },\n      {\n        bgColor: 'white',\n        fgColor: 'white',\n        contrast: 7.0,\n        result: 'hsl(0deg 0% 34.89%)',\n      },\n      {\n        bgColor: 'black',\n        fgColor: 'black',\n        contrast: 7.05,\n        result: 'hsl(0deg 0% 58.62%)',\n      },\n      {\n        bgColor: 'white',\n        fgColor: '#00FF00',\n        contrast: 7.05,\n        result: 'hsl(120deg 100% 20.37%)',\n      },\n      {\n        bgColor: 'black',\n        fgColor: '#b114ff',\n        contrast: 7.05,\n        result: 'hsl(280.09deg 100% 70.52%)',\n      },\n    ];\n    for (const {fgColor, bgColor, contrast, result} of colors) {\n      const fgParsed = parseAndAssertNotNull(fgColor);\n      const bgParsed = parseAndAssertNotNull(bgColor);\n      const suggestedColor = Color.findFgColorForContrast(fgParsed, bgParsed, contrast)!.as(Color.Format.HSL);\n      assert.strictEqual(\n          suggestedColor.asString(), result,\n          `incorrect color suggestion for ${fgColor}/${bgColor} with contrast ${contrast}`);\n    }\n  });\n\n  it('find the fg color with good contrast according to APCA', () => {\n    const tests = [\n      {\n        fgColor: 'white',\n        bgColor: 'white',\n        requiredContrast: 68,\n      },\n      {\n        fgColor: 'black',\n        bgColor: 'black',\n        requiredContrast: 68,\n      },\n      {\n        bgColor: 'lightblue',\n        fgColor: 'white',\n        requiredContrast: 66,\n      },\n      {\n        bgColor: 'white',\n        fgColor: '#00FF00',\n        requiredContrast: 66,\n      },\n      {\n        bgColor: 'black',\n        fgColor: '#b114ff',\n        requiredContrast: 66,\n      },\n    ];\n    for (const test of tests) {\n      const fg = parseAndAssertNotNull(test.fgColor);\n      const bg = parseAndAssertNotNull(test.bgColor);\n      const result = Common.Color.findFgColorForContrastAPCA(fg, bg, test.requiredContrast);\n      const absContrast = Math.abs(Common.ColorUtils.contrastRatioAPCA(result!.rgba(), bg.rgba()));\n      assert.isTrue(Math.round(absContrast) >= test.requiredContrast);\n    }\n  });\n\n  it('does not find fg color for certain combinations acoording to APCA', () => {\n    const tests = [\n      {\n        bgColor: 'salmon',\n        fgColor: 'white',\n        requiredContrast: 66,\n      },\n      {\n        fgColor: 'grey',\n        bgColor: 'grey',\n        requiredContrast: 68,\n      },\n    ];\n    for (const test of tests) {\n      const fg = parseAndAssertNotNull(test.fgColor);\n      const bg = parseAndAssertNotNull(test.bgColor);\n      const result = Common.Color.findFgColorForContrastAPCA(fg, bg, test.requiredContrast);\n      assert.isNull(result);\n    }\n  });\n\n  it('retains and returns the authored text', () => {\n    const lime: {[key in Common.Color.Format]: string} = {\n      [Common.Color.Format.Nickname]: 'lime',\n      [Common.Color.Format.HEX]: '#00ff00',\n      [Common.Color.Format.ShortHEX]: '#0f0',\n      [Common.Color.Format.HEXA]: '#00ff00ff',\n      [Common.Color.Format.ShortHEXA]: '#0f0f',\n      [Common.Color.Format.RGB]: 'rgb(0 255 0)',\n      [Common.Color.Format.RGBA]: 'rgba(0 255 0 / 100%)',\n      [Common.Color.Format.HSL]: 'hsl(120deg 100% 50%)',\n      [Common.Color.Format.HSLA]: 'hsl(120deg 100% 50% / 80%)',\n      [Common.Color.Format.HWB]: 'hwb(120deg 0% 0%)',\n      [Common.Color.Format.HWBA]: 'hwb(120deg 0% 0% / 80%)',\n      [Common.Color.Format.LCH]: 'lch(87.82 113.32 134.38)',\n      [Common.Color.Format.OKLCH]: 'oklch(0.87 0.29 142.49)',\n      [Common.Color.Format.LAB]: 'lab(87.82 -79.26 80.99)',\n      [Common.Color.Format.OKLAB]: 'oklab(0.87 -0.23 0.18)',\n      [Common.Color.Format.SRGB]: 'color(srgb 0 1 0)',\n      [Common.Color.Format.SRGB_LINEAR]: 'color(srgb-linear 0 1 0)',\n      [Common.Color.Format.DISPLAY_P3]: 'color(display-p3 0.46 0.99 0.3)',\n      [Common.Color.Format.A98_RGB]: 'color(a98-rgb 0.57 1 0.23)',\n      [Common.Color.Format.PROPHOTO_RGB]: 'color(prophoto-rgb 0.54 0.93 0.3)',\n      [Common.Color.Format.REC_2020]: 'color(rec2020 0.57 0.96 0.27)',\n      [Common.Color.Format.XYZ_D50]: 'color(xyz-d50 0.39 0.72 0.1)',\n      [Common.Color.Format.XYZ_D65]: 'color(xyz-d65 0.36 0.72 0.12)',\n      [Common.Color.Format.XYZ]: 'color(xyz 0.36 0.72 0.12)',\n    };\n\n    for (const format in lime) {\n      const spec = lime[format as Common.Color.Format];\n      const color = Common.Color.parse(spec);\n      assert.deepEqual(color!.getAuthoredText(), spec);\n      assert.deepEqual(color!.format(), format, spec);\n    }\n  });\n\n  it('prints the correct color when stringified with format', () => {\n    const LIME = [\n      {format: Common.Color.Format.Nickname, spec: 'lime'},\n      {format: Common.Color.Format.HEX, spec: '#00ff00'},\n      {format: Common.Color.Format.ShortHEX, spec: '#0f0'},\n      {format: Common.Color.Format.HEXA, spec: '#00ff00ff'},\n      {format: Common.Color.Format.ShortHEXA, spec: '#0f0f'},\n      {format: Common.Color.Format.RGB, spec: 'rgb(0 255 0)'},\n      {format: Common.Color.Format.RGBA, spec: 'rgb(0 255 0)'},  // no alpha here because it is ignored at 100%\n      {format: Common.Color.Format.HSL, spec: 'hsl(120deg 100% 50%)'},\n      {format: Common.Color.Format.HSLA, spec: 'hsl(120deg 100% 50%)'},\n      {format: Common.Color.Format.HWB, spec: 'hwb(120deg 0% 0%)'},\n      {format: Common.Color.Format.HWBA, spec: 'hwb(120deg 0% 0%)'},\n      {format: Common.Color.Format.LCH, spec: 'lch(88 113.32 134.38)'},\n      {format: Common.Color.Format.OKLCH, spec: 'oklch(0.87 0.29 142.49)'},\n      {format: Common.Color.Format.LAB, spec: 'lab(88 -79.26 80.99)'},\n      {format: Common.Color.Format.OKLAB, spec: 'oklab(0.87 -0.23 0.18)'},\n      {format: Common.Color.Format.SRGB, spec: 'color(srgb 0 1 0)'},\n      {format: Common.Color.Format.SRGB_LINEAR, spec: 'color(srgb-linear 0 1 0)'},\n      {format: Common.Color.Format.DISPLAY_P3, spec: 'color(display-p3 0.46 0.99 0.3)'},\n      {format: Common.Color.Format.A98_RGB, spec: 'color(a98-rgb 0.57 1 0.23)'},\n      {format: Common.Color.Format.PROPHOTO_RGB, spec: 'color(prophoto-rgb 0.54 0.93 0.3)'},\n      {format: Common.Color.Format.REC_2020, spec: 'color(rec2020 0.57 0.96 0.27)'},\n      {format: Common.Color.Format.XYZ_D50, spec: 'color(xyz-d50 0.39 0.72 0.1)'},\n      {format: Common.Color.Format.XYZ_D65, spec: 'color(xyz-d65 0.36 0.72 0.12)'},\n      {format: Common.Color.Format.XYZ, spec: 'color(xyz 0.36 0.72 0.12)'},\n    ];\n\n    for (const {format, spec} of LIME) {\n      const color = Common.Color.parse('lime');\n      assert.deepEqual(color!.asString(format), spec);\n    }\n  });\n\n  it('supports all to all and chain conversions', () => {\n    // This test checks that both all-to-all as well as chaining together conversions producesthe expected outcome. It's\n    // not easily possible to do this with real color conversions because the converters aren't accurate enough to allow\n    // for good comparison of the color values. This test therefore stubs out the color converters. Since we don't care\n    // about real color values, the fake converter functions generate uniquly identifiable results by always returning\n    // the color codes below in the first coordinate of the color (and zeros for the rest). This lets us also verify\n    // that the sequence of converter functions is correct because the converters can check the input color is as\n    // expected.\n\n    // Constant color codes to identify color formats and spaces through conversions. These will be used in fake\n    // conversion functions below. Values need to be < 1 to avoid accidentally getting clamped.\n    const enum Code {\n      NICKNAME = 0,\n      // Legacy colors all get the same code because they all do the same conversions. Use a value of `1` here to make\n      // the color nickname match `red`.\n      HEX = 1,\n      ShortHEX = 1,\n      HEXA = 1,\n      ShortHEXA = 1,\n      RGB = 1,\n      RGBA = 1,\n      HSL = 1,\n      HSLA = 1,\n      HWB = 1,\n      HWBA = 1,\n      // Legacy colors are treated as srgb for conversions, so use the same value here too.\n      SRGB = 1,\n      XYZ_D65 = 0.1,\n      XYZ = 0.1,\n      LCH = 0.2,\n      OKLCH = 0.3,\n      LAB = 0.4,\n      OKLAB = 0.5,\n      SRGB_LINEAR = 0.6,\n      DISPLAY_P3 = 0.7,\n      A98_RGB = 0.8,\n      PROPHOTO_RGB = 0.9,\n      REC_2020 = 0.91,\n      XYZ_D50 = 0.92,\n    }\n\n    stub('adobeRGBToXyzd50', Code.A98_RGB, Code.XYZ_D50);\n    stub('displayP3ToXyzd50', Code.DISPLAY_P3, Code.XYZ_D50);\n    stub('labToLch', Code.LAB, Code.LCH);\n    stub('labToXyzd50', Code.LAB, Code.XYZ_D50);\n    stub('lchToLab', Code.LCH, Code.LAB);\n    stub('oklabToXyzd65', Code.OKLAB, Code.XYZ_D65);\n    stub('oklchToXyzd50', Code.OKLCH, Code.XYZ_D50);\n    stub('proPhotoToXyzd50', Code.PROPHOTO_RGB, Code.XYZ_D50);\n    stub('rec2020ToXyzd50', Code.REC_2020, Code.XYZ_D50);\n    stub('srgbLinearToXyzd50', Code.SRGB_LINEAR, Code.XYZ_D50);\n    stub('srgbToXyzd50', Code.SRGB, Code.XYZ_D50);\n    stub('xyzd50ToAdobeRGB', Code.XYZ_D50, Code.A98_RGB);\n    stub('xyzd50ToD65', Code.XYZ_D50, Code.XYZ_D65);\n    stub('xyzd50ToDisplayP3', Code.XYZ_D50, Code.DISPLAY_P3);\n    stub('xyzd50ToLab', Code.XYZ_D50, Code.LAB);\n    stub('xyzd50ToOklch', Code.XYZ_D50, Code.OKLCH);\n    stub('xyzd50ToProPhoto', Code.XYZ_D50, Code.PROPHOTO_RGB);\n    stub('xyzd50ToRec2020', Code.XYZ_D50, Code.REC_2020);\n    stub('xyzd50ToSrgb', Code.XYZ_D50, Code.SRGB);\n    stub('xyzd50TosRGBLinear', Code.XYZ_D50, Code.SRGB_LINEAR);\n    stub('xyzd65ToD50', Code.XYZ_D65, Code.XYZ_D50);\n    stub('xyzd65ToOklab', Code.XYZ_D65, Code.OKLAB);\n\n    function stub<Fn extends keyof typeof Common.ColorConverter.ColorConverter>(\n        fn: Fn, input: Code, output: Code): void {\n      const result = sinon.stub(Common.ColorConverter.ColorConverter, fn);\n      // TODO(crbug.com/1412307): Figure out why tsc 5.0 stopped infering the function signature correctly.\n      // @ts-expect-error\n      result.callsFake((a: number, b: number, c: number) => {\n        assert.deepEqual([a, b, c], [input, 0, 0], `Conversion function ${fn} called with the wrong arguments`);\n        return [output, 0, 0];\n      });\n    }\n\n    const colors = new Map<Common.Color.Format, Common.Color.Color|null>();\n    colors.set(Common.Color.Format.Nickname, Common.Color.parse('red'));\n    colors.set(Common.Color.Format.HEX, Common.Color.parse('#ff0000'));\n    colors.set(Common.Color.Format.ShortHEX, Common.Color.parse('#f00'));\n    colors.set(Common.Color.Format.HEXA, Common.Color.parse('#ff0000ff'));\n    colors.set(Common.Color.Format.ShortHEXA, Common.Color.parse('#f00f'));\n    colors.set(Common.Color.Format.RGB, Common.Color.parse('rgb(255 0 0)'));\n    colors.set(Common.Color.Format.RGBA, Common.Color.parse('rgb(255 0 0)'));\n    colors.set(Common.Color.Format.HSL, Common.Color.parse('hsl(0deg 100% 50%)'));\n    colors.set(Common.Color.Format.HSLA, Common.Color.parse('hsl(0deg 100% 50%)'));\n    colors.set(Common.Color.Format.HWB, Common.Color.parse('hwb(0deg 0% 0%)'));\n    colors.set(Common.Color.Format.HWBA, Common.Color.parse('hwb(0deg 0% 0%)'));\n    colors.set(Common.Color.Format.LCH, Common.Color.parse(`lch(${Code.LCH} 0 0)`));\n    colors.set(Common.Color.Format.OKLCH, Common.Color.parse(`oklch(${Code.OKLCH} 0 0)`));\n    colors.set(Common.Color.Format.LAB, Common.Color.parse(`lab(${Code.LAB} 0 0)`));\n    colors.set(Common.Color.Format.OKLAB, Common.Color.parse(`oklab(${Code.OKLAB} 0 0)`));\n    colors.set(Common.Color.Format.SRGB, Common.Color.parse(`color(srgb ${Code.SRGB} 0 0)`));\n    colors.set(Common.Color.Format.SRGB_LINEAR, Common.Color.parse(`color(srgb-linear ${Code.SRGB_LINEAR} 0 0)`));\n    colors.set(Common.Color.Format.DISPLAY_P3, Common.Color.parse(`color(display-p3 ${Code.DISPLAY_P3} 0 0)`));\n    colors.set(Common.Color.Format.A98_RGB, Common.Color.parse(`color(a98-rgb ${Code.A98_RGB} 0 0)`));\n    colors.set(Common.Color.Format.PROPHOTO_RGB, Common.Color.parse(`color(prophoto-rgb ${Code.PROPHOTO_RGB} 0 0)`));\n    colors.set(Common.Color.Format.REC_2020, Common.Color.parse(`color(rec2020 ${Code.REC_2020} 0 0)`));\n    colors.set(Common.Color.Format.XYZ_D50, Common.Color.parse(`color(xyz-d50 ${Code.XYZ_D50} 0 0)`));\n    colors.set(Common.Color.Format.XYZ_D65, Common.Color.parse(`color(xyz-d65 ${Code.XYZ_D65} 0 0)`));\n    colors.set(Common.Color.Format.XYZ, Common.Color.parse(`color(xyz ${Code.XYZ} 0 0)`));\n\n    // Test all-to-all conversions.\n    for (const from of colors.keys()) {\n      for (const to of colors.keys()) {\n        const actual = colors.get(from);\n        const expected = colors.get(to);\n        assert.deepEqual(actual!.as(to).asString(), expected!.asString());\n      }\n    }\n\n    // Test chaining conversions. For every color perform a chain of conversions through all colors in sequence and\n    // verify the result.\n    for (const start of colors.keys()) {\n      let color = colors.get(start);\n      for (const next of colors.keys()) {\n        color = color!.as(next);\n        const expected = colors.get(next);\n        assert.deepEqual(color.asString(), expected!.asString(), `Original color ${colors.get(start)?.asString()}`);\n      }\n    }\n  });\n\n  it('correctly clips results on conversion', () => {\n    const nonSRGBColor = Color.parse('lab(99 50 50)');\n\n    assert.strictEqual(nonSRGBColor!.asString(Common.Color.Format.HEX), '#ffd39e');\n    assert.strictEqual(nonSRGBColor!.asString(Common.Color.Format.HEXA), '#ffd39eff');\n    assert.strictEqual(nonSRGBColor!.asString(Common.Color.Format.RGB), 'rgb(255 211 158)');\n    assert.strictEqual(nonSRGBColor!.asString(Common.Color.Format.RGBA), 'rgb(255 211 158)');\n    assert.strictEqual(nonSRGBColor!.asString(Common.Color.Format.HSL), 'hsl(0deg 0% 100%)');\n    assert.strictEqual(nonSRGBColor!.asString(Common.Color.Format.HSLA), 'hsl(0deg 0% 100%)');\n    assert.strictEqual(nonSRGBColor!.asString(Common.Color.Format.HWB), 'hwb(15.95deg 61.78% 0%)');\n    assert.strictEqual(nonSRGBColor!.asString(Common.Color.Format.HWBA), 'hwb(15.95deg 61.78% 0%)');\n    assert.strictEqual(nonSRGBColor!.asString(Common.Color.Format.SRGB), 'color(srgb 1 0.83 0.62)');\n    assert.strictEqual(nonSRGBColor!.asString(Common.Color.Format.SRGB_LINEAR), 'color(srgb-linear 1 0.65 0.34)');\n    assert.strictEqual(nonSRGBColor!.asString(Common.Color.Format.DISPLAY_P3), 'color(display-p3 1 0.86 0.66)');\n    assert.strictEqual(nonSRGBColor!.asString(Common.Color.Format.A98_RGB), 'color(a98-rgb 1 0.82 0.62)');\n    assert.strictEqual(nonSRGBColor!.asString(Common.Color.Format.PROPHOTO_RGB), 'color(prophoto-rgb 1 0.88 0.61)');\n    assert.strictEqual(nonSRGBColor!.asString(Common.Color.Format.REC_2020), 'color(rec2020 1 0.87 0.63)');\n  });\n\n  it('correctly detects and clips out-of-gamut colors', () => {\n    assert.isTrue(Color.parse('rgb(-1 1 256)')?.isGamutClipped());\n    assert.deepEqual(Color.parse('rgb(-1 1 256)')?.asString(), 'rgb(0 1 255)');\n    assert.isTrue(new Color.Legacy([-1, 0, 1.1, 1], Color.Format.RGBA).isGamutClipped());\n    assert.deepEqual(new Color.Legacy([-1, 0, 1.1, 1], Color.Format.RGBA).asString(), 'rgb(0 0 255)');\n\n    assert.isTrue(Color.parse('hsl(-120deg 130% 50%)')?.isGamutClipped());\n    assert.deepEqual(Color.parse('hsl(-120deg 130% 50%)')?.asString(), 'hsl(240deg 100% 50%)');\n    assert.isTrue(Color.parse('hwb(-120deg -130% 50%)')?.isGamutClipped());\n    assert.deepEqual(Color.parse('hwb(-120deg -130% -50%)')?.asString(), 'hwb(240deg 0% 0%)');\n    assert.isTrue(Color.parse('hwb(-120deg 0% 150%)')?.isGamutClipped());\n    assert.deepEqual(Color.parse('hwb(-120deg 0% 150%)')?.asString(), 'hwb(0deg 0% 100%)');\n    assert.isTrue(Color.parse('hwb(-120deg 130% 0%)')?.isGamutClipped());\n    assert.deepEqual(Color.parse('hwb(-120deg 130% 0%)')?.asString(), 'hwb(0deg 100% 0%)');\n\n    assert.isFalse(Color.parse('lch(110 -70 -70)')?.isGamutClipped());\n    assert.deepEqual(Color.parse('lch(110 70 -70)')?.asString(), 'lch(100 0 0)');\n\n    assert.isFalse(Color.parse('oklch(1.5 -70 -70)')?.isGamutClipped());\n    assert.deepEqual(Color.parse('oklch(1.5 70 -70)')?.asString(), 'oklch(1 0 0)');\n\n    assert.isFalse(Color.parse('lab(110 -70 -70)')?.isGamutClipped());\n    assert.deepEqual(Color.parse('lab(110 -70 -70)')?.asString(), 'lab(100 0 0)');\n\n    assert.isFalse(Color.parse('oklab(1.5 -70 -70)')?.isGamutClipped());\n    assert.deepEqual(Color.parse('oklab(1.5 -70 -70)')?.asString(), 'oklab(1 0 0)');\n\n    assert.isFalse(Color.parse('lch(10 70 -70)')?.isGamutClipped());\n    assert.deepEqual(Color.parse('lch(10 70 -70)')?.asString(), 'lch(10 70 290)');\n\n    assert.isFalse(Color.parse('oklch(0.5 70 -70)')?.isGamutClipped());\n    assert.deepEqual(Color.parse('oklch(0.5 70 -70)')?.asString(), 'oklch(0.5 70 290)');\n\n    assert.isFalse(Color.parse('lab(10 -70 -70)')?.isGamutClipped());\n    assert.deepEqual(Color.parse('lab(10 -70 -70)')?.asString(), 'lab(10 -70 -70)');\n\n    assert.isFalse(Color.parse('oklab(0.5 -70 -70)')?.isGamutClipped());\n    assert.deepEqual(Color.parse('oklab(0.5 -70 -70)')?.asString(), 'oklab(0.5 -70 -70)');\n\n    // RGB spaces are clipped:\n    assert.isTrue(Color.parse('color(srgb-linear -1 1 1.5)')?.isGamutClipped());\n    assert.deepEqual(Color.parse('color(srgb-linear -1 1 1.5)')?.asString(), 'color(srgb-linear 0 1 1)');\n\n    assert.isTrue(Color.parse('color(srgb -1 1 1.5)')?.isGamutClipped());\n    assert.deepEqual(Color.parse('color(srgb -1 1 1.5)')?.asString(), 'color(srgb 0 1 1)');\n\n    assert.isTrue(Color.parse('color(display-p3 -1 1 1.5)')?.isGamutClipped());\n    assert.deepEqual(Color.parse('color(display-p3 -1 1 1.5)')?.asString(), 'color(display-p3 0 1 1)');\n\n    assert.isTrue(Color.parse('color(a98-rgb -1 1 1.5)')?.isGamutClipped());\n    assert.deepEqual(Color.parse('color(a98-rgb -1 1 1.5)')?.asString(), 'color(a98-rgb 0 1 1)');\n\n    assert.isTrue(Color.parse('color(prophoto-rgb -1 1 1.5)')?.isGamutClipped());\n    assert.deepEqual(Color.parse('color(prophoto-rgb -1 1 1.5)')?.asString(), 'color(prophoto-rgb 0 1 1)');\n\n    assert.isTrue(Color.parse('color(rec2020 -1 1 1.5)')?.isGamutClipped());\n    assert.deepEqual(Color.parse('color(rec2020 -1 1 1.5)')?.asString(), 'color(rec2020 0 1 1)');\n\n    // XYZ has infinite gamute and is never clipped:\n    assert.isFalse(Color.parse('color(xyz-d50 -1 1 1.5)')?.isGamutClipped());\n    assert.deepEqual(Color.parse('color(xyz-d50 -1 1 1.5)')?.asString(), 'color(xyz-d50 -1 1 1.5)');\n\n    assert.isFalse(Color.parse('color(xyz-d65 -1 1 1.5)')?.isGamutClipped());\n    assert.deepEqual(Color.parse('color(xyz-d65 -1 1 1.5)')?.asString(), 'color(xyz-d65 -1 1 1.5)');\n\n    assert.isFalse(Color.parse('color(xyz -1 1 1.5)')?.isGamutClipped());\n    assert.deepEqual(Color.parse('color(xyz -1 1 1.5)')?.asString(), 'color(xyz -1 1 1.5)');\n\n    // Being just a tiny bit out of gamut doesn't matter:\n    assert.isFalse(Color.parse('color(srgb-linear 1.0001 1.0001 1.0001)')?.isGamutClipped());\n    assert.isFalse(Color.parse('color(srgb 1.0001 1.0001 1.0001)')?.isGamutClipped());\n    assert.isFalse(Color.parse('color(display-p3 1.0001 1.0001 1.0001)')?.isGamutClipped());\n    assert.isFalse(Color.parse('color(a98-rgb 1.0001 1.0001 1.0001)')?.isGamutClipped());\n    assert.isFalse(Color.parse('color(prophoto-rgb 1.0001 1.0001 1.0001)')?.isGamutClipped());\n    assert.isFalse(Color.parse('color(rec2020 1.0001 1.0001 1.0001)')?.isGamutClipped());\n  });\n\n  it('correctly represents powerless components', () => {\n    // With lightness at 0% or 100% the color is black or white and all other components are powerless:\n    assert.deepEqual(Color.parse('lab(0 15 15)')?.asString(), 'lab(0 0 0)');\n    assert.deepEqual(Color.parse('lab(100 15 15)')?.asString(), 'lab(100 0 0)');\n    assert.deepEqual(Color.parse('lch(0 15 15)')?.asString(), 'lch(0 0 0)');\n    assert.deepEqual(Color.parse('lch(100 15 15)')?.asString(), 'lch(100 0 0)');\n    assert.deepEqual(Color.parse('oklab(0 15 15)')?.asString(), 'oklab(0 0 0)');\n    assert.deepEqual(Color.parse('oklab(1 15 15)')?.asString(), 'oklab(1 0 0)');\n    assert.deepEqual(Color.parse('oklch(0 15 15)')?.asString(), 'oklch(0 0 0)');\n    assert.deepEqual(Color.parse('oklch(1 15 15)')?.asString(), 'oklch(1 0 0)');\n    assert.deepEqual(Color.parse('hsl(120deg 10% 0%)')?.asString(), 'hsl(0deg 0% 0%)');\n    assert.deepEqual(Color.parse('hsl(120deg 10% 100%)')?.asString(), 'hsl(0deg 0% 100%)');\n\n    // With saturation or chroma at 0, the hue becomes powerless:\n    assert.deepEqual(Color.parse('lch(0.3 0 15)')?.asString(), 'lch(0 0 0)');\n    assert.deepEqual(Color.parse('oklch(0.3 0 15)')?.asString(), 'oklch(0.3 0 0)');\n    assert.deepEqual(Color.parse('hsl(120deg 0% 50%)')?.asString(), 'hsl(0deg 0% 50%)');\n\n    // If whiteness + blackness is 100% the color is a shade of gray and the hue is powerless:\n    assert.deepEqual(Color.parse('hwb(120deg 50% 50%)')?.asString(), 'hwb(0deg 50% 50%)');\n    // whiteness + blackness exceeding 100% is normalized to 100% retaining the relative magnitude:\n    assert.deepEqual(Color.parse('hwb(120deg 80% 40%)')?.asString(), 'hwb(0deg 66.67% 33.33%)');\n  });\n});\n\ndescribe('Generator', () => {\n  it('able to return the color for an ID if the ID was already set', () => {\n    const generator = new Color.Generator();\n    generator.setColorForID('r', 'Red');\n    assert.strictEqual(generator.colorForID('r'), 'Red', 'color was not retrieved correctly');\n  });\n\n  it('able to return the color for an ID that was not set', () => {\n    const generator = new Color.Generator();\n    assert.strictEqual(generator.colorForID('r'), 'hsl(133deg 67% 80%)', 'color was not generated correctly');\n  });\n});\n"]}