{"version":3,"file":"TextDictionary.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/common/TextDictionary.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from './common.js';\n\nconst TextDictionary = Common.TextDictionary.TextDictionary;\nconst Trie = Common.Trie.Trie;\n\ndescribe('Text Dictionary', () => {\n  it('can be created with its basic attributes', () => {\n    const textDic = new TextDictionary();\n    assert.instanceOf(textDic.words, Map, 'did not create a Map named _words');\n    assert.instanceOf(textDic.index, Trie, 'did not create a Trie named _index');\n  });\n\n  it('can add a word successfully', () => {\n    const textDic = new TextDictionary();\n    textDic.addWord('test');\n    assert.isTrue(textDic.hasWord('test'), 'word was not added successfully');\n  });\n\n  it('can remove a word successfully', () => {\n    const textDic = new TextDictionary();\n    textDic.addWord('test');\n    assert.isTrue(textDic.hasWord('test'), 'word was not added successfully');\n    textDic.removeWord('test');\n    assert.isFalse(textDic.hasWord('test'), 'word was not removed successfully');\n  });\n\n  it('returns nothing when trying to remove a word that does not exist', () => {\n    const textDic = new TextDictionary();\n    assert.isUndefined(\n        textDic.removeWord('test'), 'removeWord function did not return Undefined for a word not in the dictionaty');\n  });\n\n  it('removes a word that was added twice', () => {\n    const textDic = new TextDictionary();\n    textDic.addWord('test');\n    textDic.addWord('test');\n    assert.isTrue(textDic.hasWord('test'), 'words were not added successfully');\n    textDic.removeWord('test');\n    assert.isTrue(textDic.hasWord('test'), 'both words were removed');\n    textDic.removeWord('test');\n    assert.isFalse(textDic.hasWord('test'), 'the second word was not removed successfully');\n  });\n\n  it('retrieve words with a certain prefix', () => {\n    const textDic = new TextDictionary();\n    textDic.addWord('test');\n    textDic.addWord('ten');\n    textDic.addWord('nine');\n    const foundWords = textDic.wordsWithPrefix('te');\n    assert.strictEqual(foundWords[0], 'test', 'first word was not retrieved');\n    assert.strictEqual(foundWords[1], 'ten', 'second word was not retrieved');\n  });\n\n  it('retrieve the word count for a certain word', () => {\n    const textDic = new TextDictionary();\n    textDic.addWord('test');\n    textDic.addWord('test');\n    textDic.addWord('ten');\n    assert.strictEqual(textDic.wordCount('test'), 2, 'word count is incorrect');\n  });\n\n  it('retrieve the word count for a certain word that is not in the dictionary', () => {\n    const textDic = new TextDictionary();\n    textDic.addWord('test');\n    textDic.addWord('test');\n    textDic.addWord('ten');\n    assert.strictEqual(textDic.wordCount('testing'), 0, 'word count is incorrect');\n  });\n\n  it('reset the dictionary after adding words to it', () => {\n    const textDic = new TextDictionary();\n    textDic.addWord('test');\n    textDic.addWord('test');\n    textDic.addWord('ten');\n    textDic.reset();\n    assert.isFalse(textDic.hasWord('test'), 'first word still in the dictionary');\n    assert.isFalse(textDic.hasWord('ten'), 'second word still in the dictionary');\n    assert.strictEqual(textDic.wordCount('test'), 0, 'first word still has a count');\n    assert.strictEqual(textDic.wordCount('ten'), 0, 'second word still has a count');\n  });\n});\n"]}