{"version":3,"file":"ColorConverter.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/common/ColorConverter.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from './common.js';\n\nfunction assertAlmostEqual(array1: number[], array2: number[], delta = 0.01) {\n  const almostEqual = array1.every((n, i) => {\n    return Math.abs(n - array2[i]) < delta;\n  });\n\n  assert.isTrue(almostEqual, `${array1} is not almost equal to ${array2} with delta ${delta}`);\n}\n\ndescribe('ColorConverter', () => {\n  it('LabToXyzd50', () => {\n    const colorCases = [\n      [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],                // black\n      [[100.0, 0.0, 0.0], [0.9642, 1.0, 0.8252]],        // white\n      [[33.0, 0.0, 0.0], [0.0727, 0.0754, 0.0622]],      // gray1\n      [[66.0, 0.0, 0.0], [0.3406, 0.3532, 0.2915]],      // gray2\n      [[20.0, -35.0, 45.0], [0.0134, 0.0299, -0.0056]],  // dark_green\n      [[80.0, -60.0, 70.0], [0.3416, 0.5668, 0.0899]],   // ligth_green\n      [[35.0, 60.0, 70.0], [0.1690, 0.0850, -0.0051]],   // purple\n      [[75.0, 45.0, -100.0], [0.6448, 0.4828, 1.7488]],  // lile\n      [[75.0, 100.0, 80.0], [0.92, 0.4828, 0.0469]],\n    ];  // red\n\n    for (const [input, expected] of colorCases) {\n      assertAlmostEqual(Common.ColorConverter.ColorConverter.labToXyzd50(input[0], input[1], input[2]), expected);\n    }\n  });\n\n  it('XYZD50ToLab', () => {\n    const colorCases = [\n      [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],                // black\n      [[0.9642, 1.0, 0.8252], [100.0, 0.0, 0.0]],        // white\n      [[0.0727, 0.0754, 0.0622], [33.0, 0.0, 0.0]],      // gray1\n      [[0.3406, 0.3532, 0.2915], [66.0, 0.0, 0.0]],      // gray2\n      [[0.0134, 0.0299, -0.0056], [20.0, -35.0, 45.0]],  // dark_green\n      [[0.3416, 0.5668, 0.0899], [80.0, -60.0, 70.0]],   // ligth_green\n      [[0.1690, 0.0850, -0.0051], [35.0, 60.0, 70.0]],   // purple\n      [[0.6448, 0.4828, 1.7488], [75.0, 45.0, -100.0]],  // lile\n      [[0.92, 0.4828, 0.0469], [75.0, 100.0, 80.0]],\n    ];  // red\n\n    for (const [input, expected] of colorCases) {\n      assertAlmostEqual(Common.ColorConverter.ColorConverter.xyzd50ToLab(input[0], input[1], input[2]), expected, 0.1);\n    }\n  });\n\n  it('OklabToXyzd65', () => {\n    const colorCases = [\n      [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],                                // black\n      [[1.0, 0.0, 0.0], [0.9504559270516717, 1.0, 1.0890577507598784]],  // white\n      [\n        [0.8664396115356694, -0.23388757418790818, 0.17949847989672985],\n        [0.357584339383878, 0.715168678767756, 0.11919477979462598],\n      ],  // lime\n      [\n        [0.4209136612058102, 0.16470430417002319, -0.10147178154592906],\n        [0.1279775574172914, 0.06148383144929487, 0.20935510595451154],\n      ],  // purple\n      [\n        [0.4806125447400232, 0.1440294785250731, 0.0688902950420287],\n        [0.167625056565021, 0.09823806119130823, 0.03204123425728893],\n      ],  // brown\n      [\n        [0.5197518277948419, -0.14030232755310995, 0.10767589774360209],\n        [0.07718833433230218, 0.15437666866460437, 0.025729444777434055],\n      ],\n    ];  // green\n\n    for (const [input, expected] of colorCases) {\n      assertAlmostEqual(Common.ColorConverter.ColorConverter.oklabToXyzd65(input[0], input[1], input[2]), expected);\n    }\n  });\n\n  it('XYZD65 to Oklab', () => {\n    const colorCases = [\n      [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],                              // black\n      [[0.9504559270516717, 1.0, 1.0890577507598784], [1, 0.0, 0.0]],  // white\n      [\n        [0.357584339383878, 0.715168678767756, 0.11919477979462598],\n        [0.8664396115356694, -0.23388757418790818, 0.17949847989672985],\n      ],  // lime\n      [\n        [0.1279775574172914, 0.06148383144929487, 0.20935510595451154],\n        [0.4209136612058102, 0.16470430417002319, -0.10147178154592906],\n      ],  // purple\n      [\n        [0.167625056565021, 0.09823806119130823, 0.03204123425728893],\n        [0.4806125447400232, 0.1440294785250731, 0.0688902950420287],\n      ],  // brown\n      [\n        [0.07718833433230218, 0.15437666866460437, 0.025729444777434055],\n        [0.5197518277948419, -0.14030232755310995, 0.10767589774360209],\n      ],  // green\n    ];\n\n    for (const [input, expected] of colorCases) {\n      assertAlmostEqual(Common.ColorConverter.ColorConverter.xyzd65ToOklab(input[0], input[1], input[2]), expected);\n    }\n  });\n\n  it('XYZD50ToD65', () => {\n    const colorCases = [\n      [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],                      // black\n      [[0.95047, 1.0, 1.0888], [0.95392, 1.00594, 1.439698]],  // white\n      [[0.412, 0.213, 0.019], [0.389938, 0.20384, 0.025982]],\n      [[0.358, 0.715, 0.119], [0.33307, 0.714494, 0.1480589]],\n      [[0.18, 0.072, 0.95], [0.23041847, 0.087602, 1.264587]],\n      [[0.23, 0.107, 0.555], [0.252396, 0.113222, 0.73899]],\n      [[0.114, 0.09, 0.087], [0.112348, 0.089496, 0.115299]],\n    ];\n\n    for (const [input, expected] of colorCases) {\n      assertAlmostEqual(Common.ColorConverter.ColorConverter.xyzd50ToD65(input[0], input[1], input[2]), expected);\n    }\n  });\n\n  it('XYZD65ToD50', () => {\n    const colorCases = [\n      [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],                      // black\n      [[0.95392, 1.00594, 1.439698], [0.95047, 1.0, 1.0888]],  // white\n      [[0.389938, 0.20384, 0.025982], [0.412, 0.213, 0.019]],\n      [[0.33307, 0.714494, 0.1480589], [0.358, 0.715, 0.119]],\n      [[0.23041847, 0.087602, 1.264587], [0.18, 0.072, 0.95]],\n      [[0.252396, 0.113222, 0.73899], [0.23, 0.107, 0.555]],\n      [[0.112348, 0.089496, 0.115299], [0.114, 0.09, 0.087]],\n    ];\n\n    for (const [input, expected] of colorCases) {\n      assertAlmostEqual(Common.ColorConverter.ColorConverter.xyzd65ToD50(input[0], input[1], input[2]), expected);\n    }\n  });\n\n  it('XYZD50TosRGBLinear', () => {\n    const colorCases = [\n      [[0.0, 0.0, 0.0], [0, 0, 0]],\n      [[0.95047, 1.0, 1.0888], [0.8272854669134366, 1.0223971188142922, 1.3696152053494186]],\n      [[0.412, 0.213, 0.019], [0.9374275777784716, 0.005542826192671772, 0.007585345113415052]],\n      [[0.358, 0.715, 0.119], [-0.09280883353574096, 1.0237151633684942, 0.0292858777069627]],\n      [[0.18, 0.072, 0.95], [-0.01841380331752207, -0.006427604489910602, 1.3315858423930542]],\n      [[0.23, 0.107, 0.555], [0.27548326260231637, -0.0015117957032871887, 0.772043362443567]],\n      [[0.114, 0.09, 0.087], [0.16903835776528245, 0.06379397130440126, 0.10986584693282563]],\n    ];\n\n    for (const [input, expected] of colorCases) {\n      assertAlmostEqual(\n          Common.ColorConverter.ColorConverter.xyzd50TosRGBLinear(input[0], input[1], input[2]), expected);\n    }\n  });\n\n  it('LchToLab', () => {\n    const colorCases = [\n      [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],  // black\n      [[89.11, 69.04, 161.5], [89.11, -65.472265155436, 21.906713478207564]],\n      [\n        [29.6915239933531, 66.82572352143814, 327.1054738802461],\n        [29.6915239933531, 56.11167248735513, -36.292665028011974],\n      ],  // purple\n      [\n        [38.14895894517021, 59.598372928277406, 32.286662896162966],\n        [38.14895894517021, 50.38364171345111, 31.834803335164764],\n      ],  // brown\n      [\n        [46.27770902748027, 67.9842594463414, 134.3838583288382],\n        [46.27770902748027, -47.55240796497723, 48.586294664234586],\n      ],\n    ];  // green\n\n    for (const [input, expected] of colorCases) {\n      assertAlmostEqual(Common.ColorConverter.ColorConverter.lchToLab(input[0], input[1], input[2]), expected);\n    }\n  });\n\n  it('LabToLch', () => {\n    const colorCases = [\n      [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],  // black\n      [[100.0, 0.0, 0.0], [100.0, 0.0, 0.0]],\n      [[89.11, -65.472265155436, 21.906713478207564], [89.11, 69.04, 161.5]],\n      [\n        [29.6915239933531, 56.11167248735513, -36.292665028011974],\n        [29.6915239933531, 66.82572352143814, -32.894523620605469],\n      ],  // purple\n      [\n        [38.14895894517021, 50.38364171345111, 31.834803335164764],\n        [38.14895894517021, 59.598372928277406, 32.286662896162966],\n      ],  // brown\n      [\n        [46.27770902748027, -47.55240796497723, 48.586294664234586],\n        [46.27770902748027, 67.9842594463414, 134.3838583288382],\n      ],\n    ];  // green\n\n    for (const [input, expected] of colorCases) {\n      assertAlmostEqual(Common.ColorConverter.ColorConverter.labToLch(input[0], input[1], input[2]), expected);\n    }\n  });\n\n  it('SRGBLinearToXyzd50', () => {\n    const colorCases = [\n      [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],  // black\n      [[1.0, 1.0, 1.0],\n       [0.9642956660812443, 1.0000000361162846,\n        0.8251045485672053]],  // white\n      [[0.0, 1.0, 0.0],\n       [0.3851514688337912, 0.7168870538238823,\n        0.09708128566574631]],  // lime\n      [\n        [0.37626212299090644, 0.02315336617811041, 0.02315336617811041],\n        [0.1763053229982614, 0.10171766135467991, 0.024020600356509242],\n      ],  // brown\n      [[1.0, 0.5271151257058131, 0.5972017883637634], [0.7245316165924385, 0.6365774485679174, 0.4915583325045292]],\n    ];  // pink\n\n    for (const [input, expected] of colorCases) {\n      assertAlmostEqual(\n          Common.ColorConverter.ColorConverter.srgbLinearToXyzd50(input[0], input[1], input[2]), expected);\n    }\n  });\n\n  it('SRGBToXyzd50', () => {\n    const colorCases = [\n      [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],  // black\n      [[1.0, 1.0, 1.0],\n       [0.9642956660812443, 1.0000000361162846,\n        0.8251045485672053]],  // white\n      [[0.0, 1.0, 0.0],\n       [0.3851514688337912, 0.7168870538238823,\n        0.09708128566574631]],  // lime\n      [\n        [0.6470588235294118, 0.16470588235294117, 0.16470588235294117],\n        [0.1763053229982614, 0.10171766135467991, 0.024020600356509242],\n      ],  // brown\n      [[1.0, 0.7529411764705882, 0.796078431372549], [0.7245316165924385, 0.6365774485679174, 0.4915583325045292]],\n    ];  // pink\n\n    for (const [input, expected] of colorCases) {\n      assertAlmostEqual(Common.ColorConverter.ColorConverter.srgbToXyzd50(input[0], input[1], input[2]), expected);\n    }\n  });\n\n  it('DisplayP3ToXyzd50', () => {\n    const colorCases = [\n      [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],  // black\n      [\n        [0.9999999999999999, 0.9999999999999997, 0.9999999999999999],\n        [0.9642956660812443, 1.0000000361162846, 0.8251045485672053],\n      ],  // white\n      [\n        [0.45840159019103005, 0.9852645833250543, 0.29829470783345835],\n        [0.3851514688337912, 0.7168870538238823, 0.09708128566574631],\n      ],  // lime\n      [\n        [0.5957181607237907, 0.2055939145569215, 0.18695695018247227],\n        [0.1763053229982614, 0.10171766135467991, 0.024020600356509242],\n      ],  // brown\n      [\n        [0.4584004101072638, 0.07977226603250179, 0.4847907338567859],\n        [0.1250143560558979, 0.0611129099463755, 0.15715146562446167],\n      ],  // purple\n      [\n        [0.962148711796773, 0.7628803605364196, 0.7971503318758075],\n        [0.7245316165924385, 0.6365774485679174, 0.4915583325045292],\n      ],\n    ];  // pink\n\n    for (const [input, expected] of colorCases) {\n      assertAlmostEqual(Common.ColorConverter.ColorConverter.displayP3ToXyzd50(input[0], input[1], input[2]), expected);\n    }\n  });\n  it('XYZD50ToDisplayP3', () => {\n    const colorCases = [\n      [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],  // black\n      [\n        [0.9642956660812443, 1.0000000361162846, 0.8251045485672053],\n        [0.9999999999999999, 0.9999999999999997, 0.9999999999999999],\n      ],  // white\n      [\n        [0.3851514688337912, 0.7168870538238823, 0.09708128566574631],\n        [0.45840159019103005, 0.9852645833250543, 0.29829470783345835],\n      ],  // lime\n      [\n        [0.1763053229982614, 0.10171766135467991, 0.024020600356509242],\n        [0.5957181607237907, 0.2055939145569215, 0.18695695018247227],\n      ],  // brown\n      [\n        [0.1250143560558979, 0.0611129099463755, 0.15715146562446167],\n        [0.4584004101072638, 0.07977226603250179, 0.4847907338567859],\n      ],  // purple\n      [\n        [0.7245316165924385, 0.6365774485679174, 0.4915583325045292],\n        [0.962148711796773, 0.7628803605364196, 0.7971503318758075],\n      ],\n    ];  // pink\n\n    for (const [input, expected] of colorCases) {\n      assertAlmostEqual(Common.ColorConverter.ColorConverter.xyzd50ToDisplayP3(input[0], input[1], input[2]), expected);\n    }\n  });\n  it('ProPhotoToXyzd50', () => {\n    const colorCases = [\n      [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],  // black\n      [\n        [0.9999999886663737, 1.0000000327777285, 0.9999999636791804],\n        [0.9642956660812443, 1.0000000361162846, 0.8251045485672053],\n      ],  // white\n      [\n        [0.5402807890930262, 0.9275948938161531, 0.30456598218387576],\n        [0.3851514688337912, 0.7168870538238823, 0.09708128566574631],\n      ],  // lime\n      [\n        [0.4202512875251534, 0.20537448341387265, 0.14018716364460992],\n        [0.1763053229982614, 0.10171766135467991, 0.024020600356509242],\n      ],  // brown\n      [\n        [0.3415199027593793, 0.13530888280806527, 0.3980101298732242],\n        [0.1250143560558979, 0.0611129099463755, 0.15715146562446167],\n      ],  // purple\n      [\n        [0.8755612852965058, 0.7357597566543541, 0.7499575746802042],\n        [0.7245316165924385, 0.6365774485679174, 0.4915583325045292],\n      ],\n    ];  // pink\n\n    for (const [input, expected] of colorCases) {\n      assertAlmostEqual(Common.ColorConverter.ColorConverter.proPhotoToXyzd50(input[0], input[1], input[2]), expected);\n    }\n  });\n\n  it('XYZD50ToProPhoto', () => {\n    const colorCases = [\n      [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],  // black\n      [\n        [0.9642956660812443, 1.0000000361162846, 0.8251045485672053],\n        [0.9999999886663737, 1.0000000327777285, 0.9999999636791804],\n      ],  // white\n      [\n        [0.3851514688337912, 0.7168870538238823, 0.09708128566574631],\n        [0.5402807890930262, 0.9275948938161531, 0.30456598218387576],\n      ],  // lime\n      [\n        [0.1763053229982614, 0.10171766135467991, 0.024020600356509242],\n        [0.4202512875251534, 0.20537448341387265, 0.14018716364460992],\n      ],  // brown\n      [\n        [0.1250143560558979, 0.0611129099463755, 0.15715146562446167],\n        [0.3415199027593793, 0.13530888280806527, 0.3980101298732242],\n      ],  // purple\n      [\n        [0.7245316165924385, 0.6365774485679174, 0.4915583325045292],\n        [0.8755612852965058, 0.7357597566543541, 0.7499575746802042],\n      ],\n    ];  // pink\n\n    for (const [input, expected] of colorCases) {\n      assertAlmostEqual(Common.ColorConverter.ColorConverter.xyzd50ToProPhoto(input[0], input[1], input[2]), expected);\n    }\n  });\n\n  it('AdobeRGBToXyzd50', () => {\n    const colorCases = [\n      [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],  // black\n      [\n        [1.0000000000000002, 0.9999999999999999, 1.],\n        [0.9642956660812443, 1.0000000361162846, 0.8251045485672053],\n      ],  // white\n      [\n        [0.564972265988564, 0.9999999999999999, 0.23442379872902916],\n        [0.3851514688337912, 0.7168870538238823, 0.09708128566574631],\n      ],  // lime\n      [\n        [0.5565979160264471, 0.18045907254050694, 0.18045907254050705],\n        [0.1763053229982614, 0.10171766135467991, 0.024020600356509242],\n      ],  // brown\n      [\n        [0.4275929819700999, 0.0, 0.4885886519419426],\n        [0.1250143560558979, 0.0611129099463755, 0.15715146562446167],\n      ],  // purple\n      [\n        [0.9363244100721754, 0.7473920857106169, 0.7893042668092753],\n        [0.7245316165924385, 0.6365774485679174, 0.4915583325045292],\n      ],\n    ];  // pink\n\n    for (const [input, expected] of colorCases) {\n      assertAlmostEqual(Common.ColorConverter.ColorConverter.adobeRGBToXyzd50(input[0], input[1], input[2]), expected);\n    }\n  });\n  it('XYZD50ToAdobeRGB', () => {\n    const colorCases = [\n      [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],  // black\n      [\n        [0.9642956660812443, 1.0000000361162846, 0.8251045485672053],\n        [1.0000000000000002, 0.9999999999999999, 1.],\n      ],  // white\n      [\n        [0.3851514688337912, 0.7168870538238823, 0.09708128566574631],\n        [0.564972265988564, 0.9999999999999999, 0.23442379872902916],\n      ],  // lime\n      [\n        [0.1763053229982614, 0.10171766135467991, 0.024020600356509242],\n        [0.5565979160264471, 0.18045907254050694, 0.18045907254050705],\n      ],  // brown\n      [\n        [0.1250143560558979, 0.0611129099463755, 0.15715146562446167],\n        [0.4275929819700999, 0.0, 0.4885886519419426],\n      ],  // purple\n      [\n        [0.7245316165924385, 0.6365774485679174, 0.4915583325045292],\n        [0.9363244100721754, 0.7473920857106169, 0.7893042668092753],\n      ],\n    ];  // pink\n\n    for (const [input, expected] of colorCases) {\n      assertAlmostEqual(Common.ColorConverter.ColorConverter.xyzd50ToAdobeRGB(input[0], input[1], input[2]), expected);\n    }\n  });\n  it('Rec2020ToXyzd50', () => {\n    const colorCases = [\n      [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],  // black\n      [[1.0000000000000002, 1., 1.],\n       [0.9642956660812443, 1.0000000361162846,\n        0.8251045485672053]],  // white\n      [\n        [0.5675424725933591, 0.959278677099374, 0.2689692617052188],\n        [0.3851514688337912, 0.7168870538238823, 0.09708128566574631],\n      ],  // lime\n      [\n        [0.4841434514625542, 0.17985588424119636, 0.12395667053434403],\n        [0.1763053229982614, 0.10171766135467991, 0.024020600356509242],\n      ],  // brown\n      [\n        [0.36142160262090384, 0.0781562275109019, 0.429742223818931],\n        [0.1250143560558979, 0.0611129099463755, 0.15715146562446167],\n      ],  // purple\n      [\n        [0.9098509851821579, 0.747938726996672, 0.7726929727190115],\n        [0.7245316165924385, 0.6365774485679174, 0.4915583325045292],\n      ],\n    ];  // pink\n\n    for (const [input, expected] of colorCases) {\n      assertAlmostEqual(Common.ColorConverter.ColorConverter.rec2020ToXyzd50(input[0], input[1], input[2]), expected);\n    }\n  });\n  it('XYZD50ToRec2020', () => {\n    const colorCases = [\n      [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],                                                            // black\n      [[0.9642956660812443, 1.0000000361162846, 0.8251045485672053], [1.0000000000000002, 1., 1.]],  // white\n      [\n        [0.3851514688337912, 0.7168870538238823, 0.09708128566574631],\n        [0.5675424725933591, 0.959278677099374, 0.2689692617052188],\n      ],  // lime\n      [\n        [0.1763053229982614, 0.10171766135467991, 0.024020600356509242],\n        [0.4841434514625542, 0.17985588424119636, 0.12395667053434403],\n      ],  // brown\n      [\n        [0.1250143560558979, 0.0611129099463755, 0.15715146562446167],\n        [0.36142160262090384, 0.0781562275109019, 0.429742223818931],\n      ],  // purple\n      [\n        [0.7245316165924385, 0.6365774485679174, 0.4915583325045292],\n        [0.9098509851821579, 0.747938726996672, 0.7726929727190115],\n      ],\n    ];  // pink\n\n    for (const [input, expected] of colorCases) {\n      assertAlmostEqual(Common.ColorConverter.ColorConverter.xyzd50ToRec2020(input[0], input[1], input[2]), expected);\n    }\n  });\n\n  it('Xyzd50ToSrgb', () => {\n    const colorCases = [\n      [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],  // black\n      [[1.0, 1.0, 1.0],\n       [0.9642956660812443, 1.0000000361162846,\n        0.8251045485672053]],  // white\n      [[0.0, 1.0, 0.0],\n       [0.3851514688337912, 0.7168870538238823,\n        0.09708128566574631]],  // lime\n      [\n        [0.6470588235294118, 0.16470588235294117, 0.16470588235294117],\n        [0.1763053229982614, 0.10171766135467991, 0.024020600356509242],\n      ],  // brown\n      [[1.0, 0.7529411764705882, 0.796078431372549], [0.7245316165924385, 0.6365774485679174, 0.4915583325045292]],\n      [[-3.82, 8.124, 7.752], [60, 100, 100]],  // Out of gamut for sRGB but still out\n    ];                                          // pink\n\n    for (const [expected, input] of colorCases) {\n      assertAlmostEqual(Common.ColorConverter.ColorConverter.xyzd50ToSrgb(input[0], input[1], input[2]), expected);\n    }\n  });\n\n  it('xyzd50ToOklch', () => {\n    const colorCases = [\n      [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],                                                       // black\n      [[0.387, 0.719, 0.098], [0.8673558615881383, 0.2943827914193604, 142.46721129661893]],    // lime\n      [[0.125, 0.061, 0.157], [0.4207236956831411, 0.19379111721542183, -31.581090643953534]],  // purple\n      [[0.171, 0.102, 0.027], [0.4801470749600788, 0.15014832987216517, 25.62722827644009]],    // brown\n      [[0.083, 0.155, 0.021], [0.5199709382011207, 0.17740395353498845, 142.60633091326085]],\n    ];  // green\n\n    for (const [input, expected] of colorCases) {\n      assertAlmostEqual(Common.ColorConverter.ColorConverter.xyzd50ToOklch(input[0], input[1], input[2]), expected);\n    }\n  });\n\n  it('oklchToXyzd50', () => {\n    const colorCases = [\n      [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],                                                      // black\n      [[0.8664396115356694, 0.2948272403370167, 142.49533888780996], [0.387, 0.719, 0.098]],   // lime\n      [[0.4209136612058102, 0.19345291484554133, 328.36341792345144], [0.125, 0.061, 0.157]],  // purple\n      [[0.4806125447400232, 0.1596570181206647, 25.562112067668068], [0.171, 0.102, 0.027]],   // brown\n      [[0.5197518277948419, 0.17685825418032036, 142.4953388878099], [0.083, 0.155, 0.021]],\n    ];  // green\n\n    for (const [input, expected] of colorCases) {\n      assertAlmostEqual(Common.ColorConverter.ColorConverter.oklchToXyzd50(input[0], input[1], input[2]), expected);\n    }\n  });\n});\n"]}