{"version":3,"file":"Throttler.js","sourceRoot":"","sources":["../../../../../../front_end/core/common/Throttler.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nexport type FinishCallback = (err: Error) => void;\n\nexport class Throttler {\n  readonly #timeout: number;\n  #isRunningProcess: boolean;\n  #asSoonAsPossible: boolean;\n  #process: (() => (Promise<unknown>))|null;\n  #lastCompleteTime: number;\n  #schedulePromise: Promise<unknown>;\n  #scheduleResolve!: (value: unknown) => void;\n  #processTimeout?: number;\n\n  constructor(timeout: number) {\n    this.#timeout = timeout;\n    this.#isRunningProcess = false;\n    this.#asSoonAsPossible = false;\n    this.#process = null;\n    this.#lastCompleteTime = 0;\n\n    this.#schedulePromise = new Promise(fulfill => {\n      this.#scheduleResolve = fulfill;\n    });\n  }\n\n  #processCompleted(): void {\n    this.#lastCompleteTime = this.getTime();\n    this.#isRunningProcess = false;\n    if (this.#process) {\n      this.innerSchedule(false);\n    }\n    this.processCompletedForTests();\n  }\n\n  private processCompletedForTests(): void {\n    // For sniffing in tests.\n  }\n\n  get process(): (() => (Promise<unknown>))|null {\n    return this.#process;\n  }\n\n  get processCompleted(): Promise<unknown>|null {\n    return this.#process ? this.#schedulePromise : null;\n  }\n\n  private onTimeout(): void {\n    this.#processTimeout = undefined;\n    this.#asSoonAsPossible = false;\n    this.#isRunningProcess = true;\n\n    void Promise.resolve()\n        .then(this.#process)\n        .catch(console.error.bind(console))\n        .then(this.#processCompleted.bind(this))\n        .then(this.#scheduleResolve);\n    this.#schedulePromise = new Promise(fulfill => {\n      this.#scheduleResolve = fulfill;\n    });\n    this.#process = null;\n  }\n\n  schedule(process: () => (Promise<unknown>), scheduling = Scheduling.Default): Promise<void> {\n    // Deliberately skip previous #process.\n    this.#process = process;\n\n    // Run the first scheduled task instantly.\n    const hasScheduledTasks = Boolean(this.#processTimeout) || this.#isRunningProcess;\n    const okToFire = this.getTime() - this.#lastCompleteTime > this.#timeout;\n    const asSoonAsPossible = scheduling === Scheduling.AsSoonAsPossible ||\n        (scheduling === Scheduling.Default && !hasScheduledTasks && okToFire);\n\n    const forceTimerUpdate = asSoonAsPossible && !this.#asSoonAsPossible;\n    this.#asSoonAsPossible = this.#asSoonAsPossible || asSoonAsPossible;\n\n    this.innerSchedule(forceTimerUpdate);\n\n    return this.#schedulePromise as Promise<void>;\n  }\n\n  private innerSchedule(forceTimerUpdate: boolean): void {\n    if (this.#isRunningProcess) {\n      return;\n    }\n    if (this.#processTimeout && !forceTimerUpdate) {\n      return;\n    }\n    if (this.#processTimeout) {\n      this.clearTimeout(this.#processTimeout);\n    }\n\n    const timeout = this.#asSoonAsPossible ? 0 : this.#timeout;\n    this.#processTimeout = this.setTimeout(this.onTimeout.bind(this), timeout);\n  }\n\n  private clearTimeout(timeoutId: number): void {\n    clearTimeout(timeoutId);\n  }\n\n  private setTimeout(operation: () => void, timeout: number): number {\n    return window.setTimeout(operation, timeout);\n  }\n\n  private getTime(): number {\n    return window.performance.now();\n  }\n}\n\nexport const enum Scheduling {\n  // If the throttler has run another task recently (i.e. time since the last run is less then the\n  // throttling delay), schedule the task to be run after the throttling delay. Otherwise scheule\n  // the task after the next tick.\n  Default = 'Default',\n  // Schedule the task to run at the next tick, even if the throttler has run another task recently.\n  AsSoonAsPossible = 'AsSoonAsPossible',\n  // Schedule the task to run after the throttling delay, even if the throttler has not run any\n  // task recently.\n  Delayed = 'Delayed',\n}\n"]}