{"version":3,"file":"ColorUtils.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/common/ColorUtils.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from './common.js';\n\ndescribe('ColorUtils', () => {\n  it('is able to blend two colors according to alpha blending', () => {\n    const firstColor: Common.ColorUtils.Color4D = [1, 0, 0, 1];\n    const secondColor: Common.ColorUtils.Color4D = [0, 0, 1, 1];\n    const result = Common.ColorUtils.blendColors(firstColor, secondColor);\n    assert.deepEqual(result, [1, 0, 0, 1], 'colors were not blended successfully');\n  });\n\n  it('is able to convert RGBA to HSLA', () => {\n    const result = Common.ColorUtils.rgbaToHsla([0.5, 0.5, 0.5, 0.5]);\n    assert.deepEqual(result, [0, 0, 0.5, 0.5], 'RGBA color was not converted to HSLA successfully');\n  });\n\n  it('is able to convert RGBA to HWB', () => {\n    const result = Common.ColorUtils.rgbaToHwba([0.5, 0.5, 0.5, 0.5]);\n    assert.deepEqual(result, [0, 0.5, 0.5, 0.5], 'RGBA color was not converted to HWB successfully');\n  });\n\n  it('is able to return the luminance of an RGBA value with the RGB values more than 0.03928', () => {\n    const lum = Common.ColorUtils.luminance([0.5, 0.5, 0.5, 0.5]);\n    assert.strictEqual(lum, 0.21404114048223255, 'luminance was not calculated correctly');\n  });\n\n  it('is able to return the luminance of an RGBA value with the RGB values less than 0.03928', () => {\n    const lum = Common.ColorUtils.luminance([0.03927, 0.03927, 0.03927, 0.5]);\n    assert.strictEqual(lum, 0.003039473684210526, 'luminance was not calculated correctly');\n  });\n\n  it('is able to calculate the contrast ratio between two colors', () => {\n    const firstColor: Common.ColorUtils.Color4D = [1, 0, 0, 1];\n    const secondColor: Common.ColorUtils.Color4D = [0, 0, 1, 1];\n    assert.strictEqual(\n        Common.ColorUtils.contrastRatio(firstColor, secondColor), 2.148936170212766,\n        'contrast ratio was not calculated correctly');\n  });\n\n  it('is able to calculate the contrast ratio (APCA) between two colors', () => {\n    const tests = [\n      {\n        fgColor: 'red',\n        bgColor: 'blue',\n        expectedContrast: -20.3,\n      },\n      {\n        fgColor: '#333333',\n        bgColor: '#444444',\n        expectedContrast: 0.0,\n      },\n      {\n        fgColor: '#888',\n        bgColor: '#FFF',\n        expectedContrast: 63.1,\n      },\n      {\n        fgColor: '#aaa',\n        bgColor: '#000',\n        expectedContrast: -56.2,\n      },\n      {\n        fgColor: '#def',\n        bgColor: '#123',\n        expectedContrast: -93.1,\n      },\n      {\n        fgColor: '#123',\n        bgColor: '#234',\n        expectedContrast: 0.0,\n      },\n      {\n        fgColor: 'rgb(158 158 158)',\n        bgColor: 'white',\n        expectedContrast: 52.1,\n      },\n      {\n        fgColor: 'rgba(0 0 0 / 38%)',\n        bgColor: 'white',\n        expectedContrast: 52.1,\n      },\n    ];\n    for (const test of tests) {\n      const fg = Common.Color.parse(test.fgColor)?.asLegacyColor();\n      const bg = Common.Color.parse(test.bgColor)?.asLegacyColor();\n      if (!fg || !bg) {\n        assert.fail(`Failed to parse foreground and/or background color: ${test.fgColor}, ${test.bgColor}`);\n        return;\n      }\n      assert.closeTo(Common.ColorUtils.contrastRatioAPCA(fg.rgba(), bg.rgba()), test.expectedContrast, 0.1);\n    }\n  });\n\n  it('is able to find APCA threshold by font size and weight', () => {\n    assert.deepEqual(Common.ColorUtils.getAPCAThreshold('11px', '100'), null);\n    assert.deepEqual(Common.ColorUtils.getAPCAThreshold('121px', '100'), 60);\n    assert.deepEqual(Common.ColorUtils.getAPCAThreshold('16px', '100'), null);\n    assert.deepEqual(Common.ColorUtils.getAPCAThreshold('16px', '400'), 90);\n    assert.deepEqual(Common.ColorUtils.getAPCAThreshold('16px', '900'), 50);\n  });\n\n  it('is able to find AA/AAA thresholds', () => {\n    assert.deepEqual(Common.ColorUtils.getContrastThreshold('11px', '100'), {aa: 4.5, aaa: 7});\n    assert.deepEqual(Common.ColorUtils.getContrastThreshold('121px', '100'), {aa: 3, aaa: 4.5});\n    assert.deepEqual(Common.ColorUtils.getContrastThreshold('16px', '100'), {aa: 4.5, aaa: 7});\n    assert.deepEqual(Common.ColorUtils.getContrastThreshold('16px', '400'), {aa: 4.5, aaa: 7});\n    assert.deepEqual(Common.ColorUtils.getContrastThreshold('16px', '900'), {aa: 4.5, aaa: 7});\n  });\n});\n"]}