{"version":3,"file":"Console.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/common/Console.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from './common.js';\n\nconst Console = Common.Console.Console;\n\ndescribe('Console', () => {\n  let consoleImpl: Common.Console.Console;\n  beforeEach(() => {\n    consoleImpl = Console.instance({forceNew: true});\n  });\n\n  it('adds messages', () => {\n    consoleImpl.addMessage('Foo', Common.Console.MessageLevel.Info, true);\n    const messages = consoleImpl.messages();\n    assert.strictEqual(messages.length, 1);\n    assert.strictEqual(messages[0].text, 'Foo');\n  });\n\n  it('adds handles messages of all types', () => {\n    const messageTypes = new Map<Common.Console.MessageLevel, string>([\n      [Common.Console.MessageLevel.Info, 'log'],\n      [Common.Console.MessageLevel.Warning, 'warn'],\n      [Common.Console.MessageLevel.Error, 'error'],\n    ]);\n\n    for (const [type, method] of messageTypes) {\n      consoleImpl = Console.instance({forceNew: true});\n\n      // Dispatch the message of the appropriate type.\n      // @ts-ignore\n      consoleImpl[method](type);\n\n      // Now read the message back and check it.\n      const messages = consoleImpl.messages();\n      assert.strictEqual(messages.length, 1);\n      assert.strictEqual(messages[0].text, type);\n      assert.strictEqual(messages[0].level, type);\n    }\n  });\n\n  it('stores messages', () => {\n    consoleImpl.addMessage('Foo', Common.Console.MessageLevel.Info, true);\n    consoleImpl.addMessage('Baz', Common.Console.MessageLevel.Warning, true);\n    consoleImpl.addMessage('Bar', Common.Console.MessageLevel.Error, true);\n    consoleImpl.addMessage('Donkey', Common.Console.MessageLevel.Info, true);\n    const messages = consoleImpl.messages();\n    assert.strictEqual(messages.length, 4);\n  });\n\n  it('dispatches events to listeners', done => {\n    const callback = ({data}: Common.EventTarget.EventTargetEvent<Common.Console.Message>) => {\n      consoleImpl.removeEventListener(Common.Console.Events.MessageAdded, callback);\n      assert.strictEqual(data.text, 'Foo');\n      done();\n    };\n\n    consoleImpl.addEventListener(Common.Console.Events.MessageAdded, callback);\n    consoleImpl.addMessage('Foo', Common.Console.MessageLevel.Info, true);\n  });\n});\n"]}