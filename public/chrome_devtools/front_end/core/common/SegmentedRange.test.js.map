{"version":3,"file":"SegmentedRange.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/common/SegmentedRange.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from './common.js';\n\nconst Segment = Common.SegmentedRange.Segment;\nconst SegmentedRange = Common.SegmentedRange.SegmentedRange;\n\ndescribe('Segment', () => {\n  it('calculates intersections', () => {\n    const segmentA = new Segment(1, 2, 'A');\n    const segmentB = new Segment(1.5, 2.5, 'B');\n    const segmentC = new Segment(3, 5, 'C');\n\n    assert.isTrue(segmentA.intersects(segmentB));\n    assert.isFalse(segmentA.intersects(segmentC));\n  });\n\n  it('throws for invalid segments', () => {\n    assert.throws(() => new Segment(3, 2, 'V'));\n  });\n});\n\ndescribe('SegmentedRange', () => {\n  let segmentedRange: Common.SegmentedRange.SegmentedRange<string>;\n\n  function mergeSegments(first: Common.SegmentedRange.Segment<string>, second: Common.SegmentedRange.Segment<string>) {\n    const inOrder = first.end >= second.begin;\n    const matchingData = first.data === second.data;\n    return inOrder && matchingData ? first : null;\n  }\n\n  beforeEach(() => {\n    segmentedRange = new SegmentedRange(mergeSegments);\n  });\n\n  it('handles single ranges', () => {\n    const segment = new Segment(0, 1, 'A');\n    segmentedRange.append(segment);\n\n    assert.deepEqual(segmentedRange.segments(), [segment]);\n  });\n\n  it('handles two adjacent ranges', () => {\n    const segmentA = new Segment(1, 2, 'A');\n    const segmentB = new Segment(2, 3, 'B');\n\n    segmentedRange.append(segmentA);\n    segmentedRange.append(segmentB);\n\n    assert.deepEqual(segmentedRange.segments(), [segmentA, segmentB]);\n  });\n\n  it('handles two overlapping mergeable ranges', () => {\n    const segmentA = new Segment(1, 2, 'A');\n    const segmentB = new Segment(1.5, 3, 'A');\n\n    segmentedRange.append(segmentA);\n    segmentedRange.append(segmentB);\n\n    const expectedSegment = new Segment(1, 3, 'A');\n    assert.deepEqual(segmentedRange.segments(), [expectedSegment]);\n  });\n\n  it('handles multiple overlapping mergeable ranges', () => {\n    const segmentA = new Segment(1, 2, 'A');\n    const segmentB = new Segment(3, 5, 'A');\n    const segmentC = new Segment(1.5, 3.5, 'A');\n\n    segmentedRange.append(segmentA);\n    segmentedRange.append(segmentB);\n    segmentedRange.append(segmentC);\n\n    const expectedSegment = new Segment(1, 5, 'A');\n    assert.deepEqual(segmentedRange.segments(), [expectedSegment]);\n  });\n\n  it('handles multiple overlapping non-mergeable ranges', () => {\n    const segmentA = new Segment(1, 2, 'A');\n    const segmentB = new Segment(3, 5, 'A');\n    const segmentC = new Segment(1.5, 3.5, 'B');\n\n    segmentedRange.append(segmentA);\n    segmentedRange.append(segmentB);\n    segmentedRange.append(segmentC);\n\n    const expectedSegments = [\n      new Segment(1, 1.5, 'A'),\n      new Segment(1.5, 3.5, 'B'),\n      new Segment(3.5, 5, 'A'),\n    ];\n    assert.deepEqual(segmentedRange.segments(), expectedSegments);\n  });\n\n  it('handles two overlapping non-mergeable ranges', () => {\n    const segmentA = new Segment(1, 2, 'A');\n    const segmentB = new Segment(1.5, 3, 'B');\n\n    segmentedRange.append(segmentA);\n    segmentedRange.append(segmentB);\n\n    const expectedSegments = [\n      new Segment(1, 1.5, 'A'),\n      new Segment(1.5, 3, 'B'),\n    ];\n    assert.deepEqual(segmentedRange.segments(), expectedSegments);\n  });\n\n  it('handles nested, mergeable ranges', () => {\n    const segmentA = new Segment(0, 4, 'A');\n    const segmentB = new Segment(2, 3, 'A');\n\n    segmentedRange.append(segmentA);\n    segmentedRange.append(segmentB);\n\n    const expectedSegment = new Segment(0, 4, 'A');\n    assert.deepEqual(segmentedRange.segments(), [expectedSegment]);\n  });\n\n  it('handles nested, non-mergeable ranges', () => {\n    const segmentA = new Segment(0, 4, 'A');\n    const segmentB = new Segment(2, 3, 'B');\n\n    segmentedRange.append(segmentA);\n    segmentedRange.append(segmentB);\n\n    const expectedSegments = [\n      new Segment(0, 2, 'A'),\n      new Segment(2, 3, 'B'),\n      new Segment(3, 4, 'A'),\n    ];\n    assert.deepEqual(segmentedRange.segments(), expectedSegments);\n  });\n\n  it('handles out-of-order, mergeable ranges', () => {\n    const segmentA = new Segment(0, 2, 'A');\n    const segmentB = new Segment(3, 5, 'A');\n    const segmentC = new Segment(2, 3, 'A');\n\n    segmentedRange.append(segmentA);\n    segmentedRange.append(segmentB);\n    segmentedRange.append(segmentC);\n\n    const expectedSegment = new Segment(0, 5, 'A');\n    assert.deepEqual(segmentedRange.segments(), [expectedSegment]);\n  });\n\n  it('handles out-of-order, non-mergeable ranges', () => {\n    const segmentA = new Segment(0, 2, 'A');\n    const segmentB = new Segment(3, 5, 'A');\n    const segmentC = new Segment(2, 3, 'B');\n\n    segmentedRange.append(segmentA);\n    segmentedRange.append(segmentB);\n    segmentedRange.append(segmentC);\n\n    const expectedSegments = [\n      new Segment(0, 2, 'A'),\n      new Segment(2, 3, 'B'),\n      new Segment(3, 5, 'A'),\n    ];\n    assert.deepEqual(segmentedRange.segments(), expectedSegments);\n  });\n\n  it('handles one segment consuming many mergeable ranges', () => {\n    const segmentA = new Segment(0, 1, 'A');\n    const segmentB = new Segment(2, 3, 'A');\n    const segmentC = new Segment(4, 5, 'A');\n    const segmentD = new Segment(6, 7, 'A');\n\n    // E merges A through D.\n    const segmentE = new Segment(2, 6, 'A');\n\n    segmentedRange.append(segmentA);\n    segmentedRange.append(segmentB);\n    segmentedRange.append(segmentC);\n    segmentedRange.append(segmentD);\n    segmentedRange.append(segmentE);\n\n    const expectedSegments = [\n      new Segment(0, 1, 'A'),\n      new Segment(2, 7, 'A'),\n    ];\n    assert.deepEqual(segmentedRange.segments(), expectedSegments);\n  });\n\n  it('handles one segment consuming many non-mergeable ranges', () => {\n    const segmentA = new Segment(0, 1, 'A');\n    const segmentB = new Segment(2, 3, 'A');\n    const segmentC = new Segment(4, 5, 'A');\n    const segmentD = new Segment(6, 7, 'A');\n\n    // E merges A through D.\n    const segmentE = new Segment(2, 6, 'B');\n\n    segmentedRange.append(segmentA);\n    segmentedRange.append(segmentB);\n    segmentedRange.append(segmentC);\n    segmentedRange.append(segmentD);\n    segmentedRange.append(segmentE);\n\n    const expectedSegments = [\n      new Segment(0, 1, 'A'),\n      new Segment(2, 6, 'B'),\n      new Segment(6, 7, 'A'),\n    ];\n    assert.deepEqual(segmentedRange.segments(), expectedSegments);\n  });\n});\n"]}