{"version":3,"file":"SettingRegistration.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/common/SettingRegistration.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {\n  deinitializeGlobalVars,\n  initializeGlobalVars,\n} from '../../testing/EnvironmentHelpers.js';\nimport * as QuickOpen from '../../ui/legacy/components/quick_open/quick_open.js';\nimport * as i18n from '../i18n/i18n.js';\nimport type * as Root from '../root/root.js';\n\nimport * as Common from './common.js';\n\nconst settingName = 'mock-setting';\nconst settingTitle = 'Mock setting';\nconst enableTitle = 'Enable mock setting';\nconst disableTitle = 'Disable mock setting';\n\ndescribe('SettingRegistration', () => {\n  // const enum `SettingCategory` not available in top level scope, thats why\n  // its initialized here.\n  const settingCategory = Common.Settings.SettingCategory.CONSOLE;\n\n  before(async () => {\n    Common.Settings.registerSettingsForTest(\n        [{\n          category: settingCategory,\n          title: i18n.i18n.lockedLazyString(settingTitle),\n          settingType: Common.Settings.SettingType.BOOLEAN,\n          settingName,\n          defaultValue: false,\n          options: [\n            {\n              value: true,\n              title: i18n.i18n.lockedLazyString(enableTitle),\n            },\n            {\n              value: false,\n              title: i18n.i18n.lockedLazyString(disableTitle),\n            },\n          ],\n        }],\n        true);\n    await initializeGlobalVars({reset: false});\n  });\n\n  after(async () => {\n    await deinitializeGlobalVars();\n  });\n\n  it('retrieves a registered setting', () => {\n    try {\n      const preRegisteredSetting =\n          Common.Settings.Settings.instance().moduleSetting(settingName) as Common.Settings.Setting<boolean>;\n      assert.strictEqual(preRegisteredSetting.title(), settingTitle, 'Setting title is not returned correctly');\n      assert.strictEqual(\n          preRegisteredSetting.category(), settingCategory, 'Setting category is not returned correctly');\n      assert.isNotTrue(preRegisteredSetting.get(), 'Setting value is not returned correctly');\n    } catch (error) {\n      assert.fail('Failed to find setting registration');\n    }\n  });\n\n  it('adds commands for changing a setting\\'s value', () => {\n    const allCommands = QuickOpen.CommandMenu.CommandMenu.instance({forceNew: true}).commands();\n    const disableSettingCommands = allCommands.filter(\n        command => command.title === disableTitle &&\n            command.category === Common.Settings.getLocalizedSettingsCategory(settingCategory));\n    const enableSettingCommands = allCommands.filter(\n        command => command.title === enableTitle &&\n            command.category === Common.Settings.getLocalizedSettingsCategory(settingCategory));\n    assert.strictEqual(\n        disableSettingCommands.length, 1, 'Commands for changing a setting\\'s value were not added correctly');\n    assert.strictEqual(\n        enableSettingCommands.length, 1, 'Commands for changing a setting\\'s value were not added correctly');\n  });\n\n  it('triggers a setting\\'s change listener when a setting is set', () => {\n    const preRegisteredSetting = Common.Settings.Settings.instance().moduleSetting(settingName);\n    let settingChanged = false;\n    preRegisteredSetting.addChangeListener(() => {\n      settingChanged = true;\n    });\n    preRegisteredSetting.set(true);\n    assert.isTrue(settingChanged, 'Setting\\'s change listener was not triggered after the setting was set');\n  });\n\n  it('throws an error when trying to register a duplicated setting name', () => {\n    assert.throws(() => {\n      Common.Settings.registerSettingExtension({\n        settingName,\n        settingType: Common.Settings.SettingType.BOOLEAN,\n        defaultValue: false,\n      });\n    });\n  });\n\n  it('deletes a registered setting using its name', () => {\n    const removalResult = Common.Settings.maybeRemoveSettingExtension(settingName);\n    assert.isTrue(removalResult);\n    assert.doesNotThrow(() => {\n      Common.Settings.registerSettingExtension({\n        settingName,\n        settingType: Common.Settings.SettingType.BOOLEAN,\n        defaultValue: false,\n      });\n    });\n  });\n\n  it('can handle settings with condition which depends on host config', () => {\n    const configSettingName = 'mock-setting-with-host-config';\n    Common.Settings.registerSettingExtension({\n      settingName: configSettingName,\n      settingType: Common.Settings.SettingType.BOOLEAN,\n      defaultValue: false,\n      condition: config => {\n        return config?.devToolsConsoleInsightsDogfood.enabled === true;\n      },\n    });\n    assert.throws(() => Common.Settings.Settings.instance().moduleSetting(configSettingName));\n\n    const dummyStorage = new Common.Settings.SettingsStorage({});\n    Common.Settings.Settings.instance({\n      forceNew: true,\n      syncedStorage: dummyStorage,\n      globalStorage: dummyStorage,\n      localStorage: dummyStorage,\n      config: {\n        devToolsConsoleInsightsDogfood: {\n          aidaModelId: 'mockModel',\n          aidaTemperature: 0.2,\n          optIn: false,\n          enabled: true,\n        },\n      } as Root.Runtime.HostConfig,\n    });\n    const setting = Common.Settings.Settings.instance().moduleSetting(configSettingName);\n    assert.isNotNull(setting);\n    assert.isFalse(setting.get());\n  });\n});\n"]}