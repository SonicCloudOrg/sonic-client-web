{"version":3,"file":"Progress.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/common/Progress.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,MAAM,MAAM,aAAa,CAAC;AAEtC,MAAM,iBAAiB,GAAG,MAAM,CAAC,QAAQ,CAAC,iBAAiB,CAAC;AAC5D,MAAM,aAAa,GAAG,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC;AAEpD,MAAM,qBAAqB;IACjB,kBAAkB,GAAG,KAAK,CAAC;IAC3B,SAAS,GAAG,CAAC,CAAC;IACd,aAAa,GAAG,CAAC,CAAC;IAClB,KAAK,CAAoB;IAEjC,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED,IAAI,gBAAgB;QAClB,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IAED,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED,UAAU;QACR,OAAO,IAAI,CAAC,kBAAkB,CAAC;IACjC,CAAC;IAED,IAAI;QACF,OAAO,0BAA0B,CAAC;IACpC,CAAC;IAED,YAAY,CAAC,SAAiB;QAC5B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAED,SAAS,CAAC,MAAc,EAAE,KAAa;QACrC,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC;QAC5B,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE,CAAC;YACjC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACrB,CAAC;IACH,CAAC;IAED,QAAQ,CAAC,KAAa;QACpB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAED,eAAe,CAAC,MAAc;QAC5B,IAAI,CAAC,SAAS,IAAI,MAAM,CAAC;IAC3B,CAAC;IAED,gBAAgB;IAChB,MAAM;QACJ,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;IACjC,CAAC;CACF;AAED,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;IACtC,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;QACnD,MAAM,SAAS,GAAG,IAAI,qBAAqB,EAAE,CAAC;QAC9C,MAAM,SAAS,GAAG,IAAI,iBAAiB,CAAC,SAAS,CAAC,CAAC;QACnD,MAAM,WAAW,GAAG,SAAS,CAAC,iBAAiB,EAAE,CAAC;QAElD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QAClD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAClD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;QAE9C,WAAW,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;QAClC,WAAW,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;QAC1B,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;QACpD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAClD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;QAE9C,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QAC9B,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;QACpD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC;QACpD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;QAE9C,WAAW,CAAC,SAAS,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;QACrC,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QAClD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC;QACpD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;QAE9C,WAAW,CAAC,IAAI,EAAE,CAAC;QACnB,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QAClD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAClD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;QACrD,MAAM,SAAS,GAAG,IAAI,qBAAqB,EAAE,CAAC;QAC9C,MAAM,SAAS,GAAG,IAAI,iBAAiB,CAAC,SAAS,CAAC,CAAC;QACnD,sDAAsD;QACtD,MAAM,YAAY,GAAG,SAAS,CAAC,iBAAiB,EAAE,CAAC;QACnD,8CAA8C;QAC9C,MAAM,YAAY,GAAG,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;QAEpD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QAClD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAClD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;QAE9C,YAAY,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;QACnC,YAAY,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QAC/B,YAAY,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;QAC3B,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;QACpD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;QACrD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;QAE9C,YAAY,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;QAC3B,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;QACpD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;QACrD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;QAE9C,YAAY,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;QAC9B,YAAY,CAAC,SAAS,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;QACrC,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QAClD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC;QACtD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;QAE9C,YAAY,CAAC,SAAS,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;QACtC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAC1B,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QAClD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC;QACpD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;QAE9C,YAAY,CAAC,IAAI,EAAE,CAAC;QACpB,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QAClD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC;QACtD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;QAE9C,YAAY,CAAC,IAAI,EAAE,CAAC;QACpB,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QAClD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAClD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;QACjD,MAAM,SAAS,GAAG,IAAI,qBAAqB,EAAE,CAAC;QAC9C,MAAM,SAAS,GAAG,IAAI,iBAAiB,CAAC,SAAS,CAAC,CAAC;QACnD,MAAM,WAAW,GAAG,SAAS,CAAC,iBAAiB,EAAE,CAAC;QAElD,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,UAAU,EAAE,EAAE,iCAAiC,CAAC,CAAC;QAC5E,SAAS,CAAC,MAAM,EAAE,CAAC;QACnB,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,UAAU,EAAE,EAAE,6BAA6B,CAAC,CAAC;IACzE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;QACnD,MAAM,SAAS,GAAG,IAAI,qBAAqB,EAAE,CAAC;QAC9C,MAAM,UAAU,GAAG,IAAI,iBAAiB,CAAC,SAAS,CAAC,CAAC;QACpD,MAAM,aAAa,GAAG,UAAU,CAAC,iBAAiB,EAAE,CAAC;QACrD,MAAM,UAAU,GAAG,IAAI,iBAAiB,CAAC,aAAa,CAAC,CAAC;QACxD,MAAM,aAAa,GAAG,UAAU,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC,CAAE,+BAA+B;QAExF,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QAClD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAClD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;QAE9C,aAAa,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;QAC5B,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QAClD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAClD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;QAE9C,aAAa,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QAChC,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QAClD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC;QACpD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;QAE9C,aAAa,CAAC,SAAS,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;QACvC,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QAClD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC;QACpD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;QAE9C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,UAAU,EAAE,EAAE,iCAAiC,CAAC,CAAC;QAC9E,SAAS,CAAC,MAAM,EAAE,CAAC;QACnB,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,UAAU,EAAE,EAAE,6BAA6B,CAAC,CAAC;QAEzE,aAAa,CAAC,IAAI,EAAE,CAAC;QACrB,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QAClD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAClD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mCAAmC,EAAE,GAAG,EAAE;QAC3C,MAAM,SAAS,GAAG,IAAI,qBAAqB,EAAE,CAAC;QAC9C,MAAM,SAAS,GAAG,IAAI,iBAAiB,CAAC,SAAS,CAAC,CAAC;QACnD,MAAM,WAAW,GAAG,SAAS,CAAC,iBAAiB,EAAE,CAAC;QAElD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QAClD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAClD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;QAC9C,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,CAAC;QAE/C,WAAW,CAAC,eAAe,EAAE,CAAC;QAE9B,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QAClD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QAClD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;QAC9C,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+EAA+E,EAAE,GAAG,EAAE;QACvF,MAAM,aAAa,GAAG,IAAI,aAAa,EAAE,CAAC;QAC1C,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,UAAU,EAAE,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4EAA4E,EAAE,GAAG,EAAE;QACpF,MAAM,SAAS,GAAG,IAAI,qBAAqB,EAAE,CAAC;QAC9C,MAAM,SAAS,GAAG,IAAI,iBAAiB,CAAC,SAAS,CAAC,CAAC;QACnD,MAAM,WAAW,GAAG,SAAS,CAAC,iBAAiB,EAAE,CAAC;QAClD,MAAM,aAAa,GAAG,IAAI,aAAa,CAAC,WAAW,CAAC,CAAC;QAErD,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,UAAU,EAAE,EAAE,iCAAiC,CAAC,CAAC;QAC9E,SAAS,CAAC,MAAM,EAAE,CAAC;QACnB,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,UAAU,EAAE,EAAE,6BAA6B,CAAC,CAAC;IAC3E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iEAAiE,EAAE,GAAG,EAAE;QACzE,MAAM,SAAS,GAAG,IAAI,qBAAqB,EAAE,CAAC;QAC9C,MAAM,aAAa,GAAG,IAAI,aAAa,EAAE,CAAC;QAE1C,aAAa,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;QACrC,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8DAA8D,EAAE,GAAG,EAAE;QACtE,MAAM,SAAS,GAAG,IAAI,qBAAqB,EAAE,CAAC;QAC9C,MAAM,SAAS,GAAG,IAAI,iBAAiB,CAAC,SAAS,CAAC,CAAC;QACnD,MAAM,WAAW,GAAG,SAAS,CAAC,iBAAiB,EAAE,CAAC;QAClD,MAAM,aAAa,GAAG,IAAI,aAAa,CAAC,WAAW,CAAC,CAAC;QAErD,aAAa,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;QACrC,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;QACxC,MAAM,SAAS,GAAG,IAAI,qBAAqB,EAAE,CAAC;QAC9C,MAAM,SAAS,GAAG,IAAI,iBAAiB,CAAC,SAAS,CAAC,CAAC;QACnD,MAAM,WAAW,GAAG,SAAS,CAAC,iBAAiB,EAAE,CAAC;QAClD,MAAM,aAAa,GAAG,IAAI,aAAa,CAAC,WAAW,CAAC,CAAC;QAErD,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAC9B,aAAa,CAAC,IAAI,EAAE,CAAC;QACrB,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oDAAoD,EAAE,GAAG,EAAE;QAC5D,MAAM,SAAS,GAAG,IAAI,qBAAqB,EAAE,CAAC;QAC9C,MAAM,SAAS,GAAG,IAAI,iBAAiB,CAAC,SAAS,CAAC,CAAC;QACnD,MAAM,WAAW,GAAG,SAAS,CAAC,iBAAiB,EAAE,CAAC;QAClD,MAAM,aAAa,GAAG,IAAI,aAAa,CAAC,WAAW,CAAC,CAAC;QAErD,aAAa,CAAC,SAAS,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;QACzC,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,CAAC;QAC/C,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uDAAuD,EAAE,GAAG,EAAE;QAC/D,MAAM,SAAS,GAAG,IAAI,qBAAqB,EAAE,CAAC;QAC9C,MAAM,SAAS,GAAG,IAAI,iBAAiB,CAAC,SAAS,CAAC,CAAC;QACnD,MAAM,WAAW,GAAG,SAAS,CAAC,iBAAiB,EAAE,CAAC;QAClD,MAAM,aAAa,GAAG,IAAI,aAAa,CAAC,WAAW,CAAC,CAAC;QAErD,aAAa,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACjC,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from './common.js';\n\nconst CompositeProgress = Common.Progress.CompositeProgress;\nconst ProgressProxy = Common.Progress.ProgressProxy;\n\nclass MockProgressIndicator implements Common.Progress.Progress {\n  private isCanceledInternal = false;\n  private totalWork = 0;\n  private workCompleted = 0;\n  private title!: string|undefined;\n\n  get getTitle(): string|undefined {\n    return this.title;\n  }\n\n  get getWorkCompleted(): number {\n    return this.workCompleted;\n  }\n\n  get getTotalWork(): number {\n    return this.totalWork;\n  }\n\n  isCanceled() {\n    return this.isCanceledInternal;\n  }\n\n  done() {\n    return 'progress indicator: done';\n  }\n\n  setTotalWork(totalWork: number) {\n    this.totalWork = totalWork;\n  }\n\n  setWorked(worked: number, title: string) {\n    this.workCompleted = worked;\n    if (typeof title !== 'undefined') {\n      this.title = title;\n    }\n  }\n\n  setTitle(title: string) {\n    this.title = title;\n  }\n\n  incrementWorked(worked: number) {\n    this.totalWork += worked;\n  }\n\n  // Test methods.\n  cancel() {\n    this.isCanceledInternal = true;\n  }\n}\n\ndescribe('Composite Progress Bar', () => {\n  it('works correctly with a single subprogress', () => {\n    const indicator = new MockProgressIndicator();\n    const composite = new CompositeProgress(indicator);\n    const subProgress = composite.createSubProgress();\n\n    assert.strictEqual(indicator.getTitle, undefined);\n    assert.strictEqual(indicator.getWorkCompleted, 0);\n    assert.strictEqual(indicator.getTotalWork, 1);\n\n    subProgress.setTitle('cuckooing');\n    subProgress.setWorked(10);\n    assert.strictEqual(indicator.getTitle, 'cuckooing');\n    assert.strictEqual(indicator.getWorkCompleted, 0);\n    assert.strictEqual(indicator.getTotalWork, 1);\n\n    subProgress.setTotalWork(100);\n    assert.strictEqual(indicator.getTitle, 'cuckooing');\n    assert.strictEqual(indicator.getWorkCompleted, 0.1);\n    assert.strictEqual(indicator.getTotalWork, 1);\n\n    subProgress.setWorked(20, 'meowing');\n    assert.strictEqual(indicator.getTitle, 'meowing');\n    assert.strictEqual(indicator.getWorkCompleted, 0.2);\n    assert.strictEqual(indicator.getTotalWork, 1);\n\n    subProgress.done();\n    assert.strictEqual(indicator.getTitle, 'meowing');\n    assert.strictEqual(indicator.getWorkCompleted, 1);\n    assert.strictEqual(indicator.getTotalWork, 1);\n  });\n\n  it('works correctly with multiple subprogresses', () => {\n    const indicator = new MockProgressIndicator();\n    const composite = new CompositeProgress(indicator);\n    // Creates a sub progress with the default weight of 1\n    const subProgress1 = composite.createSubProgress();\n    // Creates a sub progress with the weight of 3\n    const subProgress2 = composite.createSubProgress(3);\n\n    assert.strictEqual(indicator.getTitle, undefined);\n    assert.strictEqual(indicator.getWorkCompleted, 0);\n    assert.strictEqual(indicator.getTotalWork, 1);\n\n    subProgress1.setTitle('cuckooing');\n    subProgress1.setTotalWork(100);\n    subProgress1.setWorked(20);\n    assert.strictEqual(indicator.getTitle, 'cuckooing');\n    assert.strictEqual(indicator.getWorkCompleted, 0.05);\n    assert.strictEqual(indicator.getTotalWork, 1);\n\n    subProgress2.setWorked(10);\n    assert.strictEqual(indicator.getTitle, 'cuckooing');\n    assert.strictEqual(indicator.getWorkCompleted, 0.05);\n    assert.strictEqual(indicator.getTotalWork, 1);\n\n    subProgress2.setTotalWork(10);\n    subProgress2.setWorked(3, 'barking');\n    assert.strictEqual(indicator.getTitle, 'barking');\n    assert.strictEqual(indicator.getWorkCompleted, 0.275);\n    assert.strictEqual(indicator.getTotalWork, 1);\n\n    subProgress1.setWorked(50, 'meowing');\n    subProgress2.setWorked(5);\n    assert.strictEqual(indicator.getTitle, 'meowing');\n    assert.strictEqual(indicator.getWorkCompleted, 0.5);\n    assert.strictEqual(indicator.getTotalWork, 1);\n\n    subProgress2.done();\n    assert.strictEqual(indicator.getTitle, 'meowing');\n    assert.strictEqual(indicator.getWorkCompleted, 0.875);\n    assert.strictEqual(indicator.getTotalWork, 1);\n\n    subProgress1.done();\n    assert.strictEqual(indicator.getTitle, 'meowing');\n    assert.strictEqual(indicator.getWorkCompleted, 1);\n    assert.strictEqual(indicator.getTotalWork, 1);\n  });\n\n  it('returns the correct cancellation status', () => {\n    const indicator = new MockProgressIndicator();\n    const composite = new CompositeProgress(indicator);\n    const subProgress = composite.createSubProgress();\n\n    assert.isFalse(subProgress.isCanceled(), 'progress should not be canceled');\n    indicator.cancel();\n    assert.isTrue(subProgress.isCanceled(), 'progress should be canceled');\n  });\n\n  it('works correctly with nested subprogresses', () => {\n    const indicator = new MockProgressIndicator();\n    const composite0 = new CompositeProgress(indicator);\n    const subProgress01 = composite0.createSubProgress();\n    const composite1 = new CompositeProgress(subProgress01);\n    const subProgress11 = composite1.createSubProgress(10);  // Weight should have no effect\n\n    assert.strictEqual(indicator.getTitle, undefined);\n    assert.strictEqual(indicator.getWorkCompleted, 0);\n    assert.strictEqual(indicator.getTotalWork, 1);\n\n    subProgress11.setWorked(10);\n    assert.strictEqual(indicator.getTitle, undefined);\n    assert.strictEqual(indicator.getWorkCompleted, 0);\n    assert.strictEqual(indicator.getTotalWork, 1);\n\n    subProgress11.setTotalWork(100);\n    assert.strictEqual(indicator.getTitle, undefined);\n    assert.strictEqual(indicator.getWorkCompleted, 0.1);\n    assert.strictEqual(indicator.getTotalWork, 1);\n\n    subProgress11.setWorked(50, 'meowing');\n    assert.strictEqual(indicator.getTitle, 'meowing');\n    assert.strictEqual(indicator.getWorkCompleted, 0.5);\n    assert.strictEqual(indicator.getTotalWork, 1);\n\n    assert.isFalse(subProgress11.isCanceled(), 'progress should not be canceled');\n    indicator.cancel();\n    assert.isTrue(subProgress11.isCanceled(), 'progress should be canceled');\n\n    subProgress11.done();\n    assert.strictEqual(indicator.getTitle, 'meowing');\n    assert.strictEqual(indicator.getWorkCompleted, 1);\n    assert.strictEqual(indicator.getTotalWork, 1);\n  });\n\n  it('can set sub progress to be worked', () => {\n    const indicator = new MockProgressIndicator();\n    const composite = new CompositeProgress(indicator);\n    const subProgress = composite.createSubProgress();\n\n    assert.strictEqual(indicator.getTitle, undefined);\n    assert.strictEqual(indicator.getWorkCompleted, 0);\n    assert.strictEqual(indicator.getTotalWork, 1);\n    assert.strictEqual(subProgress.getWorked(), 0);\n\n    subProgress.incrementWorked();\n\n    assert.strictEqual(indicator.getTitle, undefined);\n    assert.strictEqual(indicator.getWorkCompleted, 0);\n    assert.strictEqual(indicator.getTotalWork, 1);\n    assert.strictEqual(subProgress.getWorked(), 1);\n  });\n\n  it('returns the correct cancellation status for a progress proxy with no delegate', () => {\n    const progressProxy = new ProgressProxy();\n    assert.isFalse(progressProxy.isCanceled());\n  });\n\n  it('returns the correct cancellation status for a progress proxy with delegate', () => {\n    const indicator = new MockProgressIndicator();\n    const composite = new CompositeProgress(indicator);\n    const subProgress = composite.createSubProgress();\n    const progressProxy = new ProgressProxy(subProgress);\n\n    assert.isFalse(progressProxy.isCanceled(), 'progress should not be canceled');\n    indicator.cancel();\n    assert.isTrue(progressProxy.isCanceled(), 'progress should be canceled');\n  });\n\n  it('returns the correct title for a progress proxy with no delegate', () => {\n    const indicator = new MockProgressIndicator();\n    const progressProxy = new ProgressProxy();\n\n    progressProxy.setTitle('test proxy');\n    assert.isUndefined(indicator.getTitle);\n  });\n\n  it('returns the correct title for a progress proxy with delegate', () => {\n    const indicator = new MockProgressIndicator();\n    const composite = new CompositeProgress(indicator);\n    const subProgress = composite.createSubProgress();\n    const progressProxy = new ProgressProxy(subProgress);\n\n    progressProxy.setTitle('test proxy');\n    assert.strictEqual(indicator.getTitle, 'test proxy');\n  });\n\n  it('marks a progress proxy as done', () => {\n    const indicator = new MockProgressIndicator();\n    const composite = new CompositeProgress(indicator);\n    const subProgress = composite.createSubProgress();\n    const progressProxy = new ProgressProxy(subProgress);\n\n    progressProxy.setTotalWork(1);\n    progressProxy.done();\n    assert.strictEqual(subProgress.getWorked(), 1);\n  });\n\n  it('able to set worked with title for a progress proxy', () => {\n    const indicator = new MockProgressIndicator();\n    const composite = new CompositeProgress(indicator);\n    const subProgress = composite.createSubProgress();\n    const progressProxy = new ProgressProxy(subProgress);\n\n    progressProxy.setWorked(1, 'test proxy');\n    assert.strictEqual(subProgress.getWorked(), 1);\n    assert.strictEqual(indicator.getTitle, 'test proxy');\n  });\n\n  it('able to set worked without title for a progress proxy', () => {\n    const indicator = new MockProgressIndicator();\n    const composite = new CompositeProgress(indicator);\n    const subProgress = composite.createSubProgress();\n    const progressProxy = new ProgressProxy(subProgress);\n\n    progressProxy.incrementWorked(1);\n    assert.strictEqual(subProgress.getWorked(), 1);\n  });\n});\n"]}