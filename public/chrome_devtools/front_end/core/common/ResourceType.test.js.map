{"version":3,"file":"ResourceType.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/common/ResourceType.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {describeWithEnvironment} from '../../testing/EnvironmentHelpers.js';\nimport type * as Platform from '../platform/platform.js';\n\nimport * as Common from './common.js';\n\nconst ResourceType = Common.ResourceType.ResourceType;\nconst ResourceCategory = Common.ResourceType.ResourceCategory;\nconst resourceTypes = Common.ResourceType.resourceTypes;\nconst testTitle = () => 'Test Title' as Platform.UIString.LocalizedString;\nconst testShortTitle = () => 'Test Short Title' as Platform.UIString.LocalizedString;\nconst categoryTestTitle = () => 'Category Test Title' as Platform.UIString.LocalizedString;\nconst categoryTestShortTitle = () => 'Category Test Short Title' as Platform.UIString.LocalizedString;\nconst typeTestTitle = () => 'Type Test Title' as Platform.UIString.LocalizedString;\n\ndescribe('ResourceCategory class', () => {\n  it('is able to be instantiated successfully', () => {\n    const resourceCategory = new ResourceCategory(testTitle, testShortTitle);\n    assert.strictEqual(resourceCategory.title(), 'Test Title', 'title is not correct');\n    assert.strictEqual(resourceCategory.shortTitle(), 'Test Short Title', 'short title is not correct');\n  });\n});\n\ndescribeWithEnvironment('ResourceType class', () => {\n  it('is able to be instantiated successfully', () => {\n    const testResourceCategory = new ResourceCategory(categoryTestTitle, categoryTestShortTitle);\n    const resourceType = new ResourceType('Type Test Name', typeTestTitle, testResourceCategory, true);\n    assert.strictEqual(resourceType.name(), 'Type Test Name', 'name was not set correctly');\n    assert.strictEqual(resourceType.title(), 'Type Test Title', 'title was not set correctly');\n    assert.strictEqual(resourceType.category().title(), 'Category Test Title', 'category title was not set correctly');\n    assert.strictEqual(\n        resourceType.category().shortTitle(), 'Category Test Short Title',\n        'category short title was not set correctly');\n    assert.strictEqual(resourceType.isTextType(), true, 'resource type was not set correctly');\n  });\n\n  it('is able to return a document resource from the string \"text/html\"', () => {\n    const result = ResourceType.fromMimeType('text/html');\n    assert.instanceOf(result, ResourceType, 'result type is incorrect');\n    assert.strictEqual(result.name(), 'document', 'name was not set correctly');\n    assert.strictEqual(result.title(), 'Document', 'title was not set correctly');\n    assert.strictEqual(result.category().title(), 'Document', 'category title was not set correctly');\n    assert.strictEqual(result.category().shortTitle(), 'Doc', 'category short title was not set correctly');\n    assert.isTrue(result.isTextType(), 'resource type was not set correctly');\n  });\n\n  it('is able to return a stylesheet resource from the string \"text/css\"', () => {\n    const result = ResourceType.fromMimeType('text/css');\n    assert.instanceOf(result, ResourceType, 'result type is incorrect');\n    assert.strictEqual(result.name(), 'stylesheet', 'name was not set correctly');\n    assert.strictEqual(result.title(), 'Stylesheet', 'title was not set correctly');\n    assert.strictEqual(result.category().title(), 'CSS', 'category title was not set correctly');\n    assert.strictEqual(result.category().shortTitle(), 'CSS', 'category short title was not set correctly');\n    assert.isTrue(result.isTextType(), 'resource type was not set correctly');\n  });\n\n  it('is able to return an image resource from the string \"image/\"', () => {\n    const result = ResourceType.fromMimeType('image/');\n    assert.instanceOf(result, ResourceType, 'result type is incorrect');\n    assert.strictEqual(result.name(), 'image', 'name was not set correctly');\n    assert.strictEqual(result.title(), 'Image', 'title was not set correctly');\n    assert.strictEqual(result.category().title(), 'Image', 'category title was not set correctly');\n    assert.strictEqual(result.category().shortTitle(), 'Img', 'category short title was not set correctly');\n    assert.isFalse(result.isTextType(), 'resource type was not set correctly');\n  });\n\n  it('is able to return a script resource from the string \"text/\"', () => {\n    const result = ResourceType.fromMimeType('text/');\n    assert.instanceOf(result, ResourceType, 'result type is incorrect');\n    assert.strictEqual(result.name(), 'script', 'name was not set correctly');\n    assert.strictEqual(result.title(), 'Script', 'title was not set correctly');\n    assert.strictEqual(result.category().title(), 'JavaScript', 'category title was not set correctly');\n    assert.strictEqual(result.category().shortTitle(), 'JS', 'category short title was not set correctly');\n    assert.isTrue(result.isTextType(), 'resource type was not set correctly');\n  });\n\n  it('is able to return a font resource from the string \"font\"', () => {\n    const result = ResourceType.fromMimeType('font');\n    assert.instanceOf(result, ResourceType, 'result type is incorrect');\n    assert.strictEqual(result.name(), 'font', 'name was not set correctly');\n    assert.strictEqual(result.title(), 'Font', 'title was not set correctly');\n    assert.strictEqual(result.category().title(), 'Font', 'category title was not set correctly');\n    assert.strictEqual(result.category().shortTitle(), 'Font', 'category short title was not set correctly');\n    assert.isFalse(result.isTextType(), 'resource type was not set correctly');\n  });\n\n  it('is able to return a script resource from the string \"script\"', () => {\n    const result = ResourceType.fromMimeType('script');\n    assert.instanceOf(result, ResourceType, 'result type is incorrect');\n    assert.strictEqual(result.name(), 'script', 'name was not set correctly');\n    assert.strictEqual(result.title(), 'Script', 'title was not set correctly');\n    assert.strictEqual(result.category().title(), 'JavaScript', 'category title was not set correctly');\n    assert.strictEqual(result.category().shortTitle(), 'JS', 'category short title was not set correctly');\n    assert.isTrue(result.isTextType(), 'resource type was not set correctly');\n  });\n\n  it('is able to return an octet resource from the string \"octet\"', () => {\n    const result = ResourceType.fromMimeType('octet');\n    assert.instanceOf(result, ResourceType, 'result type is incorrect');\n    assert.strictEqual(result.name(), 'other', 'name was not set correctly');\n    assert.strictEqual(result.title(), 'Other', 'title was not set correctly');\n    assert.strictEqual(result.category().title(), 'Other', 'category title was not set correctly');\n    assert.strictEqual(result.category().shortTitle(), 'Other', 'category short title was not set correctly');\n    assert.isFalse(result.isTextType(), 'resource type was not set correctly');\n  });\n\n  it('is able to return an application resource from the string \"application\"', () => {\n    const result = ResourceType.fromMimeType('application');\n    assert.instanceOf(result, ResourceType, 'result type is incorrect');\n    assert.strictEqual(result.name(), 'script', 'name was not set correctly');\n    assert.strictEqual(result.title(), 'Script', 'title was not set correctly');\n    assert.strictEqual(result.category().title(), 'JavaScript', 'category title was not set correctly');\n    assert.strictEqual(result.category().shortTitle(), 'JS', 'category short title was not set correctly');\n    assert.isTrue(result.isTextType(), 'resource type was not set correctly');\n  });\n\n  it('is able to return an wasm resource from the string \"application/wasm\"', () => {\n    const result = ResourceType.fromMimeTypeOverride('application/wasm');\n    assert.instanceOf(result, ResourceType, 'result type is incorrect');\n    assert.strictEqual(result!.name(), 'wasm', 'name was not set correctly');\n    assert.strictEqual(result!.title(), 'Wasm', 'title was not set correctly');\n    assert.strictEqual(result!.category().title(), 'WebAssembly', 'category title was not set correctly');\n    assert.strictEqual(result!.category().shortTitle(), 'Wasm', 'category short title was not set correctly');\n    assert.isFalse(result!.isTextType(), 'resource type was not set correctly');\n  });\n\n  it('is able to return an web bundle resource from the string \"application/webbundle\"', () => {\n    const result = ResourceType.fromMimeTypeOverride('application/webbundle');\n    assert.instanceOf(result, ResourceType, 'result type is incorrect');\n    assert.strictEqual(result!.name(), 'webbundle', 'name was not set correctly');\n    assert.strictEqual(result!.title(), 'WebBundle', 'title was not set correctly');\n    assert.strictEqual(result!.category().title(), 'Other', 'category title was not set correctly');\n    assert.strictEqual(result!.category().shortTitle(), 'Other', 'category short title was not set correctly');\n    assert.isFalse(result!.isTextType(), 'resource type was not set correctly');\n  });\n\n  it('is able to return a resource of type other from the string \"test/resource\"', () => {\n    const result = ResourceType.fromMimeType('test/resource');\n    assert.instanceOf(result, ResourceType, 'result type is incorrect');\n    assert.strictEqual(result.name(), 'other', 'name was not set correctly');\n    assert.strictEqual(result.title(), 'Other', 'title was not set correctly');\n    assert.strictEqual(result.category().title(), 'Other', 'category title was not set correctly');\n    assert.strictEqual(result.category().shortTitle(), 'Other', 'category short title was not set correctly');\n    assert.isFalse(result.isTextType(), 'resource type was not set correctly');\n  });\n\n  it('is able to return a resource type from a URL that contains a mapped extension', () => {\n    const result = ResourceType.fromURL('http://www.example.com/test/testFile.js');\n    assert.instanceOf(result, ResourceType, 'result type is incorrect');\n    assert.strictEqual(result!.name(), 'script', 'name was not set correctly');\n    assert.strictEqual(result!.title(), 'Script', 'title was not set correctly');\n    assert.strictEqual(result!.category().title(), 'JavaScript', 'category title was not set correctly');\n    assert.strictEqual(result!.category().shortTitle(), 'JS', 'category short title was not set correctly');\n    assert.isTrue(result!.isTextType(), 'resource type was not set correctly');\n  });\n\n  it('is able to return a resource type from a URL that ends in .avif', () => {\n    const result = ResourceType.fromURL('https://host.example/image.avif');\n    assert.instanceOf(result, ResourceType, 'result type is incorrect');\n    assert.strictEqual(result!.name(), 'image', 'name was not set correctly');\n    assert.strictEqual(result!.title(), 'Image', 'title was not set correctly');\n    assert.strictEqual(result!.category().title(), 'Image', 'category title was not set correctly');\n    assert.strictEqual(result!.category().shortTitle(), 'Img', 'category short title was not set correctly');\n    assert.isTrue(result!.isImage(), 'resource type was not set correctly');\n  });\n\n  it('is able to return a resource type from a URL that ends in .jxl', () => {\n    const result = ResourceType.fromURL('https://host.example/image.jxl');\n    assert.instanceOf(result, ResourceType, 'result type is incorrect');\n    assert.strictEqual(result!.name(), 'image', 'name was not set correctly');\n    assert.strictEqual(result!.title(), 'Image', 'title was not set correctly');\n    assert.strictEqual(result!.category().title(), 'Image', 'category title was not set correctly');\n    assert.strictEqual(result!.category().shortTitle(), 'Img', 'category short title was not set correctly');\n    assert.isTrue(result!.isImage(), 'resource type was not set correctly');\n  });\n\n  it('is able to return a resource type from a URL that ends in .woff2', () => {\n    const result = ResourceType.fromURL('https://host.example/image.woff2');\n    assert.instanceOf(result, ResourceType, 'result type is incorrect');\n    assert.strictEqual(result!.name(), 'font', 'name was not set correctly');\n    assert.strictEqual(result!.title(), 'Font', 'title was not set correctly');\n    assert.strictEqual(result!.category().title(), 'Font', 'category title was not set correctly');\n    assert.strictEqual(result!.category().shortTitle(), 'Font', 'category short title was not set correctly');\n    assert.isFalse(result!.isTextType(), 'resource type was not set correctly');\n  });\n\n  it('is able to return null from a URL that contains an unmapped extension', () => {\n    const result = ResourceType.fromURL('http://www.example.com/test/testFile.testExt');\n    assert.isNull(result, 'result is not null');\n  });\n\n  it('is able to return a resource type from a mapped name', () => {\n    const result = ResourceType.fromName('script');\n    assert.instanceOf(result, ResourceType, 'result type is incorrect');\n    assert.strictEqual(result!.name(), 'script', 'name was not set correctly');\n    assert.strictEqual(result!.title(), 'Script', 'title was not set correctly');\n    assert.strictEqual(result!.category().title(), 'JavaScript', 'category title was not set correctly');\n    assert.strictEqual(result!.category().shortTitle(), 'JS', 'category short title was not set correctly');\n    assert.isTrue(result!.isTextType(), 'resource type was not set correctly');\n  });\n\n  it('is able to return null from an unmapped name', () => {\n    const result = ResourceType.fromName('testName');\n    assert.isNull(result, 'result is not null');\n  });\n\n  it('is able to return a mime from URL that contains a mapped extension', () => {\n    const result = ResourceType.mimeFromURL('http://www.example.com/test/path.html' as Platform.DevToolsPath.UrlString);\n    assert.strictEqual(result, 'text/html', 'mime returned was not correct');\n  });\n\n  it('is able to return a mime from URL that contains an unmapped extension', () => {\n    const result =\n        ResourceType.mimeFromURL('http://www.example.com/test/path.testExt' as Platform.DevToolsPath.UrlString);\n    assert.isUndefined(result, 'mime returned was not correct');\n  });\n\n  it('is able to return a mime from URL that contains a mapped name', () => {\n    const result = ResourceType.mimeFromURL('http://www.example.com/test/Cakefile' as Platform.DevToolsPath.UrlString);\n    assert.strictEqual(result, 'text/x-coffeescript', 'mime returned was not correct');\n  });\n\n  it('is able to return a mime from a mapped extension', () => {\n    const result = ResourceType.mimeFromExtension('html');\n    assert.strictEqual(result, 'text/html', 'mime returned was not correct');\n  });\n\n  it('is able to return a mime from an unmapped extension', () => {\n    const result = ResourceType.mimeFromExtension('testExt');\n    assert.isUndefined(result, 'mime returned was not correct');\n  });\n\n  it('is able to return its title successfully', () => {\n    const testResourceCategory = new ResourceCategory(categoryTestTitle, categoryTestShortTitle);\n    const resourceType = new ResourceType('Type Test Name', typeTestTitle, testResourceCategory, true);\n    assert.strictEqual(resourceType.title(), 'Type Test Title', 'title was not returned correctly');\n  });\n\n  it('is able to return its isTextType value successfully', () => {\n    const testResourceCategory = new ResourceCategory(categoryTestTitle, categoryTestShortTitle);\n    const resourceType = new ResourceType('Type Test Name', typeTestTitle, testResourceCategory, true);\n    assert.isTrue(resourceType.isTextType(), 'isTextType was not returned correctly');\n  });\n\n  it('is able to return whether or not its a script if its name equals the value \"script\"', () => {\n    const testResourceCategory = new ResourceCategory(categoryTestTitle, categoryTestShortTitle);\n    const resourceType = new ResourceType('script', typeTestTitle, testResourceCategory, true);\n    assert.isTrue(resourceType.isScript(), 'the resource should be considered as a script');\n  });\n\n  it('is able to return whether or not its a script if its name equals the value \"sm-script\"', () => {\n    const testResourceCategory = new ResourceCategory(categoryTestTitle, categoryTestShortTitle);\n    const resourceType = new ResourceType('sm-script', typeTestTitle, testResourceCategory, true);\n    assert.isTrue(resourceType.isScript(), 'the resource should be considered as a script');\n  });\n\n  it('is able to return whether or not its a script if its name is not equal to the values \"script\" or \"sm-script\"',\n     () => {\n       const testResourceCategory = new ResourceCategory(categoryTestTitle, categoryTestShortTitle);\n       const resourceType = new ResourceType('Type Test Name', typeTestTitle, testResourceCategory, true);\n       assert.isFalse(resourceType.isScript(), 'the resource should not be considered as a script');\n     });\n\n  it('is able to return whether or not its a document if its name equals the value \"document\"', () => {\n    const testResourceCategory = new ResourceCategory(categoryTestTitle, categoryTestShortTitle);\n    const resourceType = new ResourceType('document', typeTestTitle, testResourceCategory, true);\n    assert.isTrue(resourceType.isDocument(), 'the resource should be considered as a document');\n  });\n\n  it('is able to return whether or not its a document if its name does not equal the value \"document\"', () => {\n    const testResourceCategory = new ResourceCategory(categoryTestTitle, categoryTestShortTitle);\n    const resourceType = new ResourceType('Type Test Name', typeTestTitle, testResourceCategory, true);\n    assert.isFalse(resourceType.isDocument(), 'the resource should not be considered as a document');\n  });\n\n  it('is able to determine if a resource has scripts if it is a script', () => {\n    const testResourceCategory = new ResourceCategory(categoryTestTitle, categoryTestShortTitle);\n    const resourceType = new ResourceType('script', typeTestTitle, testResourceCategory, true);\n    assert.isTrue(resourceType.hasScripts(), 'the resource should be considered as a having scripts');\n  });\n\n  it('is able to determine if a resource has scripts if it is a document', () => {\n    const testResourceCategory = new ResourceCategory(categoryTestTitle, categoryTestShortTitle);\n    const resourceType = new ResourceType('document', typeTestTitle, testResourceCategory, true);\n    assert.isTrue(resourceType.hasScripts(), 'the resource should be considered as a having scripts');\n  });\n\n  it('is able to determine if a resource has scripts if it is not a script or a document', () => {\n    const testResourceCategory = new ResourceCategory(categoryTestTitle, categoryTestShortTitle);\n    const resourceType = new ResourceType('Type Test Name', typeTestTitle, testResourceCategory, true);\n    assert.isFalse(resourceType.hasScripts(), 'the resource should not be considered as a having scripts');\n  });\n\n  it('is able to return whether or not its a stylesheet if its name equals the value \"stylesheet\"', () => {\n    const testResourceCategory = new ResourceCategory(categoryTestTitle, categoryTestShortTitle);\n    const resourceType = new ResourceType('stylesheet', typeTestTitle, testResourceCategory, true);\n    assert.isTrue(resourceType.isStyleSheet(), 'the resource should be considered as a stylesheet');\n  });\n\n  it('is able to return whether or not its a stylesheet if its name equals the value \"sm-stylesheet\"', () => {\n    const testResourceCategory = new ResourceCategory(categoryTestTitle, categoryTestShortTitle);\n    const resourceType = new ResourceType('sm-stylesheet', typeTestTitle, testResourceCategory, true);\n    assert.isTrue(resourceType.isStyleSheet(), 'the resource should be considered as a stylesheet');\n  });\n\n  it('is able to return whether or not its a stylesheet if its name is not equal to the values \"stylesheet\" or \"sm-stylesheet\"',\n     () => {\n       const testResourceCategory = new ResourceCategory(categoryTestTitle, categoryTestShortTitle);\n       const resourceType = new ResourceType('Type Test Name', typeTestTitle, testResourceCategory, true);\n       assert.isFalse(resourceType.isStyleSheet(), 'the resource should not be considered as a stylesheet');\n     });\n\n  it('is able to return whether it is a document, a script or a stylesheet if it was a document', () => {\n    const testResourceCategory = new ResourceCategory(categoryTestTitle, categoryTestShortTitle);\n    const resourceType = new ResourceType('document', typeTestTitle, testResourceCategory, true);\n    assert.isTrue(resourceType.isDocumentOrScriptOrStyleSheet(), 'the resource should be considered as a document');\n  });\n\n  it('is able to return whether it is a document, a script or a stylesheet if it was a script', () => {\n    const testResourceCategory = new ResourceCategory(categoryTestTitle, categoryTestShortTitle);\n    const resourceType = new ResourceType('script', typeTestTitle, testResourceCategory, true);\n    assert.isTrue(resourceType.isDocumentOrScriptOrStyleSheet(), 'the resource should be considered as a script');\n  });\n\n  it('is able to return whether it is a document, a script or a stylesheet if it was a stylesheet', () => {\n    const testResourceCategory = new ResourceCategory(categoryTestTitle, categoryTestShortTitle);\n    const resourceType = new ResourceType('stylesheet', typeTestTitle, testResourceCategory, true);\n    assert.isTrue(resourceType.isDocumentOrScriptOrStyleSheet(), 'the resource should be considered as a stylesheet');\n  });\n\n  it('is able to return whether it is a document, a script or a stylesheet if it was none of those things', () => {\n    const testResourceCategory = new ResourceCategory(categoryTestTitle, categoryTestShortTitle);\n    const resourceType = new ResourceType('Type Test Name', typeTestTitle, testResourceCategory, true);\n    assert.isFalse(\n        resourceType.isDocumentOrScriptOrStyleSheet(),\n        'the resource should be considered as a doucment, a script or a stylesheet');\n  });\n\n  it('is able to determine if it is from source map if it began with \"sm-\"', () => {\n    const testResourceCategory = new ResourceCategory(categoryTestTitle, categoryTestShortTitle);\n    const resourceType = new ResourceType('sm-Type Test Name', typeTestTitle, testResourceCategory, true);\n    assert.isTrue(resourceType.isFromSourceMap(), 'the resource should be considered to be from source map');\n  });\n\n  it('is able to determine if it is from source map if it did not begin with \"sm-\"', () => {\n    const testResourceCategory = new ResourceCategory(categoryTestTitle, categoryTestShortTitle);\n    const resourceType = new ResourceType('Type Test Name', typeTestTitle, testResourceCategory, true);\n    assert.isFalse(resourceType.isFromSourceMap(), 'the resource should not be considered to be from source map');\n  });\n\n  it('is able to be converted to a string by returning its name', () => {\n    const testResourceCategory = new ResourceCategory(categoryTestTitle, categoryTestShortTitle);\n    const resourceType = new ResourceType('Type Test Name', typeTestTitle, testResourceCategory, true);\n    assert.strictEqual(\n        resourceType.toString(), 'Type Test Name', 'the resource type was not converted to a string correctly');\n  });\n\n  it('is able to return the canonical mime type of a document', () => {\n    const testResourceCategory = new ResourceCategory(categoryTestTitle, categoryTestShortTitle);\n    const resourceType = new ResourceType('document', typeTestTitle, testResourceCategory, true);\n    assert.strictEqual(\n        resourceType.canonicalMimeType(), 'text/html', 'the canonical mime type was not returned correctly');\n  });\n\n  it('is able to return the canonical mime type of a script', () => {\n    const testResourceCategory = new ResourceCategory(categoryTestTitle, categoryTestShortTitle);\n    const resourceType = new ResourceType('script', typeTestTitle, testResourceCategory, true);\n    assert.strictEqual(\n        resourceType.canonicalMimeType(), 'text/javascript', 'the canonical mime type was not returned correctly');\n  });\n\n  it('is able to return the canonical mime type of a stylesheet', () => {\n    const testResourceCategory = new ResourceCategory(categoryTestTitle, categoryTestShortTitle);\n    const resourceType = new ResourceType('stylesheet', typeTestTitle, testResourceCategory, true);\n    assert.strictEqual(\n        resourceType.canonicalMimeType(), 'text/css', 'the canonical mime type was not returned correctly');\n  });\n\n  it('returns an empty string as a canonical mime type if it was not a document, a script or a stylesheet', () => {\n    const testResourceCategory = new ResourceCategory(categoryTestTitle, categoryTestShortTitle);\n    const resourceType = new ResourceType('Type Test Name', typeTestTitle, testResourceCategory, true);\n    assert.strictEqual(resourceType.canonicalMimeType(), '', 'the canonical mime type was not returned correctly');\n  });\n\n  it('is able to return the simplified content type of a json subtype', () => {\n    assert.strictEqual(\n        ResourceType.simplifyContentType('application/sparql-results+json'), 'application/json',\n        'the simplified content type was not returned correctly');\n\n    assert.strictEqual(\n        ResourceType.simplifyContentType('application/hal+json'), 'application/json',\n        'the simplified content type was not returned correctly');\n\n    assert.strictEqual(\n        ResourceType.simplifyContentType('application/json+protobuf'), 'application/json',\n        'the simplified content type was not returned correctly');\n  });\n\n  it('simplifyContentType() does not affect other content types than json subtypes', () => {\n    assert.strictEqual(\n        ResourceType.simplifyContentType('text/javascript'), 'text/javascript',\n        'the simplified content type was not returned correctly');\n\n    assert.strictEqual(\n        ResourceType.simplifyContentType('application/json'), 'application/json',\n        'the simplified content type was not returned correctly');\n  });\n\n  it('treats a Ping as Other', () => {\n    const resourceType = resourceTypes.Ping;\n    assert.strictEqual(resourceType.isTextType(), false, 'A ping is not a text type');\n    assert.strictEqual(resourceType.canonicalMimeType(), '', 'A ping does not have an associated mime type');\n  });\n\n  it('treats a CSPViolationsReport as Other', () => {\n    const resourceType = resourceTypes.CSPViolationReport;\n    assert.strictEqual(resourceType.isTextType(), false, 'A ping is not a text type');\n    assert.strictEqual(resourceType.canonicalMimeType(), '', 'A ping does not have an associated mime type');\n  });\n});\n\ndescribe('ResourceType', () => {\n  describe('hasStyleSheet', () => {\n    it('holds true for documents', () => {\n      assert.isTrue(resourceTypes.Document.hasStyleSheets());\n    });\n\n    it('holds true for stylesheets', () => {\n      assert.isTrue(resourceTypes.Stylesheet.hasStyleSheets());\n    });\n  });\n\n  describe('mimeFromExtension', () => {\n    it('returns correct MIME type for .dart files', () => {\n      assert.strictEqual(ResourceType.mimeFromExtension('dart'), 'application/vnd.dart');\n    });\n\n    it('returns correct MIME type for Go files', () => {\n      assert.strictEqual(ResourceType.mimeFromExtension('go'), 'text/x-go');\n    });\n\n    it('returns correct MIME type for .gss files', () => {\n      assert.strictEqual(ResourceType.mimeFromExtension('gss'), 'text/x-gss');\n    });\n\n    it('returns correct MIME type for .kt files', () => {\n      assert.strictEqual(ResourceType.mimeFromExtension('kt'), 'text/x-kotlin');\n    });\n\n    it('returns correct MIME type for .less files', () => {\n      assert.strictEqual(ResourceType.mimeFromExtension('less'), 'text/x-less');\n    });\n\n    it('returns correct MIME type for .php files', () => {\n      assert.strictEqual(ResourceType.mimeFromExtension('php'), 'application/x-httpd-php');\n    });\n\n    it('returns correct MIME type for SASS files', () => {\n      assert.strictEqual(ResourceType.mimeFromExtension('sass'), 'text/x-sass');\n      assert.strictEqual(ResourceType.mimeFromExtension('scss'), 'text/x-scss');\n    });\n\n    it('returns correct MIME type for Scala files', () => {\n      assert.strictEqual(ResourceType.mimeFromExtension('scala'), 'text/x-scala');\n    });\n\n    it('returns correct MIME type for .component.html files', () => {\n      assert.strictEqual(ResourceType.mimeFromExtension('component.html'), 'text/x.angular');\n    });\n\n    it('returns correct MIME type for .svelte files', () => {\n      assert.strictEqual(ResourceType.mimeFromExtension('svelte'), 'text/x.svelte');\n    });\n\n    it('returns correct MIME type for .vue files', () => {\n      assert.strictEqual(ResourceType.mimeFromExtension('vue'), 'text/x.vue');\n    });\n\n    it('returns correct MIME type for .webmanifest files', () => {\n      assert.strictEqual(ResourceType.mimeFromExtension('webmanifest'), 'application/manifest+json');\n    });\n\n    it('returns correct MIME type for source maps', () => {\n      assert.strictEqual(ResourceType.mimeFromExtension('map'), 'application/json');\n    });\n  });\n\n  describe('mimeFromURL', () => {\n    it('returns correct MIME type for .dart files', () => {\n      const url = 'http://localhost/example.dart' as Platform.DevToolsPath.UrlString;\n      assert.strictEqual(ResourceType.mimeFromURL(url), 'application/vnd.dart');\n    });\n\n    it('returns correct MIME type for Go files', () => {\n      const url = 'https://staging.server.com/main.go' as Platform.DevToolsPath.UrlString;\n      assert.strictEqual(ResourceType.mimeFromURL(url), 'text/x-go');\n    });\n\n    it('returns correct MIME type for .gss files', () => {\n      const url = 'https://staging.server.com/styles.gss' as Platform.DevToolsPath.UrlString;\n      assert.strictEqual(ResourceType.mimeFromURL(url), 'text/x-gss');\n    });\n\n    it('returns correct MIME type for .kt files', () => {\n      const url = 'https://staging.server.com/Main.kt' as Platform.DevToolsPath.UrlString;\n      assert.strictEqual(ResourceType.mimeFromURL(url), 'text/x-kotlin');\n    });\n\n    it('returns correct MIME type for .less files', () => {\n      const url = 'https://staging.server.com/styles.less' as Platform.DevToolsPath.UrlString;\n      assert.strictEqual(ResourceType.mimeFromURL(url), 'text/x-less');\n    });\n\n    it('returns correct MIME type for .php files', () => {\n      const url = 'http://localhost/file.php' as Platform.DevToolsPath.UrlString;\n      assert.strictEqual(ResourceType.mimeFromURL(url), 'application/x-httpd-php');\n    });\n\n    it('returns correct MIME type for SASS files', () => {\n      assert.strictEqual(\n          ResourceType.mimeFromURL('https://staging.server.com/styles.sass' as Platform.DevToolsPath.UrlString),\n          'text/x-sass');\n      assert.strictEqual(\n          ResourceType.mimeFromURL('https://staging.server.com/styles.scss' as Platform.DevToolsPath.UrlString),\n          'text/x-scss');\n    });\n\n    it('returns correct MIME type for Scala files', () => {\n      const url = 'http://localhost/App.scala' as Platform.DevToolsPath.UrlString;\n      assert.strictEqual(ResourceType.mimeFromURL(url), 'text/x-scala');\n    });\n\n    it('returns correct MIME type for Angular component templates', () => {\n      const url = 'http://localhost/src/app/app.component.html' as Platform.DevToolsPath.UrlString;\n      assert.strictEqual(ResourceType.mimeFromURL(url), 'text/x.angular');\n    });\n\n    it('returns correct MIME type for .svelte files', () => {\n      const url = 'http://localhost/App.svelte' as Platform.DevToolsPath.UrlString;\n      assert.strictEqual(ResourceType.mimeFromURL(url), 'text/x.svelte');\n    });\n\n    it('returns correct MIME type for .vue files', () => {\n      const url = 'http://localhost/App.vue' as Platform.DevToolsPath.UrlString;\n      assert.strictEqual(ResourceType.mimeFromURL(url), 'text/x.vue');\n    });\n\n    it('returns correct MIME type for .webmanifest files', () => {\n      const url = 'http://localhost/app.webmanifest' as Platform.DevToolsPath.UrlString;\n      assert.strictEqual(ResourceType.mimeFromURL(url), 'application/manifest+json');\n    });\n\n    it('returns correct MIME type for source maps', () => {\n      const url = 'http://localhost/bundle.min.js.map' as Platform.DevToolsPath.UrlString;\n      assert.strictEqual(ResourceType.mimeFromURL(url), 'application/json');\n    });\n  });\n});\n"]}