{"version":3,"file":"Console.js","sourceRoot":"","sources":["../../../../../../front_end/core/common/Console.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EAAC,aAAa,EAAC,MAAM,aAAa,CAAC;AAC1C,OAAO,EAAC,MAAM,EAAC,MAAM,eAAe,CAAC;AAErC,IAAI,eAAkC,CAAC;AAEvC,MAAM,OAAO,OAAQ,SAAQ,aAAyB;IAC3C,iBAAiB,CAAY;IACtC;;OAEG;IACH;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;IAC9B,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,IAA0B;QACxC,IAAI,CAAC,eAAe,IAAI,IAAI,EAAE,QAAQ,EAAE,CAAC;YACvC,eAAe,GAAG,IAAI,OAAO,EAAE,CAAC;QAClC,CAAC;QAED,OAAO,eAAe,CAAC;IACzB,CAAC;IAED,MAAM,CAAC,cAAc;QACnB,eAAe,GAAG,SAAS,CAAC;IAC9B,CAAC;IAED,UAAU,CAAC,IAAY,EAAE,KAAmB,EAAE,IAAc,EAAE,MAA8B;QAC1F,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,IAAI,EAAE,KAAK,kCAAqB,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,IAAI,IAAI,KAAK,EAAE,MAAM,CAAC,CAAC;QACjG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACrC,IAAI,CAAC,wBAAwB,2CAAsB,OAAO,CAAC,CAAC;IAC9D,CAAC;IAED,GAAG,CAAC,IAAY;QACd,IAAI,CAAC,UAAU,CAAC,IAAI,iCAAoB,CAAC;IAC3C,CAAC;IAED,IAAI,CAAC,IAAY,EAAE,MAA8B;QAC/C,IAAI,CAAC,UAAU,CAAC,IAAI,wCAAwB,SAAS,EAAE,MAAM,CAAC,CAAC;IACjE,CAAC;IAED,KAAK,CAAC,IAAY;QAChB,IAAI,CAAC,UAAU,CAAC,IAAI,oCAAsB,IAAI,CAAC,CAAC;IAClD,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAChC,CAAC;IAED,IAAI;QACF,KAAK,IAAI,CAAC,WAAW,EAAE,CAAC;IAC1B,CAAC;IAED,WAAW;QACT,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC;IACtB,CAAC;CACF;AAgBD,MAAM,CAAN,IAAY,qBAKX;AALD,WAAY,qBAAqB;IAC/B,oCAAW,CAAA;IACX,mDAA0B,CAAA;IAC1B,mDAA0B,CAAA;IAC1B,6CAAoB,CAAA;AACtB,CAAC,EALW,qBAAqB,KAArB,qBAAqB,QAKhC;AAED,MAAM,OAAO,OAAO;IAClB,IAAI,CAAS;IACb,KAAK,CAAe;IACpB,SAAS,CAAS;IAClB,IAAI,CAAU;IACd,MAAM,CAAyB;IAC/B,YAAY,IAAY,EAAE,KAAmB,EAAE,SAAiB,EAAE,IAAa,EAAE,MAA8B;QAC7G,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,SAAS,GAAG,CAAC,OAAO,SAAS,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;QAC1E,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,MAAM,EAAE,CAAC;YACX,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACvB,CAAC;IACH,CAAC;CACF","sourcesContent":["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {ObjectWrapper} from './Object.js';\nimport {reveal} from './Revealer.js';\n\nlet consoleInstance: Console|undefined;\n\nexport class Console extends ObjectWrapper<EventTypes> {\n  readonly #messagesInternal: Message[];\n  /**\n   * Instantiable via the instance() factory below.\n   */\n  constructor() {\n    super();\n    this.#messagesInternal = [];\n  }\n\n  static instance(opts?: {forceNew: boolean}): Console {\n    if (!consoleInstance || opts?.forceNew) {\n      consoleInstance = new Console();\n    }\n\n    return consoleInstance;\n  }\n\n  static removeInstance(): void {\n    consoleInstance = undefined;\n  }\n\n  addMessage(text: string, level: MessageLevel, show?: boolean, source?: FrontendMessageSource): void {\n    const message = new Message(text, level || MessageLevel.Info, Date.now(), show || false, source);\n    this.#messagesInternal.push(message);\n    this.dispatchEventToListeners(Events.MessageAdded, message);\n  }\n\n  log(text: string): void {\n    this.addMessage(text, MessageLevel.Info);\n  }\n\n  warn(text: string, source?: FrontendMessageSource): void {\n    this.addMessage(text, MessageLevel.Warning, undefined, source);\n  }\n\n  error(text: string): void {\n    this.addMessage(text, MessageLevel.Error, true);\n  }\n\n  messages(): Message[] {\n    return this.#messagesInternal;\n  }\n\n  show(): void {\n    void this.showPromise();\n  }\n\n  showPromise(): Promise<void> {\n    return reveal(this);\n  }\n}\n\nexport const enum Events {\n  MessageAdded = 'messageAdded',\n}\n\nexport type EventTypes = {\n  [Events.MessageAdded]: Message,\n};\n\nexport const enum MessageLevel {\n  Info = 'info',\n  Warning = 'warning',\n  Error = 'error',\n}\n\nexport enum FrontendMessageSource {\n  CSS = 'css',\n  ConsoleAPI = 'console-api',\n  IssuePanel = 'issue-panel',\n  SelfXss = 'self-xss',\n}\n\nexport class Message {\n  text: string;\n  level: MessageLevel;\n  timestamp: number;\n  show: boolean;\n  source?: FrontendMessageSource;\n  constructor(text: string, level: MessageLevel, timestamp: number, show: boolean, source?: FrontendMessageSource) {\n    this.text = text;\n    this.level = level;\n    this.timestamp = (typeof timestamp === 'number') ? timestamp : Date.now();\n    this.show = show;\n    if (source) {\n      this.source = source;\n    }\n  }\n}\n"]}