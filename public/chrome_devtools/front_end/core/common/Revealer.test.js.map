{"version":3,"file":"Revealer.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/common/Revealer.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from './common.js';\n\ndescribe('Revealer', () => {\n  const {registerRevealer, reveal, RevealerRegistry} = Common.Revealer;\n\n  class MockContextType {}\n  class MockRevealer implements Common.Revealer.Revealer<MockContextType> {\n    async reveal(_revealable: MockContextType, _omitFocus?: boolean): Promise<void> {\n    }\n  }\n\n  const mockRegistration = {\n    contextTypes() {\n      return [MockContextType];\n    },\n    async loadRevealer() {\n      return new MockRevealer();\n    },\n  };\n\n  describe('RevealerRegistry', () => {\n    describe('instance', () => {\n      afterEach(() => {\n        RevealerRegistry.removeInstance();\n      });\n\n      it('yields the singleton instance on subsequent calls', () => {\n        const registry1 = RevealerRegistry.instance();\n        const registry2 = RevealerRegistry.instance();\n\n        assert.strictEqual(\n            registry1, registry2,\n            'RevealerRegistry.instance() is supposed to return the same singleton on subsequent calls');\n      });\n    });\n\n    describe('removeInstance', () => {\n      it('clears the singleton instance correctly', () => {\n        const registry1 = RevealerRegistry.instance();\n\n        RevealerRegistry.removeInstance();\n        const registry2 = RevealerRegistry.instance();\n\n        assert.notStrictEqual(\n            registry1, registry2, 'RevealerRegistry.removeInstance() is supposed to clear the singleton');\n      });\n    });\n\n    describe('reveal', () => {\n      it('raises an error if no revealers are registered', async () => {\n        const registery = new RevealerRegistry();\n        const spy = sinon.spy();\n\n        await registery.reveal(new MockContextType(), false).catch(spy);\n\n        assert.isTrue(\n            spy.calledOnce,\n            'RevealerRegistry.reveal() is supposed to raise an error when no revealer is found',\n        );\n      });\n\n      it('raises an error if conflicting revealers are registered', async () => {\n        const registery = new RevealerRegistry();\n        registery.register(mockRegistration);\n        registery.register(mockRegistration);\n        const spy = sinon.spy();\n\n        await registery.reveal(new MockContextType(), false).catch(spy);\n\n        assert.isTrue(\n            spy.calledOnce,\n            'RevealerRegistry.reveal() is supposed to raise an error when conflicting revealer are found',\n        );\n      });\n\n      it('calls the `reveal` method on the registered `Revealer` exactly once', async () => {\n        const registery = new RevealerRegistry();\n        registery.register(mockRegistration);\n        const revealStub = sinon.stub(MockRevealer.prototype, 'reveal');\n        const mockRevealable = new MockContextType();\n\n        await registery.reveal(mockRevealable, false);\n\n        sinon.assert.calledOnceWithExactly(revealStub, mockRevealable, false);\n      });\n    });\n  });\n\n  describe('registerRevealer', () => {\n    it('calls the `register` method on the registry', async () => {\n      const registerStub = sinon.stub(RevealerRegistry.prototype, 'register');\n\n      registerRevealer(mockRegistration);\n\n      sinon.assert.calledOnceWithExactly(registerStub, mockRegistration);\n    });\n  });\n\n  describe('reveal', () => {\n    const revealable = {foo: 'bar'};\n\n    it('calls the `reveal` method on the registry', async () => {\n      const revealStub = sinon.stub(RevealerRegistry.prototype, 'reveal');\n\n      await reveal(revealable, true);\n\n      sinon.assert.calledOnceWithExactly(revealStub, revealable, true);\n    });\n\n    it('defaults to not omitting focus', async () => {\n      const revealStub = sinon.stub(RevealerRegistry.prototype, 'reveal');\n\n      await reveal(revealable);\n\n      sinon.assert.calledOnceWithExactly(revealStub, revealable, false);\n    });\n  });\n});\n"]}