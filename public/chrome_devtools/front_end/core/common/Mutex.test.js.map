{"version":3,"file":"Mutex.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/common/Mutex.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from './common.js';\n\ndescribe('Mutex', () => {\n  async function triggerMicroTaskQueue(): Promise<void> {\n    await new Promise(resolve => setTimeout(resolve, 0));\n  }\n\n  async function notAcquired(): Promise<'not acquired'> {\n    await triggerMicroTaskQueue();\n    return 'not acquired';\n  }\n\n  it('should acquire the lock immediately if no one is holding it', async () => {\n    const mutex = new Common.Mutex.Mutex();\n    const release = await mutex.acquire();\n    release();\n  });\n\n  it('should acquire the lock once another holder releases it', async () => {\n    const mutex = new Common.Mutex.Mutex();\n    const lock1 = mutex.acquire();\n    const lock2 = mutex.acquire();\n    const release = await lock1;\n    // lock2 should not be resolved set.\n    assert.strictEqual(\n        await Promise.race([lock2, notAcquired()]),\n        'not acquired',\n    );\n    release();\n    await triggerMicroTaskQueue();\n    assert.instanceOf(await lock2, Function);\n  });\n\n  it('should throw when release is called more than once', async () => {\n    const mutex = new Common.Mutex.Mutex();\n    const release = await mutex.acquire();\n    release();\n    assert.throws(() => release());\n  });\n\n  it('should work with run', async () => {\n    const mutex = new Common.Mutex.Mutex();\n    const release = await mutex.acquire();\n    const action = mutex.run(async () => {\n      return true;\n    });\n    // lock2 should not be resolved set.\n    assert.strictEqual(\n        await Promise.race([action, notAcquired()]),\n        'not acquired',\n    );\n    release();\n    await triggerMicroTaskQueue();\n    assert.isTrue(await action);\n  });\n\n  it('should work for two async functions accessing shared state', async () => {\n    const mutex = new Common.Mutex.Mutex();\n    const shared: string[] = [];\n    let action1Resolver = () => {};\n    const action1ReadyPromise = new Promise<void>(resolve => {\n      action1Resolver = resolve;\n    });\n    let action2Resolver = () => {};\n    const action2ReadyPromise = new Promise<void>(resolve => {\n      action2Resolver = resolve;\n    });\n\n    async function action1() {\n      const release = await mutex.acquire();\n      try {\n        await action1ReadyPromise;\n        shared.push('action1');\n      } finally {\n        release();\n      }\n    }\n\n    async function action2() {\n      const release = await mutex.acquire();\n      try {\n        await action2ReadyPromise;\n        shared.push('action2');\n      } finally {\n        release();\n      }\n    }\n    const promises = Promise.all([action1(), action2()]);\n    action2Resolver();\n    action1Resolver();\n    await promises;\n    assert.deepEqual(shared, ['action1', 'action2']);\n  });\n});\n"]}