{"version":3,"file":"ParsedURL.test.js","sourceRoot":"","sources":["../../../../../../front_end/core/common/ParsedURL.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Platform from '../platform/platform.js';\n\nimport * as Common from './common.js';\n\nconst ParsedURL = Common.ParsedURL.ParsedURL;\n\nfunction assertEqualUrlStringString(actual: Platform.DevToolsPath.UrlString|null, expected: string, message?: string) {\n  assert.strictEqual(actual, expected as Platform.DevToolsPath.UrlString, message);\n}\n\ndescribe('Parsed URL', () => {\n  describe('with path normalization', () => {\n    const cases = [\n      {path: '', expected: ''},\n      {path: '.', expected: '/'},\n      {path: './', expected: '/'},\n      {path: '..', expected: '/'},\n      {path: '../', expected: '/'},\n      {path: 'a/../g', expected: 'g'},\n      {path: '../..', expected: '/'},\n      {path: '../../', expected: '/'},\n      {path: 'a/b/c/../../g', expected: 'a/g'},\n      {path: 'a/b/c/d/../../../g', expected: 'a/g'},\n      {path: 'a/b/c/d/e/../../../../g', expected: 'a/g'},\n      {path: '/./g', expected: '/g'},\n      {path: '/.//g', expected: '//g'},\n      {path: '/../g', expected: '/g'},\n      {path: 'g.', expected: 'g.'},\n      {path: '.g', expected: '.g'},\n      {path: 'g..', expected: 'g..'},\n      {path: '..g', expected: '..g'},\n      {path: 'a/b/./../g', expected: 'a/g'},\n      {path: './g/.', expected: 'g/'},\n      {path: 'g/./h', expected: 'g/h'},\n      {path: 'g/../h', expected: 'h'},\n      {path: './h/g/', expected: 'h/g/'},\n      {path: 'g///h.ts', expected: 'g///h.ts'},\n      {path: '/b/c/./', expected: '/b/c/'},\n      {path: '///', expected: '///'},\n    ];\n\n    for (const {path, expected} of cases) {\n      it(`can normalize \"${path}\"`, () => {\n        assert.strictEqual(Common.ParsedURL.normalizePath(path), expected);\n      });\n    }\n  });\n\n  it('recognizes valid URLs', () => {\n    const parsedUrl = new ParsedURL('http://www.example.com/');\n    assert.isTrue(parsedUrl.isValid, 'the URL should be valid');\n  });\n\n  it('recognizes the URL elements', () => {\n    const parsedUrl = new ParsedURL('http://username@www.example.com:8080/testing/test?isTest=true#testFragment');\n    assert.isTrue(parsedUrl.isValid, 'the URL should be valid');\n    assert.strictEqual(\n        parsedUrl.url, 'http://username@www.example.com:8080/testing/test?isTest=true#testFragment',\n        'URL value is incorrect');\n    assert.strictEqual(parsedUrl.scheme, 'http', 'URL scheme is incorrect');\n    assert.strictEqual(parsedUrl.user, 'username', 'URL user is incorrect');\n    assert.strictEqual(parsedUrl.host, 'www.example.com', 'URL host is incorrect');\n    assert.strictEqual(parsedUrl.port, '8080', 'URL port is incorrect');\n    assert.strictEqual(parsedUrl.path, '/testing/test', 'URL path is incorrect');\n    assert.strictEqual(parsedUrl.queryParams, 'isTest=true', 'URL query params are incorrect');\n    assert.strictEqual(parsedUrl.fragment, 'testFragment', 'URL fragment is incorrect');\n    assert.strictEqual(parsedUrl.folderPathComponents, '/testing', 'URL folder path components are incorrect');\n    assert.strictEqual(parsedUrl.lastPathComponent, 'test', 'URL last path component is incorrect');\n  });\n\n  it('recognizes a valid IPv6 localhost URL', () => {\n    const parsedUrl = new ParsedURL('http://[::]/?queryParam1=value1&queryParam2=value2#fragmentWith/Many//Slashes');\n    assert.isTrue(parsedUrl.isValid, 'the URL should be valid');\n    assert.strictEqual(\n        parsedUrl.url, 'http://[::]/?queryParam1=value1&queryParam2=value2#fragmentWith/Many//Slashes',\n        'URL value is incorrect');\n    assert.strictEqual(parsedUrl.scheme, 'http', 'URL scheme is incorrect');\n    assert.strictEqual(parsedUrl.user, '', 'URL user is incorrect');\n    assert.strictEqual(parsedUrl.host, '[::]', 'URL host is incorrect');\n    assert.strictEqual(parsedUrl.port, '', 'URL port is incorrect');\n    assert.strictEqual(parsedUrl.path, '/', 'URL path is incorrect');\n    assert.strictEqual(\n        parsedUrl.queryParams, 'queryParam1=value1&queryParam2=value2', 'URL query params are incorrect');\n    assert.strictEqual(parsedUrl.fragment, 'fragmentWith/Many//Slashes', 'URL fragment is incorrect');\n    assert.strictEqual(parsedUrl.folderPathComponents, '', 'URL folder path components are incorrect');\n    assert.strictEqual(parsedUrl.lastPathComponent, '', 'URL last path component is incorrect');\n  });\n\n  it('recognizes a valid blob URL', () => {\n    const parsedUrl = new ParsedURL('blob:http://www.example.com/');\n    assert.isTrue(parsedUrl.isValid, 'the URL should be valid');\n    assert.strictEqual(parsedUrl.scheme, 'blob', 'the URL scheme is not blob');\n    assert.strictEqual(parsedUrl.blobInnerScheme, 'http', 'the URL inner scheme is not http');\n  });\n\n  it('parses a URL with no path', () => {\n    const parsedUrl = new ParsedURL('http://www.example.com');\n    assert.isTrue(parsedUrl.isValid, 'the URL should be valid');\n    assert.strictEqual(parsedUrl.path, '/', 'path is not a single slash (\"/\")');\n  });\n\n  it('parses a data URL', () => {\n    const parsedUrl = new ParsedURL('data:test');\n    assert.isFalse(parsedUrl.isValid, 'the URL should not be valid');\n    assert.strictEqual(parsedUrl.scheme, 'data', 'the URL scheme is not data');\n  });\n\n  it('recognizes an invalid blob URL', () => {\n    const parsedUrl = new ParsedURL('blob:test');\n    assert.isFalse(parsedUrl.isValid, 'the URL should not be valid');\n    assert.strictEqual(parsedUrl.scheme, 'blob', 'the URL scheme is not blob');\n  });\n\n  it('recognizes an invalid blank URL', () => {\n    const parsedUrl = new ParsedURL('about:blank');\n    assert.isFalse(parsedUrl.isValid, 'the URL should not be valid');\n    assert.strictEqual(parsedUrl.scheme, 'about', 'the URL scheme is not blob');\n  });\n\n  it('recognizes an invalid URL', () => {\n    const parsedUrl = new ParsedURL('abc');\n    assert.isFalse(parsedUrl.isValid, 'the URL should not be valid');\n    assert.strictEqual(parsedUrl.url, 'abc', 'URL value is incorrect');\n  });\n\n  it('converts platform path to a URL that does not start with \"file://\"', () => {\n    const platformPathTest = 'usr/lib' as Platform.DevToolsPath.RawPathString;\n    const convertedUrl = ParsedURL.rawPathToUrlString(platformPathTest);\n    assert.strictEqual(convertedUrl, 'file:///usr/lib', 'URL was not converted correctly');\n  });\n\n  it('converts platform path to a URL that does not start with \"file://\" but starts with a slash (\"/\")', () => {\n    const platformPathTest = '/usr/lib' as Platform.DevToolsPath.RawPathString;\n    const convertedUrl = ParsedURL.rawPathToUrlString(platformPathTest);\n    assert.strictEqual(convertedUrl, 'file:///usr/lib', 'URL was not converted correctly');\n  });\n\n  it('converts platform path to a URL that starts with \"file://\"', () => {\n    const platformPathTest = 'file://usr/lib' as Platform.DevToolsPath.RawPathString;\n    const convertedUrl = ParsedURL.rawPathToUrlString(platformPathTest);\n    assert.strictEqual(convertedUrl, 'file://usr/lib', 'URL was not converted correctly');\n  });\n\n  it('converts path that starts with \"file://\" to a platform path', () => {\n    const pathTest = 'file://usr/lib' as Platform.DevToolsPath.UrlString;\n    const convertedPath = ParsedURL.urlToRawPathString(pathTest);\n    assert.strictEqual(convertedPath, 'usr/lib', 'URL was not converted successfully');\n  });\n\n  it('converts path that starts with \"file:///\" to a platform path on Windows', () => {\n    const pathTest = 'file:///usr/lib' as Platform.DevToolsPath.UrlString;\n    const convertedPath = ParsedURL.urlToRawPathString(pathTest, true);\n    assert.strictEqual(convertedPath, 'usr\\\\lib', 'URL was not converted successfully');\n  });\n\n  it('checks that URL is valid', () => {\n    const urlTest = 'http://www.example.com#?test';\n    assert.strictEqual(ParsedURL.isValidUrlString(urlTest), true, 'URL validation was incorrect');\n  });\n\n  it('checks that file:// URL is valid', () => {\n    const urlTest = 'file:///usr/lib';\n    assert.strictEqual(ParsedURL.isValidUrlString(urlTest), true, 'URL validation was incorrect');\n  });\n\n  it('checks that \"://\" is not a valid URL', () => {\n    const urlTest = '://';\n    assert.strictEqual(ParsedURL.isValidUrlString(urlTest), false, 'URL validation was incorrect');\n  });\n\n  it('converts URL with a hash to a URL without a hash', () => {\n    const urlTest = 'http://www.example.com#?test';\n    const convertedUrl = ParsedURL.urlWithoutHash(urlTest);\n    assert.strictEqual(convertedUrl, 'http://www.example.com', 'URL was not converted successfully');\n  });\n\n  it('returns URL without a hash as it is', () => {\n    const urlTest = 'http://www.example.com';\n    const convertedUrl = ParsedURL.urlWithoutHash(urlTest);\n    assert.strictEqual(convertedUrl, urlTest, 'URL was changed');\n  });\n\n  it('returns URL with a question mark but without a hash as it is', () => {\n    const urlTest = 'http://www.example.com?hello';\n    const convertedUrl = ParsedURL.urlWithoutHash(urlTest);\n    assert.strictEqual(convertedUrl, urlTest, 'URL was changed');\n  });\n\n  it('extracts the path from a valid URL', () => {\n    const urlTest = 'http://www.example.com/test/path' as Platform.DevToolsPath.UrlString;\n    const extractedPath = ParsedURL.extractPath(urlTest);\n    assert.strictEqual(extractedPath, '/test/path', 'path extracted incorrectly');\n  });\n\n  it('returns an empty string as a path if the URL is not valid', () => {\n    const urlTest = 'www.example.com/test/path' as Platform.DevToolsPath.UrlString;\n    const extractedPath = ParsedURL.extractPath(urlTest);\n    assert.strictEqual(extractedPath, '', 'did not return an empty path');\n  });\n\n  it('extracts the origin from a valid URL', () => {\n    const urlTest = 'http://www.example.com/test/path' as Platform.DevToolsPath.UrlString;\n    const extractedOrigin = ParsedURL.extractOrigin(urlTest);\n    assert.strictEqual(extractedOrigin, 'http://www.example.com', 'origin extracted incorrectly');\n  });\n\n  it('returns an empty string as a origin if the URL is not valid', () => {\n    const urlTest = 'www.example.com/test/path';\n    const extractedOrigin = ParsedURL.extractOrigin(urlTest as Platform.DevToolsPath.UrlString);\n    assert.strictEqual(extractedOrigin, '', 'did not return an empty path');\n  });\n\n  it('extracts the extension from a valid URL with a hash', () => {\n    const urlTest = 'http://www.example.com/test/testFile.html#testHash';\n    const extractedExt = ParsedURL.extractExtension(urlTest);\n    assert.strictEqual(extractedExt, 'html', 'extension extracted incorrectly');\n  });\n\n  it('extracts the extension from a valid URL with a question mark', () => {\n    const urlTest = 'http://www.example.com/test/testFile.html?testParam=t';\n    const extractedExt = ParsedURL.extractExtension(urlTest);\n    assert.strictEqual(extractedExt, 'html', 'extension extracted incorrectly');\n  });\n\n  it('extracts the extension from a valid URL that does not have slashes', () => {\n    const urlTest = 'testFile.html';\n    const extractedExt = ParsedURL.extractExtension(urlTest);\n    assert.strictEqual(extractedExt, 'html', 'extension extracted incorrectly');\n  });\n\n  it('extracts the extension from a valid URL that has a percent sign', () => {\n    const urlTest = 'http://www.example.com/test/path.html%20';\n    const extractedExt = ParsedURL.extractExtension(urlTest);\n    assert.strictEqual(extractedExt, 'html', 'extension extracted incorrectly');\n  });\n\n  it('returns an empty string when trying to extract extension from an invalid URL', () => {\n    const urlTest = 'http://html';\n    const extractedExt = ParsedURL.extractExtension(urlTest);\n    assert.strictEqual(extractedExt, '', 'extension extracted incorrectly');\n  });\n\n  it('is able to extract name from a valid URL', () => {\n    const urlTest = 'http://www.example.com/test/path.html';\n    const extractedName = ParsedURL.extractName(urlTest);\n    assert.strictEqual(extractedName, 'path.html', 'name extracted incorrectly');\n  });\n\n  it('is able to extract name from a string without a slash', () => {\n    const urlTest = 'path.html';\n    const extractedName = ParsedURL.extractName(urlTest);\n    assert.strictEqual(extractedName, 'path.html', 'name extracted incorrectly');\n  });\n\n  it('is able to extract name from a valid URL with a query', () => {\n    const urlTest = 'http://www.example.com/test/path.html?testParam=t';\n    const extractedName = ParsedURL.extractName(urlTest);\n    assert.strictEqual(extractedName, 'path.html', 'name extracted incorrectly');\n  });\n\n  it('is able to extract name from a string without a slash and with a query', () => {\n    const urlTest = 'path.html?testParam=t';\n    const extractedName = ParsedURL.extractName(urlTest);\n    assert.strictEqual(extractedName, 'path.html', 'name extracted incorrectly');\n  });\n\n  it('uses the completeURL function to return a data URL as it is', () => {\n    const hrefTest = 'data:http://www.example.com';\n    const baseUrlTest = 'www.example.com' as Platform.DevToolsPath.UrlString;\n    const completeUrl = ParsedURL.completeURL(baseUrlTest, hrefTest);\n    assertEqualUrlStringString(completeUrl, hrefTest, 'complete URL is not returned correctly');\n  });\n\n  it('uses the completeURL function to return a blob URL as it is', () => {\n    const hrefTest = 'blob:http://www.example.com';\n    const baseUrlTest = 'www.example.com' as Platform.DevToolsPath.UrlString;\n    const completeUrl = ParsedURL.completeURL(baseUrlTest, hrefTest);\n    assertEqualUrlStringString(completeUrl, hrefTest, 'complete URL is not returned correctly');\n  });\n\n  it('uses the completeURL function to return a javascript URL as it is', () => {\n    const hrefTest = 'javascript:http://www.example.com';\n    const baseUrlTest = 'www.example.com' as Platform.DevToolsPath.UrlString;\n    const completeUrl = ParsedURL.completeURL(baseUrlTest, hrefTest);\n    assertEqualUrlStringString(completeUrl, hrefTest, 'complete URL is not returned correctly');\n  });\n\n  it('uses the completeURL function to return a mailto URL as it is', () => {\n    const hrefTest = 'mailto:http://www.example.com';\n    const baseUrlTest = 'www.example.com' as Platform.DevToolsPath.UrlString;\n    const completeUrl = ParsedURL.completeURL(baseUrlTest, hrefTest);\n    assertEqualUrlStringString(completeUrl, hrefTest, 'complete URL is not returned correctly');\n  });\n\n  describe('completeURL with absolute URLs', () => {\n    const cases = [\n      {href: 'http://www.example.com', expected: 'http://www.example.com/'},\n      {href: 'http://a/b/c/g', expected: 'http://a/b/c/g'},\n      {href: 'http://a/b/c/./g', expected: 'http://a/b/c/g'},\n      {href: 'http://a/b/c/g/', expected: 'http://a/b/c/g/'},\n      {href: 'http://a/b/c/d;p?y', expected: 'http://a/b/c/d;p?y'},\n      {href: 'http://a/b/c/g?y', expected: 'http://a/b/c/g?y'},\n      {href: 'http://a/b/c/d;p?q#s', expected: 'http://a/b/c/d;p?q#s'},\n      {href: 'http://a/b/c/g#s', expected: 'http://a/b/c/g#s'},\n      {href: 'http://a/b/c/g?y#s', expected: 'http://a/b/c/g?y#s'},\n      {href: 'http://a/b/c/;x', expected: 'http://a/b/c/;x'},\n      {href: 'http://a/b/c/g;x', expected: 'http://a/b/c/g;x'},\n      {href: 'http://a/b/c/g;x?y#s', expected: 'http://a/b/c/g;x?y#s'},\n      {href: 'http://a/b/c/d;p?q', expected: 'http://a/b/c/d;p?q'},\n      {href: 'http://a/b/c/.', expected: 'http://a/b/c/'},\n      {href: 'http://a/b/c/./', expected: 'http://a/b/c/'},\n      {href: 'http://a/b/c/..', expected: 'http://a/b/'},\n      {href: 'http://a/b/c/../', expected: 'http://a/b/'},\n      {href: 'http://a/b/c/../g', expected: 'http://a/b/g'},\n      {href: 'http://a/b/c/../..', expected: 'http://a/'},\n      {href: 'http://a/b/c/../../', expected: 'http://a/'},\n      {href: 'http://a/b/c/../../g', expected: 'http://a/g'},\n      {href: 'http://a/b/c/../../../g', expected: 'http://a/g'},\n      {href: 'http://a/b/c/../../../../g', expected: 'http://a/g'},\n      {href: 'http://a/b/c/g.', expected: 'http://a/b/c/g.'},\n      {href: 'http://a/b/c/.g', expected: 'http://a/b/c/.g'},\n      {href: 'http://a/b/c/g..', expected: 'http://a/b/c/g..'},\n      {href: 'http://a/b/c/..g', expected: 'http://a/b/c/..g'},\n      {href: 'http://a/b/c/./../g', expected: 'http://a/b/g'},\n      {href: 'http://a/b/c/./g/.', expected: 'http://a/b/c/g/'},\n      {href: 'http://a/b/c/g/./h', expected: 'http://a/b/c/g/h'},\n      {href: 'http://a/b/c/g/../h', expected: 'http://a/b/c/h'},\n      {href: 'http://a/b/c/g;x=1/./y', expected: 'http://a/b/c/g;x=1/y'},\n      {href: 'http://a/b/c/g;x=1/../y', expected: 'http://a/b/c/y'},\n      {href: 'http://a/b/c/g?y/./x', expected: 'http://a/b/c/g?y/./x'},\n      {href: 'http://a/b/c/g?y/../x', expected: 'http://a/b/c/g?y/../x'},\n      {href: 'http://a/b/c/g#s/./x', expected: 'http://a/b/c/g#s/./x'},\n      {href: 'http://a/b/c/g#s/../x', expected: 'http://a/b/c/g#s/../x'},\n      {\n        href: 'http://user:password@host:8080/dir/../file.ts?rev=100',\n        expected: 'http://host:8080/file.ts?rev=100',\n      },\n      {\n        href: 'webpack://@scope/chrome-devtool-sourcemap-issue/./main.ts',\n        expected: 'webpack://scope/chrome-devtool-sourcemap-issue/main.ts',\n      },\n    ];\n\n    for (const {href, expected} of cases) {\n      it(`can use completeURL to normalize \"${href}\"`, () => {\n        const baseUrlTest = 'www.example.com' as Platform.DevToolsPath.UrlString;\n        const completeUrl = ParsedURL.completeURL(baseUrlTest, href);\n        assertEqualUrlStringString(completeUrl, expected, 'complete URL is not returned correctly');\n      });\n    }\n  });\n\n  it('uses the completeURL function to return null for invalid href and invalid base URL', () => {\n    const hrefTest = 'www.example.com';\n    const baseUrlTest = 'www.example.com' as Platform.DevToolsPath.UrlString;\n    const completeUrl = ParsedURL.completeURL(baseUrlTest, hrefTest);\n    assert.strictEqual(completeUrl, null, 'complete URL is not returned correctly');\n  });\n\n  it('uses the completeURL function to return the href if the base URL is a data URL', () => {\n    const hrefTest = 'www.example.com';\n    const baseUrlTest = 'data://www.example.com' as Platform.DevToolsPath.UrlString;\n    const completeUrl = ParsedURL.completeURL(baseUrlTest, hrefTest);\n    assertEqualUrlStringString(completeUrl, hrefTest, 'complete URL is not returned correctly');\n  });\n\n  it('uses the completeURL function to return the href with scheme if the base URL was valid and the href scheme was dropped',\n     () => {\n       const hrefTest = '//www.example.com';\n       const baseUrlTest = 'http://www.example.com/' as Platform.DevToolsPath.UrlString;\n       const completeUrl = ParsedURL.completeURL(baseUrlTest, hrefTest);\n       assertEqualUrlStringString(completeUrl, 'http:' + hrefTest, 'complete URL is not returned correctly');\n     });\n\n  it('uses the completeURL function to resolve an empty href to a base URL without fragment', () => {\n    const hrefTest = '';\n    const baseUrlTest = 'http://www.example.com/?testParam=t' as Platform.DevToolsPath.UrlString;\n    const completeUrl = ParsedURL.completeURL(baseUrlTest, hrefTest);\n    assertEqualUrlStringString(completeUrl, baseUrlTest, 'complete URL is not returned correctly');\n  });\n\n  it('uses the completeURL function to resolve a fragment href to a base URL with fragment', () => {\n    const hrefTest = '#testFragment';\n    const baseUrlTest = 'http://www.example.com/?testParam=t' as Platform.DevToolsPath.UrlString;\n    const completeUrl = ParsedURL.completeURL(baseUrlTest, hrefTest);\n    assertEqualUrlStringString(completeUrl, baseUrlTest + hrefTest, 'complete URL is not returned correctly');\n  });\n\n  it('uses the completeURL function to resolve a parameters href to a base URL with the parameters from the href while the base URL has parameters',\n     () => {\n       const hrefTest = '?hrefParams=t';\n       const baseUrlTest = 'http://www.example.com/?testParam=t' as Platform.DevToolsPath.UrlString;\n       const completeUrl = ParsedURL.completeURL(baseUrlTest, hrefTest);\n       assertEqualUrlStringString(\n           completeUrl, 'http://www.example.com/' + hrefTest, 'complete URL is not returned correctly');\n     });\n\n  it('uses the completeURL function to resolve a parameters href to a base URL with the parameters from the href while the base URL does not have parameters',\n     () => {\n       const hrefTest = '?hrefParams=t';\n       const baseUrlTest = 'http://www.example.com/' as Platform.DevToolsPath.UrlString;\n       const completeUrl = ParsedURL.completeURL(baseUrlTest, hrefTest);\n       assertEqualUrlStringString(completeUrl, baseUrlTest + hrefTest, 'complete URL is not returned correctly');\n     });\n\n  it('uses the splitLineAndColumn function to return undefined line and column numbers if the URL does not contain any',\n     () => {\n       const stringTest = 'http://www.example.com';\n       const splitResult = ParsedURL.splitLineAndColumn(stringTest);\n       assert.strictEqual(splitResult.url, 'http://www.example.com', 'URL is not correct');\n       assert.isUndefined(splitResult.lineNumber, 'line number is not undefined');\n       assert.isUndefined(splitResult.columnNumber, 'column number is not undefined');\n     });\n\n  it('uses the splitLineAndColumn function to return the line number if the URL contains one', () => {\n    const stringTest = 'http://www.example.com/foo.js:15';\n    const splitResult = ParsedURL.splitLineAndColumn(stringTest);\n    assert.strictEqual(splitResult.url, 'http://www.example.com/foo.js', 'URL is not correct');\n    assert.strictEqual(splitResult.lineNumber, 14, 'line number is incorrect');\n    assert.strictEqual(splitResult.columnNumber, undefined, 'column number is incorrect');\n  });\n\n  it('uses the splitLineAndColumn function to return the line and column numbers if the URL contains them', () => {\n    const stringTest = 'http://www.example.com:15:20';\n    const splitResult = ParsedURL.splitLineAndColumn(stringTest);\n    assert.strictEqual(splitResult.url, 'http://www.example.com', 'URL is not correct');\n    assert.strictEqual(splitResult.lineNumber, 14, 'line number is incorrect');\n    assert.strictEqual(splitResult.columnNumber, 19, 'column number is incorrect');\n  });\n\n  it('uses the splitLineAndColumn function to return the line and column numbers if the URL contains them and has a port number',\n     () => {\n       const stringTest = 'http://www.example.com:8080:15:20';\n       const splitResult = ParsedURL.splitLineAndColumn(stringTest);\n       assert.strictEqual(splitResult.url, 'http://www.example.com:8080', 'URL is not correct');\n       assert.strictEqual(splitResult.lineNumber, 14, 'line number is incorrect');\n       assert.strictEqual(splitResult.columnNumber, 19, 'column number is incorrect');\n     });\n\n  it('uses the removeWasmFunctionInfoFromURL function to return unmodified URL if not pointing to a wasm source',\n     () => {\n       const stringTest = 'http://www.example.com:15:20';\n       const url = ParsedURL.removeWasmFunctionInfoFromURL(stringTest);\n       assert.strictEqual(url, 'http://www.example.com:15:20', 'URL is not correct');\n     });\n\n  it('uses the removeWasmFunctionInfoFromURL function to return the wasm unmodified URL if it points to a wasm source',\n     () => {\n       const stringTest = 'http://www.example.com/example.wasm:wasm-function[0]:0x3e';\n       const url = ParsedURL.removeWasmFunctionInfoFromURL(stringTest);\n       assert.strictEqual(url, 'http://www.example.com/example.wasm', 'URL is not correct');\n     });\n\n  it('uses the removeWasmFunctionInfoFromURL function to return the wasm unmodified URL if it points to a wasm source with port number',\n     () => {\n       const stringTest = 'http://www.example.com:8080/example.wasm:wasm-function[0]:0x3e';\n       const url = ParsedURL.removeWasmFunctionInfoFromURL(stringTest);\n       assert.strictEqual(url, 'http://www.example.com:8080/example.wasm', 'URL is not correct');\n     });\n\n  it('uses the isRelativeURL function to return true if the URL is relative', () => {\n    assert.isTrue(ParsedURL.isRelativeURL('/test/path'));\n    assert.isTrue(ParsedURL.isRelativeURL('C:/'));\n    assert.isTrue(ParsedURL.isRelativeURL('C'));\n  });\n\n  it('uses the isRelativeURL function to return false if the URL is not relative', () => {\n    assert.isFalse(ParsedURL.isRelativeURL('http://www.example.com/test/path'));\n    assert.isFalse(ParsedURL.isRelativeURL('about:blank'));\n    assert.isFalse(ParsedURL.isRelativeURL('file:///C:/'));\n  });\n\n  it('uses the displayName function to return the name if it exists for a URL', () => {\n    const parsedUrl = new ParsedURL('http://www.example.com');\n    assert.strictEqual(parsedUrl.displayName, 'www.example.com/', 'name returned is incorrect');\n  });\n\n  it('uses the displayName function to return the name for a data URL', () => {\n    const parsedUrl = new ParsedURL('data:www.example.com');\n    assert.strictEqual(parsedUrl.displayName, 'data:www.example.com', 'name returned is incorrect');\n  });\n\n  it('uses the displayName function to return the name for a blob URL', () => {\n    const parsedUrl = new ParsedURL('blob:www.example.com');\n    assert.strictEqual(parsedUrl.displayName, 'blob:www.example.com', 'name returned is incorrect');\n  });\n\n  it('uses the displayName function to return the name for an about:blank URL', () => {\n    const parsedUrl = new ParsedURL('about:blank');\n    assert.strictEqual(parsedUrl.displayName, 'about:blank', 'name returned is incorrect');\n  });\n\n  it('uses the displayName function to return the name for a URL with a last path component', () => {\n    const parsedUrl = new ParsedURL('http://www.example.com/test');\n    assert.strictEqual(parsedUrl.displayName, 'test', 'name returned is incorrect');\n  });\n\n  it('uses the displayName function to return the name for a a slash', () => {\n    const parsedUrl = new ParsedURL('/');\n    assert.strictEqual(parsedUrl.displayName, '/', 'name returned is incorrect');\n  });\n\n  it('uses the displayName function to return the name for a URL that already has a display name set', () => {\n    const parsedUrl = new ParsedURL('http://www.example.com');\n    assert.strictEqual(parsedUrl.displayName, 'www.example.com/', 'name returned is incorrect');\n    assert.strictEqual(parsedUrl.displayName, 'www.example.com/', 'name returned is incorrect');\n  });\n\n  it('uses the dataURLDisplayName function to return data URL display name if it is not already set', () => {\n    const parsedUrl = new ParsedURL('http://www.example.com');\n    assert.strictEqual(parsedUrl.dataURLDisplayName(), '', 'data URL display name is returned incorrectly');\n  });\n\n  it('uses the dataURLDisplayName function to return data URL display name if it is already set', () => {\n    const parsedUrl = new ParsedURL('data:http://www.example.com');\n    assert.strictEqual(\n        parsedUrl.dataURLDisplayName(), 'data:http://www.exa…', 'data URL display name is returned incorrectly');\n    assert.strictEqual(\n        parsedUrl.dataURLDisplayName(), 'data:http://www.exa…', 'data URL display name is returned incorrectly');\n  });\n\n  it('uses the lastPathComponentWithFragment function to return for a URL without a path', () => {\n    const parsedUrl = new ParsedURL('http://www.example.com');\n    assert.strictEqual(\n        parsedUrl.lastPathComponentWithFragment(), '', 'last path component with fragmen returned is incorrect');\n  });\n\n  it('uses the lastPathComponentWithFragment function to return for a URL with a path', () => {\n    const parsedUrl = new ParsedURL('http://www.example.com/test/path');\n    assert.strictEqual(\n        parsedUrl.lastPathComponentWithFragment(), 'path', 'last path component with fragmen returned is incorrect');\n  });\n\n  it('uses the lastPathComponentWithFragment function to return for a URL with a path and trailing slash', () => {\n    const parsedUrl = new ParsedURL('http://www.example.com/test/path/');\n    assert.strictEqual(\n        parsedUrl.lastPathComponentWithFragment(), 'path/', 'last path component with fragmen returned is incorrect');\n  });\n\n  it('uses the lastPathComponentWithFragment function to return for a URL with a path and a fragment', () => {\n    const parsedUrl = new ParsedURL('http://www.example.com/test/path#testFragment');\n    assert.strictEqual(\n        parsedUrl.lastPathComponentWithFragment(), 'path#testFragment',\n        'last path component with fragmen returned is incorrect');\n  });\n\n  it('returns the domain for a data URL', () => {\n    const parsedUrl = new ParsedURL('data:http://www.example.com');\n    assert.strictEqual(parsedUrl.domain(), 'data:', 'domain returned was incorrect');\n  });\n\n  it('returns the domain for an http URL without a port', () => {\n    const parsedUrl = new ParsedURL('http://www.example.com');\n    assert.strictEqual(parsedUrl.domain(), 'www.example.com', 'domain returned was incorrect');\n  });\n\n  it('returns the domain for an http URL with a port', () => {\n    const parsedUrl = new ParsedURL('http://www.example.com:8080');\n    assert.strictEqual(parsedUrl.domain(), 'www.example.com:8080', 'domain returned was incorrect');\n  });\n\n  it('returns the security origin for a data URL', () => {\n    const parsedUrl = new ParsedURL('data:http://www.example.com');\n    assert.strictEqual(parsedUrl.securityOrigin(), 'data:', 'security origin returned was incorrect');\n  });\n\n  it('returns the security origin for a blob URL', () => {\n    const parsedUrl = new ParsedURL('blob:http://www.example.com');\n    assert.strictEqual(parsedUrl.securityOrigin(), 'http://www.example.com', 'security origin returned was incorrect');\n  });\n\n  it('returns the security origin for an http URL', () => {\n    const parsedUrl = new ParsedURL('http://www.example.com');\n    assert.strictEqual(parsedUrl.securityOrigin(), 'http://www.example.com', 'security origin returned was incorrect');\n  });\n\n  it('returns the url without scheme for a URL that has a scheme', () => {\n    const parsedUrl = new ParsedURL('http://www.example.com');\n    assert.strictEqual(parsedUrl.urlWithoutScheme(), 'www.example.com', 'URL without scheme returned was incorrect');\n  });\n\n  it('returns the url without scheme for a URL that does not have a scheme', () => {\n    const parsedUrl = new ParsedURL('www.example.com');\n    assert.strictEqual(parsedUrl.urlWithoutScheme(), 'www.example.com', 'URL without scheme returned was incorrect');\n  });\n\n  it('returns the correct results for all ported web_tests unit tests', () => {\n    assertEqualUrlStringString(\n        ParsedURL.completeURL(\n            'http://example.com/script.js' as Platform.DevToolsPath.UrlString, 'http://example.com/map.json'),\n        'http://example.com/map.json');\n    assertEqualUrlStringString(\n        ParsedURL.completeURL('http://example.com/script.js' as Platform.DevToolsPath.UrlString, '/map.json'),\n        'http://example.com/map.json');\n    assertEqualUrlStringString(\n        ParsedURL.completeURL(\n            'http://example.com/scripts/script.js' as Platform.DevToolsPath.UrlString, '../maps/map.json'),\n        'http://example.com/maps/map.json');\n\n    const baseURL = 'http://a/b/c/d;p?q' as Platform.DevToolsPath.UrlString;\n\n    assertEqualUrlStringString(ParsedURL.completeURL(baseURL, 'http://h'),\n                               'http://h/');  // modified from RFC3986\n    assertEqualUrlStringString(ParsedURL.completeURL(baseURL, 'g'), 'http://a/b/c/g');\n    assertEqualUrlStringString(ParsedURL.completeURL(baseURL, './g'), 'http://a/b/c/g');\n    assertEqualUrlStringString(ParsedURL.completeURL(baseURL, 'g/'), 'http://a/b/c/g/');\n    assertEqualUrlStringString(ParsedURL.completeURL(baseURL, '/g'), 'http://a/g');\n    assertEqualUrlStringString(ParsedURL.completeURL(baseURL, '//g'), 'http://g');\n    assertEqualUrlStringString(ParsedURL.completeURL(baseURL, '?y'), 'http://a/b/c/d;p?y');\n    assertEqualUrlStringString(ParsedURL.completeURL(baseURL, 'g?y'), 'http://a/b/c/g?y');\n    assertEqualUrlStringString(ParsedURL.completeURL(baseURL, '#s'), 'http://a/b/c/d;p?q#s');\n    assertEqualUrlStringString(ParsedURL.completeURL(baseURL, 'g#s'), 'http://a/b/c/g#s');\n    assertEqualUrlStringString(ParsedURL.completeURL(baseURL, 'g?y#s'), 'http://a/b/c/g?y#s');\n    assertEqualUrlStringString(ParsedURL.completeURL(baseURL, ';x'), 'http://a/b/c/;x');\n    assertEqualUrlStringString(ParsedURL.completeURL(baseURL, 'g;x'), 'http://a/b/c/g;x');\n    assertEqualUrlStringString(ParsedURL.completeURL(baseURL, 'g;x?y#s'), 'http://a/b/c/g;x?y#s');\n    assertEqualUrlStringString(ParsedURL.completeURL(baseURL, 'g;x=1/./y'), 'http://a/b/c/g;x=1/y');\n    assertEqualUrlStringString(ParsedURL.completeURL(baseURL, 'g;x=1/../y'), 'http://a/b/c/y');\n    assertEqualUrlStringString(ParsedURL.completeURL(baseURL, 'g?y/./x'), 'http://a/b/c/g?y/./x');\n    assertEqualUrlStringString(ParsedURL.completeURL(baseURL, 'g?y/../x'), 'http://a/b/c/g?y/../x');\n    assertEqualUrlStringString(ParsedURL.completeURL(baseURL, 'g#s/./x'), 'http://a/b/c/g#s/./x');\n    assertEqualUrlStringString(ParsedURL.completeURL(baseURL, 'g#s/../x'), 'http://a/b/c/g#s/../x');\n\n    assertEqualUrlStringString(\n        ParsedURL.completeURL('http://a/b/c/d;p?q' as Platform.DevToolsPath.UrlString, '//secure.com/moo'),\n        'http://secure.com/moo');\n    assertEqualUrlStringString(\n        ParsedURL.completeURL('http://a/b/c/d;p?q' as Platform.DevToolsPath.UrlString, 'cat.jpeg'),\n        'http://a/b/c/cat.jpeg');\n    assertEqualUrlStringString(\n        ParsedURL.completeURL('http://example.com/path.css?query#fragment' as Platform.DevToolsPath.UrlString, ''),\n        'http://example.com/path.css?query');\n  });\n\n  it('encodes partial path', () => {\n    const pathTest = 'path/with%20escape/and spaces' as Platform.DevToolsPath.RawPathString;\n    const encodedPath = 'path/with%2520escape/and%20spaces';\n    const convertedPath = ParsedURL.rawPathToEncodedPathString(pathTest);\n    assert.strictEqual(convertedPath, encodedPath, 'path was not converted successfully');\n  });\n\n  it('decodes partial path', () => {\n    const pathTest = 'path/with%20escape/and spaces';\n    const encodedPath = 'path/with%2520escape/and%20spaces' as Platform.DevToolsPath.EncodedPathString;\n    const convertedPath = ParsedURL.encodedPathToRawPathString(encodedPath);\n    assert.strictEqual(convertedPath, pathTest, 'path was not converted successfully');\n  });\n\n  it('encodes, decodes partial path with email address', () => {\n    const pathTest = 'username:password@example.com' as Platform.DevToolsPath.RawPathString;  // valid filename on unix\n    const encodedPath = ParsedURL.rawPathToEncodedPathString(pathTest);\n    assert.strictEqual(pathTest, encodedPath as string, 'changed during escaping');\n    const convertedPath = ParsedURL.encodedPathToRawPathString(encodedPath);\n    assert.strictEqual(convertedPath, pathTest, 'path was not converted successfully');\n  });\n\n  it('encodes, decodes partial path', () => {\n    const pathTest = 'C:/Program%20Files/Google' as Platform.DevToolsPath.RawPathString;\n    const encodedPath = ParsedURL.rawPathToEncodedPathString(pathTest);\n    const convertedPath = ParsedURL.encodedPathToRawPathString(encodedPath);\n    assert.strictEqual(convertedPath, pathTest, 'path was not converted successfully');\n  });\n\n  it('encodes, decodes partial path with whitespace', () => {\n    const pathTest = 'C:/Program Files/Google' as Platform.DevToolsPath.RawPathString;\n    const encodedPath = ParsedURL.rawPathToEncodedPathString(pathTest);\n    const convertedPath = ParsedURL.encodedPathToRawPathString(encodedPath);\n    assert.strictEqual(convertedPath, pathTest, 'path was not converted successfully');\n  });\n\n  it('encodes, decodes absolute path', () => {\n    const pathTest = '/C:/Program%20Files/Google' as Platform.DevToolsPath.RawPathString;\n    const encodedPath = ParsedURL.rawPathToEncodedPathString(pathTest);\n    const convertedPath = ParsedURL.encodedPathToRawPathString(encodedPath);\n    assert.strictEqual(convertedPath, pathTest, 'path was not converted successfully');\n  });\n\n  it('encodes, decodes absolute path with whitespace', () => {\n    const pathTest = '/C:/Program Files/Google' as Platform.DevToolsPath.RawPathString;\n    const encodedPath = ParsedURL.rawPathToEncodedPathString(pathTest);\n    const convertedPath = ParsedURL.encodedPathToRawPathString(encodedPath);\n    assert.strictEqual(convertedPath, pathTest, 'path was not converted successfully');\n  });\n\n  it('converts relative platform path and base URL to URL', () => {\n    const baseUrl = 'http://localhost:8080/my%20folder/old%20path' as Platform.DevToolsPath.UrlString;\n    const relativePath = 'new spaced%20name' as Platform.DevToolsPath.RawPathString;\n    const convertedUrl = ParsedURL.relativePathToUrlString(relativePath, baseUrl);\n    assert.strictEqual(convertedUrl, 'http://localhost:8080/my%20folder/new%20spaced%2520name');\n  });\n\n  it('converts URL to a platform path that includes drive letter and spaces on Windows', () => {\n    const urlTest = 'file:///C:/Program%20Files/Google' as Platform.DevToolsPath.UrlString;\n    const convertedUrl = ParsedURL.urlToRawPathString(urlTest, true);\n    assert.strictEqual(convertedUrl, 'C:\\\\Program Files\\\\Google', 'URL was not converted successfully');\n  });\n\n  it('converts URL to a platform path that includes spaces and percents', () => {\n    const urlTest = 'file:///home/user/with%20space/with%2520escape' as Platform.DevToolsPath.UrlString;\n    const convertedUrl = ParsedURL.urlToRawPathString(urlTest, false);\n    assert.strictEqual(convertedUrl, '/home/user/with space/with%20escape', 'URL was not converted successfully');\n  });\n\n  it('converts Windows platform path with spaces and percents to file url', () => {\n    const urlTest = 'C:\\\\Program Files\\\\with%20escape' as Platform.DevToolsPath.RawPathString;\n    const convertedUrl = ParsedURL.rawPathToUrlString(urlTest);\n    assert.strictEqual(\n        convertedUrl, 'file:///C:/Program%20Files/with%2520escape', 'URL was not converted successfully');\n  });\n\n  it('converts platform path with variety of special characters to URL and back consistently with Chrome', () => {\n    const platformPathTest =\n        '/home/a:b@c(d, e+f)=&g;#h$' as Platform.DevToolsPath.RawPathString;  // Valid filename on unix\n    const urlTest = 'file:///home/a:b@c(d,%20e+f)=&g%3B%23h$' as\n        Platform.DevToolsPath.UrlString;  // URL in Chrome address bar if you open that file\n    assert.strictEqual(ParsedURL.rawPathToUrlString(platformPathTest), urlTest);\n    assert.strictEqual(ParsedURL.urlToRawPathString(urlTest), platformPathTest);\n  });\n});\n"]}