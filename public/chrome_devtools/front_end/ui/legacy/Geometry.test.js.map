{"version":3,"file":"Geometry.test.js","sourceRoot":"","sources":["../../../../../../front_end/ui/legacy/Geometry.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as UI from './legacy.js';\n\ndescribe('Vector', () => {\n  it('can be instantiated without issues', () => {\n    const vector = new UI.Geometry.Vector(1, 2, 3);\n    assert.strictEqual(vector.x, 1, 'x value was not set correctly');\n    assert.strictEqual(vector.y, 2, 'y value was not set correctly');\n    assert.strictEqual(vector.z, 3, 'z value was not set correctly');\n  });\n\n  it('is able to return the length', () => {\n    const vector = new UI.Geometry.Vector(1, 2, 3);\n    assert.strictEqual(vector.length(), 3.7416573867739413, 'length was not returned correctly');\n  });\n\n  it('is able to be normalized if the length was above epsilon', () => {\n    const vector = new UI.Geometry.Vector(1, 2, 3);\n    vector.normalize();\n    assert.strictEqual(vector.x, 0.2672612419124244, 'x value was not set correctly');\n    assert.strictEqual(vector.y, 0.5345224838248488, 'y value was not set correctly');\n    assert.strictEqual(vector.z, 0.8017837257372732, 'z value was not set correctly');\n    assert.strictEqual(vector.length(), 1, 'length was not returned correctly');\n  });\n\n  it('does not normalize if the length was below epsilon', () => {\n    const vector = new UI.Geometry.Vector(0.000001, 0.000002, 0.000003);\n    vector.normalize();\n    assert.strictEqual(vector.x, 0.000001, 'x value was changed');\n    assert.strictEqual(vector.y, 0.000002, 'y value was changed');\n    assert.strictEqual(vector.z, 0.000003, 'z value was changed');\n    assert.strictEqual(vector.length(), 0.0000037416573867739415, 'length was not returned correctly');\n  });\n});\n\ndescribe('Point', () => {\n  it('can be instantiated without issues', () => {\n    const point = new UI.Geometry.Point(1, 2);\n    assert.strictEqual(point.x, 1, 'x value was not set correctly');\n    assert.strictEqual(point.y, 2, 'y value was not set correctly');\n  });\n\n  it('is able to return distanct to a certain point', () => {\n    const p1 = new UI.Geometry.Point(0, 0);\n    const p2 = new UI.Geometry.Point(0, 1);\n    const p3 = new UI.Geometry.Point(1, 0);\n    const p4 = new UI.Geometry.Point(3, 4);\n    assert.strictEqual(p1.distanceTo(p2), 1, 'distance to the first point was not returned correctly');\n    assert.strictEqual(p1.distanceTo(p3), 1, 'distance to the second point was not returned correctly');\n    assert.strictEqual(p1.distanceTo(p4), 5, 'distance to the third point was not returned correctly');\n  });\n\n  it('is able to be scaled to a certain value', () => {\n    const point = new UI.Geometry.Point(1, 2);\n    const scaledPoint = point.scale(2);\n    assert.strictEqual(scaledPoint.x, 2, 'x was not scaled correctly');\n    assert.strictEqual(scaledPoint.y, 4, 'y was not scaled correctly');\n  });\n\n  it('is able to be projected on a point that is not the origin', () => {\n    const p1 = new UI.Geometry.Point(1, 2);\n    const p2 = new UI.Geometry.Point(3, 4);\n    const projectedPoint = p1.projectOn(p2);\n    assert.strictEqual(projectedPoint.x, 1.32, 'x was not projected correctly');\n    assert.strictEqual(projectedPoint.y, 1.76, 'y was not projected correctly');\n  });\n\n  it('is able to be projected on a point that is the origin', () => {\n    const p1 = new UI.Geometry.Point(1, 2);\n    const p2 = new UI.Geometry.Point(0, 0);\n    const projectedPoint = p1.projectOn(p2);\n    assert.strictEqual(projectedPoint.x, 0, 'x was not projected correctly');\n    assert.strictEqual(projectedPoint.y, 0, 'y was not projected correctly');\n  });\n\n  it('can be represented as a string', () => {\n    const point = new UI.Geometry.Point(1.23, 4.56);\n    assert.strictEqual(point.toString(), '1.23, 4.56', 'string representation was not returned correctly');\n  });\n});\n\ndescribe('CubicBezier', () => {\n  it('can be instantiated without issues', () => {\n    const p1 = new UI.Geometry.Point(1, 2);\n    const p2 = new UI.Geometry.Point(3, 4);\n    const cubicBezier = new UI.Geometry.CubicBezier(p1, p2);\n    assert.strictEqual(cubicBezier.controlPoints[0].x, 1, 'x value for the first point was not set correctly');\n    assert.strictEqual(cubicBezier.controlPoints[0].y, 2, 'y value for the first point was not set correctly');\n    assert.strictEqual(cubicBezier.controlPoints[1].x, 3, 'x value for the second point was not set correctly');\n    assert.strictEqual(cubicBezier.controlPoints[1].y, 4, 'y value for the second point was not set correctly');\n  });\n\n  it('is able to return a cubic bezier from a valid string', () => {\n    const testText = 'linear';\n    const {controlPoints} = UI.Geometry.CubicBezier.parse(testText)!;\n    assert.strictEqual(controlPoints[0].x, 0, 'x value for the first point was not set correctly');\n    assert.strictEqual(controlPoints[0].y, 0, 'y value for the first point was not set correctly');\n    assert.strictEqual(controlPoints[1].x, 1, 'x value for the second point was not set correctly');\n    assert.strictEqual(controlPoints[1].y, 1, 'y value for the second point was not set correctly');\n  });\n\n  it('returns null from an invalid string', () => {\n    const testText = 'invalid text';\n    const cubicBezier = UI.Geometry.CubicBezier.parse(testText);\n    assert.isNull(cubicBezier, 'function did not return null');\n  });\n\n  it('is able to evaluate a number to a point', () => {\n    const p1 = new UI.Geometry.Point(1, 2);\n    const p2 = new UI.Geometry.Point(3, 4);\n    const cubicBezier = new UI.Geometry.CubicBezier(p1, p2);\n    const resultPoint = cubicBezier.evaluateAt(5);\n    assert.strictEqual(resultPoint.x, -535, 'x value for the resulting point was not set correctly');\n    assert.strictEqual(resultPoint.y, -595, 'y value for the resulting point was not set correctly');\n  });\n\n  it('is able to be represented as CSS text with raw values', () => {\n    const p1 = new UI.Geometry.Point(1, 2);\n    const p2 = new UI.Geometry.Point(3, 4);\n    const cubicBezier = new UI.Geometry.CubicBezier(p1, p2);\n    const cssText = cubicBezier.asCSSText();\n    assert.strictEqual(cssText, 'cubic-bezier(1, 2, 3, 4)', 'cubic bezier was not represented correctly as CSS text');\n  });\n\n  it('is able to be represented as CSS text with a keyword value', () => {\n    const p1 = new UI.Geometry.Point(0.25, 0.1);\n    const p2 = new UI.Geometry.Point(0.25, 1);\n    const cubicBezier = new UI.Geometry.CubicBezier(p1, p2);\n    const cssText = cubicBezier.asCSSText();\n    assert.strictEqual(cssText, 'ease', 'cubic bezier was not represented correctly as CSS text');\n  });\n});\n\ndescribe('EulerAngles', () => {\n  it('can be instantiated without issues', () => {\n    const eulerAngles = new UI.Geometry.EulerAngles(1, 2, 3);\n    assert.strictEqual(eulerAngles.alpha, 1, 'alpha value was not set correctly');\n    assert.strictEqual(eulerAngles.beta, 2, 'beta value was not set correctly');\n    assert.strictEqual(eulerAngles.gamma, 3, 'gamma value was not set correctly');\n  });\n\n  it('is able to return Euler angles from an identity rotation matrix', () => {\n    const matrix = new DOMMatrix();\n    const result = UI.Geometry.EulerAngles.fromDeviceOrientationRotationMatrix(matrix);\n    assert.strictEqual(result.alpha, 0, 'alpha value was not set correctly');\n    assert.strictEqual(result.beta, 0, 'beta value was not set correctly');\n    assert.strictEqual(result.gamma, 0, 'gamma value was not set correctly');\n  });\n\n  function matrixWithZXYRotation(alpha: number, beta: number, gamma: number): DOMMatrix {\n    return new DOMMatrix().rotate(0, 0, alpha).rotate(beta, 0, 0).rotate(0, gamma, 0);\n  }\n\n  it('is able to return Euler angles from a rotation matrix', () => {\n    let matrix, result;\n\n    matrix = matrixWithZXYRotation(0, 1, 2);\n    result = UI.Geometry.EulerAngles.fromDeviceOrientationRotationMatrix(matrix);\n    assert.strictEqual(result.alpha, 0, 'alpha value was not set correctly');\n    assert.strictEqual(result.beta, 1, 'beta value was not set correctly');\n    assert.strictEqual(result.gamma, 2, 'gamma value was not set correctly');\n\n    matrix = matrixWithZXYRotation(1, 0, 2);\n    result = UI.Geometry.EulerAngles.fromDeviceOrientationRotationMatrix(matrix);\n    assert.strictEqual(result.alpha, 1, 'alpha value was not set correctly');\n    assert.strictEqual(result.beta, 0, 'beta value was not set correctly');\n    assert.strictEqual(result.gamma, 2, 'gamma value was not set correctly');\n\n    matrix = matrixWithZXYRotation(1, 2, 0);\n    result = UI.Geometry.EulerAngles.fromDeviceOrientationRotationMatrix(matrix);\n    assert.strictEqual(result.alpha, 1, 'alpha value was not set correctly');\n    assert.strictEqual(result.beta, 2, 'beta value was not set correctly');\n    assert.strictEqual(result.gamma, 0, 'gamma value was not set correctly');\n\n    matrix = matrixWithZXYRotation(1, 2, 3);\n    result = UI.Geometry.EulerAngles.fromDeviceOrientationRotationMatrix(matrix);\n    assert.strictEqual(result.alpha, 1, 'alpha value was not set correctly');\n    assert.strictEqual(result.beta, 2, 'beta value was not set correctly');\n    assert.strictEqual(result.gamma, 3, 'gamma value was not set correctly');\n\n    matrix = matrixWithZXYRotation(1, -2, -3);\n    result = UI.Geometry.EulerAngles.fromDeviceOrientationRotationMatrix(matrix);\n    assert.strictEqual(result.alpha, 1, 'alpha value was not set correctly');\n    assert.strictEqual(result.beta, -2, 'beta value was not set correctly');\n    assert.strictEqual(result.gamma, -3, 'gamma value was not set correctly');\n\n    matrix = matrixWithZXYRotation(1, -2, 3);\n    result = UI.Geometry.EulerAngles.fromDeviceOrientationRotationMatrix(matrix);\n    assert.strictEqual(result.alpha, 1, 'alpha value was not set correctly');\n    assert.strictEqual(result.beta, -2, 'beta value was not set correctly');\n    assert.strictEqual(result.gamma, 3, 'gamma value was not set correctly');\n\n    matrix = matrixWithZXYRotation(1, 2, -3);\n    result = UI.Geometry.EulerAngles.fromDeviceOrientationRotationMatrix(matrix);\n    assert.strictEqual(result.alpha, 1, 'alpha value was not set correctly');\n    assert.strictEqual(result.beta, 2, 'beta value was not set correctly');\n    assert.strictEqual(result.gamma, -3, 'gamma value was not set correctly');\n  });\n\n  it('returns canonicalized Euler angles when a Gimbal lock occurs', () => {\n    let matrix, result;\n\n    matrix = matrixWithZXYRotation(30, 90, 45);\n    result = UI.Geometry.EulerAngles.fromDeviceOrientationRotationMatrix(matrix);\n    assert.strictEqual(result.alpha, 75, 'alpha value was not set correctly');\n    assert.strictEqual(result.beta, 90, 'beta value was not set correctly');\n    assert.strictEqual(result.gamma, 0, 'gamma value was not set correctly');\n\n    matrix = matrixWithZXYRotation(30, -90, 45);\n    result = UI.Geometry.EulerAngles.fromDeviceOrientationRotationMatrix(matrix);\n    assert.strictEqual(result.alpha, 345, 'alpha value was not set correctly');\n    assert.strictEqual(result.beta, -90, 'beta value was not set correctly');\n    assert.strictEqual(result.gamma, 0, 'gamma value was not set correctly');\n\n    matrix = matrixWithZXYRotation(30, -90, -45);\n    result = UI.Geometry.EulerAngles.fromDeviceOrientationRotationMatrix(matrix);\n    assert.strictEqual(result.alpha, 75, 'alpha value was not set correctly');\n    assert.strictEqual(result.beta, -90, 'beta value was not set correctly');\n    assert.strictEqual(result.gamma, 0, 'gamma value was not set correctly');\n\n    matrix = matrixWithZXYRotation(0, 90, 45);\n    result = UI.Geometry.EulerAngles.fromDeviceOrientationRotationMatrix(matrix);\n    assert.strictEqual(result.alpha, 45, 'alpha value was not set correctly');\n    assert.strictEqual(result.beta, 90, 'beta value was not set correctly');\n    assert.strictEqual(result.gamma, 0, 'gamma value was not set correctly');\n\n    matrix = matrixWithZXYRotation(0, 90, -45);\n    result = UI.Geometry.EulerAngles.fromDeviceOrientationRotationMatrix(matrix);\n    assert.strictEqual(result.alpha, 315, 'alpha value was not set correctly');\n    assert.strictEqual(result.beta, 90, 'beta value was not set correctly');\n    assert.strictEqual(result.gamma, 0, 'gamma value was not set correctly');\n\n    matrix = matrixWithZXYRotation(45, 90, 0);\n    result = UI.Geometry.EulerAngles.fromDeviceOrientationRotationMatrix(matrix);\n    assert.strictEqual(result.alpha, 45, 'alpha value was not set correctly');\n    assert.strictEqual(result.beta, 90, 'beta value was not set correctly');\n    assert.strictEqual(result.gamma, 0, 'gamma value was not set correctly');\n\n    matrix = matrixWithZXYRotation(0, 90, 0);\n    result = UI.Geometry.EulerAngles.fromDeviceOrientationRotationMatrix(matrix);\n    assert.strictEqual(result.alpha, 0, 'alpha value was not set correctly');\n    assert.strictEqual(result.beta, 90, 'beta value was not set correctly');\n    assert.strictEqual(result.gamma, 0, 'gamma value was not set correctly');\n\n    matrix = matrixWithZXYRotation(0, -90, 0);\n    result = UI.Geometry.EulerAngles.fromDeviceOrientationRotationMatrix(matrix);\n    assert.strictEqual(result.alpha, 0, 'alpha value was not set correctly');\n    assert.strictEqual(result.beta, -90, 'beta value was not set correctly');\n    assert.strictEqual(result.gamma, 0, 'gamma value was not set correctly');\n  });\n\n  it('returns Euler angles inside the allowed Device Orientation intervals', () => {\n    let matrix, result;\n\n    matrix = matrixWithZXYRotation(1, 2, 90);\n    result = UI.Geometry.EulerAngles.fromDeviceOrientationRotationMatrix(matrix);\n    assert.strictEqual(result.alpha, 181, 'alpha value was not set correctly');\n    assert.strictEqual(result.beta, 178, 'beta value was not set correctly');\n    assert.strictEqual(result.gamma, -90, 'gamma value was not set correctly');\n\n    matrix = matrixWithZXYRotation(1, 2, -91);\n    result = UI.Geometry.EulerAngles.fromDeviceOrientationRotationMatrix(matrix);\n    assert.strictEqual(result.alpha, 181, 'alpha value was not set correctly');\n    assert.strictEqual(result.beta, 178, 'beta value was not set correctly');\n    assert.strictEqual(result.gamma, 89, 'gamma value was not set correctly');\n\n    matrix = matrixWithZXYRotation(360, 1, 2);\n    result = UI.Geometry.EulerAngles.fromDeviceOrientationRotationMatrix(matrix);\n    assert.strictEqual(result.alpha, 0, 'alpha value was not set correctly');\n    assert.strictEqual(result.beta, 1, 'beta value was not set correctly');\n    assert.strictEqual(result.gamma, 2, 'gamma value was not set correctly');\n\n    matrix = matrixWithZXYRotation(-1, 1, 2);\n    result = UI.Geometry.EulerAngles.fromDeviceOrientationRotationMatrix(matrix);\n    assert.strictEqual(result.alpha, 359, 'alpha value was not set correctly');\n    assert.strictEqual(result.beta, 1, 'beta value was not set correctly');\n    assert.strictEqual(result.gamma, 2, 'gamma value was not set correctly');\n\n    matrix = matrixWithZXYRotation(1, -181, 2);\n    result = UI.Geometry.EulerAngles.fromDeviceOrientationRotationMatrix(matrix);\n    assert.strictEqual(result.alpha, 1, 'alpha value was not set correctly');\n    assert.strictEqual(result.beta, 179, 'beta value was not set correctly');\n    assert.strictEqual(result.gamma, 2, 'gamma value was not set correctly');\n\n    matrix = matrixWithZXYRotation(1, 180, 2);\n    result = UI.Geometry.EulerAngles.fromDeviceOrientationRotationMatrix(matrix);\n    assert.strictEqual(result.alpha, 1, 'alpha value was not set correctly');\n    assert.strictEqual(result.beta, -180, 'beta value was not set correctly');\n    assert.strictEqual(result.gamma, 2, 'gamma value was not set correctly');\n  });\n});\n\ndescribe('Size', () => {\n  it('can be instantiated without issues', () => {\n    const size = new UI.Geometry.Size(1, 2);\n    assert.strictEqual(size.width, 1, 'width value was not set correctly');\n    assert.strictEqual(size.height, 2, 'height value was not set correctly');\n  });\n\n  it('can be clipped to another smaller size', () => {\n    const size1 = new UI.Geometry.Size(3, 4);\n    const size2 = new UI.Geometry.Size(1, 2);\n    const resultSize = size1.clipTo(size2);\n    assert.strictEqual(resultSize.width, 1, 'width value was not set correctly');\n    assert.strictEqual(resultSize.height, 2, 'height value was not set correctly');\n  });\n\n  it('can be clipped to another larger size', () => {\n    const size1 = new UI.Geometry.Size(1, 2);\n    const size2 = new UI.Geometry.Size(3, 4);\n    const resultSize = size1.clipTo(size2);\n    assert.strictEqual(resultSize.width, 1, 'width value was not set correctly');\n    assert.strictEqual(resultSize.height, 2, 'height value was not set correctly');\n  });\n\n  it('returns the original size if nothing was passed to the clipTo function', () => {\n    const size = new UI.Geometry.Size(1, 2);\n    const resultSize = size.clipTo();\n    assert.strictEqual(resultSize.width, 1, 'width value was not set correctly');\n    assert.strictEqual(resultSize.height, 2, 'height value was not set correctly');\n  });\n\n  it('can be scaled to a different size', () => {\n    const size = new UI.Geometry.Size(1, 2);\n    const resultSize = size.scale(2);\n    assert.strictEqual(resultSize.width, 2, 'width value was not scaled correctly');\n    assert.strictEqual(resultSize.height, 4, 'height value was not scaled correctly');\n  });\n\n  it('is able to check if it is equal to another size', () => {\n    const size1 = new UI.Geometry.Size(1, 2);\n    const size2 = new UI.Geometry.Size(3, 4);\n    const size3 = new UI.Geometry.Size(1, 2);\n    const result1 = size1.isEqual(size2);\n    const result2 = size1.isEqual(size3);\n    assert.isFalse(result1, 'size2 was considered equal');\n    assert.isTrue(result2, 'size3 was not considered equal');\n  });\n\n  it('is able to change width to the max value given a size', () => {\n    const size1 = new UI.Geometry.Size(1, 2);\n    const size2 = new UI.Geometry.Size(3, 4);\n    const resultSize = size1.widthToMax(size2);\n    assert.strictEqual(resultSize.width, 3, 'width value was not scaled correctly');\n    assert.strictEqual(resultSize.height, 2, 'height value was not scaled correctly');\n  });\n\n  it('is able to change width to the max value given a number', () => {\n    const size1 = new UI.Geometry.Size(1, 2);\n    const resultSize = size1.widthToMax(5);\n    assert.strictEqual(resultSize.width, 5, 'width value was not scaled correctly');\n    assert.strictEqual(resultSize.height, 2, 'height value was not scaled correctly');\n  });\n\n  it('is able to increase width by a certain value given a size', () => {\n    const size1 = new UI.Geometry.Size(1, 2);\n    const size2 = new UI.Geometry.Size(3, 4);\n    const resultSize = size1.addWidth(size2);\n    assert.strictEqual(resultSize.width, 4, 'width value was not scaled correctly');\n    assert.strictEqual(resultSize.height, 2, 'height value was not scaled correctly');\n  });\n\n  it('is able to increase width by a certain value given a number', () => {\n    const size1 = new UI.Geometry.Size(1, 2);\n    const resultSize = size1.addWidth(5);\n    assert.strictEqual(resultSize.width, 6, 'width value was not scaled correctly');\n    assert.strictEqual(resultSize.height, 2, 'height value was not scaled correctly');\n  });\n\n  it('is able to change height to the max value given a size', () => {\n    const size1 = new UI.Geometry.Size(1, 2);\n    const size2 = new UI.Geometry.Size(3, 4);\n    const resultSize = size1.heightToMax(size2);\n    assert.strictEqual(resultSize.width, 1, 'width value was not scaled correctly');\n    assert.strictEqual(resultSize.height, 4, 'height value was not scaled correctly');\n  });\n\n  it('is able to change height to the max value given a number', () => {\n    const size1 = new UI.Geometry.Size(1, 2);\n    const resultSize = size1.heightToMax(5);\n    assert.strictEqual(resultSize.width, 1, 'width value was not scaled correctly');\n    assert.strictEqual(resultSize.height, 5, 'height value was not scaled correctly');\n  });\n\n  it('is able to increase height by a certain value given a size', () => {\n    const size1 = new UI.Geometry.Size(1, 2);\n    const size2 = new UI.Geometry.Size(3, 4);\n    const resultSize = size1.addHeight(size2);\n    assert.strictEqual(resultSize.width, 1, 'width value was not scaled correctly');\n    assert.strictEqual(resultSize.height, 6, 'height value was not scaled correctly');\n  });\n\n  it('is able to increase height by a certain value given a number', () => {\n    const size1 = new UI.Geometry.Size(1, 2);\n    const resultSize = size1.addHeight(5);\n    assert.strictEqual(resultSize.width, 1, 'width value was not scaled correctly');\n    assert.strictEqual(resultSize.height, 7, 'height value was not scaled correctly');\n  });\n});\n\ndescribe('Constraints', () => {\n  it('can be instantiated without issues', () => {\n    const size1 = new UI.Geometry.Size(1, 2);\n    const size2 = new UI.Geometry.Size(3, 4);\n    const constraints = new UI.Geometry.Constraints(size1, size2);\n    assert.strictEqual(constraints.minimum.width, 1, 'size1 width value was not set correctly');\n    assert.strictEqual(constraints.minimum.height, 2, 'size1 height value was not set correctly');\n    assert.strictEqual(constraints.preferred.width, 3, 'size2 width value was not set correctly');\n    assert.strictEqual(constraints.preferred.height, 4, 'size2 height value was not set correctly');\n  });\n\n  it('thows an error if instantiated with a minimum size that is larger than the the preferred size', () => {\n    const size1 = new UI.Geometry.Size(3, 4);\n    const size2 = new UI.Geometry.Size(1, 2);\n    assert.throws(() => new UI.Geometry.Constraints(size1, size2), Error, 'Minimum size is greater than preferred.');\n  });\n\n  it('sets minimum and preferred to UI.Geometry.Size(0, 0) if no values were given to the constructor', () => {\n    const constraints = new UI.Geometry.Constraints();\n    assert.strictEqual(constraints.minimum.width, 0, 'size1 width value was not set correctly');\n    assert.strictEqual(constraints.minimum.height, 0, 'size1 height value was not set correctly');\n    assert.strictEqual(constraints.preferred.width, 0, 'size2 width value was not set correctly');\n    assert.strictEqual(constraints.preferred.height, 0, 'size2 height value was not set correctly');\n  });\n\n  it('is able to check if it is equal to another constraint', () => {\n    const size1 = new UI.Geometry.Size(1, 2);\n    const size2 = new UI.Geometry.Size(3, 4);\n    const size3 = new UI.Geometry.Size(5, 6);\n    const size4 = new UI.Geometry.Size(7, 8);\n    const constraints1 = new UI.Geometry.Constraints(size1, size2);\n    const constraints2 = new UI.Geometry.Constraints(size3, size4);\n    const constraints3 = new UI.Geometry.Constraints(size1, size2);\n    assert.isFalse(constraints1.isEqual(constraints2), 'constraints2 was considered equal');\n    assert.isTrue(constraints1.isEqual(constraints3), 'constraints3 was not considered equal');\n  });\n\n  it('is able to change widths to the max value given a constraint', () => {\n    const size1 = new UI.Geometry.Size(1, 2);\n    const size2 = new UI.Geometry.Size(3, 4);\n    const size3 = new UI.Geometry.Size(5, 6);\n    const size4 = new UI.Geometry.Size(7, 8);\n    const constraints1 = new UI.Geometry.Constraints(size1, size2);\n    const constraints2 = new UI.Geometry.Constraints(size3, size4);\n    const resultSize = constraints1.widthToMax(constraints2);\n    assert.strictEqual(resultSize.minimum.width, 5, 'width value was not scaled correctly');\n    assert.strictEqual(resultSize.minimum.height, 2, 'height value was not scaled correctly');\n    assert.strictEqual(resultSize.preferred.width, 7, 'width value was not scaled correctly');\n    assert.strictEqual(resultSize.preferred.height, 4, 'height value was not scaled correctly');\n  });\n\n  it('is able to change widths to the max value given a number', () => {\n    const size1 = new UI.Geometry.Size(1, 2);\n    const size2 = new UI.Geometry.Size(3, 4);\n    const constraints = new UI.Geometry.Constraints(size1, size2);\n    const resultSize = constraints.widthToMax(5);\n    assert.strictEqual(resultSize.minimum.width, 5, 'width value was not scaled correctly');\n    assert.strictEqual(resultSize.minimum.height, 2, 'height value was not scaled correctly');\n    assert.strictEqual(resultSize.preferred.width, 5, 'width value was not scaled correctly');\n    assert.strictEqual(resultSize.preferred.height, 4, 'height value was not scaled correctly');\n  });\n\n  it('is able to increase widths by a certain value given a constraint', () => {\n    const size1 = new UI.Geometry.Size(1, 2);\n    const size2 = new UI.Geometry.Size(3, 4);\n    const size3 = new UI.Geometry.Size(5, 6);\n    const size4 = new UI.Geometry.Size(7, 8);\n    const constraints1 = new UI.Geometry.Constraints(size1, size2);\n    const constraints2 = new UI.Geometry.Constraints(size3, size4);\n    const resultSize = constraints1.addWidth(constraints2);\n    assert.strictEqual(resultSize.minimum.width, 6, 'width value was not scaled correctly');\n    assert.strictEqual(resultSize.minimum.height, 2, 'height value was not scaled correctly');\n    assert.strictEqual(resultSize.preferred.width, 10, 'width value was not scaled correctly');\n    assert.strictEqual(resultSize.preferred.height, 4, 'height value was not scaled correctly');\n  });\n\n  it('is able to increase widths by a certain value given a number', () => {\n    const size1 = new UI.Geometry.Size(1, 2);\n    const size2 = new UI.Geometry.Size(3, 4);\n    const constraints = new UI.Geometry.Constraints(size1, size2);\n    const resultSize = constraints.addWidth(5);\n    assert.strictEqual(resultSize.minimum.width, 6, 'width value was not scaled correctly');\n    assert.strictEqual(resultSize.minimum.height, 2, 'height value was not scaled correctly');\n    assert.strictEqual(resultSize.preferred.width, 8, 'width value was not scaled correctly');\n    assert.strictEqual(resultSize.preferred.height, 4, 'height value was not scaled correctly');\n  });\n\n  it('is able to change heights to the max value given a constraint', () => {\n    const size1 = new UI.Geometry.Size(1, 2);\n    const size2 = new UI.Geometry.Size(3, 4);\n    const size3 = new UI.Geometry.Size(5, 6);\n    const size4 = new UI.Geometry.Size(7, 8);\n    const constraints1 = new UI.Geometry.Constraints(size1, size2);\n    const constraints2 = new UI.Geometry.Constraints(size3, size4);\n    const resultSize = constraints1.heightToMax(constraints2);\n    assert.strictEqual(resultSize.minimum.width, 1, 'width value was not scaled correctly');\n    assert.strictEqual(resultSize.minimum.height, 6, 'height value was not scaled correctly');\n    assert.strictEqual(resultSize.preferred.width, 3, 'width value was not scaled correctly');\n    assert.strictEqual(resultSize.preferred.height, 8, 'height value was not scaled correctly');\n  });\n\n  it('is able to change heights to the max value given a number', () => {\n    const size1 = new UI.Geometry.Size(1, 2);\n    const size2 = new UI.Geometry.Size(3, 4);\n    const constraints = new UI.Geometry.Constraints(size1, size2);\n    const resultSize = constraints.heightToMax(5);\n    assert.strictEqual(resultSize.minimum.width, 1, 'width value was not scaled correctly');\n    assert.strictEqual(resultSize.minimum.height, 5, 'height value was not scaled correctly');\n    assert.strictEqual(resultSize.preferred.width, 3, 'width value was not scaled correctly');\n    assert.strictEqual(resultSize.preferred.height, 5, 'height value was not scaled correctly');\n  });\n\n  it('is able to increase heights by a certain value given a constraint', () => {\n    const size1 = new UI.Geometry.Size(1, 2);\n    const size2 = new UI.Geometry.Size(3, 4);\n    const size3 = new UI.Geometry.Size(5, 6);\n    const size4 = new UI.Geometry.Size(7, 8);\n    const constraints1 = new UI.Geometry.Constraints(size1, size2);\n    const constraints2 = new UI.Geometry.Constraints(size3, size4);\n    const resultSize = constraints1.addHeight(constraints2);\n    assert.strictEqual(resultSize.minimum.width, 1, 'width value was not scaled correctly');\n    assert.strictEqual(resultSize.minimum.height, 8, 'height value was not scaled correctly');\n    assert.strictEqual(resultSize.preferred.width, 3, 'width value was not scaled correctly');\n    assert.strictEqual(resultSize.preferred.height, 12, 'height value was not scaled correctly');\n  });\n\n  it('is able to increase heights by a certain value given a number', () => {\n    const size1 = new UI.Geometry.Size(1, 2);\n    const size2 = new UI.Geometry.Size(3, 4);\n    const constraints = new UI.Geometry.Constraints(size1, size2);\n    const resultSize = constraints.addHeight(5);\n    assert.strictEqual(resultSize.minimum.width, 1, 'width value was not scaled correctly');\n    assert.strictEqual(resultSize.minimum.height, 7, 'height value was not scaled correctly');\n    assert.strictEqual(resultSize.preferred.width, 3, 'width value was not scaled correctly');\n    assert.strictEqual(resultSize.preferred.height, 9, 'height value was not scaled correctly');\n  });\n});\n\ndescribe('scalarProduct', () => {\n  it('returns the scalar product for two vectors', () => {\n    const vector1 = new UI.Geometry.Vector(1, 2, 3);\n    const vector2 = new UI.Geometry.Vector(4, 5, 6);\n    const result = UI.Geometry.scalarProduct(vector1, vector2);\n    assert.strictEqual(result, 32, 'the scalar product was not calculated correctly');\n  });\n});\n\ndescribe('crossProduct', () => {\n  it('returns the cross product for two vectors', () => {\n    const vector1 = new UI.Geometry.Vector(1, 2, 3);\n    const vector2 = new UI.Geometry.Vector(4, 5, 6);\n    const result = UI.Geometry.crossProduct(vector1, vector2);\n    assert.strictEqual(result.x, -3, 'x value for the resulting vector was not set correctly');\n    assert.strictEqual(result.y, 6, 'y value for the resulting vector was not set correctly');\n    assert.strictEqual(result.z, -3, 'z value for the resulting vector was not set correctly');\n  });\n});\n\ndescribe('subtract', () => {\n  it('returns the difference between two vectors', () => {\n    const vector1 = new UI.Geometry.Vector(1, 2, 3);\n    const vector2 = new UI.Geometry.Vector(4, 5, 6);\n    const result = UI.Geometry.subtract(vector1, vector2);\n    assert.strictEqual(result.x, -3, 'x value for the resulting vector was not set correctly');\n    assert.strictEqual(result.y, -3, 'y value for the resulting vector was not set correctly');\n    assert.strictEqual(result.z, -3, 'z value for the resulting vector was not set correctly');\n  });\n});\n\ndescribe('multiplyVectorByMatrixAndNormalize', () => {\n  it('returns the vector multiplied by a matrix and normalized', () => {\n    const vector = new UI.Geometry.Vector(1, 2, 3);\n    const matrix = new WebKitCSSMatrix();\n    const result = UI.Geometry.multiplyVectorByMatrixAndNormalize(vector, matrix);\n    assert.strictEqual(result.x, 1, 'x value for the resulting vector was not set correctly');\n    assert.strictEqual(result.y, 2, 'y value for the resulting vector was not set correctly');\n    assert.strictEqual(result.z, 3, 'z value for the resulting vector was not set correctly');\n  });\n});\n\ndescribe('calculateAngle', () => {\n  it('returns the angle between two vectors', () => {\n    const vector1 = new UI.Geometry.Vector(1, 2, 3);\n    const vector2 = new UI.Geometry.Vector(4, 5, 6);\n    const result = UI.Geometry.calculateAngle(vector1, vector2);\n    assert.strictEqual(result, 12.933154491899135, 'angle returned was not correct');\n  });\n});\n\ndescribe('boundsForTransformedPoints', () => {\n  it('returns the bounds for transformed points', () => {\n    const matrix = new WebKitCSSMatrix();\n    const result = UI.Geometry.boundsForTransformedPoints(matrix, [1, 2, 3], {minX: 5, maxX: 6, minY: 7, maxY: 8});\n    assert.strictEqual(result.minX, 1, 'minX was calculated incorrectly');\n    assert.strictEqual(result.maxX, 6, 'maxX was calculated incorrectly');\n    assert.strictEqual(result.minY, 2, 'minY was calculated incorrectly');\n    assert.strictEqual(result.maxY, 8, 'maxY was calculated incorrectly');\n  });\n\n  describe('degreesToRadians', () => {\n    it('converts degrees to radians correctly', () => {\n      assert.strictEqual(UI.Geometry.degreesToRadians(45), 0.7853981633974483);\n      assert.strictEqual(UI.Geometry.degreesToRadians(180), 3.141592653589793);\n    });\n  });\n\n  describe('degreesToGradians', () => {\n    it('converts degrees to gradians correctly', () => {\n      assert.strictEqual(UI.Geometry.degreesToGradians(45), 50);\n      assert.strictEqual(UI.Geometry.degreesToGradians(180), 200);\n    });\n  });\n\n  describe('degreesToTurns', () => {\n    it('converts degrees to turns correctly', () => {\n      assert.strictEqual(UI.Geometry.degreesToTurns(45), 0.125);\n      assert.strictEqual(UI.Geometry.degreesToTurns(180), 0.5);\n    });\n  });\n\n  describe('radiansToDegrees', () => {\n    it('converts radians to degrees correctly', () => {\n      assert.strictEqual(UI.Geometry.radiansToDegrees(1), 57.29577951308232);\n      assert.strictEqual(UI.Geometry.radiansToDegrees(1.5), 85.94366926962348);\n    });\n  });\n\n  describe('radiansToGradians', () => {\n    it('converts radians to gradians correctly', () => {\n      assert.strictEqual(UI.Geometry.radiansToGradians(1), 63.66197723675813);\n      assert.strictEqual(UI.Geometry.radiansToGradians(1.5), 95.4929658551372);\n    });\n  });\n\n  describe('radiansToTurns', () => {\n    it('converts radians to turns correctly', () => {\n      assert.strictEqual(UI.Geometry.radiansToTurns(1), 0.15915494309189535);\n      assert.strictEqual(UI.Geometry.radiansToTurns(1.5), 0.238732414637843);\n    });\n  });\n\n  describe('gradiansToRadians', () => {\n    it('converts gradians to radians correctly', () => {\n      assert.strictEqual(UI.Geometry.gradiansToRadians(50), 0.7853981633974483);\n      assert.strictEqual(UI.Geometry.gradiansToRadians(200), 3.141592653589793);\n    });\n  });\n\n  describe('turnsToRadians', () => {\n    it('converts turns to radians correctly', () => {\n      assert.strictEqual(UI.Geometry.gradiansToRadians(0.5), 0.007853981633974483);\n      assert.strictEqual(UI.Geometry.gradiansToRadians(1), 0.015707963267948967);\n    });\n  });\n});\n"]}