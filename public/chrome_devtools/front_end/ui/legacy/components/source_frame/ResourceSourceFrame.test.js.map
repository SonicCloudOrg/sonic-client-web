{"version":3,"file":"ResourceSourceFrame.test.js","sourceRoot":"","sources":["../../../../../../../../front_end/ui/legacy/components/source_frame/ResourceSourceFrame.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,MAAM,MAAM,mCAAmC,CAAC;AAE5D,OAAO,KAAK,SAAS,MAAM,6CAA6C,CAAC;AACzE,OAAO,EAAC,uBAAuB,EAAC,MAAM,2CAA2C,CAAC;AAGlF,OAAO,KAAK,WAAW,MAAM,mBAAmB,CAAC;AAEjD,MAAM,4BAA4B;IACvB,WAAW,CAAkC;IAC7C,YAAY,CAAmC;IAC/C,QAAQ,CAAsD;IAEvE,YACI,UAA2C,EAAE,WAA6C,EAC1F,cAAiD;QACnD,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC,oBAAoB,CAAC,oBAAoB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IAC3F,CAAC;IAED,KAAK,CAAC,uBAAuB;QAC3B,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED,KAAK,CAAC,kBAAkB;QACtB,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;IACjC,CAAC;IAED,UAAU;QACR,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED,WAAW;QACT,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAED,KAAK,CAAC,cAAc;QAClB,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,gBAAgB,EAAE,CAAC;IACpD,CAAC;IAED,QAAQ,CAAC,KAAa;QACpB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;IAED,eAAe,CAAC,MAAc,EAAE,cAAuB,EAAE,QAAiB;QAExE,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;CACF;AAED,uBAAuB,CAAC,qBAAqB,EAAE,GAAG,EAAE;IAClD,EAAE,CAAC,4DAA4D,EAAE,KAAK,IAAI,EAAE;QAC1E,MAAM,eAAe,GAAG,IAAI,4BAA4B,CACpD,yBAA4D,EAAE,MAAM,CAAC,YAAY,CAAC,aAAa,CAAC,KAAK,EACrG,IAAI,SAAS,CAAC,WAAW,CAAC,WAAW,CAAC,EAAE,EAAE,IAAI,EAAE,mBAAmB,CAAC,CAAC,CAAC;QAE1E,MAAM,mBAAmB,GACrB,IAAI,WAAW,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,eAAe,EAAE,mBAAmB,CAAC,CAAC;QAClG,mBAAmB,CAAC,UAAU,EAAE,CAAC;QACjC,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAExC,MAAM,YAAY,GAAG,MAAM,IAAI,OAAO,CAClC,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,mBAAmB,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;QACjF,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC;QAEpD,eAAe,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAEjC,MAAM,YAAY,GAAG,MAAM,IAAI,OAAO,CAClC,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,mBAAmB,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;QACjF,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,KAAK,CAAC,CAAC;QAEvD,mBAAmB,CAAC,MAAM,EAAE,CAAC;IAC/B,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../../core/common/common.js';\nimport type * as Platform from '../../../../core/platform/platform.js';\nimport * as TextUtils from '../../../../models/text_utils/text_utils.js';\nimport {describeWithEnvironment} from '../../../../testing/EnvironmentHelpers.js';\nimport type * as CodeMirror from '../../../../third_party/codemirror.next/codemirror.next.js';\n\nimport * as SourceFrame from './source_frame.js';\n\nclass MockStreamingContentProvider implements TextUtils.ContentProvider.StreamingContentProvider {\n  readonly #contentURL: Platform.DevToolsPath.UrlString;\n  readonly #contentType: Common.ResourceType.ResourceType;\n  readonly #content: TextUtils.StreamingContentData.StreamingContentData;\n\n  constructor(\n      contentURL: Platform.DevToolsPath.UrlString, contentType: Common.ResourceType.ResourceType,\n      initialContent: TextUtils.ContentData.ContentData) {\n    this.#contentURL = contentURL;\n    this.#contentType = contentType;\n    this.#content = TextUtils.StreamingContentData.StreamingContentData.from(initialContent);\n  }\n\n  async requestStreamingContent(): Promise<TextUtils.StreamingContentData.StreamingContentDataOrError> {\n    return this.#content;\n  }\n\n  async requestContentData(): Promise<TextUtils.ContentData.ContentData> {\n    return this.#content.content();\n  }\n\n  contentURL(): Platform.DevToolsPath.UrlString {\n    return this.#contentURL;\n  }\n\n  contentType(): Common.ResourceType.ResourceType {\n    return this.#contentType;\n  }\n\n  async requestContent(): Promise<TextUtils.ContentProvider.DeferredContent> {\n    return this.#content.content().asDeferedContent();\n  }\n\n  addChunk(chunk: string): void {\n    this.#content.addChunk(chunk);\n  }\n\n  searchInContent(_query: string, _caseSensitive: boolean, _isRegex: boolean):\n      Promise<TextUtils.ContentProvider.SearchMatch[]> {\n    throw new Error('Method not implemented.');\n  }\n}\n\ndescribeWithEnvironment('ResourceSourceFrame', () => {\n  it('updates the editor when a StreamingContentProvider changes', async () => {\n    const contentProvider = new MockStreamingContentProvider(\n        'https://example.com/sse' as Platform.DevToolsPath.UrlString, Common.ResourceType.resourceTypes.Fetch,\n        new TextUtils.ContentData.ContentData('', true, 'text/event-stream'));\n\n    const resourceSourceFrame =\n        new SourceFrame.ResourceSourceFrame.ResourceSourceFrame(contentProvider, 'text/event-stream');\n    resourceSourceFrame.markAsRoot();\n    resourceSourceFrame.show(document.body);\n\n    const initialState = await new Promise<CodeMirror.EditorState>(\n        resolve => sinon.stub(resourceSourceFrame.textEditor, 'state').set(resolve));\n    assert.strictEqual(initialState.doc.toString(), '');\n\n    contentProvider.addChunk('Zm9v');\n\n    const updatedState = await new Promise<CodeMirror.EditorState>(\n        resolve => sinon.stub(resourceSourceFrame.textEditor, 'state').set(resolve));\n    assert.strictEqual(updatedState.doc.toString(), 'foo');\n\n    resourceSourceFrame.detach();\n  });\n});\n"]}