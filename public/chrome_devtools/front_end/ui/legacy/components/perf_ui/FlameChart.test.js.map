{"version":3,"file":"FlameChart.test.js","sourceRoot":"","sources":["../../../../../../../../front_end/ui/legacy/components/perf_ui/FlameChart.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../../../core/common/common.js';\nimport type * as Platform from '../../../../core/platform/platform.js';\nimport * as TraceEngine from '../../../../models/trace/trace.js';\nimport {renderElementIntoDOM} from '../../../../testing/DOMHelpers.js';\nimport {describeWithEnvironment} from '../../../../testing/EnvironmentHelpers.js';\nimport {\n  FakeFlameChartProvider,\n  MockFlameChartDelegate,\n} from '../../../../testing/TraceHelpers.js';\n\nimport * as PerfUI from './perf_ui.js';\n\ndescribeWithEnvironment('FlameChart', () => {\n  it('sorts decorations, putting candy striping before warning triangles', async () => {\n    const decorations: PerfUI.FlameChart.FlameChartDecoration[] = [\n      {type: PerfUI.FlameChart.FlameChartDecorationType.WARNING_TRIANGLE},\n      {type: PerfUI.FlameChart.FlameChartDecorationType.CANDY, startAtTime: TraceEngine.Types.Timing.MicroSeconds(10)},\n    ];\n    PerfUI.FlameChart.sortDecorationsForRenderingOrder(decorations);\n    assert.deepEqual(decorations, [\n      {type: PerfUI.FlameChart.FlameChartDecorationType.CANDY, startAtTime: TraceEngine.Types.Timing.MicroSeconds(10)},\n      {type: PerfUI.FlameChart.FlameChartDecorationType.WARNING_TRIANGLE},\n    ]);\n  });\n\n  let chartInstance: PerfUI.FlameChart.FlameChart|null = null;\n\n  afterEach(() => {\n    if (chartInstance) {\n      chartInstance.detach();\n    }\n  });\n\n  function renderChart(chart: PerfUI.FlameChart.FlameChart): void {\n    const container = document.createElement('div');\n    renderElementIntoDOM(container);\n    chart.markAsRoot();\n    chart.show(container);\n    chart.update();\n  }\n\n  const defaultGroupStyle = {\n    height: 17,\n    padding: 4,\n    collapsible: false,\n    color: 'black',\n    backgroundColor: 'grey',\n    nestingLevel: 0,\n    itemsHeight: 17,\n  };\n\n  class FakeProvider extends FakeFlameChartProvider {\n    override entryColor(_entryIndex: number): string {\n      return 'red';\n    }\n\n    override timelineData(): PerfUI.FlameChart.FlameChartTimelineData|null {\n      return PerfUI.FlameChart.FlameChartTimelineData.create({\n        entryLevels: [1, 1, 1],\n        entryStartTimes: [5, 60, 80],\n        entryTotalTimes: [50, 10, 10],\n        groups: [{\n          name: 'Test Group' as Platform.UIString.LocalizedString,\n          startLevel: 1,\n          style: defaultGroupStyle,\n        }],\n      });\n    }\n  }\n\n  it('notifies the delegate when the window has changed', async () => {\n    const provider = new FakeProvider();\n    const delegate = new MockFlameChartDelegate();\n    const windowChangedSpy = sinon.spy(delegate, 'windowChanged');\n    chartInstance = new PerfUI.FlameChart.FlameChart(provider, delegate);\n    renderChart(chartInstance);\n    chartInstance.windowChanged(0, 5, false);\n    assert.isTrue(windowChangedSpy.calledWith(0, 5, false));\n  });\n\n  it('notifies the delegate when the range selection has changed', async () => {\n    const provider = new FakeProvider();\n    const delegate = new MockFlameChartDelegate();\n    const updateRangeSpy = sinon.spy(delegate, 'updateRangeSelection');\n    chartInstance = new PerfUI.FlameChart.FlameChart(provider, delegate);\n    renderChart(chartInstance);\n    chartInstance.updateRangeSelection(0, 5);\n    assert.isTrue(updateRangeSpy.calledWith(0, 5));\n  });\n\n  describe('setSelectedEntry', () => {\n    class SetSelectedEntryTestProvider extends FakeFlameChartProvider {\n      override entryColor(_entryIndex: number): string {\n        return 'red';\n      }\n\n      override timelineData(): PerfUI.FlameChart.FlameChartTimelineData|null {\n        return PerfUI.FlameChart.FlameChartTimelineData.create({\n          entryLevels: [1, 1, 1, 1],\n          entryStartTimes: [5, 60, 80, 300],\n          entryTotalTimes: [50, 10, 10, 500],\n          groups: [{\n            name: 'Test Group' as Platform.UIString.LocalizedString,\n            startLevel: 1,\n            style: defaultGroupStyle,\n          }],\n        });\n      }\n    }\n\n    it('does not change the time window if the selected entry is already revealed', async () => {\n      const provider = new SetSelectedEntryTestProvider();\n      const delegate = new MockFlameChartDelegate();\n      const windowChangedSpy = sinon.spy(delegate, 'windowChanged');\n      chartInstance = new PerfUI.FlameChart.FlameChart(provider, delegate);\n      // Make the window wide so lots is visible\n      chartInstance.setSize(800, 400);\n      chartInstance.setWindowTimes(0, 100);\n      renderChart(chartInstance);\n      // Pick the first event which is only 50ms long and therefore should be in view already.\n      chartInstance.setSelectedEntry(0);\n      assert.strictEqual(windowChangedSpy.callCount, 0);\n    });\n\n    it('will change the window time to reveal the selected entry when the entry is off the right of the screen',\n       async () => {\n         const provider = new SetSelectedEntryTestProvider();\n         const delegate = new MockFlameChartDelegate();\n         const windowChangedSpy = sinon.spy(delegate, 'windowChanged');\n         chartInstance = new PerfUI.FlameChart.FlameChart(provider, delegate);\n         // Make the width narrow so that not everything fits\n         chartInstance.setSize(100, 400);\n         // Ensure the event we want to select is out of the viewport by selecting the first 100ms.\n         chartInstance.setWindowTimes(0, 100);\n         renderChart(chartInstance);\n         chartInstance.setSelectedEntry(3);\n         assert.isTrue(windowChangedSpy.calledOnceWithExactly(300, 400, true));\n       });\n\n    it('will change the window time to reveal the selected entry when the entry is off the left of the screen',\n       async () => {\n         const provider = new SetSelectedEntryTestProvider();\n         const delegate = new MockFlameChartDelegate();\n         const windowChangedSpy = sinon.spy(delegate, 'windowChanged');\n         chartInstance = new PerfUI.FlameChart.FlameChart(provider, delegate);\n         // Make the width narrow so that not everything fits\n         chartInstance.setSize(100, 400);\n         // Ensure the event we want to select is out of the viewport by selecting the last 200ms\n         chartInstance.setWindowTimes(250, 600);\n         renderChart(chartInstance);\n         chartInstance.setSelectedEntry(0);\n         assert.isTrue(windowChangedSpy.calledOnceWithExactly(5, 355, true));\n       });\n  });\n\n  describe('highlightEntry', () => {\n    it('updates the chart to highlight the entry and dispatches an event', async () => {\n      const provider = new FakeProvider();\n      const delegate = new MockFlameChartDelegate();\n      chartInstance = new PerfUI.FlameChart.FlameChart(provider, delegate);\n      renderChart(chartInstance);\n\n      const highlightedEventListener = sinon.stub();\n      chartInstance.addEventListener(PerfUI.FlameChart.Events.EntryHighlighted, highlightedEventListener);\n\n      // Nothing highlighted, so the highlightElement should be hidden.\n      assert.isTrue(chartInstance.highlightElement.classList.contains('hidden'));\n\n      const entryIndexToHighlight = 2;\n      chartInstance.highlightEntry(entryIndexToHighlight);\n\n      // Ensure that the highlighted div is positioned. We cannot assert exact\n      // pixels due to differences in screen sizes and resolution across\n      // machines, but we can ensure that they have all been set.\n      assert.exists(chartInstance.highlightElement.style.height);\n      assert.exists(chartInstance.highlightElement.style.top);\n      assert.exists(chartInstance.highlightElement.style.left);\n      assert.exists(chartInstance.highlightElement.style.width);\n      // And that it is not hidden.\n      assert.isFalse(chartInstance.highlightElement.classList.contains('hidden'));\n\n      // Ensure that the event listener was called with the right index\n      assert.strictEqual(highlightedEventListener.callCount, 1);\n      const event = highlightedEventListener.args[0][0] as Common.EventTarget.EventTargetEvent<number>;\n      assert.strictEqual(event.data, entryIndexToHighlight);\n    });\n\n    it('does nothing if the entry is already highlighted', async () => {\n      const provider = new FakeProvider();\n      const delegate = new MockFlameChartDelegate();\n      chartInstance = new PerfUI.FlameChart.FlameChart(provider, delegate);\n      renderChart(chartInstance);\n\n      const highlightedEventListener = sinon.stub();\n      chartInstance.addEventListener(PerfUI.FlameChart.Events.EntryHighlighted, highlightedEventListener);\n      chartInstance.highlightEntry(2);\n      chartInstance.highlightEntry(2);\n      // Ensure that there is only one event listener called, despite the\n      // highlightEntry method being called twice, because it was called with\n      // the same ID.\n      assert.strictEqual(highlightedEventListener.callCount, 1);\n    });\n\n    it('does nothing if the DataProvider entryColor() method returns a falsey value', async () => {\n      class EmptyColorProvider extends FakeProvider {\n        override entryColor(): string {\n          return '';\n        }\n      }\n      const provider = new EmptyColorProvider();\n      const delegate = new MockFlameChartDelegate();\n      chartInstance = new PerfUI.FlameChart.FlameChart(provider, delegate);\n      renderChart(chartInstance);\n\n      const highlightedEventListener = sinon.stub();\n      chartInstance.addEventListener(PerfUI.FlameChart.Events.EntryHighlighted, highlightedEventListener);\n      chartInstance.highlightEntry(2);\n      // No calls because entryColor returned a false value.\n      assert.strictEqual(highlightedEventListener.callCount, 0);\n    });\n\n    it('dispatches the highlight event with an ID of -1 when the highlight is hidden', async () => {\n      const provider = new FakeProvider();\n      const delegate = new MockFlameChartDelegate();\n      chartInstance = new PerfUI.FlameChart.FlameChart(provider, delegate);\n      renderChart(chartInstance);\n\n      const highlightedEventListener = sinon.stub();\n      chartInstance.addEventListener(PerfUI.FlameChart.Events.EntryHighlighted, highlightedEventListener);\n      chartInstance.highlightEntry(2);\n      chartInstance.hideHighlight();\n      // Ensure the argument to the last event listener call was -1\n      const event = highlightedEventListener.args[1][0] as Common.EventTarget.EventTargetEvent<number>;\n      assert.strictEqual(event.data, -1);\n    });\n  });\n\n  describe('updateLevelPositions', () => {\n    class UpdateLevelPositionsTestProvider extends FakeFlameChartProvider {\n      override timelineData(): PerfUI.FlameChart.FlameChartTimelineData|null {\n        return PerfUI.FlameChart.FlameChartTimelineData.create({\n          entryLevels: [0, 1, 2],\n          entryStartTimes: [5, 60, 80],\n          entryTotalTimes: [50, 10, 10],\n          groups: [\n            {\n              name: 'Test Group 0' as Platform.UIString.LocalizedString,\n              startLevel: 0,\n              style: defaultGroupStyle,\n            },\n            {\n              name: 'Test Group 1' as Platform.UIString.LocalizedString,\n              startLevel: 1,\n              style: defaultGroupStyle,\n            },\n            {\n              name: 'Test Group 2' as Platform.UIString.LocalizedString,\n              startLevel: 2,\n              style: {...defaultGroupStyle, collapsible: true, nestingLevel: 1},\n            },\n          ],\n        });\n      }\n    }\n\n    it('Calculate the level position correctly', () => {\n      const provider = new UpdateLevelPositionsTestProvider();\n      const delegate = new MockFlameChartDelegate();\n      chartInstance = new PerfUI.FlameChart.FlameChart(provider, delegate);\n      renderChart(chartInstance);\n\n      // For Group 0, it is expanded (not collapsible),\n      // so its offset is 17(RulerHeight + 2)\n      assert.strictEqual(chartInstance.groupIndexToOffsetForTest(0), 17);\n      // For Level 0, it is in Test Group 1, and the group is expanded (not collapsible),\n      // so its offset is 17(Group offset) + 17(group header height) = 34\n      assert.isTrue(chartInstance.levelIsVisible(0));\n      assert.strictEqual(chartInstance.levelToOffset(0), 34);\n      // For Group 1, its offset is\n      // 34(level 0 offset) + 17(level 0 height) + 4(style.padding) = 55\n      assert.strictEqual(chartInstance.groupIndexToOffsetForTest(1), 55);\n      // For Level 1, it is in Group 1, and the group is expanded by default,\n      // so its offset is 55(Group offset) + 17(group header height) = 72\n      assert.isTrue(chartInstance.levelIsVisible(1));\n      assert.strictEqual(chartInstance.levelToOffset(1), 72);\n      // For Group 2, it is nested in Group 1, so its offset is\n      // 72(level 1 offset) + 17(level 1 is visible) + 0(no style.padding because nested) = 89\n      assert.strictEqual(chartInstance.groupIndexToOffsetForTest(2), 89);\n      // For Level 2, it is in Group 2, and the group is not expanded by default (collapsible),\n      // so its offset is 89(Group offset) + 17(group header) = 106\n      assert.isFalse(chartInstance.levelIsVisible(2));\n      assert.strictEqual(chartInstance.levelToOffset(2), 106);\n      // For Group 3 and Level 3, they are \"fake\" group and level, and are used to show then end of the flame chart.\n      // Since Level 2 is invisible (collapsed), so this one has same offset as Level 2.\n      assert.strictEqual(chartInstance.groupIndexToOffsetForTest(3), 106);\n      assert.strictEqual(chartInstance.levelToOffset(3), 106);\n    });\n\n    it('Calculate the level position correctly after hide and unhide a group without nested group', () => {\n      const provider = new UpdateLevelPositionsTestProvider();\n      const delegate = new MockFlameChartDelegate();\n      chartInstance = new PerfUI.FlameChart.FlameChart(provider, delegate);\n      renderChart(chartInstance);\n\n      chartInstance.hideGroup(/* groupIndex= */ 0);\n      // For Group 0, it is hidden, so its offset is 17(RulerHeight + 2)\n      assert.strictEqual(chartInstance.groupIndexToOffsetForTest(0), 17);\n      // For Level 0, it is in Test Group 1, and the group is hidden,\n      // so its offset is same as group offset\n      assert.isFalse(chartInstance.levelIsVisible(0));\n      assert.strictEqual(chartInstance.levelToOffset(0), 17);\n      // For Group 1, its offset is\n      // 17(level 0 offset) + 0(level 0 is hidden) + 4(style.padding) = 21\n      assert.strictEqual(chartInstance.groupIndexToOffsetForTest(1), 21);\n      // For Level 1, it is in Group 1, and the group is expanded by default,\n      // so its offset is 21(Group offset) + 17(group header height) = 38\n      assert.isTrue(chartInstance.levelIsVisible(1));\n      assert.strictEqual(chartInstance.levelToOffset(1), 38);\n      // For Group 2, it is nested in Group 1, so its offset is\n      // 38(level 1 offset) + 17(level 1 is visible) + 0(no style.padding because nested) = 55\n      assert.strictEqual(chartInstance.groupIndexToOffsetForTest(2), 55);\n      // For Level 2, it is in Group 2, and the group is not expanded by default (collapsible),\n      // so its offset is 55(Group offset) + 17(group header) = 72\n      assert.isTrue(chartInstance.levelIsVisible(1));\n      assert.strictEqual(chartInstance.levelToOffset(2), 72);\n      // For Group 3 and Level 3, they are \"fake\" group and level, and are used to show then end of the flame chart.\n      // Since Level 2 is invisible (collapsed), so this one has same offset as Level 2.\n      assert.strictEqual(chartInstance.groupIndexToOffsetForTest(3), 72);\n      assert.strictEqual(chartInstance.levelToOffset(3), 72);\n\n      // Unhide Group 0, so the offset should be same as default (see test \"Calculate the level position correctly\").\n      chartInstance.showGroup(/* groupIndex= */ 0);\n      assert.strictEqual(chartInstance.groupIndexToOffsetForTest(0), 17);\n      assert.isTrue(chartInstance.levelIsVisible(0));\n      assert.strictEqual(chartInstance.levelToOffset(0), 34);\n      assert.strictEqual(chartInstance.groupIndexToOffsetForTest(1), 55);\n      assert.isTrue(chartInstance.levelIsVisible(1));\n      assert.strictEqual(chartInstance.levelToOffset(1), 72);\n      assert.strictEqual(chartInstance.groupIndexToOffsetForTest(2), 89);\n      assert.isFalse(chartInstance.levelIsVisible(2));\n      assert.strictEqual(chartInstance.levelToOffset(2), 106);\n      assert.strictEqual(chartInstance.groupIndexToOffsetForTest(3), 106);\n      assert.strictEqual(chartInstance.levelToOffset(3), 106);\n    });\n\n    describe('hide/unhide nested group', () => {\n      class UpdateLevelPositionsWithNestedGroupTestProvider extends FakeFlameChartProvider {\n        override timelineData(): PerfUI.FlameChart.FlameChartTimelineData|null {\n          return PerfUI.FlameChart.FlameChartTimelineData.create({\n            entryLevels: [0, 1, 2],\n            entryStartTimes: [5, 60, 80],\n            entryTotalTimes: [50, 10, 10],\n            groups: [\n              {\n                name: 'Test Group 0' as Platform.UIString.LocalizedString,\n                startLevel: 0,\n                style: defaultGroupStyle,\n              },\n              {\n                name: 'Test Group 1' as Platform.UIString.LocalizedString,\n                startLevel: 1,\n                style: defaultGroupStyle,\n              },\n              // Make the nested group always expanded for better testing the nested case\n              {\n                name: 'Test Group 2' as Platform.UIString.LocalizedString,\n                startLevel: 2,\n                style: {...defaultGroupStyle, nestingLevel: 1},\n              },\n            ],\n          });\n        }\n      }\n\n      it('Calculate the level position correctly after hide and unhide a group with nested group', () => {\n        const provider = new UpdateLevelPositionsWithNestedGroupTestProvider();\n        const delegate = new MockFlameChartDelegate();\n        chartInstance = new PerfUI.FlameChart.FlameChart(provider, delegate);\n        renderChart(chartInstance);\n\n        chartInstance.hideGroup(/* groupIndex= */ 1);\n        // For Group 0, it is expanded (not collapsible),\n        // so its offset is 17(RulerHeight + 2)\n        assert.strictEqual(chartInstance.groupIndexToOffsetForTest(0), 17);\n        // For Level 0, it is in Test Group 1, and the group is expanded (not collapsible),\n        // so its offset is 17(Group offset) + 17(group header height) = 34\n        assert.isTrue(chartInstance.levelIsVisible(0));\n        assert.strictEqual(chartInstance.levelToOffset(0), 34);\n        // For Group 1, it is hidden, so its offset is\n        // 34(level 0 offset) + 17(level 0 height) = 51\n        assert.strictEqual(chartInstance.groupIndexToOffsetForTest(1), 51);\n        // For Level 1, it is in Group 1, and the group is hidden,\n        // so its offset is 51(Group offset)\n        assert.isFalse(chartInstance.levelIsVisible(1));\n        assert.strictEqual(chartInstance.levelToOffset(1), 51);\n        // For Group 2, it is nested in Group 1, so it is also hidden, so its offset is\n        // 51(level 1 offset) + 0(level 1 is invisible) = 51\n        assert.strictEqual(chartInstance.groupIndexToOffsetForTest(2), 51);\n        // For Level 2, it is in Group 2, and the group is hidden,\n        // so its offset is 51(Group offset)\n        assert.isFalse(chartInstance.levelIsVisible(2));\n        assert.strictEqual(chartInstance.levelToOffset(2), 51);\n        // For Group 3 and Level 3, they are \"fake\" group and level, and are used to show then end of the flame chart.\n        // Since Level 2 is invisible (hidden), so this one has same offset as Level 2.\n        assert.strictEqual(chartInstance.groupIndexToOffsetForTest(3), 51);\n        assert.strictEqual(chartInstance.levelToOffset(3), 51);\n\n        // Unhide Group 1, so the offset should be same as default (see test \"Calculate the level position correctly\").\n        chartInstance.showGroup(/* groupIndex= */ 1);\n        assert.strictEqual(chartInstance.groupIndexToOffsetForTest(0), 17);\n        assert.isTrue(chartInstance.levelIsVisible(0));\n        assert.strictEqual(chartInstance.levelToOffset(0), 34);\n        assert.strictEqual(chartInstance.groupIndexToOffsetForTest(1), 55);\n        assert.isTrue(chartInstance.levelIsVisible(1));\n        assert.strictEqual(chartInstance.levelToOffset(1), 72);\n        assert.strictEqual(chartInstance.groupIndexToOffsetForTest(2), 89);\n        // Slightly different because Group2 is not longer collapsible.\n        // For Level 2, it is in Group 2, and the group is expanded,\n        // so its offset is 89(Group offset) + 17(group header) = 106\n        assert.isTrue(chartInstance.levelIsVisible(2));\n        assert.strictEqual(chartInstance.levelToOffset(2), 106);\n        // For Group 3 and Level 3, they are \"fake\" group and level, and are used to show then end of the flame chart.\n        // Since Level 2 is visible, so its offset is 106(Group offset) + 17(Level 2 height) = 123\n        assert.strictEqual(chartInstance.groupIndexToOffsetForTest(3), 123);\n        assert.strictEqual(chartInstance.levelToOffset(3), 123);\n      });\n\n      it('Calculate the level position correctly after hide and unhide a nested group', () => {\n        const provider = new UpdateLevelPositionsWithNestedGroupTestProvider();\n        const delegate = new MockFlameChartDelegate();\n        chartInstance = new PerfUI.FlameChart.FlameChart(provider, delegate);\n        renderChart(chartInstance);\n\n        chartInstance.hideGroup(/* groupIndex= */ 2);\n        // For Group 0, it is expanded (not collapsible),\n        // so its offset is 17(RulerHeight + 2)\n        assert.strictEqual(chartInstance.groupIndexToOffsetForTest(0), 17);\n        // For Level 0, it is in Test Group 1, and the group is expanded (not collapsible),\n        // so its offset is 17(Group offset) + 17(group header height) = 34\n        assert.isTrue(chartInstance.levelIsVisible(0));\n        assert.strictEqual(chartInstance.levelToOffset(0), 34);\n        // For Group 1, it is hidden, so its offset is\n        // 34(level 0 offset) + 17(level 0 height) + 4(style.padding) = 55\n        assert.strictEqual(chartInstance.groupIndexToOffsetForTest(1), 55);\n        // For Level 1, it is in Group 1, and the group is expanded by default,\n        // so its offset is 55(Group offset) + 17(group header height) = 72\n        assert.isTrue(chartInstance.levelIsVisible(1));\n        assert.strictEqual(chartInstance.levelToOffset(1), 72);\n        // For Group 2, it is nested in Group 1, and it is set to hidden, so its offset is\n        // 72(level 1 offset) + 17(level 1 is visible) = 89\n        assert.strictEqual(chartInstance.groupIndexToOffsetForTest(2), 89);\n        // For Level 2, it is in Group 2, and the group is hidden,\n        // so its offset is 51(Group offset)\n        assert.isFalse(chartInstance.levelIsVisible(2));\n        assert.strictEqual(chartInstance.levelToOffset(2), 89);\n        // For Group 3 and Level 3, they are \"fake\" group and level, and are used to show then end of the flame chart.\n        // Since Level 2 is invisible (hidden), so this one has same offset as Level 2.\n        assert.strictEqual(chartInstance.groupIndexToOffsetForTest(3), 89);\n        assert.strictEqual(chartInstance.levelToOffset(3), 89);\n\n        // Unhide Group 1, so the offset should be same as default (see test \"Calculate the level position correctly\").\n        chartInstance.showGroup(/* groupIndex= */ 2);\n        assert.strictEqual(chartInstance.groupIndexToOffsetForTest(0), 17);\n        assert.isTrue(chartInstance.levelIsVisible(0));\n        assert.strictEqual(chartInstance.levelToOffset(0), 34);\n        assert.strictEqual(chartInstance.groupIndexToOffsetForTest(1), 55);\n        assert.isTrue(chartInstance.levelIsVisible(1));\n        assert.strictEqual(chartInstance.levelToOffset(1), 72);\n        assert.strictEqual(chartInstance.groupIndexToOffsetForTest(2), 89);\n        // Slightly different because Group2 is not longer collapsible.\n        // For Level 2, it is in Group 2, and the group is expanded,\n        // so its offset is 89(Group offset) + 17(group header) = 106\n        assert.isTrue(chartInstance.levelIsVisible(2));\n        assert.strictEqual(chartInstance.levelToOffset(2), 106);\n        // For Group 3 and Level 3, they are \"fake\" group and level, and are used to show then end of the flame chart.\n        // Since Level 2 is visible, so its offset is 106(Group offset) + 17(Level 2 height) = 123\n        assert.strictEqual(chartInstance.groupIndexToOffsetForTest(3), 123);\n        assert.strictEqual(chartInstance.levelToOffset(3), 123);\n      });\n    });\n  });\n\n  describe('Index to/from coordinates coversion', () => {\n    class IndexAndCoordinatesConversionTestProvider extends FakeFlameChartProvider {\n      override entryColor(_entryIndex: number): string {\n        return 'red';\n      }\n\n      override maxStackDepth(): number {\n        return 2;\n      }\n\n      override timelineData(): PerfUI.FlameChart.FlameChartTimelineData|null {\n        return PerfUI.FlameChart.FlameChartTimelineData.create({\n          entryLevels: [0, 0, 1, 1],\n          entryStartTimes: [5, 60, 80, 300],\n          entryTotalTimes: [50, 10, 10, 500],\n          groups: [\n            {\n              name: 'Test Group' as Platform.UIString.LocalizedString,\n              startLevel: 0,\n              style: defaultGroupStyle,\n            },\n            {\n              name: 'Test Group 1' as Platform.UIString.LocalizedString,\n              startLevel: 1,\n              style: defaultGroupStyle,\n            },\n          ],\n        });\n      }\n    }\n\n    describe('entryIndexToCoordinates', () => {\n      it('returns the correct coordinates for a given entry', () => {\n        const provider = new IndexAndCoordinatesConversionTestProvider();\n        const delegate = new MockFlameChartDelegate();\n        chartInstance = new PerfUI.FlameChart.FlameChart(provider, delegate);\n        // Make the width narrow so that not everything fits\n        chartInstance.setSize(100, 400);\n        chartInstance.setWindowTimes(0, 100);\n        renderChart(chartInstance);\n        const timelineData = chartInstance.timelineData();\n        if (!timelineData) {\n          throw new Error('Could not find timeline data');\n        }\n        const entryIndex = 0;\n        const {x: canvasOffsetX, y: canvasOffsetY} = chartInstance.getCanvasOffset();\n        // TODO(crbug.com/1440169): We can get all the expected values from\n        // the chart's data and avoid magic numbers\n        const initialXPosition = chartInstance.computePosition(timelineData.entryStartTimes[entryIndex]);\n        assert.deepEqual(\n            chartInstance.entryIndexToCoordinates(entryIndex),\n            // For index 0, it is in level 0, so vertically there are only the ruler(17) and the\n            // header of Group 0 (17) and beyond it.\n            {x: initialXPosition + canvasOffsetX, y: 34 + canvasOffsetY + chartInstance.getScrollOffset()});\n\n        // Emulate two scrolls to force a change in coordinates.\n        // For index 3, it is in level 1, so vertically there are the ruler(17) and the header of Group 0 (17), the\n        // level 0 (17), the padding of Group 1 (4) and the header of Group 1 (17) beyond it.\n        // When select it, it will scroll the level offset(17 + 17 + 17 + 4 + 17 = 72) and its height(17), which means\n        // |chartInstance.getScrollOffset()| returns 89.\n        chartInstance.setSelectedEntry(3);\n        assert.deepEqual(\n            chartInstance.entryIndexToCoordinates(entryIndex),\n            // For index 0, so we need to minus the scroll offset(68) and |chartInstance.getScrollOffset()|, so it is\n            // 34 - 89 - 89 = -144.\n            {x: initialXPosition + canvasOffsetX, y: -144 + canvasOffsetY + chartInstance.getScrollOffset()});\n        chartInstance.setWindowTimes(250, 600);\n        const finalXPosition = chartInstance.computePosition(timelineData.entryStartTimes[entryIndex]);\n        // For this case, there is no vertical scroll, so it is still -144.\n        assert.deepEqual(\n            chartInstance.entryIndexToCoordinates(entryIndex),\n            {x: finalXPosition + canvasOffsetX, y: -144 + canvasOffsetY + chartInstance.getScrollOffset()});\n      });\n\n      it('returns the correct coordinates after re-order', () => {\n        const provider = new IndexAndCoordinatesConversionTestProvider();\n        const delegate = new MockFlameChartDelegate();\n        chartInstance = new PerfUI.FlameChart.FlameChart(provider, delegate);\n        // Make the width narrow so that not everything fits\n        chartInstance.setSize(100, 400);\n        chartInstance.setWindowTimes(0, 100);\n        renderChart(chartInstance);\n        const timelineData = chartInstance.timelineData();\n        if (!timelineData) {\n          throw new Error('Could not find timeline data');\n        }\n        const entryIndex = 0;\n        const {x: canvasOffsetX, y: canvasOffsetY} = chartInstance.getCanvasOffset();\n        // TODO(crbug.com/1440169): We can get all the expected values from\n        // the chart's data and avoid magic numbers\n        const initialXPosition = chartInstance.computePosition(timelineData.entryStartTimes[entryIndex]);\n        assert.deepEqual(\n            chartInstance.entryIndexToCoordinates(entryIndex),\n            // For index 0, it is in level 0, so vertically there are only the ruler(17) and the\n            // header of Group 0 (17) and beyond it.\n            {x: initialXPosition + canvasOffsetX, y: 34 + canvasOffsetY + chartInstance.getScrollOffset()});\n\n        chartInstance.moveGroupDown(0);\n        assert.deepEqual(\n            chartInstance.entryIndexToCoordinates(entryIndex),\n            // Move Group 0 down. So for index 0, it is in level 1, so vertically there are the ruler(17), the header of\n            // Group 1 (17), level 1(inside Group 1, 17), padding of Group 0(4), and header of Group 0 (17)beyond it.\n            {x: initialXPosition + canvasOffsetX, y: 72 + canvasOffsetY + chartInstance.getScrollOffset()});\n      });\n    });\n\n    describe('coordinatesToEntryIndex', () => {\n      it('returns the correct entry index for given coordinates', () => {\n        const provider = new IndexAndCoordinatesConversionTestProvider();\n        const delegate = new MockFlameChartDelegate();\n        chartInstance = new PerfUI.FlameChart.FlameChart(provider, delegate);\n\n        // Make the width narrow so that not everything fits\n        chartInstance.setSize(100, 400);\n        chartInstance.setWindowTimes(0, 100);\n        renderChart(chartInstance);\n        const timelineData = chartInstance.timelineData();\n        if (!timelineData) {\n          throw new Error('Could not find timeline data');\n        }\n        const startXPosition = chartInstance.computePosition(timelineData.entryStartTimes[0]);\n        const beforeStartXPosition = chartInstance.computePosition(timelineData.entryStartTimes[0] - 1);\n        const endXPosition =\n            chartInstance.computePosition(timelineData.entryStartTimes[0] + timelineData.entryTotalTimes[0]);\n        const afterEndXPosition =\n            chartInstance.computePosition(timelineData.entryStartTimes[0] + timelineData.entryTotalTimes[0] + 1);\n\n        // For index 0, it is in level 0, so vertically there are only the ruler(17) and the\n        // header of Group 0 (17) and beyond it.\n        // And the height of level 0 is 17.\n        // So the index 0 can be mapped from\n        //   x: around startXPosition to endXPosition, the reason is x is related to zoom ratio and has some rounds\n        //      during calculation.\n        //   y: 34(inclusive) to 51(exclusive)\n        assert.strictEqual(chartInstance.coordinatesToEntryIndex(beforeStartXPosition + 1, 34), -1);\n        assert.strictEqual(chartInstance.coordinatesToEntryIndex(startXPosition, 34), 0);\n        assert.strictEqual(chartInstance.coordinatesToEntryIndex(endXPosition, 34), 0);\n        assert.strictEqual(chartInstance.coordinatesToEntryIndex(afterEndXPosition + 3, 34), -1);\n        assert.strictEqual(chartInstance.coordinatesToEntryIndex(startXPosition, 33), -1);\n        assert.strictEqual(chartInstance.coordinatesToEntryIndex(startXPosition, 34), 0);\n        assert.strictEqual(chartInstance.coordinatesToEntryIndex(startXPosition, 50), 0);\n        assert.strictEqual(chartInstance.coordinatesToEntryIndex(startXPosition, 51), -1);\n      });\n\n      it('returns the correct entry index for given coordinates after re-order', () => {\n        const provider = new IndexAndCoordinatesConversionTestProvider();\n        const delegate = new MockFlameChartDelegate();\n        chartInstance = new PerfUI.FlameChart.FlameChart(provider, delegate);\n\n        // Make the width narrow so that not everything fits\n        chartInstance.setSize(100, 400);\n        chartInstance.setWindowTimes(0, 100);\n        renderChart(chartInstance);\n        const timelineData = chartInstance.timelineData();\n        if (!timelineData) {\n          throw new Error('Could not find timeline data');\n        }\n        const startXPosition = chartInstance.computePosition(timelineData.entryStartTimes[0]);\n\n        chartInstance.moveGroupDown(0);\n        // Ro-order group will only affect the vertical offsets, so we just need to test |y|.\n        // Move Group 0 down. So for index 0, it is in level 1, so vertically there are the ruler(17), the header of\n        // Group 1 (17), level 1(inside Group 1, 17), padding of Group 0(4), and header of Group 0 (17)beyond it.\n        // And the height of level 0 is 17.\n        // So the entry 0 can be mapped from\n        //   y: 72(inclusive) to 89(exclusive)\n        assert.strictEqual(chartInstance.coordinatesToEntryIndex(startXPosition, 71), -1);\n        assert.strictEqual(chartInstance.coordinatesToEntryIndex(startXPosition, 72), 0);\n        assert.strictEqual(chartInstance.coordinatesToEntryIndex(startXPosition, 88), 0);\n        assert.strictEqual(chartInstance.coordinatesToEntryIndex(startXPosition, 89), -1);\n      });\n    });\n\n    describe('coordinatesToGroupIndexAndHoverType', () => {\n      it('returns the correct group index for given coordinates', () => {\n        const provider = new IndexAndCoordinatesConversionTestProvider();\n        const delegate = new MockFlameChartDelegate();\n        chartInstance = new PerfUI.FlameChart.FlameChart(provider, delegate);\n\n        // Make the width narrow so that not everything fits\n        chartInstance.setSize(100, 400);\n        chartInstance.setWindowTimes(0, 100);\n        renderChart(chartInstance);\n        const timelineData = chartInstance.timelineData();\n        if (!timelineData) {\n          throw new Error('Could not find timeline data');\n        }\n\n        // For group 0, vertically there are only the ruler(17) beyond it. So it starts from 17.\n        // For group 1, vertically there are only the ruler(17), header of Group 0 (17), level 0(17), padding of\n        // Group 1(4) and header beyond it. So it starts from 55.\n        // So the group 0 can be mapped from\n        //   x: any inside the view\n        //   y: 17(inclusive) to 55(exclusive)\n        assert.deepEqual(\n            chartInstance.coordinatesToGroupIndexAndHoverType(\n                /* HEADER_LEFT_PADDING + EDIT_BUTTON_SIZE */ 22, 16),\n            {groupIndex: -1, hoverType: PerfUI.FlameChart.HoverType.OUTSIDE_TRACKS});\n        assert.deepEqual(\n            chartInstance.coordinatesToGroupIndexAndHoverType(\n                /* HEADER_LEFT_PADDING + EDIT_BUTTON_SIZE */ 22, 17),\n            {groupIndex: 0, hoverType: PerfUI.FlameChart.HoverType.INSIDE_TRACK_HEADER});\n        assert.deepEqual(\n            chartInstance.coordinatesToGroupIndexAndHoverType(\n                /* HEADER_LEFT_PADDING + EDIT_BUTTON_SIZE */ 22, 50),\n            {groupIndex: 0, hoverType: PerfUI.FlameChart.HoverType.INSIDE_TRACK});\n        assert.deepEqual(\n            chartInstance.coordinatesToGroupIndexAndHoverType(\n                /* HEADER_LEFT_PADDING + EDIT_BUTTON_SIZE */ 22, 55),\n            {groupIndex: 1, hoverType: PerfUI.FlameChart.HoverType.INSIDE_TRACK_HEADER});\n      });\n\n      it('returns the correct group index for given coordinates after re-order', () => {\n        const provider = new IndexAndCoordinatesConversionTestProvider();\n        const delegate = new MockFlameChartDelegate();\n        chartInstance = new PerfUI.FlameChart.FlameChart(provider, delegate);\n\n        // Make the width narrow so that not everything fits\n        chartInstance.setSize(100, 400);\n        chartInstance.setWindowTimes(0, 100);\n        renderChart(chartInstance);\n        const timelineData = chartInstance.timelineData();\n        if (!timelineData) {\n          throw new Error('Could not find timeline data');\n        }\n\n        chartInstance.moveGroupDown(0);\n        // Ro-order group will only affect the vertical offsets, so we just need to test |y|.\n        // Move Group 0 down. So for group 0, vertically there are only the ruler(17), header of Group 1 (17),\n        // level 1(17), padding of Group 0(4) and header beyond it. So it starts from 55.\n        // And now the Group 0 is the last group, so the end of the Group 0 is 55 + header of Group 0(17) + level 0(17)\n        // = 89\n        // So the entry 0 can be mapped from\n        //   y: 55(inclusive) to 89(exclusive)\n        // Now Group 1 will be before Group 0. so (y)54 will be mapped to Group 1\n        assert.deepEqual(\n            chartInstance.coordinatesToGroupIndexAndHoverType(\n                /* HEADER_LEFT_PADDING + EDIT_BUTTON_SIZE */ 22, 54),\n            {groupIndex: 1, hoverType: PerfUI.FlameChart.HoverType.INSIDE_TRACK});\n        assert.deepEqual(\n            chartInstance.coordinatesToGroupIndexAndHoverType(\n                /* HEADER_LEFT_PADDING + EDIT_BUTTON_SIZE */ 22, 55),\n            {groupIndex: 0, hoverType: PerfUI.FlameChart.HoverType.INSIDE_TRACK_HEADER});\n        assert.deepEqual(\n            chartInstance.coordinatesToGroupIndexAndHoverType(\n                /* HEADER_LEFT_PADDING + EDIT_BUTTON_SIZE */ 22, 88),\n            {groupIndex: 0, hoverType: PerfUI.FlameChart.HoverType.INSIDE_TRACK});\n        assert.deepEqual(\n            chartInstance.coordinatesToGroupIndexAndHoverType(\n                /* HEADER_LEFT_PADDING + EDIT_BUTTON_SIZE */ 22, 89),\n            {groupIndex: -1, hoverType: PerfUI.FlameChart.HoverType.OUTSIDE_TRACKS});\n      });\n\n      it('returns the correct group index and the icon type for given coordinates', () => {\n        const provider = new IndexAndCoordinatesConversionTestProvider();\n        const delegate = new MockFlameChartDelegate();\n        chartInstance = new PerfUI.FlameChart.FlameChart(provider, delegate);\n\n        // Make the width narrow so that not everything fits\n        chartInstance.setSize(100, 400);\n        chartInstance.setWindowTimes(0, 100);\n        renderChart(chartInstance);\n        const timelineData = chartInstance.timelineData();\n        if (!timelineData) {\n          throw new Error('Could not find timeline data');\n        }\n        const context = (chartInstance.getCanvas().getContext('2d') as CanvasRenderingContext2D);\n        const labelWidth = chartInstance.labelWidthForGroup(context, provider.timelineData()?.groups[0]!);\n\n        // Start of the view (before the edit icon).\n        assert.deepEqual(\n            chartInstance.coordinatesToGroupIndexAndHoverType(0, 17),\n            {groupIndex: 0, hoverType: PerfUI.FlameChart.HoverType.INSIDE_TRACK_HEADER});\n        // End of the title label, For title label checking, the end is included.\n        const endOfTitle = /* HEADER_LEFT_PADDING */ 6 + labelWidth;\n        assert.deepEqual(\n            chartInstance.coordinatesToGroupIndexAndHoverType(endOfTitle, 17),\n            {groupIndex: 0, hoverType: PerfUI.FlameChart.HoverType.INSIDE_TRACK_HEADER});\n        assert.deepEqual(\n            chartInstance.coordinatesToGroupIndexAndHoverType(endOfTitle + 1, 17),\n            {groupIndex: 0, hoverType: PerfUI.FlameChart.HoverType.INSIDE_TRACK});\n\n        chartInstance.setEditModeForTest(true);\n        // Start of the view (before the first icon). Will return the track header.\n        assert.deepEqual(\n            chartInstance.coordinatesToGroupIndexAndHoverType(0, 17),\n            {groupIndex: 0, hoverType: PerfUI.FlameChart.HoverType.INSIDE_TRACK_HEADER});\n        // First icon (Up)\n        assert.deepEqual(\n            chartInstance.coordinatesToGroupIndexAndHoverType(/* HEADER_LEFT_PADDING */ 6, 17),\n            {groupIndex: 0, hoverType: PerfUI.FlameChart.HoverType.TRACK_CONFIG_UP_BUTTON});\n        // Second icon (Down)\n        assert.deepEqual(\n            chartInstance.coordinatesToGroupIndexAndHoverType(\n                /* HEADER_LEFT_PADDING + EDIT_BUTTON_SIZE */ 25, 17),\n            {groupIndex: 0, hoverType: PerfUI.FlameChart.HoverType.TRACK_CONFIG_DOWN_BUTTON});\n        // Third icon (Hide)\n        assert.deepEqual(\n            chartInstance.coordinatesToGroupIndexAndHoverType(\n                /* HEADER_LEFT_PADDING + EDIT_BUTTON_SIZE * 2 + GAP_BETWEEN_EDIT_ICONS */ 44, 17),\n            {groupIndex: 0, hoverType: PerfUI.FlameChart.HoverType.TRACK_CONFIG_HIDE_BUTTON});\n        // This is after the third icon, which is the start of the title label, so should return INSIDE_TRACK_HEADER\n        assert.deepEqual(\n            chartInstance.coordinatesToGroupIndexAndHoverType(\n                /* HEADER_LEFT_PADDING + EDIT_MODE_TOTAL_ICON_WIDTH */ 60, 17),\n            {groupIndex: 0, hoverType: PerfUI.FlameChart.HoverType.INSIDE_TRACK_HEADER});\n      });\n    });\n  });\n\n  describe('buildGroupTree', () => {\n    class BuildGroupTreeTestProvider extends FakeFlameChartProvider {\n      override maxStackDepth(): number {\n        return 6;\n      }\n      override timelineData(): PerfUI.FlameChart.FlameChartTimelineData {\n        return PerfUI.FlameChart.FlameChartTimelineData.create({\n          entryLevels: [],\n          entryStartTimes: [],\n          entryTotalTimes: [],\n          groups: [\n            {\n              name: 'Test Group 0' as Platform.UIString.LocalizedString,\n              startLevel: 0,\n              style: defaultGroupStyle,\n            },\n            {\n              name: 'Test Group 1' as Platform.UIString.LocalizedString,\n              startLevel: 1,\n              style: defaultGroupStyle,\n            },\n            {\n              name: 'Test Group 2' as Platform.UIString.LocalizedString,\n              startLevel: 2,\n              style: {...defaultGroupStyle, collapsible: true, nestingLevel: 1},\n            },\n            {\n              name: 'Test Group 3' as Platform.UIString.LocalizedString,\n              startLevel: 3,\n              style: {...defaultGroupStyle, collapsible: true, nestingLevel: 2},\n            },\n            {\n              name: 'Test Group 4' as Platform.UIString.LocalizedString,\n              startLevel: 4,\n              style: {...defaultGroupStyle, collapsible: true, nestingLevel: 1},\n            },\n            {\n              name: 'Test Group 5' as Platform.UIString.LocalizedString,\n              startLevel: 5,\n              style: {...defaultGroupStyle, collapsible: true, nestingLevel: 0},\n            },\n          ],\n        });\n      }\n    }\n\n    it('builds the group tree correctly', async () => {\n      const provider = new BuildGroupTreeTestProvider();\n      const delegate = new MockFlameChartDelegate();\n      chartInstance = new PerfUI.FlameChart.FlameChart(provider, delegate);\n      const root = chartInstance.buildGroupTree(provider.timelineData().groups);\n\n      // The built tree should be\n      //               Root\n      //        /       |         \\\n      // Group0       Group1         Group5\n      //             /      \\\n      //           Group2   Group4\n      //             |\n      //           Group3\n      const groupNode5 = {\n        index: 5,\n        nestingLevel: 0,\n        startLevel: 5,\n        // This is the last group, so it will use the end level of the data provider, which is\n        // returned by |dataProvider.maxStackDepth()|, and it is 3.\n        endLevel: 6,\n        children: [],\n      };\n      const groupNode4 = {\n        index: 4,\n        nestingLevel: 1,\n        startLevel: 4,\n        // The next group is 'Test Group 5', its start level is 5.\n        endLevel: 5,\n        children: [],\n      };\n      const groupNode3 = {\n        index: 3,\n        nestingLevel: 2,\n        startLevel: 3,\n        // The next group is 'Test Group 4', its start level is 4.\n        endLevel: 4,\n        children: [],\n      };\n      const groupNode2 = {\n        index: 2,\n        nestingLevel: 1,\n        startLevel: 2,\n        // The next group is 'Test Group 3', its start level is 3.\n        endLevel: 3,\n        children: [groupNode3],\n      };\n      const groupNode1 = {\n        index: 1,\n        nestingLevel: 0,\n        startLevel: 1,\n        // The next group is 'Test Group 2', its start level is 2.\n        endLevel: 2,\n        children: [groupNode2, groupNode4],\n      };\n      const groupNode0 = {\n        index: 0,\n        nestingLevel: 0,\n        startLevel: 0,\n        // The next group is 'Test Group 1', its start level is 1.\n        endLevel: 1,\n        children: [],\n      };\n      const expectedGroupNodeRoot = {\n        index: -1,\n        nestingLevel: -1,\n        startLevel: 0,\n        // The next group is 'Test Group 0', its start level is 0.\n        endLevel: 0,\n        children: [groupNode0, groupNode1, groupNode5],\n      };\n\n      assert.deepEqual(root, expectedGroupNodeRoot);\n    });\n  });\n\n  describe('updateGroupTree', () => {\n    class UpdateGroupTreeTestProvider extends FakeFlameChartProvider {\n      override maxStackDepth(): number {\n        return 6;\n      }\n      override timelineData(): PerfUI.FlameChart.FlameChartTimelineData {\n        return PerfUI.FlameChart.FlameChartTimelineData.create({\n          entryLevels: [],\n          entryStartTimes: [],\n          entryTotalTimes: [],\n          groups: [\n            {\n              name: 'Test Group 0' as Platform.UIString.LocalizedString,\n              startLevel: 0,\n              style: defaultGroupStyle,\n            },\n            {\n              name: 'Test Group 1' as Platform.UIString.LocalizedString,\n              startLevel: 1,\n              style: defaultGroupStyle,\n            },\n            {\n              name: 'Test Group 2' as Platform.UIString.LocalizedString,\n              startLevel: 2,\n              style: {...defaultGroupStyle, collapsible: true, nestingLevel: 1},\n            },\n          ],\n        });\n      }\n    }\n\n    it('builds the group tree correctly', async () => {\n      const provider = new UpdateGroupTreeTestProvider();\n      const delegate = new MockFlameChartDelegate();\n      chartInstance = new PerfUI.FlameChart.FlameChart(provider, delegate);\n      const root = chartInstance.buildGroupTree(provider.timelineData().groups);\n\n      // The built tree should be\n      //        Root\n      //      /      \\\n      // Group0      Group1\n      //                |\n      //             Group2\n      const groupNode2 = {\n        index: 2,\n        nestingLevel: 1,\n        startLevel: 2,\n        // The next group is 'Test Group 3', its start level is 3.\n        endLevel: 6,\n        children: [],\n      };\n      const groupNode1 = {\n        index: 1,\n        nestingLevel: 0,\n        startLevel: 1,\n        // The next group is 'Test Group 2', its start level is 2.\n        endLevel: 2,\n        children: [groupNode2],\n      };\n      const groupNode0 = {\n        index: 0,\n        nestingLevel: 0,\n        startLevel: 0,\n        // The next group is 'Test Group 1', its start level is 1.\n        endLevel: 1,\n        children: [],\n      };\n      const expectedGroupNodeRoot = {\n        index: -1,\n        nestingLevel: -1,\n        startLevel: 0,\n        // The next group is 'Test Group 0', its start level is 0.\n        endLevel: 0,\n        children: [groupNode0, groupNode1],\n      };\n\n      assert.deepEqual(root, expectedGroupNodeRoot);\n\n      const newGroups = [\n        {\n          name: 'Test Group 0' as Platform.UIString.LocalizedString,\n          startLevel: 0,\n          style: defaultGroupStyle,\n        },\n        {\n          name: 'Test Group 1' as Platform.UIString.LocalizedString,\n          startLevel: 2,\n          style: defaultGroupStyle,\n        },\n        {\n          name: 'Test Group 2' as Platform.UIString.LocalizedString,\n          startLevel: 3,\n          style: {...defaultGroupStyle, collapsible: true, nestingLevel: 1},\n        },\n      ];\n\n      chartInstance.updateGroupTree(newGroups, root);\n      groupNode0.endLevel = 2;\n      groupNode1.startLevel = 2;\n      groupNode1.endLevel = 3;\n      groupNode2.startLevel = 3;\n      assert.deepEqual(root, expectedGroupNodeRoot);\n    });\n  });\n});\n"]}