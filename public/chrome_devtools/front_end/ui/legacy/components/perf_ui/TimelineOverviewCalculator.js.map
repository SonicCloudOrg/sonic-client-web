{"version":3,"file":"TimelineOverviewCalculator.js","sourceRoot":"","sources":["../../../../../../../../front_end/ui/legacy/components/perf_ui/TimelineOverviewCalculator.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAC7B,OAAO,KAAK,IAAI,MAAM,+BAA+B,CAAC;AACtD,OAAO,KAAK,WAAW,MAAM,mCAAmC,CAAC;AAIjE,MAAM,OAAO,0BAA0B;IACrC,gBAAgB,GAA0C,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;IACnG,gBAAgB,GAA0C,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;IAE7F,WAAW,CAAU;IACrB,aAAa,CAAsE;IAE3F,eAAe,CAAC,IAA2C;QACzD,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,IAAI,CAAC,YAAY,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;IACjF,CAAC;IAED,cAAc,CAAC,QAAgB;QAC7B,OAAO,QAAQ,GAAG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,EAAE,GAAG,IAAI,CAAC,gBAAgB,CAAC;IACnF,CAAC;IAED,SAAS,CACL,eAAsD,EACtD,eAAsD;QACxD,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;QACxC,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;IAC1C,CAAC;IAED,gBAAgB,CAAC,aAAiF;QAChG,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;IACrC,CAAC;IAED,eAAe,CAAC,WAAmB;QACjC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACjC,CAAC;IAED,KAAK;QACH,IAAI,CAAC,SAAS,CACV,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,EACxC,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,CAC7C,CAAC;IACJ,CAAC;IAED,WAAW,CAAC,KAAa,EAAE,SAAkB;QAC3C,+DAA+D;QAC/D,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;YACvB,sEAAsE;YACtE,iCAAiC;YACjC,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;gBACxD,MAAM,qBAAqB,GAAG,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,0BAA0B,CAC/E,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,EAAE,CAC3B,CAAC;gBAEF,IAAI,KAAK,GAAG,qBAAqB,EAAE,CAAC;oBAClC,KAAK,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;oBACnD,MAAM;gBACR,CAAC;YACH,CAAC;QACH,CAAC;QAED,OAAO,IAAI,CAAC,aAAa,CAAC,qBAAqB,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,EAAE,SAAS,CAAC,CAAC;IACtF,CAAC;IAED,eAAe;QACb,OAAO,IAAI,CAAC,gBAAgB,CAAC;IAC/B,CAAC;IAED,eAAe;QACb,OAAO,IAAI,CAAC,gBAAgB,CAAC;IAC/B,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,CAAC,gBAAgB,CAAC;IAC/B,CAAC;IAED,YAAY;QACV,OAAO,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAC9F,CAAC;CACF","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as i18n from '../../../../core/i18n/i18n.js';\nimport * as TraceEngine from '../../../../models/trace/trace.js';\n\nimport {type Calculator} from './TimelineGrid.js';\n\nexport class TimelineOverviewCalculator implements Calculator {\n  #minimumBoundary: TraceEngine.Types.Timing.MilliSeconds = TraceEngine.Types.Timing.MilliSeconds(0);\n  #maximumBoundary: TraceEngine.Types.Timing.MilliSeconds = TraceEngine.Types.Timing.MilliSeconds(100);\n\n  private workingArea!: number;\n  private navStartTimes?: readonly TraceEngine.Types.TraceEvents.TraceEventNavigationStart[];\n\n  computePosition(time: TraceEngine.Types.Timing.MilliSeconds): number {\n    return (time - this.#minimumBoundary) / this.boundarySpan() * this.workingArea;\n  }\n\n  positionToTime(position: number): number {\n    return position / this.workingArea * this.boundarySpan() + this.#minimumBoundary;\n  }\n\n  setBounds(\n      minimumBoundary: TraceEngine.Types.Timing.MilliSeconds,\n      maximumBoundary: TraceEngine.Types.Timing.MilliSeconds): void {\n    this.#minimumBoundary = minimumBoundary;\n    this.#maximumBoundary = maximumBoundary;\n  }\n\n  setNavStartTimes(navStartTimes: readonly TraceEngine.Types.TraceEvents.TraceEventNavigationStart[]): void {\n    this.navStartTimes = navStartTimes;\n  }\n\n  setDisplayWidth(clientWidth: number): void {\n    this.workingArea = clientWidth;\n  }\n\n  reset(): void {\n    this.setBounds(\n        TraceEngine.Types.Timing.MilliSeconds(0),\n        TraceEngine.Types.Timing.MilliSeconds(100),\n    );\n  }\n\n  formatValue(value: number, precision?: number): string {\n    // If there are nav start times the value needs to be remapped.\n    if (this.navStartTimes) {\n      // Find the latest possible nav start time which is considered earlier\n      // than the value passed through.\n      for (let i = this.navStartTimes.length - 1; i >= 0; i--) {\n        const startTimeMilliseconds = TraceEngine.Helpers.Timing.microSecondsToMilliseconds(\n            this.navStartTimes[i].ts,\n        );\n\n        if (value > startTimeMilliseconds) {\n          value -= (startTimeMilliseconds - this.zeroTime());\n          break;\n        }\n      }\n    }\n\n    return i18n.TimeUtilities.preciseMillisToString(value - this.zeroTime(), precision);\n  }\n\n  maximumBoundary(): TraceEngine.Types.Timing.MilliSeconds {\n    return this.#maximumBoundary;\n  }\n\n  minimumBoundary(): TraceEngine.Types.Timing.MilliSeconds {\n    return this.#minimumBoundary;\n  }\n\n  zeroTime(): TraceEngine.Types.Timing.MilliSeconds {\n    return this.#minimumBoundary;\n  }\n\n  boundarySpan(): TraceEngine.Types.Timing.MilliSeconds {\n    return TraceEngine.Types.Timing.MilliSeconds(this.#maximumBoundary - this.#minimumBoundary);\n  }\n}\n"]}