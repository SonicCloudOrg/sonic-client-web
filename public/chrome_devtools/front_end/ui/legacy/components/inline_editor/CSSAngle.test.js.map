{"version":3,"file":"CSSAngle.test.js","sourceRoot":"","sources":["../../../../../../../../front_end/ui/legacy/components/inline_editor/CSSAngle.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {renderElementIntoDOM} from '../../../../testing/DOMHelpers.js';\n\nimport * as InlineEditor from './inline_editor.js';\n\nconst assertPopoverOpen = (root: ShadowRoot) => {\n  const popover = root.querySelector('.popover');\n  assert.exists(popover);\n};\n\nconst assertPopoverClosed = (root: ShadowRoot) => {\n  const popover = root.querySelector('.popover');\n  assert.notExists(popover);\n};\n\nconst assertAndGetSwatch = (root: ShadowRoot) => {\n  const swatch = root.querySelector<HTMLElement>('devtools-css-angle-swatch');\n  if (!swatch) {\n    assert.fail('swatch was not rendered');\n    return;\n  }\n  return swatch;\n};\n\nconst togglePopover = (root: ShadowRoot) => {\n  const swatch = assertAndGetSwatch(root);\n  swatch?.click();\n};\n\nconst assertNewAngleFromEvent =\n    (angle: InlineEditor.CSSAngleUtils.Angle, event: KeyboardEvent|MouseEvent, approximateNewValue: number) => {\n      const newAngle = InlineEditor.CSSAngleUtils.getNewAngleFromEvent(angle, event);\n      if (!newAngle) {\n        assert.fail('should create a new angle');\n        return;\n      }\n\n      assert.strictEqual(newAngle.unit, angle.unit);\n      assert.approximately(newAngle.value, approximateNewValue, 0.1);\n    };\n\nconst initialData: InlineEditor.CSSAngle.CSSAngleData = {\n  angleText: '45deg',\n  containingPane: document.createElement('div'),\n};\n\ndescribe('CSSAngle', () => {\n  it('can open and close a popover', () => {\n    const component = new InlineEditor.CSSAngle.CSSAngle();\n    renderElementIntoDOM(component);\n    component.data = initialData;\n\n    assert.isNotNull(component.shadowRoot);\n\n    assertPopoverClosed(component.shadowRoot);\n    togglePopover(component.shadowRoot);\n    assertPopoverOpen(component.shadowRoot);\n    togglePopover(component.shadowRoot);\n    assertPopoverClosed(component.shadowRoot);\n  });\n\n  it('can fire events when toggling the popover', () => {\n    const component = new InlineEditor.CSSAngle.CSSAngle();\n    renderElementIntoDOM(component);\n    let isPopoverOpen = false;\n    component.data = initialData;\n\n    component.addEventListener('popovertoggled', (event: Event) => {\n      const popoverToggledEvent = event as InlineEditor.CSSAngle.PopoverToggledEvent;\n      isPopoverOpen = popoverToggledEvent.data.open;\n    });\n\n    assert.isNotNull(component.shadowRoot);\n\n    assertPopoverClosed(component.shadowRoot);\n    togglePopover(component.shadowRoot);\n    assertPopoverOpen(component.shadowRoot);\n    assert.isTrue(isPopoverOpen, 'external isPopoverOpen flag not synced');\n    togglePopover(component.shadowRoot);\n    assertPopoverClosed(component.shadowRoot);\n    assert.isFalse(isPopoverOpen, 'external isPopoverOpen flag not synced');\n  });\n\n  it('can change unit when the swatch is shift-clicked upon', () => {\n    const component = new InlineEditor.CSSAngle.CSSAngle();\n    renderElementIntoDOM(component);\n    component.data = initialData;\n\n    assert.isNotNull(component.shadowRoot);\n\n    let cssAngleText = initialData.angleText;\n    component.addEventListener('unitchanged', (event: Event) => {\n      const {data} = event as InlineEditor.CSSAngle.UnitChangedEvent;\n      cssAngleText = data.value;\n    });\n\n    const swatch = assertAndGetSwatch(component.shadowRoot);\n    if (!swatch) {\n      return;\n    }\n    const shiftClick = new MouseEvent('click', {shiftKey: true});\n    swatch.dispatchEvent(shiftClick);\n    assert.strictEqual(cssAngleText, '50grad', 'angle unit should change to Grad from Deg');\n  });\n\n  it('can +/- angle values when pressing UP or DOWN keys', () => {\n    const component = new InlineEditor.CSSAngle.CSSAngle();\n    renderElementIntoDOM(component);\n    component.data = initialData;\n\n    assert.isNotNull(component.shadowRoot);\n\n    let cssAngleText = initialData.angleText;\n    component.addEventListener('valuechanged', (event: Event) => {\n      const {data} = event as InlineEditor.InlineEditorUtils.ValueChangedEvent;\n      cssAngleText = data.value;\n    });\n\n    togglePopover(component.shadowRoot);\n    const angleContainer = component.shadowRoot.querySelector('.css-angle');\n    if (!angleContainer) {\n      assert.fail('angle container was not rendered');\n      return;\n    }\n\n    const arrowUp = new KeyboardEvent('keydown', {key: 'ArrowUp'});\n    angleContainer.dispatchEvent(arrowUp);\n    assert.strictEqual(cssAngleText, '46deg', 'angle value should increase by 1 when ArrowUp is pressed');\n\n    const arrowDownShift = new KeyboardEvent('keydown', {key: 'ArrowDown', shiftKey: true});\n    angleContainer.dispatchEvent(arrowDownShift);\n    assert.strictEqual(cssAngleText, '36deg', 'angle value should increase by 1 when ArrowUp is pressed');\n  });\n\n  describe('#CSSAngleUtils', () => {\n    it('can fire InlineEditor.CSSAngle.PopoverToggledEvent when toggling the popover', () => {\n      const component = new InlineEditor.CSSAngle.CSSAngle();\n      renderElementIntoDOM(component);\n      let shouldPopoverEventBeOpen = false;\n      component.data = initialData;\n      component.addEventListener('popovertoggled', (event: Event) => {\n        const popoverEvent = event as InlineEditor.CSSAngle.PopoverToggledEvent;\n        assert.strictEqual(popoverEvent.data.open, shouldPopoverEventBeOpen);\n      });\n\n      assert.isNotNull(component.shadowRoot);\n\n      assertPopoverClosed(component.shadowRoot);\n      shouldPopoverEventBeOpen = true;\n      togglePopover(component.shadowRoot);\n      shouldPopoverEventBeOpen = false;\n      togglePopover(component.shadowRoot);\n    });\n\n    it('parses CSS properties with angles correctly', () => {\n      assert.deepEqual(\n          InlineEditor.CSSAngleUtils.parseText('rotate(45deg)'),\n          {value: 45, unit: InlineEditor.CSSAngleUtils.AngleUnit.Deg});\n      assert.deepEqual(\n          InlineEditor.CSSAngleUtils.parseText('rotate(calc(45deg))'),\n          {value: 45, unit: InlineEditor.CSSAngleUtils.AngleUnit.Deg});\n      assert.deepEqual(\n          InlineEditor.CSSAngleUtils.parseText('skew(20deg)'),\n          {value: 20, unit: InlineEditor.CSSAngleUtils.AngleUnit.Deg});\n      assert.deepEqual(\n          InlineEditor.CSSAngleUtils.parseText('rotateX(20deg)'),\n          {value: 20, unit: InlineEditor.CSSAngleUtils.AngleUnit.Deg});\n      assert.deepEqual(\n          InlineEditor.CSSAngleUtils.parseText('rotateY(20deg)'),\n          {value: 20, unit: InlineEditor.CSSAngleUtils.AngleUnit.Deg});\n      assert.deepEqual(\n          InlineEditor.CSSAngleUtils.parseText('rotateZ(20deg)'),\n          {value: 20, unit: InlineEditor.CSSAngleUtils.AngleUnit.Deg});\n      assert.deepEqual(\n          InlineEditor.CSSAngleUtils.parseText('rotate3d(1, 1, 1, 20deg)'),\n          {value: 20, unit: InlineEditor.CSSAngleUtils.AngleUnit.Deg});\n      assert.deepEqual(\n          InlineEditor.CSSAngleUtils.parseText('linear-gradient(10.5grad, black, white)'),\n          {value: 10.5, unit: InlineEditor.CSSAngleUtils.AngleUnit.Grad});\n      assert.deepEqual(\n          InlineEditor.CSSAngleUtils.parseText(\n              'conic-gradient(black 25%, white 10deg 50%, black 20deg 75%, white 30deg)'),\n          {value: 10, unit: InlineEditor.CSSAngleUtils.AngleUnit.Deg});\n      assert.deepEqual(\n          InlineEditor.CSSAngleUtils.parseText('rotate3d(2, -1, -1, -0.2rad);'),\n          {value: -0.2, unit: InlineEditor.CSSAngleUtils.AngleUnit.Rad});\n      assert.deepEqual(\n          InlineEditor.CSSAngleUtils.parseText('hue-rotate(1.5turn)'),\n          {value: 1.5, unit: InlineEditor.CSSAngleUtils.AngleUnit.Turn});\n      assert.deepEqual(\n          InlineEditor.CSSAngleUtils.parseText('oblique 25deg'),\n          {value: 25, unit: InlineEditor.CSSAngleUtils.AngleUnit.Deg});\n      assert.deepEqual(\n          InlineEditor.CSSAngleUtils.parseText('ray(20.8deg closest-side)'),\n          {value: 20.8, unit: InlineEditor.CSSAngleUtils.AngleUnit.Deg});\n      assert.deepEqual(InlineEditor.CSSAngleUtils.parseText('rotate(12345)'), null);\n      assert.deepEqual(InlineEditor.CSSAngleUtils.parseText(''), null);\n      // TODO(changhaohan): crbug.com/1138628 handle unitless 0 case\n      assert.deepEqual(InlineEditor.CSSAngleUtils.parseText('rotate(0)'), null);\n    });\n\n    it('converts angles in degree to other units correctly', () => {\n      assert.deepEqual(\n          InlineEditor.CSSAngleUtils.getAngleFromRadians(Math.PI / 4, InlineEditor.CSSAngleUtils.AngleUnit.Grad), {\n            value: 50,\n            unit: InlineEditor.CSSAngleUtils.AngleUnit.Grad,\n          });\n      assert.deepEqual(\n          InlineEditor.CSSAngleUtils.getAngleFromRadians(Math.PI / 4, InlineEditor.CSSAngleUtils.AngleUnit.Rad), {\n            value: Math.PI / 4,\n            unit: InlineEditor.CSSAngleUtils.AngleUnit.Rad,\n          });\n      assert.deepEqual(\n          InlineEditor.CSSAngleUtils.getAngleFromRadians(Math.PI / 4, InlineEditor.CSSAngleUtils.AngleUnit.Turn), {\n            value: 0.125,\n            unit: InlineEditor.CSSAngleUtils.AngleUnit.Turn,\n          });\n      assert.deepEqual(\n          InlineEditor.CSSAngleUtils.getAngleFromRadians(Math.PI / 4, InlineEditor.CSSAngleUtils.AngleUnit.Deg), {\n            value: 45,\n            unit: InlineEditor.CSSAngleUtils.AngleUnit.Deg,\n          });\n    });\n\n    it('converts angles in other units to radians correctly', () => {\n      assert.strictEqual(\n          InlineEditor.CSSAngleUtils.getRadiansFromAngle({\n            value: 50,\n            unit: InlineEditor.CSSAngleUtils.AngleUnit.Grad,\n          }),\n          0.7853981633974483);\n      assert.strictEqual(\n          InlineEditor.CSSAngleUtils.getRadiansFromAngle({\n            value: 45,\n            unit: InlineEditor.CSSAngleUtils.AngleUnit.Deg,\n          }),\n          0.7853981633974483);\n      assert.strictEqual(\n          InlineEditor.CSSAngleUtils.getRadiansFromAngle({\n            value: 0.125,\n            unit: InlineEditor.CSSAngleUtils.AngleUnit.Turn,\n          }),\n          0.7853981633974483);\n      assert.strictEqual(\n          InlineEditor.CSSAngleUtils.getRadiansFromAngle({\n            value: 1,\n            unit: InlineEditor.CSSAngleUtils.AngleUnit.Rad,\n          }),\n          1);\n    });\n\n    it('gets 2D translations for angles correctly', () => {\n      assert.deepEqual(\n          InlineEditor.CSSAngleUtils.get2DTranslationsForAngle(\n              {\n                value: 45,\n                unit: InlineEditor.CSSAngleUtils.AngleUnit.Deg,\n              },\n              1),\n          {\n            translateX: 0.7071067811865475,\n            translateY: -0.7071067811865476,\n          });\n    });\n\n    it('rounds angles by units correctly', () => {\n      assert.deepEqual(\n          InlineEditor.CSSAngleUtils.roundAngleByUnit({\n            value: 45.723,\n            unit: InlineEditor.CSSAngleUtils.AngleUnit.Deg,\n          }),\n          {\n            value: 46,\n            unit: InlineEditor.CSSAngleUtils.AngleUnit.Deg,\n          });\n      assert.deepEqual(\n          InlineEditor.CSSAngleUtils.roundAngleByUnit({\n            value: 45.723,\n            unit: InlineEditor.CSSAngleUtils.AngleUnit.Grad,\n          }),\n          {\n            value: 46,\n            unit: InlineEditor.CSSAngleUtils.AngleUnit.Grad,\n          });\n      assert.deepEqual(\n          InlineEditor.CSSAngleUtils.roundAngleByUnit({\n            value: 45.723,\n            unit: InlineEditor.CSSAngleUtils.AngleUnit.Rad,\n          }),\n          {\n            value: 45.723,\n            unit: InlineEditor.CSSAngleUtils.AngleUnit.Rad,\n          });\n      assert.deepEqual(\n          InlineEditor.CSSAngleUtils.roundAngleByUnit({\n            value: 45.723275,\n            unit: InlineEditor.CSSAngleUtils.AngleUnit.Rad,\n          }),\n          {\n            value: 45.7233,\n            unit: InlineEditor.CSSAngleUtils.AngleUnit.Rad,\n          });\n      assert.deepEqual(\n          InlineEditor.CSSAngleUtils.roundAngleByUnit({\n            value: 45.723275,\n            unit: InlineEditor.CSSAngleUtils.AngleUnit.Turn,\n          }),\n          {\n            value: 45.72,\n            unit: InlineEditor.CSSAngleUtils.AngleUnit.Turn,\n          });\n      assert.deepEqual(\n          InlineEditor.CSSAngleUtils.roundAngleByUnit({\n            value: 45.8,\n            unit: InlineEditor.CSSAngleUtils.AngleUnit.Turn,\n          }),\n          {\n            value: 45.8,\n            unit: InlineEditor.CSSAngleUtils.AngleUnit.Turn,\n          });\n    });\n\n    it('cycles angle units correctly', () => {\n      assert.strictEqual(\n          InlineEditor.CSSAngleUtils.getNextUnit(InlineEditor.CSSAngleUtils.AngleUnit.Deg),\n          InlineEditor.CSSAngleUtils.AngleUnit.Grad);\n      assert.strictEqual(\n          InlineEditor.CSSAngleUtils.getNextUnit(InlineEditor.CSSAngleUtils.AngleUnit.Grad),\n          InlineEditor.CSSAngleUtils.AngleUnit.Rad);\n      assert.strictEqual(\n          InlineEditor.CSSAngleUtils.getNextUnit(InlineEditor.CSSAngleUtils.AngleUnit.Rad),\n          InlineEditor.CSSAngleUtils.AngleUnit.Turn);\n      assert.strictEqual(\n          InlineEditor.CSSAngleUtils.getNextUnit(InlineEditor.CSSAngleUtils.AngleUnit.Turn),\n          InlineEditor.CSSAngleUtils.AngleUnit.Deg);\n    });\n\n    it('converts angle units correctly', () => {\n      assert.deepEqual(\n          InlineEditor.CSSAngleUtils.convertAngleUnit(\n              {\n                value: 45,\n                unit: InlineEditor.CSSAngleUtils.AngleUnit.Deg,\n              },\n              InlineEditor.CSSAngleUtils.AngleUnit.Grad),\n          {\n            value: 50,\n            unit: InlineEditor.CSSAngleUtils.AngleUnit.Grad,\n          });\n\n      assert.deepEqual(\n          InlineEditor.CSSAngleUtils.convertAngleUnit(\n              {\n                value: Math.PI / 180,\n                unit: InlineEditor.CSSAngleUtils.AngleUnit.Rad,\n              },\n              InlineEditor.CSSAngleUtils.AngleUnit.Deg),\n          {\n            value: 1,\n            unit: InlineEditor.CSSAngleUtils.AngleUnit.Deg,\n          });\n\n      assert.deepEqual(\n          InlineEditor.CSSAngleUtils.convertAngleUnit(\n              {\n                value: 1,\n                unit: InlineEditor.CSSAngleUtils.AngleUnit.Turn,\n              },\n              InlineEditor.CSSAngleUtils.AngleUnit.Deg),\n          {\n            value: 360,\n            unit: InlineEditor.CSSAngleUtils.AngleUnit.Deg,\n          });\n    });\n\n    it('gets new angles from events correctly', () => {\n      const originalAngle = {\n        value: 45,\n        unit: InlineEditor.CSSAngleUtils.AngleUnit.Deg,\n      };\n\n      const arrowDown = new KeyboardEvent('keydown', {key: 'ArrowDown'});\n      const arrowUpShift = new KeyboardEvent('keydown', {key: 'ArrowUp', shiftKey: true});\n      const wheelUp = new WheelEvent('wheel', {deltaY: 1});\n      const wheelDownShift = new WheelEvent('wheel', {deltaX: -1, shiftKey: true});\n\n      assertNewAngleFromEvent(originalAngle, arrowDown, 44);\n      assertNewAngleFromEvent(originalAngle, arrowUpShift, 55);\n      assertNewAngleFromEvent(originalAngle, wheelUp, 44);\n      assertNewAngleFromEvent(originalAngle, wheelDownShift, 55);\n\n      const otherEvent = new MouseEvent('mousedown');\n      assert.notExists(InlineEditor.CSSAngleUtils.getNewAngleFromEvent(originalAngle, otherEvent));\n    });\n  });\n});\n"]}