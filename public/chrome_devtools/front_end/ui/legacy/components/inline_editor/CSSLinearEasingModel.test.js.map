{"version":3,"file":"CSSLinearEasingModel.test.js","sourceRoot":"","sources":["../../../../../../../../front_end/ui/legacy/components/inline_editor/CSSLinearEasingModel.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,YAAY,MAAM,oBAAoB,CAAC;AAEnD,SAAS,aAAa,CAAC,KAAa,EAAE,MAAc;IAClD,MAAM,KAAK,GAAG,YAAY,CAAC,oBAAoB,CAAC,oBAAoB,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAClF,MAAM,CAAC,WAAW,CAAC,KAAM,CAAC,SAAS,EAAE,EAAE,MAAM,EAAE,gCAAgC,KAAK,GAAG,CAAC,CAAC;AAC3F,CAAC;AAED,SAAS,eAAe,CAAC,KAAa;IACpC,MAAM,KAAK,GAAG,YAAY,CAAC,oBAAoB,CAAC,oBAAoB,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAClF,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AACvB,CAAC;AAED,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;IACpC,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,EAAE,CAAC,mCAAmC,EAAE,GAAG,EAAE;YAC3C,aAAa,CAAC,sBAAsB,EAAE,QAAQ,CAAC,CAAC;YAChD,aAAa,CAAC,8BAA8B,EAAE,oCAAoC,CAAC,CAAC;YACpF,aAAa,CAAC,qCAAqC,EAAE,gDAAgD,CAAC,CAAC;YACvG,aAAa,CACT,gEAAgE,EAChE,sHAAsH,CAAC,CAAC;YAE5H,aAAa,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;YACxC,aAAa,CAAC,8BAA8B,EAAE,oCAAoC,CAAC,CAAC;YACpF,aAAa,CAAC,qCAAqC,EAAE,gDAAgD,CAAC,CAAC;YACvG,aAAa,CACT,yDAAyD,EACzD,+FAA+F,CAAC,CAAC;QACvG,CAAC,CAAC,CAAC;QAEH,mGAAmG;QACnG,gDAAgD;QAChD,EAAE,CAAC,iFAAiF,EAAE,GAAG,EAAE;YACzF,eAAe,CAAC,kCAAkC,CAAC,CAAC;YACpD,eAAe,CAAC,8CAA8C,CAAC,CAAC;YAChE,eAAe,CAAC,uCAAuC,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;QACjD,eAAe,CAAC,UAAU,CAAC,CAAC;QAC5B,eAAe,CAAC,WAAW,CAAC,CAAC;QAC7B,eAAe,CAAC,cAAc,CAAC,CAAC;QAChC,eAAe,CAAC,kBAAkB,CAAC,CAAC;QACpC,eAAe,CAAC,mBAAmB,CAAC,CAAC;QACrC,eAAe,CAAC,mBAAmB,CAAC,CAAC;QACrC,eAAe,CAAC,iDAAiD,CAAC,CAAC;QACnE,eAAe,CAAC,6CAA6C,CAAC,CAAC;IACjE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wDAAwD,EAAE,GAAG,EAAE;QAChE,MAAM,MAAM,GAAG,YAAY,CAAC,oBAAoB,CAAC,oBAAoB,CAAC,KAAK,CAAC,QAAQ,CAAE,CAAC,MAAM,EAAE,CAAC;QAChG,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,EAAC,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAC,EAAE,EAAC,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,EAAC,CAAC,CAAC,CAAC;IAC7E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;QACzD,MAAM,KAAK,GAAG,YAAY,CAAC,oBAAoB,CAAC,oBAAoB,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC;QACnG,MAAM,CAAC,WAAW,CAAC,KAAM,CAAC,SAAS,EAAE,EAAE,QAAQ,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as InlineEditor from './inline_editor.js';\n\nfunction testValidCase(input: string, output: string): void {\n  const model = InlineEditor.CSSLinearEasingModel.CSSLinearEasingModel.parse(input);\n  assert.strictEqual(model!.asCSSText(), output, `Parsing is invalid for case \"${input}\"`);\n}\n\nfunction testInvalidCase(input: string): void {\n  const model = InlineEditor.CSSLinearEasingModel.CSSLinearEasingModel.parse(input);\n  assert.isNull(model);\n}\n\ndescribe('CSSLinearEasingModel', () => {\n  describe('valid WPT cases', () => {\n    it('should parse valid cases from WPT', () => {\n      testValidCase('linear(0 0%, 1 100%)', 'linear');\n      testValidCase('linear(0 0% 50%, 1 50% 100%)', 'linear(0 0%, 0 50%, 1 50%, 1 100%)');\n      testValidCase('linear(0, 0.5 25% 75%, 1 100% 100%)', 'linear(0 0%, 0.5 25%, 0.5 75%, 1 100%, 1 100%)');\n      testValidCase(\n          'linear(0, 1.3, 1, 0.92, 1, 0.99, 1, 1.004, 0.998, 1 100% 100%)',\n          'linear(0 0%, 1.3 11.11%, 1 22.22%, 0.92 33.33%, 1 44.44%, 0.99 55.56%, 1 66.67%, 1 77.78%, 1 88.89%, 1 100%, 1 100%)');\n\n      testValidCase('linear(0, 1)', 'linear');\n      testValidCase('linear(0 0% 50%, 1 50% 100%)', 'linear(0 0%, 0 50%, 1 50%, 1 100%)');\n      testValidCase('linear(0, 0.5 25% 75%, 1 100% 100%)', 'linear(0 0%, 0.5 25%, 0.5 75%, 1 100%, 1 100%)');\n      testValidCase(\n          'linear(0, 1.3, 1, 0.92, 1, 0.99, 1, 0.998, 1 100% 100%)',\n          'linear(0 0%, 1.3 12.5%, 1 25%, 0.92 37.5%, 1 50%, 0.99 62.5%, 1 75%, 1 87.5%, 1 100%, 1 100%)');\n    });\n\n    // Even though these cases should be handled as well, in frontend we bail out when we see something\n    // different than a number inside the arguments.\n    it('should not parse cases that include non-numbers like calc function in arguments', () => {\n      testInvalidCase('linear(0 calc(0%), 0 calc(100%))');\n      testInvalidCase('linear(0 calc(50% - 50%), 0 calc(50% + 50%))');\n      testInvalidCase('linear(0 calc(min(50%, 60%)), 0 100%)');\n    });\n  });\n\n  it('should not parse invalid cases from WPT', () => {\n    testInvalidCase('linear()');\n    testInvalidCase('linear(0)');\n    testInvalidCase('linear(100%)');\n    testInvalidCase('linear(0% 1 50%)');\n    testInvalidCase('linear(0 0% 100%)');\n    testInvalidCase('linear(0% 100% 0)');\n    testInvalidCase('linear(0 calc(50px - 50%), 0 calc(50em + 50em))');\n    testInvalidCase('linear(0 calc(50%, 50%), 0 calc(50% + 50%))');\n  });\n\n  it('should parse \"linear\" as linear(0 0%, 1 100%) function', () => {\n    const points = InlineEditor.CSSLinearEasingModel.CSSLinearEasingModel.parse('linear')!.points();\n    assert.deepEqual(points, [{input: 0, output: 0}, {input: 100, output: 1}]);\n  });\n\n  it('linear(0 0%, 1 100%) is stringified as \"linear\"', () => {\n    const model = InlineEditor.CSSLinearEasingModel.CSSLinearEasingModel.parse('linear(0 0%, 1 100%)');\n    assert.strictEqual(model!.asCSSText(), 'linear');\n  });\n});\n"]}