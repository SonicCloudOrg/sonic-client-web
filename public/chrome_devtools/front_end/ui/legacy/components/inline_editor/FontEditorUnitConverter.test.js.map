{"version":3,"file":"FontEditorUnitConverter.test.js","sourceRoot":"","sources":["../../../../../../../../front_end/ui/legacy/components/inline_editor/FontEditorUnitConverter.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,YAAY,MAAM,oBAAoB,CAAC;AAEnD,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;IACvC,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;QAC7C,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC,uBAAuB,CAAC,2BAA2B,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;QACzG,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,MAAM,EAAE,yDAAyD,CAAC,CAAC;IAChG,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;QAC9C,MAAM,OAAO,GAAG,MAAM,YAAY,CAAC,uBAAuB,CAAC,2BAA2B,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAC3G,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,EAAE,0DAA0D,CAAC,CAAC;IAClG,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;QAC5C,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,uBAAuB,CAAC,2BAA2B,CAAC,IAAI,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;QAC1G,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,EAAE,wDAAwD,CAAC,CAAC;IAC/F,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;QAC7C,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC,uBAAuB,CAAC,2BAA2B,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;QACzG,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,yDAAyD,CAAC,CAAC;IACpG,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;QAC7C,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC,uBAAuB,CAAC,2BAA2B,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;QACzG,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,yDAAyD,CAAC,CAAC;IACpG,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;QAC7C,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC,uBAAuB,CAAC,2BAA2B,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;QACzG,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,EAAE,yDAAyD,CAAC,CAAC;IAChG,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;QAC7C,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC,uBAAuB,CAAC,2BAA2B,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;QACzG,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,yDAAyD,CAAC,CAAC;IAC/F,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;QAC7C,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC,uBAAuB,CAAC,2BAA2B,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;QACzG,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,EAAE,yDAAyD,CAAC,CAAC;IAChG,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as InlineEditor from './inline_editor.js';\n\ndescribe('FontEditorUnitConverter', () => {\n  it('converts px to em as expected', async () => {\n    const pxToEm = await InlineEditor.FontEditorUnitConverter.getUnitConversionMultiplier('px', 'em', false);\n    assert.strictEqual(pxToEm, 0.0625, 'Unexpected multiplier returned for conversion: px to em');\n  });\n\n  it('converts px to rem as expected', async () => {\n    const pxToRem = await InlineEditor.FontEditorUnitConverter.getUnitConversionMultiplier('px', 'rem', false);\n    assert.strictEqual(pxToRem, 0.0625, 'Unexpected multiplier returned for conversion: px to rem');\n  });\n\n  it('converts px to % as expected', async () => {\n    const pxToPerc = await InlineEditor.FontEditorUnitConverter.getUnitConversionMultiplier('px', '%', false);\n    assert.strictEqual(pxToPerc, 6.25, 'Unexpected multiplier returned for conversion: px to %');\n  });\n\n  it('converts px to cm as expected', async () => {\n    const pxToCm = await InlineEditor.FontEditorUnitConverter.getUnitConversionMultiplier('px', 'cm', false);\n    assert.strictEqual(pxToCm, 1 / 37.795, 'Unexpected multiplier returned for conversion: px to cm');\n  });\n\n  it('converts px to mm as expected', async () => {\n    const pxToMm = await InlineEditor.FontEditorUnitConverter.getUnitConversionMultiplier('px', 'mm', false);\n    assert.strictEqual(pxToMm, 1 / 3.7795, 'Unexpected multiplier returned for conversion: px to mm');\n  });\n\n  it('converts px to in as expected', async () => {\n    const pxToIn = await InlineEditor.FontEditorUnitConverter.getUnitConversionMultiplier('px', 'in', false);\n    assert.strictEqual(pxToIn, 1 / 96, 'Unexpected multiplier returned for conversion: px to in');\n  });\n\n  it('converts px to pt as expected', async () => {\n    const pxToPt = await InlineEditor.FontEditorUnitConverter.getUnitConversionMultiplier('px', 'pt', false);\n    assert.strictEqual(pxToPt, 3 / 4, 'Unexpected multiplier returned for conversion: px to pt');\n  });\n\n  it('converts px to pc as expected', async () => {\n    const pxToPc = await InlineEditor.FontEditorUnitConverter.getUnitConversionMultiplier('px', 'pc', false);\n    assert.strictEqual(pxToPc, 1 / 16, 'Unexpected multiplier returned for conversion: px to pc');\n  });\n});\n"]}