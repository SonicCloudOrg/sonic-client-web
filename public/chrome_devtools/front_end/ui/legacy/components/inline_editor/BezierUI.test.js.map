{"version":3,"file":"BezierUI.test.js","sourceRoot":"","sources":["../../../../../../../../front_end/ui/legacy/components/inline_editor/BezierUI.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as UI from '../../legacy.js';\n\nimport * as InlineEditor from './inline_editor.js';\n\ndescribe('BezierUI', () => {\n  it('can be instantiated successfully', () => {\n    const testWidth = 1;\n    const testHeight = 2;\n    const testMarginTop = 3;\n    const testRadius = 4;\n    const testLinearLine = true;\n    const bezierUI = new InlineEditor.BezierUI.BezierUI({\n      width: testWidth,\n      height: testHeight,\n      marginTop: testMarginTop,\n      controlPointRadius: testRadius,\n      shouldDrawLine: testLinearLine,\n    });\n    assert.strictEqual(bezierUI.width, testWidth, 'width was not set or retrieved correctly');\n    assert.strictEqual(bezierUI.height, testHeight, 'height was not set or retrieved correctly');\n    assert.strictEqual(bezierUI.marginTop, testMarginTop, 'margin top was not set or retrieved correctly');\n    assert.strictEqual(bezierUI.radius, testRadius, 'radius was not set or retrieved correctly');\n    assert.strictEqual(bezierUI.shouldDrawLine, testLinearLine, 'linear line value was not set or retrieved correctly');\n  });\n\n  it('can draw velocity chart correctly', () => {\n    const bezier = new UI.Geometry.CubicBezier(new UI.Geometry.Point(1, 1), new UI.Geometry.Point(3, 4));\n    const path = document.createElement('path');\n    InlineEditor.BezierUI.BezierUI.drawVelocityChart(bezier, path, 10);\n    assert.strictEqual(\n        path.outerHTML,\n        '<path d=\"M 0 26 L 0.02 10.58 L 0.81 10.11 L 1.63 9.72 L 2.48 9.40 L 3.36 9.12 L 4.25 8.88 L 5.16 8.68 L 6.08 8.50 L 7.00 8.34 L 7.92 8.20 L 8.84 8.08 L 9.74 7.97 L 10.63 7.88 L 11.49 7.80 L 12.33 7.72 L 13.14 7.66 L 13.91 7.61 L 14.64 7.57 L 15.32 7.54 L 15.96 7.52 L 16.53 7.52 L 17.04 7.54 L 17.49 7.60 L 17.87 7.72 L 18.16 7.94 L 18.38 8.46 L 18.51 10.15 L 18.55 50.73 L 18.49 4.00 L 18.33 5.24 L 18.06 5.68 L 17.68 5.89 L 17.18 6.01 L 16.56 6.08 L 15.82 6.13 L 14.94 6.16 L 13.92 6.18 L 12.76 6.19 L 11.46 6.20 L 10.00 6.20 L 10.00 26 Z\"></path>',\n        'velocity chart was not drawn correctly');\n  });\n\n  it('calculates curve width correctly', () => {\n    const bezierUI = new InlineEditor.BezierUI.BezierUI({\n      width: 10,\n      height: 10,\n      marginTop: 1,\n      controlPointRadius: 3,\n      shouldDrawLine: true,\n    });\n    assert.strictEqual(bezierUI.curveWidth(), 4, 'curve width was not calculated correctly');\n  });\n\n  it('calculates curve height correctly', () => {\n    const bezierUI = new InlineEditor.BezierUI.BezierUI({\n      width: 10,\n      height: 10,\n      marginTop: 1,\n      controlPointRadius: 3,\n      shouldDrawLine: true,\n    });\n    assert.strictEqual(bezierUI.curveHeight(), 2, 'curve height was not calculated correctly');\n  });\n\n  it('draws a curve correctly', () => {\n    const bezierUI = new InlineEditor.BezierUI.BezierUI({\n      width: 10,\n      height: 10,\n      marginTop: 1,\n      controlPointRadius: 3,\n      shouldDrawLine: true,\n    });\n    const bezier = new UI.Geometry.CubicBezier(new UI.Geometry.Point(1, 1), new UI.Geometry.Point(3, 4));\n    const svg = document.createElement('svg');\n    bezierUI.drawCurve(bezier, svg);\n    /*\n    <svg width=\"10\" height=\"10\">\n      <g>\n        <line class=\"linear-line\" x1=\"3\" y1=\"6\" x2=\"7\" y2=\"4\"></line>\n        <path class=\"bezier-path\" d=\"M3,6 C7, 4 15, -2 7, 4\"></path>\n        <line class=\"bezier-control-line\" x1=\"3\" y1=\"6\" x2=\"7\" y2=\"4\"></line>\n        <circle class=\"bezier-control-circle\" cx=\"7\" cy=\"4\" r=\"3\"></circle>\n        <line class=\"bezier-control-line\" x1=\"7\" y1=\"4\" x2=\"15\" y2=\"-2\"></line>\n        <circle class=\"bezier-control-circle\" cx=\"15\" cy=\"-2\" r=\"3\"></circle>\n      </g>\n    </svg>\n    */\n    assert.strictEqual(svg.getAttribute('width'), '10', 'curve SVG\\'s width was not set up correctly');\n    assert.strictEqual(svg.getAttribute('height'), '10', 'curve SVG\\'s height was not set up correctly');\n    const linearLine = svg.querySelector('.linear-line');\n    assert.instanceOf(linearLine, SVGLineElement);\n    assert.exists(linearLine, 'Bezier curve\\'s linear line did not exist');\n    assert.strictEqual(linearLine.getAttribute('x1'), '3', 'Bezier curve\\'s linear line had wrong x1');\n    assert.strictEqual(linearLine.getAttribute('y1'), '6', 'Bezier curve\\'s linear line had wrong y1');\n    assert.strictEqual(linearLine.getAttribute('x2'), '7', 'Bezier curve\\'s linear line had wrong x2');\n    assert.strictEqual(linearLine.getAttribute('y2'), '4', 'Bezier curve\\'s linear line had wrong y2');\n\n    const path = svg.querySelector('.bezier-path');\n    assert.instanceOf(path, SVGPathElement);\n    assert.exists(path, 'Bezier curve\\'s path did not exist');\n    assert.strictEqual(path.getAttribute('d'), 'M3,6 C7, 4 15, -2 7, 4', 'Bezier curve\\'s path had wrong d');\n\n    const [controlLine1, controlLine2] = Array.from(svg.querySelectorAll('.bezier-control-line'));\n    assert.exists(controlLine1, 'Bezier curve\\'s control line 1 did not exist');\n    assert.strictEqual(controlLine1.getAttribute('x1'), '3', 'Bezier curve\\'s control line 1 had wrong x1 value');\n    assert.strictEqual(controlLine1.getAttribute('y1'), '6', 'Bezier curve\\'s control line 1 had wrong y1 value');\n    assert.strictEqual(controlLine1.getAttribute('x2'), '7', 'Bezier curve\\'s control line 1 had wrong x2 value');\n    assert.strictEqual(controlLine1.getAttribute('y2'), '4', 'Bezier curve\\'s control line 1 had wrong y2 value');\n\n    assert.exists(controlLine2, 'Bezier curve\\'s control line 2 did not exist');\n    assert.strictEqual(controlLine2.getAttribute('x1'), '7', 'Bezier curve\\'s control line 2 had wrong x1 value');\n    assert.strictEqual(controlLine2.getAttribute('y1'), '4', 'Bezier curve\\'s control line 2 had wrong y1 value');\n    assert.strictEqual(controlLine2.getAttribute('x2'), '15', 'Bezier curve\\'s control line 2 had wrong x2 value');\n    assert.strictEqual(controlLine2.getAttribute('y2'), '-2', 'Bezier curve\\'s control line 2 had wrong y2 value');\n\n    const [controlCircle1, controlCircle2] = Array.from(svg.querySelectorAll('.bezier-control-circle'));\n    assert.exists(controlCircle1, 'Bezier curve\\'s control circle 1 did not exist');\n    assert.strictEqual(controlCircle1.getAttribute('cx'), '7', 'Bezier curve\\'s control circle 1 had wrong cx value');\n    assert.strictEqual(controlCircle1.getAttribute('cy'), '4', 'Bezier curve\\'s control circle 1 had wrong cy value');\n    assert.strictEqual(controlCircle1.getAttribute('r'), '3', 'Bezier curve\\'s control circle 1 had wrong r value');\n\n    assert.exists(controlCircle2, 'Bezier curve\\'s control circle 2 did not exist');\n    assert.strictEqual(controlCircle2.getAttribute('cx'), '15', 'Bezier curve\\'s control circle 2 had wrong cx value');\n    assert.strictEqual(controlCircle2.getAttribute('cy'), '-2', 'Bezier curve\\'s control circle 2 had wrong cy value');\n    assert.strictEqual(controlCircle2.getAttribute('r'), '3', 'Bezier curve\\'s control circle 2 had wrong r value');\n  });\n});\n"]}