{"version":3,"file":"JSPresentationUtils.test.js","sourceRoot":"","sources":["../../../../../../../../front_end/ui/legacy/components/utils/JSPresentationUtils.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,QAAQ,MAAM,yCAAyC,CAAC;AACpE,OAAO,KAAK,SAAS,MAAM,2CAA2C,CAAC;AACvE,OAAO,EAAC,YAAY,EAAC,MAAM,2CAA2C,CAAC;AACvE,OAAO,EAAC,0BAA0B,EAAC,MAAM,uCAAuC,CAAC;AAEjF,OAAO,KAAK,UAAU,MAAM,YAAY,CAAC;AAEzC,0BAA0B,CAAC,qBAAqB,EAAE,GAAG,EAAE;IACrD,SAAS,gBAAgB;QACvB,MAAM,MAAM,GAAG,YAAY,EAAE,CAAC;QAC9B,MAAM,SAAS,GAAG,IAAI,UAAU,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QACjE,SAAS,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QAC9B,MAAM,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;QAC/D,MAAM,QAAQ,GAAG,IAAI,CAAC;QACtB,MAAM,aAAa,GAAG,MAAM,CAAC,aAAa,EAAE,CAAC;QAC7C,MAAM,eAAe,GAAG,IAAI,QAAQ,CAAC,eAAe,CAAC,eAAe,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC;QAC/F,MAAM,wBAAwB,GAAG,QAAQ,CAAC,wBAAwB,CAAC,wBAAwB,CAAC,QAAQ,CAAC;YACnG,QAAQ;YACR,eAAe;YACf,aAAa;SACd,CAAC,CAAC;QACH,QAAQ,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAC,QAAQ,EAAE,wBAAwB,EAAC,CAAC,CAAC;QAC5F,OAAO,EAAC,MAAM,EAAE,SAAS,EAAC,CAAC;IAC7B,CAAC;IAED,SAAS,oCAAoC,CAAC,GAAW,EAAE,mBAA2B;QACpF,MAAM,EAAC,MAAM,EAAE,SAAS,EAAC,GAAG,gBAAgB,EAAE,CAAC;QAC/C,MAAM,SAAS,GAAG,EAAC,QAAQ,EAAE,UAAU,EAAE,YAAY,EAAE,MAAM,EAAE,GAAG,EAAE,UAAU,EAAE,CAAC,EAAE,YAAY,EAAE,CAAC,EAAC,CAAC;QACpG,MAAM,UAAU,GAAG,EAAC,UAAU,EAAE,CAAC,SAAS,CAAC,EAAC,CAAC;QAC7C,MAAM,OAAO,GAAG,EAAC,QAAQ,EAAE,KAAK,EAAE,UAAU,EAA2C,CAAC;QACxF,MAAM,EAAC,KAAK,EAAC,GAAG,UAAU,CAAC,mBAAmB,CAAC,8BAA8B,CAAC,MAAM,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;QAC1G,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAC1B,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,mBAAmB,CAAC,CAAC;IAChE,CAAC;IAED,EAAE,CAAC,0DAA0D,EAAE,GAAG,EAAE;QAClE,MAAM,GAAG,GAAG,EAAE,CAAC;QACf,MAAM,mBAAmB,GAAG,SAAS,CAAC;QACtC,oCAAoC,CAAC,GAAG,EAAE,mBAAmB,CAAC,CAAC;IACjE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;QACtD,MAAM,GAAG,GAAG,kCAAkC,CAAC;QAC/C,MAAM,mBAAmB,GAAG,4BAA4B,CAAC;QACzD,oCAAoC,CAAC,GAAG,EAAE,mBAAmB,CAAC,CAAC;IACjE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Bindings from '../../../../models/bindings/bindings.js';\nimport * as Workspace from '../../../../models/workspace/workspace.js';\nimport {createTarget} from '../../../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../../../testing/MockConnection.js';\n\nimport * as Components from './utils.js';\n\ndescribeWithMockConnection('JSPresentationUtils', () => {\n  function setUpEnvironment() {\n    const target = createTarget();\n    const linkifier = new Components.Linkifier.Linkifier(100, false);\n    linkifier.targetAdded(target);\n    const workspace = Workspace.Workspace.WorkspaceImpl.instance();\n    const forceNew = true;\n    const targetManager = target.targetManager();\n    const resourceMapping = new Bindings.ResourceMapping.ResourceMapping(targetManager, workspace);\n    const debuggerWorkspaceBinding = Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance({\n      forceNew,\n      resourceMapping,\n      targetManager,\n    });\n    Bindings.IgnoreListManager.IgnoreListManager.instance({forceNew, debuggerWorkspaceBinding});\n    return {target, linkifier};\n  }\n\n  function checkLinkContentForStackTracePreview(url: string, expectedLinkContent: string) {\n    const {target, linkifier} = setUpEnvironment();\n    const callFrame = {scriptId: 'scriptId', functionName: 'func', url, lineNumber: 0, columnNumber: 0};\n    const stackTrace = {callFrames: [callFrame]};\n    const options = {tabStops: false, stackTrace} as Components.JSPresentationUtils.Options;\n    const {links} = Components.JSPresentationUtils.buildStackTracePreviewContents(target, linkifier, options);\n    assert.lengthOf(links, 1);\n    assert.strictEqual(links[0].textContent, expectedLinkContent);\n  }\n\n  it('uses \\'unknown\\' as link content if url is not available', () => {\n    const url = '';\n    const expectedLinkContent = 'unknown';\n    checkLinkContentForStackTracePreview(url, expectedLinkContent);\n  });\n\n  it('uses url as link content if url is available', () => {\n    const url = 'https://www.google.com/script.js';\n    const expectedLinkContent = 'www.google.com/script.js:1';\n    checkLinkContentForStackTracePreview(url, expectedLinkContent);\n  });\n});\n"]}