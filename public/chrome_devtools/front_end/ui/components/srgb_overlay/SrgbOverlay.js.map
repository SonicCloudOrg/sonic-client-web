{"version":3,"file":"SrgbOverlay.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/components/srgb_overlay/SrgbOverlay.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,MAAM,MAAM,gCAAgC,CAAC;AACzD,OAAO,KAAK,WAAW,MAAM,iEAAiE,CAAC;AAC/F,OAAO,KAAK,OAAO,MAAM,kCAAkC,CAAC;AAE5D,OAAO,iBAAiB,MAAM,sBAAsB,CAAC;AAErD,MAAM,WAAW,GAAG,WAAW,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC;AAS/E,MAAM,iBAAiB,GAAG,EAAE,CAAC;AAC7B,MAAM,iBAAiB,GAAG,CAAC,CAAC;AAC5B,MAAM,iCAAiC,GAAG,iBAAiB,GAAG,iBAAiB,CAAC;AAEhF,MAAM,OAAO,GAAG,KAAK,CAAC;AACtB,6GAA6G;AAC7G,SAAS,kBAAkB,CAAC,GAA8B;IACxD,MAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;IACjD,MAAM,MAAM,GAAG,MAAM,CAAC,cAAc,CAAC,cAAc,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACjG,MAAM,IAAI,GAAG,MAAM,CAAC,cAAc,CAAC,cAAc,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAChG,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,OAAO,IAAI,CAAC,IAAI,GAAG,GAAG,OAAO,IAAI,CAAC,CAAC,CAAC;AACrE,CAAC;AAED,MAAM,OAAO,WAAY,SAAQ,WAAW;IAC1C,MAAM,CAAU,UAAU,GAAG,OAAO,CAAC,OAAO,CAAA,gCAAgC,CAAC;IACpE,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC;IAErD;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,CAAC,kBAAkB,GAAG;YAChC,iBAAiB;SAClB,CAAC;IACJ,CAAC;IAED,cAAc,CAAC,EAAC,GAAG,EAAE,KAAK,EAAE,MAAM,EAAmB;QACnD,IAAI,KAAK,KAAK,CAAC,IAAI,MAAM,KAAK,CAAC,EAAE,CAAC;YAChC,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,IAAI,GAAG,CAAC,GAAG,MAAM,CAAC,gBAAgB,CAAC;QACzC,MAAM,UAAU,GAAG,EAAE,CAAC;QACtB,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC;YACtC,MAAM,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC;YAE/B,OAAO,CAAC,GAAG,KAAK,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC;gBAC5B,MAAM,UAAU,GAAG,CAAC,GAAG,KAAK,CAAC;gBAC7B,IAAI,CAAC,kBAAkB,CAAC,CAAC,GAAG,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC;oBAClD,UAAU,CAAC,IAAI,CAAC,EAAC,CAAC,EAAE,CAAC,EAAC,CAAC,CAAC;oBACxB,MAAM;gBACR,CAAC;YACH,CAAC;QACH,CAAC;QAED,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC5B,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,SAAS,GAAG,UAAU,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACpD,IAAI,SAAS,CAAC,CAAC,GAAG,KAAK,EAAE,CAAC;YACxB,UAAU,CAAC,IAAI,CAAC;gBACd,CAAC,EAAE,SAAS,CAAC,CAAC;gBACd,CAAC,EAAE,KAAK;aACT,CAAC,CAAC;QACL,CAAC;QAED,OAAO,UAAU,CAAC;IACpB,CAAC;IAED,qBAAqB,CAAC,MAAgC,EAAE,QAAgB;QACtE,IAAI,GAAG,GAAG,QAAQ,CAAC;QACnB,IAAI,YAAY,GAAG,IAAI,CAAC;QACxB,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE,CAAC;YAC3B,IAAI,IAAI,CAAC,GAAG,CAAC,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,IAAI,GAAG,EAAE,CAAC;gBACxC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACnC,YAAY,GAAG,KAAK,CAAC;YACvB,CAAC;QACH,CAAC;QAED,OAAO,YAAY,CAAC;IACtB,CAAC;IAED,MAAM,CAAC,EAAC,GAAG,EAAE,KAAK,EAAE,MAAM,EAAmB;QAC3C,OAAO,WAAW,CAAC,KAAK,CAAC,qBAAqB,EAAE,GAAG,EAAE;YACnD,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,EAAC,GAAG,EAAE,KAAK,EAAE,MAAM,EAAC,CAAC,CAAC;YACzD,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBACnC,OAAO;YACT,CAAC;YAED,MAAM,YAAY,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE,MAAM,GAAG,iCAAiC,CAAC,CAAC;YACpG,IAAI,CAAC,YAAY,EAAE,CAAC;gBAClB,OAAO;YACT,CAAC;YAED,OAAO,CAAC,MAAM,CACV,OAAO,CAAC,IAAI,CAAA;8CACwB,KAAK,GAAG,YAAY,CAAC,CAAC;;+BAGtD,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;;SAEjF,EACC,IAAI,CAAC,OAAO,EAAE,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;IACL,CAAC;;AAGH,cAAc,CAAC,MAAM,CAAC,gCAAgC,EAAE,WAAW,CAAC,CAAC","sourcesContent":["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\nimport * as Coordinator from '../../../ui/components/render_coordinator/render_coordinator.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\n\nimport srgbOverlayStyles from './srgbOverlay.css.js';\n\nconst coordinator = Coordinator.RenderCoordinator.RenderCoordinator.instance();\n\ntype SrgbOverlayProps = {\n  // [0 - 1] corresponding to HSV hue\n  hue: number,\n  width: number,\n  height: number,\n};\n\nconst SRGB_LABEL_HEIGHT = 10;\nconst SRGB_LABEL_BOTTOM = 3;\nconst SRGB_TEXT_UPPER_POINT_FROM_BOTTOM = SRGB_LABEL_HEIGHT + SRGB_LABEL_BOTTOM;\n\nconst EPSILON = 0.001;\n// TODO(crbug.com/1409892): Use `Color` class here for a better code (and not duplicate isInGamut logic here)\nfunction isColorInSrgbGamut(hsv: Common.ColorUtils.Color3D): boolean {\n  const rgba = Common.Color.hsva2rgba([...hsv, 1]);\n  const xyzd50 = Common.ColorConverter.ColorConverter.displayP3ToXyzd50(rgba[0], rgba[1], rgba[2]);\n  const srgb = Common.ColorConverter.ColorConverter.xyzd50ToSrgb(xyzd50[0], xyzd50[1], xyzd50[2]);\n  return srgb.every(val => val + EPSILON >= 0 && val - EPSILON <= 1);\n}\n\nexport class SrgbOverlay extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-spectrum-srgb-overlay`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n\n  constructor() {\n    super();\n    this.#shadow.adoptedStyleSheets = [\n      srgbOverlayStyles,\n    ];\n  }\n\n  #getLinePoints({hue, width, height}: SrgbOverlayProps): {x: number, y: number}[]|null {\n    if (width === 0 || height === 0) {\n      return null;\n    }\n\n    const step = 1 / window.devicePixelRatio;\n    const linePoints = [];\n    let x = 0;\n    for (let y = 0; y < height; y += step) {\n      const value = 1 - (y / height);\n\n      for (; x < width; x += step) {\n        const saturation = x / width;\n        if (!isColorInSrgbGamut([hue, saturation, value])) {\n          linePoints.push({x, y});\n          break;\n        }\n      }\n    }\n\n    if (linePoints.length === 0) {\n      return null;\n    }\n\n    const lastPoint = linePoints[linePoints.length - 1];\n    if (lastPoint.x < width) {\n      linePoints.push({\n        y: lastPoint.y,\n        x: width,\n      });\n    }\n\n    return linePoints;\n  }\n\n  #closestPointAtHeight(points: {x: number, y: number}[], atHeight: number): {x: number, y: number}|null {\n    let min = Infinity;\n    let closestPoint = null;\n    for (const point of points) {\n      if (Math.abs(atHeight - point.y) <= min) {\n        min = Math.abs(atHeight - point.y);\n        closestPoint = point;\n      }\n    }\n\n    return closestPoint;\n  }\n\n  render({hue, width, height}: SrgbOverlayProps): Promise<void> {\n    return coordinator.write('Srgb Overlay render', () => {\n      const points = this.#getLinePoints({hue, width, height});\n      if (!points || points.length === 0) {\n        return;\n      }\n\n      const closestPoint = this.#closestPointAtHeight(points, height - SRGB_TEXT_UPPER_POINT_FROM_BOTTOM);\n      if (!closestPoint) {\n        return;\n      }\n\n      LitHtml.render(\n          LitHtml.html`\n          <span class=\"label\" style=\"right: ${width - closestPoint.x}px\">sRGB</span>\n          <svg>\n            <polyline points=${\n              points.map(point => `${point.x.toFixed(2)},${point.y.toFixed(2)}`).join(' ')} class=\"gamut-line\" />\n          </svg>\n        `,\n          this.#shadow, {host: this});\n    });\n  }\n}\n\ncustomElements.define('devtools-spectrum-srgb-overlay', SrgbOverlay);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-spectrum-srgb-overlay': SrgbOverlay;\n  }\n}\n"]}