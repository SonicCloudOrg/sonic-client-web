{"version":3,"file":"RequestLinkIcon.test.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/components/request_link_icon/RequestLinkIcon.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\nimport type * as Platform from '../../../core/platform/platform.js';\nimport type * as SDK from '../../../core/sdk/sdk.js';\nimport type * as Protocol from '../../../generated/protocol.js';\nimport type * as Logs from '../../../models/logs/logs.js';\nimport * as NetworkForward from '../../../panels/network/forward/forward.js';\nimport {renderElementIntoDOM} from '../../../testing/DOMHelpers.js';\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport * as UI from '../../legacy/legacy.js';\nimport * as IconButton from '../icon_button/icon_button.js';\nimport * as Coordinator from '../render_coordinator/render_coordinator.js';\n\nimport * as RequestLinkIcon from './request_link_icon.js';\n\nconst coordinator = Coordinator.RenderCoordinator.RenderCoordinator.instance();\n\nconst renderRequestLinkIcon = async(data: RequestLinkIcon.RequestLinkIcon.RequestLinkIconData): Promise<{\n  component: RequestLinkIcon.RequestLinkIcon.RequestLinkIcon,\n  shadowRoot: ShadowRoot,\n}> => {\n  const component = new RequestLinkIcon.RequestLinkIcon.RequestLinkIcon();\n  component.data = data;\n  renderElementIntoDOM(component);\n  assert.isNotNull(component.shadowRoot);\n  await coordinator.done();\n  return {component, shadowRoot: component.shadowRoot};\n};\n\nexport const extractElements = (shadowRoot: ShadowRoot): {\n  icon: IconButton.Icon.Icon,\n  button: HTMLButtonElement,\n  label: HTMLSpanElement|null,\n} => {\n  const icon = shadowRoot.querySelector('devtools-icon');\n  assert.instanceOf(icon, IconButton.Icon.Icon);\n  const button = shadowRoot.querySelector('button');\n  assert.instanceOf(button, HTMLButtonElement);\n  const label = shadowRoot.querySelector('button > span');\n  if (label !== null) {\n    assert.instanceOf(label, HTMLSpanElement);\n  }\n  return {icon, button, label};\n};\n\ninterface MockRequestResolverEntry {\n  resolve: (request: SDK.NetworkRequest.NetworkRequest|null) => void;\n  promise: Promise<SDK.NetworkRequest.NetworkRequest|null>;\n}\n\nclass MockRequestResolver {\n  #promiseMap: Map<string, MockRequestResolverEntry> = new Map();\n\n  waitFor(requestId?: string) {\n    if (!requestId) {\n      if (this.#promiseMap.size !== 1) {\n        throw new Error('more than one request being awaited, specify a request id');\n      }\n      requestId = this.#promiseMap.keys().next().value;\n    }\n    requestId = requestId || '';\n    const entry = this.#promiseMap.get(requestId);\n    if (entry) {\n      return entry.promise;\n    }\n    let resolve: (request: SDK.NetworkRequest.NetworkRequest|null) => void = () => {};\n    const promise = new Promise<SDK.NetworkRequest.NetworkRequest|null>(r => {\n      resolve = r;\n    });\n    this.#promiseMap.set(requestId, {resolve, promise});\n    return promise;\n  }\n\n  resolve(result: SDK.NetworkRequest.NetworkRequest|null, requestId?: string): void {\n    if (!requestId && this.#promiseMap.size === 1) {\n      requestId = this.#promiseMap.keys().next().value;\n    }\n    requestId = requestId || result?.requestId() || '';\n    const entry = this.#promiseMap.get(requestId);\n    if (!entry) {\n      throw new Error('resolve uninitialized');\n    }\n    entry.resolve(result);\n    this.#promiseMap.delete(requestId);\n  }\n\n  clear() {\n    for (const {resolve} of this.#promiseMap.values()) {\n      resolve(null);\n    }\n  }\n}\n\ndescribeWithEnvironment('RequestLinkIcon', () => {\n  const requestId1 = 'r1' as Protocol.Network.RequestId;\n  const requestId2 = 'r2' as Protocol.Network.RequestId;\n\n  describe('with simple requests', () => {\n    const mockRequest = {\n      url() {\n        return 'http://foo.bar/baz';\n      },\n    };\n\n    const mockRequestWithTrailingSlash = {\n      url() {\n        return 'http://foo.bar/baz/';\n      },\n    };\n\n    const failingRequestResolver = {\n      async waitFor() {\n        throw new Error('Couldn\\'t resolve');\n      },\n    };\n\n    it('renders correctly without a request', async () => {\n      const {shadowRoot} = await renderRequestLinkIcon({\n        affectedRequest: {requestId: requestId1},\n        requestResolver: failingRequestResolver as unknown as Logs.RequestResolver.RequestResolver,\n      });\n\n      const {button, icon, label} = extractElements(shadowRoot);\n      assert.isFalse(button.classList.contains('link'));\n      assert.strictEqual(icon.name, 'arrow-up-down-circle');\n      assert.isNull(label, 'Didn\\'t expect a label');\n    });\n\n    it('renders correctly with a request', async () => {\n      const {shadowRoot} = await renderRequestLinkIcon({\n        request: mockRequest as unknown as SDK.NetworkRequest.NetworkRequest,\n      });\n\n      const {button, icon, label} = extractElements(shadowRoot);\n      assert.isTrue(button.classList.contains('link'));\n      assert.strictEqual(icon.name, 'arrow-up-down-circle');\n      assert.isNull(label, 'Didn\\'t expect a label');\n    });\n\n    it('renders the request label correctly without a trailing slash', async () => {\n      const {shadowRoot} = await renderRequestLinkIcon({\n        request: mockRequest as unknown as SDK.NetworkRequest.NetworkRequest,\n        displayURL: true,\n      });\n\n      const {label} = extractElements(shadowRoot);\n      assert.strictEqual(label?.textContent, 'baz');\n    });\n\n    it('renders the request label correctly with a trailing slash', async () => {\n      const {shadowRoot} = await renderRequestLinkIcon({\n        request: mockRequestWithTrailingSlash as unknown as SDK.NetworkRequest.NetworkRequest,\n        displayURL: true,\n      });\n\n      const {label} = extractElements(shadowRoot);\n      assert.strictEqual(label?.textContent, 'baz/');\n    });\n\n    it('renders the request label correctly without a request', async () => {\n      const {shadowRoot} = await renderRequestLinkIcon({\n        affectedRequest: {requestId: requestId1, url: 'https://alpha.beta/gamma'},\n        requestResolver: failingRequestResolver as unknown as Logs.RequestResolver.RequestResolver,\n        displayURL: true,\n      });\n\n      const {label} = extractElements(shadowRoot);\n      assert.strictEqual(label?.textContent, 'gamma');\n    });\n\n    it('renders alternative text for URL', async () => {\n      const {shadowRoot} = await renderRequestLinkIcon({\n        affectedRequest: {requestId: requestId1, url: 'https://alpha.beta/gamma'},\n        requestResolver: failingRequestResolver as unknown as Logs.RequestResolver.RequestResolver,\n        displayURL: true,\n        urlToDisplay: 'https://alpha.beta/gamma',\n      });\n\n      const {label} = extractElements(shadowRoot);\n      assert.strictEqual(label?.textContent, 'https://alpha.beta/gamma');\n    });\n  });\n\n  describe('transitions upon request resolution', () => {\n    const mockRequest = {\n      url() {\n        return 'http://foo.bar/baz';\n      },\n    };\n\n    it('to change the style correctly', async () => {\n      const resolver = new MockRequestResolver();\n      const {shadowRoot} = await renderRequestLinkIcon({\n        affectedRequest: {requestId: requestId1, url: 'https://alpha.beta/gamma'},\n        requestResolver: resolver as unknown as Logs.RequestResolver.RequestResolver,\n      });\n\n      assert.isFalse(extractElements(shadowRoot).button.classList.contains('link'));\n\n      resolver.resolve(mockRequest as unknown as SDK.NetworkRequest.NetworkRequest);\n      await coordinator.done({waitForWork: true});\n\n      assert.isTrue(extractElements(shadowRoot).button.classList.contains('link'));\n    });\n\n    it('to set the label correctly', async () => {\n      const resolver = new MockRequestResolver();\n      const {shadowRoot} = await renderRequestLinkIcon({\n        affectedRequest: {requestId: requestId1, url: 'https://alpha.beta/gamma'},\n        requestResolver: resolver as unknown as Logs.RequestResolver.RequestResolver,\n        displayURL: true,\n      });\n\n      assert.strictEqual(extractElements(shadowRoot).label?.textContent, 'gamma');\n\n      resolver.resolve(mockRequest as unknown as SDK.NetworkRequest.NetworkRequest);\n      await coordinator.done({waitForWork: true});\n\n      assert.strictEqual(extractElements(shadowRoot).label?.textContent, 'baz');\n    });\n\n    it('handles multiple data assignments', async () => {\n      const resolver = new MockRequestResolver();\n      const {shadowRoot, component} = await renderRequestLinkIcon({\n        affectedRequest: {requestId: requestId2, url: 'https://alpha.beta/gamma'},\n        requestResolver: resolver as unknown as Logs.RequestResolver.RequestResolver,\n        displayURL: true,\n      });\n\n      assert.strictEqual(extractElements(shadowRoot).label?.textContent, 'gamma');\n\n      const mockRequest2 = {\n        url() {\n          return 'http://foo.bar/baz';\n        },\n        requestId() {\n          return requestId1;\n        },\n      };\n\n      component.data = {\n        affectedRequest: {requestId: requestId1, url: 'https://alpha.beta/gamma'},\n        requestResolver: resolver as unknown as Logs.RequestResolver.RequestResolver,\n        displayURL: true,\n      };\n\n      resolver.resolve(mockRequest2 as unknown as SDK.NetworkRequest.NetworkRequest);\n      await coordinator.done({waitForWork: true});\n\n      assert.strictEqual(extractElements(shadowRoot).label?.textContent, 'baz');\n\n      resolver.clear();\n    });\n  });\n\n  describe('handles clicks correctly', () => {\n    const mockRequest = {\n      url() {\n        return 'http://foo.bar/baz';\n      },\n    };\n\n    before(() => {\n      UI.ViewManager.resetViewRegistration();\n      UI.ViewManager.registerViewExtension({\n        // @ts-ignore\n        location: 'mock-location',\n        id: 'network',\n        title: () => 'Network' as Platform.UIString.LocalizedString,\n        commandPrompt: () => 'Network' as Platform.UIString.LocalizedString,\n        persistence: UI.ViewManager.ViewPersistence.CLOSEABLE,\n        async loadView() {\n          return new UI.Widget.Widget();\n        },\n      });\n      UI.ViewManager.ViewManager.instance({forceNew: true});\n    });\n\n    after(() => {\n      UI.ViewManager.maybeRemoveViewExtension('network');\n    });\n\n    it('if the button is clicked', async () => {\n      const revealOverride = sinon.fake(Common.Revealer.reveal);\n      const {shadowRoot} = await renderRequestLinkIcon({\n        request: mockRequest as unknown as SDK.NetworkRequest.NetworkRequest,\n        displayURL: true,\n        revealOverride,\n      });\n\n      const {button} = extractElements(shadowRoot);\n\n      button.click();\n\n      assert.isTrue(revealOverride.called);\n      assert.isTrue(revealOverride.calledOnceWith(\n          sinon.match({tab: NetworkForward.UIRequestLocation.UIRequestTabs.HeadersComponent})));\n    });\n  });\n});\n"]}