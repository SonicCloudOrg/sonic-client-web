{"version":3,"file":"ExpandableList.test.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/components/expandable_list/ExpandableList.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {renderElementIntoDOM} from '../../../testing/DOMHelpers.js';\nimport {MutationType, withMutations} from '../../../testing/MutationHelpers.js';\nimport * as LitHtml from '../../lit-html/lit-html.js';\n\nimport * as ExpandableList from './expandable_list.js';\n\ndescribe('ExpandableList', () => {\n  it('can be expanded', async () => {\n    const list = new ExpandableList.ExpandableList.ExpandableList();\n    renderElementIntoDOM(list);\n    list.data = {\n      rows: [\n        LitHtml.html`<div class=\"row\">row 1</div>`,\n        LitHtml.html`<div class=\"row\">row 2</div>`,\n      ],\n    };\n    assert.isNotNull(list.shadowRoot);\n\n    // checks that list is not expanded initially\n    let rows = list.shadowRoot.querySelectorAll('.row');\n    assert.strictEqual(rows.length, 1);\n    const iconSpan = list.shadowRoot.querySelector<HTMLElement>('span.arrow-icon');\n    assert.isNotNull(iconSpan);\n    assert.isFalse(iconSpan?.classList.contains('expanded'));\n\n    // checks that clicking button expands list by adding a div\n    const button = list.shadowRoot.querySelector<HTMLElement>('button.arrow-icon-button');\n    await withMutations([{target: 'div', type: MutationType.ADD, max: 1}], list.shadowRoot, () => {\n      button?.click();\n    });\n\n    // checks that list is expanded\n    assert.isTrue(iconSpan?.classList.contains('expanded'));\n    rows = list.shadowRoot.querySelectorAll('.row');\n    assert.strictEqual(rows.length, 2);\n  });\n\n  it('does not render when given 0 rows', async () => {\n    const list = new ExpandableList.ExpandableList.ExpandableList();\n    renderElementIntoDOM(list);\n    list.data = {\n      rows: [],\n    };\n    assert.isNotNull(list.shadowRoot);\n\n    // checks that list is not rendered\n    const rows = list.shadowRoot.querySelectorAll('.row');\n    assert.strictEqual(rows.length, 0);\n    const iconSpan = list.shadowRoot.querySelector<HTMLElement>('span.arrow-icon');\n    assert.isNull(iconSpan);\n  });\n\n  it('cannot be expanded when given 1 row', async () => {\n    const list = new ExpandableList.ExpandableList.ExpandableList();\n    renderElementIntoDOM(list);\n    list.data = {\n      rows: [\n        LitHtml.html`<div class=\"row\">row 1</div>`,\n      ],\n    };\n    assert.isNotNull(list.shadowRoot);\n\n    // checks that list contains 1 row\n    const rows = list.shadowRoot.querySelectorAll('.row');\n    assert.strictEqual(rows.length, 1);\n\n    // checks that list does not render button for expanding\n    const iconSpan = list.shadowRoot.querySelector<HTMLElement>('span.arrow-icon');\n    assert.isNull(iconSpan);\n    const button = list.shadowRoot.querySelector<HTMLElement>('button.arrow-icon-button');\n    assert.isNull(button);\n  });\n});\n"]}