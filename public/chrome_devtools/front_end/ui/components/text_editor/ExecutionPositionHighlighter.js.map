{"version":3,"file":"ExecutionPositionHighlighter.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/components/text_editor/ExecutionPositionHighlighter.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as CodeMirror from '../../../third_party/codemirror.next/codemirror.next.js';\n\n/**\n * The CodeMirror effect used to change the highlighted execution position.\n *\n * Usage:\n * ```js\n * view.dispatch({effects: setHighlightedPosition.of(position)});\n * ```\n */\nexport const setHighlightedPosition = CodeMirror.StateEffect.define<number>();\n\n/**\n * The CodeMirror effect used to clear the highlighted execution position.\n *\n * Usage:\n * ```js\n * view.dispatch({effects: clearHighlightedPosition.of()});\n * ```\n */\nexport const clearHighlightedPosition = CodeMirror.StateEffect.define<void>();\n\n/**\n * Constructs a CodeMirror extension that can be used to decorate the current execution\n * line (and token), for example when the debugger is paused, with specific CSS classes.\n *\n * @param executionLineClassName The CSS class name to use for decorating the execution line (e.g. `'cm-executionLine'`).\n * @param executionTokenClassName The CSS class name to use for decorating the execution token (e.g. `'cm-executionToken'`).\n *\n * @returns a CodeMirror extension that highlights the current execution line and token when set.\n */\nexport function positionHighlighter(\n    executionLineClassName: string,\n    executionTokenClassName: string,\n    ): CodeMirror.Extension {\n  const executionLine = CodeMirror.Decoration.line({attributes: {class: executionLineClassName}});\n  const executionToken = CodeMirror.Decoration.mark({attributes: {class: executionTokenClassName}});\n\n  const positionHighlightedState = CodeMirror.StateField.define<null|number>({\n    create() {\n      return null;\n    },\n\n    update(pos, tr) {\n      if (pos) {\n        pos = tr.changes.mapPos(pos, -1, CodeMirror.MapMode.TrackDel);\n      }\n      for (const effect of tr.effects) {\n        if (effect.is(clearHighlightedPosition)) {\n          pos = null;\n        } else if (effect.is(setHighlightedPosition)) {\n          pos = Math.max(0, Math.min(effect.value, tr.newDoc.length - 1));\n        }\n      }\n      return pos;\n    },\n  });\n\n  function getHighlightedPosition(state: CodeMirror.EditorState): null|number {\n    return state.field(positionHighlightedState);\n  }\n\n  class PositionHighlighter {\n    tree: CodeMirror.Tree;\n    decorations: CodeMirror.DecorationSet;\n\n    constructor({state}: CodeMirror.EditorView) {\n      this.tree = CodeMirror.syntaxTree(state);\n      this.decorations = this.#computeDecorations(state, getHighlightedPosition(state));\n    }\n\n    update(update: CodeMirror.ViewUpdate): void {\n      const tree = CodeMirror.syntaxTree(update.state);\n      const position = getHighlightedPosition(update.state);\n      const positionChanged = position !== getHighlightedPosition(update.startState);\n      if (tree.length !== this.tree.length || positionChanged) {\n        this.tree = tree;\n        this.decorations = this.#computeDecorations(update.state, position);\n      } else {\n        this.decorations = this.decorations.map(update.changes);\n      }\n    }\n\n    #computeDecorations(state: CodeMirror.EditorState, position: null|number): CodeMirror.DecorationSet {\n      const builder = new CodeMirror.RangeSetBuilder<CodeMirror.Decoration>();\n      if (position !== null) {\n        const {doc} = state;\n        const line = doc.lineAt(position);\n        builder.add(line.from, line.from, executionLine);\n        const syntaxTree = CodeMirror.syntaxTree(state);\n        const syntaxNode = syntaxTree.resolveInner(position, 1);\n        const tokenEnd = Math.min(line.to, syntaxNode.to);\n        if (tokenEnd > position) {\n          builder.add(position, tokenEnd, executionToken);\n        }\n      }\n      return builder.finish();\n    }\n  }\n\n  const positionHighlighterSpec = {\n    decorations: ({decorations}: PositionHighlighter) => decorations,\n  };\n\n  return [\n    positionHighlightedState,\n    CodeMirror.ViewPlugin.fromClass(PositionHighlighter, positionHighlighterSpec),\n  ];\n}\n"]}