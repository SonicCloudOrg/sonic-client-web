{"version":3,"file":"AutocompleteHistory.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/components/text_editor/AutocompleteHistory.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAI7B,MAAM,OAAO,mBAAmB;IAC9B,MAAM,CAAC,YAAY,GAAG,GAAG,CAAC;IAE1B,QAAQ,CAAoC;IAE5C;;;;OAIG;IACH,KAAK,GAAa,EAAE,CAAC;IAErB,0CAA0C;IAC1C,cAAc,GAAW,CAAC,CAAC;IAC3B,iBAAiB,GAAY,KAAK,CAAC;IAEnC;;;OAGG;IACH,YAAY,OAA0C;QACpD,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;IACnC,CAAC;IAED,KAAK;QACH,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QACtB,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC;IAC1B,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;IAC3B,CAAC;IAED;;OAEG;IACH,eAAe,CAAC,IAAY;QAC1B,IAAI,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAC3B,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;YACjB,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;QACjC,CAAC;QAED,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC;QACxB,IAAI,IAAI,KAAK,IAAI,CAAC,mBAAmB,EAAE,EAAE,CAAC;YACxC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACxB,CAAC;QACD,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAED;;OAEG;IACH,gBAAgB,CAAC,WAAmB;QAClC,IAAI,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAC3B,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;QACnB,CAAC,CAAE,wCAAwC;QAC3C,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;QAC9B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC/B,CAAC;IAED,QAAQ,CAAC,WAAmB;QAC1B,IAAI,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;YAC5C,OAAO,SAAS,CAAC;QACnB,CAAC;QACD,IAAI,IAAI,CAAC,cAAc,KAAK,CAAC,EAAE,CAAC;YAC9B,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;QACrC,CAAC;QACD,EAAE,IAAI,CAAC,cAAc,CAAC;QACtB,OAAO,IAAI,CAAC,mBAAmB,EAAE,CAAC;IACpC,CAAC;IAED,IAAI;QACF,IAAI,IAAI,CAAC,cAAc,KAAK,CAAC,EAAE,CAAC;YAC9B,OAAO,SAAS,CAAC;QACnB,CAAC;QACD,EAAE,IAAI,CAAC,cAAc,CAAC;QACtB,OAAO,IAAI,CAAC,mBAAmB,EAAE,CAAC;IACpC,CAAC;IAED,2FAA2F;IAC3F,eAAe,CAAC,MAAc,EAAE,KAAK,GAAG,EAAE;QACxC,MAAM,MAAM,GAAG,IAAI,GAAG,EAAU,CAAC;QACjC,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,IAAI,GAAG,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC;YACvE,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC5B,IAAI,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC;gBAC7B,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACpB,CAAC;QACH,CAAC;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,mBAAmB;QACjB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC;IAC7D,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC,CAAC;IACzE,CAAC","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../../core/common/common.js';\n\nexport class AutocompleteHistory {\n  static #historySize = 300;\n\n  #setting: Common.Settings.Setting<string[]>;\n\n  /**\n   * The data mirrors the setting. We have the mirror for 2 reasons:\n   *   1) The setting is size limited\n   *   2) We track the user's current input, even though it's not committed yet.\n   */\n  #data: string[] = [];\n\n  /** 1-based entry in the history stack. */\n  #historyOffset: number = 1;\n  #uncommittedIsTop: boolean = false;\n\n  /**\n   * Creates a new settings-backed history. The class assumes it has sole\n   * ownership of the setting.\n   */\n  constructor(setting: Common.Settings.Setting<string[]>) {\n    this.#setting = setting;\n    this.#data = this.#setting.get();\n  }\n\n  clear(): void {\n    this.#data = [];\n    this.#setting.set([]);\n    this.#historyOffset = 1;\n  }\n\n  length(): number {\n    return this.#data.length;\n  }\n\n  /**\n   * Pushes a committed text into the history.\n   */\n  pushHistoryItem(text: string): void {\n    if (this.#uncommittedIsTop) {\n      this.#data.pop();\n      this.#uncommittedIsTop = false;\n    }\n\n    this.#historyOffset = 1;\n    if (text !== this.#currentHistoryItem()) {\n      this.#data.push(text);\n    }\n    this.#store();\n  }\n\n  /**\n   * Pushes the current (uncommitted) text into the history.\n   */\n  #pushCurrentText(currentText: string): void {\n    if (this.#uncommittedIsTop) {\n      this.#data.pop();\n    }  // Throw away obsolete uncommitted text.\n    this.#uncommittedIsTop = true;\n    this.#data.push(currentText);\n  }\n\n  previous(currentText: string): string|undefined {\n    if (this.#historyOffset > this.#data.length) {\n      return undefined;\n    }\n    if (this.#historyOffset === 1) {\n      this.#pushCurrentText(currentText);\n    }\n    ++this.#historyOffset;\n    return this.#currentHistoryItem();\n  }\n\n  next(): string|undefined {\n    if (this.#historyOffset === 1) {\n      return undefined;\n    }\n    --this.#historyOffset;\n    return this.#currentHistoryItem();\n  }\n\n  /** Returns a de-duplicated list of history entries that start with the specified prefix */\n  matchingEntries(prefix: string, limit = 50): Set<string> {\n    const result = new Set<string>();\n    for (let i = this.#data.length - 1; i >= 0 && result.size < limit; --i) {\n      const entry = this.#data[i];\n      if (entry.startsWith(prefix)) {\n        result.add(entry);\n      }\n    }\n    return result;\n  }\n\n  #currentHistoryItem(): string|undefined {\n    return this.#data[this.#data.length - this.#historyOffset];\n  }\n\n  #store(): void {\n    this.#setting.set(this.#data.slice(-AutocompleteHistory.#historySize));\n  }\n}\n"]}