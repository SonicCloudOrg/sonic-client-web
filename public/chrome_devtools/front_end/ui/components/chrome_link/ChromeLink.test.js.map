{"version":3,"file":"ChromeLink.test.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/components/chrome_link/ChromeLink.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAG7B,OAAO,EAAC,oBAAoB,EAAC,MAAM,gCAAgC,CAAC;AACpE,OAAO,EAAC,YAAY,EAAC,MAAM,wCAAwC,CAAC;AACpE,OAAO,EAAC,0BAA0B,EAAC,MAAM,oCAAoC,CAAC;AAC9E,OAAO,KAAK,OAAO,MAAM,4BAA4B,CAAC;AACtD,OAAO,KAAK,WAAW,MAAM,6CAA6C,CAAC;AAE3E,OAAO,KAAK,UAAU,MAAM,kBAAkB,CAAC;AAE/C,MAAM,WAAW,GAAG,WAAW,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC;AAE/E,0BAA0B,CAAC,YAAY,EAAE,GAAG,EAAE;IAC5C,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;QAC7D,MAAM,MAAM,GAAG,YAAY,EAAE,CAAC;QAC9B,MAAM,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,WAAW,EAAE,EAAE,qBAAqB,CAAC,CAAC;QAEnE,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAChD,mBAAmB;QACnB,OAAO,CAAC,MAAM,CACZ,OAAO,CAAC,IAAI,CAAA;WACP,UAAU,CAAC,UAAU,CAAC,UAAU,CAAC,UAAU,UAAU,mBAAmB;;YAEvE,UAAU,CAAC,UAAU,CAAC,UAAU,CAAC,UAAU;OAChD,EACD,SAAS,EAAE,EAAC,IAAI,EAAE,IAAI,EAAC,CACxB,CAAC;QACF,kBAAkB;QAClB,oBAAoB,CAAC,SAAS,CAAC,CAAC;QAChC,MAAM,WAAW,CAAC,IAAI,EAAE,CAAC;QAEzB,MAAM,UAAU,GAAG,SAAS,CAAC,aAAa,CAAC,sBAAsB,CAAC,CAAC;QACnE,MAAM,CAAC,UAAU,CAAC,UAAU,EAAE,UAAU,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;QAChE,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;QACxC,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,EAAE,EAAE,WAAW,CAAC,CAAC;QAE7D,MAAM,IAAI,GAAG,UAAU,CAAC,UAAU,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QACtD,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;QAC3C,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAC7B,IAAI,CAAC,KAAK,EAAE,CAAC;QAEb,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAC9B,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAC,GAAG,EAAE,mBAAmB,EAAC,CAAC,CAAC;IACvE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;IAC1B,EAAE,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;QAClE,MAAM,SAAS,GAAG,IAAI,UAAU,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;QACzD,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE;YACjB,SAAS,CAAC,IAAI,GAAG,yBAA4D,CAAC;QAChF,CAAC,EAAE,mDAAmD,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Platform from '../../../core/platform/platform.js';\nimport {renderElementIntoDOM} from '../../../testing/DOMHelpers.js';\nimport {createTarget} from '../../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../../testing/MockConnection.js';\nimport * as LitHtml from '../../lit-html/lit-html.js';\nimport * as Coordinator from '../render_coordinator/render_coordinator.js';\n\nimport * as ChromeLink from './chrome_link.js';\n\nconst coordinator = Coordinator.RenderCoordinator.RenderCoordinator.instance();\n\ndescribeWithMockConnection('ChromeLink', () => {\n  it('renders a link when given a \\'chrome://\\' URL', async () => {\n    const target = createTarget();\n    const spy = sinon.spy(target.targetAgent(), 'invoke_createTarget');\n\n    const container = document.createElement('div');\n    // clang-format off\n    LitHtml.render(\n      LitHtml.html`\n        <${ChromeLink.ChromeLink.ChromeLink.litTagName} .href=${'chrome://settings'}>\n          link text\n        </${ChromeLink.ChromeLink.ChromeLink.litTagName}>\n      `,\n      container, {host: this},\n    );\n    // clang-format on\n    renderElementIntoDOM(container);\n    await coordinator.done();\n\n    const chromeLink = container.querySelector('devtools-chrome-link');\n    assert.instanceOf(chromeLink, ChromeLink.ChromeLink.ChromeLink);\n    assert.isNotNull(chromeLink.shadowRoot);\n    assert.strictEqual(chromeLink.innerHTML.trim(), 'link text');\n\n    const link = chromeLink.shadowRoot.querySelector('a');\n    assert.instanceOf(link, HTMLAnchorElement);\n    assert.isTrue(spy.notCalled);\n    link.click();\n\n    assert.isTrue(spy.calledOnce);\n    assert.deepEqual(spy.firstCall.firstArg, {url: 'chrome://settings'});\n  });\n});\n\ndescribe('ChromeLink', () => {\n  it('throws an error when given a non-\\'chrome://\\' URL', async () => {\n    const component = new ChromeLink.ChromeLink.ChromeLink();\n    assert.throws(() => {\n      component.href = 'https://www.example.com' as Platform.DevToolsPath.UrlString;\n    }, 'ChromeLink href needs to start with \\'chrome://\\'');\n  });\n});\n"]}