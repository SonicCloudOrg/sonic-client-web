{"version":3,"file":"Button.test.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/components/buttons/Button.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EAAC,oBAAoB,EAAE,oBAAoB,EAAC,MAAM,gCAAgC,CAAC;AAC1F,OAAO,KAAK,WAAW,MAAM,6CAA6C,CAAC;AAE3E,OAAO,KAAK,OAAO,MAAM,cAAc,CAAC;AAExC,MAAM,WAAW,GAAG,WAAW,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC;AAE/E,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;IACtB,MAAM,OAAO,GAAG,IAAI,GAAG,CAAC,gCAAgC,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;IAEtF,KAAK,UAAU,YAAY,CACvB,OAAkC;QAChC,OAAO,gDAAgC;KACxC,EACD,IAAI,GAAG,QAAQ;QACjB,MAAM,MAAM,GAAG,IAAI,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;QAC3C,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;QACnB,+EAA+E;QAC/E,IAAI,IAAI,CAAC,OAAO,mDAAmC,IAAI,IAAI,CAAC,OAAO,6CAAgC,EAAE,CAAC;YACpG,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC;QAC1B,CAAC;QACD,oBAAoB,CAAC,MAAM,CAAC,CAAC;QAC7B,MAAM,WAAW,CAAC,IAAI,EAAE,CAAC;QACzB,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,KAAK,UAAU,SAAS,CACpB,OAAkC;QAChC,OAAO,gDAAgC;QACvC,QAAQ,EAAE,KAAK;KAChB,EACD,kBAAkB,GAAG,CAAC;QACxB,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC,IAAI,CAAC,CAAC;QAExC,IAAI,MAAM,GAAG,CAAC,CAAC;QACf,MAAM,CAAC,OAAO,GAAG,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC;QAEhC,MAAM,WAAW,GAAG,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,QAAQ,CAAsB,CAAC;QACpF,MAAM,CAAC,UAAU,CAAC,WAAW,EAAE,iBAAiB,CAAC,CAAC;QAElD,WAAW,CAAC,KAAK,EAAE,CAAC;QACpB,oBAAoB,CAAC,WAAW,EAAE;YAChC,GAAG,EAAE,OAAO;SACb,CAAC,CAAC;QAEH,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,kBAAkB,CAAC,CAAC;IACjD,CAAC;IAED,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;QAC7C,MAAM,SAAS,CAAC;YACd,OAAO,gDAAgC;SACxC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;QACzD,MAAM,SAAS,CACX;YACE,OAAO,gDAAgC;YACvC,QAAQ,EAAE,IAAI;SACf,EACD,CAAC,CAAC,CAAC;IACT,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;QAC/C,MAAM,SAAS,CAAC;YACd,OAAO,kDAAiC;SACzC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;QAC3D,MAAM,SAAS,CACX;YACE,OAAO,kDAAiC;YACxC,QAAQ,EAAE,IAAI;SACf,EACD,CAAC,CAAC,CAAC;IACT,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;QAC7C,MAAM,SAAS,CAAC;YACd,OAAO,gDAAgC;YACvC,OAAO;SACR,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;QACzD,MAAM,SAAS,CACX;YACE,OAAO,gDAAgC;YACvC,OAAO;YACP,QAAQ,EAAE,IAAI;SACf,EACD,CAAC,CAAC,CAAC;IACT,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kFAAkF,EAAE,KAAK,IAAI,EAAE;QAChG,MAAM,MAAM,GAAG,MAAM,YAAY,EAAE,CAAC;QACpC,MAAM,WAAW,GAAG,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,QAAQ,CAAsB,CAAC;QACpF,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC;QACjE,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gBAAgB,EAAE,KAAK,IAAI,EAAE;QAC9B,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC;YAChC,OAAO,gDAAgC;YACvC,KAAK,EAAE,QAAQ;SAChB,CAAC,CAAC;QACH,MAAM,WAAW,GAAG,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,QAAQ,CAAsB,CAAC;QACpF,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QAEhD,MAAM,CAAC,KAAK,GAAG,SAAS,CAAC;QACzB,MAAM,WAAW,CAAC,IAAI,EAAE,CAAC;QACzB,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qFAAqF,EAAE,KAAK,IAAI,EAAE;QACnG,MAAM,MAAM,GAAG,MAAM,YAAY,CAC7B;YACE,OAAO,gDAAgC;YACvC,OAAO;SACR,EACD,MAAM,CAAC,CAAC;QACZ,MAAM,WAAW,GAAG,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,QAAQ,CAAsB,CAAC;QACpF,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC;QAChE,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4EAA4E,EAAE,KAAK,IAAI,EAAE;QAC1F,MAAM,MAAM,GAAG,MAAM,YAAY,CAC7B;YACE,OAAO,gDAAgC;YACvC,OAAO;SACR,EACD,EAAE,CAAC,CAAC;QACR,MAAM,WAAW,GAAG,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,QAAQ,CAAsB,CAAC;QACpF,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC;QACjE,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mEAAmE,EAAE,KAAK,IAAI,EAAE;QACjF,MAAM,MAAM,GAAG,MAAM,YAAY,CAC7B;YACE,OAAO,gDAAgC;YACvC,IAAI,yCAA2B;SAChC,EACD,EAAE,CAAC,CAAC;QACR,MAAM,WAAW,GAAG,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,QAAQ,CAAsB,CAAC;QACpF,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4EAA4E,EAAE,KAAK,IAAI,EAAE;QAC1F,MAAM,MAAM,GAAG,MAAM,YAAY,CAC7B;YACE,OAAO,gDAAgC;YACvC,OAAO;SACR,EACD,EAAE,CAAC,CAAC;QACR,MAAM,WAAW,GAAG,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,QAAQ,CAAsB,CAAC;QACpF,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;QACxB,KAAK,UAAU,UAAU,CAAC,OAAkC;YAC1D,OAAO,gDAAgC;SACxC;YACC,MAAM,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YAC5C,MAAM,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YAC9C,MAAM,MAAM,GAAG,IAAI,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;YAC3C,MAAM,SAAS,GAAG;gBAChB,WAAW,EAAE,CAAC;gBACd,IAAI;gBACJ,MAAM;gBACN,KAAK;aACN,CAAC;YACF,IAAI,CAAC,QAAQ,GAAG,CAAC,KAAY,EAAE,EAAE;gBAC/B,KAAK,CAAC,cAAc,EAAE,CAAC;gBACvB,SAAS,CAAC,WAAW,EAAE,CAAC;YAC1B,CAAC,CAAC;YACF,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;YACnB,MAAM,CAAC,SAAS,GAAG,QAAQ,CAAC;YAE5B,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACnB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAEpB,oBAAoB,CAAC,IAAI,CAAC,CAAC;YAC3B,MAAM,WAAW,CAAC,IAAI,EAAE,CAAC;YACzB,OAAO,SAAS,CAAC;QACnB,CAAC;QAED,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACvD,MAAM,KAAK,GAAG,MAAM,UAAU,CAAC;gBAC7B,OAAO,gDAAgC;gBACvC,IAAI,EAAE,QAAQ;aACf,CAAC,CAAC;YACH,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;YACrB,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;YAC/D,MAAM,KAAK,GAAG,MAAM,UAAU,CAAC;gBAC7B,OAAO,gDAAgC;gBACvC,IAAI,EAAE,QAAQ;aACf,CAAC,CAAC;YACH,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;YACrB,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;YACrD,MAAM,KAAK,GAAG,MAAM,UAAU,CAAC;gBAC7B,OAAO,gDAAgC;gBACvC,IAAI,EAAE,OAAO;aACd,CAAC,CAAC;YACH,KAAK,CAAC,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC;YAC3B,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;YACrB,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {dispatchKeyDownEvent, renderElementIntoDOM} from '../../../testing/DOMHelpers.js';\nimport * as Coordinator from '../render_coordinator/render_coordinator.js';\n\nimport * as Buttons from './buttons.js';\n\nconst coordinator = Coordinator.RenderCoordinator.RenderCoordinator.instance();\n\ndescribe('Button', () => {\n  const iconUrl = new URL('../../../Images/file-image.svg', import.meta.url).toString();\n\n  async function renderButton(\n      data: Buttons.Button.ButtonData = {\n        variant: Buttons.Button.Variant.PRIMARY,\n      },\n      text = 'Button'): Promise<Buttons.Button.Button> {\n    const button = new Buttons.Button.Button();\n    button.data = data;\n    // Toolbar and round buttons do not take text, and error if you try to set any.\n    if (data.variant !== Buttons.Button.Variant.TOOLBAR && data.variant !== Buttons.Button.Variant.ICON) {\n      button.innerText = text;\n    }\n    renderElementIntoDOM(button);\n    await coordinator.done();\n    return button;\n  }\n\n  async function testClick(\n      data: Buttons.Button.ButtonData = {\n        variant: Buttons.Button.Variant.PRIMARY,\n        disabled: false,\n      },\n      expectedClickCount = 1): Promise<void> {\n    const button = await renderButton(data);\n\n    let clicks = 0;\n    button.onclick = () => clicks++;\n\n    const innerButton = button.shadowRoot?.querySelector('button') as HTMLButtonElement;\n    assert.instanceOf(innerButton, HTMLButtonElement);\n\n    innerButton.click();\n    dispatchKeyDownEvent(innerButton, {\n      key: 'Enter',\n    });\n\n    assert.strictEqual(clicks, expectedClickCount);\n  }\n\n  it('primary button can be clicked', async () => {\n    await testClick({\n      variant: Buttons.Button.Variant.PRIMARY,\n    });\n  });\n\n  it('disabled primary button cannot be clicked', async () => {\n    await testClick(\n        {\n          variant: Buttons.Button.Variant.PRIMARY,\n          disabled: true,\n        },\n        0);\n  });\n\n  it('secondary button can be clicked', async () => {\n    await testClick({\n      variant: Buttons.Button.Variant.OUTLINED,\n    });\n  });\n\n  it('disabled secondary button cannot be clicked', async () => {\n    await testClick(\n        {\n          variant: Buttons.Button.Variant.OUTLINED,\n          disabled: true,\n        },\n        0);\n  });\n\n  it('toolbar button can be clicked', async () => {\n    await testClick({\n      variant: Buttons.Button.Variant.TOOLBAR,\n      iconUrl,\n    });\n  });\n\n  it('disabled toolbar button cannot be clicked', async () => {\n    await testClick(\n        {\n          variant: Buttons.Button.Variant.TOOLBAR,\n          iconUrl,\n          disabled: true,\n        },\n        0);\n  });\n\n  it('gets the no additional classes set for the inner button if only text is provided', async () => {\n    const button = await renderButton();\n    const innerButton = button.shadowRoot?.querySelector('button') as HTMLButtonElement;\n    assert.isTrue(!innerButton.classList.contains('text-with-icon'));\n    assert.isTrue(!innerButton.classList.contains('only-icon'));\n  });\n\n  it('gets title set', async () => {\n    const button = await renderButton({\n      variant: Buttons.Button.Variant.PRIMARY,\n      title: 'Custom',\n    });\n    const innerButton = button.shadowRoot?.querySelector('button') as HTMLButtonElement;\n    assert.strictEqual(innerButton.title, 'Custom');\n\n    button.title = 'Custom2';\n    await coordinator.done();\n    assert.strictEqual(innerButton.title, 'Custom2');\n  });\n\n  it('gets the text-with-icon class set for the inner button if text and icon is provided', async () => {\n    const button = await renderButton(\n        {\n          variant: Buttons.Button.Variant.PRIMARY,\n          iconUrl,\n        },\n        'text');\n    const innerButton = button.shadowRoot?.querySelector('button') as HTMLButtonElement;\n    assert.isTrue(innerButton.classList.contains('text-with-icon'));\n    assert.isTrue(!innerButton.classList.contains('only-icon'));\n  });\n\n  it('gets the only-icon class set for the inner button if only icon is provided', async () => {\n    const button = await renderButton(\n        {\n          variant: Buttons.Button.Variant.PRIMARY,\n          iconUrl,\n        },\n        '');\n    const innerButton = button.shadowRoot?.querySelector('button') as HTMLButtonElement;\n    assert.isTrue(!innerButton.classList.contains('text-with-icon'));\n    assert.isTrue(innerButton.classList.contains('only-icon'));\n  });\n\n  it('gets the `small` class set for the inner button if size === SMALL', async () => {\n    const button = await renderButton(\n        {\n          variant: Buttons.Button.Variant.PRIMARY,\n          size: Buttons.Button.Size.SMALL,\n        },\n        '');\n    const innerButton = button.shadowRoot?.querySelector('button') as HTMLButtonElement;\n    assert.isTrue(innerButton.classList.contains('small'));\n  });\n\n  it('does not get the `small` class set for the inner button if size === MEDIUM', async () => {\n    const button = await renderButton(\n        {\n          variant: Buttons.Button.Variant.PRIMARY,\n          iconUrl,\n        },\n        '');\n    const innerButton = button.shadowRoot?.querySelector('button') as HTMLButtonElement;\n    assert.isFalse(innerButton.classList.contains('small'));\n  });\n\n  describe('in forms', () => {\n    async function renderForm(data: Buttons.Button.ButtonData = {\n      variant: Buttons.Button.Variant.PRIMARY,\n    }) {\n      const form = document.createElement('form');\n      const input = document.createElement('input');\n      const button = new Buttons.Button.Button();\n      const reference = {\n        submitCount: 0,\n        form,\n        button,\n        input,\n      };\n      form.onsubmit = (event: Event) => {\n        event.preventDefault();\n        reference.submitCount++;\n      };\n      button.data = data;\n      button.innerText = 'button';\n\n      form.append(input);\n      form.append(button);\n\n      renderElementIntoDOM(form);\n      await coordinator.done();\n      return reference;\n    }\n\n    it('submits a form with button[type=submit]', async () => {\n      const state = await renderForm({\n        variant: Buttons.Button.Variant.PRIMARY,\n        type: 'submit',\n      });\n      state.button.click();\n      assert.strictEqual(state.submitCount, 1);\n    });\n\n    it('does not submit a form with button[type=button]', async () => {\n      const state = await renderForm({\n        variant: Buttons.Button.Variant.PRIMARY,\n        type: 'button',\n      });\n      state.button.click();\n      assert.strictEqual(state.submitCount, 0);\n    });\n\n    it('resets a form with button[type=reset]', async () => {\n      const state = await renderForm({\n        variant: Buttons.Button.Variant.PRIMARY,\n        type: 'reset',\n      });\n      state.input.value = 'test';\n      state.button.click();\n      assert.strictEqual(state.input.value, '');\n    });\n  });\n});\n"]}