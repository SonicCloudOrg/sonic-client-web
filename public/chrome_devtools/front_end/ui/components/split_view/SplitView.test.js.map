{"version":3,"file":"SplitView.test.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/components/split_view/SplitView.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {renderElementIntoDOM} from '../../../testing/DOMHelpers.js';\nimport * as RenderCoordinator from '../render_coordinator/render_coordinator.js';\n\nimport * as SplitView from './split_view.js';\n\nconst coordinator = RenderCoordinator.RenderCoordinator.RenderCoordinator.instance();\n\ndescribe('SplitView', () => {\n  it('should resize split view', async () => {\n    const view = new SplitView.SplitView.SplitView();\n    renderElementIntoDOM(view);\n    view.style.width = '800px';\n    view.style.height = '600px';\n\n    const resizer = view.shadowRoot?.querySelector(\n                        '#resizer',\n                        ) as HTMLDivElement;\n    assert.ok(resizer);\n\n    assert.strictEqual(\n        view.style.getPropertyValue('--current-main-area-size'),\n        '60%',\n    );\n\n    let rect = resizer.getBoundingClientRect();\n    resizer.dispatchEvent(\n        new MouseEvent('mousedown', {\n          clientX: rect.x + rect.width / 2,\n          clientY: rect.y + rect.height / 2,\n        }),\n    );\n\n    rect = view.getBoundingClientRect();\n    window.dispatchEvent(\n        new MouseEvent('mousemove', {\n          clientX: rect.x + rect.width / 4,\n          clientY: rect.y + rect.height / 4,\n        }),\n    );\n\n    window.dispatchEvent(new MouseEvent('mouseup'));\n    // Exact value might be different based on the environment.\n    assert.notStrictEqual(\n        view.style.getPropertyValue('--current-main-area-size'),\n        '60%',\n    );\n  });\n\n  it('should change layout to horizontal split on resize to narrow view', async () => {\n    const view = new SplitView.SplitView.SplitView();\n    renderElementIntoDOM(view);\n    view.style.width = '800px';\n    view.style.height = '600px';\n\n    const resizer = view.shadowRoot?.querySelector(\n                        '#resizer',\n                        ) as HTMLDivElement;\n    assert.ok(resizer);\n\n    view.style.width = '600px';\n    view.style.height = '800px';\n\n    await coordinator.done({waitForWork: true});\n\n    const rect = resizer.getBoundingClientRect();\n    assert.strictEqual(rect.width, 600);\n    assert.strictEqual(rect.height, 3);\n  });\n\n  it('always uses horizontal split if explicitly set', async () => {\n    const view = new SplitView.SplitView.SplitView();\n    view.horizontal = true;\n    renderElementIntoDOM(view);\n    view.style.width = '800px';\n    view.style.height = '600px';\n\n    const resizer = view.shadowRoot?.querySelector(\n                        '#resizer',\n                        ) as HTMLDivElement;\n    assert.ok(resizer);\n\n    await coordinator.done({waitForWork: true});\n\n    const rect = resizer.getBoundingClientRect();\n    assert.strictEqual(rect.width, 800);\n    assert.strictEqual(rect.height, 3);\n  });\n\n  it('should keep vertical split on short viewports', () => {\n    const view = new SplitView.SplitView.SplitView();\n    renderElementIntoDOM(view);\n    view.style.width = '800px';\n    view.style.height = '600px';\n\n    const resizer = view.shadowRoot?.querySelector(\n                        '#resizer',\n                        ) as HTMLDivElement;\n    assert.ok(resizer);\n\n    view.style.width = '600px';\n    view.style.height = '550px';\n\n    const rect = resizer.getBoundingClientRect();\n    assert.strictEqual(rect.width, 3);\n    assert.strictEqual(rect.height, 550);\n  });\n});\n"]}