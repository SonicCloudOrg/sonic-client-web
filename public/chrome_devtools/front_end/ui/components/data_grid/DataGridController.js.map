{"version":3,"file":"DataGridController.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/components/data_grid/DataGridController.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport type * as TextUtils from '../../../models/text_utils/text_utils.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\nimport * as UI from '../../legacy/legacy.js';\n\nimport {DataGrid, type DataGridContextMenusConfiguration, type DataGridData} from './DataGrid.js';\nimport dataGridControllerStyles from './dataGridController.css.js';\nimport {type ColumnHeaderClickEvent, type ContextMenuColumnSortClickEvent} from './DataGridEvents.js';\nimport {\n  type Column,\n  getRowEntryForColumnId,\n  getStringifiedCellValues,\n  type Row,\n  SortDirection,\n  type SortState,\n} from './DataGridUtils.js';\n\nconst UIStrings = {\n  /**\n   *@description Text announced when the column is sorted in ascending order\n   *@example {title} PH1\n   */\n  sortInAscendingOrder: '{PH1} sorted in ascending order',\n  /**\n   *@description Text announced when the column is sorted in descending order\n   *@example {title} PH1\n   */\n  sortInDescendingOrder: '{PH1} sorted in descending order',\n  /**\n   *@description Text announced when the column sorting canceled\n   *@example {title} PH1\n   */\n  sortingCanceled: '{PH1} sorting canceled',\n};\nconst str_ = i18n.i18n.registerUIStrings('ui/components/data_grid/DataGridController.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport interface DataGridControllerData {\n  columns: Column[];\n  rows: Row[];\n  filters?: readonly TextUtils.TextUtils.ParsedFilter[];\n  /**\n   * Sets an initial sort state for the data grid. Is only used if the component\n   * hasn't rendered yet. If you pass this in on subsequent renders, it is\n   * ignored.\n   */\n  initialSort?: SortState;\n  contextMenus?: DataGridContextMenusConfiguration;\n  label?: string;\n  paddingRowsCount?: number;\n  showScrollbar?: boolean;\n  striped?: boolean;\n  /**\n   * Disable the auto-scroll on new data feature. This is enabled by default.\n   */\n  autoScrollToBottom?: boolean;\n}\n\nexport class DataGridController extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-data-grid-controller`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n\n  #hasRenderedAtLeastOnce = false;\n  #columns: readonly Column[] = [];\n  #rows: Row[] = [];\n  #contextMenus?: DataGridContextMenusConfiguration = undefined;\n  #label?: string = undefined;\n  #showScrollbar?: boolean = false;\n  #striped?: boolean = false;\n\n  /**\n   * Because the controller will sort data in place (e.g. mutate it) when we get\n   * new data in we store the original data separately. This is so we don't\n   * mutate the data we're given, but a copy of the data. If our `get data` is\n   * called, we'll return the original, not the sorted data.\n   */\n  #originalColumns: readonly Column[] = [];\n  #originalRows: Row[] = [];\n\n  #sortState: Readonly<SortState>|null = null;\n  #filters: readonly TextUtils.TextUtils.ParsedFilter[] = [];\n\n  #autoScrollToBottom = true;\n\n  #paddingRowsCount?: number;\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [dataGridControllerStyles];\n  }\n\n  get data(): DataGridControllerData {\n    return {\n      columns: this.#originalColumns as Column[],\n      rows: this.#originalRows as Row[],\n      filters: this.#filters,\n      autoScrollToBottom: this.#autoScrollToBottom,\n      contextMenus: this.#contextMenus,\n      label: this.#label,\n      paddingRowsCount: this.#paddingRowsCount,\n      showScrollbar: this.#showScrollbar,\n      striped: this.#striped,\n    };\n  }\n\n  set data(data: DataGridControllerData) {\n    this.#originalColumns = data.columns;\n    this.#originalRows = data.rows;\n    this.#contextMenus = data.contextMenus;\n    this.#filters = data.filters || [];\n    this.#contextMenus = data.contextMenus;\n    this.#label = data.label;\n    this.#showScrollbar = data.showScrollbar;\n    this.#striped = data.striped;\n    if (typeof data.autoScrollToBottom === 'boolean') {\n      this.#autoScrollToBottom = data.autoScrollToBottom;\n    }\n\n    this.#columns = [...this.#originalColumns];\n    this.#rows = this.#cloneAndFilterRows(data.rows, this.#filters);\n\n    if (!this.#hasRenderedAtLeastOnce && data.initialSort) {\n      this.#sortState = data.initialSort;\n    }\n\n    if (this.#sortState) {\n      this.#sortRows(this.#sortState);\n    }\n\n    this.#paddingRowsCount = data.paddingRowsCount;\n\n    this.#render();\n  }\n\n  #testRowWithFilter(row: Row, filter: TextUtils.TextUtils.ParsedFilter, visibleColumnIds: Set<string>): boolean {\n    let rowMatchesFilter = false;\n\n    const {key, text, negative, regex} = filter;\n\n    let dataToTest;\n    if (key) {\n      dataToTest = getStringifiedCellValues([getRowEntryForColumnId(row, key)]);\n    } else {\n      dataToTest = getStringifiedCellValues(row.cells.filter(cell => visibleColumnIds.has(cell.columnId)));\n    }\n\n    if (regex) {\n      rowMatchesFilter = regex.test(dataToTest);\n    } else if (text) {\n      rowMatchesFilter = dataToTest.includes(text.toLowerCase());\n    }\n\n    // If `negative` is set to `true`, that means we have to flip the final\n    // result, because the filter is matching anything that doesn't match. e.g.\n    // {text: 'foo', negative: false} matches rows that contain the text `foo`\n    // but {text: 'foo', negative: true} matches rows that do NOT contain the\n    // text `foo` so if a filter is marked as negative, we first match against\n    // that filter, and then we flip it here.\n    return negative ? !rowMatchesFilter : rowMatchesFilter;\n  }\n\n  #cloneAndFilterRows(rows: Row[], filters: readonly TextUtils.TextUtils.ParsedFilter[]): Row[] {\n    if (filters.length === 0) {\n      return [...rows];\n    }\n\n    const visibleColumnIds = new Set(this.#columns.filter(column => column.visible).map(column => column.id));\n    return rows.map(row => {\n      // We assume that the row should be visible by default.\n      let rowShouldBeVisible = true;\n      for (const filter of filters) {\n        const rowMatchesFilter = this.#testRowWithFilter(row, filter, visibleColumnIds);\n        // If there are multiple filters, if any return false we hide the row.\n        // So if we get a false from testRowWithFilter, we can break early and return false.\n        if (!rowMatchesFilter) {\n          rowShouldBeVisible = false;\n          break;\n        }\n      }\n      return {\n        ...row,\n        hidden: !rowShouldBeVisible,\n      };\n    });\n  }\n\n  #sortRows(state: SortState): void {\n    const {columnId, direction} = state;\n\n    this.#rows.sort((row1, row2) => {\n      const cell1 = getRowEntryForColumnId(row1, columnId);\n      const cell2 = getRowEntryForColumnId(row2, columnId);\n\n      const value1 = typeof cell1.value === 'number' ? cell1.value : String(cell1.value).toUpperCase();\n      const value2 = typeof cell2.value === 'number' ? cell2.value : String(cell2.value).toUpperCase();\n      if (value1 < value2) {\n        return direction === SortDirection.ASC ? -1 : 1;\n      }\n      if (value1 > value2) {\n        return direction === SortDirection.ASC ? 1 : -1;\n      }\n      return 0;\n    });\n    this.#render();\n  }\n\n  #onColumnHeaderClick(event: ColumnHeaderClickEvent): void {\n    const {column} = event.data;\n    if (column.sortable) {\n      this.#applySortOnColumn(column);\n    }\n  }\n\n  #applySortOnColumn(column: Column): void {\n    if (this.#sortState && this.#sortState.columnId === column.id) {\n      const {columnId, direction} = this.#sortState;\n\n      /* When users sort, we go No Sort => ASC => DESC => No sort\n       * So if the current direction is DESC, we clear the state.\n       */\n      if (direction === SortDirection.DESC) {\n        this.#sortState = null;\n      } else {\n        /* The state is ASC, so toggle to DESC */\n        this.#sortState = {\n          columnId,\n          direction: SortDirection.DESC,\n        };\n      }\n    } else {\n      /* The column wasn't previously sorted, so we sort it in ASC order. */\n      this.#sortState = {\n        columnId: column.id,\n        direction: SortDirection.ASC,\n      };\n    }\n    const headerName = column.title;\n\n    if (this.#sortState) {\n      this.#sortRows(this.#sortState);\n      UI.ARIAUtils.alert(\n          this.#sortState.direction === SortDirection.ASC ?\n              i18nString(UIStrings.sortInAscendingOrder, {PH1: headerName || ''}) :\n              i18nString(UIStrings.sortInDescendingOrder, {PH1: headerName || ''}));\n    } else {\n      // No sortstate = render the original rows.\n      this.#rows = this.#cloneAndFilterRows(this.#originalRows, this.#filters);\n      this.#render();\n      UI.ARIAUtils.alert(i18nString(UIStrings.sortingCanceled, {PH1: headerName || ''}));\n    }\n  }\n\n  #onContextMenuColumnSortClick(event: ContextMenuColumnSortClickEvent): void {\n    this.#applySortOnColumn(event.data.column);\n  }\n\n  #onContextMenuHeaderResetClick(): void {\n    this.#sortState = null;\n    this.#rows = [...this.#originalRows];\n    this.#render();\n  }\n\n  #render(): void {\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    LitHtml.render(LitHtml.html`\n      <${DataGrid.litTagName} .data=${{\n          columns: this.#columns,\n          rows: this.#rows,\n          activeSort: this.#sortState,\n          contextMenus: this.#contextMenus,\n          label: this.#label,\n          paddingRowsCount: this.#paddingRowsCount,\n          showScrollbar: this.#showScrollbar,\n          striped: this.#striped,\n          autoScrollToBottom: this.#autoScrollToBottom,\n        } as DataGridData}\n        @columnheaderclick=${this.#onColumnHeaderClick}\n        @contextmenucolumnsortclick=${this.#onContextMenuColumnSortClick}\n        @contextmenuheaderresetclick=${this.#onContextMenuHeaderResetClick}\n     ></${DataGrid.litTagName}>\n    `, this.#shadow, {\n      host: this,\n    });\n    // clang-format on\n    this.#hasRenderedAtLeastOnce = true;\n  }\n}\n\ncustomElements.define('devtools-data-grid-controller', DataGridController);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-data-grid-controller': DataGridController;\n  }\n}\n"]}