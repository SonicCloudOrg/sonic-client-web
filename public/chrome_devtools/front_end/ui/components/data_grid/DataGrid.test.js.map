{"version":3,"file":"DataGrid.test.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/components/data_grid/DataGrid.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../../core/platform/platform.js';\nimport {\n  assertCurrentFocusedCellIs,\n  assertSelectedRowIs,\n  emulateUserFocusingCellAt,\n  emulateUserKeyboardNavigation,\n  focusCurrentlyFocusableCell,\n  getAllRows,\n  getBodyRowByAriaIndex,\n  getCellByIndexes,\n  getFocusableCell,\n  getHeaderCellForColumnId,\n  getHeaderCells,\n  getValuesOfAllBodyRows,\n  getValuesOfBodyRowByAriaIndex,\n} from '../../../testing/DataGridHelpers.js';\nimport {\n  dispatchClickEvent,\n  dispatchFocusOutEvent,\n  dispatchKeyDownEvent,\n  getEventPromise,\n  renderElementIntoDOM,\n  stripLitHtmlCommentNodes,\n} from '../../../testing/DOMHelpers.js';\nimport {describeWithLocale} from '../../../testing/EnvironmentHelpers.js';\nimport {withMutations} from '../../../testing/MutationHelpers.js';\nimport * as LitHtml from '../../lit-html/lit-html.js';\nimport * as IconButton from '../icon_button/icon_button.js';\nimport * as Coordinator from '../render_coordinator/render_coordinator.js';\n\nimport * as DataGrid from './data_grid.js';\n\nconst coordinator = Coordinator.RenderCoordinator.RenderCoordinator.instance();\n\nconst createColumns = (): DataGrid.DataGridUtils.Column[] => {\n  return [\n    {id: 'city', title: 'City', sortable: true, widthWeighting: 2, visible: true, hideable: false},\n    {id: 'country', title: 'Country', sortable: false, widthWeighting: 2, visible: true, hideable: false},\n    {id: 'population', title: 'Population', sortable: false, widthWeighting: 1, visible: true, hideable: false},\n  ];\n};\n\nconst createRows = (): DataGrid.DataGridUtils.Row[] => {\n  return [\n    {\n      cells: [\n        {columnId: 'city', value: 'London'},\n        {columnId: 'country', value: 'UK'},\n        {columnId: 'population', value: '8.98m'},\n      ],\n    },\n    {\n      cells: [\n        {columnId: 'city', value: 'Munich'},\n        {columnId: 'country', value: 'Germany'},\n        {columnId: 'population', value: '1.47m'},\n      ],\n    },\n    {\n      cells: [\n        {columnId: 'city', value: 'Barcelona'},\n        {columnId: 'country', value: 'Spain'},\n        {columnId: 'population', value: '1.62m'},\n      ],\n    },\n  ];\n};\n\nconst columns: DataGrid.DataGridUtils.Column[] = createColumns();\nconst rows: DataGrid.DataGridUtils.Row[] = createRows();\nconst columnsWithNoneSortable = createColumns().map(col => {\n  col.sortable = false;\n  return col;\n});\nconst label: string = 'Test Data Grid Label';\n\nObject.freeze(columns);\nObject.freeze(columnsWithNoneSortable);\nObject.freeze(rows);\n\nconst renderDataGrid = (data: Partial<DataGrid.DataGrid.DataGridData>): DataGrid.DataGrid.DataGrid => {\n  const component = new DataGrid.DataGrid.DataGrid();\n  component.data = {\n    rows: data.rows || [],\n    columns: data.columns || [],\n    activeSort: data.activeSort || null,\n    label: data.label,\n  };\n  renderElementIntoDOM(component);\n  return component;\n};\n\ndescribe('DataGrid', () => {\n  describe('rendering and hiding rows/columns', () => {\n    it('renders the right headers and values', async () => {\n      const component = renderDataGrid({rows, columns});\n      assert.isNotNull(component.shadowRoot);\n      await coordinator.done();\n\n      const headerCells = getHeaderCells(component.shadowRoot);\n      const values = Array.from(headerCells, cell => cell.textContent || '');\n      assert.deepEqual(values, ['City', 'Country', 'Population']);\n\n      const rowValues = getValuesOfAllBodyRows(component.shadowRoot);\n      assert.deepEqual(rowValues, [\n        ['London', 'UK', '8.98m'],\n        ['Munich', 'Germany', '1.47m'],\n        ['Barcelona', 'Spain', '1.62m'],\n      ]);\n    });\n\n    it('does not render DOM within a cell whose column is hidden', async () => {\n      const columnsWithFirstHidden = createColumns();\n      columnsWithFirstHidden[0].hideable = true;\n      columnsWithFirstHidden[0].visible = false;\n      const component = renderDataGrid({rows, columns: columnsWithFirstHidden});\n      assert.isNotNull(component.shadowRoot);\n      await coordinator.done();\n\n      const renderedRows = Array.from(component.shadowRoot.querySelectorAll('tbody tr:not(.padding-row)'));\n      const cellsHaveChildren = renderedRows.map(row => {\n        const cells = Array.from(row.querySelectorAll('td'), cell => {\n          // Figure out if the cell has any children.\n          return stripLitHtmlCommentNodes(cell.innerHTML).length > 0;\n        });\n        return cells;\n      });\n      assert.deepEqual(cellsHaveChildren, [\n        // False for column 1 as it is hidden, true for the rest which are\n        // visible.\n        [false, true, true],\n        [false, true, true],\n        [false, true, true],\n      ]);\n    });\n\n    it('uses the cell\\'s value as its title attribute by default', async () => {\n      const component = renderDataGrid({rows, columns});\n      assert.isNotNull(component.shadowRoot);\n      await coordinator.done();\n\n      const renderedBodyRows = getAllRows(component.shadowRoot);\n      const renderedBodyCells = renderedBodyRows.map(row => Array.from(row.querySelectorAll('td')));\n      const titleAttributesForCellsByRow = renderedBodyCells.map(row => row.map(cell => cell.getAttribute('title')));\n\n      assert.deepEqual(titleAttributesForCellsByRow, [\n        ['London', 'UK', '8.98m'],\n        ['Munich', 'Germany', '1.47m'],\n        ['Barcelona', 'Spain', '1.62m'],\n      ]);\n    });\n\n    it('takes a title override and uses that if provided', async () => {\n      const rowsWithTitleSpecified = createRows();\n      rowsWithTitleSpecified[0].cells[0].title = 'EXPLICITLY_PROVIDED_TITLE';\n      const component = renderDataGrid({rows: rowsWithTitleSpecified, columns});\n      assert.isNotNull(component.shadowRoot);\n      await coordinator.done();\n\n      const renderedBodyRows = getAllRows(component.shadowRoot);\n      const renderedBodyCells = renderedBodyRows.map(row => Array.from(row.querySelectorAll('td')));\n      const titleAttributesForCellsByRow = renderedBodyCells.map(row => row.map(cell => cell.getAttribute('title')));\n\n      assert.deepEqual(titleAttributesForCellsByRow, [\n        ['EXPLICITLY_PROVIDED_TITLE', 'UK', '8.98m'],\n        ['Munich', 'Germany', '1.47m'],\n        ['Barcelona', 'Spain', '1.62m'],\n      ]);\n    });\n\n    it('hides columns marked as hidden', async () => {\n      const columnsWithCityHidden = createColumns();\n      columnsWithCityHidden[0].visible = false;\n      const component = renderDataGrid({rows, columns: columnsWithCityHidden});\n      assert.isNotNull(component.shadowRoot);\n      await coordinator.done();\n\n      const headerCells = getHeaderCells(component.shadowRoot, {onlyVisible: true});\n      const values = Array.from(headerCells, cell => cell.textContent || '');\n      assert.deepEqual(values, ['Country', 'Population']);\n\n      const rowValues = getValuesOfAllBodyRows(component.shadowRoot, {onlyVisible: true});\n      assert.deepEqual(rowValues, [\n        ['UK', '8.98m'],\n        ['Germany', '1.47m'],\n        ['Spain', '1.62m'],\n      ]);\n    });\n\n    it('hides rows marked as hidden', async () => {\n      const rowsWithLondonHidden = createRows();\n      rowsWithLondonHidden[0].hidden = true;\n      const component = renderDataGrid({rows: rowsWithLondonHidden, columns});\n      assert.isNotNull(component.shadowRoot);\n      await coordinator.done();\n\n      const rowValues = getValuesOfAllBodyRows(component.shadowRoot, {onlyVisible: true});\n      assert.deepEqual(rowValues, [\n        ['Munich', 'Germany', '1.47m'],\n        ['Barcelona', 'Spain', '1.62m'],\n      ]);\n    });\n  });\n\n  describe('data-grid renderers', () => {\n    it('uses the string renderer by default', async () => {\n      const columns: DataGrid.DataGridUtils.Column[] =\n          [{id: 'key', title: 'Key', widthWeighting: 1, visible: true, hideable: false}];\n      const rows: DataGrid.DataGridUtils.Row[] = [{cells: [{columnId: 'key', value: 'Hello World'}]}];\n      const component = renderDataGrid({columns, rows});\n      assert.isNotNull(component.shadowRoot);\n      await coordinator.done();\n      const cell = getCellByIndexes(component.shadowRoot, {column: 0, row: 1});\n      assert.deepEqual(stripLitHtmlCommentNodes(cell.innerHTML), 'Hello World');\n    });\n\n    it('can use the code block renderer to render text in a <code> tag', async () => {\n      const columns: DataGrid.DataGridUtils.Column[] =\n          [{id: 'key', title: 'Key', widthWeighting: 1, visible: true, hideable: false}];\n      const rows: DataGrid.DataGridUtils.Row[] = [{\n        cells: [\n          {\n            columnId: 'key',\n            value: 'Hello World',\n            title: 'Hello World',\n            renderer: DataGrid.DataGridRenderers.codeBlockRenderer,\n          },\n        ],\n      }];\n      const component = renderDataGrid({columns, rows});\n      assert.isNotNull(component.shadowRoot);\n      await coordinator.done();\n      const cell = getCellByIndexes(component.shadowRoot, {column: 0, row: 1});\n      assert.deepEqual(stripLitHtmlCommentNodes(cell.innerHTML), '<code>Hello World</code>');\n    });\n\n    it('can use the icon renderer for rendering icons', async () => {\n      const icon = new IconButton.Icon.Icon();\n      icon.data = {iconName: 'arrow-down', color: 'var(--icon-request)', width: '16px', height: '16px'};\n\n      const columns: DataGrid.DataGridUtils.Column[] =\n          [{id: 'type', title: 'Type', widthWeighting: 1, visible: true, hideable: false}];\n      const rows: DataGrid.DataGridUtils.Row[] = [{\n        cells: [\n          {\n            columnId: 'type',\n            value: icon,\n            title: 'received',\n            renderer: DataGrid.DataGridRenderers.iconRenderer,\n          },\n        ],\n      }];\n      const component = renderDataGrid({columns, rows});\n      assert.isNotNull(component.shadowRoot);\n      await coordinator.done();\n      const cell = getCellByIndexes(component.shadowRoot, {column: 0, row: 1});\n      assert.deepEqual(\n          stripLitHtmlCommentNodes(cell.innerHTML),\n          '<div style=\"display: flex; justify-content: center;\"><devtools-icon role=\"presentation\" name=\"arrow-down\" style=\"color: var(--icon-request); width: 16px; height: 16px;\"></devtools-icon></div>');\n    });\n\n    it('accepts any custom renderer', async () => {\n      const columns: DataGrid.DataGridUtils.Column[] =\n          [{id: 'key', title: 'Key', widthWeighting: 1, visible: true, hideable: false}];\n      const rows: DataGrid.DataGridUtils.Row[] = [{\n        cells: [{\n          columnId: 'key',\n          value: 'Hello World',\n          title: 'Hello World',\n          renderer: value => LitHtml.html`<p>foo: ${value}</p>`,\n        }],\n      }];\n      const component = renderDataGrid({columns, rows});\n      assert.isNotNull(component.shadowRoot);\n      await coordinator.done();\n      const cell = getCellByIndexes(component.shadowRoot, {column: 0, row: 1});\n      assert.deepEqual(stripLitHtmlCommentNodes(cell.innerHTML), '<p>foo: Hello World</p>');\n    });\n  });\n\n  describe('aria-labels', () => {\n    it('it adds aria-label to the table if one is specified', async () => {\n      const component = renderDataGrid({columns, rows, label});\n      assert.isNotNull(component.shadowRoot);\n      await coordinator.done();\n      const table = component.shadowRoot.querySelector('table');\n      assert.instanceOf(table, HTMLTableElement);\n      assert.strictEqual(table.getAttribute('aria-label'), label);\n    });\n\n    it('it does not add an aria-label to the table if one is not specified', async () => {\n      const component = renderDataGrid({columns, rows});\n      assert.isNotNull(component.shadowRoot);\n      await coordinator.done();\n      const table = component.shadowRoot.querySelector('table');\n      assert.instanceOf(table, HTMLTableElement);\n      assert.strictEqual(table.getAttribute('aria-label'), null);\n    });\n\n    it('adds rowcount and colcount to the table', async () => {\n      const component = renderDataGrid({columns, rows});\n      assert.isNotNull(component.shadowRoot);\n      await coordinator.done();\n      const table = component.shadowRoot.querySelector('table');\n      assert.instanceOf(table, HTMLTableElement);\n      assert.strictEqual(table.getAttribute('aria-rowcount'), '3');\n      assert.strictEqual(table.getAttribute('aria-colcount'), '3');\n    });\n\n    it('shows the total row and colcount regardless of any hidden rows', async () => {\n      const rowsWithLondonHidden = createRows();\n      rowsWithLondonHidden[0].hidden = true;\n      const component = renderDataGrid({columns, rows: rowsWithLondonHidden});\n      assert.isNotNull(component.shadowRoot);\n      await coordinator.done();\n      const table = component.shadowRoot.querySelector('table');\n      assert.instanceOf(table, HTMLTableElement);\n      assert.strictEqual(table.getAttribute('aria-rowcount'), '3');\n      assert.strictEqual(table.getAttribute('aria-colcount'), '3');\n    });\n\n    it('labels a column when it is sortable and does not add a label when it is not', async () => {\n      const component = renderDataGrid({columns, rows});\n      assert.isNotNull(component.shadowRoot);\n      await coordinator.done();\n\n      const cityHeader = getHeaderCellForColumnId(component.shadowRoot, 'city');\n      const countryHeader = getHeaderCellForColumnId(component.shadowRoot, 'country');\n      assert.strictEqual(cityHeader.getAttribute('aria-sort'), 'none');\n      assert.strictEqual(countryHeader.getAttribute('aria-sort'), null);\n    });\n\n    it('labels a column when it is sorted in ASC order', async () => {\n      const component = renderDataGrid({\n        columns,\n        rows,\n        activeSort: {\n          columnId: 'city',\n          direction: DataGrid.DataGridUtils.SortDirection.ASC,\n        },\n      });\n      assert.isNotNull(component.shadowRoot);\n      await coordinator.done();\n\n      const cityHeader = getHeaderCellForColumnId(component.shadowRoot, 'city');\n      assert.strictEqual(cityHeader.getAttribute('aria-sort'), 'ascending');\n    });\n\n    it('labels a column when it is sorted in DESC order', async () => {\n      const component = renderDataGrid({\n        columns,\n        rows,\n        activeSort: {\n          columnId: 'city',\n          direction: DataGrid.DataGridUtils.SortDirection.DESC,\n        },\n      });\n      assert.isNotNull(component.shadowRoot);\n      await coordinator.done();\n      const cityHeader = getHeaderCellForColumnId(component.shadowRoot, 'city');\n      assert.strictEqual(cityHeader.getAttribute('aria-sort'), 'descending');\n    });\n  });\n\n  describeWithLocale('navigating with the keyboard', () => {\n    it('makes the first body cell focusable by default when no columns are sortable', async () => {\n      const component = renderDataGrid({rows, columns: columnsWithNoneSortable});\n      assert.isNotNull(component.shadowRoot);\n      await coordinator.done();\n      assertCurrentFocusedCellIs(component.shadowRoot, {column: 0, row: 1});\n    });\n\n    it('does not let the user navigate into the columns when no colums are sortable', async () => {\n      const component = renderDataGrid({rows, columns: columnsWithNoneSortable});\n      assert.isNotNull(component.shadowRoot);\n      await coordinator.done();\n      assertCurrentFocusedCellIs(component.shadowRoot, {column: 0, row: 1});\n      emulateUserKeyboardNavigation(component.shadowRoot, 'ArrowUp');\n      assertCurrentFocusedCellIs(component.shadowRoot, {column: 0, row: 1});\n    });\n\n    it('focuses the column header by default when it is sortable', async () => {\n      const component = renderDataGrid({rows, columns});\n      assert.isNotNull(component.shadowRoot);\n      await coordinator.done();\n      assertCurrentFocusedCellIs(component.shadowRoot, {column: 0, row: 0});\n    });\n\n    it('lets the user press the right arrow key to navigate right', async () => {\n      const component = renderDataGrid({rows, columns: columnsWithNoneSortable});\n      assert.isNotNull(component.shadowRoot);\n      await coordinator.done();\n      focusCurrentlyFocusableCell(component.shadowRoot);\n      emulateUserKeyboardNavigation(component.shadowRoot, 'ArrowRight');\n      await coordinator.done();\n      assertCurrentFocusedCellIs(component.shadowRoot, {column: 1, row: 1});\n    });\n\n    it('lets the user press the left arrow key to navigate left', async () => {\n      const component = renderDataGrid({rows, columns: columnsWithNoneSortable});\n      assert.isNotNull(component.shadowRoot);\n      await coordinator.done();\n      // Find a cell in the 2nd column to click to focus\n      await emulateUserFocusingCellAt(component.shadowRoot, {column: 1, row: 1});\n      emulateUserKeyboardNavigation(component.shadowRoot, 'ArrowLeft');\n      await coordinator.done();\n      assertCurrentFocusedCellIs(component.shadowRoot, {column: 0, row: 1});\n    });\n\n    it('does not let the user move left if they are at the first visible column', async () => {\n      const component = renderDataGrid({rows, columns: columnsWithNoneSortable});\n      assert.isNotNull(component.shadowRoot);\n      await coordinator.done();\n      focusCurrentlyFocusableCell(component.shadowRoot);\n      assertCurrentFocusedCellIs(component.shadowRoot, {column: 0, row: 1});\n      emulateUserKeyboardNavigation(component.shadowRoot, 'ArrowLeft');\n      assertCurrentFocusedCellIs(component.shadowRoot, {column: 0, row: 1});\n    });\n\n    it('lets the user press the down arrow key to navigate down', async () => {\n      const component = renderDataGrid({rows, columns: columnsWithNoneSortable});\n      assert.isNotNull(component.shadowRoot);\n      await coordinator.done();\n      focusCurrentlyFocusableCell(component.shadowRoot);\n      emulateUserKeyboardNavigation(component.shadowRoot, 'ArrowDown');\n      await coordinator.done();\n      assertCurrentFocusedCellIs(component.shadowRoot, {column: 0, row: 2});\n    });\n\n    it('keeps the user where they are if they are on the last row', async () => {\n      const component = renderDataGrid({rows, columns: columnsWithNoneSortable});\n      assert.isNotNull(component.shadowRoot);\n      await coordinator.done();\n      focusCurrentlyFocusableCell(component.shadowRoot);\n      // Go down to row 2\n      emulateUserKeyboardNavigation(component.shadowRoot, 'ArrowDown');\n      await coordinator.done();\n      // Go down to row 3 (the last row)\n      emulateUserKeyboardNavigation(component.shadowRoot, 'ArrowDown');\n      await coordinator.done();\n      assertCurrentFocusedCellIs(component.shadowRoot, {column: 0, row: 3});\n      // Try going down again\n      emulateUserKeyboardNavigation(component.shadowRoot, 'ArrowDown');\n      await coordinator.done();\n      assertCurrentFocusedCellIs(component.shadowRoot, {column: 0, row: 3});\n    });\n\n    it('lets the user press the up arrow key to navigate up', async () => {\n      const component = renderDataGrid({rows, columns: columnsWithNoneSortable});\n      assert.isNotNull(component.shadowRoot);\n      await coordinator.done();\n\n      await emulateUserFocusingCellAt(component.shadowRoot, {column: 1, row: 2});\n      emulateUserKeyboardNavigation(component.shadowRoot, 'ArrowUp');\n      await coordinator.done();\n      assertCurrentFocusedCellIs(component.shadowRoot, {column: 1, row: 1});\n    });\n\n    it('does not let the user move up into the column row when none are sortable', async () => {\n      const component = renderDataGrid({rows, columns: columnsWithNoneSortable});\n      assert.isNotNull(component.shadowRoot);\n      await coordinator.done();\n      focusCurrentlyFocusableCell(component.shadowRoot);\n      emulateUserKeyboardNavigation(component.shadowRoot, 'ArrowUp');\n      await coordinator.done();\n      assertCurrentFocusedCellIs(component.shadowRoot, {column: 0, row: 1});\n    });\n\n    it('does let the user move up into the column row when they are sortable', async () => {\n      const component = renderDataGrid({rows, columns});\n      assert.isNotNull(component.shadowRoot);\n      await coordinator.done();\n      const table = component.shadowRoot.querySelector('table');\n      assert.instanceOf(table, HTMLTableElement);\n      await emulateUserFocusingCellAt(component.shadowRoot, {column: 0, row: 1});\n      emulateUserKeyboardNavigation(component.shadowRoot, 'ArrowUp');\n      await coordinator.done();\n      assertCurrentFocusedCellIs(component.shadowRoot, {column: 0, row: 0});\n    });\n\n    it('correctly skips hidden columns', async () => {\n      const columnsWithCountryHidden = createColumns();\n      columnsWithCountryHidden[1].visible = false;\n      const component = renderDataGrid({rows, columns: columnsWithCountryHidden});\n      assert.isNotNull(component.shadowRoot);\n      await coordinator.done();\n      focusCurrentlyFocusableCell(component.shadowRoot);\n      emulateUserKeyboardNavigation(component.shadowRoot, 'ArrowRight');\n      await coordinator.done();\n      // It's column 2 here because column 1 is hidden\n      assertCurrentFocusedCellIs(component.shadowRoot, {column: 2, row: 0});\n    });\n\n    it('correctly skips hidden rows when navigating from the column header', async () => {\n      const rowsWithLondonHidden = createRows();\n      rowsWithLondonHidden[0].hidden = true;\n      const component = renderDataGrid({rows: rowsWithLondonHidden, columns});\n      assert.isNotNull(component.shadowRoot);\n      await coordinator.done();\n      focusCurrentlyFocusableCell(component.shadowRoot);\n      assertCurrentFocusedCellIs(component.shadowRoot, {column: 0, row: 0});\n      emulateUserKeyboardNavigation(component.shadowRoot, 'ArrowDown');\n      await coordinator.done();\n      // It's row 2 here because row 1 is hidden\n      assertCurrentFocusedCellIs(component.shadowRoot, {column: 0, row: 2});\n    });\n\n    it('correctly skips hidden rows when navigating from a body row to another', async () => {\n      const rowsWithMunichHidden = createRows();\n      rowsWithMunichHidden[1].hidden = true;\n      const component = renderDataGrid({rows: rowsWithMunichHidden, columns: columnsWithNoneSortable});\n      assert.isNotNull(component.shadowRoot);\n      await coordinator.done();\n      focusCurrentlyFocusableCell(component.shadowRoot);\n      emulateUserKeyboardNavigation(component.shadowRoot, 'ArrowDown');\n      await coordinator.done();\n      // It's 3 here because row 2 is hidden\n      assertCurrentFocusedCellIs(component.shadowRoot, {column: 0, row: 3});\n    });\n\n    it('correctly marks the first visible row cell as focusable when the first row is hidden', async () => {\n      const rowsWithLondonHidden = createRows();\n      rowsWithLondonHidden[0].hidden = true;\n      const component = renderDataGrid({rows: rowsWithLondonHidden, columns: columnsWithNoneSortable});\n      assert.isNotNull(component.shadowRoot);\n      await coordinator.done();\n      focusCurrentlyFocusableCell(component.shadowRoot);\n      assertCurrentFocusedCellIs(component.shadowRoot, {column: 0, row: 2});\n    });\n\n    it('re-adjusts the focused cell if a re-render puts that cell out of bounds', async () => {\n      const component = renderDataGrid({rows: createRows(), columns: columnsWithNoneSortable});\n      assert.isNotNull(component.shadowRoot);\n      await coordinator.done();\n      focusCurrentlyFocusableCell(component.shadowRoot);\n      await coordinator.done();\n      emulateUserKeyboardNavigation(component.shadowRoot, 'ArrowDown');\n      await coordinator.done();\n      emulateUserKeyboardNavigation(component.shadowRoot, 'ArrowDown');\n      await coordinator.done();\n      assertCurrentFocusedCellIs(component.shadowRoot, {column: 0, row: 3});\n      const rowsWithLastRemoved = createRows();\n      rowsWithLastRemoved.splice(2);\n      component.data = {\n        columns: columnsWithNoneSortable,\n        rows: rowsWithLastRemoved,\n        activeSort: null,\n      };\n      await coordinator.done();\n      assertCurrentFocusedCellIs(component.shadowRoot, {column: 0, row: 2});\n    });\n  });\n  describeWithLocale('emits an event', () => {\n    it('when the user clicks a column header', async () => {\n      const component = renderDataGrid({rows, columns});\n      assert.isNotNull(component.shadowRoot);\n      await coordinator.done();\n\n      const columnHeaderClickEvent =\n          getEventPromise<DataGrid.DataGridEvents.ColumnHeaderClickEvent>(component, 'columnheaderclick');\n      const cityColumn = getHeaderCellForColumnId(component.shadowRoot, 'city');\n      dispatchClickEvent(cityColumn);\n\n      const clickEvent = await columnHeaderClickEvent;\n      assert.deepEqual(clickEvent.data, {column: columns[0], columnIndex: 0});\n    });\n\n    it('when the user \"clicks\" a column header with the enter key', async () => {\n      const component = renderDataGrid({rows, columns});\n      assert.isNotNull(component.shadowRoot);\n      await coordinator.done();\n\n      const columnHeaderClickEvent =\n          getEventPromise<DataGrid.DataGridEvents.ColumnHeaderClickEvent>(component, 'columnheaderclick');\n      const focusableCell = getFocusableCell(component.shadowRoot);\n      // Check that the focusable cell is the header cell as it's a table with\n      // sortable columns.\n      assert.strictEqual(focusableCell.getAttribute('data-row-index'), '0');\n      assert.strictEqual(focusableCell.getAttribute('data-col-index'), '0');\n      focusableCell.focus();\n      await coordinator.done();\n\n      const table = component.shadowRoot.querySelector('table');\n      assert.instanceOf(table, HTMLTableElement);\n      dispatchKeyDownEvent(table, {key: 'Enter'});\n      const clickEvent = await columnHeaderClickEvent;\n      assert.deepEqual(clickEvent.data, {column: columns[0], columnIndex: 0});\n    });\n\n    it('when the user focuses a cell', async () => {\n      const component = renderDataGrid({rows, columns: columnsWithNoneSortable});\n      assert.isNotNull(component.shadowRoot);\n      await coordinator.done();\n\n      const bodyCellFocusedEvent =\n          getEventPromise<DataGrid.DataGridEvents.BodyCellFocusedEvent>(component, 'cellfocused');\n      const focusableCell = getFocusableCell(component.shadowRoot);\n      focusableCell.focus();\n      const cellFocusedEvent = await bodyCellFocusedEvent;\n      assert.deepEqual(cellFocusedEvent.data, {cell: rows[0].cells[0], row: rows[0]});\n    });\n\n    it('when the user hovers over a row', async () => {\n      const component = renderDataGrid({rows, columns});\n      assert.isNotNull(component.shadowRoot);\n      await coordinator.done();\n\n      const rowHoveredEvent = getEventPromise<DataGrid.DataGridEvents.RowMouseEnterEvent>(component, 'rowmouseenter');\n      const rowLeaveEvent = getEventPromise<DataGrid.DataGridEvents.RowMouseLeaveEvent>(component, 'rowmouseleave');\n\n      const row = getBodyRowByAriaIndex(component.shadowRoot, 1);\n      row.dispatchEvent(new MouseEvent('mouseenter'));\n\n      const hoverEvent = await rowHoveredEvent;\n      assert.deepEqual(hoverEvent.data, {row: rows[0]});\n\n      row.dispatchEvent(new MouseEvent('mouseleave'));\n      const leaveEvent = await rowLeaveEvent;\n      assert.deepEqual(leaveEvent.data, {row: rows[0]});\n    });\n  });\n\n  describe('adding new rows', () => {\n    it('only has one DOM mutation to add the new row', async () => {\n      const component = renderDataGrid({rows, columns});\n      assert.isNotNull(component.shadowRoot);\n      await coordinator.done();\n\n      await withMutations(\n          [\n            // We expect one <tr> to be added\n            {target: 'tr', max: 1},\n          ],\n          component.shadowRoot, async shadowRoot => {\n            const newRow = {\n              cells: [\n                {columnId: 'city', value: 'Berlin'},\n                {columnId: 'country', value: 'Germany'},\n                {columnId: 'population', value: '3.66m'},\n              ],\n            };\n\n            component.data = {\n              columns,\n              rows: [...rows, newRow],\n              activeSort: null,\n            };\n\n            await coordinator.done();\n\n            const newRowValues = getValuesOfBodyRowByAriaIndex(shadowRoot, 4);\n            assert.deepEqual(newRowValues, ['Berlin', 'Germany', '3.66m']);\n          });\n    });\n  });\n\n  describe('marking a row as selected', () => {\n    it('marks the row as selected when the user clicks on a cell', async () => {\n      const component = renderDataGrid({rows, columns: columnsWithNoneSortable});\n      assert.isNotNull(component.shadowRoot);\n      await coordinator.done();\n      // Ensure no row is selected before the user clicks\n      let selectedRow = component.shadowRoot.querySelector('tr.selected');\n      assert.isNull(selectedRow);\n      // // Focus the very first cell\n      await emulateUserFocusingCellAt(component.shadowRoot, {column: 0, row: 1});\n      await coordinator.done();\n      // // Ensure the row is updated to be marked as selected\n      selectedRow = component.shadowRoot.querySelector('tbody tr.selected');\n      assert.instanceOf(selectedRow, HTMLTableRowElement);\n    });\n\n    it('persists over re-renders when not focused', async () => {\n      const rows = createRows();\n      const component = renderDataGrid({rows, columns: columnsWithNoneSortable});\n      assert.isNotNull(component.shadowRoot);\n      await coordinator.done();\n\n      focusCurrentlyFocusableCell(component.shadowRoot);\n      await coordinator.done();\n\n      const wrapper = component.shadowRoot.querySelector('.wrapping-container');\n      if (wrapper) {\n        dispatchFocusOutEvent(wrapper);\n      }\n      await coordinator.done();\n      assertSelectedRowIs(component.shadowRoot, 1);\n\n      rows.push({\n        cells: [\n          {columnId: 'city', value: 'Vienna'},\n          {columnId: 'country', value: 'Austria'},\n          {columnId: 'population', value: '1.92m'},\n        ],\n      });\n      component.data = {\n        columns: columnsWithNoneSortable,\n        rows,\n        activeSort: null,\n      };\n      await coordinator.done();\n      assertSelectedRowIs(component.shadowRoot, 1);\n    });\n  });\n\n  describe('DataGrid.DataGridUtils.calculateColumnWidthPercentageFromWeighting', () => {\n    const makeColumnsWithWeightings = (...weights: number[]): DataGrid.DataGridUtils.Column[] => {\n      return weights.map((weight, index) => {\n        return {\n          id: `column-${index}` as Lowercase<string>,\n          title: `Column ${index}`,\n          sortable: false,\n          visible: true,\n          hideable: false,\n          widthWeighting: weight,\n        };\n      });\n    };\n\n    it('correctly divides columns based on the weighting', async () => {\n      const columns = makeColumnsWithWeightings(1, 1);\n      const calculatedWidths =\n          columns.map(col => DataGrid.DataGridUtils.calculateColumnWidthPercentageFromWeighting(columns, col.id));\n      assert.deepEqual(calculatedWidths, [50, 50]);\n    });\n\n    it('correctly divides and rounds when the % are not whole numbers', async () => {\n      const columns = makeColumnsWithWeightings(1, 1, 1);\n      const calculatedWidths =\n          columns.map(col => DataGrid.DataGridUtils.calculateColumnWidthPercentageFromWeighting(columns, col.id));\n      assert.deepEqual(calculatedWidths, [33, 33, 33]);\n    });\n\n    it('does not include hidden columns when calculating weighting', async () => {\n      const columns = makeColumnsWithWeightings(1, 1, 1);\n      columns[0].visible = false;\n      const calculatedWidths =\n          columns.map(col => DataGrid.DataGridUtils.calculateColumnWidthPercentageFromWeighting(columns, col.id));\n      assert.deepEqual(calculatedWidths, [0, 50, 50]);\n    });\n\n    it('errors if a column has a weighting of less than 1', async () => {\n      const columns = makeColumnsWithWeightings(0.5);\n      assert.throws(\n          () => DataGrid.DataGridUtils.calculateColumnWidthPercentageFromWeighting(columns, columns[0].id),\n          'Error with column column-0: width weightings must be >= 1.');\n    });\n  });\n\n  describe('#DataGrid.DataGridUtils.handleArrowKeyNavigation util', () => {\n    const makeColumns = (): DataGrid.DataGridUtils.Column[] => {\n      return [\n        {id: 'a', title: 'A', sortable: false, visible: true, hideable: false, widthWeighting: 1},\n        {id: 'b', title: 'B', sortable: false, visible: true, hideable: false, widthWeighting: 1},\n        {id: 'c', title: 'C', sortable: false, visible: true, hideable: false, widthWeighting: 1},\n      ];\n    };\n\n    const makeRows = (): DataGrid.DataGridUtils.Row[] => {\n      return [\n        {\n          cells: [\n            {columnId: 'a', value: 'a: row 1'},\n            {columnId: 'b', value: 'b: row 1'},\n            {columnId: 'c', value: 'c: row 1'},\n          ],\n          hidden: false,\n        },\n        {\n          cells: [\n            {columnId: 'a', value: 'a: row 2'},\n            {columnId: 'b', value: 'b: row 2'},\n            {columnId: 'c', value: 'c: row 2'},\n          ],\n          hidden: false,\n        },\n        {\n          cells: [\n            {columnId: 'a', value: 'a: row 3'},\n            {columnId: 'b', value: 'b: row 3'},\n            {columnId: 'c', value: 'c: row 3'},\n          ],\n          hidden: false,\n        },\n      ];\n    };\n\n    describe('navigating left', () => {\n      it('does not let the user move further left than the first column', async () => {\n        const newFocusedCell = DataGrid.DataGridUtils.handleArrowKeyNavigation({\n          key: Platform.KeyboardUtilities.ArrowKey.LEFT,\n          currentFocusedCell: [0, 1],\n          columns: makeColumns(),\n          rows: makeRows(),\n        });\n        assert.deepEqual(newFocusedCell, [0, 1]);\n      });\n\n      it('does not let the user move left if there are no visible columns to the left', async () => {\n        const columnsWithFirstHidden = makeColumns();\n        columnsWithFirstHidden[0].visible = false;\n        const newFocusedCell = DataGrid.DataGridUtils.handleArrowKeyNavigation({\n          key: Platform.KeyboardUtilities.ArrowKey.LEFT,\n          currentFocusedCell: [1, 1],\n          columns: columnsWithFirstHidden,\n          rows: makeRows(),\n        });\n        assert.deepEqual(newFocusedCell, [1, 1]);\n      });\n\n      it('lets the user move left if the column to the left is visible', async () => {\n        const newFocusedCell = DataGrid.DataGridUtils.handleArrowKeyNavigation({\n          key: Platform.KeyboardUtilities.ArrowKey.LEFT,\n          currentFocusedCell: [1, 1],\n          columns: makeColumns(),\n          rows: makeRows(),\n        });\n        assert.deepEqual(newFocusedCell, [0, 1]);\n      });\n\n      it('correctly skips a hidden column to get to the next left visible column', async () => {\n        const withSecondColumnHidden = makeColumns();\n        withSecondColumnHidden[1].visible = false;\n        const newFocusedCell = DataGrid.DataGridUtils.handleArrowKeyNavigation({\n          key: Platform.KeyboardUtilities.ArrowKey.LEFT,\n          currentFocusedCell: [2, 1],\n          columns: withSecondColumnHidden,\n          rows,\n        });\n        assert.deepEqual(newFocusedCell, [0, 1]);\n      });\n    });\n\n    describe('navigating right', () => {\n      it('does not let the user move further right than the last column', async () => {\n        const newFocusedCell = DataGrid.DataGridUtils.handleArrowKeyNavigation({\n          key: Platform.KeyboardUtilities.ArrowKey.RIGHT,\n          currentFocusedCell: [2, 1],\n          columns: makeColumns(),\n          rows: makeRows(),\n        });\n        assert.deepEqual(newFocusedCell, [2, 1]);\n      });\n\n      it('does not let the user move right if there are no visible columns to the right', async () => {\n        const columnsWithLastHidden = makeColumns();\n        columnsWithLastHidden[2].visible = false;\n        const newFocusedCell = DataGrid.DataGridUtils.handleArrowKeyNavigation({\n          key: Platform.KeyboardUtilities.ArrowKey.RIGHT,\n          currentFocusedCell: [1, 1],\n          columns: columnsWithLastHidden,\n          rows: makeRows(),\n        });\n        assert.deepEqual(newFocusedCell, [1, 1]);\n      });\n\n      it('lets the user move right if the column to the right is visible', async () => {\n        const newFocusedCell = DataGrid.DataGridUtils.handleArrowKeyNavigation({\n          key: Platform.KeyboardUtilities.ArrowKey.RIGHT,\n          currentFocusedCell: [1, 1],\n          columns: makeColumns(),\n          rows: makeRows(),\n        });\n        assert.deepEqual(newFocusedCell, [2, 1]);\n      });\n\n      it('correctly skips a hidden column to get to the next right visible column', async () => {\n        const withSecondColumnHidden = makeColumns();\n        withSecondColumnHidden[1].visible = false;\n        const newFocusedCell = DataGrid.DataGridUtils.handleArrowKeyNavigation({\n          key: Platform.KeyboardUtilities.ArrowKey.RIGHT,\n          currentFocusedCell: [0, 1],\n          columns: withSecondColumnHidden,\n          rows,\n        });\n        assert.deepEqual(newFocusedCell, [2, 1]);\n      });\n    });\n\n    describe('navigating up', () => {\n      it('does not let the user go into the columns row when none are sortable', async () => {\n        const newFocusedCell = DataGrid.DataGridUtils.handleArrowKeyNavigation({\n          key: Platform.KeyboardUtilities.ArrowKey.UP,\n          currentFocusedCell: [0, 1],\n          columns: makeColumns(),\n          rows: makeRows(),\n        });\n        assert.deepEqual(newFocusedCell, [0, 1]);\n      });\n\n      describe('when at least one column is sortable', () => {\n        const sortableColumns = makeColumns();\n        sortableColumns.forEach(col => {\n          col.sortable = true;\n        });\n\n        it('does let the user go into the columns row', async () => {\n          const newFocusedCell = DataGrid.DataGridUtils.handleArrowKeyNavigation({\n            key: Platform.KeyboardUtilities.ArrowKey.UP,\n            currentFocusedCell: [0, 1],\n            columns: sortableColumns,\n            rows: makeRows(),\n          });\n          assert.deepEqual(newFocusedCell, [0, 0]);\n        });\n\n        it('does not let the user go up if they are in the column header', async () => {\n          const newFocusedCell = DataGrid.DataGridUtils.handleArrowKeyNavigation({\n            key: Platform.KeyboardUtilities.ArrowKey.UP,\n            currentFocusedCell: [0, 0],\n            columns: sortableColumns,\n            rows: makeRows(),\n          });\n          assert.deepEqual(newFocusedCell, [0, 0]);\n        });\n\n        it('correctly skips a hidden row to navigate into the columns row', async () => {\n          const rowsWithFirstHidden = makeRows();\n          rowsWithFirstHidden[0].hidden = true;\n          const newFocusedCell = DataGrid.DataGridUtils.handleArrowKeyNavigation({\n            key: Platform.KeyboardUtilities.ArrowKey.UP,\n            currentFocusedCell: [0, 2],\n            columns: sortableColumns,\n            rows: rowsWithFirstHidden,\n          });\n          assert.deepEqual(newFocusedCell, [0, 0]);\n        });\n      });\n\n      it('correctly skips a hidden row while navigating through the body rows', async () => {\n        const rowsWithSecondHidden = makeRows();\n        rowsWithSecondHidden[1].hidden = true;\n        const newFocusedCell = DataGrid.DataGridUtils.handleArrowKeyNavigation({\n          key: Platform.KeyboardUtilities.ArrowKey.UP,\n          currentFocusedCell: [0, 3],\n          columns: makeColumns(),\n          rows: rowsWithSecondHidden,\n        });\n        assert.deepEqual(newFocusedCell, [0, 1]);\n      });\n\n      it('does not let the user move up if no columns are sortable and all rows above are hidden', async () => {\n        const rowsWithFirstAndSecondHidden = makeRows();\n        rowsWithFirstAndSecondHidden[0].hidden = true;\n        rowsWithFirstAndSecondHidden[1].hidden = true;\n        const newFocusedCell = DataGrid.DataGridUtils.handleArrowKeyNavigation({\n          key: Platform.KeyboardUtilities.ArrowKey.UP,\n          currentFocusedCell: [0, 3],\n          columns: makeColumns(),\n          rows: rowsWithFirstAndSecondHidden,\n        });\n        assert.deepEqual(newFocusedCell, [0, 3]);\n      });\n    });\n\n    describe('navigating down', () => {\n      describe('when at least one column is sortable', () => {\n        const sortableColumns = makeColumns();\n        sortableColumns.forEach(col => {\n          col.sortable = true;\n        });\n\n        it('lets the user navigate from the columns into the body', async () => {\n          const newFocusedCell = DataGrid.DataGridUtils.handleArrowKeyNavigation({\n            key: Platform.KeyboardUtilities.ArrowKey.DOWN,\n            currentFocusedCell: [0, 0],\n            columns: sortableColumns,\n            rows: makeRows(),\n          });\n          assert.deepEqual(newFocusedCell, [0, 1]);\n        });\n\n        it('correctly skips any hidden body rows to find the first visible one', async () => {\n          const rowsWithFirstHidden = makeRows();\n          rowsWithFirstHidden[0].hidden = true;\n          const newFocusedCell = DataGrid.DataGridUtils.handleArrowKeyNavigation({\n            key: Platform.KeyboardUtilities.ArrowKey.DOWN,\n            currentFocusedCell: [0, 0],\n            columns: sortableColumns,\n            rows: rowsWithFirstHidden,\n          });\n          assert.deepEqual(newFocusedCell, [0, 2]);\n        });\n      });\n\n      it('correctly skips a hidden row while navigating through the body rows', async () => {\n        const rowsWithSecondHidden = makeRows();\n        rowsWithSecondHidden[1].hidden = true;\n        const newFocusedCell = DataGrid.DataGridUtils.handleArrowKeyNavigation({\n          key: Platform.KeyboardUtilities.ArrowKey.DOWN,\n          currentFocusedCell: [0, 1],\n          columns: makeColumns(),\n          rows: rowsWithSecondHidden,\n        });\n        assert.deepEqual(newFocusedCell, [0, 3]);\n      });\n\n      it('does not let the user move down if all rows below are hidden', async () => {\n        const rowsWithFirstAndSecondHidden = makeRows();\n        rowsWithFirstAndSecondHidden[1].hidden = true;\n        rowsWithFirstAndSecondHidden[2].hidden = true;\n        const newFocusedCell = DataGrid.DataGridUtils.handleArrowKeyNavigation({\n          key: Platform.KeyboardUtilities.ArrowKey.DOWN,\n          currentFocusedCell: [0, 1],\n          columns: makeColumns(),\n          rows: rowsWithFirstAndSecondHidden,\n        });\n        assert.deepEqual(newFocusedCell, [0, 1]);\n      });\n\n      it('leaves the user where they are if no body rows are visible', async () => {\n        const rowsAllHidden = makeRows().map(row => {\n          row.hidden = true;\n          return row;\n        });\n        const sortableColumns = makeColumns().map(col => {\n          col.sortable = true;\n          return col;\n        });\n        const newFocusedCell = DataGrid.DataGridUtils.handleArrowKeyNavigation({\n          key: Platform.KeyboardUtilities.ArrowKey.DOWN,\n          currentFocusedCell: [0, 0],\n          columns: sortableColumns,\n          rows: rowsAllHidden,\n        });\n        assert.deepEqual(newFocusedCell, [0, 0]);\n      });\n\n      it('does not let the user move down if they are on the last row', async () => {\n        const newFocusedCell = DataGrid.DataGridUtils.handleArrowKeyNavigation({\n          key: Platform.KeyboardUtilities.ArrowKey.DOWN,\n          currentFocusedCell: [0, 3],\n          columns: makeColumns(),\n          rows: makeRows(),\n        });\n        assert.deepEqual(newFocusedCell, [0, 3]);\n      });\n    });\n  });\n\n  describe('DataGrid.DataGridUtils.getCellTitleFromCellContent', () => {\n    it('returns full cell content as title when content is short', async () => {\n      const title = DataGrid.DataGridUtils.getCellTitleFromCellContent('some shortish cell value');\n      assert.deepEqual(title, 'some shortish cell value');\n    });\n\n    it('returns truncated cell content as title when content is long', async () => {\n      const title = DataGrid.DataGridUtils.getCellTitleFromCellContent('This cell contains text which is a bit longer');\n      assert.deepEqual(title, 'This cell contains t…');\n    });\n  });\n});\n"]}