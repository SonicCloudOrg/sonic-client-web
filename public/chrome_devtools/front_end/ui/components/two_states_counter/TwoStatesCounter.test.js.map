{"version":3,"file":"TwoStatesCounter.test.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/components/two_states_counter/TwoStatesCounter.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {renderElementIntoDOM} from '../../../testing/DOMHelpers.js';\nimport * as Coordinator from '../render_coordinator/render_coordinator.js';\n\nimport * as TwoStatesCounter from './two_states_counter.js';\n\nconst coordinator = Coordinator.RenderCoordinator.RenderCoordinator.instance();\n\nconst ACTIVE_SELECTOR = '.active';\nconst INACTIVE_SELECTOR = '.inactive';\n\nasync function renderCounter(data: TwoStatesCounter.TwoStatesCounter.TwoStatesCounterData) {\n  const counter = new TwoStatesCounter.TwoStatesCounter.TwoStatesCounter();\n  renderElementIntoDOM(counter);\n\n  counter.data = data;\n  await coordinator.done();\n  return counter;\n}\n\nfunction assertContentAndTitleForPart(\n    counter: TwoStatesCounter.TwoStatesCounter.TwoStatesCounter, selector: string, content: string, title?: string) {\n  assert.isNotNull(counter.shadowRoot);\n  const activeCount = counter.shadowRoot.querySelector(selector);\n  assert.instanceOf(activeCount, HTMLSpanElement);\n  assert.strictEqual(activeCount.textContent?.trim(), `${content}`);\n  assert.strictEqual(activeCount.title, title ? `${title}` : '');\n}\n\ndescribe('TwoStatesCounter', () => {\n  it('renders a counter with active count only', async () => {\n    const data = {active: 3, inactive: 0, activeTitle: 'Num active'} as\n        TwoStatesCounter.TwoStatesCounter.TwoStatesCounterData;\n    const counter = await renderCounter(data);\n    assert.isNotNull(counter.shadowRoot);\n\n    assertContentAndTitleForPart(counter, ACTIVE_SELECTOR, `${data.active}`, data.activeTitle);\n    assert.isNull(counter.shadowRoot.querySelector(INACTIVE_SELECTOR));\n  });\n\n  it('renders a counter with inactive count only', async () => {\n    const data = {active: 0, inactive: 10, inactiveTitle: 'Num inactive'} as\n        TwoStatesCounter.TwoStatesCounter.TwoStatesCounterData;\n    const counter = await renderCounter(data);\n    assert.isNotNull(counter.shadowRoot);\n\n    assertContentAndTitleForPart(counter, INACTIVE_SELECTOR, `${data.inactive}`, data.inactiveTitle);\n    assert.isNull(counter.shadowRoot.querySelector(ACTIVE_SELECTOR));\n  });\n\n  it('renders a counter with active and inactive counts', async () => {\n    const data = {active: 2, inactive: 3, activeTitle: 'Num active', inactiveTitle: 'Num inactive'} as\n        TwoStatesCounter.TwoStatesCounter.TwoStatesCounterData;\n    const counter = await renderCounter(data);\n    assert.isNotNull(counter.shadowRoot);\n\n    assertContentAndTitleForPart(counter, ACTIVE_SELECTOR, `${data.active}`, data.activeTitle);\n    assertContentAndTitleForPart(counter, INACTIVE_SELECTOR, `${data.inactive}`, data.inactiveTitle);\n  });\n\n  it('renders nothing if both counts are zero', async () => {\n    const data = {active: 0, inactive: 0, inactiveTitle: 'Num inactive'} as\n        TwoStatesCounter.TwoStatesCounter.TwoStatesCounterData;\n    const counter = await renderCounter(data);\n    assert.isNotNull(counter.shadowRoot);\n\n    assert.isNull(counter.shadowRoot.querySelector(INACTIVE_SELECTOR));\n    assert.isNull(counter.shadowRoot.querySelector(ACTIVE_SELECTOR));\n  });\n});\n"]}