{"version":3,"file":"TreeOutline.test.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/components/tree_outline/TreeOutline.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {\n  dispatchClickEvent,\n  dispatchKeyDownEvent,\n  dispatchMouseOutEvent,\n  dispatchMouseOverEvent,\n  getEventPromise,\n  renderElementIntoDOM,\n  stripLitHtmlCommentNodes,\n} from '../../../testing/DOMHelpers.js';\nimport * as LitHtml from '../../lit-html/lit-html.js';\nimport * as Coordinator from '../render_coordinator/render_coordinator.js';\n\nimport * as TreeOutline from './tree_outline.js';\n\nconst coordinator = Coordinator.RenderCoordinator.RenderCoordinator.instance();\n\nasync function renderTreeOutline<TreeNodeDataType>({\n  tree,\n  defaultRenderer,\n  filter,\n}: {\n  tree: TreeOutline.TreeOutline.TreeOutlineData<TreeNodeDataType>['tree'],\n  // defaultRenderer is required usually but here we make it optinal and provide a default one as part of renderTreeOutline, to save duplication in every single test where we want to use a simple string renderer.\n  defaultRenderer?: TreeOutline.TreeOutline.TreeOutlineData<TreeNodeDataType>['defaultRenderer'],\n  filter?: TreeOutline.TreeOutline.TreeOutlineData<TreeNodeDataType>['filter'],\n}): Promise<{\n  component: TreeOutline.TreeOutline.TreeOutline<TreeNodeDataType>,\n  shadowRoot: ShadowRoot,\n}> {\n  const component = new TreeOutline.TreeOutline.TreeOutline<TreeNodeDataType>();\n  const data: TreeOutline.TreeOutline.TreeOutlineData<TreeNodeDataType> = {\n    tree,\n    defaultRenderer: defaultRenderer ||\n        ((node: TreeOutline.TreeOutlineUtils.TreeNode<TreeNodeDataType>) => LitHtml.html`${node.treeNodeData}`),\n    filter,\n  };\n  component.data = data;\n  renderElementIntoDOM(component);\n  assert.isNotNull(component.shadowRoot);\n  await coordinator.done();\n  return {\n    component,\n    shadowRoot: component.shadowRoot,\n  };\n}\n\n/**\n * Wait for a certain number of children are rendered. We need this as the\n * component uses LitHtml's until directive, which is async and not within the\n * render coordinator's control.\n */\nasync function waitForRenderedTreeNodeCount(shadowRoot: ShadowRoot, expectedNodeCount: number): Promise<void> {\n  const actualNodeCount = shadowRoot.querySelectorAll('li[role=\"treeitem\"]').length;\n  if (actualNodeCount === expectedNodeCount) {\n    return;\n  }\n\n  await new Promise<void>(resolve => {\n    requestAnimationFrame(async () => {\n      await waitForRenderedTreeNodeCount(shadowRoot, expectedNodeCount);\n      resolve();\n    });\n  });\n}\n\nfunction getFocusableTreeNode(shadowRoot: ShadowRoot): HTMLLIElement {\n  const focusableNode = shadowRoot.querySelector<HTMLLIElement>('li[role=\"treeitem\"][tabindex=\"0\"]');\n  if (!focusableNode) {\n    throw new Error('Could not find focused node in Tree shadow root');\n  }\n  return focusableNode;\n}\n\n/*\nThe structure represented by basicTreeData is:\n\n- Offices\n  - Europe\n    - UK\n      - LON\n        - 6PS\n        - CSG\n        - BEL\n    - Germany\n      - MUC\n      - BER\n- Products\n  - Chrome\n  - YouTube\n  - Drive\n  - Calendar\n*/\n\n// These node is pulled out as we test expandAndSelectTreeNode and getPathToTreeNode with them.\nconst nodeBelgraveHouse = {\n  treeNodeData: 'BEL',\n  id: 'BEL',\n};\n\nconst nodeLondon = {\n  treeNodeData: 'LON',\n  id: 'LON',\n  children: async () => [{treeNodeData: '6PS', id: '6PS'}, {treeNodeData: 'CSG', id: 'CSG'}, nodeBelgraveHouse],\n};\n\nconst nodeUK = {\n  treeNodeData: 'UK',\n  id: 'UK',\n  children: async () => [nodeLondon],\n};\n\nconst nodeEurope = {\n  treeNodeData: 'Europe',\n  id: 'Europe',\n  children: async () => [nodeUK, {\n    treeNodeData: 'Germany',\n    id: 'Germany',\n    children: async () => [{treeNodeData: 'MUC', id: 'MUC'}, {treeNodeData: 'BER', id: 'BER'}],\n  }],\n};\n\nconst nodeOffices = {\n  treeNodeData: 'Offices',\n  id: 'Offices',\n  children: async () => [nodeEurope],\n};\n\nconst basicTreeData: TreeOutline.TreeOutlineUtils.TreeNode<string>[] = [\n  nodeOffices,\n  {\n    treeNodeData: 'Products',\n    id: '1',\n    children: async () =>\n        [{\n          treeNodeData: 'Chrome',\n          id: '2',\n        },\n         {\n           treeNodeData: 'YouTube',\n           id: '3',\n         },\n         {\n           treeNodeData: 'Drive',\n           id: '4',\n         },\n         {\n           treeNodeData: 'Calendar',\n           id: '5',\n         }],\n  },\n];\n\n/*\nThe structure represented by nodeAustralia is:\n\n- Australia\n  - SA\n    - Adelaide\n      - Toorak Gardens\n      - Woodville South\n      - Gawler\n  - NSW\n    - Glebe\n    - Newtown\n    - Camperdown\n*/\n\nconst nodeAustralia = {\n  treeNodeData: 'Australia',\n  id: 'australia',\n  children: async () =>\n      [{\n        treeNodeData: 'SA',\n        id: 'sa',\n        children: async () =>\n            [{\n              treeNodeData: 'Adelaide',\n              id: 'adelaide',\n              children: async () =>\n                  [{treeNodeData: 'Toorak Gardens', id: 'toorak'},\n                   {treeNodeData: 'Woodville South', id: 'woodville'},\n                   {treeNodeData: 'Gawler', id: 'gawler'},\n],\n            },\n],\n      },\n       {\n         treeNodeData: 'NSW',\n         id: 'nsw',\n         children: async () =>\n             [{treeNodeData: 'Glebe', id: 'glebe'},\n              {treeNodeData: 'Newtown', id: 'newtown'},\n              {treeNodeData: 'Camperdown', id: 'camperdown'},\n],\n       },\n],\n};\n\nconst NODE_COUNT_BASIC_DATA_FULLY_EXPANDED = 15;\nconst NODE_COUNT_BASIC_DATA_DEFAULT_EXPANDED = 12;\n\ninterface VisibleTreeNodeFromDOM {\n  renderedKey: string;\n  children?: VisibleTreeNodeFromDOM[];\n}\n\n/**\n * Converts the nodes into a tree structure that we can assert against.\n */\nfunction visibleNodesToTree(shadowRoot: ShadowRoot): VisibleTreeNodeFromDOM[] {\n  const tree: VisibleTreeNodeFromDOM[] = [];\n\n  function buildTreeNode(node: HTMLLIElement): VisibleTreeNodeFromDOM {\n    const item: VisibleTreeNodeFromDOM = {\n      renderedKey: nodeKeyInnerHTML(node),\n    };\n\n    if (node.getAttribute('aria-expanded') && node.getAttribute('aria-expanded') === 'true') {\n      item.children = [];\n      const childNodes = node.querySelectorAll<HTMLLIElement>(':scope > ul[role=\"group\"]>li');\n      for (const child of childNodes) {\n        item.children.push(buildTreeNode(child));\n      }\n    }\n\n    return item;\n  }\n  const rootNodes = shadowRoot.querySelectorAll<HTMLLIElement>('ul[role=\"tree\"]>li');\n  for (const root of rootNodes) {\n    tree.push(buildTreeNode(root));\n  }\n  return tree;\n}\n\nfunction treeNodeKeyText(node: HTMLLIElement) {\n  const keyNode = node.querySelector('[data-node-key]');\n  if (!keyNode) {\n    throw new Error('Found tree node without a key within it.');\n  }\n  return keyNode.getAttribute('data-node-key') || '';\n}\n\nfunction nodeKeyInnerHTML(node: HTMLLIElement) {\n  const keyNode = node.querySelector('[data-node-key]');\n  if (!keyNode) {\n    throw new Error('Found tree node without a key within it.');\n  }\n  return stripLitHtmlCommentNodes(keyNode.innerHTML);\n}\n\nfunction getVisibleTreeNodeByText(shadowRoot: ShadowRoot, text: string): HTMLLIElement {\n  const nodes = shadowRoot.querySelectorAll<HTMLLIElement>('li[role=\"treeitem\"]');\n  const matchingNode = Array.from(nodes).find(node => {\n    return treeNodeKeyText(node) === text;\n  });\n\n  if (!matchingNode) {\n    throw new Error(`Could not find tree item with text ${text}.`);\n  }\n  return matchingNode;\n}\n\ndescribe('TreeOutline', () => {\n  it('renders with all non-root nodes hidden by default', async () => {\n    const {shadowRoot} = await renderTreeOutline({\n      tree: basicTreeData,\n    });\n    const visibleItems = shadowRoot.querySelectorAll<HTMLLIElement>('li[role=\"treeitem\"]');\n    assert.lengthOf(visibleItems, 2);\n    const itemText1 = treeNodeKeyText(visibleItems[0]);\n    const itemText2 = treeNodeKeyText(visibleItems[1]);\n    assert.strictEqual(itemText1, 'Offices');\n    assert.strictEqual(itemText2, 'Products');\n  });\n\n  it('expands a node when the arrow icon is clicked', async () => {\n    const {shadowRoot} = await renderTreeOutline({\n      tree: basicTreeData,\n    });\n    const rootNode = getVisibleTreeNodeByText(shadowRoot, 'Offices');\n    const arrowIcon = rootNode.querySelector<HTMLSpanElement>('.arrow-icon');\n    assert.instanceOf(arrowIcon, HTMLSpanElement);\n    dispatchClickEvent(arrowIcon);\n    await waitForRenderedTreeNodeCount(shadowRoot, 3);\n    const visibleTree = visibleNodesToTree(shadowRoot);\n    assert.deepEqual(visibleTree, [\n      {renderedKey: 'Offices', children: [{renderedKey: 'Europe'}]},\n      {renderedKey: 'Products'},\n    ]);\n  });\n\n  it('does not expand nodes when clicking outside of the arrow by default', async () => {\n    const {shadowRoot} = await renderTreeOutline({\n      tree: basicTreeData,\n    });\n    const rootNode = getVisibleTreeNodeByText(shadowRoot, 'Offices');\n    dispatchClickEvent(rootNode);\n    await waitForRenderedTreeNodeCount(shadowRoot, 2);\n    const visibleTree = visibleNodesToTree(shadowRoot);\n    assert.deepEqual(visibleTree, [\n      {renderedKey: 'Offices'},\n      {renderedKey: 'Products'},\n    ]);\n  });\n\n  it('can be configured to expand nodes when any part of the node is clicked', async () => {\n    const {component, shadowRoot} = await renderTreeOutline({\n      tree: basicTreeData,\n    });\n    component.setAttribute('clickabletitle', '');\n    const rootNode = getVisibleTreeNodeByText(shadowRoot, 'Offices');\n    dispatchClickEvent(rootNode);\n    await waitForRenderedTreeNodeCount(shadowRoot, 3);\n    const visibleTree = visibleNodesToTree(shadowRoot);\n    assert.deepEqual(visibleTree, [\n      {renderedKey: 'Offices', children: [{renderedKey: 'Europe'}]},\n      {renderedKey: 'Products'},\n    ]);\n  });\n\n  describe('nowrap attribute', () => {\n    it('sets the white-space to initial by default', async () => {\n      const {shadowRoot} = await renderTreeOutline({\n        tree: basicTreeData,\n      });\n      const rootNode = getVisibleTreeNodeByText(shadowRoot, 'Offices');\n      const key = rootNode.querySelector('[data-node-key]');\n      assert.instanceOf(key, HTMLElement);\n      const whiteSpaceValue = window.getComputedStyle(key).getPropertyValue('white-space');\n      assert.strictEqual(whiteSpaceValue, 'normal');\n    });\n\n    it('will set white-space: nowrap if the attribute is set', async () => {\n      const {component, shadowRoot} = await renderTreeOutline({\n        tree: basicTreeData,\n      });\n      component.setAttribute('nowrap', '');\n      const rootNode = getVisibleTreeNodeByText(shadowRoot, 'Offices');\n      const key = rootNode.querySelector('[data-node-key]');\n      assert.instanceOf(key, HTMLElement);\n      const whiteSpaceValue = window.getComputedStyle(key).getPropertyValue('white-space');\n      assert.strictEqual(whiteSpaceValue, 'nowrap');\n    });\n  });\n\n  describe('toplevelbordercolor attribute', () => {\n    it('by default the nodes are not given a border', async () => {\n      const {shadowRoot} = await renderTreeOutline({\n        tree: basicTreeData,\n      });\n      const rootNode = getVisibleTreeNodeByText(shadowRoot, 'Offices');\n      const borderTopValue = window.getComputedStyle(rootNode).getPropertyValue('border-top');\n      // Odd assertion: this is the default borderTop the browser \"applies\" if none is set.\n      assert.strictEqual(borderTopValue, '0px none rgb(0, 0, 0)');\n    });\n\n    it('gives the nodes a border if the attribute is set', async () => {\n      const {component, shadowRoot} = await renderTreeOutline({\n        tree: basicTreeData,\n      });\n      component.setAttribute('toplevelbordercolor', 'rgb(255, 0, 0)');\n      const rootNode = getVisibleTreeNodeByText(shadowRoot, 'Offices');\n      const borderTopValue = window.getComputedStyle(rootNode).getPropertyValue('border-top');\n      assert.strictEqual(borderTopValue, '1px solid rgb(255, 0, 0)');\n    });\n  });\n\n  it('can take nodes with a custom key type', async () => {\n    interface CustomTreeKeyType {\n      property: string;\n      value: string;\n    }\n    const customRenderer = (node: TreeOutline.TreeOutlineUtils.TreeNode<CustomTreeKeyType>) => {\n      return LitHtml.html`<h2 class=\"item\">${node.treeNodeData.property.toUpperCase()}:</h2>${node.treeNodeData.value}`;\n    };\n    const tinyTree: TreeOutline.TreeOutlineUtils.TreeNode<CustomTreeKeyType>[] = [{\n      treeNodeData: {property: 'name', value: 'jack'},\n      id: '0',\n      renderer: customRenderer,\n      children: async () =>\n          [{\n            renderer: customRenderer,\n            id: '1',\n            treeNodeData: {property: 'locationGroupName', value: 'EMEA'},\n          },\n           {\n             renderer: customRenderer,\n             id: '2',\n             treeNodeData: {property: 'locationGroupName', value: 'USA'},\n           },\n           {\n             renderer: customRenderer,\n             id: '3',\n             treeNodeData: {property: 'locationGroupName', value: 'APAC'},\n           }],\n    }];\n    const {component, shadowRoot} = await renderTreeOutline({\n      tree: tinyTree,\n    });\n\n    await component.expandRecursively();\n    await waitForRenderedTreeNodeCount(shadowRoot, 4);\n    const visibleTree = visibleNodesToTree(shadowRoot);\n    assert.deepEqual(visibleTree, [\n      {\n        renderedKey: '<h2 class=\"item\">NAME:</h2>jack',\n        children: [\n          {\n            renderedKey: '<h2 class=\"item\">LOCATIONGROUPNAME:</h2>EMEA',\n          },\n          {\n            renderedKey: '<h2 class=\"item\">LOCATIONGROUPNAME:</h2>USA',\n          },\n          {\n            renderedKey: '<h2 class=\"item\">LOCATIONGROUPNAME:</h2>APAC',\n          },\n        ],\n      },\n    ]);\n  });\n\n  it('can recursively expand the tree, going 3 levels deep by default', async () => {\n    const {component, shadowRoot} = await renderTreeOutline({\n      tree: basicTreeData,\n    });\n    await component.expandRecursively();\n    await waitForRenderedTreeNodeCount(shadowRoot, 12);\n    const visibleTree = visibleNodesToTree(shadowRoot);\n    assert.deepEqual(visibleTree, [\n      {\n        renderedKey: 'Offices',\n        children: [{\n          renderedKey: 'Europe',\n          children: [\n            {renderedKey: 'UK', children: [{renderedKey: 'LON'}]},\n            {renderedKey: 'Germany', children: [{renderedKey: 'MUC'}, {renderedKey: 'BER'}]},\n          ],\n        }],\n      },\n      {\n        renderedKey: 'Products',\n        children: [\n          {\n            renderedKey: 'Chrome',\n          },\n          {\n            renderedKey: 'YouTube',\n          },\n          {\n            renderedKey: 'Drive',\n          },\n          {\n            renderedKey: 'Calendar',\n          },\n        ],\n      },\n    ]);\n  });\n\n  describe('expandToAndSelectTreeNode', () => {\n    it('expands the relevant part of the tree to reveal the given node', async () => {\n      const {component, shadowRoot} = await renderTreeOutline({\n        tree: basicTreeData,\n      });\n      await component.expandToAndSelectTreeNode(nodeBelgraveHouse);\n      await waitForRenderedTreeNodeCount(shadowRoot, 9);\n      const visibleTree = visibleNodesToTree(shadowRoot);\n      // The tree is expanded down to include \"BEL\" but the rest of the tree is still collapsed.\n      assert.deepEqual(visibleTree, [\n        {\n          renderedKey: 'Offices',\n          children: [{\n            renderedKey: 'Europe',\n            children: [\n              {\n                renderedKey: 'UK',\n                children: [\n                  {renderedKey: 'LON', children: [{renderedKey: '6PS'}, {renderedKey: 'CSG'}, {renderedKey: 'BEL'}]},\n                ],\n              },\n              {renderedKey: 'Germany'},\n            ],\n          }],\n        },\n        {\n          renderedKey: 'Products',\n        },\n      ]);\n    });\n\n    it('selects the given node once the tree has been expanded', async () => {\n      const {component, shadowRoot} = await renderTreeOutline({\n        tree: basicTreeData,\n      });\n      await component.expandToAndSelectTreeNode(nodeBelgraveHouse);\n      // Wait for the tree to be expanded\n      await waitForRenderedTreeNodeCount(shadowRoot, 9);\n      // Wait for the coordinator to have called focus() on the right node\n      await coordinator.done();\n\n      assert.strictEqual(\n          getFocusableTreeNode(shadowRoot),\n          getVisibleTreeNodeByText(shadowRoot, 'BEL'),\n      );\n    });\n  });\n\n  it('can recursively collapse all children of a node', async () => {\n    const {component, shadowRoot} = await renderTreeOutline({\n      tree: basicTreeData,\n    });\n    await component.expandRecursively(Number.POSITIVE_INFINITY);\n    await waitForRenderedTreeNodeCount(shadowRoot, NODE_COUNT_BASIC_DATA_FULLY_EXPANDED);\n    const europeNode = getVisibleTreeNodeByText(shadowRoot, 'Europe');\n    await component.collapseChildrenOfNode(europeNode);\n    await waitForRenderedTreeNodeCount(shadowRoot, 7);\n    const visibleTree = visibleNodesToTree(shadowRoot);\n    assert.deepEqual(visibleTree, [\n      {\n        renderedKey: 'Offices',\n        children: [{\n          renderedKey: 'Europe',\n        }],\n      },\n      {\n        renderedKey: 'Products',\n        children: [\n          {\n            renderedKey: 'Chrome',\n          },\n          {\n            renderedKey: 'YouTube',\n          },\n          {\n            renderedKey: 'Drive',\n          },\n          {\n            renderedKey: 'Calendar',\n          },\n        ],\n      },\n    ]);\n  });\n\n  it('can collapse all nodes', async () => {\n    const {component, shadowRoot} = await renderTreeOutline({\n      tree: basicTreeData,\n    });\n    await component.expandRecursively(Number.POSITIVE_INFINITY);\n    await waitForRenderedTreeNodeCount(shadowRoot, NODE_COUNT_BASIC_DATA_FULLY_EXPANDED);\n    await component.collapseAllNodes();\n    await waitForRenderedTreeNodeCount(shadowRoot, 2);\n    const visibleTree = visibleNodesToTree(shadowRoot);\n    assert.deepEqual(visibleTree, [\n      {\n        renderedKey: 'Offices',\n      },\n      {\n        renderedKey: 'Products',\n      },\n    ]);\n  });\n\n  it('caches async child nodes and only fetches them once', async () => {\n    const fetchChildrenSpy = sinon.spy<() => Promise<TreeOutline.TreeOutlineUtils.TreeNode<string>[]>>(async () => {\n      return [\n        {\n          treeNodeData: 'EMEA',\n          id: '1',\n        },\n        {\n          treeNodeData: 'USA',\n          id: '2',\n        },\n        {\n          treeNodeData: 'APAC',\n          id: '3',\n        },\n      ];\n    });\n    const tinyTree: TreeOutline.TreeOutlineUtils.TreeNode<string>[] = [\n      {\n        treeNodeData: 'Offices',\n        id: '0',\n        children: fetchChildrenSpy,\n      },\n    ];\n\n    const {component, shadowRoot} = await renderTreeOutline({\n      tree: tinyTree,\n    });\n\n    // Expand it, then collapse it, then expand it again\n    await component.expandRecursively(Number.POSITIVE_INFINITY);\n    await waitForRenderedTreeNodeCount(shadowRoot, 4);\n    assert.strictEqual(fetchChildrenSpy.callCount, 1);\n    const officesNode = getVisibleTreeNodeByText(shadowRoot, 'Offices');\n    await component.collapseChildrenOfNode(officesNode);\n    await waitForRenderedTreeNodeCount(shadowRoot, 1);\n    await component.expandRecursively(Number.POSITIVE_INFINITY);\n    await waitForRenderedTreeNodeCount(shadowRoot, 4);\n    // Make sure that we only fetched the children once despite expanding the\n    // Tree twice.\n    assert.strictEqual(fetchChildrenSpy.callCount, 1);\n    const visibleTree = visibleNodesToTree(shadowRoot);\n    assert.deepEqual(visibleTree, [\n      {\n        renderedKey: 'Offices',\n        children: [\n          {\n            renderedKey: 'EMEA',\n          },\n          {renderedKey: 'USA'},\n          {renderedKey: 'APAC'},\n        ],\n      },\n    ]);\n  });\n\n  it('allows a node to have a custom renderer', async () => {\n    const tinyTree: TreeOutline.TreeOutlineUtils.TreeNode<string>[] = [{\n      treeNodeData: 'Offices',\n      id: 'Offices',\n      renderer: node => LitHtml.html`<h2 class=\"top-node\">${node.treeNodeData.toUpperCase()}</h2>`,\n      children: async () =>\n          [{\n            treeNodeData: 'EMEA',\n            id: 'EMEA',\n          },\n           {\n             treeNodeData: 'USA',\n             id: 'USA',\n           },\n           {\n             treeNodeData: 'APAC',\n             id: 'APAC',\n           }],\n    }];\n\n    const {component, shadowRoot} = await renderTreeOutline({\n      tree: tinyTree,\n    });\n\n    await component.expandRecursively(Number.POSITIVE_INFINITY);\n    await waitForRenderedTreeNodeCount(shadowRoot, 4);\n    const officeNode = getVisibleTreeNodeByText(shadowRoot, 'Offices');\n    const key = officeNode.querySelector('[data-node-key]');\n    assert.instanceOf(key, HTMLElement);\n    const renderedKey = stripLitHtmlCommentNodes(key.innerHTML);\n    assert.strictEqual(renderedKey, '<h2 class=\"top-node\">OFFICES</h2>');\n  });\n\n  it('passes the custom renderer the expanded state', async () => {\n    const tinyTree: TreeOutline.TreeOutlineUtils.TreeNode<string>[] = [{\n      treeNodeData: 'Offices',\n      id: 'Offices',\n      renderer: (node, {isExpanded}) => {\n        return LitHtml.html`<h2 class=\"top-node\">${node.treeNodeData.toUpperCase()}. Expanded: ${isExpanded}</h2>`;\n      },\n      children: async () =>\n          [{\n            treeNodeData: 'EMEA',\n            id: 'EMEA',\n          },\n           {\n             treeNodeData: 'USA',\n             id: 'USA',\n           },\n           {\n             treeNodeData: 'APAC',\n             id: 'APAC',\n           }],\n    }];\n\n    const {component, shadowRoot} = await renderTreeOutline({\n      tree: tinyTree,\n    });\n\n    const officeNode = getVisibleTreeNodeByText(shadowRoot, 'Offices');\n    const key = officeNode.querySelector('[data-node-key]');\n    assert.instanceOf(key, HTMLElement);\n    let renderedKey = stripLitHtmlCommentNodes(key.innerHTML);\n    assert.strictEqual(renderedKey, '<h2 class=\"top-node\">OFFICES. Expanded: false</h2>');\n    await component.expandRecursively(Number.POSITIVE_INFINITY);\n    await waitForRenderedTreeNodeCount(shadowRoot, 4);\n    renderedKey = stripLitHtmlCommentNodes(key.innerHTML);\n    assert.strictEqual(renderedKey, '<h2 class=\"top-node\">OFFICES. Expanded: true</h2>');\n  });\n\n  describe('navigating with keyboard', () => {\n    it('defaults to the first root node as active', async () => {\n      const {shadowRoot} = await renderTreeOutline({\n        tree: basicTreeData,\n      });\n      assert.strictEqual(\n          getFocusableTreeNode(shadowRoot),\n          getVisibleTreeNodeByText(shadowRoot, 'Offices'),\n      );\n    });\n\n    describe('pressing the ENTER key', () => {\n      it('expands the node if it is closed', async () => {\n        const {shadowRoot} = await renderTreeOutline({\n          tree: basicTreeData,\n        });\n        const officeNode = getVisibleTreeNodeByText(shadowRoot, 'Offices');\n        dispatchClickEvent(officeNode);\n        await coordinator.done();\n        dispatchKeyDownEvent(officeNode, {key: 'Enter', bubbles: true});\n        await waitForRenderedTreeNodeCount(shadowRoot, 3);\n        assert.strictEqual(officeNode.getAttribute('aria-expanded'), 'true');\n      });\n\n      it('closes the node if it is open', async () => {\n        const {component, shadowRoot} = await renderTreeOutline({\n          tree: basicTreeData,\n        });\n        void component.expandRecursively();\n        await waitForRenderedTreeNodeCount(shadowRoot, NODE_COUNT_BASIC_DATA_DEFAULT_EXPANDED);\n        const officeNode = getVisibleTreeNodeByText(shadowRoot, 'Offices');\n        dispatchClickEvent(officeNode);\n        await coordinator.done();\n        dispatchKeyDownEvent(officeNode, {key: 'Enter', bubbles: true});\n        await waitForRenderedTreeNodeCount(shadowRoot, 6);\n        assert.strictEqual(officeNode.getAttribute('aria-expanded'), 'false');\n      });\n    });\n\n    describe('pressing the SPACE key', () => {\n      it('expands the node if it is closed', async () => {\n        const {shadowRoot} = await renderTreeOutline({\n          tree: basicTreeData,\n        });\n        const officeNode = getVisibleTreeNodeByText(shadowRoot, 'Offices');\n        dispatchClickEvent(officeNode);\n        await coordinator.done();\n        dispatchKeyDownEvent(officeNode, {key: ' ', bubbles: true});\n        await waitForRenderedTreeNodeCount(shadowRoot, 3);\n        assert.strictEqual(officeNode.getAttribute('aria-expanded'), 'true');\n      });\n\n      it('closes the node if it is open', async () => {\n        const {component, shadowRoot} = await renderTreeOutline({\n          tree: basicTreeData,\n        });\n        await component.expandRecursively();\n        await waitForRenderedTreeNodeCount(shadowRoot, 12);\n        const officeNode = getVisibleTreeNodeByText(shadowRoot, 'Offices');\n        dispatchClickEvent(officeNode);\n        await coordinator.done();\n        dispatchKeyDownEvent(officeNode, {key: ' ', bubbles: true});\n        await waitForRenderedTreeNodeCount(shadowRoot, 6);\n        assert.strictEqual(officeNode.getAttribute('aria-expanded'), 'false');\n      });\n    });\n\n    describe('pressing the HOME key', () => {\n      it('takes the user to the top most root node', async () => {\n        const {component, shadowRoot} = await renderTreeOutline({\n          tree: basicTreeData,\n        });\n        await component.expandRecursively(Number.POSITIVE_INFINITY);\n        await waitForRenderedTreeNodeCount(shadowRoot, NODE_COUNT_BASIC_DATA_FULLY_EXPANDED);\n        const berlinNode = getVisibleTreeNodeByText(shadowRoot, 'BER');\n        dispatchClickEvent(berlinNode);\n        await coordinator.done();\n        dispatchKeyDownEvent(berlinNode, {key: 'Home', bubbles: true});\n        await coordinator.done();\n        assert.strictEqual(\n            getFocusableTreeNode(shadowRoot),\n            getVisibleTreeNodeByText(shadowRoot, 'Offices'),\n        );\n      });\n    });\n\n    describe('pressing the END key', () => {\n      it('takes the user to the last visible node if they are all expanded', async () => {\n        const {component, shadowRoot} = await renderTreeOutline({\n          tree: basicTreeData,\n        });\n        await component.expandRecursively(Number.POSITIVE_INFINITY);\n        await coordinator.done();\n        const officeNode = getVisibleTreeNodeByText(shadowRoot, 'Offices');\n        dispatchClickEvent(officeNode);\n        dispatchKeyDownEvent(officeNode, {key: 'End', bubbles: true});\n        await coordinator.done();\n        assert.strictEqual(\n            getFocusableTreeNode(shadowRoot),\n            // Calendar is the very last node in the tree\n            getVisibleTreeNodeByText(shadowRoot, 'Calendar'),\n        );\n      });\n\n      it('does not expand any closed nodes and focuses the last visible node', async () => {\n        const {shadowRoot} = await renderTreeOutline({\n          tree: basicTreeData,\n        });\n        const officeNode = getVisibleTreeNodeByText(shadowRoot, 'Offices');\n        // Expand the Offices part of the tree\n        const arrowIcon = officeNode.querySelector<HTMLSpanElement>('.arrow-icon');\n        assert.instanceOf(arrowIcon, HTMLSpanElement);\n        dispatchClickEvent(arrowIcon);\n        await waitForRenderedTreeNodeCount(shadowRoot, 3);\n\n        // Focus the \"Europe\" node.\n        const europeNode = getVisibleTreeNodeByText(shadowRoot, 'Europe');\n        dispatchClickEvent(europeNode);\n        dispatchKeyDownEvent(officeNode, {key: 'End', bubbles: true});\n        await coordinator.done();\n        assert.strictEqual(\n            getFocusableTreeNode(shadowRoot),\n            // Products is the last node in the tree, as its children are not expanded\n            getVisibleTreeNodeByText(shadowRoot, 'Products'),\n        );\n      });\n    });\n\n    describe('pressing the UP arrow', () => {\n      it('does nothing if on the root node', async () => {\n        const {shadowRoot} = await renderTreeOutline({\n          tree: basicTreeData,\n        });\n        const officeNode = getVisibleTreeNodeByText(shadowRoot, 'Offices');\n        dispatchClickEvent(officeNode);\n        dispatchKeyDownEvent(officeNode, {key: 'ArrowUp', bubbles: true});\n        await coordinator.done();\n\n        assert.strictEqual(\n            getFocusableTreeNode(shadowRoot),\n            officeNode,\n        );\n      });\n\n      it('moves focus to the previous sibling', async () => {\n        const {component, shadowRoot} = await renderTreeOutline({\n          tree: basicTreeData,\n        });\n        await component.expandRecursively();\n        await waitForRenderedTreeNodeCount(shadowRoot, 12);\n        const berlinNode = getVisibleTreeNodeByText(shadowRoot, 'BER');\n        dispatchClickEvent(berlinNode);\n        dispatchKeyDownEvent(berlinNode, {key: 'ArrowUp', bubbles: true});\n        await coordinator.done();\n        assert.strictEqual(\n            getFocusableTreeNode(shadowRoot),\n            getVisibleTreeNodeByText(shadowRoot, 'MUC'),\n        );\n      });\n\n      it('moves focus to the parent if there are no previous siblings', async () => {\n        const {component, shadowRoot} = await renderTreeOutline({\n          tree: basicTreeData,\n        });\n        await component.expandRecursively();\n        await waitForRenderedTreeNodeCount(shadowRoot, NODE_COUNT_BASIC_DATA_DEFAULT_EXPANDED);\n        const ukNode = getVisibleTreeNodeByText(shadowRoot, 'UK');\n        dispatchClickEvent(ukNode);\n        dispatchKeyDownEvent(ukNode, {key: 'ArrowUp', bubbles: true});\n        await coordinator.done();\n        assert.strictEqual(\n            getFocusableTreeNode(shadowRoot),\n            getVisibleTreeNodeByText(shadowRoot, 'Europe'),\n        );\n      });\n\n      it('moves focus to the parent\\'s last child if there are no previous siblings and the parent is expanded',\n         async () => {\n           const {component, shadowRoot} = await renderTreeOutline({\n             tree: basicTreeData,\n           });\n           await component.expandRecursively();\n           await waitForRenderedTreeNodeCount(shadowRoot, NODE_COUNT_BASIC_DATA_DEFAULT_EXPANDED);\n           const germanyNode = getVisibleTreeNodeByText(shadowRoot, 'Germany');\n           dispatchClickEvent(germanyNode);\n           dispatchKeyDownEvent(germanyNode, {key: 'ArrowUp', bubbles: true});\n           await coordinator.done();\n           assert.strictEqual(\n               getFocusableTreeNode(shadowRoot),\n               getVisibleTreeNodeByText(shadowRoot, 'LON'),\n           );\n         });\n\n      it('moves focus to the parent\\'s deeply nested last child if there are no previous siblings and the parent has children that are expanded',\n         async () => {\n           const {component, shadowRoot} = await renderTreeOutline({\n             tree: basicTreeData,\n           });\n           await component.expandRecursively(Number.POSITIVE_INFINITY);\n           await waitForRenderedTreeNodeCount(shadowRoot, NODE_COUNT_BASIC_DATA_FULLY_EXPANDED);\n           const germanyNode = getVisibleTreeNodeByText(shadowRoot, 'Germany');\n           dispatchClickEvent(germanyNode);\n           dispatchKeyDownEvent(germanyNode, {key: 'ArrowUp', bubbles: true});\n           await coordinator.done();\n           assert.strictEqual(\n               getFocusableTreeNode(shadowRoot),\n               getVisibleTreeNodeByText(shadowRoot, 'BEL'),\n           );\n         });\n    });\n\n    describe('pressing the RIGHT arrow', () => {\n      it('does nothing if it is on a node that cannot be expanded', async () => {\n        const {component, shadowRoot} = await renderTreeOutline({\n          tree: basicTreeData,\n        });\n        await component.expandRecursively(Number.POSITIVE_INFINITY);\n        await waitForRenderedTreeNodeCount(shadowRoot, NODE_COUNT_BASIC_DATA_FULLY_EXPANDED);\n        const chromeNode = getVisibleTreeNodeByText(shadowRoot, 'Chrome');\n        dispatchClickEvent(chromeNode);\n        dispatchKeyDownEvent(chromeNode, {key: 'ArrowRight', bubbles: true});\n        await coordinator.done();\n        assert.strictEqual(\n            getFocusableTreeNode(shadowRoot),\n            chromeNode,\n        );\n      });\n\n      it('expands the node if on an expandable node that is closed and does not move focus', async () => {\n        const {shadowRoot} = await renderTreeOutline({\n          tree: basicTreeData,\n        });\n        const officeNode = getVisibleTreeNodeByText(shadowRoot, 'Offices');\n        dispatchClickEvent(officeNode);\n        dispatchKeyDownEvent(officeNode, {key: 'ArrowRight', bubbles: true});\n        await coordinator.done();\n        assert.strictEqual(\n            getFocusableTreeNode(shadowRoot),\n            officeNode,\n        );\n        assert.strictEqual(officeNode.getAttribute('aria-expanded'), 'true');\n      });\n\n      it('moves focus into the child if pressed on an expanded node', async () => {\n        const {shadowRoot} = await renderTreeOutline({\n          tree: basicTreeData,\n        });\n        const officeNode = getVisibleTreeNodeByText(shadowRoot, 'Offices');\n        dispatchClickEvent(officeNode);\n        // Press once to expand, twice to navigate in to the first child\n        dispatchKeyDownEvent(officeNode, {key: 'ArrowRight', bubbles: true});\n        await coordinator.done();\n        dispatchKeyDownEvent(officeNode, {key: 'ArrowRight', bubbles: true});\n        await coordinator.done();\n        assert.strictEqual(\n            getFocusableTreeNode(shadowRoot),\n            getVisibleTreeNodeByText(shadowRoot, 'Europe'),\n        );\n      });\n    });\n\n    describe('pressing the LEFT arrow', () => {\n      it('closes the node if the focused node is expanded', async () => {\n        const {component, shadowRoot} = await renderTreeOutline({\n          tree: basicTreeData,\n        });\n        await component.expandRecursively(Number.POSITIVE_INFINITY);\n        await coordinator.done();\n        const europeNode = getVisibleTreeNodeByText(shadowRoot, 'Europe');\n        dispatchClickEvent(europeNode);\n        dispatchKeyDownEvent(europeNode, {key: 'ArrowLeft', bubbles: true});\n        await coordinator.done();\n        assert.strictEqual(\n            getFocusableTreeNode(shadowRoot),\n            getVisibleTreeNodeByText(shadowRoot, 'Europe'),\n        );\n        const visibleTree = visibleNodesToTree(shadowRoot);\n        // The tree below \"Europe\" is hidden as the left arrow press closed that node.\n        assert.deepEqual(visibleTree, [\n          {\n            renderedKey: 'Offices',\n            children: [{\n              renderedKey: 'Europe',\n            }],\n          },\n          {\n            renderedKey: 'Products',\n            children: [\n              {\n                renderedKey: 'Chrome',\n              },\n              {\n                renderedKey: 'YouTube',\n              },\n              {\n                renderedKey: 'Drive',\n              },\n              {\n                renderedKey: 'Calendar',\n              },\n            ],\n          },\n        ]);\n      });\n\n      it('moves to the parent node if the current node is not expanded or unexpandable', async () => {\n        const {component, shadowRoot} = await renderTreeOutline({\n          tree: basicTreeData,\n        });\n        await component.expandRecursively(Number.POSITIVE_INFINITY);\n        await waitForRenderedTreeNodeCount(shadowRoot, NODE_COUNT_BASIC_DATA_FULLY_EXPANDED);\n        await coordinator.done();\n        const berlinNode = getVisibleTreeNodeByText(shadowRoot, 'BER');\n        dispatchClickEvent(berlinNode);\n        dispatchKeyDownEvent(berlinNode, {key: 'ArrowLeft', bubbles: true});\n        await coordinator.done();\n        assert.strictEqual(\n            getFocusableTreeNode(shadowRoot),\n            getVisibleTreeNodeByText(shadowRoot, 'Germany'),\n        );\n      });\n      it('does nothing when called on a root node', async () => {\n        const {shadowRoot} = await renderTreeOutline({\n          tree: basicTreeData,\n        });\n        const productsNode = getVisibleTreeNodeByText(shadowRoot, 'Products');\n        dispatchClickEvent(productsNode);\n        dispatchKeyDownEvent(productsNode, {key: 'ArrowLeft', bubbles: true});\n        await coordinator.done();\n        assert.strictEqual(\n            getFocusableTreeNode(shadowRoot),\n            getVisibleTreeNodeByText(shadowRoot, 'Products'),\n        );\n      });\n    });\n    describe('pressing the DOWN arrow', () => {\n      it('moves down to the next sibling if the node is not expanded', async () => {\n        const {shadowRoot} = await renderTreeOutline({\n          tree: basicTreeData,\n        });\n        const officeNode = getVisibleTreeNodeByText(shadowRoot, 'Offices');\n        dispatchClickEvent(officeNode);\n        dispatchKeyDownEvent(officeNode, {key: 'ArrowDown', bubbles: true});\n        await coordinator.done();\n        assert.strictEqual(\n            getFocusableTreeNode(shadowRoot),\n            getVisibleTreeNodeByText(shadowRoot, 'Products'),\n        );\n      });\n\n      it('does not move if it is the last sibling and there are no parent siblings', async () => {\n        const {shadowRoot} = await renderTreeOutline({\n          tree: basicTreeData,\n        });\n        const productsNode = getVisibleTreeNodeByText(shadowRoot, 'Products');\n        dispatchClickEvent(productsNode);\n        dispatchKeyDownEvent(productsNode, {key: 'ArrowDown', bubbles: true});\n        await coordinator.done();\n        assert.strictEqual(\n            getFocusableTreeNode(shadowRoot),\n            getVisibleTreeNodeByText(shadowRoot, 'Products'),\n        );\n      });\n\n      it('moves down to the first child of the node if it is expanded', async () => {\n        const {component, shadowRoot} = await renderTreeOutline({\n          tree: basicTreeData,\n        });\n        await component.expandRecursively();\n        await coordinator.done();\n        const officeNode = getVisibleTreeNodeByText(shadowRoot, 'Offices');\n        dispatchClickEvent(officeNode);\n        dispatchKeyDownEvent(officeNode, {key: 'ArrowDown', bubbles: true});\n        await coordinator.done();\n        assert.strictEqual(\n            getFocusableTreeNode(shadowRoot),\n            getVisibleTreeNodeByText(shadowRoot, 'Europe'),\n        );\n      });\n\n      it('moves to its parent\\'s sibling if it is the last child', async () => {\n        const {component, shadowRoot} = await renderTreeOutline({\n          tree: basicTreeData,\n        });\n        await component.expandRecursively();\n        await waitForRenderedTreeNodeCount(shadowRoot, NODE_COUNT_BASIC_DATA_DEFAULT_EXPANDED);\n        const lonNode = getVisibleTreeNodeByText(shadowRoot, 'LON');\n        dispatchClickEvent(lonNode);\n        dispatchKeyDownEvent(lonNode, {key: 'ArrowDown', bubbles: true});\n        await coordinator.done();\n        assert.strictEqual(\n            getFocusableTreeNode(shadowRoot),\n            getVisibleTreeNodeByText(shadowRoot, 'Germany'),\n        );\n      });\n\n      it('is able to navigate high up the tree to the correct next parent\\'s sibling', async () => {\n        const {component, shadowRoot} = await renderTreeOutline({\n          tree: basicTreeData,\n        });\n        await component.expandRecursively(Number.POSITIVE_INFINITY);\n        await waitForRenderedTreeNodeCount(shadowRoot, NODE_COUNT_BASIC_DATA_FULLY_EXPANDED);\n        const berNode = getVisibleTreeNodeByText(shadowRoot, 'BER');\n        dispatchClickEvent(berNode);\n        dispatchKeyDownEvent(berNode, {key: 'ArrowDown', bubbles: true});\n        await coordinator.done();\n        assert.strictEqual(\n            getFocusableTreeNode(shadowRoot),\n            getVisibleTreeNodeByText(shadowRoot, 'Products'),\n        );\n      });\n    });\n  });\n\n  // Note: all aria-* positional labels are 1 indexed, not 0 indexed.\n  describe('aria-* labels', () => {\n    it('adds correct aria-level labels', async () => {\n      const {component, shadowRoot} = await renderTreeOutline({\n        tree: basicTreeData,\n      });\n      await component.expandRecursively(Number.POSITIVE_INFINITY);\n      await waitForRenderedTreeNodeCount(shadowRoot, NODE_COUNT_BASIC_DATA_FULLY_EXPANDED);\n      await coordinator.done();\n      const rootNode = getVisibleTreeNodeByText(shadowRoot, 'Offices');\n      assert.strictEqual(rootNode.getAttribute('aria-level'), '1');\n\n      const europeNode = getVisibleTreeNodeByText(shadowRoot, 'Europe');\n      assert.strictEqual(europeNode.getAttribute('aria-level'), '2');\n\n      const germanyNode = getVisibleTreeNodeByText(shadowRoot, 'Germany');\n      assert.strictEqual(germanyNode.getAttribute('aria-level'), '3');\n\n      const berlinNode = getVisibleTreeNodeByText(shadowRoot, 'BER');\n      assert.strictEqual(berlinNode.getAttribute('aria-level'), '4');\n    });\n\n    it('adds the correct setsize label to the root node', async () => {\n      const {shadowRoot} = await renderTreeOutline({\n        tree: basicTreeData,\n      });\n      const rootNode = getVisibleTreeNodeByText(shadowRoot, 'Products');\n      assert.strictEqual(rootNode.getAttribute('aria-setsize'), '2');\n    });\n\n    it('adds the correct setsize label to a deeply nested node', async () => {\n      const {component, shadowRoot} = await renderTreeOutline({\n        tree: basicTreeData,\n      });\n      await component.expandRecursively(Number.POSITIVE_INFINITY);\n      await waitForRenderedTreeNodeCount(shadowRoot, NODE_COUNT_BASIC_DATA_FULLY_EXPANDED);\n      const europeKey = getVisibleTreeNodeByText(shadowRoot, 'Europe');\n      assert.strictEqual(europeKey.getAttribute('aria-setsize'), '1');\n      const germanyKey = getVisibleTreeNodeByText(shadowRoot, 'Germany');\n      // 2 because there are two keys at this level in the tree: UK & Germany\n      assert.strictEqual(germanyKey.getAttribute('aria-setsize'), '2');\n    });\n\n    it('adds the posinset label to nodes correctly', async () => {\n      const {component, shadowRoot} = await renderTreeOutline({\n        tree: basicTreeData,\n      });\n      await component.expandRecursively(Number.POSITIVE_INFINITY);\n      await waitForRenderedTreeNodeCount(shadowRoot, NODE_COUNT_BASIC_DATA_FULLY_EXPANDED);\n      const europeKey = getVisibleTreeNodeByText(shadowRoot, 'Europe');\n      assert.strictEqual(europeKey.getAttribute('aria-posinset'), '1');\n      const csgOfficeKey = getVisibleTreeNodeByText(shadowRoot, 'CSG');\n      // CSG is 2nd in the LON office list: 6PS, CSG, BEL\n      assert.strictEqual(csgOfficeKey.getAttribute('aria-posinset'), '2');\n    });\n\n    it('sets aria-expanded to false on non-expanded nodes', async () => {\n      const {shadowRoot} = await renderTreeOutline({\n        tree: basicTreeData,\n      });\n      const rootNode = getVisibleTreeNodeByText(shadowRoot, 'Offices');\n      assert.strictEqual(rootNode.getAttribute('aria-expanded'), 'false');\n    });\n\n    it('sets aria-expanded to true on expanded nodes', async () => {\n      const {shadowRoot} = await renderTreeOutline({\n        tree: basicTreeData,\n      });\n      const rootNode = getVisibleTreeNodeByText(shadowRoot, 'Offices');\n      const arrowIcon = rootNode.querySelector<HTMLSpanElement>('.arrow-icon');\n      assert.instanceOf(arrowIcon, HTMLSpanElement);\n      dispatchClickEvent(arrowIcon);\n      await coordinator.done();\n      assert.strictEqual(rootNode.getAttribute('aria-expanded'), 'true');\n    });\n\n    it('does not set aria-expanded at all on leaf nodes', async () => {\n      const {component, shadowRoot} = await renderTreeOutline({\n        tree: basicTreeData,\n      });\n      await component.expandRecursively(Number.POSITIVE_INFINITY);\n      await waitForRenderedTreeNodeCount(shadowRoot, NODE_COUNT_BASIC_DATA_FULLY_EXPANDED);\n      const leafNodeCSGOffice = getVisibleTreeNodeByText(shadowRoot, 'CSG');\n      assert.strictEqual(leafNodeCSGOffice.getAttribute('aria-expanded'), null);\n    });\n  });\n\n  describe('emitting events', () => {\n    describe('itemselected event', () => {\n      it('emits an event when the user clicks on the node', async () => {\n        const {component, shadowRoot} = await renderTreeOutline({\n          tree: basicTreeData,\n        });\n        await coordinator.done();\n        const officeNode = getVisibleTreeNodeByText(shadowRoot, 'Offices');\n        const treeItemSelectedEvent =\n            getEventPromise<TreeOutline.TreeOutline.ItemSelectedEvent<string>>(component, 'itemselected');\n        dispatchClickEvent(officeNode);\n        const event = await treeItemSelectedEvent;\n        assert.deepEqual(event.data, {node: basicTreeData[0]});\n      });\n\n      it('emits an event when the user navigates to the node with their keyboard', async () => {\n        const {component, shadowRoot} = await renderTreeOutline({\n          tree: basicTreeData,\n        });\n        await coordinator.done();\n        const officeNode = getVisibleTreeNodeByText(shadowRoot, 'Offices');\n        dispatchClickEvent(officeNode);\n        await coordinator.done();\n        dispatchKeyDownEvent(officeNode, {key: 'ArrowDown', bubbles: true});\n        const treeItemSelectedEvent =\n            getEventPromise<TreeOutline.TreeOutline.ItemSelectedEvent<string>>(component, 'itemselected');\n        await coordinator.done();\n        const event = await treeItemSelectedEvent;\n        assert.deepEqual(event.data, {node: basicTreeData[1]});\n      });\n    });\n\n    describe('itemmouseover', () => {\n      it('emits an event when the user mouses over the element', async () => {\n        const {component, shadowRoot} = await renderTreeOutline({\n          tree: basicTreeData,\n        });\n        await coordinator.done();\n        const officeNode = getVisibleTreeNodeByText(shadowRoot, 'Offices').querySelector('.arrow-and-key-wrapper');\n        assert.instanceOf(officeNode, HTMLSpanElement);\n        const itemMouseOverEvent =\n            getEventPromise<TreeOutline.TreeOutline.ItemMouseOverEvent<string>>(component, 'itemmouseover');\n        dispatchMouseOverEvent(officeNode);\n        const event = await itemMouseOverEvent;\n        assert.deepEqual(event.data, {node: basicTreeData[0]});\n      });\n    });\n\n    describe('itemmouseout', () => {\n      it('emits an event when the user mouses out of the element', async () => {\n        const {component, shadowRoot} = await renderTreeOutline({\n          tree: basicTreeData,\n        });\n        await coordinator.done();\n        const officeNode = getVisibleTreeNodeByText(shadowRoot, 'Offices').querySelector('.arrow-and-key-wrapper');\n        assert.instanceOf(officeNode, HTMLSpanElement);\n        dispatchMouseOverEvent(officeNode);\n        const itemMouseOutEvent =\n            getEventPromise<TreeOutline.TreeOutline.ItemMouseOutEvent<string>>(component, 'itemmouseout');\n        dispatchMouseOutEvent(officeNode);\n        const event = await itemMouseOutEvent;\n        assert.deepEqual(event.data, {node: basicTreeData[0]});\n      });\n    });\n  });\n\n  describe('matching on id parameter', () => {\n    it('expands the relevant part of the tree to reveal the given node', async () => {\n      const {component, shadowRoot} = await renderTreeOutline({\n        tree: [nodeAustralia],\n      });\n\n      // Expand to the node with the given ID, the actual data doesn't matter in this case.\n      // This means you can search the tree, without having a reference to the specific tree data,\n      // just as long as you know the id for whatever thing you are looking for.\n      await component.expandToAndSelectTreeNode({treeNodeData: 'something else', id: 'gawler'});\n      await waitForRenderedTreeNodeCount(shadowRoot, 7);\n      const visibleTree = visibleNodesToTree(shadowRoot);\n\n      // The tree is expanded down to include \"Gawler\" but the rest of the tree is still collapsed.\n      assert.deepEqual(visibleTree, [{\n                         renderedKey: 'Australia',\n                         children: [\n                           {\n                             renderedKey: 'SA',\n                             children: [\n                               {\n                                 renderedKey: 'Adelaide',\n                                 children: [\n                                   {renderedKey: 'Toorak Gardens'},\n                                   {renderedKey: 'Woodville South'},\n                                   {renderedKey: 'Gawler'},\n                                 ],\n                               },\n                             ],\n                           },\n                           {renderedKey: 'NSW'},\n                         ],\n                       }]);\n    });\n\n    it('remembers nodes expanded state across node updates', async () => {\n      const {component, shadowRoot} = await renderTreeOutline({\n        tree: [nodeAustralia],\n      });\n\n      await component.expandToAndSelectTreeNode({treeNodeData: 'something else', id: 'gawler'});\n\n      // Update the node by replacing the root node.\n      const newNodeAustralia = {\n        treeNodeData: 'New Australia',\n        id: 'australia',\n        children: async () =>\n            [{\n              treeNodeData: 'Different SA',\n              id: 'sa',\n              children: async () =>\n                  [{\n                    treeNodeData: 'Phantom Adelaide',\n                    id: 'adelaide',\n                    children: async () =>\n                        [{treeNodeData: 'Totally not Gawler', id: 'gawler'},\n      ],\n                  },\n      ],\n            },\n      ],\n      };\n\n      component.data = {\n        tree: [newNodeAustralia],\n        defaultRenderer: (node => LitHtml.html`${node.treeNodeData}`),\n      };\n      await waitForRenderedTreeNodeCount(shadowRoot, 4);\n      await coordinator.done();\n      const visibleTree = visibleNodesToTree(shadowRoot);\n\n      // The tree should still be expanded down to the node with key `gawler`.\n      assert.deepEqual(visibleTree, [{\n                         renderedKey: 'New Australia',\n                         children: [\n                           {\n                             renderedKey: 'Different SA',\n                             children: [\n                               {\n                                 renderedKey: 'Phantom Adelaide',\n                                 children: [\n                                   {renderedKey: 'Totally not Gawler'},\n                                 ],\n                               },\n                             ],\n                           },\n                         ],\n                       }]);\n    });\n\n    it('focuses the given node with an id once the tree has been expanded', async () => {\n      const {component, shadowRoot} = await renderTreeOutline({\n        tree: [nodeAustralia],\n      });\n\n      await component.expandToAndSelectTreeNode({treeNodeData: 'literally anything', id: 'gawler'});\n      await waitForRenderedTreeNodeCount(shadowRoot, 7);\n      await coordinator.done();\n\n      // The tree is expanded down to include \"Gawler\" but the rest of the tree is still collapsed.\n      assert.strictEqual(\n          getFocusableTreeNode(shadowRoot),\n          getVisibleTreeNodeByText(shadowRoot, 'Gawler'),\n      );\n    });\n  });\n});\n\ndescribe('TreeOutlineUtils', () => {\n  describe('getPathToTreeNode', () => {\n    it('can find the path to the given node', async () => {\n      const path = await TreeOutline.TreeOutlineUtils.getPathToTreeNode(basicTreeData, nodeBelgraveHouse.id);\n      assert.deepEqual(path, [nodeOffices, nodeEurope, nodeUK, nodeLondon, nodeBelgraveHouse]);\n    });\n\n    it('returns null if no path is found', async () => {\n      const path = await TreeOutline.TreeOutlineUtils.getPathToTreeNode(basicTreeData, '-1');\n      assert.strictEqual(path, null);\n    });\n  });\n});\n\ndescribe('TreeOutlineFiltering', () => {\n  it('can flatten nodes', async () => {\n    const {component, shadowRoot} = await renderTreeOutline({\n      tree: [nodeAustralia],\n      filter: node => node === 'SA' || node === 'NSW' || node === 'Adelaide' ?\n          TreeOutline.TreeOutline.FilterOption.FLATTEN :\n          TreeOutline.TreeOutline.FilterOption.SHOW,\n    });\n\n    await component.expandRecursively();\n    await coordinator.done();\n    await waitForRenderedTreeNodeCount(shadowRoot, 7);\n    const visibleTree = visibleNodesToTree(shadowRoot);\n\n    assert.deepEqual(visibleTree, [{\n                       renderedKey: 'Australia',\n                       children: [\n                         {renderedKey: 'Toorak Gardens'},\n                         {renderedKey: 'Woodville South'},\n                         {renderedKey: 'Gawler'},\n                         {renderedKey: 'Glebe'},\n                         {renderedKey: 'Newtown'},\n                         {renderedKey: 'Camperdown'},\n                       ],\n                     }]);\n  });\n\n  it('should not flatten an already expanded node', async () => {\n    const {component, shadowRoot} = await renderTreeOutline({\n      tree: [nodeAustralia],\n    });\n\n    await component.expandNodeIds(['australia', 'sa', 'adelaide']);\n    await coordinator.done();\n    await waitForRenderedTreeNodeCount(shadowRoot, 7);\n    const visibleTree = visibleNodesToTree(shadowRoot);\n\n    assert.deepEqual(visibleTree, [{\n                       renderedKey: 'Australia',\n                       children: [\n                         {\n                           renderedKey: 'SA',\n                           children: [\n                             {\n                               renderedKey: 'Adelaide',\n                               children: [\n                                 {renderedKey: 'Toorak Gardens'},\n                                 {renderedKey: 'Woodville South'},\n                                 {renderedKey: 'Gawler'},\n                               ],\n                             },\n                           ],\n                         },\n                         {\n                           renderedKey: 'NSW',\n                         },\n                       ],\n                     }]);\n\n    component.data = {\n      tree: [nodeAustralia],\n      filter: node => node === 'SA' || node === 'NSW' ? TreeOutline.TreeOutline.FilterOption.FLATTEN :\n                                                        TreeOutline.TreeOutline.FilterOption.SHOW,\n      defaultRenderer: (node => LitHtml.html`${node.treeNodeData}`),\n    };\n    await waitForRenderedTreeNodeCount(shadowRoot, 9);\n    const visibleTreeAfterFilter = visibleNodesToTree(shadowRoot);\n\n    assert.deepEqual(visibleTreeAfterFilter, [{\n                       renderedKey: 'Australia',\n                       children: [\n                         {\n                           renderedKey: 'SA',\n                           children: [\n                             {\n                               renderedKey: 'Adelaide',\n                               children: [\n                                 {renderedKey: 'Toorak Gardens'},\n                                 {renderedKey: 'Woodville South'},\n                                 {renderedKey: 'Gawler'},\n                               ],\n                             },\n                           ],\n                         },\n                         {renderedKey: 'Glebe'},\n                         {renderedKey: 'Newtown'},\n                         {renderedKey: 'Camperdown'},\n                       ],\n                     }]);\n  });\n});\n"]}