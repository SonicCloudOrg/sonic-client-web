{"version":3,"file":"SurveyLink.test.js","sourceRoot":"","sources":["../../../../../../../front_end/ui/components/survey_link/SurveyLink.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\nimport {renderElementIntoDOM} from '../../../testing/DOMHelpers.js';\nimport {describeWithLocale} from '../../../testing/EnvironmentHelpers.js';\n\nimport * as SurveyLink from './survey_link.js';\n\nfunction canShowSuccessfulCallback(trigger: string, callback: SurveyLink.SurveyLink.CanShowSurveyCallback) {\n  callback({canShowSurvey: true});\n}\nfunction showSuccessfulCallback(trigger: string, callback: SurveyLink.SurveyLink.ShowSurveyCallback) {\n  callback({surveyShown: true});\n}\nfunction canShowFailureCallback(trigger: string, callback: SurveyLink.SurveyLink.CanShowSurveyCallback) {\n  callback({canShowSurvey: false});\n}\nfunction showFailureCallback(trigger: string, callback: SurveyLink.SurveyLink.ShowSurveyCallback) {\n  callback({surveyShown: false});\n}\n\nconst empty = Common.UIString.LocalizedEmptyString;\n\ndescribeWithLocale('SurveyLink', () => {\n  it('shows no link when canShowSurvey is still pending', () => {\n    const link = new SurveyLink.SurveyLink.SurveyLink();\n    link.data = {trigger: 'test trigger', promptText: empty, canShowSurvey: () => {}, showSurvey: () => {}};\n    renderElementIntoDOM(link);\n\n    assert.isNotNull(link.shadowRoot);\n    assert.strictEqual(link.shadowRoot.childElementCount, 0);\n  });\n\n  it('shows no link when canShowSurvey is false', () => {\n    const link = new SurveyLink.SurveyLink.SurveyLink();\n    link.data =\n        {trigger: 'test trigger', promptText: empty, canShowSurvey: canShowFailureCallback, showSurvey: () => {}};\n    renderElementIntoDOM(link);\n\n    assert.isNotNull(link.shadowRoot);\n    assert.strictEqual(link.shadowRoot.childElementCount, 0);\n  });\n\n  it('shows a link when canShowSurvey is true', () => {\n    const link = new SurveyLink.SurveyLink.SurveyLink();\n    link.data =\n        {trigger: 'test trigger', promptText: empty, canShowSurvey: canShowSuccessfulCallback, showSurvey: () => {}};\n    renderElementIntoDOM(link);\n\n    assert.isNotNull(link.shadowRoot);\n    const linkNode = link.shadowRoot.querySelector('button');\n    assert.isNotNull(linkNode);\n  });\n\n  it('shows a pending state when trying to show the survey', () => {\n    const link = new SurveyLink.SurveyLink.SurveyLink();\n    link.data =\n        {trigger: 'test trigger', promptText: empty, canShowSurvey: canShowSuccessfulCallback, showSurvey: () => {}};\n    renderElementIntoDOM(link);\n\n    assert.isNotNull(link.shadowRoot);\n    const linkNode = link.shadowRoot.querySelector('button');\n    assert.exists(linkNode);\n    assert.notInclude(linkNode.textContent?.trim(), '…');\n\n    linkNode.click();\n\n    // The only output signal we have is the link text which we don't want to assert exactly, so we\n    // assume that the pending state has an elipsis.\n    const pendingLink = link.shadowRoot.querySelector('button');\n    assert.exists(pendingLink);\n    assert.include(pendingLink.textContent?.trim(), '…');\n  });\n\n  it('shows a successful state after showing the survey', () => {\n    const link = new SurveyLink.SurveyLink.SurveyLink();\n    link.data = {\n      trigger: 'test trigger',\n      promptText: empty,\n      canShowSurvey: canShowSuccessfulCallback,\n      showSurvey: showSuccessfulCallback,\n    };\n    renderElementIntoDOM(link);\n\n    assert.isNotNull(link.shadowRoot);\n    const linkNode = link.shadowRoot.querySelector('button');\n    assert.exists(linkNode);\n\n    linkNode.click();\n\n    const successLink = link.shadowRoot.querySelector('button');\n    assert.exists(successLink);\n    assert.include(successLink.textContent?.trim(), 'Thank you');\n  });\n\n  it('shows a failure state when failing to show the survey', () => {\n    const link = new SurveyLink.SurveyLink.SurveyLink();\n    link.data = {\n      trigger: 'test trigger',\n      promptText: empty,\n      canShowSurvey: canShowSuccessfulCallback,\n      showSurvey: showFailureCallback,\n    };\n    renderElementIntoDOM(link);\n\n    assert.isNotNull(link.shadowRoot);\n    const linkNode = link.shadowRoot.querySelector('button');\n    assert.exists(linkNode);\n\n    linkNode.click();\n\n    const successLink = link.shadowRoot.querySelector('button');\n    assert.exists(successLink);\n    assert.include(successLink.textContent?.trim(), 'error');\n  });\n});\n"]}