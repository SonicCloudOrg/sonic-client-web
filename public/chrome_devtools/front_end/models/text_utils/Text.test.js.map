{"version":3,"file":"Text.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/text_utils/Text.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as TextUtils from './text_utils.js';\n\ndescribe('Text', () => {\n  it('can be instantiated successfully', () => {\n    const testVal = 'Test Value';\n    const text = new TextUtils.Text.Text(testVal);\n    assert.strictEqual(text.value(), testVal);\n  });\n\n  it('has a list of line ending offsets including the end of the string', () => {\n    const text = new TextUtils.Text.Text('\\nLine 2\\nLine 3\\n');\n    assert.deepEqual(text.lineEndings(), [0, 7, 14, 15]);\n  });\n\n  it('should count the number of line endings', () => {\n    const text = new TextUtils.Text.Text('\\nLine 2\\nLine 3\\n');\n    assert.strictEqual(text.lineCount(), 4);\n  });\n\n  it('should return an offset when given a linenumber and column', () => {\n    const text = new TextUtils.Text.Text('\\nLine 2\\nLine 3\\n');\n    assert.strictEqual(text.offsetFromPosition(2, 4), 12);\n  });\n\n  it('should return NaN if the linenumber is out of range when trying to retrieve the offset', () => {\n    const text = new TextUtils.Text.Text('\\nLine 2\\nLine 3\\n');\n    assert.isNaN(text.offsetFromPosition(10, 0));\n  });\n\n  it('should return an offset of zero when given a linenumber of 0 and column of 0 ', () => {\n    const text = new TextUtils.Text.Text('\\nLine 2\\nLine 3\\n');\n    assert.strictEqual(text.offsetFromPosition(0, 0), 0);\n  });\n\n  it('should handle an out of range column number when returning the offset', () => {\n    const text = new TextUtils.Text.Text('\\nLine 2\\nLine 3\\n');\n    assert.strictEqual(text.offsetFromPosition(2, 10), 18);\n  });\n\n  it('should return linenumber and column for an offset', () => {\n    const text = new TextUtils.Text.Text('\\nLine 2\\nLine 3\\n');\n    const {lineNumber, columnNumber} = text.positionFromOffset(10);\n    assert.strictEqual(lineNumber, 2, 'linenumber should be 2');\n    assert.strictEqual(columnNumber, 2, 'columnnumber should be 2');\n  });\n\n  it('should return a given line', () => {\n    const text = new TextUtils.Text.Text('\\nLine 2\\nLine 3\\n');\n    assert.strictEqual(text.lineAt(2), 'Line 3');\n  });\n\n  it('should not include the carriage return when returning a given line', () => {\n    const text = new TextUtils.Text.Text('\\nLine 2\\nLine 3\\r\\n');\n    assert.strictEqual(text.lineAt(2), 'Line 3');\n  });\n\n  it('should be able to return line 0', () => {\n    const text = new TextUtils.Text.Text('Line 1\\nLine 2\\nLine 3\\n');\n    assert.strictEqual(text.lineAt(0), 'Line 1');\n  });\n\n  it('should return a source range for a given text range', () => {\n    const text = new TextUtils.Text.Text('\\nLine 2\\nLine 3\\n');\n    const textRange = new TextUtils.TextRange.TextRange(1, 0, 2, 6);\n    const sourceRange = text.toSourceRange(textRange);\n    assert.strictEqual(sourceRange.offset, 1, 'offset was not set correctly');\n    assert.strictEqual(sourceRange.length, 13, 'length was not set correctly');\n  });\n\n  it('should return a source range with an offset and length of NaN if the startLine is out of range', () => {\n    const text = new TextUtils.Text.Text('\\nLine 2\\nLine 3\\n');\n    const textRange = new TextUtils.TextRange.TextRange(10, 0, 12, 6);\n    const sourceRange = text.toSourceRange(textRange);\n    assert.isNaN(sourceRange.offset, 'offset should be NaN');\n    assert.isNaN(sourceRange.length, 'length should be NaN');\n  });\n\n  it('should return a text range for a given source range', () => {\n    const text = new TextUtils.Text.Text('\\nLine 2\\nLine 3\\n');\n    const sourceRange = new TextUtils.TextRange.SourceRange(1, 13);\n    const textRange = text.toTextRange(sourceRange);\n    assert.strictEqual(textRange.startLine, 1, 'startLine was not set correctly');\n    assert.strictEqual(textRange.startColumn, 0, 'startColumn was not set correctly');\n    assert.strictEqual(textRange.endLine, 2, 'endLine was not set correctly');\n    assert.strictEqual(textRange.endColumn, 6, 'endColumn was not set correctly');\n  });\n\n  it('should replace a given range with a new string', () => {\n    const text = new TextUtils.Text.Text('\\nLine 2\\nLine 3\\n');\n    const textRange = new TextUtils.TextRange.TextRange(1, 0, 2, 0);\n    assert.strictEqual(text.replaceRange(textRange, 'New Text'), '\\nNew TextLine 3\\n');\n  });\n\n  it('should extract a string given a range', () => {\n    const text = new TextUtils.Text.Text('\\nLine 2\\nLine 3\\n');\n    const textRange = new TextUtils.TextRange.TextRange(1, 0, 2, 0);\n    assert.strictEqual(text.extract(textRange), 'Line 2\\n');\n  });\n});\n"]}