{"version":3,"file":"TextUtils.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/text_utils/TextUtils.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as TextUtils from './text_utils.js';\n\ndescribe('TextUtils', () => {\n  describe('Utils', () => {\n    describe('isSpaceChar', () => {\n      it('returns the correct result for various inputs', () => {\n        assert.strictEqual(TextUtils.TextUtils.Utils.isSpaceChar(' '), true, 'space was not a space char');\n        assert.strictEqual(TextUtils.TextUtils.Utils.isSpaceChar('\\t'), true, 'tab was not a space char');\n        assert.strictEqual(TextUtils.TextUtils.Utils.isSpaceChar('\\f'), true, 'formfeed was not a space char');\n        assert.strictEqual(TextUtils.TextUtils.Utils.isSpaceChar('\\r'), true, 'return was not a space char');\n        assert.strictEqual(TextUtils.TextUtils.Utils.isSpaceChar('\\v'), true, 'vertical tab was not a space char');\n        assert.strictEqual(\n            TextUtils.TextUtils.Utils.isSpaceChar('\\xA0'), true, 'non-breaking space was not a space char');\n        assert.strictEqual(TextUtils.TextUtils.Utils.isSpaceChar('\\0'), false, 'null was a space char');\n        assert.strictEqual(TextUtils.TextUtils.Utils.isSpaceChar('a'), false, 'a was a space char');\n        assert.strictEqual(TextUtils.TextUtils.Utils.isSpaceChar('A'), false, 'A was a space char');\n      });\n    });\n\n    describe('lineIndent', () => {\n      it('returns the correct result for various inputs', () => {\n        assert.strictEqual(TextUtils.TextUtils.Utils.lineIndent(''), '', 'indent was not empty');\n        assert.strictEqual(TextUtils.TextUtils.Utils.lineIndent('\\tabc'), '\\t', 'indent should have one tab');\n        assert.strictEqual(TextUtils.TextUtils.Utils.lineIndent(' \\t abc'), ' \\t ', 'indent was wrong');\n      });\n    });\n    describe('splitStringByRegexes', () => {\n      it('returns the correct result for a single regex', () => {\n        let result = TextUtils.TextUtils.Utils.splitStringByRegexes('', [/a/]);\n        assert.strictEqual(result.length, 0, 'length was wrong');\n\n        result = TextUtils.TextUtils.Utils.splitStringByRegexes('a', [/a/]);\n        assert.strictEqual(result.length, 1, 'length was wrong');\n        assert.strictEqual(result[0].value, 'a', 'value was wrong');\n        assert.strictEqual(result[0].position, 0, 'position was wrong');\n        assert.strictEqual(result[0].regexIndex, 0, 'regex index was wrong');\n        assert.deepEqual(result[0].captureGroups, [], 'capture groups was not empty');\n\n        result = TextUtils.TextUtils.Utils.splitStringByRegexes('ba b', [/a/]);\n        assert.strictEqual(result.length, 3, 'length was wrong');\n        assert.strictEqual(result[0].value, 'b', 'value was wrong');\n        assert.strictEqual(result[0].position, 0, 'position was wrong');\n        assert.strictEqual(result[0].regexIndex, -1, 'regex index was wrong');\n        assert.deepEqual(result[0].captureGroups, [], 'capture groups was not empty');\n        assert.strictEqual(result[1].value, 'a', 'value was wrong');\n        assert.strictEqual(result[1].position, 1, 'position was wrong');\n        assert.strictEqual(result[1].regexIndex, 0, 'regex index was wrong');\n        assert.deepEqual(result[1].captureGroups, [], 'capture groups was not empty');\n        assert.strictEqual(result[2].value, ' b', 'value was wrong');\n        assert.strictEqual(result[2].position, 2, 'position was wrong');\n        assert.strictEqual(result[2].regexIndex, -1, 'regex index was wrong');\n        assert.deepEqual(result[2].captureGroups, [], 'capture groups was not empty');\n      });\n      it('returns the correct result for a multiple regexs', () => {\n        let result = TextUtils.TextUtils.Utils.splitStringByRegexes('', [/a/, /b/]);\n        assert.strictEqual(result.length, 0, 'length was wrong');\n\n        result = TextUtils.TextUtils.Utils.splitStringByRegexes('a', [/a/, /b/]);\n        assert.strictEqual(result.length, 1, 'length was wrong');\n        assert.strictEqual(result[0].value, 'a', 'value was wrong');\n        assert.strictEqual(result[0].position, 0, 'position was wrong');\n        assert.strictEqual(result[0].regexIndex, 0, 'regex index was wrong');\n        assert.deepEqual(result[0].captureGroups, [], 'capture groups was not empty');\n\n        result = TextUtils.TextUtils.Utils.splitStringByRegexes('ba b', [/a/, /b/]);\n        assert.strictEqual(result.length, 4, 'length was wrong');\n        assert.strictEqual(result[0].value, 'b', 'value was wrong');\n        assert.strictEqual(result[0].position, 0, 'position was wrong');\n        assert.strictEqual(result[0].regexIndex, 1, 'regex index was wrong');\n        assert.deepEqual(result[0].captureGroups, [], 'capture groups was not empty');\n        assert.strictEqual(result[1].value, 'a', 'value was wrong');\n        assert.strictEqual(result[1].position, 1, 'position was wrong');\n        assert.strictEqual(result[1].regexIndex, 0, 'regex index was wrong');\n        assert.deepEqual(result[1].captureGroups, [], 'capture groups was not empty');\n        assert.strictEqual(result[2].value, ' ', 'value was wrong');\n        assert.strictEqual(result[2].position, 2, 'position was wrong');\n        assert.strictEqual(result[2].regexIndex, -1, 'regex index was wrong');\n        assert.deepEqual(result[2].captureGroups, [], 'capture groups was not empty');\n        assert.strictEqual(result[3].value, 'b', 'value was wrong');\n        assert.strictEqual(result[3].position, 3, 'position was wrong');\n        assert.strictEqual(result[3].regexIndex, 1, 'regex index was wrong');\n        assert.deepEqual(result[3].captureGroups, [], 'capture groups was not empty');\n      });\n      it('returns the correct result for global regexs', () => {\n        let result = TextUtils.TextUtils.Utils.splitStringByRegexes('', [/a/g, /b/g]);\n        assert.strictEqual(result.length, 0, 'length was wrong');\n\n        result = TextUtils.TextUtils.Utils.splitStringByRegexes('a', [/a/g, /b/g]);\n        assert.strictEqual(result.length, 1, 'length was wrong');\n        assert.strictEqual(result[0].value, 'a', 'value was wrong');\n        assert.strictEqual(result[0].position, 0, 'position was wrong');\n        assert.strictEqual(result[0].regexIndex, 0, 'regex index was wrong');\n        assert.deepEqual(result[0].captureGroups, [], 'capture groups was not empty');\n      });\n    });\n  });\n\n  describe('FilterParser', () => {\n    it('can be instantiated successfully', () => {\n      const testVal = 'TestVal1';\n      const filterParser = new TextUtils.TextUtils.FilterParser(['TestVal1']);\n      const result = filterParser.parse(testVal);\n      assert.strictEqual(result[0].text, testVal, 'text value was not returned correctly');\n      assert.strictEqual(result[0].negative, false, 'negative value was not returned correctly');\n    });\n\n    describe('parse', () => {\n      it('returns empty for empty string', () => {\n        const testVal = '';\n        const filterParser = new TextUtils.TextUtils.FilterParser(['TestVal1']);\n        const result = filterParser.parse(testVal);\n        assert.deepEqual(result, [], 'result was not empty');\n      });\n\n      // Ported from a web test: http/tests/devtools/unit/parse-filter-query.js\n      it('returns correct results for a range of inputs', () => {\n        const filterParser = new TextUtils.TextUtils.FilterParser(['key1', 'key2']);\n\n        const parse = (text: string) => {\n          return filterParser.parse(text) as {key?: string, text?: string, regex?: RegExp, negative: boolean}[];\n        };\n\n        let result = parse('text');\n        assert.deepEqual(\n            result[0], {key: undefined, regex: undefined, text: 'text', negative: false}, 'result was incorrect');\n\n        result = parse('spaced text');\n        assert.deepEqual(\n            result[0], {key: undefined, regex: undefined, text: 'spaced', negative: false}, 'result was incorrect');\n        assert.deepEqual(\n            result[1], {key: undefined, regex: undefined, text: 'text', negative: false}, 'result was incorrect');\n\n        result = parse('-');\n        assert.deepEqual(\n            result[0], {key: undefined, regex: undefined, text: '-', negative: false}, 'result was incorrect');\n\n        result = parse('-text');\n        assert.deepEqual(\n            result[0], {key: undefined, regex: undefined, text: 'text', negative: true}, 'result was incorrect');\n\n        result = parse('//');\n        assert.deepEqual(\n            result[0], {key: undefined, regex: undefined, text: '//', negative: false}, 'result was incorrect');\n\n        result = parse('/regex/');\n        assert.deepEqual(\n            result[0], {key: undefined, regex: /regex/i, text: undefined, negative: false}, 'result was incorrect');\n\n        result = parse('/regex/ /another/');\n        assert.deepEqual(\n            result[0], {key: undefined, regex: /regex/i, text: undefined, negative: false}, 'result was incorrect');\n        assert.deepEqual(\n            result[1], {key: undefined, regex: /another/i, text: undefined, negative: false}, 'result was incorrect');\n\n        result = parse(String.raw`/complex\\/regex/`);\n        assert.deepEqual(\n            result[0], {key: undefined, regex: /complex\\/regex/i, text: undefined, negative: false},\n            'result was incorrect');\n\n        result = parse(String.raw`/regex\\?/`);\n        assert.deepEqual(\n            result[0], {key: undefined, regex: /regex\\?/i, text: undefined, negative: false}, 'result was incorrect');\n\n        result = parse(String.raw`/regex\\//`);\n        assert.deepEqual(\n            result[0], {key: undefined, regex: /regex\\//i, text: undefined, negative: false}, 'result was incorrect');\n\n        result = parse(String.raw`/regex\\?/ text`);\n        assert.deepEqual(\n            result[0], {key: undefined, regex: /regex\\?/i, text: undefined, negative: false}, 'result was incorrect');\n        assert.deepEqual(\n            result[1], {key: undefined, regex: undefined, text: 'text', negative: false}, 'result was incorrect');\n\n        result = parse('/regex with spaces/');\n        assert.deepEqual(\n            result[0], {key: undefined, regex: /regex with spaces/i, text: undefined, negative: false},\n            'result was incorrect');\n\n        result = parse('/regex/ text');\n        assert.deepEqual(\n            result[0], {key: undefined, regex: /regex/i, text: undefined, negative: false}, 'result was incorrect');\n        assert.deepEqual(\n            result[1], {key: undefined, regex: undefined, text: 'text', negative: false}, 'result was incorrect');\n\n        result = parse('/regex with spaces/ text');\n        assert.deepEqual(\n            result[0], {key: undefined, regex: /regex with spaces/i, text: undefined, negative: false},\n            'result was incorrect');\n        assert.deepEqual(\n            result[1], {key: undefined, regex: undefined, text: 'text', negative: false}, 'result was incorrect');\n\n        result = parse('key1:foo');\n        assert.deepEqual(\n            result[0], {key: 'key1', regex: undefined, text: 'foo', negative: false}, 'result was incorrect');\n\n        result = parse('-key1:foo');\n        assert.deepEqual(\n            result[0], {key: 'key1', regex: undefined, text: 'foo', negative: true}, 'result was incorrect');\n\n        result = parse('key1:foo key2:bar');\n        assert.deepEqual(\n            result[0], {key: 'key1', regex: undefined, text: 'foo', negative: false}, 'result was incorrect');\n        assert.deepEqual(\n            result[1], {key: 'key2', regex: undefined, text: 'bar', negative: false}, 'result was incorrect');\n\n        result = parse('-key1:foo key2:bar');\n        assert.deepEqual(\n            result[0], {key: 'key1', regex: undefined, text: 'foo', negative: true}, 'result was incorrect');\n        assert.deepEqual(\n            result[1], {key: 'key2', regex: undefined, text: 'bar', negative: false}, 'result was incorrect');\n\n        result = parse('key1:foo -key2:bar');\n        assert.deepEqual(\n            result[0], {key: 'key1', regex: undefined, text: 'foo', negative: false}, 'result was incorrect');\n        assert.deepEqual(\n            result[1], {key: 'key2', regex: undefined, text: 'bar', negative: true}, 'result was incorrect');\n\n        result = parse('-key1:foo -key2:bar');\n        assert.deepEqual(\n            result[0], {key: 'key1', regex: undefined, text: 'foo', negative: true}, 'result was incorrect');\n        assert.deepEqual(\n            result[1], {key: 'key2', regex: undefined, text: 'bar', negative: true}, 'result was incorrect');\n\n        result = parse('key1:/regex/');\n        assert.deepEqual(\n            result[0], {key: 'key1', regex: undefined, text: '/regex/', negative: false}, 'result was incorrect');\n\n        result = parse('key1:foo innerText key2:bar');\n        assert.deepEqual(\n            result[0], {key: 'key1', regex: undefined, text: 'foo', negative: false}, 'result was incorrect');\n        assert.deepEqual(\n            result[1], {key: undefined, regex: undefined, text: 'innerText', negative: false}, 'result was incorrect');\n        assert.deepEqual(\n            result[2], {key: 'key2', regex: undefined, text: 'bar', negative: false}, 'result was incorrect');\n\n        result = parse('bar key1 foo');\n        assert.deepEqual(\n            result[0], {key: undefined, regex: undefined, text: 'bar', negative: false}, 'result was incorrect');\n        assert.deepEqual(\n            result[1], {key: undefined, regex: undefined, text: 'key1', negative: false}, 'result was incorrect');\n        assert.deepEqual(\n            result[2], {key: undefined, regex: undefined, text: 'foo', negative: false}, 'result was incorrect');\n\n        result = parse('bar key1:foo');\n        assert.deepEqual(\n            result[0], {key: undefined, regex: undefined, text: 'bar', negative: false}, 'result was incorrect');\n        assert.deepEqual(\n            result[1], {key: 'key1', regex: undefined, text: 'foo', negative: false}, 'result was incorrect');\n\n        result = parse('bar key1:foo baz');\n        assert.deepEqual(\n            result[0], {key: undefined, regex: undefined, text: 'bar', negative: false}, 'result was incorrect');\n        assert.deepEqual(\n            result[1], {key: 'key1', regex: undefined, text: 'foo', negative: false}, 'result was incorrect');\n        assert.deepEqual(\n            result[2], {key: undefined, regex: undefined, text: 'baz', negative: false}, 'result was incorrect');\n\n        result = parse('bar key1:foo yek:roo baz');\n        assert.deepEqual(\n            result[0], {key: undefined, regex: undefined, text: 'bar', negative: false}, 'result was incorrect');\n        assert.deepEqual(\n            result[1], {key: 'key1', regex: undefined, text: 'foo', negative: false}, 'result was incorrect');\n        assert.deepEqual(\n            result[2], {key: undefined, regex: undefined, text: 'yek:roo', negative: false}, 'result was incorrect');\n        assert.deepEqual(\n            result[3], {key: undefined, regex: undefined, text: 'baz', negative: false}, 'result was incorrect');\n\n        result = parse('bar key1:foo -yek:roo baz');\n        assert.deepEqual(\n            result[0], {key: undefined, regex: undefined, text: 'bar', negative: false}, 'result was incorrect');\n        assert.deepEqual(\n            result[1], {key: 'key1', regex: undefined, text: 'foo', negative: false}, 'result was incorrect');\n        assert.deepEqual(\n            result[2], {key: undefined, regex: undefined, text: 'yek:roo', negative: true}, 'result was incorrect');\n        assert.deepEqual(\n            result[3], {key: undefined, regex: undefined, text: 'baz', negative: false}, 'result was incorrect');\n\n        result = parse('bar baz key1:foo goo zoo');\n        assert.deepEqual(\n            result[0], {key: undefined, regex: undefined, text: 'bar', negative: false}, 'result was incorrect');\n        assert.deepEqual(\n            result[1], {key: undefined, regex: undefined, text: 'baz', negative: false}, 'result was incorrect');\n        assert.deepEqual(\n            result[2], {key: 'key1', regex: undefined, text: 'foo', negative: false}, 'result was incorrect');\n        assert.deepEqual(\n            result[3], {key: undefined, regex: undefined, text: 'goo', negative: false}, 'result was incorrect');\n        assert.deepEqual(\n            result[4], {key: undefined, regex: undefined, text: 'zoo', negative: false}, 'result was incorrect');\n\n        result = parse('bar key1:key1:foo');\n        assert.deepEqual(\n            result[0], {key: undefined, regex: undefined, text: 'bar', negative: false}, 'result was incorrect');\n        assert.deepEqual(\n            result[1], {key: 'key1', regex: undefined, text: 'key1:foo', negative: false}, 'result was incorrect');\n\n        result = parse('bar :key1:foo baz');\n        assert.deepEqual(\n            result[0], {key: undefined, regex: undefined, text: 'bar', negative: false}, 'result was incorrect');\n        assert.deepEqual(\n            result[1], {key: undefined, regex: undefined, text: ':key1:foo', negative: false}, 'result was incorrect');\n        assert.deepEqual(\n            result[2], {key: undefined, regex: undefined, text: 'baz', negative: false}, 'result was incorrect');\n\n        result = parse('bar -:key1:foo baz');\n        assert.deepEqual(\n            result[0], {key: undefined, regex: undefined, text: 'bar', negative: false}, 'result was incorrect');\n        assert.deepEqual(\n            result[1], {key: undefined, regex: undefined, text: '-:key1:foo', negative: false}, 'result was incorrect');\n        assert.deepEqual(\n            result[2], {key: undefined, regex: undefined, text: 'baz', negative: false}, 'result was incorrect');\n\n        result = parse('bar key1:-foo baz');\n        assert.deepEqual(\n            result[0], {key: undefined, regex: undefined, text: 'bar', negative: false}, 'result was incorrect');\n        assert.deepEqual(\n            result[1], {key: 'key1', regex: undefined, text: '-foo', negative: false}, 'result was incorrect');\n        assert.deepEqual(\n            result[2], {key: undefined, regex: undefined, text: 'baz', negative: false}, 'result was incorrect');\n      });\n    });\n\n    it('cloneFilter gives a correct copy', () => {\n      const filter = {key: 'a', text: 'b', regex: /a/, negative: true};\n      const cloned = TextUtils.TextUtils.FilterParser.cloneFilter(filter);\n\n      assert.strictEqual(cloned.key, 'a', 'key was incorrect');\n      assert.strictEqual(cloned.text, 'b', 'text was incorrect');\n      assert.deepEqual(cloned.regex, /a/, 'regex was incorrect');\n      assert.strictEqual(cloned.negative, true, 'negative was incorrect');\n    });\n  });\n\n  describe('BalancedJSONTokenizer', () => {\n    it('can be instantiated successfully', () => {\n      const callback = () => {};\n      const findMultiple = false;\n      const tokenizer = new TextUtils.TextUtils.BalancedJSONTokenizer(callback, findMultiple);\n      assert.strictEqual(tokenizer.remainder(), '', 'remainder was not empty');\n    });\n\n    it('can balance simple patterns', () => {\n      const callbackResults: string[] = [];\n      const callback = (str: string) => {\n        callbackResults.push(str);\n      };\n      const findMultiple = false;\n      const tokenizer = new TextUtils.TextUtils.BalancedJSONTokenizer(callback, findMultiple);\n\n      let result = tokenizer.write('a');\n      assert.strictEqual(result, true, 'return value was incorrect');\n      assert.deepEqual(callbackResults, [], 'callback was called');\n\n      result = tokenizer.write('{}');\n      assert.strictEqual(result, true, 'return value was incorrect');\n      assert.deepEqual(callbackResults, ['a{}'], 'callback had unexpected results');\n    });\n\n    it('can find simple unbalanced patterns', () => {\n      const callbackResults: string[] = [];\n      const callback = (str: string) => {\n        callbackResults.push(str);\n      };\n      const findMultiple = false;\n      const tokenizer = new TextUtils.TextUtils.BalancedJSONTokenizer(callback, findMultiple);\n\n      const result = tokenizer.write('{}}');\n      assert.strictEqual(result, true, 'return value was incorrect');\n      assert.deepEqual(callbackResults, ['{}'], 'callback had unexpected results');\n      assert.strictEqual(tokenizer.remainder(), '}', 'remainder was incorrect');\n    });\n\n    it('can find simple unbalanced quote patterns', () => {\n      const callbackResults: string[] = [];\n      const callback = (str: string) => {\n        callbackResults.push(str);\n      };\n      const findMultiple = false;\n      const tokenizer = new TextUtils.TextUtils.BalancedJSONTokenizer(callback, findMultiple);\n\n      const result = tokenizer.write('\"\"\"');\n      assert.strictEqual(result, true, 'return value was incorrect');\n      assert.deepEqual(callbackResults, [], 'callback had unexpected results');\n      assert.strictEqual(tokenizer.remainder(), '\"\"\"', 'remainder was incorrect');\n    });\n\n    it('can find unbalanced patterns that start with }', () => {\n      const callbackResults: string[] = [];\n      const callback = (str: string) => {\n        callbackResults.push(str);\n      };\n      const findMultiple = false;\n      const tokenizer = new TextUtils.TextUtils.BalancedJSONTokenizer(callback, findMultiple);\n\n      const result = tokenizer.write('}}');\n      assert.strictEqual(result, false, 'return value was incorrect');\n      assert.deepEqual(callbackResults, [], 'callback had unexpected results');\n      assert.strictEqual(tokenizer.remainder(), '}}', 'remainder was incorrect');\n    });\n\n    it('can find unbalanced patterns that start with ]', () => {\n      const callbackResults: string[] = [];\n      const callback = (str: string) => {\n        callbackResults.push(str);\n      };\n      const findMultiple = false;\n      const tokenizer = new TextUtils.TextUtils.BalancedJSONTokenizer(callback, findMultiple);\n\n      const result = tokenizer.write(']]');\n      assert.strictEqual(result, false, 'return value was incorrect');\n      assert.deepEqual(callbackResults, [], 'callback had unexpected results');\n      assert.strictEqual(tokenizer.remainder(), ']]', 'remainder was incorrect');\n    });\n  });\n\n  describe('isMinified', () => {\n    const {isMinified} = TextUtils.TextUtils;\n\n    it('handles empty string', () => {\n      const result = isMinified('');\n      assert.strictEqual(result, false, 'was minified');\n    });\n\n    it('correctly detects a minified HTML document', () => {\n      const text = `\n<!DOCTYPE html>\n<html><head><title>Amazing document</title></head><body>${'<p>Some paragraph</p>'.repeat(100)}</body>\n<script>function something() {}</script>\n<style>* { color: black; }</style>\n</html>\n`;\n      assert.strictEqual(isMinified(text), true);\n    });\n\n    it('correctly detects minified Closure-style modules', () => {\n      const text = `try{\nexport class BalancedJSONTokenizer{constructor(e,t){this.callback=e,this.index=0,this.balance=0,this.buffer=\"\",this.findMultiple=t||!1,this.closingDoubleQuoteRegex=/[^\\\\](?:\\\\\\\\)*\"/g}\nwrite(e){this.buffer+=e;const t=this.buffer.length,i=this.buffer;let n;for(n=this.index;n<t;++n){const e=i[n];if('\"'===e){if(this.closingDoubleQuoteRegex.lastIndex=n,!this.closingDoubleQuoteRegex.test(i))break;n=this.closingDoubleQuoteRegex.lastIndex-1}else if(\"{\"===e)++this.balance;else if(\"}\"===e){if(--this.balance,this.balance<0)return this.reportBalanced(),!1;if(!this.balance&&(this.lastBalancedIndex=n+1,!this.findMultiple))break}else if(\"]\"===e&&!this.balance)return this.reportBalanced(),!1}return this.index=n,this.reportBalanced(),!0}\nreportBalanced(){this.lastBalancedIndex&&(this.callback(this.buffer.slice(0,this.lastBalancedIndex)),this.buffer=this.buffer.slice(this.lastBalancedIndex),this.index-=this.lastBalancedIndex,this.lastBalancedIndex=0)}remainder(){return this.buffer}};\n}catch(e){_._DumpException(e)}\n\ntry {\n\nexport const isMinified=function(e){let t=0;for(let i=0;i<e.length;++t){let t=e.indexOf(\"\\n\",i);\nt<0&&(t=e.length),i=t+1}return(e.length-t)/t>=80};export const performSearchInContent=function(e,t,i,n){const s=Platform.StringUtilities.createSearchRegex(t,i,n),l=new Text(e),a=[];\nfor(let e=0;e<l.lineCount();++e){const t=l.lineAt(e);s.lastIndex=0;const i=s.exec(t);i&&a.push(new SearchMatch(e,t,i.index))}return a};\n}catch(e){_._DumpException(e)}\n//# sourceMappingURL=http://some.staging-system.some-company.com/path/to/my/amazing/sourcemap/for/this/file.js.map\n// Some Company.`;\n      assert.strictEqual(isMinified(text), true);\n    });\n\n    it('doesn\\'t detect JavaScript with one very long line in the end as minified', () => {\n      let functions = 'const foo = 1;\\n', exports = 'export {foo';\n      for (let i = 0; i < 100; ++i) {\n        functions += `function aSomewhatLongFunctionName${i}(x) {\n  return x + ${i};\n}\n`;\n        exports += `, aSomewhatLongFunctionName${i} as func${i}`;\n      }\n      exports += '};\\n';\n      const text = `${functions}${exports}`;\n      assert.strictEqual(isMinified(text), false);\n    });\n  });\n\n  describe('detectIndentation', () => {\n    const {detectIndentation} = TextUtils.TextUtils;\n\n    it('returns `null` when no lines are given', () => {\n      assert.isNull(detectIndentation([]));\n    });\n\n    it('returns `null` when all lines are empty', () => {\n      assert.isNull(detectIndentation([\n        '',\n        '        ',\n        '        ',\n        '  ',\n        '',\n      ]));\n    });\n\n    it('correctly detects tab indentation', () => {\n      assert.strictEqual(detectIndentation(['\\ta', '\\t\\tb', 'c', 'd', '\\t\\t\\tf']), '\\t');\n      assert.strictEqual(detectIndentation(['hello():', '\\tworld();', '\\treturn;']), '\\t');\n      assert.strictEqual(\n          detectIndentation(`/**\n * Heuristic to check whether a given text was likely minified. Intended to\n * be used for HTML, CSS, and JavaScript inputs.\n *\n * A text is considered to be the result of minification if the average\n * line length for the whole text is 80 characters or more.\n *\n * @param text The input text to check.\n * @returns\n */\nfunction isMinified(text) {\n\\tlet lineCount = 0;\n\\tfor (let lastIndex = 0; lastIndex < text.length; ++lineCount) {\n\\t\\tlet eolIndex = text.indexOf('\\n', lastIndex);\n\\t\\tif (eolIndex < 0) {\n\\t\\t\\teolIndex = text.length;\n\\t\\t}\n\\t\\tlastIndex = eolIndex + 1;\n\\t}\n\\treturn (text.length - lineCount) / lineCount >= 80;\n}`.split('\\n')),\n          '\\t');\n    });\n\n    it('correctly detects 1-space indentation', () => {\n      assert.strictEqual(\n          detectIndentation(`/**\n * Heuristic to check whether a given text was likely minified. Intended to\n * be used for HTML, CSS, and JavaScript inputs.\n *\n * A text is considered to be the result of minification if the average\n * line length for the whole text is 80 characters or more.\n *\n * @param text The input text to check.\n * @returns\n */\nfunction isMinified(text) {\n let lineCount = 0;\n for (let lastIndex = 0; lastIndex < text.length; ++lineCount) {\n  let eolIndex = text.indexOf('\\n', lastIndex);\n  if (eolIndex < 0) {\n   eolIndex = text.length;\n  }\n  lastIndex = eolIndex + 1;\n }\n return (text.length - lineCount) / lineCount >= 80;\n}`.split('\\n')),\n          ' ');\n    });\n\n    it('correctly detects 2-space indentation', () => {\n      assert.strictEqual(\n          detectIndentation(`/**\n * Heuristic to check whether a given text was likely minified. Intended to\n * be used for HTML, CSS, and JavaScript inputs.\n *\n * A text is considered to be the result of minification if the average\n * line length for the whole text is 80 characters or more.\n *\n * @param text The input text to check.\n * @returns\n */\nfunction isMinified(text) {\n  let lineCount = 0;\n  for (let lastIndex = 0; lastIndex < text.length; ++lineCount) {\n    let eolIndex = text.indexOf('\\n', lastIndex);\n    if (eolIndex < 0) {\n      eolIndex = text.length;\n    }\n    lastIndex = eolIndex + 1;\n  }\n  return (text.length - lineCount) / lineCount >= 80;\n}`.split('\\n')),\n          '  ');\n    });\n\n    it('correctly detects 4-space indentation', () => {\n      assert.strictEqual(detectIndentation(['hello():', '    world();', '    return;']), '    ');\n      assert.strictEqual(\n          detectIndentation(`/**\n * Heuristic to check whether a given text was likely minified. Intended to\n * be used for HTML, CSS, and JavaScript inputs.\n *\n * A text is considered to be the result of minification if the average\n * line length for the whole text is 80 characters or more.\n *\n * @param text The input text to check.\n * @returns\n */\nfunction isMinified(text) {\n    let lineCount = 0;\n    for (let lastIndex = 0; lastIndex < text.length; ++lineCount) {\n        let eolIndex = text.indexOf('\\n', lastIndex);\n        if (eolIndex < 0) {\n            eolIndex = text.length;\n        }\n        lastIndex = eolIndex + 1;\n    }\n    return (text.length - lineCount) / lineCount >= 80;\n}`.split('\\n')),\n          '    ');\n\n      // Below is the problematic example explicitly called out\n      // in go/chrome-devtools:indentation-markers-proposal\n      assert.strictEqual(\n          detectIndentation(`import { HOOK_PLUGIN_SETTINGS_SET } from './const.js';\nimport { now } from './time.js';\nexport class ApiProxy {\n    constructor(plugin, hook) {\n        this.target = null;\n        this.targetQueue = [];\n        this.onQueue = [];\n        this.plugin = plugin;\n        this.hook = hook;\n        const defaultSettings = {};\n        if (plugin.settings) {\n            for (const id in plugin.settings) {\n                const item = plugin.settings[id];\n                defaultSettings[id] = item.defaultValue;\n            }\n        }\n        const localSettingsSaveId = \\`__vue-devtools-plugin-settings__\\${plugin.id}\\`;\n        let currentSettings = Object.assign({}, defaultSettings);\n        try {\n            const raw = localStorage.getItem(localSettingsSaveId);\n            const data = JSON.parse(raw);\n            Object.assign(currentSettings, data);\n        }\n        catch (e) {\n            // noop\n        }\n        this.fallbacks = {\n            getSettings() {\n                return currentSettings;\n            },\n            setSettings(value) {\n                try {\n                    localStorage.setItem(localSettingsSaveId, JSON.stringify(value));\n                }\n                catch (e) {\n                    // noop\n                }\n                currentSettings = value;\n            },\n            now() {\n                return now();\n            },\n        };\n        if (hook) {\n            hook.on(HOOK_PLUGIN_SETTINGS_SET, (pluginId, value) => {\n                if (pluginId === this.plugin.id) {\n                    this.fallbacks.setSettings(value);\n                }\n            });\n        }\n        this.proxiedOn = new Proxy({}, {\n            get: (_target, prop) => {\n                if (this.target) {\n                    return this.target.on[prop];\n                }\n                else {\n                    return (...args) => {\n                        this.onQueue.push({\n                            method: prop,\n                            args,\n                        });\n                    };\n                }\n            },\n        });\n        this.proxiedTarget = new Proxy({}, {\n            get: (_target, prop) => {\n                if (this.target) {\n                    return this.target[prop];\n                }\n                else if (prop === 'on') {\n                    return this.proxiedOn;\n                }\n                else if (Object.keys(this.fallbacks).includes(prop)) {\n                    return (...args) => {\n                        this.targetQueue.push({\n                            method: prop,\n                            args,\n                            resolve: () => { },\n                        });\n                        return this.fallbacks[prop](...args);\n                    };\n                }\n                else {\n                    return (...args) => {\n                        return new Promise(resolve => {\n                            this.targetQueue.push({\n                                method: prop,\n                                args,\n                                resolve,\n                            });\n                        });\n                    };\n                }\n            },\n        });\n    }\n    async setRealTarget(target) {\n        this.target = target;\n        for (const item of this.onQueue) {\n            this.target.on[item.method](...item.args);\n        }\n        for (const item of this.targetQueue) {\n            item.resolve(await this.target[item.method](...item.args));\n        }\n    }\n}`.split('\\n')),\n          '    ');\n    });\n  });\n\n  describe('performExtendedSearchInContent', () => {\n    it('returns an entry for each match on the same line', () => {\n      const lines = ['The first line with a second \"the\".', 'The second line.'];\n\n      const result = TextUtils.TextUtils.performSearchInContent(lines.join('\\n'), 'the', false, false);\n\n      assert.deepEqual(result, [\n        new TextUtils.ContentProvider.SearchMatch(0, lines[0], 0, 3),\n        new TextUtils.ContentProvider.SearchMatch(0, lines[0], 30, 3),\n        new TextUtils.ContentProvider.SearchMatch(1, lines[1], 0, 3),\n      ]);\n    });\n  });\n\n  describe('performExtendedSearchInSearchMatches', () => {\n    it('returns an entry for each match on the same line', () => {\n      const lines = ['The first line with a second \"the\".', 'The second line.'];\n      const searchMatches = [\n        {lineContent: lines[0], lineNumber: 5},\n        {lineContent: lines[1], lineNumber: 42},\n      ];\n\n      const result = TextUtils.TextUtils.performSearchInSearchMatches(searchMatches, 'the', false, false);\n\n      assert.deepEqual(result, [\n        new TextUtils.ContentProvider.SearchMatch(5, lines[0], 0, 3),\n        new TextUtils.ContentProvider.SearchMatch(5, lines[0], 30, 3),\n        new TextUtils.ContentProvider.SearchMatch(42, lines[1], 0, 3),\n      ]);\n    });\n  });\n});\n"]}