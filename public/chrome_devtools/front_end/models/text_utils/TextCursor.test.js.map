{"version":3,"file":"TextCursor.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/text_utils/TextCursor.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as TextUtils from './text_utils.js';\n\ndescribe('TextCursor', () => {\n  it('can be instantiated successfully', () => {\n    const cursor = new TextUtils.TextCursor.TextCursor([0, 5, 10, 15]);\n    assert.strictEqual(cursor.lineNumber(), 0, 'lineNumber should be initialised to 0');\n    assert.strictEqual(cursor.columnNumber(), 0, 'columnNumber should be initialised to 0');\n  });\n\n  it('can be advanced by a certain offset', () => {\n    const cursor = new TextUtils.TextCursor.TextCursor([5, 10, 15]);\n    cursor.advance(8);\n    assert.strictEqual(cursor.lineNumber(), 1, 'lineNumber should be correct');\n    assert.strictEqual(cursor.columnNumber(), 2, 'columnNumber should be correct');\n  });\n\n  it('should handle an advance to 0', () => {\n    const cursor = new TextUtils.TextCursor.TextCursor([5, 10, 15]);\n    cursor.advance(0);\n    assert.strictEqual(cursor.lineNumber(), 0, 'lineNumber should be correct');\n    assert.strictEqual(cursor.columnNumber(), 0, 'columnNumber should be correct');\n  });\n\n  it('should return the current offset', () => {\n    const cursor = new TextUtils.TextCursor.TextCursor([5, 10, 15]);\n    cursor.advance(8);\n    cursor.advance(8);\n    assert.strictEqual(cursor.offset(), 8);\n  });\n\n  it('should jump to a certain offset', () => {\n    const cursor = new TextUtils.TextCursor.TextCursor([5, 10, 15]);\n    cursor.resetTo(8);\n    assert.strictEqual(cursor.lineNumber(), 1, 'lineNumber should be correct');\n    assert.strictEqual(cursor.columnNumber(), 2, 'columnNumber should be correct');\n  });\n\n  it('should be able to jump to an offset of 0', () => {\n    const cursor = new TextUtils.TextCursor.TextCursor([5, 10, 15]);\n    cursor.resetTo(0);\n    assert.strictEqual(cursor.lineNumber(), 0, 'lineNumber should be correct');\n    assert.strictEqual(cursor.columnNumber(), 0, 'columnNumber should be correct');\n  });\n});\n"]}