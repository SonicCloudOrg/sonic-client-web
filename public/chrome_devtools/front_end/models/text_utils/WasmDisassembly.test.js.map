{"version":3,"file":"WasmDisassembly.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/text_utils/WasmDisassembly.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as TextUtils from './text_utils.js';\n\nconst WasmDisassembly = TextUtils.WasmDisassembly.WasmDisassembly;\n\ndescribe('WasmDisassembly', () => {\n  const LINES = ['A', 'B', 'C', 'D', 'E', 'F', 'G', ' H', 'I'];\n  const BYTECODE_OFFSETS = [0, 10, 23, 32, 35, 37, 39, 40, 75];\n  const FUNCTION_BODY_OFFSETS = [{start: 35, end: 41}];\n\n  it('reports the correct line numbers', () => {\n    const disassembly = new WasmDisassembly(LINES, BYTECODE_OFFSETS, FUNCTION_BODY_OFFSETS);\n    assert.strictEqual(disassembly.lineNumbers, BYTECODE_OFFSETS.length);\n  });\n\n  it('maps line numbers to bytecode offsets correctly', () => {\n    const disassembly = new WasmDisassembly(LINES, BYTECODE_OFFSETS, FUNCTION_BODY_OFFSETS);\n    for (const [lineNumber, bytecodeOffset] of BYTECODE_OFFSETS.entries()) {\n      assert.strictEqual(disassembly.lineNumberToBytecodeOffset(lineNumber), bytecodeOffset);\n    }\n  });\n\n  it('maps bytecode offsets to line numbers correctly', () => {\n    const disassembly = new WasmDisassembly(LINES, BYTECODE_OFFSETS, FUNCTION_BODY_OFFSETS);\n    for (const [lineNumber, bytecodeOffset] of BYTECODE_OFFSETS.entries()) {\n      assert.strictEqual(disassembly.bytecodeOffsetToLineNumber(bytecodeOffset), lineNumber);\n    }\n  });\n\n  it('yields non-breakable line numbers correctly', () => {\n    const disassembly = new WasmDisassembly(LINES, BYTECODE_OFFSETS, FUNCTION_BODY_OFFSETS);\n    assert.deepEqual([...disassembly.nonBreakableLineNumbers()], [0, 1, 2, 3, 8]);\n  });\n\n  it('can be converted to a DeferredContent', () => {\n    const disassembly = new WasmDisassembly(LINES, BYTECODE_OFFSETS, FUNCTION_BODY_OFFSETS);\n    const content = disassembly.asDeferedContent();\n\n    if ('wasmDisassemblyInfo' in content) {\n      assert.strictEqual(content.wasmDisassemblyInfo, disassembly);\n    } else {\n      assert.fail('wasmDissasembly not set on DeferredContent');\n    }\n    assert.isEmpty(content.content);\n    assert.isFalse(content.isEncoded);\n  });\n\n  it('produces the joined lines for the \"text\" property', () => {\n    const disassembly = new WasmDisassembly(LINES, BYTECODE_OFFSETS, FUNCTION_BODY_OFFSETS);\n\n    assert.strictEqual(disassembly.text, 'A\\nB\\nC\\nD\\nE\\nF\\nG\\n H\\nI');\n  });\n});\n"]}