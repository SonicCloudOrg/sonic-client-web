{"version":3,"file":"TextRange.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/text_utils/TextRange.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as TextUtils from './text_utils.js';\n\ninterface ExpectedTextRange {\n  startLine: number;\n  startColumn: number;\n  endLine: number;\n  endColumn: number;\n}\n\nfunction assertIsTextRangeAndEqualsRange(\n    range: TextUtils.TextRange.TextRange, expectedRange: ExpectedTextRange, description: string) {\n  const prefix = description.length ? `${description}, but ` : '';\n  assert.isTrue(\n      range instanceof TextUtils.TextRange.TextRange, `${prefix}range is not a TextUtils.TextRange.TextRange`);\n  assert.strictEqual(range.startLine, expectedRange.startLine, `${prefix}range's startLine differs from expectation`);\n  assert.strictEqual(\n      range.startColumn, expectedRange.startColumn, `${prefix}range's startColumn differs from expectation`);\n  assert.strictEqual(range.endLine, expectedRange.endLine, `${prefix}range's endLine differs from expectation`);\n  assert.strictEqual(range.endColumn, expectedRange.endColumn, `${prefix}range's endColumn differs from expectation`);\n}\n\nfunction assertIsUnitTextRange(\n    range: TextUtils.TextRange.TextRange, line: number, column: number, description: string) {\n  const prefix = description.length ? `${description}, but ` : '';\n  assert.isTrue(\n      range instanceof TextUtils.TextRange.TextRange, `${prefix}range is not a TextUtils.TextRange.TextRange`);\n  assert.strictEqual(range.startLine, range.endLine, `${prefix}the range is not a unit range: start/end lines differ`);\n  assert.strictEqual(\n      range.startColumn, range.endColumn, `${prefix}the range is not a unit range: start/end columns differ`);\n  assert.strictEqual(range.startLine, line, `${prefix}the line was not set correctly`);\n  assert.strictEqual(range.startColumn, column, `${prefix}the column was not set correctly`);\n}\n\ndescribe('TextRange', () => {\n  it('can be instantiated successfully', () => {\n    const startLine = 1;\n    const startColumn = 2;\n    const endLine = 3;\n    const endColumn = 4;\n    const textRange = new TextUtils.TextRange.TextRange(startLine, startColumn, endLine, endColumn);\n    assert.strictEqual(textRange.startLine, startLine, 'the start line was not set or retrieved correctly');\n    assert.strictEqual(textRange.startColumn, startColumn, 'the start column was not set or retrieved correctly');\n    assert.strictEqual(textRange.endLine, endLine, 'the end line was not set or retrieved correctly');\n    assert.strictEqual(textRange.endColumn, endColumn, 'the end column was not set or retrieved correctly');\n  });\n\n  it('can be created from a location', () => {\n    const line = 1;\n    const column = 2;\n    const textRange = TextUtils.TextRange.TextRange.createFromLocation(line, column);\n    assertIsUnitTextRange(textRange, line, column, 'range created from a location should be a unit range');\n  });\n\n  it('can be created from a serialized text range', () => {\n    const range = {startLine: 1, startColumn: 2, endLine: 3, endColumn: 4};\n    const textRange = TextUtils.TextRange.TextRange.fromObject(range);\n    assertIsTextRangeAndEqualsRange(textRange, range, 'deserializing should preserve the range');\n    const serializedRange = textRange.serializeToObject();\n    const deserializedTextRange = TextUtils.TextRange.TextRange.fromObject(serializedRange);\n    assertIsTextRangeAndEqualsRange(deserializedTextRange, range, 'deserializing should preserve the range');\n  });\n\n  it('can be checked for emptiness', () => {\n    const textRange =\n        TextUtils.TextRange.TextRange.fromObject({startLine: 1, startColumn: 2, endLine: 1, endColumn: 2});\n    assert.isTrue(textRange.isEmpty(), 'the range was non-empty');\n  });\n\n  describe('immediatelyPrecedes()', () => {\n    it('can handle non-range inputs', () => {\n      const textRange =\n          TextUtils.TextRange.TextRange.fromObject({startLine: 1, startColumn: 2, endLine: 3, endColumn: 4});\n      assert.isFalse(textRange.immediatelyPrecedes(), 'invalid ranges should not be judged as immediatelly preceeding');\n    });\n\n    it('can judge immediate preceedence correctly', () => {\n      const textRangeA =\n          TextUtils.TextRange.TextRange.fromObject({startLine: 1, startColumn: 2, endLine: 3, endColumn: 4});\n      const textRangeB =\n          TextUtils.TextRange.TextRange.fromObject({startLine: 3, startColumn: 4, endLine: 5, endColumn: 6});\n      const textRangeC =\n          TextUtils.TextRange.TextRange.fromObject({startLine: 5, startColumn: 6, endLine: 7, endColumn: 8});\n      assert.isTrue(textRangeA.immediatelyPrecedes(textRangeB), 'range A should immediatelly preceed range B');\n      assert.isTrue(textRangeB.immediatelyPrecedes(textRangeC), 'range B should immediatelly preceed range C');\n      assert.isFalse(textRangeB.immediatelyPrecedes(textRangeA), 'range B should not immediatelly preceed range A');\n      assert.isFalse(textRangeA.immediatelyPrecedes(textRangeC), 'range A should not immediatelly preceed range C');\n    });\n  });\n\n  describe('immediatelyFollows()', () => {\n    it('can handle non-range inputs', () => {\n      const textRange =\n          TextUtils.TextRange.TextRange.fromObject({startLine: 1, startColumn: 2, endLine: 3, endColumn: 4});\n      assert.isFalse(textRange.immediatelyFollows(), 'invalid ranges should not be judged as \\'immediatelly follows\\'');\n    });\n\n    it('can judge \\'immediatelly follows\\' relationship correctly', () => {\n      const textRangeA =\n          TextUtils.TextRange.TextRange.fromObject({startLine: 1, startColumn: 2, endLine: 3, endColumn: 4});\n      const textRangeB =\n          TextUtils.TextRange.TextRange.fromObject({startLine: 3, startColumn: 4, endLine: 5, endColumn: 6});\n      const textRangeC =\n          TextUtils.TextRange.TextRange.fromObject({startLine: 5, startColumn: 6, endLine: 7, endColumn: 8});\n      assert.isTrue(textRangeB.immediatelyFollows(textRangeA), 'range B should immediatelly follow range A');\n      assert.isTrue(textRangeC.immediatelyFollows(textRangeB), 'range C should immediatelly follow range B');\n      assert.isFalse(textRangeA.immediatelyFollows(textRangeB), 'range A should not immediatelly follow range B');\n      assert.isFalse(textRangeC.immediatelyFollows(textRangeA), 'range C should not immediatelly follow range A');\n    });\n  });\n\n  describe('follows()', () => {\n    it('can judge \\'follows\\' relationship correctly', () => {\n      const textRangeA =\n          TextUtils.TextRange.TextRange.fromObject({startLine: 1, startColumn: 2, endLine: 3, endColumn: 4});\n      const textRangeB =\n          TextUtils.TextRange.TextRange.fromObject({startLine: 3, startColumn: 4, endLine: 5, endColumn: 6});\n      const textRangeC =\n          TextUtils.TextRange.TextRange.fromObject({startLine: 5, startColumn: 6, endLine: 7, endColumn: 8});\n      assert.isTrue(textRangeB.follows(textRangeA), 'range B should follow range A');\n      assert.isTrue(textRangeC.follows(textRangeB), 'range C should follow range B');\n      assert.isFalse(textRangeA.follows(textRangeB), 'range A should not follow range B');\n      assert.isTrue(textRangeC.follows(textRangeA), 'range C should follow range A');\n    });\n  });\n\n  it('can report the line count', () => {\n    const textRangeA =\n        TextUtils.TextRange.TextRange.fromObject({startLine: 1, startColumn: 2, endLine: 1, endColumn: 2});\n    const textRangeB =\n        TextUtils.TextRange.TextRange.fromObject({startLine: 1, startColumn: 2, endLine: 2, endColumn: 2});\n    const textRangeC =\n        TextUtils.TextRange.TextRange.fromObject({startLine: 1, startColumn: 2, endLine: 12, endColumn: 2});\n    assert.strictEqual(textRangeA.linesCount, 0, 'line count was wrong');\n    assert.strictEqual(textRangeB.linesCount, 1, 'line count was wrong');\n    assert.strictEqual(textRangeC.linesCount, 11, 'line count was wrong');\n  });\n\n  it('can be collapsed to start', () => {\n    const rangeA = {startLine: 1, startColumn: 2, endLine: 1, endColumn: 2};\n    const textRangeA = TextUtils.TextRange.TextRange.fromObject(rangeA);\n    const rangeB = {startLine: 4, startColumn: 2, endLine: 2, endColumn: 2};\n    const textRangeB = TextUtils.TextRange.TextRange.fromObject(rangeB);\n    const textRangeACollapsed = textRangeA.collapseToStart();\n    assertIsUnitTextRange(\n        textRangeACollapsed, rangeA.startLine, rangeA.startColumn,\n        'collapsing to start should produce a unit range at start');\n    const textRangeBCollapsed = textRangeB.collapseToStart();\n    assertIsUnitTextRange(\n        textRangeBCollapsed, rangeB.startLine, rangeB.startColumn,\n        'collapsing to start should produce a unit range at start');\n    assertIsTextRangeAndEqualsRange(textRangeA, rangeA, 'original TextUtils.TextRange.TextRange should be unchanged');\n    assertIsTextRangeAndEqualsRange(textRangeB, rangeB, 'original TextUtils.TextRange.TextRange should be unchanged');\n  });\n\n  it('can be collapsed to end', () => {\n    const rangeA = {startLine: 1, startColumn: 2, endLine: 1, endColumn: 2};\n    const textRangeA = TextUtils.TextRange.TextRange.fromObject(rangeA);\n    const rangeB = {startLine: 4, startColumn: 2, endLine: 2, endColumn: 2};\n    const textRangeB = TextUtils.TextRange.TextRange.fromObject(rangeB);\n    const textRangeACollapsed = textRangeA.collapseToEnd();\n    assertIsUnitTextRange(\n        textRangeACollapsed, rangeA.endLine, rangeA.endColumn, 'collapsing to end should produce a unit range at end');\n    const textRangeBCollapsed = textRangeB.collapseToEnd();\n    assertIsUnitTextRange(\n        textRangeBCollapsed, rangeB.endLine, rangeB.endColumn, 'collapsing to end should produce a unit range at end');\n    assertIsTextRangeAndEqualsRange(textRangeA, rangeA, 'original TextUtils.TextRange.TextRange should be unchanged');\n    assertIsTextRangeAndEqualsRange(textRangeB, rangeB, 'original TextUtils.TextRange.TextRange should be unchanged');\n  });\n\n  it('can be normalized', () => {\n    const rangeA = {startLine: 1, startColumn: 2, endLine: 3, endColumn: 4};\n    const textRangeA = TextUtils.TextRange.TextRange.fromObject(rangeA);\n    const rangeB = {startLine: 3, startColumn: 4, endLine: 1, endColumn: 2};\n    const textRangeB = TextUtils.TextRange.TextRange.fromObject(rangeB);\n    const textRangeANormalized = textRangeA.normalize();\n    const textRangeBNormalized = textRangeB.normalize();\n    assertIsTextRangeAndEqualsRange(textRangeANormalized, rangeA, 'normalizing should keep range A unchanged');\n    assert.notStrictEqual(textRangeANormalized, textRangeA, 'range should have been cloned');\n    assertIsTextRangeAndEqualsRange(textRangeBNormalized, rangeA, 'range B should be normalized');\n    assertIsTextRangeAndEqualsRange(textRangeA, rangeA, 'range A should be unchanged');\n    assertIsTextRangeAndEqualsRange(textRangeB, rangeB, 'range B should be unchanged');\n  });\n\n  it('can be cloned', () => {\n    const rangeA = {startLine: 1, startColumn: 2, endLine: 3, endColumn: 4};\n    const textRangeA = TextUtils.TextRange.TextRange.fromObject(rangeA);\n    const textRangeB = textRangeA.clone();\n    assertIsTextRangeAndEqualsRange(textRangeB, rangeA, 'cloned range should be equal');\n    assert.notStrictEqual(textRangeB, textRangeA, 'cloned range should be different object');\n    assertIsTextRangeAndEqualsRange(textRangeA, rangeA, 'original range should be unchanged');\n  });\n\n  it('can be checked for equality', () => {\n    const rangeA = {startLine: 1, startColumn: 2, endLine: 3, endColumn: 4};\n    const textRangeA = TextUtils.TextRange.TextRange.fromObject(rangeA);\n    const textRangeB = TextUtils.TextRange.TextRange.fromObject(rangeA);\n    assert.isTrue(textRangeA.equal(textRangeA), 'range A is equal to itself');\n    assert.isTrue(textRangeA.equal(textRangeB), 'range A and B are equal');\n  });\n\n  it('can be compared', () => {\n    const textRangeA =\n        TextUtils.TextRange.TextRange.fromObject({startLine: 1, startColumn: 2, endLine: 3, endColumn: 4});\n    const textRangeB =\n        TextUtils.TextRange.TextRange.fromObject({startLine: 1, startColumn: 4, endLine: 3, endColumn: 4});\n    const textRangeC =\n        TextUtils.TextRange.TextRange.fromObject({startLine: 2, startColumn: 2, endLine: 3, endColumn: 4});\n    const textRangeD =\n        TextUtils.TextRange.TextRange.fromObject({startLine: 3, startColumn: 1, endLine: 3, endColumn: 4});\n\n    assert.strictEqual(textRangeA.compareTo(textRangeA), 0, 'A should be equal to itself');\n    assert.strictEqual(textRangeA.compareTo(textRangeB), -1, 'A should be before B');\n    assert.strictEqual(textRangeB.compareTo(textRangeA), 1, 'B should be after A');\n    assert.strictEqual(textRangeA.compareTo(textRangeC), -1, 'A should be before C');\n    assert.strictEqual(textRangeC.compareTo(textRangeA), 1, 'C should be after A');\n    assert.strictEqual(textRangeC.compareTo(textRangeD), -1, 'C should be before D');\n    assert.strictEqual(textRangeD.compareTo(textRangeC), 1, 'D should be after C');\n  });\n\n  it('can be compared with TextUtils.TextRange.TextRange.comparator', () => {\n    const textRangeA =\n        TextUtils.TextRange.TextRange.fromObject({startLine: 1, startColumn: 2, endLine: 3, endColumn: 4});\n    const textRangeB =\n        TextUtils.TextRange.TextRange.fromObject({startLine: 1, startColumn: 4, endLine: 3, endColumn: 4});\n    const textRangeC =\n        TextUtils.TextRange.TextRange.fromObject({startLine: 2, startColumn: 2, endLine: 3, endColumn: 4});\n    const textRangeD =\n        TextUtils.TextRange.TextRange.fromObject({startLine: 3, startColumn: 1, endLine: 3, endColumn: 4});\n\n    assert.strictEqual(\n        TextUtils.TextRange.TextRange.comparator(textRangeA, textRangeA), 0, 'A should be equal to itself');\n    assert.strictEqual(TextUtils.TextRange.TextRange.comparator(textRangeA, textRangeB), -1, 'A should be before B');\n    assert.strictEqual(TextUtils.TextRange.TextRange.comparator(textRangeB, textRangeA), 1, 'B should be after A');\n    assert.strictEqual(TextUtils.TextRange.TextRange.comparator(textRangeA, textRangeC), -1, 'A should be before C');\n    assert.strictEqual(TextUtils.TextRange.TextRange.comparator(textRangeC, textRangeA), 1, 'C should be after A');\n    assert.strictEqual(TextUtils.TextRange.TextRange.comparator(textRangeC, textRangeD), -1, 'C should be before D');\n    assert.strictEqual(TextUtils.TextRange.TextRange.comparator(textRangeD, textRangeC), 1, 'D should be after C');\n  });\n\n  it('can be compared to a position', () => {\n    const textRangeA =\n        TextUtils.TextRange.TextRange.fromObject({startLine: 1, startColumn: 2, endLine: 3, endColumn: 4});\n    assert.strictEqual(textRangeA.compareToPosition(0, 3), -1, 'position before range should compare less');\n    assert.strictEqual(textRangeA.compareToPosition(1, 1), -1, 'position before range should compare less');\n    assert.strictEqual(textRangeA.compareToPosition(1, 2), 0, 'start position should compare equal');\n    assert.strictEqual(textRangeA.compareToPosition(1, 4), 0, 'position in range should compare equal');\n    assert.strictEqual(textRangeA.compareToPosition(3, 4), 0, 'end position should compare equal');\n    assert.strictEqual(textRangeA.compareToPosition(3, 5), 1, 'position after range should compare greater');\n    assert.strictEqual(textRangeA.compareToPosition(4, 4), 1, 'position after range should compare greater');\n  });\n\n  it('can be adjusted relative to a position', () => {\n    const textRange =\n        TextUtils.TextRange.TextRange.fromObject({startLine: 4, startColumn: 3, endLine: 6, endColumn: 7});\n    const relativeTextRangeA = textRange.relativeTo(2, 2);\n    const expectedRangeA = {startLine: 2, startColumn: 3, endLine: 4, endColumn: 7};\n    assertIsTextRangeAndEqualsRange(\n        relativeTextRangeA, expectedRangeA,\n        'relativating to position strictly inside line range should not change columns');\n    const relativeTextRangeB = textRange.relativeTo(4, 2);\n    const expectedRangeB = {startLine: 0, startColumn: 1, endLine: 2, endColumn: 7};\n    assertIsTextRangeAndEqualsRange(\n        relativeTextRangeB, expectedRangeB, 'relativating to position on start line should change start column');\n    const relativeTextRangeC = textRange.relativeTo(6, 3);\n    const expectedRangeC = {startLine: -2, startColumn: 3, endLine: 0, endColumn: 4};\n    assertIsTextRangeAndEqualsRange(\n        relativeTextRangeC, expectedRangeC, 'relativating to position on end line should change end column');\n    const relativeTextRangeD = textRange.relativeTo(0, 0);\n    assert.notStrictEqual(relativeTextRangeD, textRange, 'relativeTo should clone range');\n  });\n\n  it('can be adjusted relative from a position', () => {\n    const textRange =\n        TextUtils.TextRange.TextRange.fromObject({startLine: 4, startColumn: 3, endLine: 6, endColumn: 7});\n    const relativeTextRangeA = textRange.relativeFrom(2, 2);\n    const expectedRangeA = {startLine: 6, startColumn: 3, endLine: 8, endColumn: 7};\n    assertIsTextRangeAndEqualsRange(\n        relativeTextRangeA, expectedRangeA,\n        'relativating from position strictly inside line range should not change columns');\n    const relativeTextRangeB = textRange.relativeFrom(4, 2);\n    const expectedRangeB = {startLine: 8, startColumn: 3, endLine: 10, endColumn: 7};\n    assertIsTextRangeAndEqualsRange(\n        relativeTextRangeB, expectedRangeB, 'relativating from position on start line should not change columns');\n    const relativeTextRangeC = textRange.relativeFrom(6, 3);\n    const expectedRangeC = {startLine: 10, startColumn: 3, endLine: 12, endColumn: 7};\n    assertIsTextRangeAndEqualsRange(\n        relativeTextRangeC, expectedRangeC, 'relativating from position on end line should not change columns');\n    const relativeTextRangeD = textRange.relativeFrom(0, 0);\n    assert.notStrictEqual(relativeTextRangeD, textRange, 'relativeFrom should clone range');\n\n    const textRange2 =\n        TextUtils.TextRange.TextRange.fromObject({startLine: 0, startColumn: 3, endLine: 6, endColumn: 7});\n    const relativeTextRangeE = textRange2.relativeFrom(2, 2);\n    const expectedRangeE = {startLine: 2, startColumn: 5, endLine: 8, endColumn: 7};\n    assertIsTextRangeAndEqualsRange(\n        relativeTextRangeE, expectedRangeE, 'relativating range with startLine 0 should change start column');\n\n    const textRange3 =\n        TextUtils.TextRange.TextRange.fromObject({startLine: 1, startColumn: 3, endLine: 0, endColumn: 7});\n    const relativeTextRangeF = textRange3.relativeFrom(2, 2);\n    const expectedRangeF = {startLine: 3, startColumn: 3, endLine: 2, endColumn: 9};\n    assertIsTextRangeAndEqualsRange(\n        relativeTextRangeF, expectedRangeF, 'relativating range with endLine 0 should change end column');\n  });\n\n  describe('containsLocation', () => {\n    it('can check if a position is contained', () => {\n      const textRangeA =\n          TextUtils.TextRange.TextRange.fromObject({startLine: 1, startColumn: 2, endLine: 3, endColumn: 4});\n      assert.isFalse(textRangeA.containsLocation(0, 3), 'position before range should not be contained');\n      assert.isFalse(textRangeA.containsLocation(1, 1), 'position before range should not be contained');\n      assert.isTrue(textRangeA.containsLocation(1, 2), 'start position should be contained');\n      assert.isTrue(textRangeA.containsLocation(1, 4), 'position in range should be contained');\n      assert.isFalse(textRangeA.containsLocation(3, 4), 'end position should not be contained');\n      assert.isFalse(textRangeA.containsLocation(3, 5), 'position after range should compare greater');\n      assert.isFalse(textRangeA.containsLocation(4, 4), 'position after range should compare greater');\n\n      const textRangeB =\n          TextUtils.TextRange.TextRange.fromObject({startLine: 1, startColumn: 2, endLine: 1, endColumn: 4});\n      assert.isFalse(textRangeB.containsLocation(1, 1), 'position before range should not be contained');\n      assert.isTrue(textRangeB.containsLocation(1, 2), 'start position should be contained');\n      assert.isFalse(textRangeB.containsLocation(1, 4), 'end position should not be contained');\n      assert.isFalse(textRangeB.containsLocation(1, 5), 'position after range should not be contained');\n    });\n  });\n\n  describe('fromEdit()', () => {\n    it('can construct a range from an edit of a text ending with a newline', () => {\n      const textRange =\n          TextUtils.TextRange.TextRange.fromObject({startLine: 1, startColumn: 2, endLine: 3, endColumn: 4});\n      const text = 'This is\\nan example text\\nwith newlines\\nin it. It is for\\n the test.\\n';\n      const textRangeEdited = TextUtils.TextRange.TextRange.fromEdit(textRange, text);\n      const expectedRange = {startLine: 1, startColumn: 2, endLine: 6, endColumn: 0};\n      assertIsTextRangeAndEqualsRange(textRangeEdited, expectedRange, 'range end should have been shifted back');\n    });\n\n    it('can construct a range from an edit of a text ending without a newline', () => {\n      const textRange =\n          TextUtils.TextRange.TextRange.fromObject({startLine: 1, startColumn: 2, endLine: 3, endColumn: 4});\n      const text = 'This is\\nan example text\\nwith newlines\\nin it. It is for\\n the test.';\n      const textRangeEdited = TextUtils.TextRange.TextRange.fromEdit(textRange, text);\n      const expectedRange = {startLine: 1, startColumn: 2, endLine: 5, endColumn: 10};\n      assertIsTextRangeAndEqualsRange(textRangeEdited, expectedRange, 'range end should have been shifted back');\n    });\n\n    it('can construct a range from an edit of a text without newlines', () => {\n      const textRange =\n          TextUtils.TextRange.TextRange.fromObject({startLine: 1, startColumn: 2, endLine: 3, endColumn: 4});\n      const text = 'This is an example text without newlines in it. It is for the test.';\n      const textRangeEdited = TextUtils.TextRange.TextRange.fromEdit(textRange, text);\n      const expectedRange = {startLine: 1, startColumn: 2, endLine: 1, endColumn: 69};\n      assertIsTextRangeAndEqualsRange(textRangeEdited, expectedRange, 'range end should have been shifted forward');\n    });\n  });\n\n  describe('rebaseAfterTextEdit()', () => {\n    let originalRange: TextUtils.TextRange.TextRange;\n    let editedRange: TextUtils.TextRange.TextRange;\n\n    beforeEach(() => {\n      originalRange =\n          TextUtils.TextRange.TextRange.fromObject({startLine: 1, startColumn: 2, endLine: 3, endColumn: 4});\n      editedRange = TextUtils.TextRange.TextRange.fromObject({startLine: 1, startColumn: 2, endLine: 7, endColumn: 8});\n    });\n\n    it('can rebase a range that doesn\\'t follow the original range', () => {\n      const range = {startLine: 2, startColumn: 4, endLine: 7, endColumn: 8};\n      const textRange = TextUtils.TextRange.TextRange.fromObject(range);\n      const rebasedTextrange = textRange.rebaseAfterTextEdit(originalRange, editedRange);\n      assertIsTextRangeAndEqualsRange(rebasedTextrange, range, 'range should not have been modified');\n    });\n\n    it('can rebase a range if its rebased range neither starts nor ends at end of the edited range', () => {\n      const textRange =\n          TextUtils.TextRange.TextRange.fromObject({startLine: 4, startColumn: 4, endLine: 6, endColumn: 8});\n      const rebasedTextRange = textRange.rebaseAfterTextEdit(originalRange, editedRange);\n      const expectedRange = {startLine: 8, startColumn: 4, endLine: 10, endColumn: 8};\n      assertIsTextRangeAndEqualsRange(rebasedTextRange, expectedRange, 'range’s lines should have been shifted back');\n    });\n\n    it('can rebase a range if its rebased range starts at the end of the edited range', () => {\n      const textRangeToRebase =\n          TextUtils.TextRange.TextRange.fromObject({startLine: 3, startColumn: 5, endLine: 6, endColumn: 8});\n      const rebasedTextRange = textRangeToRebase.rebaseAfterTextEdit(originalRange, editedRange);\n      const expectedRange = {startLine: 7, startColumn: 9, endLine: 10, endColumn: 8};\n      assertIsTextRangeAndEqualsRange(\n          rebasedTextRange, expectedRange, 'range’s lines and start column should have been shifted back');\n    });\n\n    it('can rebase a range if its rebased range starts and ends at the end of the edited range', () => {\n      const textRangeToRebase =\n          TextUtils.TextRange.TextRange.fromObject({startLine: 3, startColumn: 5, endLine: 3, endColumn: 8});\n      const rebasedTextRange = textRangeToRebase.rebaseAfterTextEdit(originalRange, editedRange);\n      const expectedRange = {startLine: 7, startColumn: 9, endLine: 7, endColumn: 12};\n      assertIsTextRangeAndEqualsRange(\n          rebasedTextRange, expectedRange, 'range’s lines and columns should have been shifted back');\n    });\n  });\n\n  it('can be stringified', () => {\n    const textRange =\n        TextUtils.TextRange.TextRange.fromObject({startLine: 1, startColumn: 2, endLine: 3, endColumn: 4});\n    assert.isTrue(typeof textRange.toString() === 'string', 'toString should return a string');\n  });\n\n  describe('intersection', () => {\n    const {TextRange} = TextUtils.TextRange;\n\n    it('yields empty range for empty inputs', () => {\n      const range1 = new TextRange(0, 0, 0, 0);\n      const range2 = new TextRange(1, 4, 1, 4);\n      assert.isTrue(range1.intersection(range2).isEmpty(), 'intersection should be empty');\n      assert.isTrue(range2.intersection(range1).isEmpty(), 'intersection should be empty');\n    });\n\n    it('yields empty range for non-overlapping inputs', () => {\n      const range1 = new TextRange(1, 0, 2, 0);\n      const range2 = new TextRange(3, 0, 4, 0);\n      assert.isTrue(range1.intersection(range2).isEmpty(), 'intersection should be empty');\n      assert.isTrue(range2.intersection(range1).isEmpty(), 'intersection should be empty');\n\n      const range3 = new TextRange(7, 1, 8, 4);\n      const range4 = new TextRange(8, 4, 8, 9);\n      assert.isTrue(range3.intersection(range4).isEmpty(), 'intersection should be empty');\n      assert.isTrue(range4.intersection(range3).isEmpty(), 'intersection should be empty');\n    });\n\n    it('yields same range for identical inputs', () => {\n      const range = new TextRange(1, 2, 3, 4);\n      assert.deepEqual(range.intersection(range), range);\n    });\n\n    it('yields a point range for inputs overlapping on a single character', () => {\n      const range1 = new TextRange(7, 1, 7, 4);\n      const range2 = new TextRange(7, 3, 9, 9);\n      const result = new TextRange(range2.startLine, range2.startColumn, range1.endLine, range1.endColumn);\n      assert.deepEqual(range1.intersection(range2), result);\n      assert.deepEqual(range2.intersection(range1), result);\n    });\n\n    it('yields a copy and never the input', () => {\n      const range = new TextRange(8, 0, 8, 9);\n      const empty = new TextRange(7, 0, 7, 0);\n      assert.notStrictEqual(range.intersection(range), range);\n      assert.notStrictEqual(empty.intersection(empty), empty);\n      assert.notStrictEqual(empty.intersection(range), empty);\n      assert.notStrictEqual(empty.intersection(range), range);\n      assert.notStrictEqual(range.intersection(empty), empty);\n      assert.notStrictEqual(range.intersection(empty), range);\n    });\n\n    it('yields the smaller range if it is fully contained in the other', () => {\n      const large = new TextRange(0, 1, 10, 0);\n      const small = new TextRange(0, 2, 9, 25);\n      assert.deepEqual(large.intersection(small), small);\n      assert.deepEqual(small.intersection(large), small);\n    });\n  });\n});\n"]}