{"version":3,"file":"StreamingContentData.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/text_utils/StreamingContentData.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as TextUtils from './text_utils.js';\n\ndescribe('StreamingContentData', () => {\n  it('notifies listeners when new chunks are added', () => {\n    const streamingContentData = TextUtils.StreamingContentData.StreamingContentData.create('text/plain', 'utf-8');\n    const events: {content: TextUtils.StreamingContentData.StreamingContentData, chunk: string}[] = [];\n    streamingContentData.addEventListener(\n        TextUtils.StreamingContentData.Events.ChunkAdded, ({data}) => events.push(data));\n\n    streamingContentData.addChunk('Zm9v');\n    assert.lengthOf(events, 1);\n    assert.strictEqual(events[0].content, streamingContentData);\n    assert.strictEqual(events[0].chunk, 'Zm9v');\n\n    streamingContentData.addChunk('YmFy');\n    assert.lengthOf(events, 2);\n    assert.strictEqual(events[1].content, streamingContentData);\n    assert.strictEqual(events[1].chunk, 'YmFy');\n  });\n\n  it('provides a ContentData of all the received content so far', () => {\n    const streamingContentData = TextUtils.StreamingContentData.StreamingContentData.create('text/plain', 'utf-8');\n    streamingContentData.addChunk('Zm9v');\n    streamingContentData.addChunk('YmFy');\n\n    const contentData = streamingContentData.content();\n    assert.strictEqual(contentData.text, 'foobar');\n  });\n\n  it('provides the same content when calling \"content\" repeatedly (checks caching)', () => {\n    const streamingContentData = TextUtils.StreamingContentData.StreamingContentData.create('text/plain', 'utf-8');\n    streamingContentData.addChunk('Zm9v');\n    streamingContentData.addChunk('YmFy');\n\n    const contentData1 = streamingContentData.content();\n    assert.strictEqual(contentData1.text, 'foobar');\n\n    const contentData2 = streamingContentData.content();\n    assert.strictEqual(contentData2.text, 'foobar');\n  });\n\n  it('leaves previously returned ContentData alone after receiving a new chunk', () => {\n    const streamingContentData = TextUtils.StreamingContentData.StreamingContentData.create('text/plain', 'utf-8');\n    streamingContentData.addChunk('Zm9v');\n\n    const contentData1 = streamingContentData.content();\n    assert.strictEqual(contentData1.text, 'foo');\n\n    streamingContentData.addChunk('YmFy');\n\n    assert.strictEqual(contentData1.text, 'foo');\n    const contentData2 = streamingContentData.content();\n    assert.strictEqual(contentData2.text, 'foobar');\n  });\n\n  it('throws an error when calling addChunk on a text-only ContentData', () => {\n    const streamingContentData = TextUtils.StreamingContentData.StreamingContentData.from(\n        new TextUtils.ContentData.ContentData('foo', false, 'text/plain'));\n\n    assert.throws((() => streamingContentData.addChunk('YmFy')));\n  });\n\n  it('returns the provided content when created from a ContentDat', () => {\n    const streamingContentData = TextUtils.StreamingContentData.StreamingContentData.from(\n        new TextUtils.ContentData.ContentData('foo', false, 'text/plain'));\n\n    assert.strictEqual(streamingContentData.content().text, 'foo');\n  });\n\n  it('can concatenate if the inital ContentData was base64', () => {\n    const streamingContentData = TextUtils.StreamingContentData.StreamingContentData.from(\n        new TextUtils.ContentData.ContentData('Zm9v', true, 'text/plain'));\n    streamingContentData.addChunk('YmFy');\n\n    assert.strictEqual(streamingContentData.content().text, 'foobar');\n  });\n});\n"]}