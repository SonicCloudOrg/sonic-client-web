{"version":3,"file":"EmulatedDevices.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/emulation/EmulatedDevices.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,cAAc,MAAM,2BAA2B,CAAC;AAE5D,MAAM,QAAQ,GAAG,IAAI,GAAG,CAAC,sCAAsC,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;AAE7F,QAAQ,CAAC,4CAA4C,EAAE,GAAG,EAAE;IAC1D,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC3B,MAAM,aAAa,GAAG,aAAa,CAAC;QACpC,MAAM,CAAC,WAAW,CAAC,aAAa,EAAE,cAAc,CAAC,eAAe,CAAC,uBAAuB,CAAC,aAAa,CAAC,CAAC,CAAC;IAC3G,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iBAAiB,EAAE,GAAG,EAAE;QACzB,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE,cAAc,CAAC,eAAe,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC,CAAC;IACjG,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAC1B,MAAM,CAAC,WAAW,CAAC,GAAG,QAAQ,SAAS,EAAE,cAAc,CAAC,eAAe,CAAC,uBAAuB,CAAC,eAAe,CAAC,CAAC,CAAC;IACpH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uBAAuB,EAAE,GAAG,EAAE;QAC/B,MAAM,CAAC,WAAW,CACd,UAAU,QAAQ,iCAAiC,EACnD,cAAc,CAAC,eAAe,CAAC,uBAAuB,CAAC,8CAA8C,CAAC,CAAC,CAAC;IAC9G,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAC5B,MAAM,CAAC,WAAW,CACd,GAAG,QAAQ,aAAa,QAAQ,YAAY,EAC5C,cAAc,CAAC,eAAe,CAAC,uBAAuB,CAAC,kCAAkC,CAAC,CAAC,CAAC;IAClG,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;QAC7C,MAAM,CAAC,WAAW,CACd,YAAY,QAAQ,cAAc,QAAQ,sDAAsD,EAChG,cAAc,CAAC,eAAe,CAAC,uBAAuB,CAClD,sFAAsF,CAAC,CAAC,CAAC;IACnG,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as EmulationModel from '../emulation/emulation.js';\n\nconst BASE_URL = new URL('../../../front_end/emulated_devices/', import.meta.url).toString();\n\ndescribe('EmulatedDevices can compute CSS image URLs', () => {\n  it('as regular string', () => {\n    const regularString = 'no url here';\n    assert.strictEqual(regularString, EmulationModel.EmulatedDevices.computeRelativeImageURL(regularString));\n  });\n\n  it('with empty @url', () => {\n    assert.strictEqual(BASE_URL, EmulationModel.EmulatedDevices.computeRelativeImageURL('@url()'));\n  });\n\n  it('with single file', () => {\n    assert.strictEqual(`${BASE_URL}file.js`, EmulationModel.EmulatedDevices.computeRelativeImageURL('@url(file.js)'));\n  });\n\n  it('with surrounding text', () => {\n    assert.strictEqual(\n        `before ${BASE_URL}long/path/to/the/file.png after`,\n        EmulationModel.EmulatedDevices.computeRelativeImageURL('before @url(long/path/to/the/file.png) after'));\n  });\n\n  it('with multiple URLs', () => {\n    assert.strictEqual(\n        `${BASE_URL}first.png ${BASE_URL}second.gif`,\n        EmulationModel.EmulatedDevices.computeRelativeImageURL('@url(first.png) @url(second.gif)'));\n  });\n\n  it('with multiple URLs with text around', () => {\n    assert.strictEqual(\n        `a lot of ${BASE_URL}stuff in a ${BASE_URL}singleline and more url() @@url (not/a/resource.gif)`,\n        EmulationModel.EmulatedDevices.computeRelativeImageURL(\n            'a lot of @url(stuff) in a @url(single)line and more url() @@url (not/a/resource.gif)'));\n  });\n});\n"]}