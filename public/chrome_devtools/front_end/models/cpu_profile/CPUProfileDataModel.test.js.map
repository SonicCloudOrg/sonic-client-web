{"version":3,"file":"CPUProfileDataModel.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/cpu_profile/CPUProfileDataModel.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Protocol from '../../generated/protocol.js';\nimport {describeWithEnvironment} from '../../testing/EnvironmentHelpers.js';\nimport * as CPUProfile from '../cpu_profile/cpu_profile.js';\n\nfunction makeCallFrame(functionName: string): Protocol.Runtime.CallFrame {\n  return {\n    functionName,\n    scriptId: 'ScriptId',\n    url: '',\n    lineNumber: 0,\n    columnNumber: 0,\n  } as unknown as Protocol.Runtime.CallFrame;\n}\n\nfunction getFrameTreeAsString(cpuProfileDataModel: CPUProfile.CPUProfileDataModel.CPUProfileDataModel): string {\n  type Entry = {ts: number, dur: number, name: string, selfTime: number, id: number, depth: number};\n  const trackingStack: Entry[] = [];\n  const resultStack: Entry[] = [];\n  let result = '\\n';\n  const onFrameOpen =\n      (depth: number, node: CPUProfile.ProfileTreeModel.ProfileNode, _sampleIndex: number, ts: number) => {\n        trackingStack.push({depth, id: node.id, name: node.callFrame.functionName, ts, selfTime: 0, dur: 0});\n      };\n  const onFrameClose =\n      (_depth: number, node: CPUProfile.ProfileTreeModel.ProfileNode, _sampleIndex: number, _ts: number, dur: number,\n       selfTime: number) => {\n        const entry = trackingStack.pop();\n        if (!entry || entry.id !== node.id) {\n          throw new Error('Frame open and Frame close callbacks are not balanced');\n        }\n        entry.dur = dur;\n        entry.selfTime = selfTime;\n        resultStack.push(entry);\n      };\n  cpuProfileDataModel.forEachFrame(onFrameOpen, onFrameClose);\n  resultStack.sort((a, b) => b.ts - a.ts);\n  while (resultStack.length) {\n    const entry = resultStack.pop();\n    if (!entry) {\n      break;\n    }\n    const {depth, name, ts, dur, selfTime} = entry;\n    result += '  '.repeat(depth) +\n        `name: ${name} ts: ${ts} dur: ${Math.round(dur * 100) / 100} selfTime: ${Math.round(selfTime * 100) / 100}`;\n    result += resultStack.length ? '\\n' : '';\n  }\n  return result;\n}\n\ndescribe('ProfileTreeModel', function() {\n  it('calculates self and total times correctly for a CPU profile', () => {\n    // Create the following tree:\n    //\n    //       root (self = 10)\n    //     /                 \\\n    //    A (self = 0)     D (self = 10)\n    //  /             \\                 \\\n    // B (self = 20)  C (self = 10)     E (self = 20)\n    const callFrameRoot = makeCallFrame('root');\n    const root = new CPUProfile.ProfileTreeModel.ProfileNode(callFrameRoot);\n    root.self = 10;\n\n    const callFrameA = makeCallFrame('A');\n    const nodeA = new CPUProfile.ProfileTreeModel.ProfileNode(callFrameA);\n    root.children.push(nodeA);\n    nodeA.self = 0;\n\n    const callFrameB = makeCallFrame('B');\n    const nodeB = new CPUProfile.ProfileTreeModel.ProfileNode(callFrameB);\n    nodeA.children.push(nodeB);\n    nodeB.self = 20;\n\n    const callFrameC = makeCallFrame('C');\n    const nodeC = new CPUProfile.ProfileTreeModel.ProfileNode(callFrameC);\n    nodeA.children.push(nodeC);\n    nodeC.self = 10;\n\n    const callFrameD = makeCallFrame('D');\n    const nodeD = new CPUProfile.ProfileTreeModel.ProfileNode(callFrameD);\n    root.children.push(nodeD);\n    nodeD.self = 10;\n\n    const callFrameE = makeCallFrame('E');\n    const nodeE = new CPUProfile.ProfileTreeModel.ProfileNode(callFrameE);\n    nodeD.children.push(nodeE);\n    nodeE.self = 20;\n\n    const profileTreeModel = new CPUProfile.ProfileTreeModel.ProfileTreeModel();\n    profileTreeModel.initialize(root);\n\n    assert.strictEqual(profileTreeModel.total, 70);\n\n    assert.strictEqual(root.total, 70);\n    assert.strictEqual(root.self, 10);\n    assert.strictEqual(nodeA.total, 30);\n    assert.strictEqual(nodeA.self, 0);\n    assert.strictEqual(nodeB.total, 20);\n    assert.strictEqual(nodeB.self, 20);\n    assert.strictEqual(nodeC.total, 10);\n    assert.strictEqual(nodeC.self, 10);\n    assert.strictEqual(nodeD.total, 30);\n    assert.strictEqual(nodeD.self, 10);\n    assert.strictEqual(nodeE.total, 20);\n    assert.strictEqual(nodeE.self, 20);\n  });\n  it('calculates depth correctly for the nodes in a profile tree', () => {\n    // Create the following tree:\n    //\n    //       root\n    //      /    \\\n    //     A      D\n    //   /   \\     \\\n    //  B     C     E\n    //               \\\n    //                F\n    const callFrameRoot = makeCallFrame('root');\n    const root = new CPUProfile.ProfileTreeModel.ProfileNode(callFrameRoot);\n\n    const callFrameA = makeCallFrame('A');\n    const nodeA = new CPUProfile.ProfileTreeModel.ProfileNode(callFrameA);\n    root.children.push(nodeA);\n\n    const callFrameB = makeCallFrame('B');\n    const nodeB = new CPUProfile.ProfileTreeModel.ProfileNode(callFrameB);\n    nodeA.children.push(nodeB);\n\n    const callFrameC = makeCallFrame('C');\n    const nodeC = new CPUProfile.ProfileTreeModel.ProfileNode(callFrameC);\n    nodeA.children.push(nodeC);\n\n    const callFrameD = makeCallFrame('D');\n    const nodeD = new CPUProfile.ProfileTreeModel.ProfileNode(callFrameD);\n    root.children.push(nodeD);\n\n    const callFrameE = makeCallFrame('E');\n    const nodeE = new CPUProfile.ProfileTreeModel.ProfileNode(callFrameE);\n    nodeD.children.push(nodeE);\n\n    const callFrameF = makeCallFrame('F');\n    const nodeF = new CPUProfile.ProfileTreeModel.ProfileNode(callFrameF);\n    nodeE.children.push(nodeF);\n\n    const profileTreeModel = new CPUProfile.ProfileTreeModel.ProfileTreeModel();\n    profileTreeModel.initialize(root);\n\n    assert.strictEqual(profileTreeModel.maxDepth, 3);\n    assert.strictEqual(root.depth, -1);\n    assert.strictEqual(nodeA.depth, 0);\n    assert.strictEqual(nodeB.depth, 1);\n    assert.strictEqual(nodeC.depth, 1);\n    assert.strictEqual(nodeD.depth, 0);\n    assert.strictEqual(nodeE.depth, 1);\n    assert.strictEqual(nodeF.depth, 2);\n  });\n});\n\ndescribeWithEnvironment('CPUProfileDataModel', () => {\n  const buildBasicProfile = () => {\n    const scriptId = 'Peperoni' as Protocol.Runtime.ScriptId;\n    const url = '';\n    const lineNumber = -1;\n    const columnNumber = -1;\n    const profile: Protocol.Profiler.Profile = {\n      startTime: 1000,\n      endTime: 3000,\n      nodes: [\n        {\n          id: 1,\n          hitCount: 0,\n          callFrame: {functionName: '(root)', scriptId, url, lineNumber, columnNumber},\n          children: [2, 3],\n        },\n        {id: 2, hitCount: 3, callFrame: {functionName: 'a', scriptId, url, lineNumber, columnNumber}, children: [4, 5]},\n        {id: 3, hitCount: 3, callFrame: {functionName: 'b', scriptId, url, lineNumber, columnNumber}, children: [6]},\n        {id: 4, hitCount: 2, callFrame: {functionName: 'c', scriptId, url, lineNumber, columnNumber}},\n        {id: 5, hitCount: 1, callFrame: {functionName: 'd', scriptId, url, lineNumber, columnNumber}},\n        {id: 6, hitCount: 2, callFrame: {functionName: 'e', scriptId, url, lineNumber, columnNumber}, children: [7]},\n        {id: 7, hitCount: 2, callFrame: {functionName: 'f', scriptId, url, lineNumber, columnNumber}},\n      ],\n      samples: [2, 2, 4, 5, 4, 2, 3, 6, 6, 7, 7, 3, 3],\n      timeDeltas: new Array(13).fill(100),\n    };\n    return profile;\n  };\n  it('builds a tree from a CPU profile', () => {\n    const profile = buildBasicProfile();\n    // Profile contains this tree:\n    //\n    //       1\n    //     /   \\\n    //    2     3\n    //  /   \\     \\\n    // 4     5     6\n    //              \\\n    //               7\n    const cpuProfileDataModel = new CPUProfile.CPUProfileDataModel.CPUProfileDataModel(profile);\n    assert.deepEqual(cpuProfileDataModel.root.children.map(n => n.id), [3, 2]);\n\n    const node2 = cpuProfileDataModel.root.children[1];\n    assert.strictEqual(node2.id, 2);\n    assert.deepEqual(node2.children.map(n => n.id), [5, 4]);\n\n    const node3 = cpuProfileDataModel.root.children[0];\n    assert.strictEqual(node3.id, 3);\n    assert.deepEqual(node3.children.map(n => n.id), [6]);\n\n    const node6 = node3.children[0];\n    assert.strictEqual(node6.id, 6);\n    assert.deepEqual(node6.children.map(n => n.id), [7]);\n  });\n  it('parses JS call frames from a CPU profile', () => {\n    // Calls in the profile look roughly like\n    //\n    // |---------------a--------------||---------b---------|\n    //        |---c---||--d--||---c---|  |-------e------|\n    //                                      |-----f-----|\n    const profile = buildBasicProfile();\n    const cpuProfileDataModel = new CPUProfile.CPUProfileDataModel.CPUProfileDataModel(profile);\n    const treeAsString = getFrameTreeAsString(cpuProfileDataModel);\n\n    assert.strictEqual(treeAsString, `\nname: a ts: 1.1 dur: 0.6 selfTime: 0.3\n  name: c ts: 1.3 dur: 0.1 selfTime: 0.1\n  name: d ts: 1.4 dur: 0.1 selfTime: 0.1\n  name: c ts: 1.5 dur: 0.1 selfTime: 0.1\nname: b ts: 1.7 dur: 0.7 selfTime: 0.3\n  name: e ts: 1.8 dur: 0.4 selfTime: 0.2\n    name: f ts: 2 dur: 0.2 selfTime: 0.2`);\n  });\n\n  it('parses a CPU profile without hitcounts', () => {\n    const profile = buildBasicProfile();\n    for (const node of profile.nodes) {\n      node.hitCount = undefined;\n    }\n    const cpuProfileDataModel = new CPUProfile.CPUProfileDataModel.CPUProfileDataModel(profile);\n    const treeAsString = getFrameTreeAsString(cpuProfileDataModel);\n    assert.strictEqual(treeAsString, `\nname: a ts: 1.1 dur: 0.6 selfTime: 0.3\n  name: c ts: 1.3 dur: 0.1 selfTime: 0.1\n  name: d ts: 1.4 dur: 0.1 selfTime: 0.1\n  name: c ts: 1.5 dur: 0.1 selfTime: 0.1\nname: b ts: 1.7 dur: 0.7 selfTime: 0.3\n  name: e ts: 1.8 dur: 0.4 selfTime: 0.2\n    name: f ts: 2 dur: 0.2 selfTime: 0.2`);\n  });\n  it('fixes missing samples by replacing them with neighboring stacks', () => {\n    const scriptId = 'Peperoni' as Protocol.Runtime.ScriptId;\n    const url = '';\n    const lineNumber = -1;\n    const columnNumber = -1;\n\n    // The calls in the profile look roughly like:\n    //\n    // |program||-bar-||program||-bar-||program||-bar-||GC||program||-bar-||program||-bar-||-baz-||program||-bar-|\n    // |program|       |program|       |program||-foo-|    |program||-foo-||program||-foo-|       |program||-foo-|\n    //\n    // Which, after accounting for fixable program calls (missing samples), should look as (program samples are\n    // replaced with the preceding samples if the bottom frame of both neighboring samples is the same):\n    //\n    // |program||----------bar------||program||-------bar---------||-baz-||program||-bar-|\n    // |program|       |-----foo----||program||-------foo---------|       |program||-foo-|\n    //                   |-GC-|\n    const profile: Protocol.Profiler.Profile = {\n      startTime: 1000,\n      endTime: 4000,\n      nodes: [\n        {\n          id: 1,\n          hitCount: 0,\n          callFrame: {functionName: '(root)', scriptId, url, lineNumber, columnNumber},\n          children: [2, 3, 4, 5],\n        },\n        {\n          id: 2,\n          hitCount: 1000,\n          callFrame: {functionName: '(garbage collector)', scriptId, url, lineNumber, columnNumber},\n        },\n        {id: 3, hitCount: 1000, callFrame: {functionName: '(program)', scriptId, url, lineNumber, columnNumber}},\n        {\n          id: 4,\n          hitCount: 1000,\n          callFrame: {functionName: 'bar', scriptId, url, lineNumber, columnNumber},\n          children: [6],\n        },\n        {id: 5, hitCount: 1000, callFrame: {functionName: 'baz', scriptId, url, lineNumber, columnNumber}},\n        {id: 6, hitCount: 1000, callFrame: {functionName: 'foo', scriptId, url, lineNumber, columnNumber}},\n      ],\n      samples: [3, 4, 3, 4, 3, 6, 2, 2, 3, 6, 6, 3, 6, 5, 3, 6],\n    };\n    profile.timeDeltas = profile.samples?.map(_ => 1000);\n    profile.endTime = profile.startTime + (profile.timeDeltas?.length || 0) * 1000;\n    const cpuProfileDataModel = new CPUProfile.CPUProfileDataModel.CPUProfileDataModel(profile);\n    const treeAsString = getFrameTreeAsString(cpuProfileDataModel);\n    assert.strictEqual(treeAsString, `\nname: (program) ts: 2 dur: 1 selfTime: 1\nname: bar ts: 3 dur: 7 selfTime: 4\n  name: foo ts: 7 dur: 3 selfTime: 1\n    name: (garbage collector) ts: 8 dur: 2 selfTime: 2\nname: (program) ts: 10 dur: 1 selfTime: 1\nname: bar ts: 11 dur: 4 selfTime: 0\n  name: foo ts: 11 dur: 4 selfTime: 4\nname: baz ts: 15 dur: 1 selfTime: 1\nname: (program) ts: 16 dur: 1 selfTime: 1\nname: bar ts: 17 dur: 1 selfTime: 0\n  name: foo ts: 17 dur: 1 selfTime: 1`);\n  });\n  it('parses a CPU with GC nodes correctly', () => {\n    const scriptId = 'Peperoni' as Protocol.Runtime.ScriptId;\n    const url = '';\n    const lineNumber = -1;\n    const columnNumber = -1;\n\n    // Profile contains this tree:\n    //\n    //       root\n    //     /      \\\n    //   GC       foo\n    //               \\\n    //                bar\n\n    // The calls in the profile look roughly like:\n    //\n    // |-------------------foo----------------||--GC--|\n    // |---------bar--------|         |--bar--|\n    //\n    // Which, after accounting for the GC call, should be fixed as:\n    // |-----------------------foo------------|\n    // |---bar---||---bar---|         |--bar--|\n    //                                 |--GC--|\n    const profile: Protocol.Profiler.Profile = {\n      startTime: 1000,\n      endTime: 4000,\n      nodes: [\n        {\n          id: 1,\n          hitCount: 0,\n          callFrame: {functionName: '(root)', scriptId, url, lineNumber, columnNumber},\n          children: [2, 3],\n        },\n        {\n          id: 2,\n          hitCount: 1000,\n          callFrame: {functionName: '(garbage collector)', scriptId, url, lineNumber, columnNumber},\n        },\n        {\n          id: 3,\n          hitCount: 1000,\n          callFrame: {functionName: 'foo', scriptId, url, lineNumber, columnNumber},\n          children: [4],\n        },\n        {id: 4, hitCount: 1000, callFrame: {functionName: 'bar', scriptId, url, lineNumber, columnNumber}},\n      ],\n      timeDeltas: [500, 250, 1000, 250, 1000],\n      samples: [4, 4, 3, 4, 2],\n    };\n    const cpuProfileDataModel = new CPUProfile.CPUProfileDataModel.CPUProfileDataModel(profile);\n    const treeAsString = getFrameTreeAsString(cpuProfileDataModel);\n    assert.strictEqual(treeAsString, `\nname: foo ts: 1.5 dur: 3.13 selfTime: 0.25\n  name: bar ts: 1.5 dur: 1.25 selfTime: 1.25\n  name: bar ts: 3 dur: 1.63 selfTime: 1\n    name: (garbage collector) ts: 4 dur: 0.63 selfTime: 0.63`);\n  });\n});\n"]}