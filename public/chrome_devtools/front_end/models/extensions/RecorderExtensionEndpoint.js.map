{"version":3,"file":"RecorderExtensionEndpoint.js","sourceRoot":"","sources":["../../../../../../front_end/models/extensions/RecorderExtensionEndpoint.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAG7B,OAAO,EAAC,iBAAiB,EAAC,MAAM,wBAAwB,CAAC;AACzD,OAAO,EAAC,qBAAqB,EAAC,MAAM,4BAA4B,CAAC;AAEjE,MAAM,OAAO,yBAA0B,SAAQ,iBAAiB;IAC7C,IAAI,CAAS;IACb,SAAS,CAAU;IACnB,YAAY,CAAkD;IAE/E,YACI,IAAY,EAAE,IAAiB,EAAE,YAA6D,EAC9F,SAAkB;QACpB,KAAK,CAAC,IAAI,CAAC,CAAC;QACZ,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACnC,CAAC;IAED,OAAO;QACL,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IAED,eAAe;QACb,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAED,YAAY;QACV,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAEkB,WAAW,CAAC,EAAC,KAAK,EAAkB;QACrD,QAAQ,KAAK,EAAE,CAAC;YACd,6HAAiF,CAAC,CAAC,CAAC;gBAClF,IAAI,CAAC,UAAU,EAAE,CAAC;gBAClB,qBAAqB,CAAC,QAAQ,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;gBACpD,MAAM;YACR,CAAC;YACD;gBACE,MAAM,IAAI,KAAK,CAAC,mDAAmD,KAAK,EAAE,CAAC,CAAC;QAChF,CAAC;IACH,CAAC;IAED;;;;;;OAMG;IACH,SAAS,CAAC,SAAiB;QACzB,OAAO,IAAI,CAAC,WAAW,yEAAuD,EAAC,SAAS,EAAC,CAAC,CAAC;IAC7F,CAAC;IAED;;;;;;OAMG;IACH,aAAa,CAAC,IAAY;QACxB,OAAO,IAAI,CAAC,WAAW,iFAA2D,EAAC,IAAI,EAAC,CAAC,CAAC;IAC5F,CAAC;IAED;;;;;;OAMG;IACH,MAAM,CAAC,SAAiB;QACtB,OAAO,IAAI,CAAC,WAAW,mEAAoD,EAAC,SAAS,EAAC,CAAC,CAAC;IAC1F,CAAC;CACF","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {PrivateAPI} from './ExtensionAPI.js';\nimport {ExtensionEndpoint} from './ExtensionEndpoint.js';\nimport {RecorderPluginManager} from './RecorderPluginManager.js';\n\nexport class RecorderExtensionEndpoint extends ExtensionEndpoint {\n  private readonly name: string;\n  private readonly mediaType?: string;\n  private readonly capabilities: PrivateAPI.RecordingExtensionPluginCapability[];\n\n  constructor(\n      name: string, port: MessagePort, capabilities: PrivateAPI.RecordingExtensionPluginCapability[],\n      mediaType?: string) {\n    super(port);\n    this.name = name;\n    this.mediaType = mediaType;\n    this.capabilities = capabilities;\n  }\n\n  getName(): string {\n    return this.name;\n  }\n\n  getCapabilities(): PrivateAPI.RecordingExtensionPluginCapability[] {\n    return this.capabilities;\n  }\n\n  getMediaType(): string|undefined {\n    return this.mediaType;\n  }\n\n  protected override handleEvent({event}: {event: string}): void {\n    switch (event) {\n      case PrivateAPI.RecorderExtensionPluginEvents.UnregisteredRecorderExtensionPlugin: {\n        this.disconnect();\n        RecorderPluginManager.instance().removePlugin(this);\n        break;\n      }\n      default:\n        throw new Error(`Unrecognized Recorder extension endpoint event: ${event}`);\n    }\n  }\n\n  /**\n   * In practice, `recording` is a UserFlow[1], but we avoid defining this type on the\n   * API in order to prevent dependencies between Chrome and puppeteer. Extensions\n   * are responsible for working out potential compatibility issues.\n   *\n   * [1]: https://github.com/puppeteer/replay/blob/main/src/Schema.ts#L245\n   */\n  stringify(recording: Object): Promise<string> {\n    return this.sendRequest(PrivateAPI.RecorderExtensionPluginCommands.Stringify, {recording});\n  }\n\n  /**\n   * In practice, `step` is a Step[1], but we avoid defining this type on the\n   * API in order to prevent dependencies between Chrome and puppeteer. Extensions\n   * are responsible for working out compatibility issues.\n   *\n   * [1]: https://github.com/puppeteer/replay/blob/main/src/Schema.ts#L243\n   */\n  stringifyStep(step: Object): Promise<string> {\n    return this.sendRequest(PrivateAPI.RecorderExtensionPluginCommands.StringifyStep, {step});\n  }\n\n  /**\n   * In practice, `recording` is a UserFlow[1], but we avoid defining this type on the\n   * API in order to prevent dependencies between Chrome and puppeteer. Extensions\n   * are responsible for working out potential compatibility issues.\n   *\n   * [1]: https://github.com/puppeteer/replay/blob/main/src/Schema.ts#L245\n   */\n  replay(recording: Object): Promise<void> {\n    return this.sendRequest(PrivateAPI.RecorderExtensionPluginCommands.Replay, {recording});\n  }\n}\n"]}