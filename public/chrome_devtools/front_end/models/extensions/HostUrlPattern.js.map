{"version":3,"file":"HostUrlPattern.js","sourceRoot":"","sources":["../../../../../../front_end/models/extensions/HostUrlPattern.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Platform from '../../core/platform/platform.js';\n\nfunction parseScheme(pattern: string): {hostPattern: string, scheme: string}|undefined {\n  const SCHEME_SEPARATOR = '://';\n  const schemeEnd = pattern.indexOf(SCHEME_SEPARATOR);\n  if (schemeEnd < 0) {\n    return undefined;\n  }\n  const scheme = pattern.substr(0, schemeEnd).toLowerCase();\n\n  // Keep in sync with //extensions/common/url_pattern.cc in chromium\n  const validSchemes = [\n    '*', 'http', 'https', 'ftp', 'chrome', 'chrome-extension',\n    // Chromium additionally defines the following schemes, but these aren't relevant for host url patterns:\n    /* 'file', 'filesystem', 'ws', 'wss', 'data', 'uuid-in-package'*/\n  ];\n\n  if (!validSchemes.includes(scheme)) {\n    return undefined;\n  }\n\n  return {scheme, hostPattern: pattern.substr(schemeEnd + SCHEME_SEPARATOR.length)};\n}\n\nfunction defaultPort(scheme: string): string|undefined {\n  switch (scheme) {\n    case 'http':\n      return '80';\n    case 'https':\n      return '443';\n    case 'ftp':\n      return '25';\n  }\n  return undefined;\n}\n\nfunction parseHostAndPort(pattern: string, scheme: string): {host: string, port: string}|undefined {\n  const pathnameStart = pattern.indexOf('/');\n  if (pathnameStart >= 0) {\n    const path = pattern.substr(pathnameStart);\n    if (path !== '/*' && path !== '/') {\n      // Host patterns don't allow for paths to be specified\n      return undefined;\n    }\n    // Strip off path part\n    pattern = pattern.substr(0, pathnameStart);\n  }\n\n  const PORT_WILDCARD = ':*';\n  if (pattern.endsWith(PORT_WILDCARD)) {\n    // Strip off wildcard port to not upset url parsing\n    pattern = pattern.substr(0, pattern.length - PORT_WILDCARD.length);\n  }\n\n  if (pattern.endsWith(':')) {\n    return undefined;\n  }\n\n  const SUBDOMAIN_WILDCARD = '*.';\n  let asUrl: URL;\n  try {\n    asUrl = new URL(\n        pattern.startsWith(SUBDOMAIN_WILDCARD) ? `http://${pattern.substr(SUBDOMAIN_WILDCARD.length)}` :\n                                                 `http://${pattern}`);\n  } catch {\n    return undefined;\n  }\n  if (asUrl.pathname !== '/') {\n    return undefined;\n  }\n\n  if (asUrl.hostname.endsWith('.')) {\n    asUrl.hostname = asUrl.hostname.substr(0, asUrl.hostname.length - 1);\n  }\n\n  // The URL constructor is happy to accept '*', but it gets replaced with %2A\n  if (asUrl.hostname !== '%2A' && asUrl.hostname.includes('%2A')) {\n    return undefined;\n  }\n\n  // The URL constructor strips off the default port for the scheme, even if it was given explicitely\n  const httpPort = defaultPort('http');\n  if (!httpPort) {\n    return undefined;\n  }\n  const port = pattern.endsWith(`:${httpPort}`) ? httpPort : (asUrl.port === '' ? '*' : asUrl.port);\n  const schemesWithPort = ['http', 'https', 'ftp'];\n  if (port !== '*' && !schemesWithPort.includes(scheme)) {\n    return undefined;\n  }\n\n  const host = asUrl.hostname !== '%2A' ? (pattern.startsWith('*.') ? `*.${asUrl.hostname}` : asUrl.hostname) : '*';\n  return {\n    host,\n    port,\n  };\n}\n\n// HostUrlPatterns define permissions in for extensions in the form of `*://*.example.com:*/`. Since these aren't valid\n// URLs Common.ParsedURL can't handle them and we need a separate implementation.\nexport class HostUrlPattern {\n  static parse(pattern: string): HostUrlPattern|undefined {\n    if (pattern === '<all_urls>') {\n      return new HostUrlPattern({matchesAll: true});\n    }\n    const parsedScheme = parseScheme(pattern);\n    if (!parsedScheme) {\n      return undefined;\n    }\n    const {scheme, hostPattern} = parsedScheme;\n\n    const parsedHost = parseHostAndPort(hostPattern, scheme);\n    if (!parsedHost) {\n      return undefined;\n    }\n    const {host, port} = parsedHost;\n\n    return new HostUrlPattern({scheme, host, port, matchesAll: false});\n  }\n\n  private constructor(readonly pattern: {matchesAll: true}|\n                      {readonly scheme: string, readonly host: string, readonly port: string, matchesAll: false}) {\n  }\n\n  get scheme(): string {\n    return this.pattern.matchesAll ? '*' : this.pattern.scheme;\n  }\n  get host(): string {\n    return this.pattern.matchesAll ? '*' : this.pattern.host;\n  }\n  get port(): string {\n    return this.pattern.matchesAll ? '*' : this.pattern.port;\n  }\n\n  matchesAllUrls(): boolean {\n    return this.pattern.matchesAll;\n  }\n\n  matchesUrl(url: Platform.DevToolsPath.UrlString): boolean {\n    let parsedUrl;\n    try {\n      parsedUrl = new URL(url);\n    } catch {\n      return false;\n    }\n    // Try to parse the input url before checking for <all_urls> because <all_urls> doesn't match invalid urls\n    if (this.matchesAllUrls()) {\n      return true;\n    }\n    const scheme = parsedUrl.protocol.substr(0, parsedUrl.protocol.length - 1);\n    const port = parsedUrl.port || defaultPort(scheme);\n    return this.matchesScheme(scheme) && this.matchesHost(parsedUrl.hostname) && (!port || this.matchesPort(port));\n  }\n\n  matchesScheme(scheme: string): boolean {\n    if (this.pattern.matchesAll) {\n      return true;\n    }\n    if (this.pattern.scheme === '*') {\n      return scheme === 'http' || scheme === 'https';\n    }\n    return this.pattern.scheme === scheme;\n  }\n\n  matchesHost(host: string): boolean {\n    if (this.pattern.matchesAll) {\n      return true;\n    }\n    if (this.pattern.host === '*') {\n      return true;\n    }\n    let normalizedHost = new URL(`http://${host}`).hostname;\n    if (normalizedHost.endsWith('.')) {\n      normalizedHost = normalizedHost.substr(0, normalizedHost.length - 1);\n    }\n    if (this.pattern.host.startsWith('*.')) {\n      return normalizedHost === this.pattern.host.substr(2) || normalizedHost.endsWith(this.pattern.host.substr(1));\n    }\n    return this.pattern.host === normalizedHost;\n  }\n\n  matchesPort(port: string): boolean {\n    if (this.pattern.matchesAll) {\n      return true;\n    }\n    return this.pattern.port === '*' || this.pattern.port === port;\n  }\n}\n"]}