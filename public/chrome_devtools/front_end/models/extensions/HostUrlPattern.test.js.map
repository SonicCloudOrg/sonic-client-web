{"version":3,"file":"HostUrlPattern.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/extensions/HostUrlPattern.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as Extensions from '../extensions/extensions.js';\n\n// The test expectations are from //extensions/common/url_pattern_unittest.cc but leave out tests for the unsupported\n// schemes and paths. Also left out are tests for whitespace and unicode urls since that doesn't go through the url\n// constructor anyways.\n\ndescribe('HostUrlPattern', () => {\n  it('ParseInvalid', () => {\n    const invalidPatterns = [\n      'http',                 // Missing Scheme Separator\n      'http:',                // Wrong Scheme Separator\n      'http:/',               // Wrong Scheme Separator\n      'about://',             // Wrong Scheme Separator\n      'http://',              // Empty Host\n      'http:///',             // Empty Host\n      'http://:1234/',        // Empty Host\n      'http://*./',           // Empty Host\n      'http://\\0www/',        // Invalid host\n      'http://*foo/',         // Invalid Host Wildcard\n      'http://foo.*.bar/',    // Invalid Host Wildcard\n      'http://fo.*.ba:123/',  // Invalid Host Wildcard\n      'http:/bar',            // Wrong Scheme Separator\n      'http://foo.*/',        // Invalid Host Wildcard\n    ];\n\n    for (const pattern of invalidPatterns) {\n      const parsedPattern = Extensions.HostUrlPattern.HostUrlPattern.parse(pattern);\n      assert.isUndefined(parsedPattern);\n    }\n  });\n\n  it('Ports', () => {\n    const testPatterns = [\n      {pattern: 'http://foo:1234', success: true, port: '1234'},\n      {pattern: 'http://foo:1234/', success: true, port: '1234'},\n      {pattern: 'http://foo:1234/*', success: true, port: '1234'},\n      {pattern: 'http://*.foo:1234/', success: true, port: '1234'},\n      {pattern: 'http://foo:/', success: false /* Invalid Port*/, port: '*'},\n      {pattern: 'http://*:1234/', success: true, port: '1234'},\n      {pattern: 'http://*:*/', success: true, port: '*'},\n      {pattern: 'http://foo:*/', success: true, port: '*'},\n      {pattern: 'http://*.foo:/', success: false /* Invalid Port*/, port: '*'},\n      {pattern: 'http://foo:com/', success: false /* Invalid Port*/, port: '*'},\n      {pattern: 'http://foo:123456/', success: false /* Invalid Port*/, port: '*'},\n      {pattern: 'http://foo:80:80/', success: false /* Invalid Port*/, port: '*'},\n      {pattern: 'chrome://foo:1234/', success: false /* Invalid Port*/, port: '*'},\n    ];\n\n    for (const {pattern, success, port} of testPatterns) {\n      const parsedPattern = Extensions.HostUrlPattern.HostUrlPattern.parse(pattern);\n      if (success) {\n        assert.exists(parsedPattern);\n        assert.strictEqual(parsedPattern.port, port);\n      } else {\n        assert.isUndefined(parsedPattern);\n      }\n    }\n  });\n\n  it('IPv6Patterns', () => {\n    const successTestPatterns = [\n      {pattern: 'http://[2607:f8b0:4005:805::200e]/', host: '[2607:f8b0:4005:805::200e]', port: '*'},\n      {pattern: 'http://[2607:f8b0:4005:805::200e]/*', host: '[2607:f8b0:4005:805::200e]', port: '*'},\n      {pattern: 'http://[2607:f8b0:4005:805::200e]:8888/*', host: '[2607:f8b0:4005:805::200e]', port: '8888'},\n    ];\n\n    for (const {pattern, host, port} of successTestPatterns) {\n      const parsedPattern = Extensions.HostUrlPattern.HostUrlPattern.parse(pattern);\n      assert.exists(parsedPattern);\n      assert.strictEqual(parsedPattern.host, host);\n      assert.strictEqual(parsedPattern.port, port);\n    }\n\n    const failureTestPatterns = [\n      'http://[2607:f8b0:4005:805::200e]:/*',         // Invalid Port\n      'http://[]:8888/*',                             // Empty Host\n      'http://[2607:f8b0:4005:805::200e/*',           // Invalid Host\n      'http://[2607:f8b0:4005:805::200e]]/*',         // Invalid Host\n      'http://[[2607:f8b0:4005:805::200e]/*',         // Invalid Host\n      'http://[2607:f8b0:4005:805:200e]/*',           // Invalid Host\n      'http://[2607:f8b0:4005:805:200e:12:bogus]/*',  // Invalid Host\n      'http://[[2607:f8b0:4005:805::200e]:abc/*',     // Invalid Port\n    ];\n\n    for (const pattern of failureTestPatterns) {\n      const parsedPattern = Extensions.HostUrlPattern.HostUrlPattern.parse(pattern);\n      assert.isUndefined(parsedPattern);\n    }\n  });\n\n  it('Matches all pages for a given scheme', () => {\n    const pattern = Extensions.HostUrlPattern.HostUrlPattern.parse('http://*/*');\n    assert.exists(pattern);\n    assert.strictEqual('http', pattern.scheme);\n    assert.strictEqual('*', pattern.host);\n    assert.isFalse(pattern.matchesAllUrls());\n    assert.isTrue(pattern.matchesUrl('http://google.com' as Platform.DevToolsPath.UrlString));\n    assert.isTrue(pattern.matchesUrl('http://yahoo.com' as Platform.DevToolsPath.UrlString));\n    assert.isTrue(pattern.matchesUrl('http://google.com/foo' as Platform.DevToolsPath.UrlString));\n    assert.isFalse(pattern.matchesUrl('https://google.com' as Platform.DevToolsPath.UrlString));\n    assert.isTrue(pattern.matchesUrl('http://74.125.127.100/search' as Platform.DevToolsPath.UrlString));\n  });\n\n  it('Matches all domains', () => {\n    const pattern = Extensions.HostUrlPattern.HostUrlPattern.parse('https://*/*');\n    assert.exists(pattern);\n    assert.strictEqual('https', pattern.scheme);\n    assert.strictEqual('*', pattern.host);\n    assert.isFalse(pattern.matchesAllUrls());\n    assert.isTrue(pattern.matchesUrl('https://www.google.com/foo' as Platform.DevToolsPath.UrlString));\n    assert.isTrue(pattern.matchesUrl('https://www.google.com/foobar' as Platform.DevToolsPath.UrlString));\n    assert.isFalse(pattern.matchesUrl('http://www.google.com/foo' as Platform.DevToolsPath.UrlString));\n    assert.isTrue(pattern.matchesUrl('https://www.google.com/' as Platform.DevToolsPath.UrlString));\n  });\n\n  it('Matches subdomains', () => {\n    const pattern = Extensions.HostUrlPattern.HostUrlPattern.parse('http://*.google.com/');\n    assert.exists(pattern);\n    assert.strictEqual('http', pattern.scheme);\n    assert.strictEqual('*.google.com', pattern.host);\n    assert.isFalse(pattern.matchesAllUrls());\n    assert.isTrue(pattern.matchesUrl('http://google.com/foobar' as Platform.DevToolsPath.UrlString));\n    assert.isTrue(pattern.matchesUrl('http://www.google.com/foobar' as Platform.DevToolsPath.UrlString));\n    assert.isTrue(pattern.matchesUrl('http://www.google.com/foo?bar' as Platform.DevToolsPath.UrlString));\n    assert.isFalse(pattern.matchesUrl('http://wwwgoogle.com/foobar' as Platform.DevToolsPath.UrlString));\n    assert.isTrue(pattern.matchesUrl('http://monkey.images.google.com/foooobar' as Platform.DevToolsPath.UrlString));\n    assert.isFalse(pattern.matchesUrl('http://yahoo.com/foobar' as Platform.DevToolsPath.UrlString));\n  });\n\n  it('Matches ip addresses', () => {\n    const pattern = Extensions.HostUrlPattern.HostUrlPattern.parse('http://127.0.0.1/');\n    assert.exists(pattern);\n    assert.strictEqual('http', pattern.scheme);\n    assert.strictEqual('127.0.0.1', pattern.host);\n    assert.isFalse(pattern.matchesAllUrls());\n    assert.isTrue(pattern.matchesUrl('http://127.0.0.1' as Platform.DevToolsPath.UrlString));\n  });\n\n  it('Matches subdomain matching with ip addresses', () => {\n    const pattern = Extensions.HostUrlPattern.HostUrlPattern.parse('http://*.0.0.1/');\n    assert.exists(pattern);\n    assert.strictEqual('http', pattern.scheme);\n    assert.strictEqual('*.0.0.0.1', pattern.host);\n    assert.isFalse(pattern.matchesAllUrls());\n    assert.isFalse(pattern.matchesUrl('http://127.0.0.1' as Platform.DevToolsPath.UrlString));\n  });\n\n  it('Matches chrome://', () => {\n    const pattern = Extensions.HostUrlPattern.HostUrlPattern.parse('chrome://favicon/*');\n    assert.exists(pattern);\n    assert.strictEqual('chrome', pattern.scheme);\n    assert.strictEqual('favicon', pattern.host);\n    assert.isFalse(pattern.matchesAllUrls());\n    assert.isTrue(pattern.matchesUrl('chrome://favicon/http://google.com' as Platform.DevToolsPath.UrlString));\n    assert.isTrue(pattern.matchesUrl('chrome://favicon/https://google.com' as Platform.DevToolsPath.UrlString));\n    assert.isFalse(pattern.matchesUrl('chrome://history' as Platform.DevToolsPath.UrlString));\n  });\n\n  it('Matches *://', () => {\n    const pattern = Extensions.HostUrlPattern.HostUrlPattern.parse('*://*/*');\n    assert.exists(pattern);\n    assert.isTrue(pattern.matchesScheme('http'));\n    assert.isTrue(pattern.matchesScheme('https'));\n    assert.isFalse(pattern.matchesScheme('chrome'));\n    assert.isFalse(pattern.matchesScheme('file'));\n    assert.isFalse(pattern.matchesScheme('ftp'));\n    assert.isFalse(pattern.matchesAllUrls());\n    assert.isTrue(pattern.matchesUrl('http://127.0.0.1' as Platform.DevToolsPath.UrlString));\n    assert.isFalse(pattern.matchesUrl('chrome://favicon/http://google.com' as Platform.DevToolsPath.UrlString));\n    assert.isFalse(pattern.matchesUrl('file:///foo/bar' as Platform.DevToolsPath.UrlString));\n    assert.isFalse(pattern.matchesUrl('file://localhost/foo/bar' as Platform.DevToolsPath.UrlString));\n  });\n\n  it('Matches <all_urls>', () => {\n    const pattern = Extensions.HostUrlPattern.HostUrlPattern.parse('<all_urls>');\n    assert.exists(pattern);\n    assert.isTrue(pattern.matchesScheme('chrome'));\n    assert.isTrue(pattern.matchesScheme('http'));\n    assert.isTrue(pattern.matchesScheme('https'));\n    assert.isTrue(pattern.matchesScheme('file'));\n    assert.isTrue(pattern.matchesScheme('chrome-extension'));\n    assert.isTrue(pattern.matchesAllUrls());\n    assert.isTrue(pattern.matchesUrl('chrome://favicon/http://google.com' as Platform.DevToolsPath.UrlString));\n    assert.isTrue(pattern.matchesUrl('http://127.0.0.1' as Platform.DevToolsPath.UrlString));\n    assert.isTrue(pattern.matchesUrl('file:///foo/bar' as Platform.DevToolsPath.UrlString));\n    assert.isTrue(pattern.matchesUrl('file://localhost/foo/bar' as Platform.DevToolsPath.UrlString));\n  });\n\n  it('Matches SCHEME_ALL matches all schemes.', () => {\n    const pattern = Extensions.HostUrlPattern.HostUrlPattern.parse('<all_urls>');\n    assert.exists(pattern);\n    assert.isTrue(pattern.matchesScheme('chrome'));\n    assert.isTrue(pattern.matchesScheme('http'));\n    assert.isTrue(pattern.matchesScheme('https'));\n    assert.isTrue(pattern.matchesScheme('file'));\n    assert.isTrue(pattern.matchesScheme('javascript'));\n    assert.isTrue(pattern.matchesScheme('data'));\n    assert.isTrue(pattern.matchesScheme('about'));\n    assert.isTrue(pattern.matchesScheme('chrome-extension'));\n    assert.isTrue(pattern.matchesAllUrls());\n    assert.isTrue(pattern.matchesUrl('chrome://favicon/http://google.com' as Platform.DevToolsPath.UrlString));\n    assert.isTrue(pattern.matchesUrl('http://127.0.0.1' as Platform.DevToolsPath.UrlString));\n    assert.isTrue(pattern.matchesUrl('file:///foo/bar' as Platform.DevToolsPath.UrlString));\n    assert.isTrue(pattern.matchesUrl('file://localhost/foo/bar' as Platform.DevToolsPath.UrlString));\n    assert.isTrue(pattern.matchesUrl('chrome://newtab' as Platform.DevToolsPath.UrlString));\n    assert.isTrue(pattern.matchesUrl('about:blank' as Platform.DevToolsPath.UrlString));\n    assert.isTrue(pattern.matchesUrl('about:version' as Platform.DevToolsPath.UrlString));\n    assert.isTrue(\n        pattern.matchesUrl('data:text/html;charset=utf-8,<html>asdf</html>' as Platform.DevToolsPath.UrlString));\n  });\n\n  it('Doesn\\'t Match Invalid', () => {\n    const pattern = Extensions.HostUrlPattern.HostUrlPattern.parse('<all_urls>');\n    assert.exists(pattern);\n    assert.isFalse(pattern.matchesUrl('http:' as Platform.DevToolsPath.UrlString));\n  });\n\n  it('Matches SCHEME_ALL and specific schemes.', () => {\n    const urlPatternTestCases = [\n      {pattern: 'chrome-extension://*/*', matches: 'chrome-extension://FTW'},\n    ];\n\n    for (const {pattern, matches} of urlPatternTestCases) {\n      const parsedPattern = Extensions.HostUrlPattern.HostUrlPattern.parse(pattern);\n      assert.exists(parsedPattern);\n      assert.isTrue(parsedPattern.matchesUrl(matches as Platform.DevToolsPath.UrlString));\n    }\n  });\n\n  it('Matches Specific port', () => {\n    const pattern = Extensions.HostUrlPattern.HostUrlPattern.parse('http://www.example.com:80/');\n    assert.exists(pattern);\n    assert.strictEqual('http', pattern.scheme);\n    assert.strictEqual('www.example.com', pattern.host);\n    assert.isFalse(pattern.matchesAllUrls());\n    assert.strictEqual('80', pattern.port);\n    assert.isTrue(pattern.matchesUrl('http://www.example.com:80/foo' as Platform.DevToolsPath.UrlString));\n    assert.isTrue(pattern.matchesUrl('http://www.example.com/foo' as Platform.DevToolsPath.UrlString));\n    assert.isFalse(pattern.matchesUrl('http://www.example.com:8080/foo' as Platform.DevToolsPath.UrlString));\n  });\n\n  it('Matches Explicit port wildcard', () => {\n    const pattern = Extensions.HostUrlPattern.HostUrlPattern.parse('http://www.example.com:*/*');\n    assert.exists(pattern);\n    assert.strictEqual('http', pattern.scheme);\n    assert.strictEqual('www.example.com', pattern.host);\n    assert.isFalse(pattern.matchesAllUrls());\n    assert.strictEqual('*', pattern.port);\n    assert.isTrue(pattern.matchesUrl('http://www.example.com:80/foo' as Platform.DevToolsPath.UrlString));\n    assert.isTrue(pattern.matchesUrl('http://www.example.com/foo' as Platform.DevToolsPath.UrlString));\n    assert.isTrue(pattern.matchesUrl('http://www.example.com:8080/foo' as Platform.DevToolsPath.UrlString));\n  });\n\n  it('Matches chrome-extension://', () => {\n    const pattern = Extensions.HostUrlPattern.HostUrlPattern.parse('chrome-extension://ftw/*');\n    assert.exists(pattern);\n    assert.strictEqual('chrome-extension', pattern.scheme);\n    assert.strictEqual('ftw', pattern.host);\n    assert.isFalse(pattern.matchesAllUrls());\n    assert.isTrue(pattern.matchesUrl('chrome-extension://ftw' as Platform.DevToolsPath.UrlString));\n    assert.isTrue(pattern.matchesUrl('chrome-extension://ftw/http://google.com' as Platform.DevToolsPath.UrlString));\n    assert.isTrue(pattern.matchesUrl('chrome-extension://ftw/https://google.com' as Platform.DevToolsPath.UrlString));\n    assert.isFalse(pattern.matchesUrl('chrome-extension://foobar' as Platform.DevToolsPath.UrlString));\n  });\n\n  it('Ignore Ports', () => {\n    const pattern = Extensions.HostUrlPattern.HostUrlPattern.parse('http://www.example.com:8080/');\n    assert.exists(pattern);\n\n    assert.isFalse(pattern.matchesUrl('http://www.example.com:1234/foo' as Platform.DevToolsPath.UrlString));\n  });\n\n  it('Trailing Dot Domain', () => {\n    const normalDomain = 'http://example.com/' as Platform.DevToolsPath.UrlString;\n    const trailingDotDomain = 'http://example.com./' as Platform.DevToolsPath.UrlString;\n\n    const pattern = Extensions.HostUrlPattern.HostUrlPattern.parse('*://example.com/*');\n    assert.exists(pattern);\n    assert.isTrue(pattern.matchesUrl(normalDomain));\n    assert.isTrue(pattern.matchesUrl(trailingDotDomain));\n\n    const trailingPattern = Extensions.HostUrlPattern.HostUrlPattern.parse('*://example.com./*');\n    assert.exists(trailingPattern);\n    assert.isTrue(trailingPattern.matchesUrl(normalDomain));\n    assert.isTrue(trailingPattern.matchesUrl(trailingDotDomain));\n  });\n\n  it('URLPattern properly canonicalizes uncanonicalized hosts', () => {\n    const pattern = Extensions.HostUrlPattern.HostUrlPattern.parse('*://*.gOoGle.com/*');\n    assert.exists(pattern);\n    assert.isTrue(pattern.matchesUrl('https://google.com' as Platform.DevToolsPath.UrlString));\n    assert.isTrue(pattern.matchesUrl('https://maps.google.com' as Platform.DevToolsPath.UrlString));\n    assert.isFalse(pattern.matchesUrl('https://example.com' as Platform.DevToolsPath.UrlString));\n\n    const pattern2 = Extensions.HostUrlPattern.HostUrlPattern.parse('https://*.ɡoogle.com/*');\n    assert.exists(pattern2);\n    const canonicalizedHost = 'xn--oogle-qmc.com';\n    assert.strictEqual(`*.${canonicalizedHost}`, pattern2.host);\n    assert.isFalse(pattern2.matchesUrl('https://google.com' as Platform.DevToolsPath.UrlString));\n    assert.isTrue(pattern2.matchesUrl(`https://${canonicalizedHost}/` as Platform.DevToolsPath.UrlString));\n    assert.isTrue(pattern2.matchesHost('ɡoogle.com'));\n\n    const pattern3 = Extensions.HostUrlPattern.HostUrlPattern.parse('https://\\xef\\xb7\\x90zyx.com/*');\n    assert.isUndefined(pattern3);  // Invalid Host\n  });\n});\n"]}