{"version":3,"file":"PersistenceImpl.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/persistence/PersistenceImpl.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {\n  describeWithMockConnection,\n} from '../../testing/MockConnection.js';\nimport {MockProtocolBackend} from '../../testing/MockScopeChain.js';\nimport {createFileSystemFileForPersistenceTests} from '../../testing/PersistenceHelpers.js';\nimport {\n  createContentProviderUISourceCode,\n  createFileSystemUISourceCode,\n} from '../../testing/UISourceCodeHelpers.js';\nimport * as Bindings from '../bindings/bindings.js';\nimport * as Breakpoints from '../breakpoints/breakpoints.js';\nimport * as Persistence from '../persistence/persistence.js';\nimport * as Workspace from '../workspace/workspace.js';\n\ndescribeWithMockConnection('PersistenceImpl', () => {\n  const FILE_SYSTEM_BREAK_ID = 'BREAK_ID' as Protocol.Debugger.BreakpointId;\n  const FILE_SYSTEM_SCRIPT_ID = 'FILE_SYSTEM_SCRIPT' as Protocol.Runtime.ScriptId;\n  const NETWORK_BREAKPOINT_ID = 'BREAKPOINT_ID';\n\n  let backend: MockProtocolBackend;\n  let target: SDK.Target.Target;\n  let breakpointManager: Breakpoints.BreakpointManager.BreakpointManager;\n\n  const DEFAULT_BREAKPOINT:\n      [Breakpoints.BreakpointManager.UserCondition, boolean, boolean, Breakpoints.BreakpointManager.BreakpointOrigin] =\n          [\n            Breakpoints.BreakpointManager.EMPTY_BREAKPOINT_CONDITION,\n            true,   // enabled\n            false,  // isLogpoint\n            Breakpoints.BreakpointManager.BreakpointOrigin.OTHER,\n          ];\n\n  const SCRIPT_DESCRIPTION = {\n    url: 'http://www.google.com/script.js' as Platform.DevToolsPath.UrlString,\n    content: 'console.log(1);\\nconsole.log(2);\\n',\n    startLine: 0,\n    startColumn: 0,\n    hasSourceURL: false,\n  };\n\n  beforeEach(() => {\n    target = createTarget();\n\n    const workspace = Workspace.Workspace.WorkspaceImpl.instance();\n    const targetManager = SDK.TargetManager.TargetManager.instance();\n    const resourceMapping = new Bindings.ResourceMapping.ResourceMapping(targetManager, workspace);\n    const debuggerWorkspaceBinding = Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance({\n      forceNew: true,\n      resourceMapping,\n      targetManager,\n    });\n    Bindings.IgnoreListManager.IgnoreListManager.instance({forceNew: true, debuggerWorkspaceBinding});\n    breakpointManager = Breakpoints.BreakpointManager.BreakpointManager.instance(\n        {forceNew: true, targetManager, workspace, debuggerWorkspaceBinding});\n\n    backend = new MockProtocolBackend();\n    Persistence.Persistence.PersistenceImpl.instance({forceNew: true, workspace, breakpointManager});\n  });\n\n  async function setBreakpointOnFileSystem(\n      fileSystemUiSourceCode: Workspace.UISourceCode.UISourceCode, breakpointLine: number) {\n    const fileSystemBreakpointResponse =\n        backend.responderToBreakpointByUrlRequest(fileSystemUiSourceCode.url(), breakpointLine)({\n          breakpointId: FILE_SYSTEM_BREAK_ID,\n          locations: [\n            {\n              scriptId: FILE_SYSTEM_SCRIPT_ID,\n              lineNumber: breakpointLine,\n              columnNumber: 0,\n            },\n          ],\n        });\n\n    // Set the breakpoint on the file system uiSourceCode.\n    await breakpointManager.setBreakpoint(fileSystemUiSourceCode, breakpointLine, 0, ...DEFAULT_BREAKPOINT);\n    await fileSystemBreakpointResponse;\n  }\n\n  async function attachNetworkScript(breakpointLine: number) {\n    const script = await backend.addScript(target, SCRIPT_DESCRIPTION, null);\n    const uiSourceCode =\n        Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance().uiSourceCodeForScript(script);\n    assert.exists(uiSourceCode);\n\n    // Set the breakpoint response for our upcoming request to set the breakpoint on the network file.\n    await backend.responderToBreakpointByUrlRequest(script.sourceURL, breakpointLine)({\n      breakpointId: NETWORK_BREAKPOINT_ID as Protocol.Debugger.BreakpointId,\n      locations: [\n        {\n          scriptId: script.scriptId,\n          lineNumber: breakpointLine,\n          columnNumber: 0,\n        },\n      ],\n    });\n    return uiSourceCode;\n  }\n\n  function assertBreakLocationUiSourceCodes(uiSourceCodes: Workspace.UISourceCode.UISourceCode[]) {\n    const locations = breakpointManager.allBreakpointLocations();\n    assert.deepEqual(locations.map(loc => loc.uiLocation.uiSourceCode), uiSourceCodes);\n  }\n\n  it('moves breakpoint from file system uiSourceCode to the network uiSourceCode when binding is created', async () => {\n    const fileSystemPath = 'file://path/to/filesystem' as Platform.DevToolsPath.UrlString;\n    const fileSystemFileUrl = fileSystemPath + '/script.js' as Platform.DevToolsPath.UrlString;\n    const {uiSourceCode: fileSystemUiSourceCode, project} = createFileSystemFileForPersistenceTests(\n        {fileSystemPath, fileSystemFileUrl, type: ''}, SCRIPT_DESCRIPTION.url, SCRIPT_DESCRIPTION.content, target);\n    const breakpointLine = 0;\n\n    // Set the breakpoint response for our upcoming request.\n    await setBreakpointOnFileSystem(fileSystemUiSourceCode, breakpointLine);\n\n    // We should only have one breakpoint location: the one on the file system.\n    assertBreakLocationUiSourceCodes([fileSystemUiSourceCode]);\n\n    // Add the script.\n    const networkUiSourceCode = await attachNetworkScript(breakpointLine);\n\n    // We should only have one breakpoint location: the one on the network.\n    assertBreakLocationUiSourceCodes([networkUiSourceCode]);\n\n    project.dispose();\n\n    assertBreakLocationUiSourceCodes([networkUiSourceCode]);\n  });\n\n  it('copies breakpoint from network uiSourceCode to the file system uiSourceCode when binding is removed ',\n     async () => {\n       const fileSystemPath = 'file://path/to/filesystem' as Platform.DevToolsPath.UrlString;\n       const fileSystemFileUrl = fileSystemPath + '/script.js' as Platform.DevToolsPath.UrlString;\n       const {uiSourceCode: fileSystemUiSourceCode, project} = createFileSystemFileForPersistenceTests(\n           {fileSystemPath, fileSystemFileUrl, type: ''}, SCRIPT_DESCRIPTION.url, SCRIPT_DESCRIPTION.content, target);\n       const breakpointLine = 0;\n\n       // Set the breakpoint response for our upcoming request.\n       await setBreakpointOnFileSystem(fileSystemUiSourceCode, breakpointLine);\n\n       // We should only have one breakpoint location: the one on the file system.\n       assertBreakLocationUiSourceCodes([fileSystemUiSourceCode]);\n\n       // Add the script.\n       const networkUiSourceCode = await attachNetworkScript(breakpointLine);\n\n       // We should only have one breakpoint location: the one on the network.\n       assertBreakLocationUiSourceCodes([networkUiSourceCode]);\n\n       // Prepare to remove the binding. This will cause the breakpoint from the network to be copied\n       // over to the file system uiSourceCode.\n       const persistence = Persistence.Persistence.PersistenceImpl.instance();\n       const binding = persistence.binding(fileSystemUiSourceCode);\n       assert.exists(binding);\n\n       // Set the breakpoint response for our upcoming request on the file system.\n       const moveResponse = backend.responderToBreakpointByUrlRequest(fileSystemUiSourceCode.url(), breakpointLine)({\n         breakpointId: FILE_SYSTEM_BREAK_ID,\n         locations: [\n           {\n             scriptId: FILE_SYSTEM_SCRIPT_ID,\n             lineNumber: breakpointLine,\n             columnNumber: 0,\n           },\n         ],\n       });\n\n       await persistence.removeBinding(binding);\n       await moveResponse;\n\n       assertBreakLocationUiSourceCodes([networkUiSourceCode, fileSystemUiSourceCode]);\n       project.dispose();\n     });\n\n  // Replaces web test: http/tests/devtools/persistence/automapping-bind-committed-network-sourcecode.js\n  it('it marks the filesystem UISourceCode dirty when the network UISourceCode was committed before the binding was established',\n     async () => {\n       const url = 'https://example.com/script.js' as Platform.DevToolsPath.UrlString;\n       const origContent = 'window.foo = () => \"foo\";\\n';\n       const {uiSourceCode: networkUISourceCode} = createContentProviderUISourceCode({\n         url,\n         content: origContent,\n         mimeType: 'text/javascript',\n         projectType: Workspace.Workspace.projectTypes.Network,\n         metadata: new Workspace.UISourceCode.UISourceCodeMetadata(null, origContent.length),\n       });\n\n       // Modify the content of the network UISourceCode.\n       const content = origContent.replace(/foo/g, 'bar');\n       networkUISourceCode.addRevision(content);\n\n       // Add a filesystem version of 'script.js' with the original content.\n       const mappingPromise =\n           Persistence.Persistence.PersistenceImpl.instance().once(Persistence.Persistence.Events.BindingCreated);\n       const localUrl = 'file:///var/www/script.js' as Platform.DevToolsPath.UrlString;\n       const {uiSourceCode} = createFileSystemUISourceCode({\n         url: localUrl,\n         mimeType: 'text/javascript',\n         content: origContent,\n         autoMapping: true,\n         metadata: new Workspace.UISourceCode.UISourceCodeMetadata(null, origContent.length),\n       });\n\n       const {network, fileSystem} = await mappingPromise;\n       assert.strictEqual(network, networkUISourceCode);\n       assert.strictEqual(fileSystem, uiSourceCode);\n       assert.isTrue(fileSystem.isDirty());\n       assert.strictEqual(fileSystem.workingCopy(), content);\n     });\n});\n"]}