{"version":3,"file":"ScriptFormatter.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/formatter/ScriptFormatter.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Formatter from '../formatter/formatter.js';\n\ndescribe('ScriptFormatter', () => {\n  const indentString = '  ';\n\n  it('can format a HTML document', async () => {\n    const {formattedContent} = await Formatter.ScriptFormatter.format(\n        Common.ResourceType.ResourceType.fromMimeType('text/html'), 'text/html',\n        '<html><head></head><body></body></html>', indentString);\n    assert.strictEqual(formattedContent, `<html>\n  <head></head>\n  <body></body>\n</html>\n`);\n  });\n\n  it('can map original locations to formatted locations for HTML documents', async () => {\n    const {formattedMapping} = await Formatter.ScriptFormatter.format(\n        Common.ResourceType.ResourceType.fromMimeType('text/html'), 'text/html',\n        '<html><head></head><body></body></html>', indentString);\n    // The start of <head>\n    assert.deepEqual(formattedMapping.originalToFormatted(0, 6), [1, 2]);\n  });\n\n  it('can map original lines to formatted locations for HTML documents', async () => {\n    const {formattedMapping} = await Formatter.ScriptFormatter.format(\n        Common.ResourceType.ResourceType.fromMimeType('text/html'), 'text/html', `<html><head>\n</head><body></body></html>`,\n        indentString);\n    // The start of </head>\n    assert.deepEqual(formattedMapping.originalToFormatted(1), [1, 8]);\n  });\n\n  it('can map formatted locations to original locations for HTML documents', async () => {\n    const {formattedMapping} = await Formatter.ScriptFormatter.format(\n        Common.ResourceType.ResourceType.fromMimeType('text/html'), 'text/html',\n        '<html><head></head><body></body></html>', indentString);\n    // The start of <head>\n    assert.deepEqual(formattedMapping.formattedToOriginal(1, 2), [0, 6]);\n  });\n\n  it('can map formatted lines to original locations for HTML documents', async () => {\n    const {formattedMapping} = await Formatter.ScriptFormatter.format(\n        Common.ResourceType.ResourceType.fromMimeType('text/html'), 'text/html',\n        '<html><head></head><body></body></html>', indentString);\n    // The start of <head>\n    assert.deepEqual(formattedMapping.formattedToOriginal(1), [0, 6]);\n  });\n\n  describe('for documents that cant be formatted', () => {\n    // Technically we can format SVG files, but for this test we pretend its\n    // mimetype is an image, which we consider unformattable.\n    const originalContent = `<svg>\n  <rect x=\"10\" y=\"-10\" /></svg>`;\n    const mimeType = 'image/svg';\n    const resourceType = Common.ResourceType.ResourceType.fromMimeType(mimeType);\n\n    it('returns the original content', async () => {\n      const {formattedContent} =\n          await Formatter.ScriptFormatter.format(resourceType, mimeType, originalContent, indentString);\n      assert.deepEqual(formattedContent, originalContent);\n    });\n\n    it('maps to the same locations from formatted locations', async () => {\n      const {formattedMapping} =\n          await Formatter.ScriptFormatter.format(resourceType, mimeType, originalContent, indentString);\n      assert.deepEqual(formattedMapping.formattedToOriginal(1, 2), [1, 2]);\n    });\n\n    it('defaults column number to zero from formatted locations', async () => {\n      const {formattedMapping} =\n          await Formatter.ScriptFormatter.format(resourceType, mimeType, originalContent, indentString);\n      assert.deepEqual(formattedMapping.formattedToOriginal(1), [1, 0]);\n    });\n\n    it('maps to the same locations from original locations', async () => {\n      const {formattedMapping} =\n          await Formatter.ScriptFormatter.format(resourceType, mimeType, originalContent, indentString);\n      assert.deepEqual(formattedMapping.originalToFormatted(1, 4), [1, 4]);\n    });\n\n    it('defaults column number to zero from original locations', async () => {\n      const {formattedMapping} =\n          await Formatter.ScriptFormatter.format(resourceType, mimeType, originalContent, indentString);\n      assert.deepEqual(formattedMapping.originalToFormatted(1), [1, 0]);\n    });\n  });\n});\n"]}