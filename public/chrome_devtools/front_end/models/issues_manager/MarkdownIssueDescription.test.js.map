{"version":3,"file":"MarkdownIssueDescription.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/issues_manager/MarkdownIssueDescription.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as IssuesManager from '../issues_manager/issues_manager.js';\n\ndescribe('createIssueDescriptionFromMarkdown', () => {\n  it('only accepts Markdown where the first AST element is a heading, describing the title', () => {\n    const emptyMarkdownDescription = {\n      file: '<unused>',\n      links: [],\n    };\n\n    const validIssueDescription = '# Title for the issue\\n\\n...and some text describing the issue.';\n\n    const description = IssuesManager.MarkdownIssueDescription.createIssueDescriptionFromRawMarkdown(\n        validIssueDescription, emptyMarkdownDescription);\n    assert.strictEqual(description.title, 'Title for the issue');\n  });\n\n  it('throws an error for issue description without a heading', () => {\n    const emptyMarkdownDescription = {\n      file: '<unused>',\n      links: [],\n    };\n\n    const invalidIssueDescription = 'Just some text, but the heading is missing!';\n\n    assert.throws(\n        () => IssuesManager.MarkdownIssueDescription.createIssueDescriptionFromRawMarkdown(\n            invalidIssueDescription, emptyMarkdownDescription));\n  });\n});\n\ndescribe('substitutePlaceholders', () => {\n  it('returns the input as-is, with no placeholders present in the input', () => {\n    const str = 'Example string with no placeholders';\n\n    assert.strictEqual(IssuesManager.MarkdownIssueDescription.substitutePlaceholders(str), str);\n  });\n\n  it('subsitutes a single placeholder', () => {\n    const str = 'Example string with a single {PLACEHOLDER_placeholder}';\n\n    const actual = IssuesManager.MarkdownIssueDescription.substitutePlaceholders(\n        str, new Map<string, string>([['PLACEHOLDER_placeholder', 'fooholder']]));\n    assert.strictEqual(actual, 'Example string with a single fooholder');\n  });\n\n  it('substitutes multiple placeholders', () => {\n    const str = 'Example string with two placeholders, \\'{PLACEHOLDER_ph1}\\' and \\'{PLACEHOLDER_ph2}\\'.';\n\n    const actual = IssuesManager.MarkdownIssueDescription.substitutePlaceholders(\n        str, new Map<string, string>([['PLACEHOLDER_ph1', 'foo'], ['PLACEHOLDER_ph2', 'bar']]));\n    assert.strictEqual(actual, 'Example string with two placeholders, \\'foo\\' and \\'bar\\'.');\n  });\n\n  it('throws an error for placeholders that don\\'t have a replacement in the map', () => {\n    const str = 'Example string where a replacement for {PLACEHOLDER_placeholder} is not provided.';\n\n    assert.throws(() => IssuesManager.MarkdownIssueDescription.substitutePlaceholders(str));\n  });\n\n  it('ignores placeholder syntax where the placeholder doesn\\'t have the PLACEHOLDER prefix', () => {\n    const str = 'Example string with a {placeholder} that must be ignored.';\n\n    assert.strictEqual(IssuesManager.MarkdownIssueDescription.substitutePlaceholders(str), str);\n  });\n\n  it('throws an error for unused replacements', () => {\n    const str = 'Example string with no placeholder';\n\n    assert.throws(\n        () =>\n            IssuesManager.MarkdownIssueDescription.substitutePlaceholders(str, new Map([['PLACEHOLDER_FOO', 'bar']])));\n  });\n\n  it('allows the same placeholder to be used multiple times', () => {\n    const str = 'Example string with the same placeholder used twice: {PLACEHOLDER_PH1} {PLACEHOLDER_PH1}';\n\n    const actual =\n        IssuesManager.MarkdownIssueDescription.substitutePlaceholders(str, new Map([['PLACEHOLDER_PH1', 'foo']]));\n    assert.strictEqual(actual, 'Example string with the same placeholder used twice: foo foo');\n  });\n\n  it('throws an error for invalid placeholder syntax provided in the substitutions map', () => {\n    const str = 'Example string with no placeholder';\n\n    assert.throws(\n        () => IssuesManager.MarkdownIssueDescription.substitutePlaceholders(str, new Map([['invalid_ph', 'foo']])));\n  });\n});\n"]}