{"version":3,"file":"SharedDictionaryIssue.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/issues_manager/SharedDictionaryIssue.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAI7B,OAAO,EAAC,kBAAkB,EAAC,MAAM,qCAAqC,CAAC;AACvE,OAAO,EAAC,eAAe,EAAC,MAAM,kCAAkC,CAAC;AACjE,OAAO,KAAK,aAAa,MAAM,qCAAqC,CAAC;AAErE,SAAS,mBAAmB,CAAC,4BAA0E;IAErG,OAAO;QACL,IAAI,wFAA0D;QAC9D,OAAO,EAAE,EAAC,4BAA4B,EAAC;KACxC,CAAC;AACJ,CAAC;AAED,kBAAkB,CAAC,uBAAuB,EAAE,GAAG,EAAE;IAC/C,MAAM,SAAS,GAAG,IAAI,eAAe,CAAC,EAAE,CAA2C,CAAC;IAEpF,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;QAClD,MAAM,YAAY,GAAG;;;;;;;;;;;;;;;;;;;;;;;;SAwBpB,CAAC;QACF,KAAK,MAAM,WAAW,IAAI,YAAY,EAAE,CAAC;YACvC,MAAM,YAAY,GAAG;gBACnB,qBAAqB,EAAE,WAAW;gBAClC,OAAO,EAAE;oBACP,SAAS,EAAE,iBAA+C;oBAC1D,GAAG,EAAE,sBAAsB;iBAC5B;aACF,CAAC;YACF,MAAM,KAAK,GAAG,mBAAmB,CAAC,YAAY,CAAC,CAAC;YAChD,MAAM,sBAAsB,GACxB,aAAa,CAAC,qBAAqB,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACnG,MAAM,CAAC,QAAQ,CAAC,sBAAsB,EAAE,CAAC,CAAC,CAAC;YAC3C,MAAM,qBAAqB,GAAG,sBAAsB,CAAC,CAAC,CAAC,CAAC;YAExD,MAAM,CAAC,WAAW,CAAC,qBAAqB,CAAC,WAAW,EAAE,wDAA0C,CAAC;YACjG,MAAM,CAAC,eAAe,CAAC,qBAAqB,CAAC,OAAO,EAAE,EAAE,YAAY,CAAC,CAAC;YACtE,MAAM,CAAC,WAAW,CAAC,qBAAqB,CAAC,OAAO,EAAE,4DAA0C,CAAC;YAC7F,MAAM,CAAC,SAAS,CAAC,qBAAqB,CAAC,cAAc,EAAE,CAAC,CAAC;QAC3D,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport {describeWithLocale} from '../../testing/EnvironmentHelpers.js';\nimport {MockIssuesModel} from '../../testing/MockIssuesModel.js';\nimport * as IssuesManager from '../issues_manager/issues_manager.js';\n\nfunction createProtocolIssue(sharedDictionaryIssueDetails: Protocol.Audits.SharedDictionaryIssueDetails):\n    Protocol.Audits.InspectorIssue {\n  return {\n    code: Protocol.Audits.InspectorIssueCode.SharedDictionaryIssue,\n    details: {sharedDictionaryIssueDetails},\n  };\n}\n\ndescribeWithLocale('SharedDictionaryIssue', () => {\n  const mockModel = new MockIssuesModel([]) as unknown as SDK.IssuesModel.IssuesModel;\n\n  it('can be created for various error reasons', () => {\n    const errorReasons = [\n      Protocol.Audits.SharedDictionaryError.UseErrorCrossOriginNoCorsRequest,\n      Protocol.Audits.SharedDictionaryError.UseErrorDictionaryLoadFailure,\n      Protocol.Audits.SharedDictionaryError.UseErrorMatchingDictionaryNotUsed,\n      Protocol.Audits.SharedDictionaryError.UseErrorUnexpectedContentDictionaryHeader,\n      Protocol.Audits.SharedDictionaryError.WriteErrorCossOriginNoCorsRequest,\n      Protocol.Audits.SharedDictionaryError.WriteErrorDisallowedBySettings,\n      Protocol.Audits.SharedDictionaryError.WriteErrorExpiredResponse,\n      Protocol.Audits.SharedDictionaryError.WriteErrorFeatureDisabled,\n      Protocol.Audits.SharedDictionaryError.WriteErrorInsufficientResources,\n      Protocol.Audits.SharedDictionaryError.WriteErrorInvalidMatchField,\n      Protocol.Audits.SharedDictionaryError.WriteErrorInvalidStructuredHeader,\n      Protocol.Audits.SharedDictionaryError.WriteErrorNavigationRequest,\n      Protocol.Audits.SharedDictionaryError.WriteErrorNoMatchField,\n      Protocol.Audits.SharedDictionaryError.WriteErrorNonListMatchDestField,\n      Protocol.Audits.SharedDictionaryError.WriteErrorNonSecureContext,\n      Protocol.Audits.SharedDictionaryError.WriteErrorNonStringIdField,\n      Protocol.Audits.SharedDictionaryError.WriteErrorNonStringInMatchDestList,\n      Protocol.Audits.SharedDictionaryError.WriteErrorNonStringMatchField,\n      Protocol.Audits.SharedDictionaryError.WriteErrorNonTokenTypeField,\n      Protocol.Audits.SharedDictionaryError.WriteErrorRequestAborted,\n      Protocol.Audits.SharedDictionaryError.WriteErrorShuttingDown,\n      Protocol.Audits.SharedDictionaryError.WriteErrorTooLongIdField,\n      Protocol.Audits.SharedDictionaryError.WriteErrorUnsupportedType,\n    ];\n    for (const errorReason of errorReasons) {\n      const issueDetails = {\n        sharedDictionaryError: errorReason,\n        request: {\n          requestId: 'test-request-id' as Protocol.Network.RequestId,\n          url: 'https://example.com/',\n        },\n      };\n      const issue = createProtocolIssue(issueDetails);\n      const sharedDictionaryIssues =\n          IssuesManager.SharedDictionaryIssue.SharedDictionaryIssue.fromInspectorIssue(mockModel, issue);\n      assert.lengthOf(sharedDictionaryIssues, 1);\n      const sharedDictionaryIssue = sharedDictionaryIssues[0];\n\n      assert.strictEqual(sharedDictionaryIssue.getCategory(), IssuesManager.Issue.IssueCategory.Other);\n      assert.deepStrictEqual(sharedDictionaryIssue.details(), issueDetails);\n      assert.strictEqual(sharedDictionaryIssue.getKind(), IssuesManager.Issue.IssueKind.PageError);\n      assert.isNotNull(sharedDictionaryIssue.getDescription());\n    }\n  });\n});\n"]}