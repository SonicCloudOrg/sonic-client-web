{"version":3,"file":"PropertyRuleIssue.js","sourceRoot":"","sources":["../../../../../../front_end/models/issues_manager/PropertyRuleIssue.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAK7B,OAAO,EAAC,KAAK,EAA2B,MAAM,YAAY,CAAC;AAG3D,MAAM,OAAO,iBAAkB,SAAQ,KAAK;IACjC,aAAa,CAA2C;IACxD,WAAW,CAAS;IAC7B,YAAY,YAAsD,EAAE,WAAwC;QAC1G,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;QAC1C,KAAK,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;QACzB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;IACpC,CAAC;IAEQ,OAAO;QACd,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,CAAC;IACjD,CAAC;IAED,OAAO;QACL,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IAED,UAAU;QACR,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED,eAAe;QACb,QAAQ,IAAI,CAAC,aAAa,CAAC,uBAAuB,EAAE,CAAC;YACnD;gBACE,OAAO,UAAU,CAAC;YACpB;gBACE,OAAO,eAAe,CAAC;YACzB;gBACE,OAAO,QAAQ,CAAC;QACpB,CAAC;QACD,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,cAAc;QACZ,IAAI,IAAI,CAAC,aAAa,CAAC,uBAAuB,4EAAwD,EAAE,CAAC;YACvG,OAAO;gBACL,IAAI,EAAE,iCAAiC;gBACvC,KAAK,EAAE,EAAE;aACV,CAAC;QACJ,CAAC;QACD,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,aAAa,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;QAC9F,MAAM,QAAQ,GAAG,GAAG,IAAI,CAAC,eAAe,EAAE,GAAG,KAAK,EAAE,CAAC;QACrD,OAAO;YACL,IAAI,EAAE,sBAAsB;YAC5B,aAAa,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC,sBAAsB,EAAE,QAAQ,CAAC,CAAC,CAAC;YAC5D,KAAK,EAAE,EAAE;SACV,CAAC;IACJ,CAAC;IAED,WAAW;QACT,yCAA2B;IAC7B,CAAC;IAED,OAAO;QACL,6CAA2B;IAC7B,CAAC;IAED,MAAM,CAAC,kBAAkB,CAAC,UAAuC,EAAE,cAA8C;QAE/G,MAAM,wBAAwB,GAAG,cAAc,CAAC,OAAO,CAAC,wBAAwB,CAAC;QACjF,IAAI,CAAC,wBAAwB,EAAE,CAAC;YAC9B,OAAO,CAAC,IAAI,CAAC,8CAA8C,CAAC,CAAC;YAC7D,OAAO,EAAE,CAAC;QACZ,CAAC;QACD,OAAO,CAAC,IAAI,iBAAiB,CAAC,wBAAwB,EAAE,UAAU,CAAC,CAAC,CAAC;IACvE,CAAC;CACF","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nimport {Issue, IssueCategory, IssueKind} from './Issue.js';\nimport {type MarkdownIssueDescription} from './MarkdownIssueDescription.js';\n\nexport class PropertyRuleIssue extends Issue {\n  readonly #issueDetails: Protocol.Audits.PropertyRuleIssueDetails;\n  readonly #primaryKey: string;\n  constructor(issueDetails: Protocol.Audits.PropertyRuleIssueDetails, issuesModel: SDK.IssuesModel.IssuesModel) {\n    const code = JSON.stringify(issueDetails);\n    super(code, issuesModel);\n    this.#primaryKey = code;\n    this.#issueDetails = issueDetails;\n  }\n\n  override sources(): Array<Protocol.Audits.SourceCodeLocation> {\n    return [this.#issueDetails.sourceCodeLocation];\n  }\n\n  details(): Protocol.Audits.PropertyRuleIssueDetails {\n    return this.#issueDetails;\n  }\n\n  primaryKey(): string {\n    return this.#primaryKey;\n  }\n\n  getPropertyName(): string {\n    switch (this.#issueDetails.propertyRuleIssueReason) {\n      case Protocol.Audits.PropertyRuleIssueReason.InvalidInherits:\n        return 'inherits';\n      case Protocol.Audits.PropertyRuleIssueReason.InvalidInitialValue:\n        return 'initial-value';\n      case Protocol.Audits.PropertyRuleIssueReason.InvalidSyntax:\n        return 'syntax';\n    }\n    return '';\n  }\n\n  getDescription(): MarkdownIssueDescription {\n    if (this.#issueDetails.propertyRuleIssueReason === Protocol.Audits.PropertyRuleIssueReason.InvalidName) {\n      return {\n        file: 'propertyRuleInvalidNameIssue.md',\n        links: [],\n      };\n    }\n    const value = this.#issueDetails.propertyValue ? `: ${this.#issueDetails.propertyValue}` : '';\n    const property = `${this.getPropertyName()}${value}`;\n    return {\n      file: 'propertyRuleIssue.md',\n      substitutions: new Map([['PLACEHOLDER_property', property]]),\n      links: [],\n    };\n  }\n\n  getCategory(): IssueCategory {\n    return IssueCategory.Other;\n  }\n\n  getKind(): IssueKind {\n    return IssueKind.PageError;\n  }\n\n  static fromInspectorIssue(issueModel: SDK.IssuesModel.IssuesModel, inspectorIssue: Protocol.Audits.InspectorIssue):\n      PropertyRuleIssue[] {\n    const propertyRuleIssueDetails = inspectorIssue.details.propertyRuleIssueDetails;\n    if (!propertyRuleIssueDetails) {\n      console.warn('Property rule issue without details received');\n      return [];\n    }\n    return [new PropertyRuleIssue(propertyRuleIssueDetails, issueModel)];\n  }\n}\n"]}