{"version":3,"file":"StylesheetLoadingIssue.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/issues_manager/StylesheetLoadingIssue.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as Issues from '../../panels/issues/issues.js';\nimport {describeWithLocale} from '../../testing/EnvironmentHelpers.js';\nimport {MockIssuesManager} from '../../testing/MockIssuesManager.js';\nimport {MockIssuesModel} from '../../testing/MockIssuesModel.js';\nimport * as IssuesManager from '../issues_manager/issues_manager.js';\n\nfunction createProtocolIssue(stylesheetLoadingIssueDetails: Protocol.Audits.StylesheetLoadingIssueDetails):\n    Protocol.Audits.InspectorIssue {\n  return {\n    code: Protocol.Audits.InspectorIssueCode.StylesheetLoadingIssue,\n    details: {stylesheetLoadingIssueDetails},\n  };\n}\n\ndescribeWithLocale('StylesheetLoadingIssue', () => {\n  const mockModel = new MockIssuesModel([]) as unknown as SDK.IssuesModel.IssuesModel;\n  const mockManager = new MockIssuesManager([]) as unknown as IssuesManager.IssuesManager.IssuesManager;\n\n  it('can be created for failed stylesheet requests', () => {\n    const issueDetails = {\n      sourceCodeLocation: {\n        url: 'http://example.com',\n        lineNumber: 2,\n        columnNumber: 2,\n      },\n      styleSheetLoadingIssueReason: Protocol.Audits.StyleSheetLoadingIssueReason.RequestFailed,\n      failedRequestInfo:\n          {url: 'http://invalid', failureMessage: 'failureMessage', requestId: '12345' as Protocol.Network.RequestId},\n    };\n    const issue = createProtocolIssue(issueDetails);\n    const stylesheetIssues =\n        IssuesManager.StylesheetLoadingIssue.StylesheetLoadingIssue.fromInspectorIssue(mockModel, issue);\n    assert.lengthOf(stylesheetIssues, 1);\n    const stylesheetIssue = stylesheetIssues[0];\n\n    assert.strictEqual(stylesheetIssue.getCategory(), IssuesManager.Issue.IssueCategory.Other);\n    assert.deepStrictEqual(stylesheetIssue.sources(), [issueDetails.sourceCodeLocation]);\n    const {url, requestId} = issueDetails.failedRequestInfo;\n    assert.deepStrictEqual(stylesheetIssue.requests(), [{url, requestId}]);\n    assert.strictEqual(stylesheetIssue.getKind(), IssuesManager.Issue.IssueKind.PageError);\n    assert.isNotNull(stylesheetIssue.getDescription());\n  });\n\n  it('can be created for late import rules', () => {\n    const issueDetails = {\n      sourceCodeLocation: {\n        url: 'http://example.com',\n        lineNumber: 2,\n        columnNumber: 2,\n      },\n      styleSheetLoadingIssueReason: Protocol.Audits.StyleSheetLoadingIssueReason.LateImportRule,\n    };\n    const issue = createProtocolIssue(issueDetails);\n    const stylesheetIssues =\n        IssuesManager.StylesheetLoadingIssue.StylesheetLoadingIssue.fromInspectorIssue(mockModel, issue);\n    assert.lengthOf(stylesheetIssues, 1);\n    const stylesheetIssue = stylesheetIssues[0];\n\n    assert.strictEqual(stylesheetIssue.getCategory(), IssuesManager.Issue.IssueCategory.Other);\n    assert.deepStrictEqual(stylesheetIssue.sources(), [issueDetails.sourceCodeLocation]);\n    assert.strictEqual(stylesheetIssue.getKind(), IssuesManager.Issue.IssueKind.PageError);\n    assert.isNotNull(stylesheetIssue.getDescription());\n  });\n\n  it('correctly aggregates issues', () => {\n    const issueDetails = [\n      {\n        sourceCodeLocation: {\n          url: 'http://example.com',\n          lineNumber: 1,\n          columnNumber: 1,\n        },\n        styleSheetLoadingIssueReason: Protocol.Audits.StyleSheetLoadingIssueReason.LateImportRule,\n      },\n      {\n        sourceCodeLocation: {\n          url: 'http://example.com',\n          lineNumber: 2,\n          columnNumber: 1,\n        },\n        styleSheetLoadingIssueReason: Protocol.Audits.StyleSheetLoadingIssueReason.LateImportRule,\n      },\n      {\n        sourceCodeLocation: {\n          url: 'http://example.com',\n          lineNumber: 1,\n          columnNumber: 2,\n        },\n        styleSheetLoadingIssueReason: Protocol.Audits.StyleSheetLoadingIssueReason.RequestFailed,\n        failedRequestInfo: {url: 'http://invalid', failureMessage: 'failureMessage'},\n      },\n      {\n        sourceCodeLocation: {\n          url: 'http://example.com',\n          lineNumber: 2,\n          columnNumber: 2,\n        },\n        styleSheetLoadingIssueReason: Protocol.Audits.StyleSheetLoadingIssueReason.RequestFailed,\n        failedRequestInfo:\n            {url: 'http://invalid', failureMessage: 'failureMessage', requestId: '12354' as Protocol.Network.RequestId},\n      },\n    ];\n\n    const issues = issueDetails\n                       .map(\n                           details => IssuesManager.StylesheetLoadingIssue.StylesheetLoadingIssue.fromInspectorIssue(\n                               mockModel, createProtocolIssue(details)))\n                       .flat();\n\n    assert.lengthOf(issues, 4);\n\n    const aggregator = new Issues.IssueAggregator.IssueAggregator(mockManager);\n    for (const issue of issues) {\n      mockManager.dispatchEventToListeners(\n          IssuesManager.IssuesManager.Events.IssueAdded, {issuesModel: mockModel, issue});\n    }\n\n    const aggregatedIssues = Array.from(aggregator.aggregatedIssues());\n    assert.lengthOf(aggregatedIssues, 2);\n\n    assert.deepStrictEqual(\n        Array.from(aggregatedIssues[0].sources()),\n        [issueDetails[0].sourceCodeLocation, issueDetails[1].sourceCodeLocation]);\n    assert.deepStrictEqual(\n        Array.from(aggregatedIssues[1].sources()),\n        [issueDetails[2].sourceCodeLocation, issueDetails[3].sourceCodeLocation]);\n    assert.deepStrictEqual(Array.from(aggregatedIssues[0].requests()), []);\n    const {url, requestId} = issueDetails[3].failedRequestInfo as Protocol.Audits.FailedRequestInfo;\n    assert.exists(requestId);\n    assert.deepStrictEqual(Array.from(aggregatedIssues[1].requests()), [{url, requestId}]);\n  });\n});\n"]}