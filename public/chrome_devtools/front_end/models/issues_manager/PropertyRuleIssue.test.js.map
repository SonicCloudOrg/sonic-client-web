{"version":3,"file":"PropertyRuleIssue.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/issues_manager/PropertyRuleIssue.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as Issues from '../../panels/issues/issues.js';\nimport {describeWithLocale} from '../../testing/EnvironmentHelpers.js';\nimport {MockIssuesManager} from '../../testing/MockIssuesManager.js';\nimport {MockIssuesModel} from '../../testing/MockIssuesModel.js';\nimport * as IssuesManager from '../issues_manager/issues_manager.js';\n\nfunction createProtocolIssue(propertyRuleIssueDetails: Protocol.Audits.PropertyRuleIssueDetails):\n    Protocol.Audits.InspectorIssue {\n  return {\n    code: Protocol.Audits.InspectorIssueCode.PropertyRuleIssue,\n    details: {propertyRuleIssueDetails},\n  };\n}\n\ndescribeWithLocale('PropertyRuleIssue', () => {\n  const mockModel = new MockIssuesModel([]) as unknown as SDK.IssuesModel.IssuesModel;\n  const mockManager = new MockIssuesManager([]) as unknown as IssuesManager.IssuesManager.IssuesManager;\n\n  it('can be created for property rules parsing failures', () => {\n    const issueDetails = {\n      sourceCodeLocation: {\n        url: 'http://example.com',\n        lineNumber: 2,\n        columnNumber: 2,\n      },\n      propertyRuleIssueReason: Protocol.Audits.PropertyRuleIssueReason.InvalidInitialValue,\n      propertyValue: 'invalid',\n    };\n    const issue = createProtocolIssue(issueDetails);\n    const propertyRuleIssues = IssuesManager.PropertyRuleIssue.PropertyRuleIssue.fromInspectorIssue(mockModel, issue);\n    assert.lengthOf(propertyRuleIssues, 1);\n    const propertyRuleIssue = propertyRuleIssues[0];\n\n    assert.strictEqual(propertyRuleIssue.getCategory(), IssuesManager.Issue.IssueCategory.Other);\n    assert.deepStrictEqual(propertyRuleIssue.sources(), [issueDetails.sourceCodeLocation]);\n    assert.strictEqual(propertyRuleIssue.getKind(), IssuesManager.Issue.IssueKind.PageError);\n    assert.isNotNull(propertyRuleIssue.getDescription());\n    assert.strictEqual(propertyRuleIssue.getPropertyName(), 'initial-value');\n  });\n\n  it('only aggregates identical issues', () => {\n    const issueDetails = [\n      {\n        sourceCodeLocation: {\n          url: 'http://example.com',\n          lineNumber: 2,\n          columnNumber: 2,\n        },\n        propertyRuleIssueReason: Protocol.Audits.PropertyRuleIssueReason.InvalidInitialValue,\n        propertyValue: 'invalid',\n      },\n      {\n        sourceCodeLocation: {\n          url: 'http://example.com',\n          lineNumber: 2,\n          columnNumber: 2,\n        },\n        propertyRuleIssueReason: Protocol.Audits.PropertyRuleIssueReason.InvalidInitialValue,\n        propertyValue: 'invalid',\n      },\n      {\n        sourceCodeLocation: {\n          url: 'http://example.com',\n          lineNumber: 2,\n          columnNumber: 2,\n        },\n        propertyRuleIssueReason: Protocol.Audits.PropertyRuleIssueReason.InvalidInherits,\n        propertyValue: 'invalid',\n      },\n      {\n        sourceCodeLocation: {\n          url: 'http://example.com',\n          lineNumber: 3,\n          columnNumber: 2,\n        },\n        propertyRuleIssueReason: Protocol.Audits.PropertyRuleIssueReason.InvalidInitialValue,\n        propertyValue: 'invalid',\n      },\n    ];\n\n    const issues = issueDetails\n                       .map(\n                           details => IssuesManager.PropertyRuleIssue.PropertyRuleIssue.fromInspectorIssue(\n                               mockModel, createProtocolIssue(details)))\n                       .flat();\n\n    assert.lengthOf(issues, 4);\n\n    const aggregator = new Issues.IssueAggregator.IssueAggregator(mockManager);\n    for (const issue of issues) {\n      mockManager.dispatchEventToListeners(\n          IssuesManager.IssuesManager.Events.IssueAdded, {issuesModel: mockModel, issue});\n    }\n\n    const aggregatedIssues = Array.from(aggregator.aggregatedIssues());\n    assert.lengthOf(aggregatedIssues, 3);\n\n    // Use shallow comparison. We thus ensure the correct issues are aggregated:\n    assert.strictEqual(Array.from(aggregatedIssues[0].sources())[0], issueDetails[0].sourceCodeLocation);\n    assert.strictEqual(Array.from(aggregatedIssues[1].sources())[0], issueDetails[2].sourceCodeLocation);\n    assert.strictEqual(Array.from(aggregatedIssues[2].sources())[0], issueDetails[3].sourceCodeLocation);\n  });\n});\n"]}