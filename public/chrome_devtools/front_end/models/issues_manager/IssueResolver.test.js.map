{"version":3,"file":"IssueResolver.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/issues_manager/IssueResolver.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Protocol from '../../generated/protocol.js';\nimport {MockIssuesManager} from '../../testing/MockIssuesManager.js';\nimport {StubIssue} from '../../testing/StubIssue.js';\nimport * as IssuesManager from '../issues_manager/issues_manager.js';\n\ndescribe('IssueResolver', () => {\n  const issueId1 = 'foo' as Protocol.Audits.IssueId;\n\n  describe('tryGet', () => {\n    it('should resolve an existing issue', () => {\n      const mockIssue = StubIssue.createFromIssueId(issueId1);\n      const issuesManager = new MockIssuesManager([mockIssue]) as unknown as IssuesManager.IssuesManager.IssuesManager;\n      const issueResolver = new IssuesManager.IssueResolver.IssueResolver(issuesManager);\n      const issue = issueResolver.tryGet(issueId1, () => {\n        throw new Error('This should not get called');\n      });\n      assert.isFalse(issuesManager.hasEventListeners(IssuesManager.IssuesManager.Events.IssueAdded));\n      assert.strictEqual(issue, mockIssue);\n    });\n\n    it('should not resolve an unknown issue', () => {\n      const issuesManager = new MockIssuesManager([]) as unknown as IssuesManager.IssuesManager.IssuesManager;\n      const issueResolver = new IssuesManager.IssueResolver.IssueResolver(issuesManager);\n      const issue = issueResolver.tryGet(issueId1, () => {\n        throw new Error('This should not get called');\n      });\n      assert.isTrue(issuesManager.hasEventListeners(IssuesManager.IssuesManager.Events.IssueAdded));\n      assert.strictEqual(issue, null);\n      issueResolver.clear();\n    });\n\n    it('should resolve a previously unknown issue when it becomes available', async () => {\n      const mockIssuesManager = new MockIssuesManager([]);\n      const issuesManager = mockIssuesManager as unknown as IssuesManager.IssuesManager.IssuesManager;\n      const issueResolver = new IssuesManager.IssueResolver.IssueResolver(issuesManager);\n      const waitForCall = new Promise<IssuesManager.Issue.Issue>(resolve => {\n        const issue = issueResolver.tryGet(issueId1, resolve);\n        assert.strictEqual(issue, null);\n      });\n      assert.isTrue(issuesManager.hasEventListeners(IssuesManager.IssuesManager.Events.IssueAdded));\n      const mockIssue = StubIssue.createFromIssueId(issueId1);\n      mockIssuesManager.addIssue(mockIssue);\n      const issue = await waitForCall;\n      assert.isFalse(issuesManager.hasEventListeners(IssuesManager.IssuesManager.Events.IssueAdded));\n      assert.strictEqual(issue, mockIssue);\n    });\n  });\n\n  describe('waitFor', () => {\n    it('should resolve an existing issue', async () => {\n      const mockIssue = StubIssue.createFromIssueId(issueId1);\n      const issuesManager = new MockIssuesManager([mockIssue]) as unknown as IssuesManager.IssuesManager.IssuesManager;\n      const issueResolver = new IssuesManager.IssueResolver.IssueResolver(issuesManager);\n      const issue = await issueResolver.waitFor(issueId1);\n      assert.isFalse(issuesManager.hasEventListeners(IssuesManager.IssuesManager.Events.IssueAdded));\n      assert.strictEqual(issue, mockIssue);\n    });\n\n    it('should reject the promise after `clear` has been called', async () => {\n      const issuesManager = new MockIssuesManager([]) as unknown as IssuesManager.IssuesManager.IssuesManager;\n      const issueResolver = new IssuesManager.IssueResolver.IssueResolver(issuesManager);\n      const issue = issueResolver.waitFor(issueId1);\n      assert.isTrue(issuesManager.hasEventListeners(IssuesManager.IssuesManager.Events.IssueAdded));\n      issueResolver.clear();\n      assert.isFalse(issuesManager.hasEventListeners(IssuesManager.IssuesManager.Events.IssueAdded));\n      try {\n        await issue;\n      } catch (e) {\n        return;\n      }\n      assert.fail('Expected `await issue` to throw.');\n    });\n\n    it('should resolve a previously unknown issue when it becomes available', async () => {\n      const mockIssuesManager = new MockIssuesManager([]);\n      const issuesManager = mockIssuesManager as unknown as IssuesManager.IssuesManager.IssuesManager;\n      const issueResolver = new IssuesManager.IssueResolver.IssueResolver(issuesManager);\n      const issuePromise = issueResolver.waitFor(issueId1);\n      assert.isTrue(issuesManager.hasEventListeners(IssuesManager.IssuesManager.Events.IssueAdded));\n      const mockIssue = StubIssue.createFromIssueId(issueId1);\n      mockIssuesManager.addIssue(mockIssue);\n      const issue = await issuePromise;\n      assert.isFalse(issuesManager.hasEventListeners(IssuesManager.IssuesManager.Events.IssueAdded));\n      assert.strictEqual(issue, mockIssue);\n    });\n  });\n});\n"]}