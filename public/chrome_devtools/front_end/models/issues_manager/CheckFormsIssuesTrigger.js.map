{"version":3,"file":"CheckFormsIssuesTrigger.js","sourceRoot":"","sources":["../../../../../../front_end/models/issues_manager/CheckFormsIssuesTrigger.ts"],"names":[],"mappings":"AAKA,OAAO,KAAK,GAAG,MAAM,uBAAuB,CAAC;AAE7C;;GAEG;AACH,8HAA8H;AAC9H,IAAI,+BAA+B,GAAiC,IAAI,CAAC;AACzE,MAAM,OAAO,uBAAuB;IAClC;QACE,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,gBAAgB,CACvD,GAAG,CAAC,iBAAiB,CAAC,iBAAiB,EAAE,GAAG,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,EAClG,EAAC,MAAM,EAAE,IAAI,EAAC,CAAC,CAAC;QAEpB,KAAK,MAAM,KAAK,IAAI,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,EAAE,CAAC;YAC/G,IAAI,KAAK,CAAC,MAAM,EAAE,CAAC,eAAe,EAAE,KAAK,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC;gBACxD,SAAS;YACX,CAAC;YAED,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;QAChC,CAAC;IACH,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,EAAC,QAAQ,KAAyB,EAAC,QAAQ,EAAE,KAAK,EAAC;QACjE,IAAI,CAAC,+BAA+B,IAAI,QAAQ,EAAE,CAAC;YACjD,+BAA+B,GAAG,IAAI,uBAAuB,EAAE,CAAC;QAClE,CAAC;QACD,OAAO,+BAA+B,CAAC;IACzC,CAAC;IAED,4FAA4F;IAC5F,iBAAiB,CAAC,iBAA0D;QAC1E,KAAK,iBAAiB,CAAC,MAAM,EAAE,CAAC,WAAW,EAAE,CAAC,uBAAuB,EAAE,CAAC;IAC1E,CAAC;IAED,WAAW,CAAC,KACqG;QAE/G,MAAM,EAAC,iBAAiB,EAAC,GAAG,KAAK,CAAC,IAAI,CAAC;QACvC,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;IAC5C,CAAC;CACF","sourcesContent":["\n// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport type * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\n\n/**\n * Responsible for asking autofill for current form issues. This currently happens when devtools is first open.\n */\n// TODO(crbug.com/1399414): Trigger check form issues when an element with an associated issue is editted in the issues panel.\nlet checkFormsIssuesTriggerInstance: CheckFormsIssuesTrigger|null = null;\nexport class CheckFormsIssuesTrigger {\n  constructor() {\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.ResourceTreeModel.ResourceTreeModel, SDK.ResourceTreeModel.Events.Load, this.#pageLoaded, this,\n        {scoped: true});\n\n    for (const model of SDK.TargetManager.TargetManager.instance().models(SDK.ResourceTreeModel.ResourceTreeModel)) {\n      if (model.target().outermostTarget() !== model.target()) {\n        continue;\n      }\n\n      this.#checkFormsIssues(model);\n    }\n  }\n\n  static instance({forceNew}: {forceNew: boolean} = {forceNew: false}): CheckFormsIssuesTrigger {\n    if (!checkFormsIssuesTriggerInstance || forceNew) {\n      checkFormsIssuesTriggerInstance = new CheckFormsIssuesTrigger();\n    }\n    return checkFormsIssuesTriggerInstance;\n  }\n\n  // TODO(crbug.com/1399414): Handle response by dropping current issues in favor of new ones.\n  #checkFormsIssues(resourceTreeModel: SDK.ResourceTreeModel.ResourceTreeModel): void {\n    void resourceTreeModel.target().auditsAgent().invoke_checkFormsIssues();\n  }\n\n  #pageLoaded(event: Common.EventTarget\n                  .EventTargetEvent<{resourceTreeModel: SDK.ResourceTreeModel.ResourceTreeModel, loadTime: number}>):\n      void {\n    const {resourceTreeModel} = event.data;\n    this.#checkFormsIssues(resourceTreeModel);\n  }\n}\n"]}