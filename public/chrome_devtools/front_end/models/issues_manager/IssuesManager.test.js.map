{"version":3,"file":"IssuesManager.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/issues_manager/IssuesManager.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport {createFakeSetting, createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection, dispatchEvent} from '../../testing/MockConnection.js';\nimport {activate, getMainFrame, navigate} from '../../testing/ResourceTreeHelpers.js';\nimport {\n  mkInspectorCspIssue,\n  StubIssue,\n  ThirdPartyStubIssue,\n} from '../../testing/StubIssue.js';\nimport * as IssuesManager from '../issues_manager/issues_manager.js';\n\ndescribeWithMockConnection('IssuesManager', () => {\n  let target: SDK.Target.Target;\n  let model: SDK.IssuesModel.IssuesModel;\n\n  beforeEach(() => {\n    target = createTarget();\n    const maybeModel = target.model(SDK.IssuesModel.IssuesModel);\n    assert.exists(maybeModel);\n    model = maybeModel;\n  });\n\n  it('collects issues from an issues model', () => {\n    const issuesManager = new IssuesManager.IssuesManager.IssuesManager();\n\n    const dispatchedIssues: IssuesManager.Issue.Issue[] = [];\n    issuesManager.addEventListener(\n        IssuesManager.IssuesManager.Events.IssueAdded, event => dispatchedIssues.push(event.data.issue));\n\n    model.dispatchEventToListeners(\n        SDK.IssuesModel.Events.IssueAdded, {issuesModel: model, inspectorIssue: mkInspectorCspIssue('url1')});\n    model.dispatchEventToListeners(\n        SDK.IssuesModel.Events.IssueAdded, {issuesModel: model, inspectorIssue: mkInspectorCspIssue('url2')});\n\n    const expected = ['ContentSecurityPolicyIssue::kURLViolation', 'ContentSecurityPolicyIssue::kURLViolation'];\n    assert.deepStrictEqual(dispatchedIssues.map(i => i.code()), expected);\n\n    const issueCodes = Array.from(issuesManager.issues()).map(r => r.code());\n    assert.deepStrictEqual(issueCodes, expected);\n  });\n\n  function getBlockedUrl(issue: IssuesManager.Issue.Issue): string|undefined {\n    const cspIssue = issue as IssuesManager.ContentSecurityPolicyIssue.ContentSecurityPolicyIssue;\n    return cspIssue.details().blockedURL;\n  }\n\n  function assertOutOfScopeIssuesAreFiltered():\n      {issuesManager: IssuesManager.IssuesManager.IssuesManager, prerenderTarget: SDK.Target.Target} {\n    const issuesManager = new IssuesManager.IssuesManager.IssuesManager();\n\n    const dispatchedIssues: IssuesManager.Issue.Issue[] = [];\n    issuesManager.addEventListener(\n        IssuesManager.IssuesManager.Events.IssueAdded, event => dispatchedIssues.push(event.data.issue));\n\n    model.dispatchEventToListeners(\n        SDK.IssuesModel.Events.IssueAdded, {issuesModel: model, inspectorIssue: mkInspectorCspIssue('url1')});\n    const prerenderTarget = createTarget({subtype: 'prerender'});\n    const prerenderModel = prerenderTarget.model(SDK.IssuesModel.IssuesModel);\n    assert.exists(prerenderModel);\n    prerenderModel.dispatchEventToListeners(\n        SDK.IssuesModel.Events.IssueAdded, {issuesModel: prerenderModel, inspectorIssue: mkInspectorCspIssue('url2')});\n\n    const expected = ['url1'];\n    assert.deepStrictEqual(dispatchedIssues.map(getBlockedUrl), expected);\n\n    assert.deepStrictEqual(Array.from(issuesManager.issues()).map(getBlockedUrl), expected);\n    return {issuesManager, prerenderTarget};\n  }\n\n  it('updates filtered issues when switching scope', () => {\n    const {issuesManager, prerenderTarget} = assertOutOfScopeIssuesAreFiltered();\n\n    SDK.TargetManager.TargetManager.instance().setScopeTarget(prerenderTarget);\n    assert.deepStrictEqual(Array.from(issuesManager.issues()).map(getBlockedUrl), ['url2']);\n  });\n\n  it('keeps issues of prerendered page upon activation', () => {\n    const {issuesManager, prerenderTarget} = assertOutOfScopeIssuesAreFiltered();\n\n    SDK.TargetManager.TargetManager.instance().setScopeTarget(prerenderTarget);\n    activate(prerenderTarget);\n    assert.deepStrictEqual(Array.from(issuesManager.issues()).map(getBlockedUrl), ['url2']);\n  });\n\n  const updatesOnPrimaryPageChange = (primary: boolean) => () => {\n    const issuesManager = new IssuesManager.IssuesManager.IssuesManager();\n\n    model.dispatchEventToListeners(\n        SDK.IssuesModel.Events.IssueAdded, {issuesModel: model, inspectorIssue: mkInspectorCspIssue('url1')});\n    assert.strictEqual(issuesManager.numberOfIssues(), 1);\n\n    navigate(getMainFrame(primary ? target : createTarget({subtype: 'prerender'})));\n    assert.strictEqual(issuesManager.numberOfIssues(), primary ? 0 : 1);\n  };\n\n  it('clears issues after primary page navigation', updatesOnPrimaryPageChange(true));\n  it('does not clear issues after non-primary page navigation', updatesOnPrimaryPageChange(false));\n\n  it('filters third-party issues when the third-party issues setting is false, includes them otherwise', () => {\n    const issues = [\n      new ThirdPartyStubIssue('AllowedStubIssue1', false),\n      new ThirdPartyStubIssue('StubIssue2', true),\n      new ThirdPartyStubIssue('AllowedStubIssue3', false),\n      new ThirdPartyStubIssue('StubIssue4', true),\n    ];\n\n    const showThirdPartyIssuesSetting = createFakeSetting('third party flag', false);\n    const issuesManager = new IssuesManager.IssuesManager.IssuesManager(showThirdPartyIssuesSetting);\n\n    const firedIssueAddedEventCodes: string[] = [];\n    issuesManager.addEventListener(\n        IssuesManager.IssuesManager.Events.IssueAdded,\n        event => firedIssueAddedEventCodes.push(event.data.issue.code()));\n\n    for (const issue of issues) {\n      issuesManager.addIssue(model, issue);\n    }\n\n    let issueCodes = Array.from(issuesManager.issues()).map(i => i.code());\n    assert.deepStrictEqual(issueCodes, ['AllowedStubIssue1', 'AllowedStubIssue3']);\n    assert.deepStrictEqual(firedIssueAddedEventCodes, ['AllowedStubIssue1', 'AllowedStubIssue3']);\n\n    showThirdPartyIssuesSetting.set(true);\n\n    issueCodes = Array.from(issuesManager.issues()).map(i => i.code());\n    assert.deepStrictEqual(issueCodes, ['AllowedStubIssue1', 'StubIssue2', 'AllowedStubIssue3', 'StubIssue4']);\n  });\n\n  it('reports issue counts by kind', () => {\n    const issue1 = new StubIssue('StubIssue1', ['id1'], [], IssuesManager.Issue.IssueKind.Improvement);\n    const issue2 = new StubIssue('StubIssue1', ['id2'], [], IssuesManager.Issue.IssueKind.Improvement);\n    const issue3 = new StubIssue('StubIssue1', ['id3'], [], IssuesManager.Issue.IssueKind.BreakingChange);\n\n    const issuesManager = new IssuesManager.IssuesManager.IssuesManager();\n\n    issuesManager.addIssue(model, issue1);\n    issuesManager.addIssue(model, issue2);\n    issuesManager.addIssue(model, issue3);\n\n    assert.deepStrictEqual(issuesManager.numberOfIssues(), 3);\n    assert.deepStrictEqual(issuesManager.numberOfIssues(IssuesManager.Issue.IssueKind.Improvement), 2);\n    assert.deepStrictEqual(issuesManager.numberOfIssues(IssuesManager.Issue.IssueKind.BreakingChange), 1);\n    assert.deepStrictEqual(issuesManager.numberOfIssues(IssuesManager.Issue.IssueKind.PageError), 0);\n  });\n\n  describe('instance', () => {\n    it('throws an Error if its not the first instance created with \"ensureFirst\" set', () => {\n      IssuesManager.IssuesManager.IssuesManager.instance();\n\n      assert.throws(() => IssuesManager.IssuesManager.IssuesManager.instance({forceNew: true, ensureFirst: true}));\n      assert.throws(() => IssuesManager.IssuesManager.IssuesManager.instance({forceNew: false, ensureFirst: true}));\n    });\n  });\n\n  it('hides issues added after setting has been initialised', () => {\n    const issues = [\n      new StubIssue('HiddenStubIssue1', [], []),\n      new StubIssue('HiddenStubIssue2', [], []),\n      new StubIssue('UnhiddenStubIssue1', [], []),\n      new StubIssue('UnhiddenStubIssue2', [], []),\n    ];\n    const hideIssueByCodeSetting =\n        createFakeSetting('hide by code', ({} as IssuesManager.IssuesManager.HideIssueMenuSetting));\n    const showThirdPartyIssuesSetting = createFakeSetting('third party flag', true);\n    const issuesManager =\n        new IssuesManager.IssuesManager.IssuesManager(showThirdPartyIssuesSetting, hideIssueByCodeSetting);\n\n    const hiddenIssues: string[] = [];\n    issuesManager.addEventListener(IssuesManager.IssuesManager.Events.IssueAdded, event => {\n      if (event.data.issue.isHidden()) {\n        hiddenIssues.push(event.data.issue.code());\n      }\n    });\n    // This Setting can either have been initialised in a previous Devtools session and retained\n    // through to a new session.\n    // OR\n    // These settings have been updated by clicking on \"hide issue\" and cause the updateHiddenIssues\n    // method to be called. These issues are being added to the IssuesManager after this has happened.\n    hideIssueByCodeSetting.set({\n      'HiddenStubIssue1': IssuesManager.IssuesManager.IssueStatus.Hidden,\n      'HiddenStubIssue2': IssuesManager.IssuesManager.IssueStatus.Hidden,\n    });\n\n    for (const issue of issues) {\n      issuesManager.addIssue(model, issue);\n    }\n\n    assert.deepStrictEqual(hiddenIssues, ['HiddenStubIssue1', 'HiddenStubIssue2']);\n  });\n\n  it('hides issues present in IssuesManager when setting is updated', () => {\n    const issues = [\n      new StubIssue('HiddenStubIssue1', [], []),\n      new StubIssue('HiddenStubIssue2', [], []),\n      new StubIssue('UnhiddenStubIssue1', [], []),\n      new StubIssue('UnhiddenStubIssue2', [], []),\n    ];\n    const hideIssueByCodeSetting =\n        createFakeSetting('hide by code', ({} as IssuesManager.IssuesManager.HideIssueMenuSetting));\n    const showThirdPartyIssuesSetting = createFakeSetting('third party flag', true);\n    const issuesManager =\n        new IssuesManager.IssuesManager.IssuesManager(showThirdPartyIssuesSetting, hideIssueByCodeSetting);\n\n    let hiddenIssues: string[] = [];\n    issuesManager.addEventListener(IssuesManager.IssuesManager.Events.FullUpdateRequired, () => {\n      hiddenIssues = [];\n      for (const issue of issuesManager.issues()) {\n        if (issue.isHidden()) {\n          hiddenIssues.push(issue.code());\n        }\n      }\n    });\n    for (const issue of issues) {\n      issuesManager.addIssue(model, issue);\n    }\n    // Setting is updated by clicking on \"hide issue\".\n    hideIssueByCodeSetting.set({\n      'HiddenStubIssue1': IssuesManager.IssuesManager.IssueStatus.Hidden,\n    });\n    assert.deepStrictEqual(hiddenIssues, ['HiddenStubIssue1']);\n\n    hideIssueByCodeSetting.set({\n      'HiddenStubIssue1': IssuesManager.IssuesManager.IssueStatus.Hidden,\n      'HiddenStubIssue2': IssuesManager.IssuesManager.IssueStatus.Hidden,\n    });\n    assert.deepStrictEqual(hiddenIssues, ['HiddenStubIssue1', 'HiddenStubIssue2']);\n  });\n\n  it('unhides issues present in IssuesManager when setting is updated', () => {\n    const issues = [\n      new StubIssue('HiddenStubIssue1', [], []),\n      new StubIssue('HiddenStubIssue2', [], []),\n      new StubIssue('UnhiddenStubIssue1', [], []),\n      new StubIssue('UnhiddenStubIssue2', [], []),\n    ];\n    const hideIssueByCodeSetting =\n        createFakeSetting('hide by code', ({} as IssuesManager.IssuesManager.HideIssueMenuSetting));\n    const showThirdPartyIssuesSetting = createFakeSetting('third party flag', true);\n    const issuesManager =\n        new IssuesManager.IssuesManager.IssuesManager(showThirdPartyIssuesSetting, hideIssueByCodeSetting);\n    for (const issue of issues) {\n      issuesManager.addIssue(model, issue);\n    }\n    hideIssueByCodeSetting.set({\n      'HiddenStubIssue1': IssuesManager.IssuesManager.IssueStatus.Hidden,\n      'HiddenStubIssue2': IssuesManager.IssuesManager.IssueStatus.Hidden,\n      'UnhiddenStubIssue1': IssuesManager.IssuesManager.IssueStatus.Hidden,\n      'UnhiddenStubIssue2': IssuesManager.IssuesManager.IssueStatus.Hidden,\n    });\n    let unhiddenIssues: string[] = [];\n    issuesManager.addEventListener(IssuesManager.IssuesManager.Events.FullUpdateRequired, () => {\n      unhiddenIssues = [];\n      for (const issue of issuesManager.issues()) {\n        if (!issue.isHidden()) {\n          unhiddenIssues.push(issue.code());\n        }\n      }\n    });\n\n    // Setting updated by clicking on \"unhide issue\"\n    hideIssueByCodeSetting.set({\n      'HiddenStubIssue1': IssuesManager.IssuesManager.IssueStatus.Hidden,\n      'HiddenStubIssue2': IssuesManager.IssuesManager.IssueStatus.Hidden,\n      'UnhiddenStubIssue1': IssuesManager.IssuesManager.IssueStatus.Unhidden,\n      'UnhiddenStubIssue2': IssuesManager.IssuesManager.IssueStatus.Hidden,\n    });\n    assert.deepStrictEqual(unhiddenIssues, ['UnhiddenStubIssue1']);\n\n    hideIssueByCodeSetting.set({\n      'HiddenStubIssue1': IssuesManager.IssuesManager.IssueStatus.Hidden,\n      'HiddenStubIssue2': IssuesManager.IssuesManager.IssueStatus.Hidden,\n      'UnhiddenStubIssue1': IssuesManager.IssuesManager.IssueStatus.Unhidden,\n      'UnhiddenStubIssue2': IssuesManager.IssuesManager.IssueStatus.Unhidden,\n    });\n    assert.deepStrictEqual(unhiddenIssues, ['UnhiddenStubIssue1', 'UnhiddenStubIssue2']);\n  });\n\n  it('unhides all issues correctly', () => {\n    const issues = [\n      new StubIssue('HiddenStubIssue1', [], []),\n      new StubIssue('HiddenStubIssue2', [], []),\n      new StubIssue('UnhiddenStubIssue1', [], []),\n      new StubIssue('UnhiddenStubIssue2', [], []),\n    ];\n    const hideIssueByCodeSetting =\n        createFakeSetting('hide by code', ({} as IssuesManager.IssuesManager.HideIssueMenuSetting));\n    const showThirdPartyIssuesSetting = createFakeSetting('third party flag', true);\n    const issuesManager =\n        new IssuesManager.IssuesManager.IssuesManager(showThirdPartyIssuesSetting, hideIssueByCodeSetting);\n    for (const issue of issues) {\n      issuesManager.addIssue(model, issue);\n    }\n    hideIssueByCodeSetting.set({\n      'HiddenStubIssue1': IssuesManager.IssuesManager.IssueStatus.Hidden,\n      'HiddenStubIssue2': IssuesManager.IssuesManager.IssueStatus.Hidden,\n      'UnhiddenStubIssue1': IssuesManager.IssuesManager.IssueStatus.Hidden,\n      'UnhiddenStubIssue2': IssuesManager.IssuesManager.IssueStatus.Hidden,\n    });\n    let unhiddenIssues: string[] = [];\n    issuesManager.addEventListener(IssuesManager.IssuesManager.Events.FullUpdateRequired, () => {\n      unhiddenIssues = [];\n      for (const issue of issuesManager.issues()) {\n        if (!issue.isHidden()) {\n          unhiddenIssues.push(issue.code());\n        }\n      }\n    });\n    issuesManager.unhideAllIssues();\n    assert.deepStrictEqual(\n        unhiddenIssues, ['HiddenStubIssue1', 'HiddenStubIssue2', 'UnhiddenStubIssue1', 'UnhiddenStubIssue2']);\n  });\n\n  it('send update event on scope change', async () => {\n    const issuesManager = new IssuesManager.IssuesManager.IssuesManager();\n\n    const updateRequired = issuesManager.once(IssuesManager.IssuesManager.Events.FullUpdateRequired);\n    const anotherTarget = createTarget();\n    SDK.TargetManager.TargetManager.instance().setScopeTarget(anotherTarget);\n    await updateRequired;\n  });\n\n  it('clears BounceTrackingIssue only on user-initiated navigation', () => {\n    const issuesManager = new IssuesManager.IssuesManager.IssuesManager();\n    const issue = {\n      code: Protocol.Audits.InspectorIssueCode.BounceTrackingIssue,\n      details: {\n        bounceTrackingIssueDetails: {\n          trackingSites: ['example_1.test'],\n        },\n      },\n    };\n\n    model.dispatchEventToListeners(SDK.IssuesModel.Events.IssueAdded, {issuesModel: model, inspectorIssue: issue});\n    assert.strictEqual(issuesManager.numberOfIssues(), 1);\n\n    dispatchEvent(target, 'Network.requestWillBeSent', {\n      requestId: 'requestId1',\n      loaderId: 'loaderId1',\n      request: {url: 'http://example.com'},\n      hasUserGesture: false,\n    } as unknown as Protocol.Network.RequestWillBeSentEvent);\n    const frame = getMainFrame(target);\n    navigate(frame, {loaderId: 'loaderId1' as Protocol.Network.LoaderId});\n    assert.strictEqual(issuesManager.numberOfIssues(), 1);\n\n    dispatchEvent(target, 'Network.requestWillBeSent', {\n      requestId: 'requestId2',\n      loaderId: 'loaderId2',\n      request: {url: 'http://example.com/page'},\n      hasUserGesture: true,\n    } as unknown as Protocol.Network.RequestWillBeSentEvent);\n    navigate(frame, {loaderId: 'loaderId2' as Protocol.Network.LoaderId});\n    assert.strictEqual(issuesManager.numberOfIssues(), 0);\n  });\n});\n"]}