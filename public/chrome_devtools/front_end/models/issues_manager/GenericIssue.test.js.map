{"version":3,"file":"GenericIssue.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/issues_manager/GenericIssue.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport {describeWithLocale} from '../../testing/EnvironmentHelpers.js';\nimport {MockIssuesModel} from '../../testing/MockIssuesModel.js';\nimport * as IssuesManager from '../issues_manager/issues_manager.js';\n\ndescribeWithLocale('GenericIssue', () => {\n  const mockModel = new MockIssuesModel([]) as unknown as SDK.IssuesModel.IssuesModel;\n\n  function createProtocolIssueWithoutDetails(): Protocol.Audits.InspectorIssue {\n    return {\n      code: Protocol.Audits.InspectorIssueCode.GenericIssue,\n      details: {},\n    };\n  }\n\n  function createProtocolIssueWithDetails(genericIssueDetails: Protocol.Audits.GenericIssueDetails):\n      Protocol.Audits.InspectorIssue {\n    return {\n      code: Protocol.Audits.InspectorIssueCode.GenericIssue,\n      details: {genericIssueDetails},\n    };\n  }\n\n  beforeEach(() => {\n    // The component warns if not provided with an issue that has details, but\n    // we don't need that noise in the test output.\n    sinon.stub(console, 'warn');\n  });\n\n  // TODO(crbug/1399414): Make this test reflect reality, cross origin errors do not have a violating node.\n  it('adds a cross origin portal post message issue with valid details', () => {\n    const issueDetails = {\n      errorType: Protocol.Audits.GenericIssueErrorType.CrossOriginPortalPostMessageError,\n      frameId: 'main' as Protocol.Page.FrameId,\n      violatingNodeId: 1 as Protocol.DOM.BackendNodeId,\n      violatingNodeAttribute: 'attribute',\n    };\n    const issue = createProtocolIssueWithDetails(issueDetails);\n\n    const genericIssues = IssuesManager.GenericIssue.GenericIssue.fromInspectorIssue(mockModel, issue);\n    assert.strictEqual(genericIssues.length, 1);\n    const genericIssue = genericIssues[0];\n\n    assert.strictEqual(genericIssue.getCategory(), IssuesManager.Issue.IssueCategory.Generic);\n    assert.strictEqual(\n        genericIssue.primaryKey(),\n        `GenericIssue::CrossOriginPortalPostMessageError-(${\n        'main' as Protocol.Page.FrameId})-(1)-(attribute)-(no-request)`);\n    assert.strictEqual(genericIssue.getKind(), IssuesManager.Issue.IssueKind.Improvement);\n    assert.isNotNull(genericIssue.getDescription());\n  });\n\n  it('adds a cross origin portal post message issue without details', () => {\n    const inspectorIssueWithoutGenericDetails = createProtocolIssueWithoutDetails();\n    const genericIssues =\n        IssuesManager.GenericIssue.GenericIssue.fromInspectorIssue(mockModel, inspectorIssueWithoutGenericDetails);\n\n    assert.isEmpty(genericIssues);\n  });\n\n  it('adds a CORB/ORB issue with valid details', () => {\n    const issueDetails = {\n      errorType: Protocol.Audits.GenericIssueErrorType.ResponseWasBlockedByORB,\n      request: {requestId: 'blabla'} as Protocol.Audits.AffectedRequest,\n    };\n    const issue = createProtocolIssueWithDetails(issueDetails);\n\n    const genericIssues = IssuesManager.GenericIssue.GenericIssue.fromInspectorIssue(mockModel, issue);\n    assert.strictEqual(genericIssues.length, 1);\n    const genericIssue = genericIssues[0];\n\n    assert.strictEqual(genericIssue.getCategory(), IssuesManager.Issue.IssueCategory.Generic);\n    assert.strictEqual(\n        genericIssue.primaryKey(),\n        'GenericIssue::ResponseWasBlockedByORB-(undefined)-(undefined)-(undefined)-(blabla)');\n    assert.strictEqual(genericIssue.getKind(), IssuesManager.Issue.IssueKind.Improvement);\n    assert.isNotNull(genericIssue.getDescription());\n  });\n});\n"]}