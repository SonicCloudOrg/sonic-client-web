{"version":3,"file":"RequestResolver.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/logs/RequestResolver.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport {createNetworkRequest, MockNetworkLog} from '../../testing/MockNetworkLog.js';\nimport * as Logs from '../logs/logs.js';\n\ndescribe('RequestResolver', () => {\n  const requestId1 = 'foo' as Protocol.Network.RequestId;\n\n  describe('tryGet', () => {\n    it('should resolve an existing request', () => {\n      const mockRequest = createNetworkRequest(requestId1);\n      const networkLog = new MockNetworkLog([mockRequest]) as unknown as Logs.NetworkLog.NetworkLog;\n      const requestResolver = new Logs.RequestResolver.RequestResolver(networkLog);\n      const request = requestResolver.tryGet(requestId1, () => {\n        throw new Error('This should not get called');\n      });\n      assert.isFalse(networkLog.hasEventListeners(Logs.NetworkLog.Events.RequestAdded));\n      assert.strictEqual(request, mockRequest);\n    });\n\n    it('should not resolve an unknown request', () => {\n      const networkLog = new MockNetworkLog([]) as unknown as Logs.NetworkLog.NetworkLog;\n      const requestResolver = new Logs.RequestResolver.RequestResolver(networkLog);\n      const request = requestResolver.tryGet(requestId1, () => {\n        throw new Error('This should not get called');\n      });\n      assert.isTrue(networkLog.hasEventListeners(Logs.NetworkLog.Events.RequestAdded));\n      assert.strictEqual(request, null);\n      requestResolver.clear();\n    });\n\n    it('should resolve a previously unknown request when it becomes available', async () => {\n      const mockNetworkLog = new MockNetworkLog([]);\n      const networkLog = mockNetworkLog as unknown as Logs.NetworkLog.NetworkLog;\n      const requestResolver = new Logs.RequestResolver.RequestResolver(networkLog);\n      const waitForCall = new Promise<SDK.NetworkRequest.NetworkRequest>(resolve => {\n        const request = requestResolver.tryGet(requestId1, resolve);\n        assert.strictEqual(request, null);\n      });\n      assert.isTrue(networkLog.hasEventListeners(Logs.NetworkLog.Events.RequestAdded));\n      const mockRequest = createNetworkRequest(requestId1);\n      mockNetworkLog.addRequest(mockRequest);\n      const request = await waitForCall;\n      assert.isFalse(networkLog.hasEventListeners(Logs.NetworkLog.Events.RequestAdded));\n      assert.strictEqual(request, mockRequest);\n      requestResolver.clear();\n    });\n  });\n\n  describe('waitFor', () => {\n    it('should resolve an existing request', async () => {\n      const mockRequest = createNetworkRequest(requestId1);\n      const networkLog = new MockNetworkLog([mockRequest]) as unknown as Logs.NetworkLog.NetworkLog;\n      const requestResolver = new Logs.RequestResolver.RequestResolver(networkLog);\n      const request = await requestResolver.waitFor(requestId1);\n      assert.isFalse(networkLog.hasEventListeners(Logs.NetworkLog.Events.RequestAdded));\n      assert.strictEqual(request, mockRequest);\n    });\n\n    it('should reject the promise after `clear` has been called', async () => {\n      const networkLog = new MockNetworkLog([]) as unknown as Logs.NetworkLog.NetworkLog;\n      const requestResolver = new Logs.RequestResolver.RequestResolver(networkLog);\n      const request = requestResolver.waitFor(requestId1);\n      assert.isTrue(networkLog.hasEventListeners(Logs.NetworkLog.Events.RequestAdded));\n      requestResolver.clear();\n      assert.isFalse(networkLog.hasEventListeners(Logs.NetworkLog.Events.RequestAdded));\n      try {\n        await request;\n      } catch (e) {\n        return;\n      }\n      assert.fail('Expected `await request` to throw.');\n    });\n\n    it('should resolve a previously unknown request when it becomes available', async () => {\n      const mockNetworkLog = new MockNetworkLog([]);\n      const networkLog = mockNetworkLog as unknown as Logs.NetworkLog.NetworkLog;\n      const requestResolver = new Logs.RequestResolver.RequestResolver(networkLog);\n      const requestPromise = requestResolver.waitFor(requestId1);\n      assert.isTrue(networkLog.hasEventListeners(Logs.NetworkLog.Events.RequestAdded));\n      const mockRequest = createNetworkRequest(requestId1);\n      mockNetworkLog.addRequest(mockRequest);\n      const request = await requestPromise;\n      assert.isFalse(networkLog.hasEventListeners(Logs.NetworkLog.Events.RequestAdded));\n      assert.strictEqual(request, mockRequest);\n    });\n  });\n});\n"]}