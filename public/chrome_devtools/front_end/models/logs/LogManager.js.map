{"version":3,"file":"LogManager.js","sourceRoot":"","sources":["../../../../../../front_end/models/logs/LogManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nimport {NetworkLog} from './NetworkLog.js';\n\nconst modelToEventListeners = new WeakMap<SDK.LogModel.LogModel, Common.EventTarget.EventDescriptor[]>();\n\nlet instance: LogManager|null = null;\n\nexport class LogManager implements SDK.TargetManager.SDKModelObserver<SDK.LogModel.LogModel> {\n  private constructor() {\n    SDK.TargetManager.TargetManager.instance().observeModels(SDK.LogModel.LogModel, this);\n  }\n\n  static instance({forceNew}: {forceNew: boolean} = {forceNew: false}): LogManager {\n    if (!instance || forceNew) {\n      instance = new LogManager();\n    }\n\n    return instance;\n  }\n\n  modelAdded(logModel: SDK.LogModel.LogModel): void {\n    const eventListeners = [];\n    eventListeners.push(logModel.addEventListener(SDK.LogModel.Events.EntryAdded, this.logEntryAdded, this));\n    modelToEventListeners.set(logModel, eventListeners);\n  }\n\n  modelRemoved(logModel: SDK.LogModel.LogModel): void {\n    const eventListeners = modelToEventListeners.get(logModel);\n    if (eventListeners) {\n      Common.EventTarget.removeEventListeners(eventListeners);\n    }\n  }\n\n  private logEntryAdded(event: Common.EventTarget.EventTargetEvent<SDK.LogModel.EntryAddedEvent>): void {\n    const {logModel, entry} = event.data;\n    const target = logModel.target();\n    const details = {\n      url: entry.url as Platform.DevToolsPath.UrlString,\n      line: entry.lineNumber,\n      parameters: [entry.text, ...(entry.args ?? [])],\n      stackTrace: entry.stackTrace,\n      timestamp: entry.timestamp,\n      workerId: entry.workerId,\n      category: entry.category,\n      affectedResources: entry.networkRequestId ? {requestId: entry.networkRequestId} : undefined,\n    };\n    const consoleMessage = new SDK.ConsoleModel.ConsoleMessage(\n        target.model(SDK.RuntimeModel.RuntimeModel), entry.source, entry.level, entry.text, details);\n\n    if (entry.networkRequestId) {\n      NetworkLog.instance().associateConsoleMessageWithRequest(consoleMessage, entry.networkRequestId);\n    }\n\n    const consoleModel = target.model(SDK.ConsoleModel.ConsoleModel);\n    if (consoleMessage.source === Protocol.Log.LogEntrySource.Worker) {\n      const workerId = consoleMessage.workerId || '';\n      // We have a copy of worker messages reported through the page, so that\n      // user can see messages from the worker which has been already destroyed.\n      // When opening DevTools, give us some time to connect to the worker and\n      // not report the message twice if the worker is still alive.\n      if (SDK.TargetManager.TargetManager.instance().targetById(workerId)) {\n        return;\n      }\n      window.setTimeout(() => {\n        if (!SDK.TargetManager.TargetManager.instance().targetById(workerId)) {\n          consoleModel?.addMessage(consoleMessage);\n        }\n      }, 1000);\n    } else {\n      consoleModel?.addMessage(consoleMessage);\n    }\n  }\n}\n"]}