{"version":3,"file":"NetworkLog.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/logs/NetworkLog.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\nimport {activate, getMainFrame, LOADER_ID, navigate} from '../../testing/ResourceTreeHelpers.js';\nimport * as Logs from '../logs/logs.js';\n\nfunction url(input: string): Platform.DevToolsPath.UrlString {\n  return input as unknown as Platform.DevToolsPath.UrlString;\n}\n\ndescribe('NetworkLog', () => {\n  describe('initiatorInfoForRequest', () => {\n    const {initiatorInfoForRequest} = Logs.NetworkLog.NetworkLog;\n\n    it('uses the passed in initiator info if it exists', () => {\n      const request = {\n        initiator() {\n          return null;\n        },\n        redirectSource() {\n          return null;\n        },\n      } as unknown as SDK.NetworkRequest.NetworkRequest;\n      const existingInfo: Logs.NetworkLog.InitiatorData = {\n        info: null,\n        chain: null,\n        request: undefined,\n      };\n      const info = initiatorInfoForRequest(request, existingInfo);\n      assert.deepEqual(info, {\n        type: SDK.NetworkRequest.InitiatorType.Other,\n        url: Platform.DevToolsPath.EmptyUrlString,\n        lineNumber: undefined,\n        columnNumber: undefined,\n        scriptId: null,\n        stack: null,\n        initiatorRequest: null,\n      });\n      assert.deepEqual(info, existingInfo.info);\n    });\n\n    it('returns \"other\" if there is no initiator or redirect', () => {\n      const request = {\n        initiator() {\n          return null;\n        },\n        redirectSource() {\n          return null;\n        },\n      } as unknown as SDK.NetworkRequest.NetworkRequest;\n      const info = initiatorInfoForRequest(request);\n      assert.deepEqual(info, {\n        type: SDK.NetworkRequest.InitiatorType.Other,\n        url: Platform.DevToolsPath.EmptyUrlString,\n        lineNumber: undefined,\n        columnNumber: undefined,\n        scriptId: null,\n        stack: null,\n        initiatorRequest: null,\n      });\n    });\n\n    it('returns the redirect info if the request has a redirect', () => {\n      const request = {\n        initiator() {\n          return null;\n        },\n        redirectSource() {\n          return {\n            url() {\n              return url('http://localhost:3000/example.js');\n            },\n          } as unknown as SDK.NetworkRequest.NetworkRequest;\n        },\n      } as unknown as SDK.NetworkRequest.NetworkRequest;\n      const info = initiatorInfoForRequest(request);\n      assert.deepEqual(info, {\n        type: SDK.NetworkRequest.InitiatorType.Redirect,\n        url: url('http://localhost:3000/example.js'),\n        lineNumber: undefined,\n        columnNumber: undefined,\n        scriptId: null,\n        stack: null,\n        initiatorRequest: null,\n      });\n    });\n\n    it('returns the initiator info if the initiator is the parser', () => {\n      const request = {\n        initiator() {\n          return {\n            type: Protocol.Network.InitiatorType.Parser,\n            url: url('http://localhost:3000/example.js'),\n            lineNumber: 5,\n            columnNumber: 6,\n          } as unknown as Protocol.Network.Initiator;\n        },\n        redirectSource() {\n          return null;\n        },\n      } as unknown as SDK.NetworkRequest.NetworkRequest;\n      const info = initiatorInfoForRequest(request);\n      assert.deepEqual(info, {\n        type: SDK.NetworkRequest.InitiatorType.Parser,\n        url: url('http://localhost:3000/example.js'),\n        lineNumber: 5,\n        columnNumber: 6,\n        scriptId: null,\n        stack: null,\n        initiatorRequest: null,\n      });\n    });\n\n    it('returns the initiator info if the initiator is a script with a stack', () => {\n      const request = {\n        initiator() {\n          return {\n            type: Protocol.Network.InitiatorType.Script,\n            url: url('http://localhost:3000/example.js'),\n            stack: {\n              callFrames: [{\n                functionName: 'foo',\n                url: url('http://localhost:3000/example.js'),\n                scriptId: 'script-id-1' as Protocol.Runtime.ScriptId,\n                lineNumber: 5,\n                columnNumber: 6,\n              }],\n            },\n          } as unknown as Protocol.Network.Initiator;\n        },\n        redirectSource() {\n          return null;\n        },\n      } as unknown as SDK.NetworkRequest.NetworkRequest;\n      const info = initiatorInfoForRequest(request);\n      assert.deepEqual(info, {\n        type: SDK.NetworkRequest.InitiatorType.Script,\n        url: url('http://localhost:3000/example.js'),\n        lineNumber: 5,\n        columnNumber: 6,\n        scriptId: 'script-id-1' as Protocol.Runtime.ScriptId,\n        stack: {\n          callFrames: [{\n            functionName: 'foo',\n            url: url('http://localhost:3000/example.js'),\n            scriptId: 'script-id-1' as Protocol.Runtime.ScriptId,\n            lineNumber: 5,\n            columnNumber: 6,\n          }],\n        },\n        initiatorRequest: null,\n      });\n    });\n\n    it('deals with a nested stack and finds the top frame to use for the script-id', () => {\n      const request = {\n        initiator() {\n          return {\n            type: Protocol.Network.InitiatorType.Script,\n            url: url('http://localhost:3000/example.js'),\n            stack: {\n              parent: {\n                callFrames: [{\n                  functionName: 'foo',\n                  url: url('http://localhost:3000/example.js'),\n                  scriptId: 'script-id-1' as Protocol.Runtime.ScriptId,\n                  lineNumber: 5,\n                  columnNumber: 6,\n                }],\n              },\n              callFrames: [],\n            },\n          } as unknown as Protocol.Network.Initiator;\n        },\n        redirectSource() {\n          return null;\n        },\n      } as unknown as SDK.NetworkRequest.NetworkRequest;\n      const info = initiatorInfoForRequest(request);\n      assert.deepEqual(info, {\n        type: SDK.NetworkRequest.InitiatorType.Script,\n        url: url('http://localhost:3000/example.js'),\n        lineNumber: 5,\n        columnNumber: 6,\n        scriptId: 'script-id-1' as Protocol.Runtime.ScriptId,\n        stack: null,\n        initiatorRequest: null,\n      });\n    });\n\n    it('returns the initiator info if the initiator is a script without a stack', () => {\n      const request = {\n        initiator() {\n          return {\n            type: Protocol.Network.InitiatorType.Script,\n            url: url('http://localhost:3000/example.js'),\n          } as unknown as Protocol.Network.Initiator;\n        },\n        redirectSource() {\n          return null;\n        },\n      } as unknown as SDK.NetworkRequest.NetworkRequest;\n      const info = initiatorInfoForRequest(request);\n      assert.deepEqual(info, {\n        type: SDK.NetworkRequest.InitiatorType.Script,\n        url: url('http://localhost:3000/example.js'),\n        lineNumber: undefined,\n        columnNumber: undefined,\n        scriptId: null,\n        stack: null,\n        initiatorRequest: null,\n      });\n    });\n\n    it('returns the info for a Preload request', () => {\n      const request = {\n        initiator() {\n          return {\n            type: Protocol.Network.InitiatorType.Preload,\n          } as unknown as Protocol.Network.Initiator;\n        },\n        redirectSource() {\n          return null;\n        },\n      } as unknown as SDK.NetworkRequest.NetworkRequest;\n      const info = initiatorInfoForRequest(request);\n      assert.deepEqual(info, {\n        type: SDK.NetworkRequest.InitiatorType.Preload,\n        url: Platform.DevToolsPath.EmptyUrlString,\n        lineNumber: undefined,\n        columnNumber: undefined,\n        scriptId: null,\n        stack: null,\n        initiatorRequest: null,\n      });\n    });\n\n    it('returns the info for a Preflight request', () => {\n      const PREFLIGHT_INITIATOR_REQUEST = {} as unknown as SDK.NetworkRequest.NetworkRequest;\n      const request = {\n        initiator() {\n          return {\n            type: Protocol.Network.InitiatorType.Preflight,\n          } as unknown as Protocol.Network.Initiator;\n        },\n        preflightInitiatorRequest() {\n          return PREFLIGHT_INITIATOR_REQUEST;\n        },\n        redirectSource() {\n          return null;\n        },\n      } as unknown as SDK.NetworkRequest.NetworkRequest;\n      const info = initiatorInfoForRequest(request);\n      assert.deepEqual(info, {\n        type: SDK.NetworkRequest.InitiatorType.Preflight,\n        url: Platform.DevToolsPath.EmptyUrlString,\n        lineNumber: undefined,\n        columnNumber: undefined,\n        scriptId: null,\n        stack: null,\n        initiatorRequest: PREFLIGHT_INITIATOR_REQUEST,\n      });\n    });\n\n    it('returns the info for a signed exchange request', () => {\n      const request = {\n        initiator() {\n          return {\n            type: Protocol.Network.InitiatorType.SignedExchange,\n            url: url('http://localhost:3000/example.js'),\n          } as unknown as Protocol.Network.Initiator;\n        },\n        redirectSource() {\n          return null;\n        },\n      } as unknown as SDK.NetworkRequest.NetworkRequest;\n      const info = initiatorInfoForRequest(request);\n      assert.deepEqual(info, {\n        type: SDK.NetworkRequest.InitiatorType.SignedExchange,\n        url: url('http://localhost:3000/example.js'),\n        lineNumber: undefined,\n        columnNumber: undefined,\n        scriptId: null,\n        stack: null,\n        initiatorRequest: null,\n      });\n    });\n  });\n});\n\ndescribeWithMockConnection('NetworkLog', () => {\n  it('clears on main frame navigation', () => {\n    const networkLog = Logs.NetworkLog.NetworkLog.instance();\n    const tabTarget = createTarget({type: SDK.Target.Type.Tab});\n    const mainFrameTarget = createTarget({parentTarget: tabTarget});\n    const mainFrame = getMainFrame(mainFrameTarget);\n    const subframe = getMainFrame(createTarget({parentTarget: mainFrameTarget}));\n\n    let networkLogResetEvents = 0;\n    networkLog.addEventListener(Logs.NetworkLog.Events.Reset, () => ++networkLogResetEvents);\n\n    navigate(subframe);\n    assert.strictEqual(networkLogResetEvents, 0);\n\n    navigate(mainFrame);\n    assert.strictEqual(networkLogResetEvents, 1);\n  });\n\n  describe('on primary page changed', () => {\n    let networkLog: Logs.NetworkLog.NetworkLog;\n    let target: SDK.Target.Target;\n\n    beforeEach(() => {\n      Common.Settings.Settings.instance().moduleSetting('network-log.preserve-log').set(false);\n      target = createTarget();\n      const networkManager = target.model(SDK.NetworkManager.NetworkManager);\n      assert.exists(networkManager);\n      networkLog = Logs.NetworkLog.NetworkLog.instance();\n      const networkDispatcher = new SDK.NetworkManager.NetworkDispatcher(networkManager);\n\n      const requestWillBeSentEvent1 = {requestId: 'mockId1', request: {url: 'example.com'}, loaderId: LOADER_ID} as\n          Protocol.Network.RequestWillBeSentEvent;\n      networkDispatcher.requestWillBeSent(requestWillBeSentEvent1);\n      const requestWillBeSentEvent2 = {requestId: 'mockId2', request: {url: 'foo.com'}, loaderId: 'OTHER_LOADER_ID'} as\n          Protocol.Network.RequestWillBeSentEvent;\n      networkDispatcher.requestWillBeSent(requestWillBeSentEvent2);\n      assert.strictEqual(networkLog.requests().length, 2);\n    });\n\n    it('discards requests with mismatched loaderId on navigation', () => {\n      navigate(getMainFrame(target));\n      assert.deepEqual(networkLog.requests().map(request => request.requestId()), ['mockId1']);\n    });\n\n    it('does not discard requests on prerender activation', () => {\n      activate(target);\n      assert.deepEqual(networkLog.requests().map(request => request.requestId()), ['mockId1', 'mockId2']);\n    });\n  });\n\n  it('removes preflight requests with a UnexpectedPrivateNetworkAccess CORS error', () => {\n    const target = createTarget();\n    const networkManager = target.model(SDK.NetworkManager.NetworkManager);\n    if (!networkManager) {\n      throw new Error('No networkManager');\n    }\n    const networkLog = Logs.NetworkLog.NetworkLog.instance();\n    let removedRequest: SDK.NetworkRequest.NetworkRequest|null = null;\n    networkLog.addEventListener(Logs.NetworkLog.Events.RequestRemoved, event => {\n      assert.isNull(removedRequest, 'Request was removed multiple times.');\n      removedRequest = event.data.request;\n    });\n\n    const request = {\n      requestId: () => 'request-id',\n      isPreflightRequest: () => true,\n      initiator: () => null,\n      corsErrorStatus: () => ({corsError: Protocol.Network.CorsError.UnexpectedPrivateNetworkAccess}),\n    } as SDK.NetworkRequest.NetworkRequest;\n    networkManager.dispatchEventToListeners(SDK.NetworkManager.Events.RequestStarted, {request, originalRequest: null});\n    assert.strictEqual(networkLog.requests().length, 1);\n\n    networkManager.dispatchEventToListeners(SDK.NetworkManager.Events.RequestUpdated, request);\n    assert.strictEqual(request, removedRequest);\n    assert.strictEqual(networkLog.requests().length, 0);\n  });\n});\n"]}