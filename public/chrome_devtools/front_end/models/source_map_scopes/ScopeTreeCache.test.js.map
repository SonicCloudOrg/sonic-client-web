{"version":3,"file":"ScopeTreeCache.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/source_map_scopes/ScopeTreeCache.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Formatter from '../formatter/formatter.js';\nimport * as SourceMapScopes from '../source_map_scopes/source_map_scopes.js';\nimport * as TextUtils from '../text_utils/text_utils.js';\n\ndescribe('ScopeTreeCache', () => {\n  describe('scopeTreeForScript', () => {\n    const {scopeTreeForScript} = SourceMapScopes.ScopeTreeCache;\n    let javaScriptScopeTreeStub: sinon.SinonStub;\n    let script: SDK.Script.Script;\n\n    beforeEach(() => {\n      javaScriptScopeTreeStub = sinon.stub(Formatter.FormatterWorkerPool.formatterWorkerPool(), 'javaScriptScopeTree');\n      script = sinon.createStubInstance(\n          SDK.Script.Script,\n          {requestContentData: Promise.resolve(new TextUtils.ContentData.ContentData('', false, 'text/javascript'))});\n    });\n\n    it('requests the scope tree once for a script', async () => {\n      const scopeTree = {start: 0, end: 20, variables: [], children: []};\n      javaScriptScopeTreeStub.returns(Promise.resolve(scopeTree));\n\n      const actualScopeTree1 = await scopeTreeForScript(script);\n      const actualScopeTree2 = await scopeTreeForScript(script);\n\n      assert.isTrue(javaScriptScopeTreeStub.calledOnce);\n      assert.strictEqual(actualScopeTree1, scopeTree);\n      assert.strictEqual(actualScopeTree2, scopeTree);\n    });\n\n    it('requests the scope tree once for a script that fails to parse', async () => {\n      javaScriptScopeTreeStub.returns(null);\n\n      const actualScopeTree1 = await scopeTreeForScript(script);\n      const actualScopeTree2 = await scopeTreeForScript(script);\n\n      assert.isTrue(javaScriptScopeTreeStub.calledOnce);\n      assert.isNull(actualScopeTree1);\n      assert.isNull(actualScopeTree2);\n    });\n\n    it('requests the scope tree once for a script, even if the first request is not done yet', async () => {\n      const scopeTree = {start: 0, end: 20, variables: [], children: []};\n      const {promise: scopeTreePromise, resolve: scopeTreeResolve} =\n          Platform.PromiseUtilities.promiseWithResolvers<Formatter.FormatterWorkerPool.ScopeTreeNode|null>();\n      javaScriptScopeTreeStub.returns(scopeTreePromise);\n\n      const scopeTreePromise1 = scopeTreeForScript(script);\n      const scopeTreePromise2 = scopeTreeForScript(script);\n\n      scopeTreeResolve(scopeTree);\n      const [actualScopeTree1, actualScopeTree2] = await Promise.all([scopeTreePromise1, scopeTreePromise2]);\n\n      assert.isTrue(javaScriptScopeTreeStub.calledOnce);\n      assert.strictEqual(actualScopeTree1, scopeTree);\n      assert.strictEqual(actualScopeTree2, scopeTree);\n    });\n  });\n});\n"]}