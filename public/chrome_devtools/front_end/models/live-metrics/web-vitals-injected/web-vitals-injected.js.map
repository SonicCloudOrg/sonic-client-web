{"version":3,"file":"web-vitals-injected.js","sourceRoot":"","sources":["../../../../../../../front_end/models/live-metrics/web-vitals-injected/web-vitals-injected.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as WebVitals from '../../../third_party/web-vitals/web-vitals.js';\n\nimport * as OnEachInteraction from './OnEachInteraction.js';\nimport * as Spec from './spec/spec.js';\n\nconst {onLCP, onCLS, onINP} = WebVitals.Attribution;\nconst {onEachInteraction} = OnEachInteraction;\n\ndeclare const window: Window&{\n  getNodeForIndex: (index: number) => Node | undefined,\n  [Spec.EVENT_BINDING_NAME]: (payload: string) => void,\n};\n\nfunction sendEventToDevTools(event: Spec.WebVitalsEvent): void {\n  const payload = JSON.stringify(event);\n  window[Spec.EVENT_BINDING_NAME](payload);\n}\n\nconst nodeList: Node[] = [];\n\nfunction establishNodeIndex(node: Node): number {\n  const index = nodeList.length;\n  nodeList.push(node);\n  return index;\n}\n\n/**\n * The data sent over the event binding needs to be JSON serializable, so we\n * can't send DOM nodes directly. Instead we create an ID for each node (see\n * `establishNodeIndex`) that we can later use to retrieve a remote object\n * for that node.\n *\n * This function is used by `Runtime.evaluate` calls to get a remote object\n * for the specified index.\n */\nwindow.getNodeForIndex = (index: number): Node|undefined => {\n  return nodeList[index];\n};\n\nfunction inIframe(): boolean {\n  try {\n    return window.self !== window.top;\n  } catch {\n    return true;\n  }\n}\n\nfunction initialize(): void {\n  // `Page.addScriptToEvaluateOnNewDocument` will create a script that runs\n  // in all frames. We only want metrics from the main frame so the filter\n  // has to be here.\n  if (inIframe()) {\n    return;\n  }\n\n  sendEventToDevTools({name: 'reset'});\n\n  // We want to treat bfcache navigations like a standard navigations, so emit\n  // a reset event when bfcache is restored.\n  //\n  // Metric functions will also re-emit their values using this listener's callback.\n  // To ensure this event is fired before those values are emitted, register this\n  // callback before any others.\n  WebVitals.onBFCacheRestore(() => {\n    sendEventToDevTools({name: 'reset'});\n  });\n\n  onLCP(metric => {\n    const event: Spec.LCPChangeEvent = {\n      name: 'LCP',\n      value: metric.value,\n      rating: metric.rating,\n    };\n\n    const element = metric.attribution.lcpEntry?.element;\n    if (element) {\n      event.nodeIndex = establishNodeIndex(element);\n    }\n    sendEventToDevTools(event);\n  }, {reportAllChanges: true});\n\n  onCLS(metric => {\n    const event: Spec.CLSChangeEvent = {\n      name: 'CLS',\n      value: metric.value,\n      rating: metric.rating,\n    };\n    sendEventToDevTools(event);\n  }, {reportAllChanges: true});\n\n  onINP(metric => {\n    const event: Spec.INPChangeEvent = {\n      name: 'INP',\n      value: metric.value,\n      rating: metric.rating,\n      interactionType: metric.attribution.interactionType,\n    };\n    const element = metric.attribution.interactionTargetElement;\n    if (element) {\n      event.nodeIndex = establishNodeIndex(element);\n    }\n    sendEventToDevTools(event);\n  }, {reportAllChanges: true});\n\n  onEachInteraction(interaction => {\n    const event: Spec.InteractionEvent = {\n      name: 'Interaction',\n      duration: interaction.value,\n      rating: interaction.rating,\n      interactionId: interaction.attribution.interactionId,\n      interactionType: interaction.attribution.interactionType,\n    };\n    const node = interaction.attribution.interactionTargetElement;\n    if (node) {\n      event.nodeIndex = establishNodeIndex(node);\n    }\n    sendEventToDevTools(event);\n  });\n}\ninitialize();\n"]}