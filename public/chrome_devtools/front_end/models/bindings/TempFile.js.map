{"version":3,"file":"TempFile.js","sourceRoot":"","sources":["../../../../../../front_end/models/bindings/TempFile.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BG;AAEH,OAAO,KAAK,MAAM,MAAM,6BAA6B,CAAC;AAEtD,OAAO,EAAC,iBAAiB,EAAqB,MAAM,gBAAgB,CAAC;AAErE,MAAM,OAAO,QAAQ;IACnB,SAAS,CAAY;IACrB;QACE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IACxB,CAAC;IAED,KAAK,CAAC,MAAuB;QAC3B,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;YACnB,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACjC,CAAC;QACD,IAAI,CAAC,SAAS,GAAG,IAAI,IAAI,CAAC,MAAM,EAAE,EAAC,IAAI,EAAE,YAAY,EAAC,CAAC,CAAC;IAC1D,CAAC;IAED,IAAI;QACF,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC;IAC1B,CAAC;IAED,IAAI;QACF,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAClD,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,WAAoB,EAAE,SAAkB;QACtD,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;YACpB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,oDAAoD,CAAC,CAAC;YAC9F,OAAO,EAAE,CAAC;QACZ,CAAC;QACD,MAAM,IAAI,GAAG,OAAO,WAAW,KAAK,QAAQ,IAAI,OAAO,SAAS,KAAK,QAAQ,CAAC,CAAC;YAC3E,IAAI,CAAC,SAAS,CAAC,KAAK,CAAE,WAAsB,EAAG,SAAoB,CAAC,CAAC,CAAC;YACtE,IAAI,CAAC,SAAS,CAAC;QAEnB,MAAM,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;QAChC,IAAI,CAAC;YACH,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACpC,MAAM,CAAC,SAAS,GAAG,OAAO,CAAC;gBAC3B,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC;gBACxB,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAC1B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,iCAAiC,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;QAC7F,CAAC;QAED,OAAO,MAAM,CAAC,MAAuB,CAAC;IACxC,CAAC;IAED,KAAK,CAAC,kBAAkB,CACpB,YAAoD,EACpD,QAA0C;QAC5C,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;YACpB,KAAK,YAAY,CAAC,KAAK,EAAE,CAAC;YAC1B,OAAO,IAAI,CAAC;QACd,CAAC;QACD,MAAM,MAAM,GAAG,IAAI,iBAAiB,CAAE,IAAI,CAAC,SAAkB,EAAE,EAAE,GAAG,IAAI,GAAG,IAAI,EAAE,QAAQ,CAAC,CAAC;QAC3F,OAAO,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;IACpF,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IACxB,CAAC;CACF","sourcesContent":["/*\n * Copyright (C) 2013 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\n\nimport {ChunkedFileReader, type ChunkedReader} from './FileUtils.js';\n\nexport class TempFile {\n  #lastBlob: Blob|null;\n  constructor() {\n    this.#lastBlob = null;\n  }\n\n  write(pieces: (string|Blob)[]): void {\n    if (this.#lastBlob) {\n      pieces.unshift(this.#lastBlob);\n    }\n    this.#lastBlob = new Blob(pieces, {type: 'text/plain'});\n  }\n\n  read(): Promise<string|null> {\n    return this.readRange();\n  }\n\n  size(): number {\n    return this.#lastBlob ? this.#lastBlob.size : 0;\n  }\n\n  async readRange(startOffset?: number, endOffset?: number): Promise<string|null> {\n    if (!this.#lastBlob) {\n      Common.Console.Console.instance().error('Attempt to read a temp file that was never written');\n      return '';\n    }\n    const blob = typeof startOffset === 'number' || typeof endOffset === 'number' ?\n        this.#lastBlob.slice((startOffset as number), (endOffset as number)) :\n        this.#lastBlob;\n\n    const reader = new FileReader();\n    try {\n      await new Promise((resolve, reject) => {\n        reader.onloadend = resolve;\n        reader.onerror = reject;\n        reader.readAsText(blob);\n      });\n    } catch (error) {\n      Common.Console.Console.instance().error('Failed to read from temp file: ' + error.message);\n    }\n\n    return reader.result as string | null;\n  }\n\n  async copyToOutputStream(\n      outputStream: Common.StringOutputStream.OutputStream,\n      progress?: ((arg0: ChunkedReader) => void)): Promise<DOMError|null> {\n    if (!this.#lastBlob) {\n      void outputStream.close();\n      return null;\n    }\n    const reader = new ChunkedFileReader((this.#lastBlob as File), 10 * 1000 * 1000, progress);\n    return reader.read(outputStream).then(success => success ? null : reader.error());\n  }\n\n  remove(): void {\n    this.#lastBlob = null;\n  }\n}\n"]}