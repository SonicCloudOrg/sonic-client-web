{"version":3,"file":"FileUtils.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/bindings/FileUtils.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,MAAM,MAAM,6BAA6B,CAAC;AAEtD,OAAO,KAAK,QAAQ,MAAM,eAAe,CAAC;AAE1C,MAAM,iBAAiB,GAAG,QAAQ,CAAC,SAAS,CAAC,iBAAiB,CAAC;AAC/D,MAAM,kBAAkB,GAAG,MAAM,CAAC,kBAAkB,CAAC,kBAAkB,CAAC;AAUxE,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;IACzB,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;QACjC,EAAE,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;YAClE,MAAM,IAAI,GAAG;gBACX,8BAA8B;gBAC9B,iCAAiC;gBACjC,+BAA+B;gBAC/B,2BAA2B;aAC5B,CAAC;YAEF,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,EAAC,IAAI,EAAE,YAAY,EAAC,CAAC,CAAC;YAClD,mFAAmF;YACnF,mFAAmF;YACnF,MAAM,SAAS,GAAG,CAAC,CAAC;YACpB,IAAI,UAAU,GAAG,CAAC,CAAC;YACnB,MAAM,MAAM,GAAG,IAAI,iBAAiB,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE,QAAQ,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;YAChG,MAAM,MAAM,GAAG,IAAI,kBAAkB,EAAE,CAAC;YAExC,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAE7C,MAAM,CAAC,WAAW,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YACrC,MAAM,CAAC,WAAW,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;YACnC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,IAAI,EAAE,EAAE,0CAA0C,CAAC,CAAC;QAC/F,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;YAC3C,KAAK,UAAU,mBAAmB,CAAC,IAAY;gBAC7C,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE,EAAC,IAAI,EAAE,YAAY,EAAC,CAAC,CAAC;gBACpD,6FAA6F;gBAC7F,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,WAAW,CAAC,IAAI,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC;gBACzE,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,EAAE,CAAC;gBACpC,MAAM,MAAM,GAAa,EAAE,CAAC;gBAE5B,OAAO,IAAI,EAAE,CAAC;oBACZ,MAAM,EAAC,KAAK,EAAE,IAAI,EAAC,GAAG,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;oBAC3C,IAAI,IAAI,EAAE,CAAC;wBACT,MAAM;oBACR,CAAC;oBACD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACrB,CAAC;gBACD,MAAM,KAAK,GAAG,IAAI,IAAI,CAAC,MAAM,EAAE,EAAC,IAAI,EAAE,kBAAkB,EAAC,CAAC,CAAC;gBAC3D,OAAO,KAAK,CAAC;YACf,CAAC;YAED,MAAM,YAAY,GAAG,sDAAsD,CAAC;YAC5E,MAAM,KAAK,GAAG,MAAM,mBAAmB,CAAC,YAAY,CAAC,CAAC;YAEtD,IAAI,UAAU,GAAG,CAAC,CAAC;YACnB,MAAM,SAAS,GAAG,CAAC,CAAC;YACpB,MAAM,MAAM,GAAG,IAAI,kBAAkB,EAAE,CAAC;YACxC,MAAM,cAAc,GAAG,IAAI,IAAI,CAAC,CAAC,KAAK,CAAC,EAAE,WAAW,EAAE,EAAC,IAAI,EAAE,kBAAkB,EAAC,CAAC,CAAC;YAClF,MAAM,QAAQ,GAAG,IAAI,iBAAiB,CAAC,cAAc,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;YAEtF,MAAM,UAAU,GAAG,MAAM,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC/C,MAAM,CAAC,WAAW,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YACrC,MAAM,CAAC,WAAW,CAAC,YAAY,EAAE,MAAM,CAAC,IAAI,EAAE,EAAE,0CAA0C,CAAC,CAAC;QAC9F,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\n\nimport * as Bindings from './bindings.js';\n\nconst ChunkedFileReader = Bindings.FileUtils.ChunkedFileReader;\nconst StringOutputStream = Common.StringOutputStream.StringOutputStream;\n\ninterface CompressionStream extends GenericTransformStream {\n  readonly format: string;\n}\ndeclare const CompressionStream: {\n  prototype: CompressionStream,\n  new (format: string): CompressionStream,\n};\n\ndescribe('FileUtils', () => {\n  describe('ChunkedFileReader', () => {\n    it('re-assembles chunks including multibyte characters', async () => {\n      const text = [\n        'Латынь из моды вышла ныне:\\n',\n        'Так, если правду вам сказать,\\n',\n        'Он знал довольно по-латыне,\\n',\n        'Чтоб эпиграфы разбирать\\n',\n      ];\n\n      const blob = new Blob(text, {type: 'text/plain'});\n      // Most of the characters above will be encoded as 2 bytes, so make sure we use odd\n      // chunk size to cause chunk boundaries sometimes to happen between chaacter bytes.\n      const chunkSize = 5;\n      let chunkCount = 0;\n      const reader = new ChunkedFileReader(new File([blob], 'ru.txt'), chunkSize, () => ++chunkCount);\n      const output = new StringOutputStream();\n\n      const hasNoError = await reader.read(output);\n\n      assert.strictEqual(hasNoError, true);\n      assert.strictEqual(chunkCount, 41);\n      assert.strictEqual(text.join(''), output.data(), 'Read text is different from written text');\n    });\n\n    it('can decompress gzipped data', async () => {\n      async function getAsCompressedFile(text: string) {\n        const blob = new Blob([text], {type: 'text/plain'});\n        // https://github.com/wicg/compression/blob/main/explainer.md#deflate-compress-an-arraybuffer\n        const cstream = blob.stream().pipeThrough(new CompressionStream('gzip'));\n        const creader = cstream.getReader();\n        const values: string[] = [];\n\n        while (true) {\n          const {value, done} = await creader.read();\n          if (done) {\n            break;\n          }\n          values.push(value);\n        }\n        const cblob = new Blob(values, {type: 'application/gzip'});\n        return cblob;\n      }\n\n      const expectedText = 'This text will get compressed and then decompressed!';\n      const cblob = await getAsCompressedFile(expectedText);\n\n      let chunkCount = 0;\n      const chunkSize = 5;\n      const output = new StringOutputStream();\n      const compressedFile = new File([cblob], 'ru.txt.gz', {type: 'application/gzip'});\n      const cfreader = new ChunkedFileReader(compressedFile, chunkSize, () => ++chunkCount);\n\n      const hasNoError = await cfreader.read(output);\n      assert.strictEqual(hasNoError, true);\n      assert.strictEqual(expectedText, output.data(), 'Read text is different from written text');\n    });\n  });\n});\n"]}