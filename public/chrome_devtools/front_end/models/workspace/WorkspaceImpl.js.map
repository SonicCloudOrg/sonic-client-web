{"version":3,"file":"WorkspaceImpl.js","sourceRoot":"","sources":["../../../../../../front_end/models/workspace/WorkspaceImpl.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2012 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport type * as TextUtils from '../text_utils/text_utils.js';\n\nimport {UISourceCode, type UISourceCodeMetadata} from './UISourceCode.js';\nimport {type SearchConfig} from './SearchConfig.js';\n\nexport interface Project {\n  workspace(): WorkspaceImpl;\n  id(): string;\n  type(): projectTypes;\n  isServiceProject(): boolean;\n  displayName(): string;\n  requestMetadata(uiSourceCode: UISourceCode): Promise<UISourceCodeMetadata|null>;\n  requestFileContent(uiSourceCode: UISourceCode): Promise<TextUtils.ContentData.ContentDataOrError>;\n  canSetFileContent(): boolean;\n  setFileContent(uiSourceCode: UISourceCode, newContent: string, isBase64: boolean): Promise<void>;\n  fullDisplayName(uiSourceCode: UISourceCode): string;\n  mimeType(uiSourceCode: UISourceCode): string;\n  canRename(): boolean;\n  rename(\n      uiSourceCode: UISourceCode, newName: Platform.DevToolsPath.RawPathString,\n      callback:\n          (arg0: boolean, arg1?: string, arg2?: Platform.DevToolsPath.UrlString,\n           arg3?: Common.ResourceType.ResourceType) => void): void;\n  excludeFolder(path: Platform.DevToolsPath.UrlString): void;\n  canExcludeFolder(path: Platform.DevToolsPath.EncodedPathString): boolean;\n  createFile(path: Platform.DevToolsPath.EncodedPathString, name: string|null, content: string, isBase64?: boolean):\n      Promise<UISourceCode|null>;\n  canCreateFile(): boolean;\n  deleteFile(uiSourceCode: UISourceCode): void;\n  deleteDirectoryRecursively(path: Platform.DevToolsPath.EncodedPathString): Promise<boolean>;\n  remove(): void;\n  removeUISourceCode(url: Platform.DevToolsPath.UrlString): void;\n  searchInFileContent(uiSourceCode: UISourceCode, query: string, caseSensitive: boolean, isRegex: boolean):\n      Promise<TextUtils.ContentProvider.SearchMatch[]>;\n  findFilesMatchingSearchRequest(\n      searchConfig: SearchConfig, filesMatchingFileQuery: UISourceCode[],\n      progress: Common.Progress.Progress): Promise<Map<UISourceCode, TextUtils.ContentProvider.SearchMatch[]|null>>;\n  indexContent(progress: Common.Progress.Progress): void;\n  uiSourceCodeForURL(url: Platform.DevToolsPath.UrlString): UISourceCode|null;\n\n  /**\n   * Returns an iterator for the currently registered {@link UISourceCode}s for this project. When\n   * new {@link UISourceCode}s are added while iterating, they might show up already. When removing\n   * {@link UISourceCode}s while iterating, these will no longer show up, and will have no effect\n   * on the other entries.\n   *\n   * @return an iterator for the sources provided by this project.\n   */\n  uiSourceCodes(): Iterable<UISourceCode>;\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport enum projectTypes {\n  Debugger = 'debugger',\n  Formatter = 'formatter',\n  Network = 'network',\n  FileSystem = 'filesystem',\n  ContentScripts = 'contentscripts',\n  Service = 'service',\n}\n\nexport abstract class ProjectStore implements Project {\n  private readonly workspaceInternal: WorkspaceImpl;\n  private readonly idInternal: string;\n  private readonly typeInternal: projectTypes;\n  private readonly displayNameInternal: string;\n  readonly #uiSourceCodes: Map<Platform.DevToolsPath.UrlString, UISourceCode>;\n\n  constructor(workspace: WorkspaceImpl, id: string, type: projectTypes, displayName: string) {\n    this.workspaceInternal = workspace;\n    this.idInternal = id;\n    this.typeInternal = type;\n    this.displayNameInternal = displayName;\n    this.#uiSourceCodes = new Map();\n  }\n\n  id(): string {\n    return this.idInternal;\n  }\n\n  type(): projectTypes {\n    return this.typeInternal;\n  }\n\n  displayName(): string {\n    return this.displayNameInternal;\n  }\n\n  workspace(): WorkspaceImpl {\n    return this.workspaceInternal;\n  }\n\n  createUISourceCode(url: Platform.DevToolsPath.UrlString, contentType: Common.ResourceType.ResourceType):\n      UISourceCode {\n    return new UISourceCode(this, url, contentType);\n  }\n\n  addUISourceCode(uiSourceCode: UISourceCode): boolean {\n    const url = uiSourceCode.url();\n    if (this.uiSourceCodeForURL(url)) {\n      return false;\n    }\n    this.#uiSourceCodes.set(url, uiSourceCode);\n    this.workspaceInternal.dispatchEventToListeners(Events.UISourceCodeAdded, uiSourceCode);\n    return true;\n  }\n\n  removeUISourceCode(url: Platform.DevToolsPath.UrlString): void {\n    const uiSourceCode = this.#uiSourceCodes.get(url);\n    if (uiSourceCode === undefined) {\n      return;\n    }\n    this.#uiSourceCodes.delete(url);\n    this.workspaceInternal.dispatchEventToListeners(Events.UISourceCodeRemoved, uiSourceCode);\n  }\n\n  removeProject(): void {\n    this.workspaceInternal.removeProject(this);\n    this.#uiSourceCodes.clear();\n  }\n\n  uiSourceCodeForURL(url: Platform.DevToolsPath.UrlString): UISourceCode|null {\n    return this.#uiSourceCodes.get(url) ?? null;\n  }\n\n  uiSourceCodes(): Iterable<UISourceCode> {\n    return this.#uiSourceCodes.values();\n  }\n\n  renameUISourceCode(uiSourceCode: UISourceCode, newName: string): void {\n    const oldPath = uiSourceCode.url();\n    const newPath = uiSourceCode.parentURL() ?\n        Common.ParsedURL.ParsedURL.urlFromParentUrlAndName(uiSourceCode.parentURL(), newName) :\n        Common.ParsedURL.ParsedURL.preEncodeSpecialCharactersInPath(newName) as Platform.DevToolsPath.UrlString;\n    this.#uiSourceCodes.set(newPath, uiSourceCode);\n    this.#uiSourceCodes.delete(oldPath);\n  }\n\n  // No-op implementation for a handfull of interface methods.\n\n  rename(\n      _uiSourceCode: UISourceCode, _newName: string,\n      _callback:\n          (arg0: boolean, arg1?: string, arg2?: Platform.DevToolsPath.UrlString,\n           arg3?: Common.ResourceType.ResourceType) => void): void {\n  }\n  excludeFolder(_path: Platform.DevToolsPath.UrlString): void {\n  }\n  deleteFile(_uiSourceCode: UISourceCode): void {\n  }\n  deleteDirectoryRecursively(_path: Platform.DevToolsPath.EncodedPathString): Promise<boolean> {\n    return Promise.resolve(false);\n  }\n  remove(): void {\n  }\n  indexContent(_progress: Common.Progress.Progress): void {\n  }\n\n  abstract isServiceProject(): boolean;\n  abstract requestMetadata(uiSourceCode: UISourceCode): Promise<UISourceCodeMetadata|null>;\n  abstract requestFileContent(uiSourceCode: UISourceCode): Promise<TextUtils.ContentData.ContentDataOrError>;\n  abstract canSetFileContent(): boolean;\n  abstract setFileContent(uiSourceCode: UISourceCode, newContent: string, isBase64: boolean): Promise<void>;\n  abstract fullDisplayName(uiSourceCode: UISourceCode): string;\n  abstract mimeType(uiSourceCode: UISourceCode): string;\n  abstract canRename(): boolean;\n  abstract canExcludeFolder(path: Platform.DevToolsPath.EncodedPathString): boolean;\n  abstract createFile(\n      path: Platform.DevToolsPath.EncodedPathString, name: string|null, content: string,\n      isBase64?: boolean): Promise<UISourceCode|null>;\n  abstract canCreateFile(): boolean;\n  abstract searchInFileContent(uiSourceCode: UISourceCode, query: string, caseSensitive: boolean, isRegex: boolean):\n      Promise<TextUtils.ContentProvider.SearchMatch[]>;\n  abstract findFilesMatchingSearchRequest(\n      searchConfig: SearchConfig, filesMatchingFileQuery: UISourceCode[],\n      progress: Common.Progress.Progress): Promise<Map<UISourceCode, TextUtils.ContentProvider.SearchMatch[]|null>>;\n}\n\nlet workspaceInstance: WorkspaceImpl|undefined;\n\nexport class WorkspaceImpl extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  private projectsInternal: Map<string, Project>;\n  private hasResourceContentTrackingExtensionsInternal: boolean;\n\n  private constructor() {\n    super();\n    this.projectsInternal = new Map();\n    this.hasResourceContentTrackingExtensionsInternal = false;\n  }\n\n  static instance(opts: {forceNew: boolean|null} = {forceNew: null}): WorkspaceImpl {\n    const {forceNew} = opts;\n    if (!workspaceInstance || forceNew) {\n      workspaceInstance = new WorkspaceImpl();\n    }\n\n    return workspaceInstance;\n  }\n\n  static removeInstance(): void {\n    workspaceInstance = undefined;\n  }\n\n  uiSourceCode(projectId: string, url: Platform.DevToolsPath.UrlString): UISourceCode|null {\n    const project = this.projectsInternal.get(projectId);\n    return project ? project.uiSourceCodeForURL(url) : null;\n  }\n\n  uiSourceCodeForURL(url: Platform.DevToolsPath.UrlString): UISourceCode|null {\n    for (const project of this.projectsInternal.values()) {\n      const uiSourceCode = project.uiSourceCodeForURL(url);\n      if (uiSourceCode) {\n        return uiSourceCode;\n      }\n    }\n    return null;\n  }\n\n  findCompatibleUISourceCodes(uiSourceCode: UISourceCode): UISourceCode[] {\n    const url = uiSourceCode.url();\n    const contentType = uiSourceCode.contentType();\n    const result: UISourceCode[] = [];\n    for (const project of this.projectsInternal.values()) {\n      if (uiSourceCode.project().type() !== project.type()) {\n        continue;\n      }\n      const candidate = project.uiSourceCodeForURL(url);\n      if (candidate && candidate.url() === url && candidate.contentType() === contentType) {\n        result.push(candidate);\n      }\n    }\n    return result;\n  }\n\n  uiSourceCodesForProjectType(type: projectTypes): UISourceCode[] {\n    const result: UISourceCode[] = [];\n    for (const project of this.projectsInternal.values()) {\n      if (project.type() === type) {\n        for (const uiSourceCode of project.uiSourceCodes()) {\n          result.push(uiSourceCode);\n        }\n      }\n    }\n    return result;\n  }\n\n  addProject(project: Project): void {\n    console.assert(!this.projectsInternal.has(project.id()), `A project with id ${project.id()} already exists!`);\n    this.projectsInternal.set(project.id(), project);\n    this.dispatchEventToListeners(Events.ProjectAdded, project);\n  }\n\n  removeProject(project: Project): void {\n    this.projectsInternal.delete(project.id());\n    this.dispatchEventToListeners(Events.ProjectRemoved, project);\n  }\n\n  project(projectId: string): Project|null {\n    return this.projectsInternal.get(projectId) || null;\n  }\n\n  projects(): Project[] {\n    return [...this.projectsInternal.values()];\n  }\n\n  projectsForType(type: string): Project[] {\n    function filterByType(project: Project): boolean {\n      return project.type() === type;\n    }\n    return this.projects().filter(filterByType);\n  }\n\n  uiSourceCodes(): UISourceCode[] {\n    const result: UISourceCode[] = [];\n    for (const project of this.projectsInternal.values()) {\n      for (const uiSourceCode of project.uiSourceCodes()) {\n        result.push(uiSourceCode);\n      }\n    }\n    return result;\n  }\n\n  setHasResourceContentTrackingExtensions(hasExtensions: boolean): void {\n    this.hasResourceContentTrackingExtensionsInternal = hasExtensions;\n  }\n\n  hasResourceContentTrackingExtensions(): boolean {\n    return this.hasResourceContentTrackingExtensionsInternal;\n  }\n}\n\nexport enum Events {\n  UISourceCodeAdded = 'UISourceCodeAdded',\n  UISourceCodeRemoved = 'UISourceCodeRemoved',\n  UISourceCodeRenamed = 'UISourceCodeRenamed',\n  WorkingCopyChanged = 'WorkingCopyChanged',\n  WorkingCopyCommitted = 'WorkingCopyCommitted',\n  WorkingCopyCommittedByUser = 'WorkingCopyCommittedByUser',\n  ProjectAdded = 'ProjectAdded',\n  ProjectRemoved = 'ProjectRemoved',\n}\n\nexport interface UISourceCodeRenamedEvent {\n  oldURL: Platform.DevToolsPath.UrlString;\n  uiSourceCode: UISourceCode;\n}\n\nexport interface WorkingCopyChangedEvent {\n  uiSourceCode: UISourceCode;\n}\n\nexport interface WorkingCopyCommitedEvent {\n  uiSourceCode: UISourceCode;\n  content: string;\n  encoded?: boolean;\n}\n\nexport type EventTypes = {\n  [Events.UISourceCodeAdded]: UISourceCode,\n  [Events.UISourceCodeRemoved]: UISourceCode,\n  [Events.UISourceCodeRenamed]: UISourceCodeRenamedEvent,\n  [Events.WorkingCopyChanged]: WorkingCopyChangedEvent,\n  [Events.WorkingCopyCommitted]: WorkingCopyCommitedEvent,\n  [Events.WorkingCopyCommittedByUser]: WorkingCopyCommitedEvent,\n  [Events.ProjectAdded]: Project,\n  [Events.ProjectRemoved]: Project,\n};\n"]}