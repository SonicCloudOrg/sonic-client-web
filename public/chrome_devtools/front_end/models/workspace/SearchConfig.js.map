{"version":3,"file":"SearchConfig.js","sourceRoot":"","sources":["../../../../../../front_end/models/workspace/SearchConfig.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../core/platform/platform.js';\n\nexport class SearchConfig {\n  readonly #query: string;\n  readonly #ignoreCase: boolean;\n  readonly #isRegex: boolean;\n\n  readonly #queries: string[];\n  readonly #fileRegexQueries: RegexQuery[];\n\n  constructor(query: string, ignoreCase: boolean, isRegex: boolean) {\n    this.#query = query;\n    this.#ignoreCase = ignoreCase;\n    this.#isRegex = isRegex;\n\n    const {queries, fileRegexQueries} = SearchConfig.#parse(query, ignoreCase, isRegex);\n    this.#queries = queries;\n    this.#fileRegexQueries = fileRegexQueries;\n  }\n\n  static fromPlainObject(object: {\n    query: string,\n    ignoreCase: boolean,\n    isRegex: boolean,\n  }): SearchConfig {\n    return new SearchConfig(object.query, object.ignoreCase, object.isRegex);\n  }\n\n  filePathMatchesFileQuery(filePath: Platform.DevToolsPath.RawPathString|\n                           Platform.DevToolsPath.EncodedPathString|Platform.DevToolsPath.UrlString): boolean {\n    return this.#fileRegexQueries.every(({regex, shouldMatch}) => (Boolean(filePath.match(regex)) === shouldMatch));\n  }\n\n  queries(): string[] {\n    return this.#queries;\n  }\n\n  query(): string {\n    return this.#query;\n  }\n\n  ignoreCase(): boolean {\n    return this.#ignoreCase;\n  }\n\n  isRegex(): boolean {\n    return this.#isRegex;\n  }\n\n  toPlainObject(): {\n    query: string,\n    ignoreCase: boolean,\n    isRegex: boolean,\n  } {\n    return {query: this.query(), ignoreCase: this.ignoreCase(), isRegex: this.isRegex()};\n  }\n\n  static #parse(query: string, ignoreCase: boolean, isRegex: boolean):\n      {queries: string[], fileRegexQueries: RegexQuery[]} {\n    // Inside double quotes: any symbol except double quote and backslash or any symbol escaped with a backslash.\n    const quotedPattern = /\"([^\\\\\"]|\\\\.)+\"/;\n    // A word is a sequence of any symbols except space and backslash or any symbols escaped with a backslash, that does not start with file:.\n    const unquotedWordPattern = /(\\s*(?!-?f(ile)?:)[^\\\\ ]|\\\\.)+/;\n    const unquotedPattern = unquotedWordPattern.source + '(\\\\s+' + unquotedWordPattern.source + ')*';\n\n    const pattern = [\n      '(\\\\s*' + FilePatternRegex.source + '\\\\s*)',\n      '(' + quotedPattern.source + ')',\n      '(' + unquotedPattern + ')',\n    ].join('|');\n    const regexp = new RegExp(pattern, 'g');\n    const queryParts = query.match(regexp) || [];\n\n    const queries: string[] = [];\n    const fileRegexQueries: RegexQuery[] = [];\n\n    for (const queryPart of queryParts) {\n      if (!queryPart) {\n        continue;\n      }\n      const fileQuery = SearchConfig.#parseFileQuery(queryPart);\n      if (fileQuery) {\n        const regex = new RegExp(fileQuery.text, ignoreCase ? 'i' : '');\n        fileRegexQueries.push({regex, shouldMatch: fileQuery.shouldMatch});\n      } else if (isRegex) {\n        queries.push(queryPart);\n      } else if (queryPart.startsWith('\"') && queryPart.endsWith('\"')) {\n        queries.push(SearchConfig.#parseQuotedQuery(queryPart));\n      } else {\n        queries.push(SearchConfig.#parseUnquotedQuery(queryPart));\n      }\n    }\n\n    return {queries, fileRegexQueries};\n  }\n\n  static #parseUnquotedQuery(query: string): string {\n    return query.replace(/\\\\(.)/g, '$1');\n  }\n\n  static #parseQuotedQuery(query: string): string {\n    return query.substring(1, query.length - 1).replace(/\\\\(.)/g, '$1');\n  }\n\n  static #parseFileQuery(query: string): QueryTerm|null {\n    const match = query.match(FilePatternRegex);\n    if (!match) {\n      return null;\n    }\n    query = match[3];\n    let result = '';\n    for (let i = 0; i < query.length; ++i) {\n      const char = query[i];\n      if (char === '*') {\n        result += '.*';\n      } else if (char === '\\\\') {\n        ++i;\n        const nextChar = query[i];\n        if (nextChar === ' ') {\n          result += ' ';\n        }\n      } else {\n        if (Platform.StringUtilities.regexSpecialCharacters().indexOf(query.charAt(i)) !== -1) {\n          result += '\\\\';\n        }\n        result += query.charAt(i);\n      }\n    }\n    const shouldMatch = !Boolean(match[1]);\n    return {text: result, shouldMatch};\n  }\n}\n\n// After file: prefix: any symbol except space and backslash or any symbol escaped with a backslash.\nconst FilePatternRegex = /(-)?f(ile)?:((?:[^\\\\ ]|\\\\.)+)/;\n\ninterface QueryTerm {\n  text: string;\n  shouldMatch: boolean;\n}\n\ninterface RegexQuery {\n  regex: RegExp;\n  shouldMatch: boolean;\n}\n"]}