{"version":3,"file":"SearchConfig.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/workspace/SearchConfig.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as Workspace from '../workspace/workspace.js';\n\nconst {SearchConfig} = Workspace.SearchConfig;\n\ndescribe('SearchConfig', () => {\n  describe('filePathMatchesFileQuery', () => {\n    const url = (t: TemplateStringsArray) => t[0] as Platform.DevToolsPath.UrlString;\n\n    it('returns true if the user query doesn\\'t contain any f: or files: part', () => {\n      const config = new SearchConfig('foo', true, false);\n\n      assert.isTrue(config.filePathMatchesFileQuery(url`http://example.com/main.js`));\n    });\n\n    it('works if the query contains a f: part', () => {\n      const config = new SearchConfig('f:main.js foo', true, false);\n\n      assert.isTrue(config.filePathMatchesFileQuery(url`http://example.com/main.js`));\n      assert.isFalse(config.filePathMatchesFileQuery(url`http://example.com/index.js`));\n    });\n\n    it('works if the query contains a file: part', () => {\n      const config = new SearchConfig('file:main.js foo', true, false);\n\n      assert.isTrue(config.filePathMatchesFileQuery(url`http://example.com/main.js`));\n      assert.isFalse(config.filePathMatchesFileQuery(url`http://example.com/index.js`));\n    });\n\n    it('works with multiple f: and file: parts (all of which must match)', () => {\n      const config = new SearchConfig('file:m f:.js foo', true, false);\n\n      assert.isTrue(config.filePathMatchesFileQuery(url`http://example.com/main.js`));\n      assert.isTrue(config.filePathMatchesFileQuery(url`http://example.com/index.js`));\n      assert.isFalse(config.filePathMatchesFileQuery(url`http://google.de/a.js`));\n      assert.isFalse(config.filePathMatchesFileQuery(url`http://google.de/b.js`));\n    });\n\n    it('allows * for f: parts', () => {\n      const config = new SearchConfig('f:example.com/*.js foo', true, false);\n\n      assert.isTrue(config.filePathMatchesFileQuery(url`http://example.com/main.js`));\n      assert.isTrue(config.filePathMatchesFileQuery(url`http://example.com/index.js`));\n      assert.isFalse(config.filePathMatchesFileQuery(url`http://google.de/a.js`));\n      assert.isFalse(config.filePathMatchesFileQuery(url`http://google.de/b.js`));\n    });\n\n    it('allows negation of f: parts', () => {\n      const config = new SearchConfig('-f:main.js foo', true, false);\n\n      assert.isFalse(config.filePathMatchesFileQuery(url`http://example.com/main.js`));\n      assert.isTrue(config.filePathMatchesFileQuery(url`http://example.com/index.js`));\n    });\n  });\n\n  describe('queries', () => {\n    it('does not contain f: or file: parts', () => {\n      const config = new SearchConfig('-f:index.js f:main.js foo', true, false);\n\n      assert.deepEqual(config.queries(), ['foo']);\n    });\n\n    it('contains one part for simple searches', () => {\n      const config = new SearchConfig('foo', true, false);\n\n      assert.deepEqual(config.queries(), ['foo']);\n    });\n\n    it('contains one part for space separated simple words', () => {\n      const config = new SearchConfig('foo bar', true, false);\n\n      assert.deepEqual(config.queries(), ['foo bar']);\n    });\n\n    it('contains one part each for quoted simple words', () => {\n      const config = new SearchConfig('\"foo\"\"bar\"', true, false);\n\n      assert.deepEqual(config.queries(), ['foo', 'bar']);\n    });\n\n    it('allows escaping of quotes', () => {\n      const config = new SearchConfig('contains \\\\\"escaped\\\\\" quotes', true, false);\n\n      assert.deepEqual(config.queries(), ['contains \"escaped\" quotes']);\n    });\n\n    it('doesn\\'t remove quotes with the regex setting enabled', () => {\n      const config = new SearchConfig('\"foo\"\"bar\"', true, true);\n\n      assert.deepEqual(config.queries(), ['\"foo\"', '\"bar\"']);\n    });\n\n    it('doesn\\'t remove backslash escapes with the regex setting enabled', () => {\n      const config = new SearchConfig('with an escaped \\\\\" quote', true, true);\n\n      assert.deepEqual(config.queries(), ['with an escaped \\\\\" quote']);\n    });\n  });\n\n  it('can be serialized/deserialized to a plain JS object', () => {\n    const config = new SearchConfig('f:main.js foo', true, false);\n    const restoredConfig = SearchConfig.fromPlainObject(config.toPlainObject());\n\n    assert.strictEqual(restoredConfig.query(), config.query());\n    assert.strictEqual(restoredConfig.ignoreCase(), config.ignoreCase());\n    assert.strictEqual(restoredConfig.isRegex(), config.isRegex());\n    assert.deepEqual(restoredConfig.queries(), config.queries());\n  });\n});\n"]}