{"version":3,"file":"BreakpointManager.js","sourceRoot":"","sources":["../../../../../../front_end/models/breakpoints/BreakpointManager.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport {assertNotNullOrUndefined} from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as Bindings from '../bindings/bindings.js';\nimport * as Formatter from '../formatter/formatter.js';\nimport * as SourceMapScopes from '../source_map_scopes/source_map_scopes.js';\nimport type * as TextUtils from '../text_utils/text_utils.js';\nimport * as Workspace from '../workspace/workspace.js';\n\nlet breakpointManagerInstance: BreakpointManager;\nconst INITIAL_RESTORE_BREAKPOINT_COUNT = 100;\n\nexport class BreakpointManager extends Common.ObjectWrapper.ObjectWrapper<EventTypes> implements\n    SDK.TargetManager.SDKModelObserver<SDK.DebuggerModel.DebuggerModel> {\n  readonly storage = new Storage();\n  readonly #workspace: Workspace.Workspace.WorkspaceImpl;\n  readonly targetManager: SDK.TargetManager.TargetManager;\n  readonly debuggerWorkspaceBinding: Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding;\n  // For each source code, we remember the list or breakpoints that refer to that UI source code as\n  // their home UI source code. This is necessary to correctly remove the UI source code from\n  // breakpoints upon receiving the UISourceCodeRemoved event.\n  readonly #breakpointsForHomeUISourceCode = new Map<Workspace.UISourceCode.UISourceCode, Set<Breakpoint>>();\n  // Mapping of UI source codes to all the current breakpoint UI locations. For bound breakpoints,\n  // this is all the locations where the breakpoints was bound. For the unbound breakpoints,\n  // this is the default locations in the home UI source codes.\n  readonly #breakpointsForUISourceCode =\n      new Map<Workspace.UISourceCode.UISourceCode, Map<string, BreakpointLocation>>();\n  readonly #breakpointByStorageId = new Map<string, Breakpoint>();\n  #updateBindingsCallbacks: ((uiSourceCode: Workspace.UISourceCode.UISourceCode) => Promise<void>)[] = [];\n\n  private constructor(\n      targetManager: SDK.TargetManager.TargetManager, workspace: Workspace.Workspace.WorkspaceImpl,\n      debuggerWorkspaceBinding: Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding,\n      restoreInitialBreakpointCount?: number) {\n    super();\n    this.#workspace = workspace;\n    this.targetManager = targetManager;\n    this.debuggerWorkspaceBinding = debuggerWorkspaceBinding;\n\n    this.storage.mute();\n    this.#setInitialBreakpoints(restoreInitialBreakpointCount ?? INITIAL_RESTORE_BREAKPOINT_COUNT);\n    this.storage.unmute();\n\n    this.#workspace.addEventListener(Workspace.Workspace.Events.UISourceCodeAdded, this.uiSourceCodeAdded, this);\n    this.#workspace.addEventListener(Workspace.Workspace.Events.UISourceCodeRemoved, this.uiSourceCodeRemoved, this);\n    this.#workspace.addEventListener(Workspace.Workspace.Events.ProjectRemoved, this.projectRemoved, this);\n\n    this.targetManager.observeModels(SDK.DebuggerModel.DebuggerModel, this);\n  }\n\n  #setInitialBreakpoints(restoreInitialBreakpointCount: number): void {\n    let breakpointsToSkip = this.storage.breakpoints.size - restoreInitialBreakpointCount;\n    for (const storageState of this.storage.breakpoints.values()) {\n      if (breakpointsToSkip > 0) {\n        breakpointsToSkip--;\n        continue;\n      }\n      const storageId = Storage.computeId(storageState);\n      const breakpoint = new Breakpoint(this, null, storageState, BreakpointOrigin.OTHER);\n      this.#breakpointByStorageId.set(storageId, breakpoint);\n    }\n  }\n\n  static instance(opts: {\n    forceNew: boolean|null,\n    targetManager: SDK.TargetManager.TargetManager|null,\n    workspace: Workspace.Workspace.WorkspaceImpl|null,\n    debuggerWorkspaceBinding: Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding|null,\n    restoreInitialBreakpointCount?: number,\n  } = {forceNew: null, targetManager: null, workspace: null, debuggerWorkspaceBinding: null}): BreakpointManager {\n    const {forceNew, targetManager, workspace, debuggerWorkspaceBinding, restoreInitialBreakpointCount} = opts;\n    if (!breakpointManagerInstance || forceNew) {\n      if (!targetManager || !workspace || !debuggerWorkspaceBinding) {\n        throw new Error(\n            `Unable to create settings: targetManager, workspace, and debuggerWorkspaceBinding must be provided: ${\n                new Error().stack}`);\n      }\n\n      breakpointManagerInstance =\n          new BreakpointManager(targetManager, workspace, debuggerWorkspaceBinding, restoreInitialBreakpointCount);\n    }\n\n    return breakpointManagerInstance;\n  }\n\n  modelAdded(debuggerModel: SDK.DebuggerModel.DebuggerModel): void {\n    if (Root.Runtime.experiments.isEnabled(Root.Runtime.ExperimentName.INSTRUMENTATION_BREAKPOINTS)) {\n      debuggerModel.setSynchronizeBreakpointsCallback(this.restoreBreakpointsForScript.bind(this));\n    }\n  }\n\n  modelRemoved(debuggerModel: SDK.DebuggerModel.DebuggerModel): void {\n    debuggerModel.setSynchronizeBreakpointsCallback(null);\n  }\n\n  addUpdateBindingsCallback(callback: ((uiSourceCode: Workspace.UISourceCode.UISourceCode) => Promise<void>)): void {\n    this.#updateBindingsCallbacks.push(callback);\n  }\n\n  async copyBreakpoints(\n      fromSourceCode: Workspace.UISourceCode.UISourceCode,\n      toSourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    const toSourceCodeIsRemoved = toSourceCode.project().uiSourceCodeForURL(toSourceCode.url()) !== toSourceCode ||\n        this.#workspace.project(toSourceCode.project().id()) !== toSourceCode.project();\n    const breakpointItems = this.storage.breakpointItems(fromSourceCode.url(), fromSourceCode.contentType().name());\n    for (const item of breakpointItems) {\n      if (toSourceCodeIsRemoved) {\n        // If the target source code has been detached from the workspace, then no breakpoint should refer\n        // to that source code. Let us only update the storage, so that the breakpoints appear once\n        // the user binds the file system again.\n        this.storage.updateBreakpoint(\n            {...item, url: toSourceCode.url(), resourceTypeName: toSourceCode.contentType().name()});\n      } else {\n        await this.setBreakpoint(\n            toSourceCode, item.lineNumber, item.columnNumber, item.condition, item.enabled, item.isLogpoint,\n            BreakpointOrigin.OTHER);\n      }\n    }\n  }\n\n  // This method explicitly awaits the source map (if necessary) and the uiSourceCodes\n  // required to set all breakpoints that are related to this script.\n  async restoreBreakpointsForScript(script: SDK.Script.Script): Promise<void> {\n    if (!Root.Runtime.experiments.isEnabled(Root.Runtime.ExperimentName.INSTRUMENTATION_BREAKPOINTS)) {\n      return;\n    }\n    if (!script.sourceURL) {\n      return;\n    }\n\n    const uiSourceCode = await this.getUISourceCodeWithUpdatedBreakpointInfo(script);\n    if (this.#hasBreakpointsForUrl(script.sourceURL)) {\n      await this.#restoreBreakpointsForUrl(uiSourceCode);\n    }\n\n    const debuggerModel = script.debuggerModel;\n    // Handle source maps and the original sources.\n    const sourceMap = await debuggerModel.sourceMapManager().sourceMapForClientPromise(script);\n    if (sourceMap) {\n      for (const sourceURL of sourceMap.sourceURLs()) {\n        if (this.#hasBreakpointsForUrl(sourceURL)) {\n          const uiSourceCode = await this.debuggerWorkspaceBinding.uiSourceCodeForSourceMapSourceURLPromise(\n              debuggerModel, sourceURL, script.isContentScript());\n          await this.#restoreBreakpointsForUrl(uiSourceCode);\n        }\n      }\n    }\n\n    // Handle language plugins\n    const {pluginManager} = this.debuggerWorkspaceBinding;\n    const sourceUrls = await pluginManager.getSourcesForScript(script);\n    if (Array.isArray(sourceUrls)) {\n      for (const sourceURL of sourceUrls) {\n        if (this.#hasBreakpointsForUrl(sourceURL)) {\n          const uiSourceCode =\n              await this.debuggerWorkspaceBinding.uiSourceCodeForDebuggerLanguagePluginSourceURLPromise(\n                  debuggerModel, sourceURL);\n          assertNotNullOrUndefined(uiSourceCode);\n          await this.#restoreBreakpointsForUrl(uiSourceCode);\n        }\n      }\n    }\n  }\n\n  async getUISourceCodeWithUpdatedBreakpointInfo(script: SDK.Script.Script):\n      Promise<Workspace.UISourceCode.UISourceCode> {\n    const uiSourceCode = this.debuggerWorkspaceBinding.uiSourceCodeForScript(script);\n    assertNotNullOrUndefined(uiSourceCode);\n    await this.#updateBindings(uiSourceCode);\n    return uiSourceCode;\n  }\n\n  async #updateBindings(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    if (this.#updateBindingsCallbacks.length > 0) {\n      // It's possible to set breakpoints on files on the file system, and to have them\n      // hit whenever we navigate to a page that serves that file.\n      // To make sure that we have all breakpoint information moved from the file system\n      // to the served file, we need to update the bindings and await it. This will\n      // move the breakpoints from the FileSystem UISourceCode to the Network UiSourceCode.\n      const promises = [];\n      for (const callback of this.#updateBindingsCallbacks) {\n        promises.push(callback(uiSourceCode));\n      }\n      await Promise.all(promises);\n    }\n  }\n\n  async #restoreBreakpointsForUrl(uiSourceCode: Workspace.UISourceCode.UISourceCode): Promise<void> {\n    this.restoreBreakpoints(uiSourceCode);\n    const breakpoints = this.#breakpointByStorageId.values();\n    const affectedBreakpoints = Array.from(breakpoints).filter(x => x.uiSourceCodes.has(uiSourceCode));\n    // Make sure to properly await their updates\n    await Promise.all(affectedBreakpoints.map(bp => bp.updateBreakpoint()));\n  }\n\n  #hasBreakpointsForUrl(url: Platform.DevToolsPath.UrlString): boolean {\n    // We intentionally don't specify a resource type here, but just check\n    // generally whether there's any breakpoint matching the given `url`.\n    const breakpointItems = this.storage.breakpointItems(url);\n    return breakpointItems.length > 0;\n  }\n\n  static getScriptForInlineUiSourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): SDK.Script.Script|null {\n    const script = Bindings.DefaultScriptMapping.DefaultScriptMapping.scriptForUISourceCode(uiSourceCode);\n    if (script && script.isInlineScript() && !script.hasSourceURL) {\n      return script;\n    }\n    return null;\n  }\n\n  // For inline scripts, this function translates the line-column coordinates into the coordinates\n  // of the embedding document. For other scripts, it just returns unchanged line-column.\n  static breakpointLocationFromUiLocation(uiLocation: Workspace.UISourceCode.UILocation):\n      {lineNumber: number, columnNumber: number|undefined} {\n    const uiSourceCode = uiLocation.uiSourceCode;\n    const script = BreakpointManager.getScriptForInlineUiSourceCode(uiSourceCode);\n    const {lineNumber, columnNumber} = script ? script.relativeLocationToRawLocation(uiLocation) : uiLocation;\n    return {lineNumber, columnNumber};\n  }\n\n  // For inline scripts, this function translates the line-column coordinates of the embedding\n  // document into the coordinates of the script. Other UI source code coordinated are not\n  // affected.\n  static uiLocationFromBreakpointLocation(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode, lineNumber: number,\n      columnNumber: number|undefined): Workspace.UISourceCode.UILocation {\n    const script = BreakpointManager.getScriptForInlineUiSourceCode(uiSourceCode);\n    if (script) {\n      ({lineNumber, columnNumber} = script.rawLocationToRelativeLocation({lineNumber, columnNumber}));\n    }\n    return uiSourceCode.uiLocation(lineNumber, columnNumber);\n  }\n\n  // Returns true for if the given (raw) position is within the script or if the script\n  // is null. This is used to filter breakpoints if a script is known.\n  static isValidPositionInScript(lineNumber: number, columnNumber: number|undefined, script: SDK.Script.Script|null):\n      boolean {\n    if (!script) {\n      return true;\n    }\n    if (lineNumber < script.lineOffset || lineNumber > script.endLine) {\n      return false;\n    }\n    if (lineNumber === script.lineOffset && columnNumber && columnNumber < script.columnOffset) {\n      return false;\n    }\n    if (lineNumber === script.endLine && (!columnNumber || columnNumber >= script.endColumn)) {\n      return false;\n    }\n    return true;\n  }\n\n  private restoreBreakpoints(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    const script = BreakpointManager.getScriptForInlineUiSourceCode(uiSourceCode);\n    const url = script?.sourceURL ?? uiSourceCode.url();\n    if (!url) {\n      return;\n    }\n    const contentType = uiSourceCode.contentType();\n\n    this.storage.mute();\n    const breakpoints = this.storage.breakpointItems(url, contentType.name());\n    for (const breakpoint of breakpoints) {\n      const {lineNumber, columnNumber} = breakpoint;\n      if (!BreakpointManager.isValidPositionInScript(lineNumber, columnNumber, script)) {\n        continue;\n      }\n      this.innerSetBreakpoint(\n          uiSourceCode, lineNumber, columnNumber, breakpoint.condition, breakpoint.enabled, breakpoint.isLogpoint,\n          BreakpointOrigin.OTHER);\n    }\n    this.storage.unmute();\n  }\n\n  private uiSourceCodeAdded(event: Common.EventTarget.EventTargetEvent<Workspace.UISourceCode.UISourceCode>): void {\n    const uiSourceCode = event.data;\n    this.restoreBreakpoints(uiSourceCode);\n  }\n\n  private uiSourceCodeRemoved(event: Common.EventTarget.EventTargetEvent<Workspace.UISourceCode.UISourceCode>): void {\n    const uiSourceCode = event.data;\n    this.removeUISourceCode(uiSourceCode);\n  }\n\n  private projectRemoved(event: Common.EventTarget.EventTargetEvent<Workspace.Workspace.Project>): void {\n    const project = event.data;\n    for (const uiSourceCode of project.uiSourceCodes()) {\n      this.removeUISourceCode(uiSourceCode);\n    }\n  }\n\n  private removeUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    const breakpoints = this.#getAllBreakpointsForUISourceCode(uiSourceCode);\n    breakpoints.forEach(bp => bp.removeUISourceCode(uiSourceCode));\n  }\n\n  async setBreakpoint(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode, lineNumber: number, columnNumber: number|undefined,\n      condition: UserCondition, enabled: boolean, isLogpoint: boolean,\n      origin: BreakpointOrigin): Promise<Breakpoint|undefined> {\n    // As part of de-duplication, we always only show one uiSourceCode, but we may\n    // have several uiSourceCodes that correspond to the same\n    // file (but are attached to different targets), so set a breakpoint on all of them.\n    const compatibleUiSourceCodes = this.#workspace.findCompatibleUISourceCodes(uiSourceCode);\n\n    let primaryBreakpoint: Breakpoint|undefined;\n    for (const compatibleUiSourceCode of compatibleUiSourceCodes) {\n      const uiLocation = new Workspace.UISourceCode.UILocation(compatibleUiSourceCode, lineNumber, columnNumber);\n      const normalizedLocation = await this.debuggerWorkspaceBinding.normalizeUILocation(uiLocation);\n      const breakpointLocation = BreakpointManager.breakpointLocationFromUiLocation(normalizedLocation);\n\n      const breakpoint = this.innerSetBreakpoint(\n          normalizedLocation.uiSourceCode, breakpointLocation.lineNumber, breakpointLocation.columnNumber, condition,\n          enabled, isLogpoint, origin);\n\n      if (uiSourceCode === compatibleUiSourceCode) {\n        if (normalizedLocation.id() !== uiLocation.id()) {\n          // Only call this on the uiSourceCode that was initially selected for breakpoint setting.\n          void Common.Revealer.reveal(normalizedLocation);\n        }\n        primaryBreakpoint = breakpoint;\n      }\n    }\n\n    console.assert(primaryBreakpoint !== undefined, 'The passed uiSourceCode is expected to be a valid uiSourceCode');\n    return primaryBreakpoint;\n  }\n\n  private innerSetBreakpoint(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode, lineNumber: number, columnNumber: number|undefined,\n      condition: UserCondition, enabled: boolean, isLogpoint: boolean, origin: BreakpointOrigin): Breakpoint {\n    const url = BreakpointManager.getScriptForInlineUiSourceCode(uiSourceCode)?.sourceURL ?? uiSourceCode.url();\n    const resourceTypeName = uiSourceCode.contentType().name();\n    const storageState = {url, resourceTypeName, lineNumber, columnNumber, condition, enabled, isLogpoint};\n    const storageId = Storage.computeId(storageState);\n    let breakpoint = this.#breakpointByStorageId.get(storageId);\n    if (breakpoint) {\n      breakpoint.updateState(storageState);\n      breakpoint.addUISourceCode(uiSourceCode);\n      void breakpoint.updateBreakpoint();\n      return breakpoint;\n    }\n    breakpoint = new Breakpoint(this, uiSourceCode, storageState, origin);\n    this.#breakpointByStorageId.set(storageId, breakpoint);\n    return breakpoint;\n  }\n\n  findBreakpoint(uiLocation: Workspace.UISourceCode.UILocation): BreakpointLocation|null {\n    const breakpoints = this.#breakpointsForUISourceCode.get(uiLocation.uiSourceCode);\n    return breakpoints ? (breakpoints.get(uiLocation.id())) || null : null;\n  }\n\n  addHomeUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode, breakpoint: Breakpoint): void {\n    let breakpoints = this.#breakpointsForHomeUISourceCode.get(uiSourceCode);\n    if (!breakpoints) {\n      breakpoints = new Set();\n      this.#breakpointsForHomeUISourceCode.set(uiSourceCode, breakpoints);\n    }\n    breakpoints.add(breakpoint);\n  }\n\n  removeHomeUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode, breakpoint: Breakpoint): void {\n    const breakpoints = this.#breakpointsForHomeUISourceCode.get(uiSourceCode);\n    if (!breakpoints) {\n      return;\n    }\n    breakpoints.delete(breakpoint);\n    if (breakpoints.size === 0) {\n      this.#breakpointsForHomeUISourceCode.delete(uiSourceCode);\n    }\n  }\n\n  async possibleBreakpoints(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode,\n      textRange: TextUtils.TextRange.TextRange): Promise<Workspace.UISourceCode.UILocation[]> {\n    const rawLocationRanges =\n        await this.debuggerWorkspaceBinding.uiLocationRangeToRawLocationRanges(uiSourceCode, textRange);\n    const breakLocationLists = await Promise.all(rawLocationRanges.map(\n        ({start, end}) => start.debuggerModel.getPossibleBreakpoints(start, end, /* restrictToFunction */ false)));\n    const breakLocations = breakLocationLists.flat();\n\n    const uiLocations = new Map<string, Workspace.UISourceCode.UILocation>();\n    await Promise.all(breakLocations.map(async breakLocation => {\n      const uiLocation = await this.debuggerWorkspaceBinding.rawLocationToUILocation(breakLocation);\n      if (uiLocation === null) {\n        return;\n      }\n\n      // The \"canonical\" UI locations don't need to be in our `uiSourceCode`.\n      if (uiLocation.uiSourceCode !== uiSourceCode) {\n        return;\n      }\n\n      // Since we ask for all overlapping ranges above, we might also get breakable locations\n      // outside of the `textRange`.\n      if (!textRange.containsLocation(uiLocation.lineNumber, uiLocation.columnNumber ?? 0)) {\n        return;\n      }\n\n      uiLocations.set(uiLocation.id(), uiLocation);\n    }));\n    return [...uiLocations.values()];\n  }\n\n  breakpointLocationsForUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): BreakpointLocation[] {\n    const breakpoints = this.#breakpointsForUISourceCode.get(uiSourceCode);\n    return breakpoints ? Array.from(breakpoints.values()) : [];\n  }\n\n  #getAllBreakpointsForUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): Breakpoint[] {\n    const uiBreakpoints = this.breakpointLocationsForUISourceCode(uiSourceCode).map(b => b.breakpoint);\n    return uiBreakpoints.concat(Array.from(this.#breakpointsForHomeUISourceCode.get(uiSourceCode) ?? []));\n  }\n\n  allBreakpointLocations(): BreakpointLocation[] {\n    const result = [];\n    for (const breakpoints of this.#breakpointsForUISourceCode.values()) {\n      result.push(...breakpoints.values());\n    }\n    return result;\n  }\n\n  removeBreakpoint(breakpoint: Breakpoint, removeFromStorage: boolean): void {\n    const storageId = breakpoint.breakpointStorageId();\n    if (removeFromStorage) {\n      this.storage.removeBreakpoint(storageId);\n    }\n    this.#breakpointByStorageId.delete(storageId);\n  }\n\n  uiLocationAdded(breakpoint: Breakpoint, uiLocation: Workspace.UISourceCode.UILocation): void {\n    let breakpoints = this.#breakpointsForUISourceCode.get(uiLocation.uiSourceCode);\n    if (!breakpoints) {\n      breakpoints = new Map();\n      this.#breakpointsForUISourceCode.set(uiLocation.uiSourceCode, breakpoints);\n    }\n    const breakpointLocation = new BreakpointLocation(breakpoint, uiLocation);\n    breakpoints.set(uiLocation.id(), breakpointLocation);\n    this.dispatchEventToListeners(Events.BreakpointAdded, breakpointLocation);\n  }\n\n  uiLocationRemoved(breakpoint: Breakpoint, uiLocation: Workspace.UISourceCode.UILocation): void {\n    const breakpoints = this.#breakpointsForUISourceCode.get(uiLocation.uiSourceCode);\n    if (!breakpoints) {\n      return;\n    }\n    const breakpointLocation = breakpoints.get(uiLocation.id()) || null;\n    if (!breakpointLocation) {\n      return;\n    }\n    breakpoints.delete(uiLocation.id());\n    if (breakpoints.size === 0) {\n      this.#breakpointsForUISourceCode.delete(uiLocation.uiSourceCode);\n    }\n    this.dispatchEventToListeners(Events.BreakpointRemoved, breakpointLocation);\n  }\n\n  supportsConditionalBreakpoints(uiSourceCode: Workspace.UISourceCode.UISourceCode): boolean {\n    return this.debuggerWorkspaceBinding.supportsConditionalBreakpoints(uiSourceCode);\n  }\n}\n\nexport enum Events {\n  BreakpointAdded = 'breakpoint-added',\n  BreakpointRemoved = 'breakpoint-removed',\n}\n\nexport type EventTypes = {\n  [Events.BreakpointAdded]: BreakpointLocation,\n  [Events.BreakpointRemoved]: BreakpointLocation,\n};\n\nexport const enum DebuggerUpdateResult {\n  OK = 'OK',\n  ERROR_BREAKPOINT_CLASH = 'ERROR_BREAKPOINT_CLASH',\n  ERROR_BACKEND = 'ERROR_BACKEND',\n\n  // PENDING implies that the current update requires another re-run.\n  PENDING = 'PENDING',\n}\n\nexport type ScheduleUpdateResult =\n    DebuggerUpdateResult.OK|DebuggerUpdateResult.ERROR_BACKEND|DebuggerUpdateResult.ERROR_BREAKPOINT_CLASH;\n\nconst enum ResolveLocationResult {\n  OK = 'OK',\n  ERROR = 'ERROR',\n}\n\nexport class Breakpoint implements SDK.TargetManager.SDKModelObserver<SDK.DebuggerModel.DebuggerModel> {\n  readonly breakpointManager: BreakpointManager;\n  /** Bound locations */\n  readonly #uiLocations = new Set<Workspace.UISourceCode.UILocation>();\n  /** All known UISourceCodes with this url. This also includes UISourceCodes for the inline scripts embedded in a resource with this URL. */\n  readonly uiSourceCodes = new Set<Workspace.UISourceCode.UISourceCode>();\n  #storageState!: BreakpointStorageState;\n  #origin: BreakpointOrigin;\n  isRemoved = false;\n  /**\n   * Fallback positions in case a target doesn't have a script where this breakpoint would fit.\n   * The `ModelBreakpoint` sends this optimistically to a target in case a matching script is\n   * loaded later.\n   *\n   * Since every `ModelBreakpoint` can read/write this variable, it's slightly arbitrary. In\n   * general `lastResolvedState` contains the state of the last `ModelBreakpoint` that attempted\n   * to update the breakpoint(s) in the backend.\n   *\n   * The state gets populated from the storage if/when we set all breakpoints eagerly\n   * on debugger startup so that the backend sets the breakpoints as soon as possible\n   * (crbug.com/1442232, under a flag).\n   */\n  #lastResolvedState: Breakpoint.State|null = null;\n  readonly #modelBreakpoints = new Map<SDK.DebuggerModel.DebuggerModel, ModelBreakpoint>();\n\n  constructor(\n      breakpointManager: BreakpointManager, primaryUISourceCode: Workspace.UISourceCode.UISourceCode|null,\n      storageState: BreakpointStorageState, origin: BreakpointOrigin) {\n    this.breakpointManager = breakpointManager;\n    this.#origin = origin;\n\n    this.updateState(storageState);\n    if (primaryUISourceCode) {\n      // User is setting the breakpoint in an existing source.\n      console.assert(primaryUISourceCode.contentType().name() === storageState.resourceTypeName);\n      this.addUISourceCode(primaryUISourceCode);\n    } else {\n      // We are setting the breakpoint from storage.\n      this.#setLastResolvedStateFromStorage(storageState);\n    }\n\n    this.breakpointManager.targetManager.observeModels(SDK.DebuggerModel.DebuggerModel, this);\n  }\n\n  #setLastResolvedStateFromStorage(storageState: BreakpointStorageState): void {\n    if (storageState.resolvedState) {\n      this.#lastResolvedState = storageState.resolvedState.map(s => ({...s, scriptHash: ''}));\n    } else if (storageState.resourceTypeName === Common.ResourceType.resourceTypes.Script.name()) {\n      // If we are setting the breakpoint from storage (i.e., primaryUISourceCode is null),\n      // and the location is not source mapped, then set the last known state to\n      // the state from storage so that the breakpoints are pre-set into the backend eagerly.\n      this.#lastResolvedState = [{\n        url: storageState.url,\n        lineNumber: storageState.lineNumber,\n        columnNumber: storageState.columnNumber,\n        scriptHash: '',\n        condition: this.backendCondition(),\n      }];\n    }\n  }\n\n  getLastResolvedState(): Breakpoint.State|null {\n    return this.#lastResolvedState;\n  }\n\n  updateLastResolvedState(locations: Position[]|null): void {\n    this.#lastResolvedState = locations;\n\n    let locationsOrUndefined: ScriptBreakpointLocation[]|undefined = undefined;\n    if (locations) {\n      locationsOrUndefined = locations.map(\n          p => ({url: p.url, lineNumber: p.lineNumber, columnNumber: p.columnNumber, condition: p.condition}));\n    }\n\n    if (resolvedStateEqual(this.#storageState.resolvedState, locationsOrUndefined)) {\n      return;\n    }\n    this.#storageState = {...this.#storageState, resolvedState: locationsOrUndefined};\n    this.breakpointManager.storage.updateBreakpoint(this.#storageState);\n  }\n\n  get origin(): BreakpointOrigin {\n    return this.#origin;\n  }\n\n  async refreshInDebugger(): Promise<void> {\n    if (!this.isRemoved) {\n      const modelBreakpoints = Array.from(this.#modelBreakpoints.values());\n      await Promise.all(modelBreakpoints.map(async modelBreakpoint => {\n        await modelBreakpoint.resetBreakpoint();\n        return this.#updateModel(modelBreakpoint);\n      }));\n    }\n  }\n\n  modelAdded(debuggerModel: SDK.DebuggerModel.DebuggerModel): void {\n    const debuggerWorkspaceBinding = this.breakpointManager.debuggerWorkspaceBinding;\n    const modelBreakpoint = new ModelBreakpoint(debuggerModel, this, debuggerWorkspaceBinding);\n    this.#modelBreakpoints.set(debuggerModel, modelBreakpoint);\n    void this.#updateModel(modelBreakpoint);\n\n    debuggerModel.addEventListener(SDK.DebuggerModel.Events.DebuggerWasEnabled, this.#onDebuggerEnabled, this);\n    debuggerModel.addEventListener(SDK.DebuggerModel.Events.DebuggerWasDisabled, this.#onDebuggerDisabled, this);\n    debuggerModel.addEventListener(SDK.DebuggerModel.Events.ScriptSourceWasEdited, this.#onScriptWasEdited, this);\n  }\n\n  modelRemoved(debuggerModel: SDK.DebuggerModel.DebuggerModel): void {\n    const modelBreakpoint = this.#modelBreakpoints.get(debuggerModel);\n    modelBreakpoint?.cleanUpAfterDebuggerIsGone();\n    this.#modelBreakpoints.delete(debuggerModel);\n\n    this.#removeDebuggerModelListeners(debuggerModel);\n  }\n\n  #removeDebuggerModelListeners(debuggerModel: SDK.DebuggerModel.DebuggerModel): void {\n    debuggerModel.removeEventListener(SDK.DebuggerModel.Events.DebuggerWasEnabled, this.#onDebuggerEnabled, this);\n    debuggerModel.removeEventListener(SDK.DebuggerModel.Events.DebuggerWasDisabled, this.#onDebuggerDisabled, this);\n    debuggerModel.removeEventListener(SDK.DebuggerModel.Events.ScriptSourceWasEdited, this.#onScriptWasEdited, this);\n  }\n\n  #onDebuggerEnabled(event: Common.EventTarget.EventTargetEvent<SDK.DebuggerModel.DebuggerModel>): void {\n    const debuggerModel = event.data;\n    const model = this.#modelBreakpoints.get(debuggerModel);\n    if (model) {\n      void this.#updateModel(model);\n    }\n  }\n\n  #onDebuggerDisabled(event: Common.EventTarget.EventTargetEvent<SDK.DebuggerModel.DebuggerModel>): void {\n    const debuggerModel = event.data;\n    const model = this.#modelBreakpoints.get(debuggerModel);\n    model?.cleanUpAfterDebuggerIsGone();\n  }\n\n  async #onScriptWasEdited(\n      event: Common.EventTarget\n          .EventTargetEvent<{script: SDK.Script.Script, status: Protocol.Debugger.SetScriptSourceResponseStatus}>):\n      Promise<void> {\n    const {source: debuggerModel, data: {script, status}} = event;\n    if (status !== Protocol.Debugger.SetScriptSourceResponseStatus.Ok) {\n      return;\n    }\n\n    // V8 throws away breakpoints on all functions in a live edited script. Here we attempt to re-set them again at the\n    // same position. This is because we don't know what was edited and how the breakpoint should move, e.g. if the file\n    // was originally changed on the filesystem (via workspace).\n    // If the live edit originated in DevTools (in CodeMirror), then the `DebuggerPlugin` will remove the breakpoint\n    // wholesale and re-apply based on the diff.\n\n    console.assert(debuggerModel instanceof SDK.DebuggerModel.DebuggerModel);\n    const model = this.#modelBreakpoints.get(debuggerModel as SDK.DebuggerModel.DebuggerModel);\n    if (model?.wasSetIn(script.scriptId)) {\n      await model.resetBreakpoint();\n      void this.#updateModel(model);\n    }\n  }\n\n  modelBreakpoint(debuggerModel: SDK.DebuggerModel.DebuggerModel): ModelBreakpoint|undefined {\n    return this.#modelBreakpoints.get(debuggerModel);\n  }\n\n  addUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    if (!this.uiSourceCodes.has(uiSourceCode)) {\n      this.uiSourceCodes.add(uiSourceCode);\n      this.breakpointManager.addHomeUISourceCode(uiSourceCode, this);\n      if (!this.bound()) {\n        this.breakpointManager.uiLocationAdded(this, this.defaultUILocation(uiSourceCode));\n      }\n    }\n  }\n\n  clearUISourceCodes(): void {\n    if (!this.bound()) {\n      this.removeAllUnboundLocations();\n    }\n    for (const uiSourceCode of this.uiSourceCodes) {\n      this.removeUISourceCode(uiSourceCode);\n    }\n  }\n\n  removeUISourceCode(uiSourceCode: Workspace.UISourceCode.UISourceCode): void {\n    if (this.uiSourceCodes.has(uiSourceCode)) {\n      this.uiSourceCodes.delete(uiSourceCode);\n      this.breakpointManager.removeHomeUISourceCode(uiSourceCode, this);\n      if (!this.bound()) {\n        this.breakpointManager.uiLocationRemoved(this, this.defaultUILocation(uiSourceCode));\n      }\n    }\n\n    // Do we need to do this? Not sure if bound locations will leak...\n    if (this.bound()) {\n      for (const uiLocation of this.#uiLocations) {\n        if (uiLocation.uiSourceCode === uiSourceCode) {\n          this.#uiLocations.delete(uiLocation);\n          this.breakpointManager.uiLocationRemoved(this, uiLocation);\n        }\n      }\n\n      if (!this.bound() && !this.isRemoved) {\n        // Switch to unbound locations\n        this.addAllUnboundLocations();\n      }\n    }\n  }\n\n  url(): Platform.DevToolsPath.UrlString {\n    return this.#storageState.url;\n  }\n\n  lineNumber(): number {\n    return this.#storageState.lineNumber;\n  }\n\n  columnNumber(): number|undefined {\n    return this.#storageState.columnNumber;\n  }\n\n  uiLocationAdded(uiLocation: Workspace.UISourceCode.UILocation): void {\n    if (this.isRemoved) {\n      return;\n    }\n    if (!this.bound()) {\n      // This is our first bound location; remove all unbound locations\n      this.removeAllUnboundLocations();\n    }\n    this.#uiLocations.add(uiLocation);\n    this.breakpointManager.uiLocationAdded(this, uiLocation);\n  }\n\n  uiLocationRemoved(uiLocation: Workspace.UISourceCode.UILocation): void {\n    if (this.#uiLocations.has(uiLocation)) {\n      this.#uiLocations.delete(uiLocation);\n      this.breakpointManager.uiLocationRemoved(this, uiLocation);\n      if (!this.bound() && !this.isRemoved) {\n        this.addAllUnboundLocations();\n      }\n    }\n  }\n\n  enabled(): boolean {\n    return this.#storageState.enabled;\n  }\n\n  bound(): boolean {\n    return this.#uiLocations.size !== 0;\n  }\n\n  hasBoundScript(): boolean {\n    for (const uiSourceCode of this.uiSourceCodes) {\n      if (uiSourceCode.project().type() === Workspace.Workspace.projectTypes.Network) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  setEnabled(enabled: boolean): void {\n    this.updateState({...this.#storageState, enabled});\n  }\n\n  /**\n   * The breakpoint condition as entered by the user.\n   */\n  condition(): UserCondition {\n    return this.#storageState.condition;\n  }\n\n  /**\n   * The breakpoint condition as it is sent to V8.\n   */\n  backendCondition(): SDK.DebuggerModel.BackendCondition;\n  backendCondition(location: SDK.DebuggerModel.Location): Promise<SDK.DebuggerModel.BackendCondition>;\n  backendCondition(location?: SDK.DebuggerModel.Location): SDK.DebuggerModel.BackendCondition\n      |Promise<SDK.DebuggerModel.BackendCondition> {\n    const condition: string = this.condition();\n    if (condition === '') {\n      return '' as SDK.DebuggerModel.BackendCondition;\n    }\n\n    const addSourceUrl = (condition: string): SDK.DebuggerModel.BackendCondition => {\n      let sourceUrl = SDK.DebuggerModel.COND_BREAKPOINT_SOURCE_URL;\n      if (this.isLogpoint()) {\n        condition = `${LOGPOINT_PREFIX}${condition}${LOGPOINT_SUFFIX}`;\n        sourceUrl = SDK.DebuggerModel.LOGPOINT_SOURCE_URL;\n      }\n      return `${condition}\\n\\n//# sourceURL=${sourceUrl}` as SDK.DebuggerModel.BackendCondition;\n    };\n\n    if (location) {\n      return SourceMapScopes.NamesResolver.allVariablesAtPosition(location)\n          .then(\n              nameMap => nameMap.size > 0 ?\n                  Formatter.FormatterWorkerPool.formatterWorkerPool().javaScriptSubstitute(condition, nameMap) :\n                  condition)\n          .then(subsitutedCondition => addSourceUrl(subsitutedCondition), () => addSourceUrl(condition));\n    }\n    return addSourceUrl(condition);\n  }\n\n  setCondition(condition: UserCondition, isLogpoint: boolean): void {\n    this.updateState({...this.#storageState, condition, isLogpoint});\n  }\n\n  isLogpoint(): boolean {\n    return this.#storageState.isLogpoint;\n  }\n\n  get storageState(): BreakpointStorageState {\n    return this.#storageState;\n  }\n\n  updateState(newState: BreakpointStorageState): void {\n    // Only 'enabled', 'condition' and 'isLogpoint' can change (except during initialization).\n    if (this.#storageState &&\n        (this.#storageState.url !== newState.url || this.#storageState.lineNumber !== newState.lineNumber ||\n         this.#storageState.columnNumber !== newState.columnNumber)) {\n      throw new Error('Invalid breakpoint state update');\n    }\n    if (this.#storageState?.enabled === newState.enabled && this.#storageState?.condition === newState.condition &&\n        this.#storageState?.isLogpoint === newState.isLogpoint) {\n      return;\n    }\n    this.#storageState = newState;\n    this.breakpointManager.storage.updateBreakpoint(this.#storageState);\n    void this.updateBreakpoint();\n  }\n\n  async updateBreakpoint(): Promise<void> {\n    if (!this.bound()) {\n      this.removeAllUnboundLocations();\n      if (!this.isRemoved) {\n        this.addAllUnboundLocations();\n      }\n    }\n    return this.#updateModels();\n  }\n\n  async remove(keepInStorage: boolean): Promise<void> {\n    if (this.getIsRemoved()) {\n      return;\n    }\n    this.isRemoved = true;\n    const removeFromStorage = !keepInStorage;\n\n    for (const debuggerModel of this.#modelBreakpoints.keys()) {\n      this.#removeDebuggerModelListeners(debuggerModel);\n    }\n    await this.#updateModels();\n\n    this.breakpointManager.removeBreakpoint(this, removeFromStorage);\n    this.breakpointManager.targetManager.unobserveModels(SDK.DebuggerModel.DebuggerModel, this);\n    this.clearUISourceCodes();\n  }\n\n  breakpointStorageId(): string {\n    return Storage.computeId(this.#storageState);\n  }\n\n  private defaultUILocation(uiSourceCode: Workspace.UISourceCode.UISourceCode): Workspace.UISourceCode.UILocation {\n    return BreakpointManager.uiLocationFromBreakpointLocation(\n        uiSourceCode, this.#storageState.lineNumber, this.#storageState.columnNumber);\n  }\n\n  private removeAllUnboundLocations(): void {\n    for (const uiSourceCode of this.uiSourceCodes) {\n      this.breakpointManager.uiLocationRemoved(this, this.defaultUILocation(uiSourceCode));\n    }\n  }\n\n  private addAllUnboundLocations(): void {\n    for (const uiSourceCode of this.uiSourceCodes) {\n      this.breakpointManager.uiLocationAdded(this, this.defaultUILocation(uiSourceCode));\n    }\n  }\n\n  getUiSourceCodes(): Set<Workspace.UISourceCode.UISourceCode> {\n    return this.uiSourceCodes;\n  }\n\n  getIsRemoved(): boolean {\n    return this.isRemoved;\n  }\n\n  async #updateModels(): Promise<void> {\n    await Promise.all(Array.from(this.#modelBreakpoints.values()).map(model => this.#updateModel(model)));\n  }\n\n  async #updateModel(model: ModelBreakpoint): Promise<void> {\n    const result = await model.scheduleUpdateInDebugger();\n    if (result === DebuggerUpdateResult.ERROR_BACKEND) {\n      await this.remove(true /* keepInStorage */);\n    } else if (result === DebuggerUpdateResult.ERROR_BREAKPOINT_CLASH) {\n      await this.remove(false /* keepInStorage */);\n    }\n  }\n}\n\n/**\n * Represents a single `Breakpoint` for a specific target.\n *\n * The `BreakpointManager` unconditionally creates a `ModelBreakpoint` instance\n * for each target since any target could load a matching script after the fact.\n *\n * Each `ModelBreakpoint` can represent multiple actual breakpoints in V8. E.g.\n * inlining in WASM or multiple bundles containing the same utility function.\n *\n * This means each `Modelbreakpoint` represents 0 to n actual breakpoints in\n * for it's specific target.\n */\nexport class ModelBreakpoint {\n  #debuggerModel: SDK.DebuggerModel.DebuggerModel;\n  #breakpoint: Breakpoint;\n  readonly #debuggerWorkspaceBinding: Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding;\n  readonly #liveLocations = new Bindings.LiveLocation.LiveLocationPool();\n  readonly #uiLocations = new Map<Bindings.LiveLocation.LiveLocation, Workspace.UISourceCode.UILocation>();\n  #updateMutex = new Common.Mutex.Mutex();\n  #cancelCallback = false;\n  #currentState: Breakpoint.State|null = null;\n  #breakpointIds: Protocol.Debugger.BreakpointId[] = [];\n  /**\n   * We track all the script IDs this ModelBreakpoint was actually set in. This allows us\n   * to properly reset this ModelBreakpoint after a script was live edited.\n   */\n  #resolvedScriptIds = new Set<Protocol.Runtime.ScriptId>();\n\n  constructor(\n      debuggerModel: SDK.DebuggerModel.DebuggerModel, breakpoint: Breakpoint,\n      debuggerWorkspaceBinding: Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding) {\n    this.#debuggerModel = debuggerModel;\n    this.#breakpoint = breakpoint;\n    this.#debuggerWorkspaceBinding = debuggerWorkspaceBinding;\n  }\n\n  get currentState(): Breakpoint.State|null {\n    return this.#currentState;\n  }\n\n  resetLocations(): void {\n    for (const uiLocation of this.#uiLocations.values()) {\n      this.#breakpoint.uiLocationRemoved(uiLocation);\n    }\n\n    this.#uiLocations.clear();\n    this.#liveLocations.disposeAll();\n    this.#resolvedScriptIds.clear();\n  }\n\n  async scheduleUpdateInDebugger(): Promise<ScheduleUpdateResult> {\n    if (!this.#debuggerModel.debuggerEnabled()) {\n      return DebuggerUpdateResult.OK;\n    }\n\n    const release = await this.#updateMutex.acquire();\n    let result = DebuggerUpdateResult.PENDING;\n    while (result === DebuggerUpdateResult.PENDING) {\n      result = await this.#updateInDebugger();\n    }\n    release();\n    return result;\n  }\n\n  private scriptDiverged(): boolean {\n    for (const uiSourceCode of this.#breakpoint.getUiSourceCodes()) {\n      const scriptFile = this.#debuggerWorkspaceBinding.scriptFile(uiSourceCode, this.#debuggerModel);\n      if (scriptFile && scriptFile.hasDivergedFromVM()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  async #updateInDebugger(): Promise<DebuggerUpdateResult> {\n    if (this.#debuggerModel.target().isDisposed()) {\n      this.cleanUpAfterDebuggerIsGone();\n      return DebuggerUpdateResult.OK;\n    }\n    const lineNumber = this.#breakpoint.lineNumber();\n    const columnNumber = this.#breakpoint.columnNumber();\n    const condition = this.#breakpoint.backendCondition();\n\n    // Calculate the new state.\n    let newState: Breakpoint.State|null = null;\n    if (!this.#breakpoint.getIsRemoved() && this.#breakpoint.enabled() && !this.scriptDiverged()) {\n      let debuggerLocations: SDK.DebuggerModel.Location[] = [];\n      for (const uiSourceCode of this.#breakpoint.getUiSourceCodes()) {\n        const {lineNumber: uiLineNumber, columnNumber: uiColumnNumber} =\n            BreakpointManager.uiLocationFromBreakpointLocation(uiSourceCode, lineNumber, columnNumber);\n        const locations =\n            await Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance().uiLocationToRawLocations(\n                uiSourceCode, uiLineNumber, uiColumnNumber);\n        debuggerLocations = locations.filter(location => location.debuggerModel === this.#debuggerModel);\n        if (debuggerLocations.length) {\n          break;\n        }\n      }\n      if (debuggerLocations.length && debuggerLocations.every(loc => loc.script())) {\n        const positions = await Promise.all(debuggerLocations.map(async loc => {\n          const script = loc.script() as SDK.Script.Script;\n          const condition = await this.#breakpoint.backendCondition(loc);\n          return {\n            url: script.sourceURL,\n            scriptHash: script.hash,\n            lineNumber: loc.lineNumber,\n            columnNumber: loc.columnNumber,\n            condition,\n          };\n        }));\n        newState = positions.slice(0);  // Create a copy\n      } else if (!Root.Runtime.experiments.isEnabled(Root.Runtime.ExperimentName.INSTRUMENTATION_BREAKPOINTS)) {\n        // Use this fallback if we do not have instrumentation breakpoints enabled yet. This currently makes\n        // sure that v8 knows about the breakpoint and is able to restore it whenever the script is parsed.\n        const lastResolvedState = this.#breakpoint.getLastResolvedState();\n        if (lastResolvedState) {\n          // Re-use position information from fallback but use up-to-date condition.\n          newState = lastResolvedState.map(position => ({...position, condition}));\n        } else {\n          // TODO(bmeurer): This fallback doesn't make a whole lot of sense, we should\n          // at least signal a warning to the developer that this #breakpoint wasn't\n          // really resolved.\n          const position = {\n            url: this.#breakpoint.url(),\n            scriptHash: '',\n            lineNumber,\n            columnNumber,\n            condition,\n          };\n          newState = [position];\n        }\n      }\n    }\n    const hasBackendState = this.#breakpointIds.length;\n\n    // Case 1: Back-end has some breakpoints and the new state is a proper subset\n    // of the back-end state (in particular the new state contains at least a single\n    // position, meaning we're not removing the breakpoint completely).\n    if (hasBackendState && Breakpoint.State.subset(newState, this.#currentState)) {\n      return DebuggerUpdateResult.OK;\n    }\n\n    this.#breakpoint.updateLastResolvedState(newState);\n\n    // Case 2: State has changed, and the back-end has outdated information on old\n    // breakpoints.\n    if (hasBackendState) {\n      // Reset the current state.\n      await this.resetBreakpoint();\n      // Schedule another run of updates, to finally update to the new state.\n      return DebuggerUpdateResult.PENDING;\n    }\n\n    // Case 3: State is null (no breakpoints to set), and back-end is up to date\n    // (no info on breakpoints).\n    if (!newState) {\n      return DebuggerUpdateResult.OK;\n    }\n\n    // Case 4: State is not null, so we have breakpoints to set and the back-end\n    // has no information on breakpoints yet. Set the breakpoints.\n    const {breakpointIds, locations, serverError} = await this.#setBreakpointOnBackend(newState);\n\n    const maybeRescheduleUpdate =\n        serverError && this.#debuggerModel.debuggerEnabled() && !this.#debuggerModel.isReadyToPause();\n    if (!breakpointIds.length && maybeRescheduleUpdate) {\n      // TODO(crbug.com/1229541): This is a quickfix to prevent #breakpoints from\n      // disappearing if the Debugger is actually not enabled\n      // yet. This quickfix should be removed as soon as we have a solution\n      // to correctly synchronize the front-end with the inspector back-end.\n      return DebuggerUpdateResult.PENDING;\n    }\n\n    this.#currentState = newState;\n    if (this.#cancelCallback) {\n      this.#cancelCallback = false;\n      return DebuggerUpdateResult.OK;\n    }\n\n    // Something went wrong: we expect to have a non-null state, but have not received any\n    // breakpointIds from the back-end.\n    if (!breakpointIds.length) {\n      return DebuggerUpdateResult.ERROR_BACKEND;\n    }\n\n    this.#breakpointIds = breakpointIds;\n    this.#breakpointIds.forEach(\n        breakpointId => this.#debuggerModel.addBreakpointListener(breakpointId, this.breakpointResolved, this));\n    const resolvedResults = await Promise.all(locations.map(location => this.addResolvedLocation(location)));\n\n    // Breakpoint clash: the resolved location resolves to a different breakpoint, report an error.\n    if (resolvedResults.includes(ResolveLocationResult.ERROR)) {\n      return DebuggerUpdateResult.ERROR_BREAKPOINT_CLASH;\n    }\n    return DebuggerUpdateResult.OK;\n  }\n\n  async #setBreakpointOnBackend(positions: Breakpoint.State): Promise<{\n    breakpointIds: Protocol.Debugger.BreakpointId[],\n    locations: SDK.DebuggerModel.Location[],\n    serverError: boolean,\n  }> {\n    const results = await Promise.all(positions.map(pos => {\n      if (pos.url) {\n        return this.#debuggerModel.setBreakpointByURL(pos.url, pos.lineNumber, pos.columnNumber, pos.condition);\n      }\n      return this.#debuggerModel.setBreakpointInAnonymousScript(\n          pos.scriptHash as string, pos.lineNumber, pos.columnNumber, pos.condition);\n    }));\n    const breakpointIds: Protocol.Debugger.BreakpointId[] = [];\n    let locations: SDK.DebuggerModel.Location[] = [];\n    let serverError = false;\n    for (const result of results) {\n      if (result.breakpointId) {\n        breakpointIds.push(result.breakpointId);\n        locations = locations.concat(result.locations);\n      } else {\n        serverError = true;\n      }\n    }\n    return {breakpointIds, locations, serverError};\n  }\n\n  async resetBreakpoint(): Promise<void> {\n    if (!this.#breakpointIds.length) {\n      return;\n    }\n    this.resetLocations();\n    await Promise.all(this.#breakpointIds.map(id => this.#debuggerModel.removeBreakpoint(id)));\n    this.didRemoveFromDebugger();\n    this.#currentState = null;\n  }\n\n  private didRemoveFromDebugger(): void {\n    if (this.#cancelCallback) {\n      this.#cancelCallback = false;\n      return;\n    }\n\n    this.resetLocations();\n    this.#breakpointIds.forEach(\n        breakpointId => this.#debuggerModel.removeBreakpointListener(breakpointId, this.breakpointResolved, this));\n    this.#breakpointIds = [];\n  }\n\n  private async breakpointResolved({data: location}: Common.EventTarget.EventTargetEvent<SDK.DebuggerModel.Location>):\n      Promise<void> {\n    const result = await this.addResolvedLocation(location);\n    if (result === ResolveLocationResult.ERROR) {\n      await this.#breakpoint.remove(false /* keepInStorage */);\n    }\n  }\n\n  private async locationUpdated(liveLocation: Bindings.LiveLocation.LiveLocation): Promise<void> {\n    const oldUILocation = this.#uiLocations.get(liveLocation);\n    const uiLocation = await liveLocation.uiLocation();\n\n    if (oldUILocation) {\n      this.#breakpoint.uiLocationRemoved(oldUILocation);\n    }\n\n    if (uiLocation) {\n      this.#uiLocations.set(liveLocation, uiLocation);\n      this.#breakpoint.uiLocationAdded(uiLocation);\n    } else {\n      this.#uiLocations.delete(liveLocation);\n    }\n  }\n\n  private async addResolvedLocation(location: SDK.DebuggerModel.Location): Promise<ResolveLocationResult> {\n    this.#resolvedScriptIds.add(location.scriptId);\n    const uiLocation = await this.#debuggerWorkspaceBinding.rawLocationToUILocation(location);\n    if (!uiLocation) {\n      return ResolveLocationResult.OK;\n    }\n    const breakpointLocation = this.#breakpoint.breakpointManager.findBreakpoint(uiLocation);\n    if (breakpointLocation && breakpointLocation.breakpoint !== this.#breakpoint) {\n      // location clash\n      return ResolveLocationResult.ERROR;\n    }\n    await this.#debuggerWorkspaceBinding.createLiveLocation(\n        location, this.locationUpdated.bind(this), this.#liveLocations);\n    return ResolveLocationResult.OK;\n  }\n\n  cleanUpAfterDebuggerIsGone(): void {\n    this.#cancelCallback = true;\n    this.resetLocations();\n    this.#currentState = null;\n    if (this.#breakpointIds.length) {\n      this.didRemoveFromDebugger();\n    }\n  }\n\n  /** @returns true, iff this `ModelBreakpoint` was set (at some point) in `scriptId` */\n  wasSetIn(scriptId: Protocol.Runtime.ScriptId): boolean {\n    return this.#resolvedScriptIds.has(scriptId);\n  }\n}\n\n/**\n * A concrete breakpoint position in a specific target. Each `ModelBreakpoint`\n * consists of multiple of these.\n *\n * Note that a `Position` only denotes where we *want* to set a breakpoint, not\n * where it was actually set by V8 after the fact.\n */\ninterface Position {\n  url: Platform.DevToolsPath.UrlString;\n  scriptHash: string;\n  lineNumber: number;\n  columnNumber?: number;\n  condition: SDK.DebuggerModel.BackendCondition;\n}\n\nexport const enum BreakpointOrigin {\n  USER_ACTION = 'USER_ACTION',\n  OTHER = 'RESTORED',\n}\n\nexport namespace Breakpoint {\n\n  export type State = Position[];\n  export namespace State {\n    export function subset(stateA?: State|null, stateB?: State|null): boolean {\n      if (stateA === stateB) {\n        return true;\n      }\n      if (!stateA || !stateB) {\n        return false;\n      }\n      if (stateA.length === 0) {\n        return false;\n      }\n      for (const positionA of stateA) {\n        if (stateB.find(\n                positionB => positionA.url === positionB.url && positionA.scriptHash === positionB.scriptHash &&\n                    positionA.lineNumber === positionB.lineNumber &&\n                    positionA.columnNumber === positionB.columnNumber &&\n                    positionA.condition === positionB.condition) === undefined) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n}\n\nclass Storage {\n  readonly setting: Common.Settings.Setting<BreakpointStorageState[]>;\n  readonly breakpoints: Map<string, BreakpointStorageState>;\n  #muted: boolean;\n\n  constructor() {\n    this.setting = Common.Settings.Settings.instance().createLocalSetting('breakpoints', []);\n    this.breakpoints = new Map();\n    this.#muted = false;\n    for (const breakpoint of this.setting.get()) {\n      this.breakpoints.set(Storage.computeId(breakpoint), breakpoint);\n    }\n  }\n\n  mute(): void {\n    this.#muted = true;\n  }\n\n  unmute(): void {\n    this.#muted = false;\n  }\n\n  breakpointItems(url: Platform.DevToolsPath.UrlString, resourceTypeName?: string): BreakpointStorageState[] {\n    const breakpoints = [];\n    for (const breakpoint of this.breakpoints.values()) {\n      if (breakpoint.url !== url) {\n        continue;\n      }\n      if (breakpoint.resourceTypeName !== resourceTypeName && resourceTypeName !== undefined) {\n        continue;\n      }\n      breakpoints.push(breakpoint);\n    }\n    return breakpoints;\n  }\n\n  updateBreakpoint(storageState: BreakpointStorageState): void {\n    if (this.#muted) {\n      return;\n    }\n    const storageId = Storage.computeId(storageState);\n    if (!storageId) {\n      return;\n    }\n    // Delete the breakpoint and re-insert it so that it is moved to the last position in the iteration order.\n    this.breakpoints.delete(storageId);\n    this.breakpoints.set(storageId, storageState);\n    this.save();\n  }\n\n  removeBreakpoint(storageId: string): void {\n    if (this.#muted) {\n      return;\n    }\n    this.breakpoints.delete(storageId);\n    this.save();\n  }\n\n  private save(): void {\n    this.setting.set(Array.from(this.breakpoints.values()));\n  }\n\n  static computeId({url, resourceTypeName, lineNumber, columnNumber}: BreakpointStorageState): string {\n    if (!url) {\n      return '';\n    }\n    let id = `${url}:${resourceTypeName}:${lineNumber}`;\n    if (columnNumber !== undefined) {\n      id += `:${columnNumber}`;\n    }\n    return id;\n  }\n}\n\nfunction resolvedStateEqual(\n    lhs: ScriptBreakpointLocation[]|undefined, rhs: ScriptBreakpointLocation[]|undefined): boolean {\n  if (lhs === rhs) {\n    return true;\n  }\n  if (!lhs || !rhs || lhs.length !== rhs.length) {\n    return false;\n  }\n  for (let i = 0; i < lhs.length; i++) {\n    const lhsLoc = lhs[i];\n    const rhsLoc = rhs[i];\n    if (lhsLoc.url !== rhsLoc.url || lhsLoc.lineNumber !== rhsLoc.lineNumber ||\n        lhsLoc.columnNumber !== rhsLoc.columnNumber || lhsLoc.condition !== rhsLoc.condition) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * A breakpoint condition as entered by the user. We use the type to\n * distinguish from {@link SDK.DebuggerModel.BackendCondition}.\n */\nexport type UserCondition = Platform.Brand.Brand<string, 'UserCondition'>;\nexport const EMPTY_BREAKPOINT_CONDITION = '' as UserCondition;\nexport const NEVER_PAUSE_HERE_CONDITION = 'false' as UserCondition;\n\nexport interface ScriptBreakpointLocation {\n  readonly url: Platform.DevToolsPath.UrlString;\n  readonly lineNumber: number;\n  readonly columnNumber?: number;\n  readonly condition: SDK.DebuggerModel.BackendCondition;\n}\n\n/**\n * All the data for a single `Breakpoint` thats stored in the settings.\n * Whenever any of these change, we need to update the settings.\n */\nexport interface BreakpointStorageState {\n  readonly url: Platform.DevToolsPath.UrlString;\n  readonly resourceTypeName: string;\n  readonly lineNumber: number;\n  readonly columnNumber?: number;\n  readonly condition: UserCondition;\n  readonly enabled: boolean;\n  readonly isLogpoint: boolean;\n  readonly resolvedState?: ScriptBreakpointLocation[];\n}\n\nexport class BreakpointLocation {\n  readonly breakpoint: Breakpoint;\n  readonly uiLocation: Workspace.UISourceCode.UILocation;\n\n  constructor(breakpoint: Breakpoint, uiLocation: Workspace.UISourceCode.UILocation) {\n    this.breakpoint = breakpoint;\n    this.uiLocation = uiLocation;\n  }\n}\n\nconst LOGPOINT_PREFIX = '/** DEVTOOLS_LOGPOINT */ console.log(';\nconst LOGPOINT_SUFFIX = ')';\n"]}