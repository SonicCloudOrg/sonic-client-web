{"version":3,"file":"BreakpointManager.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/breakpoints/BreakpointManager.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {type Chrome} from '../../../extension-api/ExtensionAPI.js';\nimport * as Common from '../../core/common/common.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {TestPlugin} from '../../testing/LanguagePluginHelpers.js';\nimport {\n  clearMockConnectionResponseHandler,\n  describeWithMockConnection,\n  dispatchEvent,\n  registerListenerOnOutgoingMessage,\n  setMockConnectionResponseHandler,\n} from '../../testing/MockConnection.js';\nimport {MockProtocolBackend} from '../../testing/MockScopeChain.js';\nimport {createFileSystemFileForPersistenceTests} from '../../testing/PersistenceHelpers.js';\nimport {getInitializedResourceTreeModel} from '../../testing/ResourceTreeHelpers.js';\nimport {encodeSourceMap} from '../../testing/SourceMapEncoder.js';\nimport {setupPageResourceLoaderForSourceMap} from '../../testing/SourceMapHelpers.js';\nimport {\n  createContentProviderUISourceCode,\n  createFakeScriptMapping,\n} from '../../testing/UISourceCodeHelpers.js';\nimport * as Bindings from '../bindings/bindings.js';\nimport * as Breakpoints from '../breakpoints/breakpoints.js';\nimport * as Persistence from '../persistence/persistence.js';\nimport * as TextUtils from '../text_utils/text_utils.js';\nimport * as Workspace from '../workspace/workspace.js';\n\ndescribeWithMockConnection('BreakpointManager', () => {\n  const URL_HTML = 'http://site/index.html' as Platform.DevToolsPath.UrlString;\n  const INLINE_SCRIPT_START = 41;\n  const BREAKPOINT_SCRIPT_LINE = 1;\n  const INLINE_BREAKPOINT_RAW_LINE = BREAKPOINT_SCRIPT_LINE + INLINE_SCRIPT_START;\n  const BREAKPOINT_RESULT_COLUMN = 5;\n  const inlineScriptDescription = {\n    url: URL_HTML,\n    content: 'console.log(1);\\nconsole.log(2);\\n',\n    startLine: INLINE_SCRIPT_START,\n    startColumn: 0,\n    hasSourceURL: false,\n    embedderName: URL_HTML,\n  };\n\n  const URL = 'http://site/script.js' as Platform.DevToolsPath.UrlString;\n  const scriptDescription = {\n    url: URL,\n    content: 'console.log(1);\\nconsole.log(2);\\n',\n    startLine: 0,\n    startColumn: 0,\n    hasSourceURL: false,\n  };\n\n  const DEFAULT_BREAKPOINT:\n      [Breakpoints.BreakpointManager.UserCondition, boolean, boolean, Breakpoints.BreakpointManager.BreakpointOrigin] =\n          [\n            Breakpoints.BreakpointManager.EMPTY_BREAKPOINT_CONDITION,\n            true,   // enabled\n            false,  // isLogpoint\n            Breakpoints.BreakpointManager.BreakpointOrigin.OTHER,\n          ];\n\n  // For tests with source maps.\n  const ORIGINAL_SCRIPT_SOURCES_CONTENT = 'function foo() {\\n  console.log(\\'Hello\\');\\n}\\n';\n  const COMPILED_SCRIPT_SOURCES_CONTENT = 'function foo(){console.log(\"Hello\")}';\n  const SOURCE_MAP_URL = 'https://site/script.js.map' as Platform.DevToolsPath.UrlString;\n  const ORIGINAL_SCRIPT_SOURCE_URL = 'https://site/original-script.js' as Platform.DevToolsPath.UrlString;\n\n  // Created with `terser -m -o script.min.js --source-map \"includeSources;url=script.min.js.map\" original-script.js`\n  const sourceMapContent = JSON.stringify({\n    'version': 3,\n    'names': ['foo', 'console', 'log'],\n    'sources': ['/original-script.js'],\n    'sourcesContent': [ORIGINAL_SCRIPT_SOURCES_CONTENT],\n    'mappings': 'AAAA,SAASA,MACPC,QAAQC,IAAI,QACd',\n  });\n\n  let target: SDK.Target.Target;\n  let backend: MockProtocolBackend;\n  let breakpointManager: Breakpoints.BreakpointManager.BreakpointManager;\n  let debuggerWorkspaceBinding: Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding;\n  let targetManager: SDK.TargetManager.TargetManager;\n  let workspace: Workspace.Workspace.WorkspaceImpl;\n  beforeEach(async () => {\n    workspace = Workspace.Workspace.WorkspaceImpl.instance();\n    targetManager = SDK.TargetManager.TargetManager.instance();\n    const resourceMapping = new Bindings.ResourceMapping.ResourceMapping(targetManager, workspace);\n    debuggerWorkspaceBinding = Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance({\n      forceNew: true,\n      resourceMapping,\n      targetManager,\n    });\n    Bindings.IgnoreListManager.IgnoreListManager.instance({forceNew: true, debuggerWorkspaceBinding});\n    backend = new MockProtocolBackend();\n    target = createTarget();\n    SDK.TargetManager.TargetManager.instance().setScopeTarget(target);\n\n    // Wait for the resource tree model to load; otherwise, our uiSourceCodes could be asynchronously\n    // invalidated during the test.\n    await getInitializedResourceTreeModel(target);\n\n    breakpointManager = Breakpoints.BreakpointManager.BreakpointManager.instance(\n        {forceNew: true, targetManager, workspace, debuggerWorkspaceBinding});\n  });\n\n  async function uiSourceCodeFromScript(debuggerModel: SDK.DebuggerModel.DebuggerModel, script: SDK.Script.Script):\n      Promise<Workspace.UISourceCode.UISourceCode|null> {\n    const rawLocation = debuggerModel.createRawLocation(script, 0, 0);\n    const uiLocation = await breakpointManager.debuggerWorkspaceBinding.rawLocationToUILocation(rawLocation);\n    return uiLocation?.uiSourceCode ?? null;\n  }\n\n  describe('possibleBreakpoints', () => {\n    it('correctly asks the back-end for breakable positions', async () => {\n      const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n      assert.exists(debuggerModel);\n\n      // Create an inline script and get a UI source code instance for it.\n      const script = await backend.addScript(target, scriptDescription, null);\n      const {scriptId} = script;\n      const uiSourceCode = await uiSourceCodeFromScript(debuggerModel, script);\n      assert.exists(uiSourceCode);\n\n      function getPossibleBreakpointsStub(_request: Protocol.Debugger.GetPossibleBreakpointsRequest):\n          Protocol.Debugger.GetPossibleBreakpointsResponse {\n        return {\n          locations: [\n            {scriptId, lineNumber: 0, columnNumber: 4},\n            {scriptId, lineNumber: 0, columnNumber: 8},\n          ],\n          getError() {\n            return undefined;\n          },\n        };\n      }\n      const getPossibleBreakpoints = sinon.spy(getPossibleBreakpointsStub);\n      setMockConnectionResponseHandler('Debugger.getPossibleBreakpoints', getPossibleBreakpoints);\n\n      const uiTextRange = new TextUtils.TextRange.TextRange(0, 0, 1, 0);\n      const possibleBreakpoints = await breakpointManager.possibleBreakpoints(uiSourceCode, uiTextRange);\n\n      assert.lengthOf(possibleBreakpoints, 2);\n      assert.strictEqual(possibleBreakpoints[0].uiSourceCode, uiSourceCode);\n      assert.strictEqual(possibleBreakpoints[0].lineNumber, 0);\n      assert.strictEqual(possibleBreakpoints[0].columnNumber, 4);\n      assert.strictEqual(possibleBreakpoints[1].uiSourceCode, uiSourceCode);\n      assert.strictEqual(possibleBreakpoints[1].lineNumber, 0);\n      assert.strictEqual(possibleBreakpoints[1].columnNumber, 8);\n      assert.isTrue(getPossibleBreakpoints.calledOnceWith(sinon.match({\n        start: {\n          scriptId,\n          lineNumber: 0,\n          columnNumber: 0,\n        },\n        end: {\n          scriptId,\n          lineNumber: 1,\n          columnNumber: 0,\n        },\n        restrictToFunction: false,\n      })));\n    });\n  });\n\n  describe('Breakpoints', () => {\n    it('are removed and kept in storage after a back-end error', async () => {\n      // Simulates a back-end error.\n      const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n      assert.exists(debuggerModel);\n\n      if (!debuggerModel.isReadyToPause()) {\n        await debuggerModel.once(SDK.DebuggerModel.Events.DebuggerIsReadyToPause);\n      }\n\n      // Create an inline script and get a UI source code instance for it.\n      const script = await backend.addScript(target, scriptDescription, null);\n      const uiSourceCode = await uiSourceCodeFromScript(debuggerModel, script);\n      assert.exists(uiSourceCode);\n\n      // Set up the backend to respond with an error.\n      backend.setBreakpointByUrlToFail(URL, BREAKPOINT_SCRIPT_LINE);\n\n      // Set the breakpoint.\n      const breakpoint =\n          await breakpointManager.setBreakpoint(uiSourceCode, BREAKPOINT_SCRIPT_LINE, 2, ...DEFAULT_BREAKPOINT);\n      assert.exists(breakpoint);\n\n      const removedSpy = sinon.spy(breakpoint, 'remove');\n      await breakpoint.updateBreakpoint();\n\n      // Breakpoint was removed and is kept in storage.\n      assert.isTrue(breakpoint.getIsRemoved());\n      assert.isTrue(removedSpy.calledWith(true));\n    });\n\n    it('are only set if the uiSourceCode is still valid (not removed)', async () => {\n      const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n      assert.exists(debuggerModel);\n\n      // Add a script.\n      const script = await backend.addScript(target, scriptDescription, null);\n      const uiSourceCode = await uiSourceCodeFromScript(debuggerModel, script);\n      assert.exists(uiSourceCode);\n\n      // Remove the project (and thus the uiSourceCode).\n      Workspace.Workspace.WorkspaceImpl.instance().removeProject(uiSourceCode.project());\n\n      // Set the breakpoint.\n      const breakpoint =\n          await breakpointManager.setBreakpoint(uiSourceCode, BREAKPOINT_SCRIPT_LINE, 2, ...DEFAULT_BREAKPOINT);\n\n      // We should not expect any breakpoints to be set.\n      assert.isUndefined(breakpoint);\n      const breakLocations = breakpointManager.allBreakpointLocations();\n      assert.lengthOf(breakLocations, 0);\n    });\n  });\n\n  describe('Breakpoint#backendCondition()', () => {\n    function createBreakpoint(condition: string, isLogpoint: boolean): Breakpoints.BreakpointManager.Breakpoint {\n      const {uiSourceCode} = createContentProviderUISourceCode({url: URL, mimeType: 'text/javascript'});\n      const storageState = {\n        url: URL,\n        resourceTypeName: uiSourceCode.contentType().name(),\n        lineNumber: 5,\n        condition: condition as Breakpoints.BreakpointManager.UserCondition,\n        enabled: true,\n        isLogpoint,\n      };\n      return new Breakpoints.BreakpointManager.Breakpoint(\n          breakpointManager, uiSourceCode, storageState, Breakpoints.BreakpointManager.BreakpointOrigin.USER_ACTION);\n    }\n\n    it('wraps logpoints in console.log', () => {\n      const breakpoint = createBreakpoint('x', /* isLogpoint */ true);\n\n      assert.include(breakpoint.backendCondition(), 'console.log(x)');\n    });\n\n    it('leaves conditional breakpoints alone', () => {\n      const breakpoint = createBreakpoint('x === 42', /* isLogpoint */ false);\n\n      // Split of sourceURL.\n      const lines = breakpoint.backendCondition().split('\\n');\n      assert.strictEqual(lines[0], 'x === 42');\n    });\n\n    it('has a sourceURL for logpoints', () => {\n      const breakpoint = createBreakpoint('x', /* isLogpoint */ true);\n\n      assert.include(breakpoint.backendCondition(), '//# sourceURL=');\n    });\n\n    it('has a sourceURL for conditional breakpoints', () => {\n      const breakpoint = createBreakpoint('x === 42', /* isLogpoint */ false);\n\n      assert.include(breakpoint.backendCondition(), '//# sourceURL=');\n    });\n\n    it('has no sourceURL for normal breakpoints', () => {\n      const breakpoint = createBreakpoint('', /* isLogpoint */ false);\n\n      assert.notInclude(breakpoint.backendCondition(), '//# sourceURL=');\n    });\n\n    it('substitutes source-mapped variables', async () => {\n      const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n      assert.exists(debuggerModel);\n\n      const scriptInfo = {url: URL, content: 'function adder(n,r){const t=n+r;return t}'};\n      // Created with `terser -m -o script.min.js --source-map \"includeSources;url=script.min.js.map\" original-script.js`\n      const sourceMapContent = JSON.stringify({\n        'version': 3,\n        'names': ['adder', 'param1', 'param2', 'result'],\n        'sources': ['/original-script.js'],\n        'sourcesContent':\n            ['function adder(param1, param2) {\\n  const result = param1 + param2;\\n  return result;\\n}\\n\\n'],\n        'mappings': 'AAAA,SAASA,MAAMC,EAAQC,GACrB,MAAMC,EAASF,EAASC,EACxB,OAAOC,CACT',\n      });\n      const sourceMapInfo = {url: SOURCE_MAP_URL, content: sourceMapContent};\n      const script = await backend.addScript(target, scriptInfo, sourceMapInfo);\n\n      // Get the uiSourceCode for the original source.\n      const uiSourceCode = await debuggerWorkspaceBinding.uiSourceCodeForSourceMapSourceURLPromise(\n          debuggerModel, ORIGINAL_SCRIPT_SOURCE_URL, script.isContentScript());\n      assert.exists(uiSourceCode);\n\n      // Mock out \"Debugger.setBreakpointByUrl and just echo back the request\".\n      const cdpSetBreakpointPromise = new Promise<Protocol.Debugger.SetBreakpointByUrlRequest>(res => {\n        clearMockConnectionResponseHandler('Debugger.setBreakpointByUrl');\n        setMockConnectionResponseHandler('Debugger.setBreakpointByUrl', request => {\n          res(request);\n          return {};\n        });\n      });\n\n      // Set the breakpoint on the `const result = ...` line with a condition using\n      // \"authored\" variable names.\n      const breakpoint = await breakpointManager.setBreakpoint(\n          uiSourceCode, 1, 0, 'param1 > 0' as Breakpoints.BreakpointManager.UserCondition, /* enabled */ true,\n          /* isLogpoint */ false, Breakpoints.BreakpointManager.BreakpointOrigin.USER_ACTION);\n      assert.exists(breakpoint);\n\n      await breakpoint.updateBreakpoint();\n\n      const {url, lineNumber, columnNumber, condition} = await cdpSetBreakpointPromise;\n      assert.strictEqual(url, URL);\n      assert.strictEqual(lineNumber, 0);\n      assert.strictEqual(columnNumber, 20);\n      assert.strictEqual(condition, 'n > 0\\n\\n//# sourceURL=debugger://breakpoint');\n    });\n  });\n\n  it('substitutes source-mapped variables for the same original script in different bundles correctly', async () => {\n    const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n    assert.exists(debuggerModel);\n\n    // Create two 'bundles' that are identical modulo variable names.\n    const url1 = 'http://site/script1.js' as Platform.DevToolsPath.UrlString;\n    const url2 = 'http://site/script2.js' as Platform.DevToolsPath.UrlString;\n    const scriptInfo1 = {url: url1, content: 'function adder(n,r){const t=n+r;return t}'};\n    const scriptInfo2 = {url: url2, content: 'function adder(o,p){const t=o+p;return t}'};\n\n    // The source map is the same for both 'bundles'.\n    // Created with `terser -m -o script.min.js --source-map \"includeSources;url=script.min.js.map\" original-script.js`\n    const sourceMapContent = JSON.stringify({\n      'version': 3,\n      'names': ['adder', 'param1', 'param2', 'result'],\n      'sources': ['/original-script.js'],\n      'sourcesContent':\n          ['function adder(param1, param2) {\\n  const result = param1 + param2;\\n  return result;\\n}\\n\\n'],\n      'mappings': 'AAAA,SAASA,MAAMC,EAAQC,GACrB,MAAMC,EAASF,EAASC,EACxB,OAAOC,CACT',\n    });\n    const sourceMapInfo = {url: SOURCE_MAP_URL, content: sourceMapContent};\n    await Promise.all([\n      backend.addScript(target, scriptInfo1, sourceMapInfo),\n      backend.addScript(target, scriptInfo2, sourceMapInfo),\n    ]);\n\n    // Get the uiSourceCode for the original source.\n    const uiSourceCode = await debuggerWorkspaceBinding.uiSourceCodeForSourceMapSourceURLPromise(\n        debuggerModel, ORIGINAL_SCRIPT_SOURCE_URL, /* isContentScript */ false);\n    assert.exists(uiSourceCode);\n\n    // Mock out \"Debugger.setBreakpointByUrl and echo back the first two 'Debugger.setBreakpointByUrl' requests.\n    const cdpSetBreakpointPromise = new Promise<Map<string, Protocol.Debugger.SetBreakpointByUrlRequest>>(res => {\n      clearMockConnectionResponseHandler('Debugger.setBreakpointByUrl');\n      const requests = new Map<string, Protocol.Debugger.SetBreakpointByUrlRequest>();\n      setMockConnectionResponseHandler('Debugger.setBreakpointByUrl', request => {\n        requests.set(request.url, request);\n        if (requests.size === 2) {\n          res(requests);\n        }\n        return {};\n      });\n    });\n\n    // Set the breakpoint on the `const result = ...` line with a condition using\n    // \"authored\" variable names.\n    const breakpoint = await breakpointManager.setBreakpoint(\n        uiSourceCode, 1, 0, 'param1 > 0' as Breakpoints.BreakpointManager.UserCondition, /* enabled */ true,\n        /* isLogpoint */ false, Breakpoints.BreakpointManager.BreakpointOrigin.USER_ACTION);\n    assert.exists(breakpoint);\n\n    await breakpoint.updateBreakpoint();\n\n    const requests = await cdpSetBreakpointPromise;\n    const req1 = requests.get(url1);\n    assert.exists(req1);\n    assert.strictEqual(req1.url, url1);\n    assert.strictEqual(req1.condition, 'n > 0\\n\\n//# sourceURL=debugger://breakpoint');\n\n    const req2 = requests.get(url2);\n    assert.exists(req2);\n    assert.strictEqual(req2.url, url2);\n    assert.strictEqual(req2.condition, 'o > 0\\n\\n//# sourceURL=debugger://breakpoint');\n  });\n\n  it('allows awaiting the restoration of breakpoints', async () => {\n    Root.Runtime.experiments.enableForTest(Root.Runtime.ExperimentName.INSTRUMENTATION_BREAKPOINTS);\n    const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n    assert.exists(debuggerModel);\n\n    const {uiSourceCode, project} = createContentProviderUISourceCode({url: URL, mimeType: 'text/javascript'});\n    const breakpoint = await breakpointManager.setBreakpoint(uiSourceCode, 0, 0, ...DEFAULT_BREAKPOINT);\n    assert.exists(breakpoint);\n\n    // Make sure that we await all updates that are triggered by adding the model.\n    await breakpoint.updateBreakpoint();\n\n    const responder = backend.responderToBreakpointByUrlRequest(URL, 0);\n    const script = await backend.addScript(target, scriptDescription, null);\n    void responder({\n      breakpointId: 'BREAK_ID' as Protocol.Debugger.BreakpointId,\n      locations: [\n        {\n          scriptId: script.scriptId,\n          lineNumber: 0,\n          columnNumber: 9,\n        },\n      ],\n    });\n\n    // Retrieve the ModelBreakpoint that is linked to our DebuggerModel.\n    const modelBreakpoint = breakpoint.modelBreakpoint(debuggerModel);\n    assert.exists(modelBreakpoint);\n\n    // Make sure that we do not have a linked script yet.\n    assert.strictEqual(modelBreakpoint.currentState, null);\n\n    // Now await restoring the breakpoint.\n    // A successful restore should update the ModelBreakpoint of the DebuggerModel\n    // to reflect a state, in which we have successfully set a breakpoint (i.e. a script id\n    // is available).\n    await breakpointManager.restoreBreakpointsForScript(script);\n    assert.isNotNull(modelBreakpoint.currentState);\n    assert.lengthOf(modelBreakpoint.currentState, 1);\n    assert.strictEqual(modelBreakpoint.currentState[0].url, URL);\n\n    // Clean up.\n    await breakpoint.remove(false);\n    Workspace.Workspace.WorkspaceImpl.instance().removeProject(project);\n    Root.Runtime.experiments.disableForTest(Root.Runtime.ExperimentName.INSTRUMENTATION_BREAKPOINTS);\n  });\n\n  it('allows awaiting on scheduled update in debugger', async () => {\n    Root.Runtime.experiments.enableForTest(Root.Runtime.ExperimentName.INSTRUMENTATION_BREAKPOINTS);\n\n    const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n    assert.exists(debuggerModel);\n\n    const {uiSourceCode, project} = createContentProviderUISourceCode({url: URL, mimeType: 'text/javascript'});\n    const breakpoint = await breakpointManager.setBreakpoint(uiSourceCode, 13, 0, ...DEFAULT_BREAKPOINT);\n    assert.exists(breakpoint);\n\n    // Make sure that we await all updates that are triggered by adding the model.\n    await breakpoint.updateBreakpoint();\n\n    const responder = backend.responderToBreakpointByUrlRequest(URL, 13);\n    const script = await backend.addScript(target, scriptDescription, null);\n    void responder({\n      breakpointId: 'BREAK_ID' as Protocol.Debugger.BreakpointId,\n      locations: [\n        {\n          scriptId: script.scriptId,\n          lineNumber: 13,\n          columnNumber: 9,\n        },\n      ],\n    });\n\n    // Retrieve the ModelBreakpoint that is linked to our DebuggerModel.\n    const modelBreakpoint = breakpoint.modelBreakpoint(debuggerModel);\n    assert.exists(modelBreakpoint);\n\n    assert.isNull(breakpoint.getLastResolvedState());\n    const update = modelBreakpoint.scheduleUpdateInDebugger();\n    assert.isNull(breakpoint.getLastResolvedState());\n    const result = await update;\n    // Make sure that no error occurred.\n    assert.isTrue(result === Breakpoints.BreakpointManager.DebuggerUpdateResult.OK);\n    assert.strictEqual(breakpoint.getLastResolvedState()?.[0].lineNumber, 13);\n    await breakpoint.remove(false);\n    Workspace.Workspace.WorkspaceImpl.instance().removeProject(project);\n  });\n\n  it('allows awaiting on removal of breakpoint in debugger', async () => {\n    Root.Runtime.experiments.enableForTest(Root.Runtime.ExperimentName.INSTRUMENTATION_BREAKPOINTS);\n\n    const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n    assert.exists(debuggerModel);\n\n    const script = await backend.addScript(target, scriptDescription, null);\n    const uiSourceCode = await uiSourceCodeFromScript(debuggerModel, script);\n    assert.exists(uiSourceCode);\n\n    const breakpointId = 'BREAK_ID' as Protocol.Debugger.BreakpointId;\n    void backend.responderToBreakpointByUrlRequest(URL, 13)({\n      breakpointId,\n      locations: [\n        {\n          scriptId: script.scriptId,\n          lineNumber: 13,\n          columnNumber: 9,\n        },\n      ],\n    });\n\n    const breakpoint = await breakpointManager.setBreakpoint(uiSourceCode, 13, 0, ...DEFAULT_BREAKPOINT);\n    assert.exists(breakpoint);\n    await breakpoint.updateBreakpoint();\n\n    // Retrieve the ModelBreakpoint that is linked to our DebuggerModel.\n    const modelBreakpoint = breakpoint.modelBreakpoint(debuggerModel);\n    assert.exists(modelBreakpoint);\n    assert.exists(modelBreakpoint.currentState);\n\n    // Test if awaiting breakpoint.remove is actually removing the state.\n    const removalPromise = backend.breakpointRemovedPromise(breakpointId);\n    await breakpoint.remove(false);\n    await removalPromise;\n    assert.isNull(modelBreakpoint.currentState);\n  });\n\n  it('removes ui source code from breakpoint even after breakpoint live location update', async () => {\n    const BREAKPOINT_TS_LINE = 10;\n\n    const {uiSourceCode: uiSourceCodeTs} = createContentProviderUISourceCode(\n        {url: 'http://example.com/source.ts' as Platform.DevToolsPath.UrlString, mimeType: 'text/typescript'});\n\n    const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n    assert.exists(debuggerModel);\n\n    // Create an inline script and get a UI source code instance for it.\n    const script = await backend.addScript(target, scriptDescription, null);\n    const uiSourceCode = await uiSourceCodeFromScript(debuggerModel, script);\n    assert.exists(uiSourceCode);\n\n    // Register our interest in the breakpoint request.\n    const breakpointResponder = backend.responderToBreakpointByUrlRequest(URL, BREAKPOINT_SCRIPT_LINE);\n\n    // Set the breakpoint.\n    const breakpoint =\n        await breakpointManager.setBreakpoint(uiSourceCode, BREAKPOINT_SCRIPT_LINE, 2, ...DEFAULT_BREAKPOINT);\n    assert.exists(breakpoint);\n\n    // Await the breakpoint request at the mock backend and send a CDP response once the request arrives.\n    // Concurrently, enforce update of the breakpoint in the debugger.\n    await Promise.all([\n      breakpointResponder({\n        breakpointId: 'BREAK_ID' as Protocol.Debugger.BreakpointId,\n        locations: [\n          {scriptId: script.scriptId, lineNumber: BREAKPOINT_SCRIPT_LINE, columnNumber: BREAKPOINT_RESULT_COLUMN},\n        ],\n      }),\n      breakpoint.refreshInDebugger(),\n    ]);\n\n    // Map the breakpoint location to a different file (this will internally update its live location).\n    const mapping = createFakeScriptMapping(debuggerModel, uiSourceCodeTs, BREAKPOINT_TS_LINE, script.scriptId);\n    Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance().addSourceMapping(mapping);\n    await breakpointManager.debuggerWorkspaceBinding.updateLocations(script);\n\n    // Verify that the location of the breakpoint was updated.\n    assert.strictEqual(breakpointManager.breakpointLocationsForUISourceCode(uiSourceCodeTs).length, 1);\n    assert.strictEqual(breakpointManager.breakpointLocationsForUISourceCode(uiSourceCodeTs)[0].breakpoint, breakpoint);\n    assert.strictEqual(\n        breakpointManager.breakpointLocationsForUISourceCode(uiSourceCodeTs)[0].uiLocation.lineNumber,\n        BREAKPOINT_TS_LINE);\n\n    // Remove the target and verify that the UI source codes were removed from the breakpoint.\n    breakpointManager.targetManager.removeTarget(target);\n    assert.strictEqual(breakpoint.getUiSourceCodes().size, 0);\n    assert.strictEqual(breakpointManager.breakpointLocationsForUISourceCode(uiSourceCodeTs).length, 0);\n\n    Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance().removeSourceMapping(mapping);\n    await breakpoint.remove(false);\n  });\n\n  it('can set breakpoints in inline scripts', async () => {\n    const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n    assert.exists(debuggerModel);\n\n    // Create an inline script and get a UI source code instance for it.\n    const inlineScript = await backend.addScript(target, inlineScriptDescription, null);\n    const uiSourceCode = await uiSourceCodeFromScript(debuggerModel, inlineScript);\n    assert.exists(uiSourceCode);\n\n    // Register our interest in the breakpoint request.\n    const breakpointResponder = backend.responderToBreakpointByUrlRequest(URL_HTML, INLINE_BREAKPOINT_RAW_LINE);\n\n    // Set the breakpoint.\n    const breakpoint =\n        await breakpointManager.setBreakpoint(uiSourceCode, BREAKPOINT_SCRIPT_LINE, 2, ...DEFAULT_BREAKPOINT);\n    assert.exists(breakpoint);\n\n    // Await the breakpoint request at the mock backend and send a CDP response once the request arrives.\n    // Concurrently, enforce update of the breakpoint in the debugger.\n    await Promise.all([\n      breakpointResponder({\n        breakpointId: 'BREAK_ID' as Protocol.Debugger.BreakpointId,\n        locations: [\n          {\n            scriptId: inlineScript.scriptId,\n            lineNumber: INLINE_BREAKPOINT_RAW_LINE,\n            columnNumber: BREAKPOINT_RESULT_COLUMN,\n          },\n        ],\n      }),\n      breakpoint.refreshInDebugger(),\n    ]);\n\n    // Check that the breakpoint was set at the correct location?\n    const locations = breakpointManager.breakpointLocationsForUISourceCode(uiSourceCode);\n    assert.strictEqual(1, locations.length);\n    assert.strictEqual(1, locations[0].uiLocation.lineNumber);\n    assert.strictEqual(5, locations[0].uiLocation.columnNumber);\n  });\n\n  it('can restore breakpoints in inline scripts', async () => {\n    const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n    assert.exists(debuggerModel);\n\n    // Create an inline script and get a UI source code instance for it.\n    const inlineScript = await backend.addScript(target, inlineScriptDescription, null);\n    const uiSourceCode = await uiSourceCodeFromScript(debuggerModel, inlineScript);\n    assert.exists(uiSourceCode);\n\n    // Register our interest in the breakpoint request.\n    const breakpointResponder = backend.responderToBreakpointByUrlRequest(URL_HTML, INLINE_BREAKPOINT_RAW_LINE);\n\n    // Set the breakpoint on the front-end/model side.\n    const breakpoint =\n        await breakpointManager.setBreakpoint(uiSourceCode, BREAKPOINT_SCRIPT_LINE, 2, ...DEFAULT_BREAKPOINT);\n    assert.exists(breakpoint);\n    assert.deepEqual(Array.from(breakpoint.getUiSourceCodes()), [uiSourceCode]);\n\n    // Await the breakpoint request at the mock backend and send a CDP response once the request arrives.\n    // Concurrently, enforce update of the breakpoint in the debugger.\n    await Promise.all([\n      breakpointResponder({\n        breakpointId: 'BREAK_ID' as Protocol.Debugger.BreakpointId,\n        locations: [\n          {\n            scriptId: inlineScript.scriptId,\n            lineNumber: INLINE_BREAKPOINT_RAW_LINE,\n            columnNumber: BREAKPOINT_RESULT_COLUMN,\n          },\n        ],\n      }),\n      breakpoint.refreshInDebugger(),\n    ]);\n\n    // Disconnect from the target. This will also unload the script.\n    breakpointManager.targetManager.removeTarget(target);\n\n    // Make sure the source code for the script was removed from the breakpoint.\n    assert.strictEqual(breakpoint.getUiSourceCodes().size, 0);\n\n    // Create a new target.\n    target = createTarget();\n    SDK.TargetManager.TargetManager.instance().setScopeTarget(target);\n\n    const reloadedDebuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n    assert.exists(reloadedDebuggerModel);\n\n    // Load the same inline script (with a different script id!) into the new target.\n    // Once the model loads the script, it wil try to restore the breakpoint. Let us make sure the backend\n    // will be ready to produce a response before adding the script.\n    const reloadedBreakpointResponder = backend.responderToBreakpointByUrlRequest(URL_HTML, INLINE_BREAKPOINT_RAW_LINE);\n    const reloadedInlineScript = await backend.addScript(target, inlineScriptDescription, null);\n\n    const reloadedUiSourceCode = await uiSourceCodeFromScript(reloadedDebuggerModel, reloadedInlineScript);\n    assert.exists(reloadedUiSourceCode);\n\n    // Verify the breakpoint was restored at the oriignal unbound location (before the backend binds it).\n    const unboundLocations = breakpointManager.breakpointLocationsForUISourceCode(reloadedUiSourceCode);\n    assert.strictEqual(1, unboundLocations.length);\n    assert.strictEqual(1, unboundLocations[0].uiLocation.lineNumber);\n    assert.strictEqual(2, unboundLocations[0].uiLocation.columnNumber);\n\n    // Wait for the breakpoint request for the reloaded script and for the breakpoint update.\n    await Promise.all([\n      reloadedBreakpointResponder({\n        breakpointId: 'RELOADED_BREAK_ID' as Protocol.Debugger.BreakpointId,\n        locations: [{\n          scriptId: reloadedInlineScript.scriptId,\n          lineNumber: INLINE_BREAKPOINT_RAW_LINE,\n          columnNumber: BREAKPOINT_RESULT_COLUMN,\n        }],\n      }),\n      breakpoint.refreshInDebugger(),\n    ]);\n\n    // Verify the restored position.\n    const boundLocations = breakpointManager.breakpointLocationsForUISourceCode(reloadedUiSourceCode);\n    assert.strictEqual(1, boundLocations.length);\n    assert.strictEqual(1, boundLocations[0].uiLocation.lineNumber);\n    assert.strictEqual(5, boundLocations[0].uiLocation.columnNumber);\n  });\n\n  it('eagerly restores JavaScript breakpoints in a new target', async () => {\n    // Remove the default target so that we can simulate starting the debugger afresh.\n    targetManager.removeTarget(target);\n\n    // Set the breakpoint storage to contain a breakpoint and re-initialize\n    // the breakpoint manager from that storage. This should create a breakpoint instance\n    // in the breakpoint manager.\n    const url = 'http://example.com/script.js' as Platform.DevToolsPath.UrlString;\n    const lineNumber = 1;\n    const breakpoints: Breakpoints.BreakpointManager.BreakpointStorageState[] = [{\n      url,\n      resourceTypeName: 'script',\n      lineNumber,\n      condition: '' as Breakpoints.BreakpointManager.UserCondition,\n      enabled: true,\n      isLogpoint: false,\n    }];\n    Common.Settings.Settings.instance().createLocalSetting('breakpoints', breakpoints).set(breakpoints);\n    Breakpoints.BreakpointManager.BreakpointManager.instance(\n        {forceNew: true, targetManager, workspace, debuggerWorkspaceBinding});\n\n    // Create a new target and make sure that the backend receives setBreakpointByUrl request\n    // from breakpoint manager.\n    const breakpointSetPromise = backend.responderToBreakpointByUrlRequest(url, lineNumber)({\n      breakpointId: 'BREAK_ID' as Protocol.Debugger.BreakpointId,\n      locations: [],\n    });\n    SDK.TargetManager.TargetManager.instance().setScopeTarget(createTarget());\n    await breakpointSetPromise;\n  });\n\n  it('eagerly restores TypeScript breakpoints in a new target', async () => {\n    // Remove the default target so that we can simulate starting the debugger afresh.\n    targetManager.removeTarget(target);\n\n    // Set the breakpoint storage to contain a source-mapped breakpoint and re-initialize\n    // the breakpoint manager from that storage. This should create a breakpoint instance\n    // in the breakpoint manager (for the resolved location!).\n    const compiledUrl = 'http://example.com/compiled.js' as Platform.DevToolsPath.UrlString;\n    const compiledLineNumber = 2;\n    const breakpoints: Breakpoints.BreakpointManager.BreakpointStorageState[] = [{\n      url: 'http://example.com/src/script.ts' as Platform.DevToolsPath.UrlString,\n      resourceTypeName: 'sm-script',\n      lineNumber: 1,\n      condition: '' as Breakpoints.BreakpointManager.UserCondition,\n      enabled: true,\n      isLogpoint: false,\n      resolvedState: [{\n        url: compiledUrl,\n        lineNumber: compiledLineNumber,\n        columnNumber: 0,\n        condition: '' as SDK.DebuggerModel.BackendCondition,\n      }],\n    }];\n    Common.Settings.Settings.instance().createLocalSetting('breakpoints', breakpoints).set(breakpoints);\n    Breakpoints.BreakpointManager.BreakpointManager.instance(\n        {forceNew: true, targetManager, workspace, debuggerWorkspaceBinding});\n\n    // Create a new target and make sure that the backend receives setBreakpointByUrl request\n    // from breakpoint manager.\n    const breakpointSetPromise = backend.responderToBreakpointByUrlRequest(compiledUrl, compiledLineNumber)({\n      breakpointId: 'BREAK_ID' as Protocol.Debugger.BreakpointId,\n      locations: [],\n    });\n    SDK.TargetManager.TargetManager.instance().setScopeTarget(createTarget());\n    await breakpointSetPromise;\n\n  });\n\n  it('saves generated location into storage', async () => {\n    // Remove the default target so that we can simulate starting the debugger afresh.\n    targetManager.removeTarget(target);\n\n    // Re-create a target and breakpoint manager.\n    target = createTarget();\n    SDK.TargetManager.TargetManager.instance().setScopeTarget(target);\n    const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n    assert.exists(debuggerModel);\n    const breakpoints: Breakpoints.BreakpointManager.BreakpointStorageState[] = [];\n    const setting = Common.Settings.Settings.instance().createLocalSetting('breakpoints', breakpoints);\n    Breakpoints.BreakpointManager.BreakpointManager.instance(\n        {forceNew: true, targetManager, workspace, debuggerWorkspaceBinding});\n\n    // Add script with source map.\n    setupPageResourceLoaderForSourceMap(sourceMapContent);\n    const scriptInfo = {url: URL, content: COMPILED_SCRIPT_SOURCES_CONTENT};\n    const sourceMapInfo = {url: SOURCE_MAP_URL, content: sourceMapContent};\n    const script = await backend.addScript(target, scriptInfo, sourceMapInfo);\n\n    // Get the uiSourceCode for the original source.\n    const uiSourceCode = await debuggerWorkspaceBinding.uiSourceCodeForSourceMapSourceURLPromise(\n        debuggerModel, ORIGINAL_SCRIPT_SOURCE_URL, script.isContentScript());\n    assert.exists(uiSourceCode);\n\n    // Set the breakpoint on the front-end/model side.\n    const breakpoint = await breakpointManager.setBreakpoint(uiSourceCode, 1, 0, ...DEFAULT_BREAKPOINT);\n    assert.exists(breakpoint);\n\n    // Set the breakpoint response for our upcoming request.\n    void backend.responderToBreakpointByUrlRequest(URL, 0)({\n      breakpointId: 'BREAK_ID' as Protocol.Debugger.BreakpointId,\n      locations: [\n        {\n          scriptId: script.scriptId,\n          lineNumber: 0,\n          columnNumber: 15,\n        },\n      ],\n    });\n    // Ensure the breakpoint is fully set.\n    await breakpoint.refreshInDebugger();\n\n    // Check that the storage contains the resolved breakpoint location.\n    assert.lengthOf(setting.get(), 1);\n    assert.deepEqual(setting.get()[0].resolvedState, [{\n                       url: URL,\n                       lineNumber: 0,\n                       columnNumber: 15,\n                       condition: '' as SDK.DebuggerModel.BackendCondition,\n                     }]);\n\n  });\n\n  it('restores latest breakpoints from storage', async () => {\n    // Remove the default target so that we can simulate starting the debugger afresh.\n    targetManager.removeTarget(target);\n\n    const expectedBreakpointLines = [1, 2];\n\n    const breakpointRequestLines = new Promise<number[]>((resolve, reject) => {\n      const breakpoints: Breakpoints.BreakpointManager.BreakpointStorageState[] = [];\n\n      // Accumulator for breakpoint lines from setBreakpointByUrl requests.\n      const breakpointRequestLinesReceived = new Set<number>();\n\n      // Create three breakpoints in the storage and register the corresponding\n      // request handler in the mock backend. The handler will resolve the promise\n      // (and thus finish up the test) once it receives two breakpoint requests.\n      // The idea is to check that the front-end requested the two latest breakpoints\n      // from the backend.\n      for (let i = 0; i < 3; i++) {\n        const lineNumber = i;\n        // Push the breakpoint to our mock storage. The storage will be then used\n        // to initialize the breakpoint manager.\n        breakpoints.push({\n          url: URL,\n          resourceTypeName: 'script',\n          lineNumber,\n          condition: '' as Breakpoints.BreakpointManager.UserCondition,\n          enabled: true,\n          isLogpoint: false,\n        });\n\n        // When the mock backend receives a request for this breakpoint, it will\n        // respond and record the request. Also, once we receive the\n        void backend\n            .responderToBreakpointByUrlRequest(\n                URL, lineNumber)({breakpointId: 'BREAK_ID' as Protocol.Debugger.BreakpointId, locations: []})\n            .then(() => {\n              breakpointRequestLinesReceived.add(lineNumber);\n              if (breakpointRequestLinesReceived.size === expectedBreakpointLines.length) {\n                resolve(Array.from(breakpointRequestLinesReceived).sort((l, r) => l - r));\n              }\n            }, reject);\n      }\n\n      // Re-create the breakpoint manager and the target.\n      const setting = Common.Settings.Settings.instance().createLocalSetting('breakpoints', breakpoints);\n      setting.set(breakpoints);\n      // Create the breakpoint manager, request placing on the two latest breakpoints in the backend.\n      Breakpoints.BreakpointManager.BreakpointManager.instance({\n        forceNew: true,\n        targetManager,\n        workspace,\n        debuggerWorkspaceBinding,\n        restoreInitialBreakpointCount: expectedBreakpointLines.length,\n      });\n      target = createTarget();\n      SDK.TargetManager.TargetManager.instance().setScopeTarget(target);\n    });\n\n    assert.deepEqual(Array.from(await breakpointRequestLines), expectedBreakpointLines);\n  });\n\n  describe('with instrumentation breakpoints turned on', () => {\n    beforeEach(() => {\n      const targetManager = SDK.TargetManager.TargetManager.instance();\n      const workspace = Workspace.Workspace.WorkspaceImpl.instance();\n      Root.Runtime.experiments.enableForTest(Root.Runtime.ExperimentName.INSTRUMENTATION_BREAKPOINTS);\n      breakpointManager = Breakpoints.BreakpointManager.BreakpointManager.instance(\n          {forceNew: true, targetManager, workspace, debuggerWorkspaceBinding});\n    });\n\n    afterEach(() => {\n      Root.Runtime.experiments.disableForTest(Root.Runtime.ExperimentName.INSTRUMENTATION_BREAKPOINTS);\n    });\n\n    async function testBreakpointMovedOnInstrumentationBreak(\n        fileSystemPath: Platform.DevToolsPath.UrlString, fileSystemFileUrl: Platform.DevToolsPath.UrlString,\n        content: string, type?: string) {\n      const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n      assert.exists(debuggerModel);\n\n      const {uiSourceCode: fileSystemUiSourceCode, project} = createFileSystemFileForPersistenceTests(\n          {fileSystemFileUrl, fileSystemPath, type: type}, scriptDescription.url, content, target);\n\n      const breakpointLine = 0;\n      const resolvedBreakpointLine = 1;\n\n      // Set the breakpoint on the file system uiSourceCode.\n      await breakpointManager.setBreakpoint(fileSystemUiSourceCode, breakpointLine, 0, ...DEFAULT_BREAKPOINT);\n\n      // Add the script.\n      const script = await backend.addScript(target, scriptDescription, null);\n      const uiSourceCode = debuggerWorkspaceBinding.uiSourceCodeForScript(script);\n      assert.exists(uiSourceCode);\n      assert.strictEqual(uiSourceCode.project().type(), Workspace.Workspace.projectTypes.Network);\n\n      // Set the breakpoint response for our upcoming request.\n      void backend.responderToBreakpointByUrlRequest(URL, breakpointLine)({\n        breakpointId: 'BREAK_ID' as Protocol.Debugger.BreakpointId,\n        locations: [\n          {\n            scriptId: script.scriptId,\n            lineNumber: resolvedBreakpointLine,\n            columnNumber: 0,\n          },\n        ],\n      });\n\n      // Register our interest in an outgoing 'resume', which should be sent as soon as\n      // we have set up all breakpoints during the instrumentation pause.\n      const resumeSentPromise = registerListenerOnOutgoingMessage('Debugger.resume');\n\n      // Inform the front-end about an instrumentation break.\n      backend.dispatchDebuggerPause(script, Protocol.Debugger.PausedEventReason.Instrumentation);\n\n      // Wait for the breakpoints to be set, and the resume to be sent.\n      await resumeSentPromise;\n\n      // Verify that the network uiSourceCode has the breakpoint that we originally set\n      // on the file system uiSourceCode.\n      const reloadedBoundLocations = breakpointManager.breakpointLocationsForUISourceCode(uiSourceCode);\n      assert.strictEqual(1, reloadedBoundLocations.length);\n      assert.strictEqual(resolvedBreakpointLine, reloadedBoundLocations[0].uiLocation.lineNumber);\n      assert.strictEqual(0, reloadedBoundLocations[0].uiLocation.columnNumber);\n\n      project.dispose();\n    }\n\n    it('can restore breakpoints in scripts', async () => {\n      const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n      assert.exists(debuggerModel);\n\n      const breakpointLine = 0;\n      const resolvedBreakpointLine = 3;\n\n      // Add script.\n      const scriptInfo = {url: URL, content: 'console.log(\\'hello\\')'};\n      const script = await backend.addScript(target, scriptInfo, null);\n\n      // Get the uiSourceCode for the source.\n      const uiSourceCode = debuggerWorkspaceBinding.uiSourceCodeForScript(script);\n      assert.exists(uiSourceCode);\n\n      // Set the breakpoint on the front-end/model side.\n      const breakpoint = await breakpointManager.setBreakpoint(uiSourceCode, breakpointLine, 0, ...DEFAULT_BREAKPOINT);\n      assert.exists(breakpoint);\n\n      // Set the breakpoint response for our upcoming request.\n      void backend.responderToBreakpointByUrlRequest(URL, breakpointLine)({\n        breakpointId: 'BREAK_ID' as Protocol.Debugger.BreakpointId,\n        locations: [\n          {\n            scriptId: script.scriptId,\n            lineNumber: resolvedBreakpointLine,\n            columnNumber: 0,\n          },\n        ],\n      });\n      await breakpoint.refreshInDebugger();\n      assert.deepEqual(Array.from(breakpoint.getUiSourceCodes()), [uiSourceCode]);\n\n      // Verify the restored position.\n      const boundLocations = breakpointManager.breakpointLocationsForUISourceCode(uiSourceCode);\n      assert.strictEqual(1, boundLocations.length);\n      assert.strictEqual(resolvedBreakpointLine, boundLocations[0].uiLocation.lineNumber);\n      assert.strictEqual(0, boundLocations[0].uiLocation.columnNumber);\n\n      // Disconnect from the target. This will also unload the script.\n      breakpointManager.targetManager.removeTarget(target);\n\n      // Make sure the source code for the script was removed from the breakpoint.\n      assert.strictEqual(breakpoint.getUiSourceCodes().size, 0);\n\n      // Remove the breakpoint.\n      await breakpoint.remove(true /* keepInStorage */);\n\n      // Create a new target.\n      target = createTarget();\n      SDK.TargetManager.TargetManager.instance().setScopeTarget(target);\n\n      const reloadedDebuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n      assert.exists(reloadedDebuggerModel);\n\n      // Add the same script under a different scriptId.\n      const reloadedScript = await backend.addScript(target, scriptInfo, null);\n\n      // Get the uiSourceCode for the original source.\n      const reloadedUiSourceCode = debuggerWorkspaceBinding.uiSourceCodeForScript(reloadedScript);\n      assert.exists(reloadedUiSourceCode);\n\n      // Set the breakpoint response for our upcoming request.\n      void backend.responderToBreakpointByUrlRequest(URL, breakpointLine)({\n        breakpointId: 'RELOADED_BREAK_ID' as Protocol.Debugger.BreakpointId,\n        locations: [\n          {\n            scriptId: reloadedScript.scriptId,\n            lineNumber: resolvedBreakpointLine,\n            columnNumber: 0,\n          },\n        ],\n      });\n\n      // Register our interest in an outgoing 'resume', which should be sent as soon as\n      // we have set up all breakpoints during the instrumentation pause.\n      const resumeSentPromise = registerListenerOnOutgoingMessage('Debugger.resume');\n\n      // Inform the front-end about an instrumentation break.\n      backend.dispatchDebuggerPause(reloadedScript, Protocol.Debugger.PausedEventReason.Instrumentation);\n\n      // Wait for the breakpoints to be set, and the resume to be sent.\n      await resumeSentPromise;\n\n      // Verify the restored position.\n      const reloadedBoundLocations = breakpointManager.breakpointLocationsForUISourceCode(reloadedUiSourceCode);\n      assert.strictEqual(1, reloadedBoundLocations.length);\n      assert.strictEqual(resolvedBreakpointLine, reloadedBoundLocations[0].uiLocation.lineNumber);\n      assert.strictEqual(0, reloadedBoundLocations[0].uiLocation.columnNumber);\n    });\n\n    it('can restore breakpoints in a default-mapped inline scripts without sourceURL comment', async () => {\n      const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n      assert.exists(debuggerModel);\n\n      // Add script.\n      const script = await backend.addScript(target, inlineScriptDescription, null);\n\n      // Get the uiSourceCode for the source. This is the uiSourceCode in the DefaultScriptMapping,\n      // as we haven't registered the uiSourceCode for the html file.\n      const uiSourceCode = await debuggerWorkspaceBinding.uiSourceCodeForScript(script);\n      assert.exists(uiSourceCode);\n      assert.strictEqual(uiSourceCode.project().type(), Workspace.Workspace.projectTypes.Debugger);\n\n      // Set the breakpoint on the front-end/model side. The line number is relative to the v8 script.\n      const breakpoint =\n          await breakpointManager.setBreakpoint(uiSourceCode, BREAKPOINT_SCRIPT_LINE, 0, ...DEFAULT_BREAKPOINT);\n      assert.exists(breakpoint);\n\n      // Set the breakpoint response for our upcoming request.\n      void backend.responderToBreakpointByUrlRequest(URL_HTML, INLINE_BREAKPOINT_RAW_LINE)({\n        breakpointId: 'BREAK_ID' as Protocol.Debugger.BreakpointId,\n        locations: [\n          {\n            scriptId: script.scriptId,\n            lineNumber: INLINE_BREAKPOINT_RAW_LINE,\n            columnNumber: 0,\n          },\n        ],\n      });\n      await breakpoint.refreshInDebugger();\n      assert.deepEqual(Array.from(breakpoint.getUiSourceCodes()), [uiSourceCode]);\n\n      // Verify the position.\n      const boundLocations = breakpointManager.breakpointLocationsForUISourceCode(uiSourceCode);\n      assert.strictEqual(1, boundLocations.length);\n      assert.strictEqual(BREAKPOINT_SCRIPT_LINE, boundLocations[0].uiLocation.lineNumber);\n      assert.strictEqual(0, boundLocations[0].uiLocation.columnNumber);\n\n      // Disconnect from the target. This will also unload the script.\n      breakpointManager.targetManager.removeTarget(target);\n\n      // Make sure the source code for the script was removed from the breakpoint.\n      assert.strictEqual(breakpoint.getUiSourceCodes().size, 0);\n\n      // Remove the breakpoint.\n      await breakpoint.remove(true /* keepInStorage */);\n\n      // Create a new target.\n      target = createTarget();\n      SDK.TargetManager.TargetManager.instance().setScopeTarget(target);\n\n      const reloadedDebuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n      assert.exists(reloadedDebuggerModel);\n\n      // Add the same script under a different scriptId.\n      const reloadedScript = await backend.addScript(target, inlineScriptDescription, null);\n\n      // Get the uiSourceCode for the source. This is the uiSourceCode in the DefaultScriptMapping,\n      // as we haven't registered the uiSourceCode for the html file.\n      const reloadedUiSourceCode = debuggerWorkspaceBinding.uiSourceCodeForScript(reloadedScript);\n      assert.exists(reloadedUiSourceCode);\n      assert.strictEqual(reloadedUiSourceCode.project().type(), Workspace.Workspace.projectTypes.Debugger);\n\n      // Set the breakpoint response for our upcoming request.\n      void backend.responderToBreakpointByUrlRequest(URL_HTML, INLINE_BREAKPOINT_RAW_LINE)({\n        breakpointId: 'RELOADED_BREAK_ID' as Protocol.Debugger.BreakpointId,\n        locations: [\n          {\n            scriptId: reloadedScript.scriptId,\n            lineNumber: INLINE_BREAKPOINT_RAW_LINE,\n            columnNumber: 0,\n          },\n        ],\n      });\n\n      // Register our interest in an outgoing 'resume', which should be sent as soon as\n      // we have set up all breakpoints during the instrumentation pause.\n      const resumeSentPromise = registerListenerOnOutgoingMessage('Debugger.resume');\n\n      // Inform the front-end about an instrumentation break.\n      backend.dispatchDebuggerPause(reloadedScript, Protocol.Debugger.PausedEventReason.Instrumentation);\n\n      // Wait for the breakpoints to be set, and the resume to be sent.\n      await resumeSentPromise;\n\n      // Verify the restored position.\n      const reloadedBoundLocations = breakpointManager.breakpointLocationsForUISourceCode(reloadedUiSourceCode);\n      assert.strictEqual(1, reloadedBoundLocations.length);\n      assert.deepEqual(reloadedBoundLocations[0].uiLocation.uiSourceCode, reloadedUiSourceCode);\n      assert.strictEqual(BREAKPOINT_SCRIPT_LINE, reloadedBoundLocations[0].uiLocation.lineNumber);\n      assert.strictEqual(0, reloadedBoundLocations[0].uiLocation.columnNumber);\n    });\n\n    it('can restore breakpoints in an inline script without sourceURL comment', async () => {\n      const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n      assert.exists(debuggerModel);\n\n      function dispatchDocumentOpened() {\n        dispatchEvent(target, 'Page.documentOpened', {\n          frame: {\n            id: 'main',\n            loaderId: 'foo',\n            url: URL_HTML,\n            domainAndRegistry: 'example.com',\n            securityOrigin: 'https://example.com/',\n            mimeType: 'text/html',\n            secureContextType: Protocol.Page.SecureContextType.Secure,\n            crossOriginIsolatedContextType: Protocol.Page.CrossOriginIsolatedContextType.Isolated,\n            gatedAPIFeatures: [],\n          },\n        });\n      }\n      dispatchDocumentOpened();\n\n      // Add script.\n      const script = await backend.addScript(target, inlineScriptDescription, null);\n\n      // Get the uiSourceCode for the source: this should be the uiSourceCode of the actual html script.\n      const uiSourceCode = await debuggerWorkspaceBinding.uiSourceCodeForScript(script);\n      assert.exists(uiSourceCode);\n      assert.strictEqual(uiSourceCode.project().type(), Workspace.Workspace.projectTypes.Network);\n\n      // Set the breakpoint on the front-end/model side of the html uiSourceCode.\n      const breakpoint =\n          await breakpointManager.setBreakpoint(uiSourceCode, INLINE_BREAKPOINT_RAW_LINE, 0, ...DEFAULT_BREAKPOINT);\n      assert.exists(breakpoint);\n\n      // Set the breakpoint response for our upcoming request to set a breakpoint on the raw location.\n      void backend.responderToBreakpointByUrlRequest(URL_HTML, INLINE_BREAKPOINT_RAW_LINE)({\n        breakpointId: 'BREAK_ID' as Protocol.Debugger.BreakpointId,\n        locations: [\n          {\n            scriptId: script.scriptId,\n            lineNumber: INLINE_BREAKPOINT_RAW_LINE,\n            columnNumber: 0,\n          },\n        ],\n      });\n      await breakpoint.refreshInDebugger();\n      assert.deepEqual(Array.from(breakpoint.getUiSourceCodes()), [uiSourceCode]);\n\n      // Verify the position.\n      const boundLocations = breakpointManager.breakpointLocationsForUISourceCode(uiSourceCode);\n      assert.strictEqual(1, boundLocations.length);\n      assert.strictEqual(INLINE_BREAKPOINT_RAW_LINE, boundLocations[0].uiLocation.lineNumber);\n      assert.strictEqual(0, boundLocations[0].uiLocation.columnNumber);\n\n      // Disconnect from the target. This will also unload the script.\n      breakpointManager.targetManager.removeTarget(target);\n\n      // Make sure the source code for the script was removed from the breakpoint.\n      assert.strictEqual(breakpoint.getUiSourceCodes().size, 0);\n\n      // Remove the breakpoint.\n      await breakpoint.remove(true /* keepInStorage */);\n\n      // Create a new target.\n      target = createTarget();\n      SDK.TargetManager.TargetManager.instance().setScopeTarget(target);\n\n      const reloadedDebuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n      assert.exists(reloadedDebuggerModel);\n\n      dispatchDocumentOpened();\n\n      // Add the same script under a different scriptId.\n      const reloadedScript = await backend.addScript(target, inlineScriptDescription, null);\n\n      // Get the uiSourceCode for the source: this should be the uiSourceCode of the actual html script.\n      const reloadedUiSourceCode = debuggerWorkspaceBinding.uiSourceCodeForScript(reloadedScript);\n      assert.exists(reloadedUiSourceCode);\n      assert.strictEqual(reloadedUiSourceCode.project().type(), Workspace.Workspace.projectTypes.Network);\n\n      // Set the breakpoint response for our upcoming request.\n      void backend.responderToBreakpointByUrlRequest(URL_HTML, INLINE_BREAKPOINT_RAW_LINE)({\n        breakpointId: 'RELOADED_BREAK_ID' as Protocol.Debugger.BreakpointId,\n        locations: [\n          {\n            scriptId: reloadedScript.scriptId,\n            lineNumber: INLINE_BREAKPOINT_RAW_LINE,\n            columnNumber: 0,\n          },\n        ],\n      });\n\n      // Register our interest in an outgoing 'resume', which should be sent as soon as\n      // we have set up all breakpoints during the instrumentation pause.\n      const resumeSentPromise = registerListenerOnOutgoingMessage('Debugger.resume');\n\n      // Inform the front-end about an instrumentation break.\n      backend.dispatchDebuggerPause(reloadedScript, Protocol.Debugger.PausedEventReason.Instrumentation);\n\n      // Wait for the breakpoints to be set, and the resume to be sent.\n      await resumeSentPromise;\n\n      // Verify the restored position.\n      const reloadedBoundLocations = breakpointManager.breakpointLocationsForUISourceCode(reloadedUiSourceCode);\n      assert.strictEqual(1, reloadedBoundLocations.length);\n      assert.deepEqual(reloadedBoundLocations[0].uiLocation.uiSourceCode, reloadedUiSourceCode);\n      assert.strictEqual(INLINE_BREAKPOINT_RAW_LINE, reloadedBoundLocations[0].uiLocation.lineNumber);\n      assert.strictEqual(0, reloadedBoundLocations[0].uiLocation.columnNumber);\n    });\n\n    it('can restore breakpoints in source mapped scripts', async () => {\n      setupPageResourceLoaderForSourceMap(sourceMapContent);\n\n      const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n      assert.exists(debuggerModel);\n\n      // Add script with source map.\n      const scriptInfo = {url: URL, content: COMPILED_SCRIPT_SOURCES_CONTENT};\n      const sourceMapInfo = {url: SOURCE_MAP_URL, content: sourceMapContent};\n      const script = await backend.addScript(target, scriptInfo, sourceMapInfo);\n\n      // Get the uiSourceCode for the original source.\n      const uiSourceCode = await debuggerWorkspaceBinding.uiSourceCodeForSourceMapSourceURLPromise(\n          debuggerModel, ORIGINAL_SCRIPT_SOURCE_URL, script.isContentScript());\n      assert.exists(uiSourceCode);\n\n      // Set the breakpoint on the front-end/model side.\n      const breakpoint = await breakpointManager.setBreakpoint(uiSourceCode, 0, 0, ...DEFAULT_BREAKPOINT);\n      assert.exists(breakpoint);\n\n      // Set the breakpoint response for our upcoming request.\n      void backend.responderToBreakpointByUrlRequest(URL, 0)({\n        breakpointId: 'BREAK_ID' as Protocol.Debugger.BreakpointId,\n        locations: [\n          {\n            scriptId: script.scriptId,\n            lineNumber: 0,\n            columnNumber: 9,\n          },\n        ],\n      });\n      await breakpoint.refreshInDebugger();\n      assert.deepEqual(Array.from(breakpoint.getUiSourceCodes()), [uiSourceCode]);\n\n      // Verify the restored position.\n      const boundLocations = breakpointManager.breakpointLocationsForUISourceCode(uiSourceCode);\n      assert.strictEqual(1, boundLocations.length);\n      assert.strictEqual(0, boundLocations[0].uiLocation.lineNumber);\n      assert.strictEqual(9, boundLocations[0].uiLocation.columnNumber);\n\n      // Disconnect from the target. This will also unload the script.\n      breakpointManager.targetManager.removeTarget(target);\n\n      // Make sure the source code for the script was removed from the breakpoint.\n      assert.strictEqual(breakpoint.getUiSourceCodes().size, 0);\n\n      // Remove the breakpoint.\n      await breakpoint.remove(true /* keepInStorage */);\n\n      // Create a new target.\n      target = createTarget();\n      SDK.TargetManager.TargetManager.instance().setScopeTarget(target);\n\n      const reloadedDebuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n      assert.exists(reloadedDebuggerModel);\n\n      // Add the same script under a different scriptId.\n      const reloadedScript = await backend.addScript(target, scriptInfo, sourceMapInfo);\n\n      // Get the uiSourceCode for the original source.\n      const reloadedUiSourceCode = await debuggerWorkspaceBinding.uiSourceCodeForSourceMapSourceURLPromise(\n          reloadedDebuggerModel, ORIGINAL_SCRIPT_SOURCE_URL, reloadedScript.isContentScript());\n      assert.exists(uiSourceCode);\n\n      const unboundLocation = breakpointManager.breakpointLocationsForUISourceCode(reloadedUiSourceCode);\n      assert.strictEqual(1, unboundLocation.length);\n      assert.strictEqual(0, unboundLocation[0].uiLocation.lineNumber);\n      assert.strictEqual(0, unboundLocation[0].uiLocation.columnNumber);\n\n      // Set the breakpoint response for our upcoming request.\n      void backend.responderToBreakpointByUrlRequest(URL, 0)({\n        breakpointId: 'RELOADED_BREAK_ID' as Protocol.Debugger.BreakpointId,\n        locations: [{\n          scriptId: reloadedScript.scriptId,\n          lineNumber: 0,\n          columnNumber: 9,\n        }],\n      });\n\n      // Register our interest in an outgoing 'resume', which should be sent as soon as\n      // we have set up all breakpoints during the instrumentation pause.\n      const resumeSentPromise = registerListenerOnOutgoingMessage('Debugger.resume');\n\n      // Inform the front-end about an instrumentation break.\n      backend.dispatchDebuggerPause(reloadedScript, Protocol.Debugger.PausedEventReason.Instrumentation);\n\n      // Wait for the breakpoints to be set, and the resume to be sent.\n      await resumeSentPromise;\n\n      // Verify the restored position.\n      const reloadedBoundLocations = breakpointManager.breakpointLocationsForUISourceCode(reloadedUiSourceCode);\n      assert.strictEqual(1, reloadedBoundLocations.length);\n      assert.strictEqual(0, reloadedBoundLocations[0].uiLocation.lineNumber);\n      assert.strictEqual(9, reloadedBoundLocations[0].uiLocation.columnNumber);\n    });\n\n    it('can restore breakpoints in scripts with language plugins', async () => {\n      const {pluginManager} = Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance();\n      const scriptInfo = {url: URL, content: ''};\n      const script = await backend.addScript(target, scriptInfo, null);\n\n      class Plugin extends TestPlugin {\n        constructor() {\n          super('InstrumentationBreakpoints');\n        }\n\n        override handleScript(_: SDK.Script.Script) {\n          return true;\n        }\n\n        override async sourceLocationToRawLocation(sourceLocation: Chrome.DevTools.SourceLocation):\n            Promise<Chrome.DevTools.RawLocationRange[]> {\n          const {rawModuleId, columnNumber, lineNumber, sourceFileURL} = sourceLocation;\n          if (lineNumber === 0 && columnNumber === 0 && sourceFileURL === 'test.cc') {\n            return [{rawModuleId, startOffset: 0, endOffset: 0}];\n          }\n          return [];\n        }\n\n        override async rawLocationToSourceLocation(rawLocation: Chrome.DevTools.RawLocation):\n            Promise<Chrome.DevTools.SourceLocation[]> {\n          let sourceLocations: Chrome.DevTools.SourceLocation[] = [];\n          if (rawLocation.codeOffset === 0) {\n            sourceLocations =\n                [{rawModuleId: rawLocation.rawModuleId, columnNumber: 0, lineNumber: 0, sourceFileURL: 'test.cc'}];\n          }\n          return sourceLocations;\n        }\n\n        override async addRawModule(_rawModuleId: string, _symbolsURL: string, _rawModule: Chrome.DevTools.RawModule):\n            Promise<string[]> {\n          return ['test.cc'];  // need to return something to get the script associated with the plugin.\n        }\n      }\n      // Create a plugin that is able to produce a mapping for our script.\n      pluginManager.addPlugin(new Plugin());\n\n      const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n      assert.exists(debuggerModel);\n\n      let sourceURL;\n      const sources = await pluginManager.getSourcesForScript(script);  // wait for plugin source setup to finish.\n      if (!Array.isArray(sources)) {\n        assert.fail('Sources is expected to be an array of sourceURLs');\n      } else {\n        assert.lengthOf(sources, 1);\n        sourceURL = sources[0];\n      }\n      assert.exists(sourceURL);\n\n      // Get the uiSourceCode for the original source.\n      const uiSourceCode = await debuggerWorkspaceBinding.uiSourceCodeForDebuggerLanguagePluginSourceURLPromise(\n          debuggerModel, sourceURL);\n      assert.exists(uiSourceCode);\n\n      // Set the breakpoint on the front-end/model side.\n      const breakpoint = await breakpointManager.setBreakpoint(uiSourceCode, 0, 0, ...DEFAULT_BREAKPOINT);\n      assert.exists(breakpoint);\n\n      // Set the breakpoint response for our upcoming request.\n      void backend.responderToBreakpointByUrlRequest(URL, 0)({\n        breakpointId: 'BREAK_ID' as Protocol.Debugger.BreakpointId,\n        locations: [\n          {\n            scriptId: script.scriptId,\n            lineNumber: 0,\n            columnNumber: 0,\n          },\n        ],\n      });\n\n      // Await breakpoint updates.\n      await breakpoint.refreshInDebugger();\n      assert.deepEqual(Array.from(breakpoint.getUiSourceCodes()), [uiSourceCode]);\n\n      // Verify the bound position.\n      const boundLocations = breakpointManager.breakpointLocationsForUISourceCode(uiSourceCode);\n      assert.strictEqual(1, boundLocations.length);\n      assert.strictEqual(0, boundLocations[0].uiLocation.lineNumber);\n      assert.strictEqual(0, boundLocations[0].uiLocation.columnNumber);\n\n      // Disconnect from the target. This will also unload the script.\n      breakpointManager.targetManager.removeTarget(target);\n\n      // Make sure the source code for the script was removed from the breakpoint.\n      assert.strictEqual(breakpoint.getUiSourceCodes().size, 0);\n\n      // Remove the breakpoint.\n      await breakpoint.remove(true /* keepInStorage */);\n\n      // Create a new target.\n      target = createTarget();\n      SDK.TargetManager.TargetManager.instance().setScopeTarget(target);\n\n      const reloadedDebuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n      assert.exists(reloadedDebuggerModel);\n\n      // Add the same script under a different scriptId.\n      const reloadedScript = await backend.addScript(target, scriptInfo, null);\n\n      // Get the uiSourceCode for the original source.\n      const reloadedUiSourceCode = await debuggerWorkspaceBinding.uiSourceCodeForDebuggerLanguagePluginSourceURLPromise(\n          reloadedDebuggerModel, sourceURL);\n      assert.exists(reloadedUiSourceCode);\n\n      // Set the breakpoint response for our upcoming request.\n      void backend.responderToBreakpointByUrlRequest(URL, 0)({\n        breakpointId: 'RELOADED_BREAK_ID' as Protocol.Debugger.BreakpointId,\n        locations: [{\n          scriptId: reloadedScript.scriptId,\n          lineNumber: 0,\n          columnNumber: 0,\n        }],\n      });\n\n      // Register our interest in an outgoing 'resume', which should be sent as soon as\n      // we have set up all breakpoints during the instrumentation pause.\n      const resumeSentPromise = registerListenerOnOutgoingMessage('Debugger.resume');\n\n      // Inform the front-end about an instrumentation break.\n      backend.dispatchDebuggerPause(reloadedScript, Protocol.Debugger.PausedEventReason.Instrumentation);\n\n      // Wait for the breakpoints to be set, and the resume to be sent.\n      await resumeSentPromise;\n\n      // Verify the restored position.\n      const reloadedBoundLocations = breakpointManager.breakpointLocationsForUISourceCode(reloadedUiSourceCode);\n      assert.strictEqual(1, reloadedBoundLocations.length);\n      assert.strictEqual(0, reloadedBoundLocations[0].uiLocation.lineNumber);\n      assert.strictEqual(0, reloadedBoundLocations[0].uiLocation.columnNumber);\n    });\n\n    it('can move breakpoints to network files that are set in matching file system files', async () => {\n      const workspace = Workspace.Workspace.WorkspaceImpl.instance();\n      Persistence.Persistence.PersistenceImpl.instance({forceNew: true, workspace, breakpointManager});\n      const fileName = Common.ParsedURL.ParsedURL.extractName(scriptDescription.url);\n\n      const fileSystemPath = 'file://path/to/filesystem' as Platform.DevToolsPath.UrlString;\n      const fileSystemFileUrl = fileSystemPath + '/' + fileName as Platform.DevToolsPath.UrlString;\n\n      await testBreakpointMovedOnInstrumentationBreak(fileSystemPath, fileSystemFileUrl, scriptDescription.content);\n    });\n\n    it('can move breakpoints to network files that are set in override files', async () => {\n      const workspace = Workspace.Workspace.WorkspaceImpl.instance();\n      SDK.NetworkManager.MultitargetNetworkManager.instance({forceNew: true});\n      Persistence.Persistence.PersistenceImpl.instance({forceNew: true, workspace, breakpointManager});\n      Persistence.NetworkPersistenceManager.NetworkPersistenceManager.instance(\n          {forceNew: true, workspace: Workspace.Workspace.WorkspaceImpl.instance()});\n\n      const fileSystemPath = 'file://path/to/overrides' as Platform.DevToolsPath.UrlString;\n      const fielSystemFileUrl = fileSystemPath + '/site/script.js' as Platform.DevToolsPath.UrlString;\n      const type = 'overrides';\n      const content = '';\n\n      await testBreakpointMovedOnInstrumentationBreak(fileSystemPath, fielSystemFileUrl, content, type);\n    });\n  });\n\n  it('removes breakpoints that resolve to the same uiLocation as a previous breakpoint', async () => {\n    const scriptInfo = {url: URL, content: 'console.log(\\'hello\\');'};\n    const script = await backend.addScript(target, scriptInfo, null);\n\n    const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n    assert.exists(debuggerModel);\n\n    // Set the breakpoint response for our upcoming requests. Both breakpoints should resolve\n    // to the same raw location in order to have a clash.\n    void backend.responderToBreakpointByUrlRequest(URL, 0)({\n      breakpointId: 'BREAK_ID' as Protocol.Debugger.BreakpointId,\n      locations: [{\n        scriptId: script.scriptId,\n        lineNumber: 0,\n        columnNumber: 0,\n      }],\n    });\n\n    void backend.responderToBreakpointByUrlRequest(URL, 2)({\n      breakpointId: 'SLIDING_BREAK_ID' as Protocol.Debugger.BreakpointId,\n      locations: [{\n        scriptId: script.scriptId,\n        lineNumber: 0,\n        columnNumber: 0,\n      }],\n    });\n\n    const uiSourceCode = await uiSourceCodeFromScript(debuggerModel, script);\n    assert.exists(uiSourceCode);\n\n    // Set the breakpoint on the front-end/model side.\n    const breakpoint = await breakpointManager.setBreakpoint(uiSourceCode, 0, 0, ...DEFAULT_BREAKPOINT);\n    assert.exists(breakpoint);\n\n    // This breakpoint will slide to lineNumber: 0, columnNumber: 0 and thus\n    // clash with the previous breakpoint.\n    const slidingBreakpoint = await breakpointManager.setBreakpoint(uiSourceCode, 2, 0, ...DEFAULT_BREAKPOINT);\n    assert.exists(slidingBreakpoint);\n\n    // Wait until both breakpoints have run their updates.\n    await breakpoint.refreshInDebugger();\n    await slidingBreakpoint.refreshInDebugger();\n\n    // The first breakpoint is kept on a clash, the second one should be removed.\n    assert.isFalse(breakpoint.isRemoved);\n    assert.isTrue(slidingBreakpoint.isRemoved);\n  });\n\n  it('Breakpoint does not keep file system source code alive after file system removal', async () => {\n    Root.Runtime.experiments.enableForTest(Root.Runtime.ExperimentName.INSTRUMENTATION_BREAKPOINTS);\n    const breakpointLine = 0;\n    const resolvedBreakpointLine = 1;\n\n    const workspace = Workspace.Workspace.WorkspaceImpl.instance();\n    const persistence =\n        Persistence.Persistence.PersistenceImpl.instance({forceNew: true, workspace, breakpointManager});\n    Persistence.NetworkPersistenceManager.NetworkPersistenceManager.instance(\n        {forceNew: true, workspace: Workspace.Workspace.WorkspaceImpl.instance()});\n\n    // Create a file system project and source code.\n    const fileName = Common.ParsedURL.ParsedURL.extractName(scriptDescription.url);\n    const fileSystemPath = 'file://path/to/filesystem' as Platform.DevToolsPath.UrlString;\n    const fileSystemFileUrl = fileSystemPath + '/' + fileName as Platform.DevToolsPath.UrlString;\n    const {uiSourceCode: fileSystemUiSourceCode, project} = createFileSystemFileForPersistenceTests(\n        {fileSystemFileUrl, fileSystemPath}, scriptDescription.url, scriptDescription.content, target);\n\n    const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n    assert.exists(debuggerModel);\n\n    // Add the same script via the debugger protocol.\n    const bindingCreatedPromise = persistence.once(Persistence.Persistence.Events.BindingCreated);\n    const script = await backend.addScript(target, scriptDescription, null);\n    const uiSourceCode = await uiSourceCodeFromScript(debuggerModel, script);\n    await bindingCreatedPromise;\n    assert.exists(uiSourceCode);\n\n    // Set the breakpoint on the (network) script.\n    void backend.responderToBreakpointByUrlRequest(URL, breakpointLine)({\n      breakpointId: 'BREAK_ID' as Protocol.Debugger.BreakpointId,\n      locations: [\n        {\n          scriptId: script.scriptId,\n          lineNumber: resolvedBreakpointLine,\n          columnNumber: 0,\n        },\n      ],\n    });\n    await breakpointManager.setBreakpoint(uiSourceCode, breakpointLine, 0, ...DEFAULT_BREAKPOINT);\n\n    // Remove the file system project.\n    const bindingRemovedPromise = persistence.once(Persistence.Persistence.Events.BindingRemoved);\n    project.dispose();\n    // Make sure the binding is removed.\n    await bindingRemovedPromise;\n\n    // After this, the breakpoint manager should not refer to the file system source code anymore, but\n    // the file system breakpoint location should be in the storage.\n    assert.isEmpty(breakpointManager.breakpointLocationsForUISourceCode(fileSystemUiSourceCode));\n    assert.strictEqual(breakpointManager.storage.breakpointItems(fileSystemUiSourceCode.url()).length, 1);\n\n    Root.Runtime.experiments.disableForTest(Root.Runtime.ExperimentName.INSTRUMENTATION_BREAKPOINTS);\n  });\n\n  it('Breakpoints are set only into network project', async () => {\n    const breakpointLine = 0;\n    const workspace = Workspace.Workspace.WorkspaceImpl.instance();\n    const persistence =\n        Persistence.Persistence.PersistenceImpl.instance({forceNew: true, workspace, breakpointManager});\n    Persistence.NetworkPersistenceManager.NetworkPersistenceManager.instance(\n        {forceNew: true, workspace: Workspace.Workspace.WorkspaceImpl.instance()});\n\n    // Create a file system project and source code.\n    const fileName = Common.ParsedURL.ParsedURL.extractName(scriptDescription.url);\n    const fileSystemPath = 'file://path/to/filesystem' as Platform.DevToolsPath.UrlString;\n    const fileSystemFileUrl = fileSystemPath + '/' + fileName as Platform.DevToolsPath.UrlString;\n    createFileSystemFileForPersistenceTests(\n        {fileSystemFileUrl, fileSystemPath}, scriptDescription.url, scriptDescription.content, target);\n\n    const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n    assert.exists(debuggerModel);\n\n    // Add the same script with the same URL via the debugger protocol.\n    const bindingCreatedPromise = persistence.once(Persistence.Persistence.Events.BindingCreated);\n    const fileScriptDescription = {...scriptDescription, url: fileSystemFileUrl};\n    const script = await backend.addScript(target, fileScriptDescription, null);\n    const uiSourceCode = await uiSourceCodeFromScript(debuggerModel, script);\n    await bindingCreatedPromise;\n    assert.exists(uiSourceCode);\n\n    let addedBreakpoint: Breakpoints.BreakpointManager.Breakpoint|null = null;\n    breakpointManager.addEventListener(Breakpoints.BreakpointManager.Events.BreakpointAdded, ({data: {breakpoint}}) => {\n      assert.isNull(addedBreakpoint, 'More than one breakpoint was added');\n      addedBreakpoint = breakpoint;\n    });\n\n    // Set the breakpoint on the (network) script.\n    void backend.responderToBreakpointByUrlRequest(fileSystemFileUrl, breakpointLine)({\n      breakpointId: 'BREAK_ID' as Protocol.Debugger.BreakpointId,\n      locations: [\n        {\n          scriptId: script.scriptId,\n          lineNumber: 3,\n          columnNumber: 3,\n        },\n      ],\n    });\n    const breakpoint =\n        await breakpointManager.setBreakpoint(uiSourceCode, breakpointLine, undefined, ...DEFAULT_BREAKPOINT);\n    assert.exists(breakpoint);\n\n    // Expect that the breakpoint is only added to the network UI source code.\n    assert.strictEqual(breakpoint, addedBreakpoint);\n    assert.deepStrictEqual(Array.from(breakpoint.getUiSourceCodes()), [uiSourceCode]);\n  });\n\n  it('updates a breakpoint after live editing the underlying script', async () => {\n    const scriptInfo = {url: URL, content: 'console.log(\\'hello\\');'};\n    const script = await backend.addScript(target, scriptInfo, null);\n\n    const debuggerModel = target.model(SDK.DebuggerModel.DebuggerModel);\n    assert.exists(debuggerModel);\n\n    void backend.responderToBreakpointByUrlRequest(URL, 0)({\n      breakpointId: 'BREAK_ID' as Protocol.Debugger.BreakpointId,\n      locations: [{\n        scriptId: script.scriptId,\n        lineNumber: 0,\n        columnNumber: 0,\n      }],\n    });\n\n    setMockConnectionResponseHandler(\n        'Debugger.setScriptSource', () => ({status: Protocol.Debugger.SetScriptSourceResponseStatus.Ok}));\n\n    const uiSourceCode = await uiSourceCodeFromScript(debuggerModel, script);\n    assert.exists(uiSourceCode);\n\n    // Set the breakpoint on the front-end/model side.\n    const breakpoint = await breakpointManager.setBreakpoint(uiSourceCode, 0, 0, ...DEFAULT_BREAKPOINT);\n    assert.exists(breakpoint);\n\n    // Wait for the breakpoint to be set in the backend.\n    await breakpoint.refreshInDebugger();\n\n    // Simulate live editing. We do this from the UISourceCode instead of the `Script`\n    // so the `ResourceScriptFile` updates the LiveLocation of the `ModelBreakpoint`\n    // (which in turn updates the UILocation on the breakpoint).\n    uiSourceCode.setWorkingCopy('\\n\\nconsole.log(\\'hello\\');');\n    uiSourceCode.commitWorkingCopy();\n\n    // Note that `UISourceCode` does not actually track how a breakpoint moves. This\n    // is normally done by CodeMirror + DebuggerPlugin. This means even though the\n    // console.log moves two lines down, we still try to reset the breakpoint on line 0.\n    await backend.responderToBreakpointByUrlRequest(URL, 0)({\n      breakpointId: 'BREAK_ID' as Protocol.Debugger.BreakpointId,\n      locations: [{\n        scriptId: script.scriptId,\n        lineNumber: 0,\n        columnNumber: 0,\n      }],\n    });\n  });\n\n  describe('can correctly set breakpoints for all pre-registered targets', () => {\n    let mainUiSourceCode: Workspace.UISourceCode.UISourceCode;\n    let workerUiSourceCode: Workspace.UISourceCode.UISourceCode;\n\n    let workerScript: SDK.Script.Script;\n    let mainScript: SDK.Script.Script;\n\n    let breakpoint: Breakpoints.BreakpointManager.Breakpoint;\n\n    function waitForBreakpointLocationsAdded() {\n      let twoBreakpointLocationsCallback: () => void;\n      const twoBreakpointLocationsAddedPromise = new Promise<void>(resolve => {\n        twoBreakpointLocationsCallback = resolve;\n      });\n      breakpointManager.addEventListener(Breakpoints.BreakpointManager.Events.BreakpointAdded, () => {\n        if (breakpointManager.allBreakpointLocations().length === 2) {\n          twoBreakpointLocationsCallback();\n        }\n      });\n      return twoBreakpointLocationsAddedPromise;\n    }\n\n    beforeEach(async () => {\n      setupPageResourceLoaderForSourceMap(sourceMapContent);\n\n      // Create a worker target.\n      const workerTarget = createTarget({name: 'worker', parentTarget: target});\n\n      // Add script with source map.\n      const scriptInfo = {url: URL, content: COMPILED_SCRIPT_SOURCES_CONTENT};\n      const sourceMapInfo = {url: SOURCE_MAP_URL, content: sourceMapContent};\n      mainScript = await backend.addScript(target, scriptInfo, sourceMapInfo);\n      workerScript = await backend.addScript(workerTarget, scriptInfo, sourceMapInfo);\n\n      // Get the uiSourceCode for the original source in the main target.\n      mainUiSourceCode = await debuggerWorkspaceBinding.uiSourceCodeForSourceMapSourceURLPromise(\n          mainScript.debuggerModel, ORIGINAL_SCRIPT_SOURCE_URL, mainScript.isContentScript());\n      assert.exists(mainUiSourceCode);\n\n      // Get the uiSourceCode for the original source in the worker target.\n      workerUiSourceCode = await debuggerWorkspaceBinding.uiSourceCodeForSourceMapSourceURLPromise(\n          workerScript.debuggerModel, ORIGINAL_SCRIPT_SOURCE_URL, workerScript.isContentScript());\n      assert.exists(mainUiSourceCode);\n\n      // Stub the 'modelAdded' function that is called in the Breakpoint prototype.\n      // The 'modelAdded' will kick off updating the debugger of each target\n      // as soon as a new breakpoint was created.\n      // By stubbing it and ignoring what should be done,\n      // we can manually call 'modelAdded' in the order that we want,\n      // and thus control which target is taken care of first.\n      const modelAddedStub =\n          sinon.stub(Breakpoints.BreakpointManager.Breakpoint.prototype, 'modelAdded').callsFake((() => {}));\n\n      // Set the breakpoint on the main target, but note that the debugger won't be updated.\n      const bp = await breakpointManager.setBreakpoint(mainUiSourceCode, 0, 0, ...DEFAULT_BREAKPOINT);\n      assert.exists(bp);\n      breakpoint = bp;\n\n      // Now restore the actual behavior of 'modelAdded'.\n      modelAddedStub.restore();\n    });\n\n    it('if the target whose uiSourceCode was used for breakpoint setting is handled last', async () => {\n      // Handle setting breakpoint on the worker first.\n      breakpoint.modelAdded(workerScript.debuggerModel);\n      await backend.responderToBreakpointByUrlRequest(URL, 0)({\n        breakpointId: 'WORKER_ID' as Protocol.Debugger.BreakpointId,\n        locations: [\n          {\n            scriptId: workerScript.scriptId,\n            lineNumber: 0,\n            columnNumber: 0,\n          },\n        ],\n      });\n\n      // Handle setting breakpoint on the main target next.\n      breakpoint.modelAdded(mainScript.debuggerModel);\n      await backend.responderToBreakpointByUrlRequest(URL, 0)({\n        breakpointId: 'MAIN_BREAK_ID' as Protocol.Debugger.BreakpointId,\n        locations: [\n          {\n            scriptId: mainScript.scriptId,\n            lineNumber: 0,\n            columnNumber: 0,\n          },\n        ],\n      });\n\n      await waitForBreakpointLocationsAdded();\n\n      assert.deepEqual(Array.from(breakpoint.getUiSourceCodes()), [mainUiSourceCode, workerUiSourceCode]);\n\n      const mainBoundLocations = breakpointManager.breakpointLocationsForUISourceCode(mainUiSourceCode);\n      assert.strictEqual(1, mainBoundLocations.length);\n\n      const workerBoundLocations = breakpointManager.breakpointLocationsForUISourceCode(workerUiSourceCode);\n      assert.strictEqual(1, workerBoundLocations.length);\n    });\n\n    it('if the target whose uiSourceCode was used for breakpoint setting is handled first', async () => {\n      // Handle setting breakpoint on the main target first.\n      breakpoint.modelAdded(mainScript.debuggerModel);\n      await backend.responderToBreakpointByUrlRequest(URL, 0)({\n        breakpointId: 'MAIN_BREAK_ID' as Protocol.Debugger.BreakpointId,\n        locations: [\n          {\n            scriptId: mainScript.scriptId,\n            lineNumber: 0,\n            columnNumber: 0,\n          },\n        ],\n      });\n\n      // Handle setting breakpoint on the worker next.\n      breakpoint.modelAdded(workerScript.debuggerModel);\n      await backend.responderToBreakpointByUrlRequest(URL, 0)({\n        breakpointId: 'WORKER_ID' as Protocol.Debugger.BreakpointId,\n        locations: [\n          {\n            scriptId: workerScript.scriptId,\n            lineNumber: 0,\n            columnNumber: 0,\n          },\n        ],\n      });\n\n      await waitForBreakpointLocationsAdded();\n\n      assert.deepEqual(Array.from(breakpoint.getUiSourceCodes()), [mainUiSourceCode, workerUiSourceCode]);\n\n      const mainBoundLocations = breakpointManager.breakpointLocationsForUISourceCode(mainUiSourceCode);\n      assert.strictEqual(1, mainBoundLocations.length);\n\n      const workerBoundLocations = breakpointManager.breakpointLocationsForUISourceCode(workerUiSourceCode);\n      assert.strictEqual(1, workerBoundLocations.length);\n    });\n  });\n\n  describe('supports modern Web development workflows', () => {\n    it('supports webpack code splitting', async () => {\n      // This is basically the \"Shared code with webpack entry point code-splitting\" scenario\n      // outlined in http://go/devtools-source-identities, where two routes (`route1.ts` and\n      // `route2.ts`) share some common code (`shared.ts`), and webpack is configured to spit\n      // out a dedicated bundle for each route (`route1.js` and `route2.js`). The demo can be\n      // found at https://devtools-source-identities.glitch.me/webpack-code-split/ for further\n      // reference.\n      const sourceRoot = 'webpack:///src';\n\n      // Load the script and source map for the first route.\n      const route1ScriptInfo = {\n        url: 'http://example.com/route1.js',\n        content: 'function f(x){}\\nf(1)',\n      };\n      const route1SourceMapInfo = {\n        url: `${route1ScriptInfo.url}.map`,\n        content: encodeSourceMap(['0:0 => shared.ts:0:0', '1:0 => route1.ts:0:0'], sourceRoot),\n      };\n      const [firstSharedUISourceCode, route1Script] = await Promise.all([\n        debuggerWorkspaceBinding.waitForUISourceCodeAdded(\n            `${sourceRoot}/shared.ts` as Platform.DevToolsPath.UrlString, target),\n        backend.addScript(target, route1ScriptInfo, route1SourceMapInfo),\n      ]);\n\n      // Set a breakpoint in `shared.ts`.\n      await Promise.all([\n        backend.responderToBreakpointByUrlRequest(route1ScriptInfo.url, 0)({\n          breakpointId: 'ROUTE1_JS_BREAK_INITIAL_ID' as Protocol.Debugger.BreakpointId,\n          locations: [\n            {\n              scriptId: route1Script.scriptId,\n              lineNumber: 0,\n              columnNumber: 0,\n            },\n          ],\n        }),\n        breakpointManager.setBreakpoint(firstSharedUISourceCode, 0, 0, ...DEFAULT_BREAKPOINT),\n      ]);\n\n      // Now inject a second route that also references `shared.ts`, which should trigger\n      // removal of the original breakpoint in `route1.js`.\n      const route2ScriptInfo = {\n        url: 'http://example.com/route2.js',\n        content: 'function f(x){}\\nf(2)',\n      };\n      const route2SourceMapInfo = {\n        url: `${route2ScriptInfo.url}.map`,\n        content: encodeSourceMap(['0:0 => shared.ts:0:0', '1:0 => route2.ts:0:0'], sourceRoot),\n      };\n      const route1SetBreakpointByUrlRequest = backend.responderToBreakpointByUrlRequest(route1ScriptInfo.url, 0);\n      const route2SetBreakpointByUrlRequest = backend.responderToBreakpointByUrlRequest(route2ScriptInfo.url, 0);\n      const [, route2Script] = await Promise.all([\n        backend.breakpointRemovedPromise('ROUTE1_JS_BREAK_INITIAL_ID' as Protocol.Debugger.BreakpointId),\n        backend.addScript(target, route2ScriptInfo, route2SourceMapInfo),\n      ]);\n\n      // Now the BreakpointManager should migrate the breakpoints from the\n      // first `shared.ts` to the second `shared.ts`.\n      await Promise.all([\n        route1SetBreakpointByUrlRequest({\n          breakpointId: 'ROUTE1_JS_BREAK_ID' as Protocol.Debugger.BreakpointId,\n          locations: [\n            {\n              scriptId: route1Script.scriptId,\n              lineNumber: 0,\n              columnNumber: 0,\n            },\n          ],\n        }),\n        route2SetBreakpointByUrlRequest({\n          breakpointId: 'ROUTE2_JS_BREAK_ID' as Protocol.Debugger.BreakpointId,\n          locations: [\n            {\n              scriptId: route2Script.scriptId,\n              lineNumber: 0,\n              columnNumber: 0,\n            },\n          ],\n        }),\n      ]);\n    });\n  });\n});\n"]}