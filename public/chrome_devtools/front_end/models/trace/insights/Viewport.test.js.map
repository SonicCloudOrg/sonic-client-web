{"version":3,"file":"Viewport.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/insights/Viewport.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nconst {assert} = chai;\nimport * as TraceModel from '../trace.js';\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\n\nasync function parseAndFinalizeData(testContext: Mocha.Suite|Mocha.Context|null, traceFile: string) {\n  const traceEvents = await TraceLoader.rawEvents(testContext, traceFile);\n  TraceModel.Handlers.ModelHandlers.Meta.reset();\n  TraceModel.Handlers.ModelHandlers.Meta.initialize();\n  for (const event of traceEvents) {\n    TraceModel.Handlers.ModelHandlers.Meta.handleEvent(event);\n    TraceModel.Handlers.ModelHandlers.UserInteractions.handleEvent(event);\n  }\n  await TraceModel.Handlers.ModelHandlers.Meta.finalize();\n  await TraceModel.Handlers.ModelHandlers.UserInteractions.finalize();\n\n  const data = {\n    Meta: TraceModel.Handlers.ModelHandlers.Meta.data(),\n    UserInteractions: TraceModel.Handlers.ModelHandlers.UserInteractions.data(),\n  } as TraceModel.Handlers.Types.EnabledHandlerDataWithMeta<typeof TraceModel.Handlers.ModelHandlers>;\n\n  return data;\n}\n\ndescribe('Viewport', function() {\n  it('detects mobile optimized viewport', async () => {\n    const data = await parseAndFinalizeData(this, 'lcp-images.json.gz');\n    const context = {\n      frameId: data.Meta.mainFrameId,\n      navigationId: data.Meta.navigationsByNavigationId.keys().next().value,\n    };\n\n    const insight = TraceModel.Insights.InsightRunners.Viewport.generateInsight(data, context);\n    assert.strictEqual(insight.mobileOptimized, true);\n  });\n\n  it('detects mobile unoptimized viewport', async () => {\n    const data = await parseAndFinalizeData(this, 'lcp-images.json.gz');\n    const context = {\n      frameId: data.Meta.mainFrameId,\n      navigationId: data.Meta.navigationsByNavigationId.keys().next().value,\n    };\n    const events =\n        data.UserInteractions.beginCommitCompositorFrameEvents.filter(event => event.args.frame === context.frameId);\n    assert.isNotEmpty(events);\n    for (const event of events) {\n      event.args.is_mobile_optimized = false;\n    }\n\n    const insight = TraceModel.Insights.InsightRunners.Viewport.generateInsight(data, context);\n    assert.strictEqual(insight.mobileOptimized, false);\n  });\n});\n"]}