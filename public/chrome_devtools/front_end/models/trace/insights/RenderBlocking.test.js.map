{"version":3,"file":"RenderBlocking.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/insights/RenderBlocking.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\nimport * as TraceModel from '../trace.js';\n\nasync function parseAndFinalizeData(testContext: Mocha.Suite|Mocha.Context|null, traceFile: string) {\n  const traceEvents = await TraceLoader.rawEvents(testContext, traceFile);\n  TraceModel.Handlers.ModelHandlers.Meta.reset();\n  TraceModel.Handlers.ModelHandlers.NetworkRequests.reset();\n  TraceModel.Handlers.ModelHandlers.PageLoadMetrics.reset();\n  TraceModel.Handlers.ModelHandlers.Meta.initialize();\n  TraceModel.Handlers.ModelHandlers.NetworkRequests.initialize();\n  for (const event of traceEvents) {\n    TraceModel.Handlers.ModelHandlers.Meta.handleEvent(event);\n    TraceModel.Handlers.ModelHandlers.NetworkRequests.handleEvent(event);\n    TraceModel.Handlers.ModelHandlers.PageLoadMetrics.handleEvent(event);\n  }\n  await TraceModel.Handlers.ModelHandlers.Meta.finalize();\n  await TraceModel.Handlers.ModelHandlers.NetworkRequests.finalize();\n  await TraceModel.Handlers.ModelHandlers.PageLoadMetrics.finalize();\n\n  const data = {\n    Meta: TraceModel.Handlers.ModelHandlers.Meta.data(),\n    NetworkRequests: TraceModel.Handlers.ModelHandlers.NetworkRequests.data(),\n    PageLoadMetrics: TraceModel.Handlers.ModelHandlers.PageLoadMetrics.data(),\n  } as TraceModel.Handlers.Types.EnabledHandlerDataWithMeta<typeof TraceModel.Handlers.ModelHandlers>;\n\n  return data;\n}\n\ndescribe('RenderBlockingRequests', function() {\n  it('finds render blocking requests', async () => {\n    const data = await parseAndFinalizeData(this, 'load-simple.json.gz');\n    const context = {\n      frameId: data.Meta.mainFrameId,\n      navigationId: data.Meta.navigationsByNavigationId.keys().next().value,\n    };\n\n    const insight = TraceModel.Insights.InsightRunners.RenderBlocking.generateInsight(data, context);\n\n    assert.strictEqual(insight.renderBlockingRequests.length, 2);\n    assert.deepEqual(insight.renderBlockingRequests.map(r => r.args.data.url), [\n      'https://fonts.googleapis.com/css2?family=Orelega+One&display=swap',\n      'http://localhost:8080/styles.css',\n    ]);\n  });\n\n  it('returns a warning if navigation does not have a first paint event', async () => {\n    const data = await parseAndFinalizeData(this, 'user-timings.json.gz');\n    const context = {\n      frameId: data.Meta.mainFrameId,\n      navigationId: data.Meta.navigationsByNavigationId.keys().next().value,\n    };\n\n    const insight = TraceModel.Insights.InsightRunners.RenderBlocking.generateInsight(data, context);\n    assert.strictEqual(insight.renderBlockingRequests.length, 0);\n    assert.strictEqual(insight.warnings?.length, 1);\n    assert.strictEqual(insight.warnings?.[0], 'NO_FP');\n  });\n\n  it('considers only the navigation specified by the context', async () => {\n    const data = await parseAndFinalizeData(this, 'multiple-navigations-render-blocking.json.gz');\n\n    const navigations = Array.from(data.Meta.navigationsByNavigationId.values());\n\n    const context = {\n      frameId: data.Meta.mainFrameId,\n      navigationId: navigations[0].args.data?.navigationId || '',\n    };\n\n    const insight = TraceModel.Insights.InsightRunners.RenderBlocking.generateInsight(data, context);\n\n    assert(insight.renderBlockingRequests.length > 0, 'no render blocking requests found');\n\n    assert(\n        insight.renderBlockingRequests.every(r => r.args.data.syntheticData.sendStartTime > navigations[0].ts),\n        'a result is not contained by the nav bounds');\n    assert(\n        insight.renderBlockingRequests.every(r => r.args.data.syntheticData.finishTime < navigations[1].ts),\n        'a result is not contained by the nav bounds');\n  });\n\n  it('considers only the frame specified by the context', async () => {\n    const data = await parseAndFinalizeData(this, 'render-blocking-in-iframe.json.gz');\n\n    const navigations = Array.from(data.Meta.navigationsByNavigationId.values());\n\n    const context = {\n      frameId: data.Meta.mainFrameId,\n      navigationId: navigations[0].args.data?.navigationId || '',\n    };\n\n    const insight = TraceModel.Insights.InsightRunners.RenderBlocking.generateInsight(data, context);\n\n    assert(insight.renderBlockingRequests.length > 0, 'no render blocking requests found');\n\n    assert(\n        insight.renderBlockingRequests.every(r => r.args.data.frame === context.frameId),\n        'a result is not from the main frame');\n  });\n\n  it('ignores blocking request after first paint', async () => {\n    const data = await parseAndFinalizeData(this, 'parser-blocking-after-paint.json.gz');\n\n    const context = {\n      frameId: data.Meta.mainFrameId,\n      navigationId: data.Meta.navigationsByNavigationId.keys().next().value,\n    };\n\n    const insight = TraceModel.Insights.InsightRunners.RenderBlocking.generateInsight(data, context);\n\n    assert.strictEqual(insight.renderBlockingRequests.length, 0);\n  });\n\n  it('correctly handles body parser blocking requests', async () => {\n    const data = await parseAndFinalizeData(this, 'render-blocking-body.json.gz');\n\n    const context = {\n      frameId: data.Meta.mainFrameId,\n      navigationId: data.Meta.navigationsByNavigationId.keys().next().value,\n    };\n\n    const insight = TraceModel.Insights.InsightRunners.RenderBlocking.generateInsight(data, context);\n\n    assert.deepStrictEqual(insight.renderBlockingRequests.map(r => r.args.data.url), [\n      'http://localhost:8080/render-blocking/style.css',\n      'http://localhost:8080/render-blocking/script.js?beforeImage',\n    ]);\n  });\n});\n"]}