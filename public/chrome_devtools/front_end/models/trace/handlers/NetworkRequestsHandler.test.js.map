{"version":3,"file":"NetworkRequestsHandler.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/handlers/NetworkRequestsHandler.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\nimport * as TraceModel from '../trace.js';\n\ntype DataArgs = TraceModel.Types.TraceEvents.SyntheticNetworkRequest['args']['data'];\ntype DataArgsProcessedData = TraceModel.Types.TraceEvents.SyntheticNetworkRequest['args']['data']['syntheticData'];\ntype DataArgsMap = Map<keyof DataArgs, DataArgs[keyof DataArgs]>;\ntype DataArgsProcessedDataMap = Map<keyof DataArgsProcessedData, DataArgsProcessedData[keyof DataArgsProcessedData]>;\n\ndescribe('NetworkRequestsHandler', function() {\n  describe('error handling', () => {\n    it('throws if handleEvent is called before it is initialized', () => {\n      assert.throws(() => {\n        TraceModel.Handlers.ModelHandlers.NetworkRequests.handleEvent(\n            {} as TraceModel.Types.TraceEvents.TraceEventData);\n      }, 'Network Request handler is not initialized');\n    });\n\n    it('throws if finalize is called before initialize', async () => {\n      let thrown: Error|null = null;\n      try {\n        await TraceModel.Handlers.ModelHandlers.NetworkRequests.finalize();\n      } catch (e) {\n        thrown = e as Error;\n      }\n      assert.strictEqual(thrown?.message, 'Network Request handler is not initialized');\n    });\n  });\n\n  describe('network requests calculations', () => {\n    beforeEach(() => {\n      TraceModel.Handlers.ModelHandlers.Meta.reset();\n      TraceModel.Handlers.ModelHandlers.Meta.initialize();\n      TraceModel.Handlers.ModelHandlers.NetworkRequests.initialize();\n    });\n\n    it('calculates network requests correctly', async function() {\n      const traceEvents = await TraceLoader.rawEvents(this, 'load-simple.json.gz');\n      for (const event of traceEvents) {\n        TraceModel.Handlers.ModelHandlers.Meta.handleEvent(event);\n        TraceModel.Handlers.ModelHandlers.NetworkRequests.handleEvent(event);\n      }\n      await TraceModel.Handlers.ModelHandlers.Meta.finalize();\n      await TraceModel.Handlers.ModelHandlers.NetworkRequests.finalize();\n\n      const requestsByOrigin = TraceModel.Handlers.ModelHandlers.NetworkRequests.data().byOrigin;\n      assert.strictEqual(requestsByOrigin.size, 3, 'Too many origins detected');\n\n      const topLevelRequests = requestsByOrigin.get('localhost:8080') || {all: []};\n      assert.strictEqual(topLevelRequests.all.length, 4, 'Incorrect number of requests');\n\n      // Page Request.\n      const pageRequestExpected: DataArgsProcessedDataMap = new Map([\n        ['queueing', TraceModel.Types.Timing.MicroSeconds(25085)],\n        ['stalled', TraceModel.Types.Timing.MicroSeconds(5670)],\n        ['dnsLookup', TraceModel.Types.Timing.MicroSeconds(105)],\n        ['initialConnection', TraceModel.Types.Timing.MicroSeconds(498)],\n        ['ssl', TraceModel.Types.Timing.MicroSeconds(0)],\n        ['requestSent', TraceModel.Types.Timing.MicroSeconds(363)],\n        ['waiting', TraceModel.Types.Timing.MicroSeconds(1383)],\n        ['download', TraceModel.Types.Timing.MicroSeconds(4827)],\n        ['networkDuration', TraceModel.Types.Timing.MicroSeconds(38503)],\n      ]);\n      assertDataArgsProcessedDataStats(topLevelRequests.all, 'http://localhost:8080/', pageRequestExpected);\n\n      // CSS Request.\n      const cssRequestExpected: DataArgsProcessedDataMap = new Map([\n        ['queueing', TraceModel.Types.Timing.MicroSeconds(0)],\n        ['stalled', TraceModel.Types.Timing.MicroSeconds(2175)],\n        ['dnsLookup', TraceModel.Types.Timing.MicroSeconds(0)],\n        ['initialConnection', TraceModel.Types.Timing.MicroSeconds(0)],\n        ['ssl', TraceModel.Types.Timing.MicroSeconds(0)],\n        ['requestSent', TraceModel.Types.Timing.MicroSeconds(0)],\n        ['waiting', TraceModel.Types.Timing.MicroSeconds(0)],\n        ['download', TraceModel.Types.Timing.MicroSeconds(1294)],\n        ['networkDuration', TraceModel.Types.Timing.MicroSeconds(0)],\n      ]);\n\n      const cssRequestBlockingStatusExpected: DataArgsMap = new Map([\n        ['renderBlocking', 'blocking'],\n      ]);\n\n      assertDataArgsProcessedDataStats(topLevelRequests.all, 'http://localhost:8080/styles.css', cssRequestExpected);\n      assertDataArgsStats(topLevelRequests.all, 'http://localhost:8080/styles.css', cssRequestBlockingStatusExpected);\n\n      // Blocking JS Request.\n      const blockingJSRequestExpected: DataArgsProcessedDataMap = new Map([\n        ['queueing', TraceModel.Types.Timing.MicroSeconds(0)],\n        ['stalled', TraceModel.Types.Timing.MicroSeconds(2126)],\n        ['dnsLookup', TraceModel.Types.Timing.MicroSeconds(0)],\n        ['initialConnection', TraceModel.Types.Timing.MicroSeconds(0)],\n        ['ssl', TraceModel.Types.Timing.MicroSeconds(0)],\n        ['requestSent', TraceModel.Types.Timing.MicroSeconds(0)],\n        ['waiting', TraceModel.Types.Timing.MicroSeconds(0)],\n        ['download', TraceModel.Types.Timing.MicroSeconds(1207)],\n        ['networkDuration', TraceModel.Types.Timing.MicroSeconds(0)],\n      ]);\n\n      const blockingJSBlockingStatusExpected: DataArgsMap = new Map([\n        ['renderBlocking', 'in_body_parser_blocking'],\n      ]);\n\n      assertDataArgsProcessedDataStats(\n          topLevelRequests.all, 'http://localhost:8080/blocking.js', blockingJSRequestExpected);\n      assertDataArgsStats(topLevelRequests.all, 'http://localhost:8080/blocking.js', blockingJSBlockingStatusExpected);\n\n      // Module JS Request (cached).\n      const moduleRequestExpected: DataArgsProcessedDataMap = new Map([\n        ['queueing', TraceModel.Types.Timing.MicroSeconds(0)],\n        ['stalled', TraceModel.Types.Timing.MicroSeconds(76865)],\n        ['dnsLookup', TraceModel.Types.Timing.MicroSeconds(0)],\n        ['initialConnection', TraceModel.Types.Timing.MicroSeconds(0)],\n        ['ssl', TraceModel.Types.Timing.MicroSeconds(0)],\n        ['requestSent', TraceModel.Types.Timing.MicroSeconds(0)],\n        ['waiting', TraceModel.Types.Timing.MicroSeconds(0)],\n        ['download', TraceModel.Types.Timing.MicroSeconds(27839)],\n        ['networkDuration', TraceModel.Types.Timing.MicroSeconds(0)],\n      ]);\n\n      const moduleRequestBlockingStatusExpected: DataArgsMap = new Map([\n        ['renderBlocking', 'non_blocking'],\n      ]);\n\n      assertDataArgsProcessedDataStats(topLevelRequests.all, 'http://localhost:8080/module.js', moduleRequestExpected);\n      assertDataArgsStats(topLevelRequests.all, 'http://localhost:8080/module.js', moduleRequestBlockingStatusExpected);\n\n      // Google Fonts CSS Request (cached).\n      const fontCSSRequests = requestsByOrigin.get('fonts.googleapis.com') || {all: []};\n      assert.strictEqual(fontCSSRequests.all.length, 1, 'Incorrect number of requests');\n\n      const fontCSSRequestExpected: DataArgsProcessedDataMap = new Map([\n        ['queueing', TraceModel.Types.Timing.MicroSeconds(0)],\n        ['stalled', TraceModel.Types.Timing.MicroSeconds(3178)],\n        ['dnsLookup', TraceModel.Types.Timing.MicroSeconds(0)],\n        ['initialConnection', TraceModel.Types.Timing.MicroSeconds(0)],\n        ['ssl', TraceModel.Types.Timing.MicroSeconds(0)],\n        ['requestSent', TraceModel.Types.Timing.MicroSeconds(0)],\n        ['waiting', TraceModel.Types.Timing.MicroSeconds(0)],\n        ['download', TraceModel.Types.Timing.MicroSeconds(1203)],\n        ['networkDuration', TraceModel.Types.Timing.MicroSeconds(0)],\n      ]);\n\n      const fontCSSBlockingStatusExpected: DataArgsMap = new Map([\n        ['renderBlocking', 'blocking'],\n      ]);\n\n      assertDataArgsProcessedDataStats(\n          fontCSSRequests.all, 'https://fonts.googleapis.com/css2?family=Orelega+One&display=swap',\n          fontCSSRequestExpected);\n      assertDataArgsStats(\n          fontCSSRequests.all, 'https://fonts.googleapis.com/css2?family=Orelega+One&display=swap',\n          fontCSSBlockingStatusExpected);\n\n      // Google Fonts Data Request (cached).\n      const fontDataRequests = requestsByOrigin.get('fonts.gstatic.com') || {all: []};\n      assert.strictEqual(fontDataRequests.all.length, 1, 'Incorrect number of requests');\n\n      const fontDataRequestExpected: DataArgsProcessedDataMap = new Map([\n        ['queueing', TraceModel.Types.Timing.MicroSeconds(0)],\n        ['stalled', TraceModel.Types.Timing.MicroSeconds(1929)],\n        ['dnsLookup', TraceModel.Types.Timing.MicroSeconds(0)],\n        ['initialConnection', TraceModel.Types.Timing.MicroSeconds(0)],\n        ['ssl', TraceModel.Types.Timing.MicroSeconds(0)],\n        ['requestSent', TraceModel.Types.Timing.MicroSeconds(0)],\n        ['waiting', TraceModel.Types.Timing.MicroSeconds(0)],\n        ['download', TraceModel.Types.Timing.MicroSeconds(962)],\n        ['networkDuration', TraceModel.Types.Timing.MicroSeconds(0)],\n      ]);\n\n      const fontDataRequestBlockingStatusExpected: DataArgsMap = new Map([\n        ['renderBlocking', 'non_blocking'],\n      ]);\n\n      assertDataArgsProcessedDataStats(\n          fontDataRequests.all, 'https://fonts.gstatic.com/s/orelegaone/v1/3qTpojOggD2XtAdFb-QXZFt93kY.woff2',\n          fontDataRequestExpected);\n\n      assertDataArgsStats(\n          fontDataRequests.all, 'https://fonts.gstatic.com/s/orelegaone/v1/3qTpojOggD2XtAdFb-QXZFt93kY.woff2',\n          fontDataRequestBlockingStatusExpected);\n    });\n  });\n\n  describe('parses the change priority request', () => {\n    beforeEach(() => {\n      TraceModel.Handlers.ModelHandlers.Meta.reset();\n      TraceModel.Handlers.ModelHandlers.Meta.initialize();\n      TraceModel.Handlers.ModelHandlers.NetworkRequests.initialize();\n    });\n\n    it('changes priority of the resouce', async function() {\n      const traceEvents = await TraceLoader.rawEvents(this, 'changing-priority.json.gz');\n\n      for (const event of traceEvents) {\n        TraceModel.Handlers.ModelHandlers.Meta.handleEvent(event);\n        TraceModel.Handlers.ModelHandlers.NetworkRequests.handleEvent(event);\n      }\n      await TraceModel.Handlers.ModelHandlers.Meta.finalize();\n      await TraceModel.Handlers.ModelHandlers.NetworkRequests.finalize();\n\n      const {byTime} = TraceModel.Handlers.ModelHandlers.NetworkRequests.data();\n\n      const imageRequest = byTime.find(request => {\n        return request.args.data.url === 'https://via.placeholder.com/3000.jpg';\n      });\n\n      if (!imageRequest) {\n        throw new Error('Could not find expected network request.');\n      }\n\n      assert.strictEqual(imageRequest.args.data.priority, 'High');\n      assert.strictEqual(imageRequest.args.data.initialPriority, 'Medium');\n    });\n  });\n\n  describe('redirects', () => {\n    beforeEach(() => {\n      TraceModel.Handlers.ModelHandlers.Meta.reset();\n      TraceModel.Handlers.ModelHandlers.Meta.initialize();\n      TraceModel.Handlers.ModelHandlers.NetworkRequests.initialize();\n    });\n\n    it('calculates redirects correctly (navigations)', async function() {\n      const traceEvents = await TraceLoader.rawEvents(this, 'redirects.json.gz');\n      for (const event of traceEvents) {\n        TraceModel.Handlers.ModelHandlers.Meta.handleEvent(event);\n        TraceModel.Handlers.ModelHandlers.NetworkRequests.handleEvent(event);\n      }\n      await TraceModel.Handlers.ModelHandlers.Meta.finalize();\n      await TraceModel.Handlers.ModelHandlers.NetworkRequests.finalize();\n\n      const {byTime} = TraceModel.Handlers.ModelHandlers.NetworkRequests.data();\n      assert.strictEqual(byTime.length, 2, 'Incorrect number of requests');\n      assert.strictEqual(byTime[0].args.data.redirects.length, 0, 'Incorrect number of redirects (request 0)');\n      assert.deepStrictEqual(\n          byTime[1].args.data.redirects,\n          [\n            {\n              url: 'http://localhost:3000/foo',\n              priority: 'VeryHigh',\n              requestMethod: 'GET',\n              ts: TraceModel.Types.Timing.MicroSeconds(1311223447642),\n              dur: TraceModel.Types.Timing.MicroSeconds(7845),\n            },\n            {\n              url: 'http://localhost:3000/bar',\n              priority: 'VeryHigh',\n              requestMethod: 'GET',\n              ts: TraceModel.Types.Timing.MicroSeconds(1311223455487),\n              dur: TraceModel.Types.Timing.MicroSeconds(3771),\n            },\n          ],\n          'Incorrect number of redirects (request 1)');\n    });\n\n    it('calculates redirects correctly (subresources)', async function() {\n      const traceEvents = await TraceLoader.rawEvents(this, 'redirects-subresource-multiple.json.gz');\n      for (const event of traceEvents) {\n        TraceModel.Handlers.ModelHandlers.Meta.handleEvent(event);\n        TraceModel.Handlers.ModelHandlers.NetworkRequests.handleEvent(event);\n      }\n      await TraceModel.Handlers.ModelHandlers.Meta.finalize();\n      await TraceModel.Handlers.ModelHandlers.NetworkRequests.finalize();\n\n      const {byTime} = TraceModel.Handlers.ModelHandlers.NetworkRequests.data();\n      assert.strictEqual(byTime.length, 2, 'Incorrect number of requests');\n      assert.strictEqual(byTime[0].args.data.redirects.length, 0, 'Incorrect number of redirects (request 0)');\n      assert.deepStrictEqual(\n          byTime[1].args.data.redirects,\n          [\n            {\n              url: 'http://localhost:3000/foo.js',\n              priority: 'Low',\n              requestMethod: 'GET',\n              ts: TraceModel.Types.Timing.MicroSeconds(183611568786),\n              dur: TraceModel.Types.Timing.MicroSeconds(506233),\n            },\n            {\n              url: 'http://localhost:3000/bar.js',\n              priority: 'Low',\n              requestMethod: 'GET',\n              ts: TraceModel.Types.Timing.MicroSeconds(183612075019),\n              dur: TraceModel.Types.Timing.MicroSeconds(802726),\n            },\n          ],\n          'Incorrect number of redirects (request 1)');\n    });\n  });\n});\n\nfunction assertDataArgsStats<D extends keyof DataArgs>(\n    requests: TraceModel.Types.TraceEvents.SyntheticNetworkRequest[], url: string, stats: Map<D, DataArgs[D]>): void {\n  const request = requests.find(request => request.args.data.url === url);\n  if (!request) {\n    assert.fail(`Unable to find request for URL ${url}`);\n    return;\n  }\n\n  for (const [name, value] of stats.entries()) {\n    if (typeof request.args.data[name] === 'number') {\n      const expectedValue = value as DataArgs[D];\n      const actualValueRounded = Number((request.args.data[name] as number).toPrecision(5)) as DataArgs[D];\n      assert.strictEqual(actualValueRounded, expectedValue, url);\n    } else {\n      assert.strictEqual(request.args.data[name], value, url);\n    }\n  }\n}\n\nfunction assertDataArgsProcessedDataStats<D extends keyof DataArgsProcessedData>(\n    requests: TraceModel.Types.TraceEvents.SyntheticNetworkRequest[], url: string,\n    stats: Map<D, DataArgsProcessedData[D]>): void {\n  const request = requests.find(request => request.args.data.url === url);\n  if (!request) {\n    assert.fail(`Unable to find request for URL ${url}`);\n    return;\n  }\n\n  for (const [name, value] of stats.entries()) {\n    if (typeof request.args.data.syntheticData[name] === 'number') {\n      const expectedValue = value as DataArgsProcessedData[D];\n      const actualValueRounded =\n          Number((request.args.data.syntheticData[name] as number).toPrecision(5)) as DataArgsProcessedData[D];\n      assert.strictEqual(actualValueRounded, expectedValue, url);\n    } else {\n      assert.strictEqual(request.args.data.syntheticData[name], value, url);\n    }\n  }\n}\n"]}