{"version":3,"file":"ExtensionTraceDataHandler.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/handlers/ExtensionTraceDataHandler.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\nimport * as TraceModel from '../trace.js';\n\ndescribe('ExtensionTraceDataHandler', function() {\n  let extensionData: TraceModel.Handlers.ModelHandlers.ExtensionTraceData.ExtensionTraceData;\n  async function getExtensionDataFromEvents(events: readonly TraceModel.Types.TraceEvents.TraceEventData[]):\n      Promise<TraceModel.Handlers.ModelHandlers.ExtensionTraceData.ExtensionTraceData> {\n    TraceModel.Handlers.ModelHandlers.UserTimings.reset();\n    for (const event of events) {\n      TraceModel.Handlers.ModelHandlers.UserTimings.handleEvent(event);\n    }\n    await TraceModel.Handlers.ModelHandlers.UserTimings.finalize();\n\n    TraceModel.Handlers.ModelHandlers.ExtensionTraceData.reset();\n    // ExtensionTraceData handler doesn't need to handle events since\n    // it only consumes the output of the user timings handler.\n    await TraceModel.Handlers.ModelHandlers.ExtensionTraceData.finalize();\n    return TraceModel.Handlers.ModelHandlers.ExtensionTraceData.data();\n  }\n  before(async function() {\n    const events = await TraceLoader.rawEvents(this, 'extension-tracks-and-marks.json.gz');\n    extensionData = await getExtensionDataFromEvents(events);\n  });\n  describe('track data parsing from user timings that use the extension API', function() {\n    it('creates tracks', async () => {\n      assert.lengthOf(extensionData.extensionTrackData, 2);\n    });\n    it('parses track data correctly', async () => {\n      assert.strictEqual(extensionData.extensionTrackData[0].extensionName, 'Some Extension');\n      assert.lengthOf(extensionData.extensionTrackData[0].flameChartEntries, 24);\n      assert.strictEqual(extensionData.extensionTrackData[0].name, 'An Extension Track');\n\n      assert.strictEqual(extensionData.extensionTrackData[1].extensionName, 'Another Extension');\n      assert.lengthOf(extensionData.extensionTrackData[1].flameChartEntries, 1);\n      assert.strictEqual(extensionData.extensionTrackData[1].name, 'Another Extension Track');\n    });\n\n    it('gets data from individual entries', async () => {\n      const {hintText, track, detailsPairs} = extensionData.extensionTrackData[0].flameChartEntries[0].args;\n      assert.strictEqual(hintText, 'A hint if needed');\n      assert.strictEqual(track, 'An Extension Track');\n      assert.strictEqual(\n          JSON.stringify(detailsPairs),\n          '[[\"Description\",\"This is a top level rendering task\"],[\"Tip\",\"A tip to improve this\"]]');\n    });\n\n    it('discards track data without a corresponding track field', async () => {\n      // The test example contains a track entry without a track field.\n      // Ensure it is discarded.\n      const allTrackEntries = extensionData.extensionTrackData.flatMap(track => track.flameChartEntries);\n      const validTrackEntries = allTrackEntries.filter(entry => entry.args.track);\n      assert.lengthOf(validTrackEntries, allTrackEntries.length);\n    });\n\n    it('discards track data without a valid dataType metadata field', async () => {\n      // The test example contains extension data with an invalid dataType\n      // value.\n      // Ensure it is discarded.\n      const allTrackEntries = extensionData.extensionTrackData.flatMap(track => track.flameChartEntries);\n      const validTrackEntries = allTrackEntries.filter(\n          entry => entry.args.metadata.dataType === TraceModel.Types.Extensions.ExtensionEntryType.TRACK_ENTRY);\n      assert.lengthOf(validTrackEntries, allTrackEntries.length);\n    });\n\n    it('discards track data without an extensionName metadata field', async () => {\n      // The test example contains extension data without an extensionName\n      // value.\n      // Ensure it is discarded.\n      const allTrackEntries = extensionData.extensionTrackData.flatMap(track => track.flameChartEntries);\n      const validTrackEntries = allTrackEntries.filter(entry => entry.args.metadata.extensionName);\n      assert.lengthOf(validTrackEntries, allTrackEntries.length);\n    });\n\n    it('discards track data without a valid color value', async () => {\n      // The test example contains a track entry with an invalid color value.\n      // Ensure it is discarded.\n      const allTrackEntries = extensionData.extensionTrackData.flatMap(track => track.flameChartEntries);\n      const validTrackEntries =\n          allTrackEntries.filter(entry => TraceModel.Types.Extensions.colorIsValid(entry.args.color));\n      assert.lengthOf(validTrackEntries, allTrackEntries.length);\n    });\n  });\n\n  describe('Timeline markers from user timings that use the extension API', function() {\n    it('parses marker data correctly', async () => {\n      assert.lengthOf(extensionData.extensionMarkers, 3);\n      assert.strictEqual(extensionData.extensionMarkers[0].name, 'Custom mark');\n      const {hintText, detailsPairs} = extensionData.extensionMarkers[0].args;\n      assert.strictEqual(hintText, 'A mark');\n      assert.strictEqual(JSON.stringify(detailsPairs), '[[\"Description\",\"This marks the start of a task\"]]');\n    });\n\n    it('discards markers whose details are not valid stringified JSON', async () => {\n      const performanceMarkEvent: TraceModel.Types.TraceEvents.TraceEventPerformanceMark = {\n        args: {\n          data: {\n            detail: 'this-is-not-json',\n          },\n        },\n        name: 'test-perf-mark',\n        cat: 'blink.user_timing',\n        ph: TraceModel.Types.TraceEvents.Phase.INSTANT,\n        pid: TraceModel.Types.TraceEvents.ProcessID(1),\n        tid: TraceModel.Types.TraceEvents.ThreadID(1),\n        ts: TraceModel.Types.Timing.MicroSeconds(100),\n      };\n\n      assert.isNull(\n          TraceModel.Handlers.ModelHandlers.ExtensionTraceData.extensionDataInTiming(performanceMarkEvent),\n      );\n    });\n\n    it('discards markers without a valid dataType metadata field', async () => {\n      // The test example contains extension data with an invalid dataType\n      // value.\n      // Ensure it is discarded.\n      const allMarkers = extensionData.extensionMarkers;\n      const validTrackEntries = allMarkers.filter(\n          entry => entry.args.metadata.dataType === TraceModel.Types.Extensions.ExtensionEntryType.MARKER);\n      assert.lengthOf(validTrackEntries, allMarkers.length);\n    });\n\n    it('discards markers without an extensionName metadata field', async () => {\n      // The test example contains extension data without an extensionName\n      // value.\n      // Ensure it is discarded.\n      const allMarkers = extensionData.extensionMarkers;\n      const validTrackEntries = allMarkers.filter(marker => marker.args.metadata.extensionName);\n      assert.lengthOf(validTrackEntries, allMarkers.length);\n    });\n\n    it('discards track data without a valid color value', async () => {\n      // The test example contains a track entry with an invalid color value.\n      // Ensure it is discarded.\n      const allMarkers = extensionData.extensionMarkers;\n      const validTrackEntries = allMarkers.filter(entry => TraceModel.Types.Extensions.colorIsValid(entry.args.color));\n      assert.lengthOf(validTrackEntries, allMarkers.length);\n    });\n  });\n});\n"]}