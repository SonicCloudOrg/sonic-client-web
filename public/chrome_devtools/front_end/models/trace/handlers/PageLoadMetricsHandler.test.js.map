{"version":3,"file":"PageLoadMetricsHandler.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/handlers/PageLoadMetricsHandler.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\nimport * as TraceModel from '../trace.js';\n\nfunction countMetricOcurrences(\n    scoresByMetricName:\n        Map<TraceModel.Handlers.ModelHandlers.PageLoadMetrics.MetricName,\n            TraceModel.Handlers.ModelHandlers.PageLoadMetrics.MetricScore>[],\n    metricName: TraceModel.Handlers.ModelHandlers.PageLoadMetrics.MetricName): number {\n  return scoresByMetricName.reduce((acc, val) => {\n    if (val.get(metricName)) {\n      return acc + 1;\n    }\n    return acc;\n  }, 0);\n}\n\ndescribeWithEnvironment('PageLoadMetricsHandler', function() {\n  describe('contentful paints', () => {\n    it('obtains all the FCP and LCP events for all frames', async function() {\n      const {Meta, PageLoadMetrics} = await TraceLoader.traceEngine(this, 'multiple-navigations-with-iframes.json.gz');\n      const {mainFrameId} = Meta;\n      const pageLoadMetricsData = PageLoadMetrics.metricScoresByFrameId;\n      assert.strictEqual(pageLoadMetricsData.size, 3);\n\n      const pageLoadEventsForMainFrame = pageLoadMetricsData.get(mainFrameId);\n      if (!pageLoadEventsForMainFrame) {\n        assert.fail('Page load events for main frame were unexpectedly null.');\n      }\n\n      // There are 2 FCP events and 2 LCP events on the main frame: one for the first navigation,\n      // and one for the second.\n      assert.strictEqual(pageLoadEventsForMainFrame.size, 2);\n      const scoresByMetricName = [...pageLoadEventsForMainFrame.values()];\n\n      const fcpCount =\n          countMetricOcurrences(scoresByMetricName, TraceModel.Handlers.ModelHandlers.PageLoadMetrics.MetricName.FCP);\n\n      const lcpCount =\n          countMetricOcurrences(scoresByMetricName, TraceModel.Handlers.ModelHandlers.PageLoadMetrics.MetricName.LCP);\n\n      assert.strictEqual(fcpCount, 2);\n      assert.strictEqual(lcpCount, 2);\n    });\n\n    it('finds the right FCP and LCP events for a trace for a page that was refreshed', async function() {\n      const {Meta, PageLoadMetrics} = await TraceLoader.traceEngine(this, 'reload-and-trace-page.json.gz');\n      const {mainFrameId} = Meta;\n      const pageLoadMetricsData = PageLoadMetrics.metricScoresByFrameId;\n      // Only one frame to deal with\n      assert.strictEqual(pageLoadMetricsData.size, 1);\n\n      const pageLoadEventsForMainFrame = pageLoadMetricsData.get(mainFrameId);\n      if (!pageLoadEventsForMainFrame) {\n        assert.fail('Page load events for main frame were unexpectedly null.');\n      }\n      // Single FCP event that occured after the refresh.\n      assert.strictEqual(pageLoadEventsForMainFrame.size, 1);\n      const scoresByMetricName = [...pageLoadEventsForMainFrame.values()];\n      const fcpCount =\n          countMetricOcurrences(scoresByMetricName, TraceModel.Handlers.ModelHandlers.PageLoadMetrics.MetricName.FCP);\n      const lcpCount =\n          countMetricOcurrences(scoresByMetricName, TraceModel.Handlers.ModelHandlers.PageLoadMetrics.MetricName.LCP);\n      assert.strictEqual(fcpCount, 1);\n      assert.strictEqual(lcpCount, 1);\n    });\n\n    it('stores the navigation event as part of the metric', async function() {\n      const {Meta, PageLoadMetrics} = await TraceLoader.traceEngine(this, 'reload-and-trace-page.json.gz');\n      const {mainFrameId, navigationsByFrameId} = Meta;\n      const navigationBeforeMetrics = navigationsByFrameId.get(mainFrameId)?.[0];\n      const navigationId = navigationBeforeMetrics?.args.data?.navigationId;\n      if (!navigationBeforeMetrics || !navigationId) {\n        assert.fail('Could not find expected navigation event or its navigation ID');\n      }\n      const pageLoadMetricsData = PageLoadMetrics.metricScoresByFrameId;\n      // Only one frame to deal with\n      assert.strictEqual(pageLoadMetricsData.size, 1);\n\n      const pageLoadEventsForMainFrame = pageLoadMetricsData.get(mainFrameId);\n      if (!pageLoadEventsForMainFrame) {\n        assert.fail('Page load events for main frame were unexpectedly null.');\n      }\n      // Single FCP event that occured after the refresh.\n      assert.strictEqual(pageLoadEventsForMainFrame.size, 1);\n      const events = pageLoadEventsForMainFrame.get(navigationId);\n      const allFoundMetricScoresForMainFrame = events ? Array.from(events.values()) : [];\n      for (const score of allFoundMetricScoresForMainFrame) {\n        assert.strictEqual(score.navigation, navigationBeforeMetrics);\n      }\n    });\n  });\n\n  describe('markDOMContent frame', () => {\n    it('obtains them and assigns them to the correct frames', async function() {\n      const {Meta, PageLoadMetrics} = await TraceLoader.traceEngine(this, 'multiple-navigations-with-iframes.json.gz');\n      const {mainFrameId} = Meta;\n      const pageLoadMetricsData = PageLoadMetrics.metricScoresByFrameId;\n      // We expect 3 frames: main frame, and two iframes.\n      assert.strictEqual(pageLoadMetricsData.size, 3);\n      const pageLoadEventsForMainFrame = pageLoadMetricsData.get(mainFrameId);\n      if (!pageLoadEventsForMainFrame) {\n        assert.fail('Page load events for main frame were unexpectedly null.');\n      }\n      // There are 2 MarkDOMContent events on the main frame: one for the first navigation,\n      // and one for the second.\n      assert.strictEqual(pageLoadEventsForMainFrame.size, 2);\n      const dclCount = countMetricOcurrences(\n          [...pageLoadEventsForMainFrame.values()], TraceModel.Handlers.ModelHandlers.PageLoadMetrics.MetricName.DCL);\n      assert.strictEqual(dclCount, 2);\n    });\n  });\n\n  describe('metric scores', () => {\n    let allMetricScores: TraceModel.Handlers.ModelHandlers.PageLoadMetrics.MetricScore[];\n\n    function getMetricsByName(name: TraceModel.Handlers.ModelHandlers.PageLoadMetrics.MetricName) {\n      return allMetricScores.filter(metric => metric.metricName === name);\n    }\n    function assertMetricNavigationId(\n        metric: TraceModel.Handlers.ModelHandlers.PageLoadMetrics.MetricScore, navigationId: string) {\n      assert.strictEqual(metric.navigation?.args.data?.navigationId, navigationId);\n    }\n    const firstNavigationId = '05059ACF683224E6FC7E344F544A4050';\n    const secondNavigationId = '550FC08C662EF691E1535F305CBC0FCA';\n    beforeEach(async function() {\n      const {PageLoadMetrics, Meta} = await TraceLoader.traceEngine(this, 'multiple-navigations-with-iframes.json.gz');\n      const pageLoadMetricsData = PageLoadMetrics.metricScoresByFrameId.get(Meta.mainFrameId);\n      if (!pageLoadMetricsData) {\n        assert.fail('Page load events for main frame were unexpectedly undefined.');\n      }\n      const scoresByMetricName = [...pageLoadMetricsData.values()];\n      allMetricScores = scoresByMetricName.flatMap(metricScores => [...metricScores.values()]);\n    });\n    it('extracts DOMContentLoaded correctly', () => {\n      const domContentLoadedMetrics =\n          getMetricsByName(TraceModel.Handlers.ModelHandlers.PageLoadMetrics.MetricName.DCL);\n      assert.strictEqual(domContentLoadedMetrics[0].timing, 34520);\n      assert.strictEqual(\n          domContentLoadedMetrics[0].classification,\n          TraceModel.Handlers.ModelHandlers.PageLoadMetrics.ScoreClassification.UNCLASSIFIED);\n      assertMetricNavigationId(domContentLoadedMetrics[0], firstNavigationId);\n\n      assert.strictEqual(domContentLoadedMetrics[1].timing, 40401);\n      assert.strictEqual(\n          domContentLoadedMetrics[1].classification,\n          TraceModel.Handlers.ModelHandlers.PageLoadMetrics.ScoreClassification.UNCLASSIFIED);\n      assertMetricNavigationId(domContentLoadedMetrics[1], secondNavigationId);\n    });\n\n    it('extracts First Contentful Paint correctly', () => {\n      const firstContentfulPaints = getMetricsByName(TraceModel.Handlers.ModelHandlers.PageLoadMetrics.MetricName.FCP);\n      assert.strictEqual(firstContentfulPaints[0].timing, 37269);\n      assert.strictEqual(\n          firstContentfulPaints[0].classification,\n          TraceModel.Handlers.ModelHandlers.PageLoadMetrics.ScoreClassification.GOOD);\n      assertMetricNavigationId(firstContentfulPaints[0], firstNavigationId);\n\n      assert.strictEqual(firstContentfulPaints[1].timing, 42390);\n      assert.strictEqual(\n          firstContentfulPaints[1].classification,\n          TraceModel.Handlers.ModelHandlers.PageLoadMetrics.ScoreClassification.GOOD);\n      assertMetricNavigationId(firstContentfulPaints[1], secondNavigationId);\n    });\n\n    it('extracts Largest Contentful Paint correctly', () => {\n      const firstContentfulPaints = getMetricsByName(TraceModel.Handlers.ModelHandlers.PageLoadMetrics.MetricName.LCP);\n      assert.strictEqual(firstContentfulPaints[0].timing, 37271);\n      assert.strictEqual(\n          firstContentfulPaints[0].classification,\n          TraceModel.Handlers.ModelHandlers.PageLoadMetrics.ScoreClassification.GOOD);\n      assertMetricNavigationId(firstContentfulPaints[0], firstNavigationId);\n\n      assert.strictEqual(firstContentfulPaints[1].timing, 42391);\n      assert.strictEqual(\n          firstContentfulPaints[1].classification,\n          TraceModel.Handlers.ModelHandlers.PageLoadMetrics.ScoreClassification.GOOD);\n      assertMetricNavigationId(firstContentfulPaints[1], secondNavigationId);\n    });\n\n    it('extracts First Paint correctly', () => {\n      const firstContentfulPaints = getMetricsByName(TraceModel.Handlers.ModelHandlers.PageLoadMetrics.MetricName.FP);\n      assert.strictEqual(firstContentfulPaints[0].timing, 37269);\n      assert.strictEqual(\n          firstContentfulPaints[0].classification,\n          TraceModel.Handlers.ModelHandlers.PageLoadMetrics.ScoreClassification.UNCLASSIFIED);\n      assertMetricNavigationId(firstContentfulPaints[0], firstNavigationId);\n\n      assert.strictEqual(firstContentfulPaints[1].timing, 42389);\n      assert.strictEqual(\n          firstContentfulPaints[1].classification,\n          TraceModel.Handlers.ModelHandlers.PageLoadMetrics.ScoreClassification.UNCLASSIFIED);\n      assertMetricNavigationId(firstContentfulPaints[1], secondNavigationId);\n    });\n\n    it('extracts Load correctly', () => {\n      const firstContentfulPaints = getMetricsByName(TraceModel.Handlers.ModelHandlers.PageLoadMetrics.MetricName.L);\n      assert.strictEqual(firstContentfulPaints[0].timing, 148980);\n      assert.strictEqual(\n          firstContentfulPaints[0].classification,\n          TraceModel.Handlers.ModelHandlers.PageLoadMetrics.ScoreClassification.UNCLASSIFIED);\n      assertMetricNavigationId(firstContentfulPaints[0], firstNavigationId);\n\n      assert.strictEqual(firstContentfulPaints[1].timing, 161333);\n      assert.strictEqual(\n          firstContentfulPaints[1].classification,\n          TraceModel.Handlers.ModelHandlers.PageLoadMetrics.ScoreClassification.UNCLASSIFIED);\n      assertMetricNavigationId(firstContentfulPaints[1], secondNavigationId);\n    });\n\n    it('provides metric scores sorted in ASC order by their events\\' timestamps', async function() {\n      const {PageLoadMetrics, Meta} = await TraceLoader.traceEngine(this, 'multiple-navigations-with-iframes.json.gz');\n\n      const pageLoadMetricsData = PageLoadMetrics.metricScoresByFrameId.get(Meta.mainFrameId);\n      if (!pageLoadMetricsData) {\n        assert.fail('Page load events for main frame were unexpectedly null.');\n      }\n\n      const scoresByMetricName = [...pageLoadMetricsData.values()];\n      const flatResults = scoresByMetricName.map(metricScores => [...metricScores.values()])\n                              .reduce((acc, metricScore) => acc.concat(metricScore), []);\n      const timestamps = [];\n      for (const metricScore of flatResults) {\n        if (metricScore.event) {\n          timestamps.push(metricScore.event.ts);\n        }\n      }\n      let previousTimestamp = timestamps[0];\n      for (let i = 1; i < timestamps.length; i++) {\n        assert.isAtLeast(timestamps[i], previousTimestamp);\n        previousTimestamp = timestamps[i];\n      }\n    });\n  });\n\n  describe('FLEDGE fenced frames', () => {\n    it('is able to parse a trace containing fenced frames without erroring', async function() {\n      const {PageLoadMetrics} = await TraceLoader.traceEngine(this, 'fenced-frame-fledge.json.gz');\n      assert.strictEqual(PageLoadMetrics.metricScoresByFrameId.size, 3);\n    });\n  });\n\n  describe('Marker events', () => {\n    let mainFrameId: string;\n    let allMarkerEvents: TraceModel.Types.TraceEvents.PageLoadEvent[];\n    beforeEach(async function() {\n      const {PageLoadMetrics, Meta} = await TraceLoader.traceEngine(this, 'multiple-navigations-with-iframes.json.gz');\n      mainFrameId = Meta.mainFrameId;\n      allMarkerEvents = PageLoadMetrics.allMarkerEvents;\n    });\n    it('extracts all marker events from a trace correctly', () => {\n      for (const metricName of TraceModel.Types.TraceEvents.MarkerName) {\n        const markerEventsOfThisType = allMarkerEvents.filter(event => event.name === metricName);\n        // There should be 2 events for each marker and all of them should correspond to the main frame\n        assert.strictEqual(markerEventsOfThisType.length, 2);\n        assert.isTrue(markerEventsOfThisType.every(\n            marker =>\n                TraceModel.Handlers.ModelHandlers.PageLoadMetrics.getFrameIdForPageLoadEvent(marker) === mainFrameId));\n      }\n    });\n    it('only marker events are exported in allMarkerEvents', () => {\n      for (const marker of allMarkerEvents) {\n        assert.isTrue(TraceModel.Types.TraceEvents.isTraceEventMarkerEvent(marker));\n      }\n    });\n\n    it('only stores the largest contentful paint with the highest candidate index', async function() {\n      const {PageLoadMetrics} = await TraceLoader.traceEngine(this, 'multiple-lcp-main-frame.json.gz');\n      const pageLoadMarkers = PageLoadMetrics.allMarkerEvents;\n      const largestContentfulPaints =\n          pageLoadMarkers.filter(TraceModel.Types.TraceEvents.isTraceEventLargestContentfulPaintCandidate);\n      assert.strictEqual(largestContentfulPaints.length, 1);\n      assert.strictEqual(largestContentfulPaints[0].args.data?.candidateIndex, 2);\n    });\n  });\n});\n"]}