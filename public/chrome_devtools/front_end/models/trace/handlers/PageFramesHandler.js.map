{"version":3,"file":"PageFramesHandler.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/handlers/PageFramesHandler.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,KAAK,MAAM,mBAAmB,CAAC;AAE3C,MAAM,MAAM,GAAG,IAAI,GAAG,EAAwC,CAAC;AAE/D,MAAM,UAAU,KAAK;IACnB,MAAM,CAAC,KAAK,EAAE,CAAC;AACjB,CAAC;AAED,MAAM,UAAU,WAAW,CAAC,KAAuC;IACjE,IAAI,KAAK,CAAC,WAAW,CAAC,mCAAmC,CAAC,KAAK,CAAC,EAAE,CAAC;QACjE,KAAK,MAAM,KAAK,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,IAAI,EAAE,EAAE,CAAC;YAClD,qDAAqD;YACrD,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QACjC,CAAC;QACD,OAAO;IACT,CAAC;IAED,oEAAoE;IACpE,IAAI,KAAK,CAAC,WAAW,CAAC,sBAAsB,CAAC,KAAK,CAAC,EAAE,CAAC;QACpD,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;QAClC,IAAI,CAAC,SAAS,EAAE,CAAC;YACf,OAAO;QACT,CAAC;QACD,yDAAyD;QACzD,wDAAwD;QACxD,MAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAC1C,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,OAAO;QACT,CAAC;QACD,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,KAAK,EAAE;YAC1B,GAAG,KAAK;YACR,GAAG,EAAE,SAAS,CAAC,GAAG,IAAI,KAAK,CAAC,GAAG;YAC/B,IAAI,EAAE,SAAS,CAAC,IAAI,IAAI,SAAS,CAAC,IAAI;SACvC,CAAC,CAAC;IACL,CAAC;AACH,CAAC;AAKD,MAAM,UAAU,IAAI;IAClB,OAAO;QACL,MAAM;KACP,CAAC;AACJ,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Types from '../types/types.js';\n\nconst frames = new Map<string, Types.TraceEvents.TraceFrame>();\n\nexport function reset(): void {\n  frames.clear();\n}\n\nexport function handleEvent(event: Types.TraceEvents.TraceEventData): void {\n  if (Types.TraceEvents.isTraceEventTracingStartedInBrowser(event)) {\n    for (const frame of event.args.data?.frames ?? []) {\n      // The ID of a frame is stored under the `frame` key.\n      frames.set(frame.frame, frame);\n    }\n    return;\n  }\n\n  // CommitLoad events can contain an updated URL or Name for a frame.\n  if (Types.TraceEvents.isTraceEventCommitLoad(event)) {\n    const frameData = event.args.data;\n    if (!frameData) {\n      return;\n    }\n    // We don't want to mutate the original object, hence why\n    // we set a new object from the new and existing values.\n    const frame = frames.get(frameData.frame);\n    if (!frame) {\n      return;\n    }\n    frames.set(frameData.frame, {\n      ...frame,\n      url: frameData.url || frame.url,\n      name: frameData.name || frameData.name,\n    });\n  }\n}\n\nexport interface PageFrameData {\n  frames: Map<string, Types.TraceEvents.TraceFrame>;\n}\nexport function data(): PageFrameData {\n  return {\n    frames,\n  };\n}\n"]}