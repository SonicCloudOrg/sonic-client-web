{"version":3,"file":"ScreenshotsHandler.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/handlers/ScreenshotsHandler.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {defaultTraceEvent} from '../../../testing/TraceHelpers.js';\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\nimport * as TraceModel from '../trace.js';\n\ndescribe('ScreenshotsHandler', function() {\n  const baseEvent = {\n    ...defaultTraceEvent,\n    name: 'Screenshot',\n    // Ensure that the screenshots are held against the pid & tid values\n    // that match the Browser process and CrBrowserMain in defaultTraceEvents.\n    pid: TraceModel.Types.TraceEvents.ProcessID(8017),\n    tid: TraceModel.Types.TraceEvents.ThreadID(775),\n    ts: TraceModel.Types.Timing.MicroSeconds(0),\n    args: {},\n    cat: 'test',\n    ph: TraceModel.Types.TraceEvents.Phase.OBJECT_SNAPSHOT,\n  };\n\n  let baseEvents: readonly TraceModel.Types.TraceEvents.TraceEventData[];\n\n  beforeEach(async function() {\n    // The screenshot handler requires the meta handler because it needs\n    // to know the browser process and thread IDs. Here, then, we reset\n    // and later we will pass events to the meta handler, otherwise the\n    // screenshots handler will fail.\n    TraceModel.Handlers.ModelHandlers.Meta.reset();\n    TraceModel.Handlers.ModelHandlers.Meta.initialize();\n\n    TraceModel.Handlers.ModelHandlers.Screenshots.reset();\n  });\n\n  describe('frames', () => {\n    it('obtains them if present', async function() {\n      const defaultTraceEvents = await TraceLoader.rawEvents(this, 'basic.json.gz');\n\n      baseEvents = [\n        ...defaultTraceEvents,\n        {...baseEvent, ts: TraceModel.Types.Timing.MicroSeconds(100)},\n        {...baseEvent, ts: TraceModel.Types.Timing.MicroSeconds(200)},\n      ];\n      TraceModel.Helpers.SyntheticEvents.SyntheticEventsManager.initSyntheticEventsManagerForTrace(baseEvents);\n\n      for (const event of baseEvents) {\n        TraceModel.Handlers.ModelHandlers.Meta.handleEvent(event);\n        TraceModel.Handlers.ModelHandlers.Screenshots.handleEvent(event);\n      }\n\n      await TraceModel.Handlers.ModelHandlers.Meta.finalize();\n      await TraceModel.Handlers.ModelHandlers.Screenshots.finalize();\n\n      const data = TraceModel.Handlers.ModelHandlers.Screenshots.data();\n      assert.strictEqual(data.length, 2);\n    });\n  });\n\n  describe('presentation timestamps', () => {\n    function getMsDifferences(\n        syntheticScreenshotEvents: TraceModel.Types.TraceEvents.SyntheticScreenshot[],\n        originalScreenshotEvents: TraceModel.Types.TraceEvents.TraceEventScreenshot[]): number[] {\n      return syntheticScreenshotEvents.map((synEvent, i) => {\n        const origEvent = originalScreenshotEvents.at(i) as TraceModel.Types.TraceEvents.TraceEventScreenshot;\n        const msDifference = (synEvent.ts - origEvent.ts) / 1000;\n        return msDifference;\n      });\n    }\n    it('are corrected if frame sequence number is present', async function() {\n      // This trace was collected after https://crrev.com/c/4957973 landed.\n      const events = await TraceLoader.rawEvents(this, 'about-blank-first.json.gz');\n      for (const event of events) {\n        TraceModel.Handlers.ModelHandlers.Meta.handleEvent(event);\n        TraceModel.Handlers.ModelHandlers.Screenshots.handleEvent(event);\n      }\n      await TraceModel.Handlers.ModelHandlers.Meta.finalize();\n      await TraceModel.Handlers.ModelHandlers.Screenshots.finalize();\n\n      const syntheticScreenshotEvents = TraceModel.Handlers.ModelHandlers.Screenshots.data();\n      const originalScreenshotEvents = events.filter(TraceModel.Types.TraceEvents.isTraceEventScreenshot);\n      assert.strictEqual(syntheticScreenshotEvents.length, originalScreenshotEvents.length);\n\n      for (const oEvent of originalScreenshotEvents) {\n        assert.notStrictEqual(oEvent.id, '0x1');  // The id (frame sequence) shouldn't be the old default of 1.\n      }\n\n      const msDifferences = getMsDifferences(syntheticScreenshotEvents, originalScreenshotEvents);\n      // These values indicate all the screenshots true timings are a tad more to the left.\n      assert.deepStrictEqual(msDifferences, [\n        -13.079, -16.381, -12.503, -5.405,  -14.108, -14.661, -11.944, -14.322, -3.532, -15.821, 0.254,\n        -32.22,  -15.156, -13.219, -14.464, -16.135, -16.501, -33.165, -15.71,  -32.39, -32.445, -30.512,\n      ]);\n    });\n\n    it('remain the same with older traces', async function() {\n      // Any trace captured before  121.0.6156.3 doesn't have the extra data to correct the timestamps.\n      const events = await TraceLoader.rawEvents(this, 'web-dev.json.gz');\n      for (const event of events) {\n        TraceModel.Handlers.ModelHandlers.Meta.handleEvent(event);\n        TraceModel.Handlers.ModelHandlers.Screenshots.handleEvent(event);\n      }\n      await TraceModel.Handlers.ModelHandlers.Meta.finalize();\n      await TraceModel.Handlers.ModelHandlers.Screenshots.finalize();\n\n      const syntheticScreenshotEvents = TraceModel.Handlers.ModelHandlers.Screenshots.data();\n      const originalScreenshotEvents = events.filter(TraceModel.Types.TraceEvents.isTraceEventScreenshot);\n      assert.strictEqual(syntheticScreenshotEvents.length, originalScreenshotEvents.length);\n\n      for (const oEvent of originalScreenshotEvents) {\n        assert.strictEqual(oEvent.id, '0x1');  // The ids here aren't the new frame sequence, but the hardcoded 1.\n      }\n\n      const msDifferences = getMsDifferences(syntheticScreenshotEvents, originalScreenshotEvents);\n      // No adjustment made.\n      assert.deepStrictEqual(msDifferences, [\n        0,\n        0,\n        0,\n        0,\n        0,\n      ]);\n    });\n  });\n});\n"]}