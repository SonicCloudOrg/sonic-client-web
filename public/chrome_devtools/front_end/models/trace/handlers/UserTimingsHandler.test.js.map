{"version":3,"file":"UserTimingsHandler.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/handlers/UserTimingsHandler.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\nimport * as TraceModel from '../trace.js';\n\ndescribe('UserTimingsHandler', function() {\n  let timingsData: TraceModel.Handlers.ModelHandlers.UserTimings.UserTimingsData;\n  describe('performance timings', function() {\n    async function getTimingsDataFromEvents(events: readonly TraceModel.Types.TraceEvents.TraceEventData[]):\n        Promise<TraceModel.Handlers.ModelHandlers.UserTimings.UserTimingsData> {\n      TraceModel.Handlers.ModelHandlers.UserTimings.reset();\n      for (const event of events) {\n        TraceModel.Handlers.ModelHandlers.UserTimings.handleEvent(event);\n      }\n      await TraceModel.Handlers.ModelHandlers.UserTimings.finalize();\n      return TraceModel.Handlers.ModelHandlers.UserTimings.data();\n    }\n    before(async function() {\n      const events = await TraceLoader.rawEvents(this, 'user-timings.json.gz');\n      timingsData = await getTimingsDataFromEvents(events);\n    });\n    describe('performance.measure events parsing', function() {\n      it('parses the start and end events and returns a list of blocks', async () => {\n        assert.lengthOf(timingsData.performanceMeasures, 3);\n        assert.strictEqual(\n            TraceModel.Helpers.Trace.extractId(timingsData.performanceMeasures[0]),\n            'blink.user_timing:0x9072211:first measure');\n        assert.strictEqual(timingsData.performanceMeasures[0].name, 'first measure');\n        assert.strictEqual(\n            TraceModel.Helpers.Trace.extractId(timingsData.performanceMeasures[1]),\n            'blink.user_timing:0x6ece31c8:second measure');\n        assert.strictEqual(timingsData.performanceMeasures[1].name, 'second measure');\n        assert.strictEqual(\n            TraceModel.Helpers.Trace.extractId(timingsData.performanceMeasures[2]),\n            'blink.user_timing:0x10c31982:third measure');\n        assert.strictEqual(timingsData.performanceMeasures[2].name, 'third measure');\n\n        // Ensure we assign begin + end the right way round by making sure the\n        // beginEvent is the ASYNC_NESTABLE_START and the endEvent is the\n        // ASYNC_NESTABLE_END.\n        for (let i = 0; i < timingsData.performanceMeasures.length; i++) {\n          assert.strictEqual(\n              timingsData.performanceMeasures[i].args.data.beginEvent.ph,\n              TraceModel.Types.TraceEvents.Phase.ASYNC_NESTABLE_START);\n          assert.strictEqual(\n              timingsData.performanceMeasures[i].args.data.endEvent.ph,\n              TraceModel.Types.TraceEvents.Phase.ASYNC_NESTABLE_END);\n        }\n      });\n\n      it('sorts the blocks to ensure they are in time order', async function() {\n        const events = await TraceLoader.rawEvents(this, 'user-timings.json.gz');\n        TraceModel.Handlers.ModelHandlers.UserTimings.reset();\n        // Reverse the array so that the events are in the wrong order.\n        // This _shouldn't_ ever happen in a real trace, but it's best for us to\n        // sort the blocks once we've parsed them just in case.\n        const reversed = events.slice().reverse();\n        for (const event of reversed) {\n          TraceModel.Handlers.ModelHandlers.UserTimings.handleEvent(event);\n        }\n        await TraceModel.Handlers.ModelHandlers.UserTimings.finalize();\n        const data = TraceModel.Handlers.ModelHandlers.UserTimings.data();\n        assert.lengthOf(data.performanceMeasures, 3);\n        assert.isTrue(data.performanceMeasures[0].ts <= data.performanceMeasures[1].ts);\n        assert.isTrue(data.performanceMeasures[1].ts <= data.performanceMeasures[2].ts);\n      });\n\n      it('calculates the duration correctly from the begin/end event timestamps', async function() {\n        const events = await TraceLoader.rawEvents(this, 'user-timings.json.gz');\n        TraceModel.Handlers.ModelHandlers.UserTimings.reset();\n        for (const event of events) {\n          TraceModel.Handlers.ModelHandlers.UserTimings.handleEvent(event);\n        }\n        await TraceModel.Handlers.ModelHandlers.UserTimings.finalize();\n        const data = TraceModel.Handlers.ModelHandlers.UserTimings.data();\n        for (const timing of data.performanceMeasures) {\n          // Ensure for each timing pair we've set the dur correctly.\n          assert.strictEqual(timing.dur, timing.args.data.endEvent.ts - timing.args.data.beginEvent.ts);\n        }\n      });\n      it('correctly extracts nested timings in the correct order', async function() {\n        const events = await TraceLoader.rawEvents(this, 'user-timings-complex.json.gz');\n        const complexTimingsData = await getTimingsDataFromEvents(events);\n        const userTimingEventNames = [];\n        for (const event of complexTimingsData.performanceMeasures) {\n          // This trace has multiple user timings events, in this instance we only care about the ones that include 'nested' in the name.\n          if (event.name.includes('nested')) {\n            userTimingEventNames.push(event.name);\n          }\n        }\n        assert.deepEqual(userTimingEventNames, [\n          'nested-a',\n          'nested-b',\n          'nested-c',\n          'nested-d',\n        ]);\n      });\n      it('correctly orders measures when one measure encapsulates the others', async function() {\n        const events = await TraceLoader.rawEvents(this, 'user-timings-complex.json.gz');\n        const complexTimingsData = await getTimingsDataFromEvents(events);\n        const userTimingEventNames = [];\n        for (const event of complexTimingsData.performanceMeasures) {\n          // This trace has multiple user timings events, in this instance we only care about the ones that start with 'duration'\n          if (event.name.startsWith('duration')) {\n            userTimingEventNames.push(event.name);\n          }\n        }\n        assert.deepEqual(userTimingEventNames, [\n          'durationTimeTotal',\n          'durationTime1',\n          'durationTime2',\n        ]);\n      });\n    });\n    describe('performance.mark events parsing', function() {\n      it('parses performance mark events correctly', function() {\n        assert.lengthOf(timingsData.performanceMarks, 2);\n        assert.strictEqual(timingsData.performanceMarks[0].name, 'mark1');\n        assert.strictEqual(timingsData.performanceMarks[1].name, 'mark3');\n      });\n    });\n  });\n  describe('console timings', function() {\n    before(async function() {\n      const events = await TraceLoader.rawEvents(this, 'timings-track.json.gz');\n      TraceModel.Handlers.ModelHandlers.UserTimings.reset();\n      for (const event of events) {\n        TraceModel.Handlers.ModelHandlers.UserTimings.handleEvent(event);\n      }\n      await TraceModel.Handlers.ModelHandlers.UserTimings.finalize();\n      timingsData = TraceModel.Handlers.ModelHandlers.UserTimings.data();\n    });\n    describe('console.time events parsing', function() {\n      it('parses the start and end events and returns a list of blocks', async () => {\n        assert.lengthOf(timingsData.consoleTimings, 3);\n        assert.strictEqual(\n            TraceModel.Helpers.Trace.extractId(timingsData.consoleTimings[0]),\n            'blink.console:0x12c00282160:first console time');\n        assert.strictEqual(timingsData.consoleTimings[0].name, 'first console time');\n        assert.strictEqual(\n            TraceModel.Helpers.Trace.extractId(timingsData.consoleTimings[1]),\n            'blink.console:0x12c00282160:second console time');\n        assert.strictEqual(timingsData.consoleTimings[1].name, 'second console time');\n\n        // Ensure we assign begin + end the right way round by making sure the\n        // beginEvent is the ASYNC_NESTABLE_START and the endEvent is the\n        // ASYNC_NESTABLE_END.\n        for (let i = 0; i < timingsData.consoleTimings.length; i++) {\n          assert.strictEqual(\n              timingsData.consoleTimings[i].args.data.beginEvent.ph,\n              TraceModel.Types.TraceEvents.Phase.ASYNC_NESTABLE_START);\n          assert.strictEqual(\n              timingsData.consoleTimings[i].args.data.endEvent.ph,\n              TraceModel.Types.TraceEvents.Phase.ASYNC_NESTABLE_END);\n        }\n      });\n\n      it('sorts the blocks to ensure they are in time order', async function() {\n        const events = await TraceLoader.rawEvents(this, 'timings-track.json.gz');\n        TraceModel.Handlers.ModelHandlers.UserTimings.reset();\n        // Reverse the array so that the events are in the wrong order.\n        // This _shouldn't_ ever happen in a real trace, but it's best for us to\n        // sort the blocks once we've parsed them just in case.\n        const reversed = events.slice().reverse();\n        for (const event of reversed) {\n          TraceModel.Handlers.ModelHandlers.UserTimings.handleEvent(event);\n        }\n        await TraceModel.Handlers.ModelHandlers.UserTimings.finalize();\n        const data = TraceModel.Handlers.ModelHandlers.UserTimings.data();\n        assert.lengthOf(data.consoleTimings, 3);\n        assert.isTrue(data.consoleTimings[0].ts <= data.consoleTimings[1].ts);\n        assert.isTrue(data.consoleTimings[1].ts <= data.consoleTimings[2].ts);\n      });\n\n      it('calculates the duration correctly from the begin/end event timestamps', async () => {\n        for (const consoleTiming of timingsData.consoleTimings) {\n          // Ensure for each timing pair we've set the dur correctly.\n          assert.strictEqual(\n              consoleTiming.dur, consoleTiming.args.data.endEvent.ts - consoleTiming.args.data.beginEvent.ts);\n        }\n      });\n    });\n    describe('console.timestamp events parsing', function() {\n      it('parses performance mark events correctly', function() {\n        assert.lengthOf(timingsData.timestampEvents, 3);\n        assert.strictEqual(timingsData.timestampEvents[0].args.data.message, 'a timestamp');\n        assert.strictEqual(timingsData.timestampEvents[1].args.data.message, 'another timestamp');\n        assert.strictEqual(timingsData.timestampEvents[2].args.data.message, 'yet another timestamp');\n      });\n    });\n  });\n});\n"]}