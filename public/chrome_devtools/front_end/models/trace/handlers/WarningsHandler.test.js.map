{"version":3,"file":"WarningsHandler.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/handlers/WarningsHandler.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\nimport * as TraceEngine from '../trace.js';\n\ndescribe('WarningsHandler', function() {\n  beforeEach(() => {\n    TraceEngine.Handlers.ModelHandlers.Warnings.reset();\n  });\n\n  it('identifies long tasks', async function() {\n    const events = await TraceLoader.rawEvents(this, 'slow-interaction-keydown.json.gz');\n    for (const event of events) {\n      TraceEngine.Handlers.ModelHandlers.Warnings.handleEvent(event);\n    }\n    const data = TraceEngine.Handlers.ModelHandlers.Warnings.data();\n    // We expect one long task.\n    assert.strictEqual(data.perEvent.size, 1);\n    const event = Array.from(data.perEvent.keys()).at(0);\n    assert.strictEqual(event?.name, TraceEngine.Types.TraceEvents.KnownEventName.RunTask);\n  });\n\n  it('identifies idle callbacks that ran over the allotted time', async function() {\n    const events = await TraceLoader.rawEvents(this, 'idle-callback.json.gz');\n    for (const event of events) {\n      TraceEngine.Handlers.ModelHandlers.Warnings.handleEvent(event);\n    }\n    const data = TraceEngine.Handlers.ModelHandlers.Warnings.data();\n    const longIdleCallbacks = data.perWarning.get('IDLE_CALLBACK_OVER_TIME') || [];\n    assert.lengthOf(longIdleCallbacks, 1);\n    const event = longIdleCallbacks[0];\n    assert.deepEqual(data.perEvent.get(event), ['IDLE_CALLBACK_OVER_TIME']);\n  });\n\n  it('identifies reflows that take over 30ms', async function() {\n    const events = await TraceLoader.rawEvents(this, 'large-layout-small-recalc.json.gz');\n    for (const event of events) {\n      TraceEngine.Handlers.ModelHandlers.Warnings.handleEvent(event);\n    }\n    const data = TraceEngine.Handlers.ModelHandlers.Warnings.data();\n    const forcedReflow = data.perWarning.get('FORCED_REFLOW') || [];\n    assert.lengthOf(forcedReflow, 2);\n    const stylesRecalc = forcedReflow[0];\n    const layout = forcedReflow[1];\n    assert.deepEqual(data.perEvent.get(stylesRecalc), ['FORCED_REFLOW']);\n    assert.deepEqual(data.perEvent.get(layout), ['FORCED_REFLOW']);\n    assert.strictEqual(stylesRecalc.name, TraceEngine.Types.TraceEvents.KnownEventName.UpdateLayoutTree);\n    assert.strictEqual(layout.name, TraceEngine.Types.TraceEvents.KnownEventName.Layout);\n  });\n\n  it('ignores reflows that are not forced by JS', async function() {\n    const events = await TraceLoader.rawEvents(this, 'large-recalc-style.json.gz');\n    for (const event of events) {\n      TraceEngine.Handlers.ModelHandlers.Warnings.handleEvent(event);\n    }\n    const data = TraceEngine.Handlers.ModelHandlers.Warnings.data();\n    const forcedStyle = data.perWarning.get('FORCED_REFLOW') || [];\n    assert.lengthOf(forcedStyle, 0);\n  });\n\n  it('identifies long interactions', async function() {\n    // We run the entire model here as the WarningsHandler actually depends on the UserInteractionsHandler to fetch this data\n    const traceParsedData = await TraceLoader.traceEngine(this, 'one-second-interaction.json.gz');\n\n    // These events do exist on the UserInteractionsHandler, but we also put\n    // them into the WarningsHandler so that the warnings handler can be the\n    // source of truth and the way to look up all warnings for a given event.\n    const {interactionsOverThreshold} = traceParsedData.UserInteractions;\n\n    for (const interaction of interactionsOverThreshold) {\n      const warnings = traceParsedData.Warnings.perEvent.get(interaction);\n      assert.deepEqual(warnings, ['LONG_INTERACTION']);\n    }\n  });\n});\n"]}