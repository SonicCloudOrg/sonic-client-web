{"version":3,"file":"AuctionWorkletsHandler.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/handlers/AuctionWorkletsHandler.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\nimport * as TraceEngine from '../trace.js';\n\ndescribe('AuctionWorkletsHandler', function() {\n  beforeEach(() => {\n    TraceEngine.Handlers.ModelHandlers.AuctionWorklets.reset();\n  });\n\n  const expectedPIDsAndTypes = [\n    {\n      pid: 776435 as TraceEngine.Types.TraceEvents.ProcessID,\n      type: TraceEngine.Types.TraceEvents.AuctionWorkletType.SELLER,\n    },\n    {\n      pid: 776436 as TraceEngine.Types.TraceEvents.ProcessID,\n      type: TraceEngine.Types.TraceEvents.AuctionWorkletType.BIDDER,\n    },\n    {\n      pid: 776449 as TraceEngine.Types.TraceEvents.ProcessID,\n      type: TraceEngine.Types.TraceEvents.AuctionWorkletType.BIDDER,\n    },\n  ];\n\n  it('parses and finds worklets from the metadata events', async function() {\n    const events = await TraceLoader.rawEvents(this, 'fenced-frame-fledge.json.gz');\n    for (const event of events) {\n      TraceEngine.Handlers.ModelHandlers.AuctionWorklets.handleEvent(event);\n    }\n    await TraceEngine.Handlers.ModelHandlers.AuctionWorklets.finalize();\n    const data = TraceEngine.Handlers.ModelHandlers.AuctionWorklets.data();\n    assert.strictEqual(data.worklets.size, 3);\n\n    const actualPIDsAndTypes =\n        Array.from(data.worklets.values()).map(worklet => ({pid: worklet.pid, type: worklet.type}));\n\n    assert.deepEqual(actualPIDsAndTypes, expectedPIDsAndTypes);\n  });\n\n  it('finds the utility thread for each worklet', async function() {\n    const events = await TraceLoader.rawEvents(this, 'fenced-frame-fledge.json.gz');\n    for (const event of events) {\n      TraceEngine.Handlers.ModelHandlers.AuctionWorklets.handleEvent(event);\n    }\n    await TraceEngine.Handlers.ModelHandlers.AuctionWorklets.finalize();\n    const data = TraceEngine.Handlers.ModelHandlers.AuctionWorklets.data();\n\n    const expectedCrUtilityPIDsAndTIDs = [\n      {\n        pid: 776435 as TraceEngine.Types.TraceEvents.ProcessID,\n        tid: 1 as TraceEngine.Types.TraceEvents.ThreadID,\n      },\n      {\n        pid: 776436 as TraceEngine.Types.TraceEvents.ProcessID,\n        tid: 1 as TraceEngine.Types.TraceEvents.ThreadID,\n      },\n      {\n        pid: 776449 as TraceEngine.Types.TraceEvents.ProcessID,\n        tid: 1 as TraceEngine.Types.TraceEvents.ThreadID,\n      },\n    ];\n\n    const actualUtilityPIDsAndTIDs =\n        Array.from(data.worklets.values())\n            .map(worklet => ({pid: worklet.pid, tid: worklet.args.data.utilityThread.tid}));\n\n    assert.deepEqual(actualUtilityPIDsAndTIDs, expectedCrUtilityPIDsAndTIDs);\n  });\n\n  it('finds the AuctionV8HelperThread thread for each worklet', async function() {\n    const events = await TraceLoader.rawEvents(this, 'fenced-frame-fledge.json.gz');\n    for (const event of events) {\n      TraceEngine.Handlers.ModelHandlers.AuctionWorklets.handleEvent(event);\n    }\n    await TraceEngine.Handlers.ModelHandlers.AuctionWorklets.finalize();\n    const data = TraceEngine.Handlers.ModelHandlers.AuctionWorklets.data();\n\n    const expectedAuctionV8PIDsAndTIDs = [\n      {\n        pid: 776435 as TraceEngine.Types.TraceEvents.ProcessID,\n        tid: 6 as TraceEngine.Types.TraceEvents.ThreadID,\n      },\n      {\n        pid: 776436 as TraceEngine.Types.TraceEvents.ProcessID,\n        tid: 6 as TraceEngine.Types.TraceEvents.ThreadID,\n      },\n      {\n        pid: 776449 as TraceEngine.Types.TraceEvents.ProcessID,\n        tid: 6 as TraceEngine.Types.TraceEvents.ThreadID,\n      },\n    ];\n\n    const actualAuctionV8PIDsAndTIDs =\n        Array.from(data.worklets.values())\n            .map(worklet => ({pid: worklet.pid, tid: worklet.args.data.v8HelperThread.tid}));\n\n    assert.deepEqual(actualAuctionV8PIDsAndTIDs, expectedAuctionV8PIDsAndTIDs);\n  });\n\n  it('pairs up Running and DoneWith events', async function() {\n    // All of these events have a matching pair of events (see\n    // AuctionWorkletsHandler for more information on these events.)\n    const events = await TraceLoader.rawEvents(this, 'fenced-frame-fledge.json.gz');\n    for (const event of events) {\n      TraceEngine.Handlers.ModelHandlers.AuctionWorklets.handleEvent(event);\n    }\n    await TraceEngine.Handlers.ModelHandlers.AuctionWorklets.finalize();\n    const data = TraceEngine.Handlers.ModelHandlers.AuctionWorklets.data();\n    assert.strictEqual(data.worklets.size, 3);\n\n    for (const worklet of data.worklets.values()) {\n      assert.exists(worklet.args.data.runningInProcessEvent);\n      assert.exists(worklet.args.data.doneWithProcessEvent);\n    }\n  });\n\n  it('can find worklets just from the DoneWith events', async function() {\n    const actualEvents = await TraceLoader.rawEvents(this, 'fenced-frame-fledge.json.gz');\n    const events = actualEvents.filter(e => {\n      // Remove all RunningWith events\n      return TraceEngine.Types.TraceEvents.isTraceEventAuctionWorkletRunningInProcess(e) === false;\n    });\n\n    for (const event of events) {\n      TraceEngine.Handlers.ModelHandlers.AuctionWorklets.handleEvent(event);\n    }\n    await TraceEngine.Handlers.ModelHandlers.AuctionWorklets.finalize();\n    const data = TraceEngine.Handlers.ModelHandlers.AuctionWorklets.data();\n    assert.strictEqual(data.worklets.size, 3);\n\n    // The expected data is ordered by PID; this order is correct in the\n    // un-modified set of events but because this event removes some events, we\n    // sort the found worklets by PID to ensure that the comparison is still\n    // successful. We are not interested in the order these events come.\n    const actualPIDsAndTypes = Array.from(data.worklets.values())\n                                   .sort((a, b) => a.pid - b.pid)\n                                   .map(worklet => ({pid: worklet.pid, type: worklet.type}));\n    assert.deepEqual(actualPIDsAndTypes, expectedPIDsAndTypes);\n  });\n\n  it('can find worklets just from the RunningIn events', async function() {\n    const actualEvents = await TraceLoader.rawEvents(this, 'fenced-frame-fledge.json.gz');\n    const events = actualEvents.filter(e => {\n      // Remove all DoneWith events\n      return TraceEngine.Types.TraceEvents.isTraceEventAuctionWorkletDoneWithProcess(e) === false;\n    });\n\n    for (const event of events) {\n      TraceEngine.Handlers.ModelHandlers.AuctionWorklets.handleEvent(event);\n    }\n    await TraceEngine.Handlers.ModelHandlers.AuctionWorklets.finalize();\n    const data = TraceEngine.Handlers.ModelHandlers.AuctionWorklets.data();\n    assert.strictEqual(data.worklets.size, 3);\n\n    // The expected data is ordered by PID; this order is correct in the\n    // un-modified set of events but because this event removes some events, we\n    // sort the found worklets by PID to ensure that the comparison is still\n    // successful. We are not interested in the order these events come.\n    const actualPIDsAndTypes = Array.from(data.worklets.values())\n                                   .sort((a, b) => a.pid - b.pid)\n                                   .map(worklet => ({pid: worklet.pid, type: worklet.type}));\n    assert.deepEqual(actualPIDsAndTypes, expectedPIDsAndTypes);\n  });\n});\n"]}