{"version":3,"file":"Threads.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/handlers/Threads.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as TimelineModel from '../../../models/timeline_model/timeline_model.js';\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\nimport * as TraceEngine from '../trace.js';\n\ndescribeWithEnvironment('Handler Threads helper', function() {\n  it('returns all the threads for a trace that used tracing', async function() {\n    const traceData = await TraceLoader.traceEngine(this, 'web-dev.json.gz');\n\n    const allThreads = Array.from(traceData.Renderer.processes.values()).flatMap(process => {\n      return Array.from(process.threads.values());\n    });\n\n    const expectedThreadNamesAndTypes = [\n      {name: 'CrRendererMain', type: TraceEngine.Handlers.Threads.ThreadType.MAIN_THREAD},\n      {name: 'Chrome_ChildIOThread', type: TraceEngine.Handlers.Threads.ThreadType.OTHER},\n      {name: 'Compositor', type: TraceEngine.Handlers.Threads.ThreadType.OTHER},\n      {name: 'ThreadPoolServiceThread', type: TraceEngine.Handlers.Threads.ThreadType.THREAD_POOL},\n      {name: 'Media', type: TraceEngine.Handlers.Threads.ThreadType.OTHER},\n      {name: 'ThreadPoolForegroundWorker', type: TraceEngine.Handlers.Threads.ThreadType.THREAD_POOL},\n      {name: 'CompositorTileWorker4', type: TraceEngine.Handlers.Threads.ThreadType.RASTERIZER},\n      {name: 'CompositorTileWorker2', type: TraceEngine.Handlers.Threads.ThreadType.RASTERIZER},\n      {name: 'CompositorTileWorker1', type: TraceEngine.Handlers.Threads.ThreadType.RASTERIZER},\n      {name: 'CompositorTileWorkerBackground', type: TraceEngine.Handlers.Threads.ThreadType.RASTERIZER},\n      {name: 'ThreadPoolForegroundWorker', type: TraceEngine.Handlers.Threads.ThreadType.THREAD_POOL},\n      {name: 'CompositorTileWorker3', type: TraceEngine.Handlers.Threads.ThreadType.RASTERIZER},\n    ];\n\n    const threads = TraceEngine.Handlers.Threads.threadsInTrace(traceData);\n    assert.strictEqual(threads.length, allThreads.length);\n    assert.deepEqual(threads.map(thread => ({name: thread.name, type: thread.type})), expectedThreadNamesAndTypes);\n  });\n\n  it('returns all the threads for a trace that used CPU profiling', async function() {\n    // Bit of extra setup required: we need to mimic what the panel does where\n    // it takes the CDP Profile and wraps it in fake trace events, before then\n    // passing that through to the new engine.\n    const rawEvents = await TraceLoader.rawCPUProfile(this, 'node-fibonacci-website.cpuprofile.gz');\n    const events = TimelineModel.TimelineJSProfile.TimelineJSProfileProcessor.createFakeTraceFromCpuProfile(\n        rawEvents,\n        TraceEngine.Types.TraceEvents.ThreadID(1),\n    );\n    const {traceParsedData} = await TraceLoader.executeTraceEngineOnFileContents(\n        events as unknown as TraceEngine.Types.TraceEvents.TraceEventData[]);\n\n    // Check that we did indeed parse this properly as a CPU Profile.\n    assert.strictEqual(traceParsedData.Renderer.processes.size, 0);\n    assert.strictEqual(traceParsedData.Samples.profilesInProcess.size, 1);\n\n    const threads = TraceEngine.Handlers.Threads.threadsInTrace(traceParsedData);\n    assert.strictEqual(threads.length, 1);\n\n    assert.strictEqual(threads.at(0)?.type, TraceEngine.Handlers.Threads.ThreadType.CPU_PROFILE);\n    assert.strictEqual(threads.at(0)?.entries.length, 875);\n  });\n});\n"]}