{"version":3,"file":"LayoutShift.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/root-causes/LayoutShift.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Protocol from '../../../generated/protocol.js';\nimport {\n  describeWithMockConnection,\n} from '../../../testing/MockConnection.js';\nimport {getBaseTraceParseModelData} from '../../../testing/TraceHelpers.js';\nimport * as TraceEngine from '../trace.js';\n\nimport * as RootCauses from './RootCauses.js';\n\ntype TraceParseData = TraceEngine.Handlers.Types.TraceParseData;\ntype TraceParseDataMutable = TraceEngine.Handlers.Types.TraceParseDataMutable;\n\nfunction assertArrayHasNoNulls<T>(inputArray: Array<T|null>): asserts inputArray is T[] {\n  inputArray.forEach((item, index) => {\n    if (item === null) {\n      assert.fail(`Found null at array index ${index}`);\n    }\n  });\n}\n\nfunction createMockStyle(cssProperties: {name: string, value: string}[]): Protocol.CSS.CSSStyle {\n  return {cssProperties, shorthandEntries: []};\n}\n\nfunction createMockMatchedRules(cssProperties: {name: string, value: string}[]): Protocol.CSS.RuleMatch[] {\n  return [{\n    rule: {\n      style: createMockStyle(cssProperties),\n      selectorList: {selectors: [], text: ''},\n      origin: Protocol.CSS.StyleSheetOrigin.Regular,\n    },\n    matchingSelectors: [],\n  }];\n}\n\ndescribeWithMockConnection('LayoutShift root causes', () => {\n  /*\n     * This test has to do a lot of mocking and creating of fake data in order\n     * to function. Normally in the perfomance panel tests we prefer to parse a\n     * real trace and use that, but in this case because LayoutShift root causes\n     * rely on having an actual DevTools instance open with access to the DOM,\n     * we can't do that. So therefore we completely mock the set of data\n     * required.\n     */\n  describe('assigns root causes to layout shifts', () => {\n    let layoutShifts: RootCauses.LayoutShiftRootCauses;\n    let prePaintEvents: TraceEngine.Types.TraceEvents.TraceEventPrePaint[];\n    let resizeEvents: TraceEngine.Types.TraceEvents.TraceEventLayoutInvalidationTracking[];\n    let injectedIframeEvents: TraceEngine.Types.TraceEvents.TraceEventLayoutInvalidationTracking[];\n    let fontChanges: TraceEngine.Types.TraceEvents.TraceEventLayoutInvalidationTracking[];\n    let unknownLayoutInvalidation: TraceEngine.Types.TraceEvents.TraceEventLayoutInvalidationTracking[];\n    let domNodeByBackendIdMap: Map<Protocol.DOM.BackendNodeId, Protocol.DOM.Node|null>;\n    let model: TraceParseData;\n    let modelMut: TraceParseDataMutable;\n    let resizeEventsNodeIds: number[];\n    let iframesNodeIds: number[];\n    let shifts: TraceEngine.Types.TraceEvents.SyntheticLayoutShift[];\n    let matchedStylesMock: Omit<Protocol.CSS.GetMatchedStylesForNodeResponse, 'getError'>;\n    let protocolInterface: RootCauses.RootCauseProtocolInterface;\n    let computedStylesMock: Protocol.CSS.CSSComputedStyleProperty[];\n    let fontFaceMock: Protocol.CSS.FontFace;\n    const fontSource = 'mock-source.woff';\n    const renderBlockSource = 'mock-source.css';\n\n    beforeEach(() => {\n      fontFaceMock = {fontFamily: 'Roboto', src: fontSource, fontDisplay: 'swap'} as Protocol.CSS.FontFace;\n\n      // Layout shifts for which we want to extract potential root causes.\n      shifts = [{ts: 10}, {ts: 30}, {ts: 50}, {ts: 70}, {ts: 90}] as unknown as\n          TraceEngine.Types.TraceEvents.SyntheticLayoutShift[];\n\n      // Initialize the shifts.\n      for (const shift of shifts) {\n        shift.args = {\n          frame: 'frame-id-123',\n        };\n        shift.name = 'LayoutShift';\n      }\n\n      const clusters =\n          [{events: shifts}] as unknown as TraceEngine.Handlers.ModelHandlers.LayoutShifts.LayoutShiftCluster[];\n\n      // PrePaint events to which each layout shift belongs.\n      prePaintEvents = [{ts: 5, dur: 30}, {ts: 45, dur: 30}, {ts: 85, dur: 10}] as unknown as\n          TraceEngine.Types.TraceEvents.TraceEventPrePaint[];\n\n      resizeEvents = [{ts: 0}, {ts: 25}, {ts: 80}, {ts: 100}] as unknown as\n          TraceEngine.Types.TraceEvents.TraceEventLayoutInvalidationTracking[];\n\n      injectedIframeEvents =\n          [{ts: 2}, {ts: 81}] as unknown as TraceEngine.Types.TraceEvents.TraceEventLayoutInvalidationTracking[];\n\n      fontChanges =\n          [{ts: 3}, {ts: 35}] as unknown as TraceEngine.Types.TraceEvents.TraceEventLayoutInvalidationTracking[];\n\n      unknownLayoutInvalidation =\n          [{ts: 4}, {ts: 36}] as unknown as TraceEngine.Types.TraceEvents.TraceEventLayoutInvalidationTracking[];\n\n      // |Resize|---|Iframe|---|Fonts-|---|--PrePaint 1--|----|Resize|---|Fonts-|-|---PrePaint 2---|---|Resize|---|Iframe|---|PrePaint 3|\n      // ----------------------------------|LS 1|-|LS 2|----------------------------|LS 3|-|LS 4|-----------------------------|LS 5|\n\n      // Initialize the LI events by adding a nodeId and setting a reason so that they\n      // aren't filtered out.\n      for (let i = 0; i < resizeEvents.length; i++) {\n        resizeEvents[i].args = {\n          data: {\n            nodeId: i + 1 as Protocol.DOM.BackendNodeId,\n            reason: TraceEngine.Types.TraceEvents.LayoutInvalidationReason.SIZE_CHANGED,\n            nodeName: 'IMG',\n            frame: 'frame-id-123',\n          },\n        };\n      }\n      for (let i = 0; i < injectedIframeEvents.length; i++) {\n        injectedIframeEvents[i].args = {\n          data: {\n            nodeId: i + 11 as Protocol.DOM.BackendNodeId,\n            reason: TraceEngine.Types.TraceEvents.LayoutInvalidationReason.ADDED_TO_LAYOUT,\n            nodeName: 'IFRAME',\n            frame: 'frame-id-123',\n          },\n        };\n      }\n      for (let i = 0; i < fontChanges.length; i++) {\n        fontChanges[i].args = {\n          data: {\n            nodeId: i + 21 as Protocol.DOM.BackendNodeId,\n            reason: TraceEngine.Types.TraceEvents.LayoutInvalidationReason.FONTS_CHANGED,\n            nodeName: 'DIV',\n            frame: 'frame-id-123',\n          },\n        };\n      }\n      for (let i = 0; i < unknownLayoutInvalidation.length; i++) {\n        unknownLayoutInvalidation[i].args = {\n          data: {\n            nodeId: i + 31 as Protocol.DOM.BackendNodeId,\n            reason: TraceEngine.Types.TraceEvents.LayoutInvalidationReason.UNKNOWN,\n            nodeName: 'DIV',\n            frame: 'frame-id-123',\n          },\n        };\n      }\n      const layoutInvalidationEvents = [\n        ...resizeEvents,\n        ...injectedIframeEvents,\n        ...fontChanges,\n        ...unknownLayoutInvalidation,\n      ].sort((a, b) => a.ts - b.ts);\n\n      for (const e of layoutInvalidationEvents) {\n        e.name = TraceEngine.Types.TraceEvents.KnownEventName.LayoutInvalidationTracking;\n      }\n\n      // Map from fake BackendNodeId to fake Protocol.DOM.Node used by the handler to\n      // resolve the nodeIds in the traces.\n      const domNodeByBackendIdMapEntries: [Protocol.DOM.BackendNodeId, Protocol.DOM.Node|null][] = [];\n      const domNodeByIdMap = new Map<Protocol.DOM.NodeId, Protocol.DOM.Node>();\n      for (let i = 0 as Protocol.DOM.BackendNodeId; i < layoutInvalidationEvents.length; i++) {\n        const backendNodeId = layoutInvalidationEvents[i].args.data.nodeId;\n        const nodeId = i as unknown as Protocol.DOM.NodeId;\n        const nodeName = layoutInvalidationEvents[i].args.data.nodeName || 'DIV';\n        const fakeNode = {\n          backendNodeId,\n          nodeId,\n          localName: nodeName.toLowerCase(),\n          nodeName,\n          attributes: [],\n          nodeType: Node.ELEMENT_NODE,\n        } as unknown as Protocol.DOM.Node;\n\n        domNodeByBackendIdMapEntries.push([backendNodeId, fakeNode]);\n        domNodeByIdMap.set(nodeId, fakeNode);\n      }\n\n      domNodeByBackendIdMap =\n          new Map(domNodeByBackendIdMapEntries) as unknown as Map<Protocol.DOM.BackendNodeId, Protocol.DOM.Node|null>;\n\n      model = getBaseTraceParseModelData();\n      modelMut = model as unknown as TraceParseDataMutable;\n      // Now fake out the relevant LayoutShift data\n      modelMut.LayoutShifts.prePaintEvents = prePaintEvents;\n      modelMut.LayoutShifts.layoutInvalidationEvents = layoutInvalidationEvents;\n      modelMut.LayoutShifts.backendNodeIds = [...domNodeByBackendIdMap.keys()] as Protocol.DOM.BackendNodeId[];\n      modelMut.LayoutShifts.clusters = clusters;\n      modelMut.LayoutShifts.scheduleStyleInvalidationEvents = [];\n      modelMut.Initiators = {\n        eventToInitiator: new Map(),\n        initiatorToEvents: new Map(),\n      };\n\n      resizeEventsNodeIds = resizeEvents.map(li => Number(li.args.data.nodeId));\n      iframesNodeIds = injectedIframeEvents.map(li => Number(li.args.data.nodeId));\n\n      computedStylesMock = [];\n      matchedStylesMock = {};\n\n      protocolInterface = {\n        getInitiatorForRequest(_: string): Protocol.Network.Initiator |\n            null {\n              return null;\n            },\n        async pushNodesByBackendIdsToFrontend(backendNodeIds: Protocol.DOM.BackendNodeId[]):\n            Promise<Protocol.DOM.NodeId[]> {\n              return backendNodeIds.map(id => {\n                const node = domNodeByBackendIdMap.get(id);\n                if (!node) {\n                  throw new Error('unexpected backend id');\n                }\n                return node.nodeId;\n              });\n            },\n        async getNode(nodeId: Protocol.DOM.NodeId): Promise<Protocol.DOM.Node> {\n          const node = domNodeByIdMap.get(nodeId);\n          if (!node) {\n            throw new Error('unexpected id');\n          }\n          return node;\n        },\n        async getComputedStyleForNode(_: Protocol.DOM.NodeId): Promise<Protocol.CSS.CSSComputedStyleProperty[]> {\n          return computedStylesMock;\n        },\n        async getMatchedStylesForNode(_: Protocol.DOM.NodeId): Promise<Protocol.CSS.GetMatchedStylesForNodeResponse> {\n          return {\n            ...matchedStylesMock,\n            getError: () => undefined,\n          };\n        },\n        fontFaceForSource(url: string): Protocol.CSS.FontFace |\n            undefined {\n              if (url === fontFaceMock.src) {\n                return fontFaceMock;\n              }\n              return;\n            },\n      };\n\n      layoutShifts = new RootCauses.LayoutShiftRootCauses(protocolInterface, {enableIframeRootCauses: true});\n    });\n\n    it('uses cached node details', async () => {\n      // Use duplicate node ids for invalidation events that use `getNode`\n      resizeEvents.forEach(e => {\n        e.args.data.nodeId = 1 as Protocol.DOM.BackendNodeId;\n      });\n      injectedIframeEvents.forEach(e => {\n        e.args.data.nodeId = 11 as Protocol.DOM.BackendNodeId;\n      });\n\n      const getNodeSpy = sinon.spy(protocolInterface, 'getNode');\n\n      const rootCauses = await Promise.all(shifts.map(shift => layoutShifts.rootCausesForEvent(model, shift)));\n      assertArrayHasNoNulls(rootCauses);\n\n      assert.strictEqual(getNodeSpy.callCount, 2);\n    });\n\n    describe('Unsized media', () => {\n      it('marks unsized media node in LayoutInvalidation events as a potential root cause to layout shifts correctly',\n         async () => {\n           const rootCauses = await Promise.all(shifts.map(shift => layoutShifts.rootCausesForEvent(model, shift)));\n           assertArrayHasNoNulls(rootCauses);\n\n           const shiftCausesNodeIds = rootCauses.map(cause => {\n             return cause.unsizedMedia.map(media => Number(media.node.backendNodeId));\n           });\n\n           // Test the nodes from the LI events are assinged as the potential root causes to layout shifts correctly.\n           assert.strictEqual(shiftCausesNodeIds[0].length, 1);\n           assert.strictEqual(shiftCausesNodeIds[0][0], resizeEventsNodeIds[0]);\n\n           assert.strictEqual(shiftCausesNodeIds[1].length, 1);\n           assert.strictEqual(shiftCausesNodeIds[1][0], resizeEventsNodeIds[0]);\n\n           assert.strictEqual(shiftCausesNodeIds[2].length, 1);\n           assert.strictEqual(shiftCausesNodeIds[2][0], resizeEventsNodeIds[1]);\n\n           assert.strictEqual(shiftCausesNodeIds[3].length, 1);\n           assert.strictEqual(shiftCausesNodeIds[3][0], resizeEventsNodeIds[1]);\n\n           assert.strictEqual(shiftCausesNodeIds[4].length, 1);\n           assert.strictEqual(shiftCausesNodeIds[4][0], resizeEventsNodeIds[2]);\n         });\n\n      it('sets partially sized media\\'s authored dimensions properly, using inline styles.', async () => {\n        // Set height using inline and matched CSS styles.\n        matchedStylesMock = {\n          attributesStyle: createMockStyle([]),\n          inlineStyle: createMockStyle([{name: 'height', value: '20px'}]),\n          matchedCSSRules: createMockMatchedRules([{name: 'height', value: '10px'}]),\n        };\n        const rootCause = await layoutShifts.rootCausesForEvent(model, shifts[0]);\n\n        const authoredDimensions = rootCause?.unsizedMedia[0].authoredDimensions;\n        if (!authoredDimensions) {\n          assert.fail('Expected defined authored dimensions');\n          return;\n        }\n        // Assert inline styles are preferred.\n        assert.strictEqual(authoredDimensions.height, '20px');\n        assert.isUndefined(authoredDimensions.width);\n        assert.isUndefined(authoredDimensions.aspectRatio);\n      });\n\n      it('sets partially sized media\\'s authored dimensions properly, using matched CSS rules.', async () => {\n        // Set height using matched CSS rules.\n        matchedStylesMock = {\n          attributesStyle: createMockStyle([{name: 'height', value: '10px'}]),\n          inlineStyle: createMockStyle([]),\n          matchedCSSRules: createMockMatchedRules([{name: 'height', value: '30px'}]),\n        };\n\n        const rootCause = await layoutShifts.rootCausesForEvent(model, shifts[1]);\n        const authoredDimensions = rootCause?.unsizedMedia[0].authoredDimensions;\n        if (!authoredDimensions) {\n          assert.fail('Expected defined authored dimensions');\n          return;\n        }\n        // Assert matched CSS rules styles are preferred.\n        assert.strictEqual(authoredDimensions.height, '30px');\n      });\n\n      it('sets partially unsized media\\'s computed dimensions properly.', async () => {\n        const height = '10px';\n        const width = '20px';\n        computedStylesMock = [\n          {name: 'height', value: height},\n          {name: 'width', value: width},\n        ];\n\n        const rootCause = await layoutShifts.rootCausesForEvent(model, shifts[1]);\n        const computedDimensions = rootCause?.unsizedMedia[0].computedDimensions;\n        if (!computedDimensions) {\n          assert.fail('Expected defined computed dimensions');\n          return;\n        }\n        // Assert correct computed styles are set.\n        assert.strictEqual(computedDimensions.height, height);\n        assert.strictEqual(computedDimensions.width, width);\n      });\n\n      async function assertAmountOfBlamedLayoutInvalidations(amount: number) {\n        const allShiftsRootCauses =\n            await Promise.all(shifts.map(shift => layoutShifts.rootCausesForEvent(model, shift)));\n\n        const nodesFromLayoutInvalidations = new Set<number>();\n        for (const currentShiftRootCauses of allShiftsRootCauses) {\n          if (currentShiftRootCauses === null) {\n            continue;\n          }\n          for (const media of currentShiftRootCauses.unsizedMedia) {\n            nodesFromLayoutInvalidations.add(media.node.backendNodeId);\n          }\n        }\n\n        assert.strictEqual(nodesFromLayoutInvalidations.size, amount);\n      }\n      it('ignores media with inline height and width', async () => {\n        matchedStylesMock = {\n          attributesStyle: createMockStyle([{name: 'height', value: '10px'}, {name: 'width', value: '10px'}]),\n          inlineStyle: createMockStyle([]),\n          matchedCSSRules: createMockMatchedRules([]),\n        };\n        await assertAmountOfBlamedLayoutInvalidations(0);\n      });\n      it('ignores media with CSS height and width', async () => {\n        matchedStylesMock = {\n          attributesStyle: createMockStyle([]),\n          inlineStyle: createMockStyle([]),\n          matchedCSSRules: createMockMatchedRules([{name: 'height', value: '10px'}, {name: 'width', value: '10px'}]),\n        };\n        await assertAmountOfBlamedLayoutInvalidations(0);\n      });\n      it('ignores media with height and aspect ratio', async () => {\n        matchedStylesMock = {\n          attributesStyle: createMockStyle([{name: 'height', value: '10px'}, {name: 'aspect-ratio', value: '1'}]),\n          inlineStyle: createMockStyle([]),\n          matchedCSSRules: createMockMatchedRules([]),\n        };\n        await assertAmountOfBlamedLayoutInvalidations(0);\n      });\n\n      it('ignores media with explicit height and width', async () => {\n        matchedStylesMock = {\n          attributesStyle: createMockStyle([{name: 'height', value: '10px'}]),\n          inlineStyle: createMockStyle([{name: 'width', value: '10px'}]),\n          matchedCSSRules: createMockMatchedRules([]),\n        };\n        await assertAmountOfBlamedLayoutInvalidations(0);\n      });\n\n      it('ignores media with fixed position as potential root causes of layout shifts', async () => {\n        computedStylesMock = [{name: 'position', value: 'fixed'}];\n        await assertAmountOfBlamedLayoutInvalidations(0);\n      });\n\n      it('does not ignore media with only height or width explicitly set as potential root causes of layout shifts',\n         async () => {\n           matchedStylesMock = {\n             attributesStyle: createMockStyle([{name: 'height', value: '10px'}]),\n             inlineStyle: createMockStyle([]),\n             matchedCSSRules: createMockMatchedRules([]),\n           };\n           await assertAmountOfBlamedLayoutInvalidations(3);\n         });\n\n      it('does not error when there are no layout shifts', async () => {\n        // Layout shifts for which we want to associate LayoutInvalidation events as potential root causes.\n        shifts = [{ts: 10}, {ts: 30}, {ts: 50}, {ts: 70}, {ts: 90}] as unknown as\n            TraceEngine.Types.TraceEvents.SyntheticLayoutShift[];\n\n        // Initialize the shifts.\n        for (const shift of shifts) {\n          shift.args = {\n            frame: 'frame-id-123',\n          };\n          shift.name = 'LayoutShift';\n        }\n\n        const clusters =\n            [{events: shifts}] as unknown as TraceEngine.Handlers.ModelHandlers.LayoutShifts.LayoutShiftCluster[];\n        modelMut.LayoutShifts.clusters = clusters;\n\n        assert.doesNotThrow(async () => {\n          await Promise.all(shifts.map(shift => layoutShifts.rootCausesForEvent(model, shift)));\n        });\n      });\n    });\n\n    describe('Injected iframes', () => {\n      it('marks injected iframes in LayoutInvalidation events as a potential root cause to layout shifts correctly',\n         async () => {\n           const rootCauses = await Promise.all(shifts.map(shift => layoutShifts.rootCausesForEvent(model, shift)));\n           assertArrayHasNoNulls(rootCauses);\n           const shiftCausesNodeIds = rootCauses.map(cause => {\n             return cause.iframes.map(node => Number(node.iframe.backendNodeId));\n           });\n\n           // Test the nodes from the LI events are assinged as the potential root causes to layout shifts correctly.\n           assert.strictEqual(shiftCausesNodeIds[0].length, 1);\n           assert.strictEqual(shiftCausesNodeIds[0][0], iframesNodeIds[0]);\n\n           assert.strictEqual(shiftCausesNodeIds[4].length, 1);\n           assert.strictEqual(shiftCausesNodeIds[4][0], iframesNodeIds[1]);\n         });\n\n      it('ignores injected iframes if disabled', async () => {\n        layoutShifts = new RootCauses.LayoutShiftRootCauses(protocolInterface, {enableIframeRootCauses: false});\n        const rootCauses = await Promise.all(shifts.map(shift => layoutShifts.rootCausesForEvent(model, shift)));\n        assertArrayHasNoNulls(rootCauses);\n        assert(rootCauses.every(cause => cause.iframes.length === 0), 'contained iframe root causes');\n      });\n\n      it('ignores events that could not add or resize an iframe', async () => {\n        injectedIframeEvents.forEach(e => {\n          e.args.data.nodeName = 'DIV';\n          e.args.data.reason = TraceEngine.Types.TraceEvents.LayoutInvalidationReason.SIZE_CHANGED;\n        });\n\n        const rootCauses = await Promise.all(shifts.map(shift => layoutShifts.rootCausesForEvent(model, shift)));\n        assertArrayHasNoNulls(rootCauses);\n        assert(rootCauses.every(cause => cause.iframes.length === 0), 'contained iframe root causes');\n      });\n    });\n\n    describe('Font changes', () => {\n      // Mock two font network request that finished right before the mocked layout invalidation events\n      // that correspond to font changes.\n      const fontRequests = [\n        {\n          dur: TraceEngine.Types.Timing.MicroSeconds(2),\n          ts: TraceEngine.Types.Timing.MicroSeconds(0),\n          args: {\n            data: {\n              url: fontSource,\n              mimeType: 'font/woff2',\n            },\n          },\n        },\n        {\n          dur: TraceEngine.Types.Timing.MicroSeconds(30),\n          ts: TraceEngine.Types.Timing.MicroSeconds(0),\n          args: {\n            data: {\n              url: fontSource,\n              mimeType: 'font/woff2',\n            },\n          },\n        },\n      ] as unknown as TraceEngine.Types.TraceEvents.SyntheticNetworkRequest[];\n\n      it('marks fonts changes in LayoutInvalidation events as a potential root cause to layout shifts correctly',\n         async () => {\n           modelMut.NetworkRequests.byTime = fontRequests;\n\n           const rootCauses = await Promise.all(shifts.map(shift => layoutShifts.rootCausesForEvent(model, shift)));\n           assertArrayHasNoNulls(rootCauses);\n           const shiftCausesNodeIds = rootCauses.map(cause => {\n             return cause.fontChanges;\n           });\n\n           // Test the font requests are marked as potential layout shift root causes\n           // in the correct order.\n           assert.deepEqual(shiftCausesNodeIds[0][0]?.request, fontRequests[0]);\n           assert.deepEqual(shiftCausesNodeIds[1][0]?.request, fontRequests[0]);\n           assert.deepEqual(shiftCausesNodeIds[2][0]?.request, fontRequests[1]);\n           assert.deepEqual(shiftCausesNodeIds[3][0]?.request, fontRequests[1]);\n           assert.deepEqual(shiftCausesNodeIds[2][1]?.request, fontRequests[0]);\n           assert.deepEqual(shiftCausesNodeIds[3][1]?.request, fontRequests[0]);\n         });\n\n      it('ignores requests for fonts whose font-display property is \"optional\"', async () => {\n        const optionalFontRequests = [{\n                                       dur: TraceEngine.Types.Timing.MicroSeconds(2),\n                                       ts: TraceEngine.Types.Timing.MicroSeconds(0),\n                                       args: {\n                                         data: {\n                                           url: fontSource,\n                                           mimeType: 'font/woff2',\n                                         },\n                                       },\n                                     }] as unknown as TraceEngine.Types.TraceEvents.SyntheticNetworkRequest[];\n        modelMut.NetworkRequests.byTime = optionalFontRequests;\n        fontFaceMock = {fontFamily: 'Roboto', src: fontSource, fontDisplay: 'optional'} as Protocol.CSS.FontFace;\n        const rootCauses = await Promise.all(shifts.map(shift => layoutShifts.rootCausesForEvent(model, shift)));\n        assertArrayHasNoNulls(rootCauses);\n        const shiftCausesNodeIds = rootCauses.map(cause => {\n          return cause.fontChanges;\n        });\n\n        // Test no font request is marked as potential layout shift root causes\n        assert.strictEqual(shiftCausesNodeIds[0].length, 0);\n        assert.strictEqual(shiftCausesNodeIds[1].length, 0);\n        assert.strictEqual(shiftCausesNodeIds[2].length, 0);\n        assert.strictEqual(shiftCausesNodeIds[3].length, 0);\n      });\n      it('ignores requests for fonts that lie outside the fixed time window from ending at the \"font change\" layout invalidation event',\n         async () => {\n           const optionalFontRequests = [{\n                                          dur: TraceEngine.Types.Timing.MicroSeconds(2),\n                                          ts: TraceEngine.Types.Timing.MicroSeconds(85),\n                                          args: {\n                                            data: {\n                                              url: fontSource,\n                                              mimeType: 'font/woff2',\n                                            },\n                                          },\n                                        }] as unknown as TraceEngine.Types.TraceEvents.SyntheticNetworkRequest[];\n           modelMut.NetworkRequests.byTime = optionalFontRequests;\n           fontFaceMock = {fontFamily: 'Roboto', src: fontSource, fontDisplay: 'swap'} as Protocol.CSS.FontFace;\n           const rootCauses = await Promise.all(shifts.map(shift => layoutShifts.rootCausesForEvent(model, shift)));\n           assertArrayHasNoNulls(rootCauses);\n           const shiftCausesNodeIds = rootCauses.map(cause => {\n             return cause.fontChanges;\n           });\n\n           // Test no font request is marked as potential layout shift root causes\n           assert.strictEqual(shiftCausesNodeIds[0].length, 0);\n           assert.strictEqual(shiftCausesNodeIds[1].length, 0);\n           assert.strictEqual(shiftCausesNodeIds[2].length, 0);\n           assert.strictEqual(shiftCausesNodeIds[3].length, 0);\n         });\n    });\n\n    describe('Render blocking request', () => {\n      const RenderBlockingRequest = [\n        {\n          dur: TraceEngine.Types.Timing.MicroSeconds(2),\n          ts: TraceEngine.Types.Timing.MicroSeconds(0),\n          args: {\n            data: {\n              url: renderBlockSource,\n              mimeType: 'text/plain',\n              renderBlocking: 'blocking',\n            },\n          },\n        },\n        {\n          dur: TraceEngine.Types.Timing.MicroSeconds(30),\n          ts: TraceEngine.Types.Timing.MicroSeconds(0),\n          args: {\n            data: {\n              url: renderBlockSource,\n              mimeType: 'text/css',\n              renderBlocking: 'non_blocking',\n            },\n          },\n        },\n      ] as TraceEngine.Types.TraceEvents.SyntheticNetworkRequest[];\n\n      it('marks render blocks in LayoutInvalidation events as a potential root cause to layout shifts correctly',\n         async () => {\n           modelMut.NetworkRequests.byTime = RenderBlockingRequest;\n\n           const rootCauses = await Promise.all(shifts.map(shift => layoutShifts.rootCausesForEvent(model, shift)));\n           assertArrayHasNoNulls(rootCauses);\n           const shiftCausesNodeIds = rootCauses.map(cause => {\n             return cause.renderBlockingRequests;\n           });\n\n           // Test the rendering block requests are marked as potential layout shift root causes\n           // in the correct order.\n           assert.deepEqual(shiftCausesNodeIds[2][0]?.request, RenderBlockingRequest[0]);\n           assert.deepEqual(shiftCausesNodeIds[3][0]?.request, RenderBlockingRequest[0]);\n           assert.deepEqual(shiftCausesNodeIds[4][0]?.request, RenderBlockingRequest[0]);\n         });\n    });\n\n    describe('Scripts causing relayout/style recalc', () => {\n      it('adds a Layout initiator\\'s stack trace to the corresponding layout shift root causes.', async () => {\n        const mockStackTrace = [\n          {\n            scriptId: 0,\n            functionName: 'foo',\n            columnNumber: 10,\n            lineNumber: 1,\n            url: 'Main.js',\n          },\n          {\n            scriptId: 2,\n            functionName: 'bar',\n            columnNumber: 10,\n            lineNumber: 20,\n            url: 'Main.js',\n          },\n        ];\n\n        // Mock a Layout event, which corresponds to the last shift.\n        // a stack trace.\n        modelMut.Renderer.allTraceEntries = [{\n          name: 'Layout',\n          ts: 82,\n        } as unknown as TraceEngine.Types.TraceEvents.SyntheticTraceEntry];\n\n        const node = {\n          entry: model.Renderer.allTraceEntries[0],\n        } as TraceEngine.Helpers.TreeHelpers.TraceEntryNode;\n        model.Renderer.entryToNode.set(model.Renderer.allTraceEntries[0], node);\n        // Fake out the initiator detection and link the Layout event with a fake InvalidateLayout event.\n        model.Initiators.eventToInitiator.set(model.Renderer.allTraceEntries[0], {\n          name: 'InvalidateLayout',\n          args: {\n            data: {\n              stackTrace: mockStackTrace,\n            },\n          },\n        } as TraceEngine.Types.TraceEvents.TraceEventData);\n\n        // Verify the Layout initiator's stack trace is added to the last shift.\n        const rootCauses = await Promise.all(shifts.map(shift => layoutShifts.rootCausesForEvent(model, shift)));\n        assertArrayHasNoNulls(rootCauses);\n        const rootCauseStackTraces = rootCauses.map(cause => {\n          return cause.scriptStackTrace;\n        });\n        const stackTracesForLastShift = rootCauseStackTraces.at(-1);\n        if (!stackTracesForLastShift) {\n          assert.fail('No stack traces found for layout shift');\n          return;\n        }\n        assert.strictEqual(stackTracesForLastShift, mockStackTrace);\n      });\n    });\n  });\n});\n"]}