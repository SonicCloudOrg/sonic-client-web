{"version":3,"file":"Metadata.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/extras/Metadata.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../../core/sdk/sdk.js';\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport * as TraceEngine from '../trace.js';\n\ndescribeWithEnvironment('Trace Metadata', () => {\n  it('returns the associated metadata', async () => {\n    const cpuThrottlingManager = SDK.CPUThrottlingManager.CPUThrottlingManager.instance({forceNew: true});\n    sinon.stub(cpuThrottlingManager, 'hasPrimaryPageTargetSet').returns(true);\n    sinon.stub(cpuThrottlingManager, 'getHardwareConcurrency').returns(Promise.resolve(1));\n    sinon.stub(cpuThrottlingManager, 'cpuThrottlingRate').returns(2);\n    const networkManager = SDK.NetworkManager.MultitargetNetworkManager.instance({forceNew: true});\n    sinon.stub(networkManager, 'networkConditions').returns({\n      title: 'Slow 3G',\n      download: 1,\n      upload: 1,\n      latency: 1,\n    });\n    const metadata = await TraceEngine.Extras.Metadata.forNewRecording(/* isCpuProfile= */ false);\n    assert.deepEqual(metadata, {\n      source: 'DevTools',\n      startTime: undefined,\n      cpuThrottling: 2,\n      networkThrottling: 'Slow 3G',\n      dataOrigin: TraceEngine.Types.File.DataOrigin.TraceEvents,\n      hardwareConcurrency: 1,\n    });\n  });\n\n  it('calls the title function if the network condition title is a function', async () => {\n    const cpuThrottlingManager = SDK.CPUThrottlingManager.CPUThrottlingManager.instance({forceNew: true});\n    sinon.stub(cpuThrottlingManager, 'hasPrimaryPageTargetSet').returns(true);\n    sinon.stub(cpuThrottlingManager, 'getHardwareConcurrency').returns(Promise.resolve(1));\n    sinon.stub(cpuThrottlingManager, 'cpuThrottlingRate').returns(2);\n    const networkManager = SDK.NetworkManager.MultitargetNetworkManager.instance({forceNew: true});\n    sinon.stub(networkManager, 'networkConditions').returns({\n      title: () => 'Slow 3G',\n      download: 1,\n      upload: 1,\n      latency: 1,\n    });\n    const metadata = await TraceEngine.Extras.Metadata.forNewRecording(/* isCpuProfile= */ false);\n    assert.deepEqual(metadata, {\n      source: 'DevTools',\n      startTime: undefined,\n      cpuThrottling: 2,\n      networkThrottling: 'Slow 3G',\n      dataOrigin: TraceEngine.Types.File.DataOrigin.TraceEvents,\n      hardwareConcurrency: 1,\n    });\n  });\n\n  it('does not return hardware concurrency if the manager has no target', async () => {\n    const cpuThrottlingManager = SDK.CPUThrottlingManager.CPUThrottlingManager.instance({forceNew: true});\n    sinon.stub(cpuThrottlingManager, 'hasPrimaryPageTargetSet').returns(false);\n    const getHardwareConcurrencyStub = sinon.stub(cpuThrottlingManager, 'getHardwareConcurrency');\n    sinon.stub(cpuThrottlingManager, 'cpuThrottlingRate').returns(2);\n    const networkManager = SDK.NetworkManager.MultitargetNetworkManager.instance({forceNew: true});\n    sinon.stub(networkManager, 'networkConditions').returns({\n      title: () => 'Slow 3G',\n      download: 1,\n      upload: 1,\n      latency: 1,\n    });\n    const metadata = await TraceEngine.Extras.Metadata.forNewRecording(/* isCpuProfile= */ false);\n    assert.deepEqual(metadata, {\n      source: 'DevTools',\n      startTime: undefined,\n      cpuThrottling: 2,\n      networkThrottling: 'Slow 3G',\n      dataOrigin: TraceEngine.Types.File.DataOrigin.TraceEvents,\n      hardwareConcurrency: undefined,\n    });\n    assert.strictEqual(getHardwareConcurrencyStub.callCount, 0);\n  });\n});\n"]}