{"version":3,"file":"Extensions.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/types/Extensions.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAa7B,MAAM,gBAAgB,GAAG;IACvB,SAAS;IACT,eAAe;IACf,cAAc;IACd,WAAW;IACX,iBAAiB;IACjB,gBAAgB;IAChB,UAAU;IACV,gBAAgB;IAChB,eAAe;IACf,OAAO;CACC,CAAC;AAIX,MAAM,UAAU,YAAY,CAAC,KAAa;IACxC,OAAQ,gBAAsC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACjE,CAAC;AA8BD,MAAM,UAAU,sBAAsB,CAAC,OAA6B;IAClE,IAAI,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;QAC5C,OAAO,KAAK,CAAC;IACf,CAAC;IACD,MAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAA8B,CAAC;IAC5D,OAAO,YAAY,CAAC,KAAK,CAAC,CAAC;AAC7B,CAAC;AAED,MAAM,UAAU,wBAAwB,CAAC,OAA6B;IACpE,MAAM,YAAY,GAAG,sBAAsB,CAAC,OAAO,CAAC,CAAC;IACrD,OAAO,OAAO,CAAC,QAAQ,CAAC,QAAQ,6CAA8B,IAAI,YAAY,CAAC;AACjF,CAAC;AAED,MAAM,UAAU,iCAAiC,CAAC,OAA6B;IAE7E,MAAM,YAAY,GAAG,sBAAsB,CAAC,OAAO,CAAC,CAAC;IACrD,MAAM,QAAQ,GAAG,OAAO,IAAI,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAC9D,OAAO,OAAO,CAAC,QAAQ,CAAC,QAAQ,uDAAmC,IAAI,QAAQ,IAAI,YAAY,CAAC;AAClG,CAAC;AAED,MAAM,UAAU,yBAAyB,CAAC,KAAqB;IAC7D,OAAO,KAAK,CAAC,GAAG,KAAK,oBAAoB,CAAC;AAC5C,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {\n  type SyntheticTraceEntry,\n  type TraceEventArgs,\n  type TraceEventData,\n} from './TraceEvents.js';\n\nexport const enum ExtensionEntryType {\n  TRACK_ENTRY = 'track-entry',\n  MARKER = 'marker',\n}\n\nconst extensionPalette = [\n  'primary',\n  'primary-light',\n  'primary-dark',\n  'secondary',\n  'secondary-light',\n  'secondary-dark',\n  'tertiary',\n  'tertiary-light',\n  'tertiary-dark',\n  'error',\n] as const;\n\nexport type ExtensionColorFromPalette = typeof extensionPalette[number];\n\nexport function colorIsValid(color: string): boolean {\n  return (extensionPalette as readonly string[]).includes(color);\n}\n\nexport interface ExtensionDataPayload {\n  metadata: {dataType: ExtensionEntryType, extensionName: string};\n}\nexport interface ExtensionFlameChartEntryPayload extends ExtensionDataPayload {\n  metadata: ExtensionDataPayload['metadata']&{dataType: ExtensionEntryType.TRACK_ENTRY};\n  color: ExtensionColorFromPalette;\n  track: string;\n  detailsPairs?: [string, string][];\n  hintText?: string;\n}\n\nexport interface ExtensionMarkerPayload extends ExtensionDataPayload {\n  metadata: ExtensionDataPayload['metadata']&{dataType: ExtensionEntryType.MARKER};\n  color: ExtensionColorFromPalette;\n  detailsPairs?: [string, string][];\n  hintText?: string;\n}\n\nexport interface SyntheticExtensionFlameChartEntry extends SyntheticTraceEntry {\n  args: TraceEventArgs&ExtensionFlameChartEntryPayload;\n}\n\nexport interface SyntheticExtensionMarker extends SyntheticTraceEntry {\n  args: TraceEventArgs&ExtensionMarkerPayload;\n}\n\nexport type SyntheticExtensionEntry = SyntheticExtensionFlameChartEntry|SyntheticExtensionMarker;\n\nexport function validateColorInPayload(payload: ExtensionDataPayload): boolean {\n  if (!('color' in payload) || !payload.color) {\n    return false;\n  }\n  const color = payload['color'] as ExtensionColorFromPalette;\n  return colorIsValid(color);\n}\n\nexport function isExtensionPayloadMarker(payload: ExtensionDataPayload): payload is ExtensionMarkerPayload {\n  const colorIsValid = validateColorInPayload(payload);\n  return payload.metadata.dataType === ExtensionEntryType.MARKER && colorIsValid;\n}\n\nexport function isExtensionPayloadFlameChartEntry(payload: ExtensionDataPayload):\n    payload is ExtensionFlameChartEntryPayload {\n  const colorIsValid = validateColorInPayload(payload);\n  const hasTrack = 'track' in payload && Boolean(payload.track);\n  return payload.metadata.dataType === ExtensionEntryType.TRACK_ENTRY && hasTrack && colorIsValid;\n}\n\nexport function isSyntheticExtensionEntry(entry: TraceEventData): entry is SyntheticExtensionEntry {\n  return entry.cat === 'devtools.extension';\n}\n\n/**\n * Synthetic events created for extension tracks.\n */\nexport interface SyntheticExtensionFlameChartEntry extends SyntheticTraceEntry {\n  args: TraceEventArgs&ExtensionFlameChartEntryPayload;\n  cat: 'devtools.extension';\n}\n\n/**\n * Synthetic events created for extension marks.\n */\nexport interface SyntheticExtensionMarker extends SyntheticTraceEntry {\n  args: TraceEventArgs&ExtensionMarkerPayload;\n  cat: 'devtools.extension';\n}\n\nexport interface ExtensionTrackData {\n  name: string;\n  extensionName: string;\n  flameChartEntries: SyntheticExtensionFlameChartEntry[];\n}\n"]}