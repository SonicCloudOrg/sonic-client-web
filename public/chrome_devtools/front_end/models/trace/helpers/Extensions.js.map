{"version":3,"file":"Extensions.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/helpers/Extensions.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,QAAQ,MAAM,oCAAoC,CAAC;AAG/D,OAAO,EAAC,sBAAsB,EAAC,MAAM,YAAY,CAAC;AAClD,OAAO,EAAC,uBAAuB,EAAE,MAAM,EAAC,MAAM,kBAAkB,CAAC;AAEjE,MAAM,UAAU,kCAAkC,CAC9C,gBAAsE,EACtE,kBAAyD;IAC3D,MAAM,WAAW,GAAG,IAAI,GAAG,EAA2E,CAAC;IACvG,KAAK,MAAM,KAAK,IAAI,gBAAgB,EAAE,CAAC;QACrC,MAAM,SAAS,GAAG,QAAQ,CAAC,YAAY,CAAC,cAAc,CAClD,WAAW,EAAE,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,EACvE,GAAG,EAAE,CAAC,CAAC;YACL,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,KAAK;YACtB,aAAa,EAAE,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa;YAChD,iBAAiB,EAAE,EAAE;SACtB,CAAC,CAAC,CAAC;QACR,SAAS,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC1C,CAAC;IACD,KAAK,MAAM,SAAS,IAAI,WAAW,CAAC,MAAM,EAAE,EAAE,CAAC;QAC7C,sBAAsB,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC;QACpD,IAAI,uBAAuB,CAAC,SAAS,CAAC,iBAAiB,CAAC,EAAE,CAAC;YACzD,MAAM,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC;QACtC,CAAC;QACD,kBAAkB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACrC,CAAC;IACD,OAAO,kBAAkB,CAAC;AAC5B,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../../core/platform/platform.js';\nimport type * as Types from '../types/types.js';\n\nimport {sortTraceEventsInPlace} from './Trace.js';\nimport {canBuildTreesFromEvents, treify} from './TreeHelpers.js';\n\nexport function buildTrackDataFromExtensionEntries(\n    extensionEntries: Types.Extensions.SyntheticExtensionFlameChartEntry[],\n    extensionTrackData: Types.Extensions.ExtensionTrackData[]): Types.Extensions.ExtensionTrackData[] {\n  const dataByTrack = new Map<string, Omit<Types.Extensions.ExtensionTrackData, 'tree'|'entryToNode'>>();\n  for (const entry of extensionEntries) {\n    const trackData = Platform.MapUtilities.getWithDefault(\n        dataByTrack, `${entry.args.metadata.extensionName}.${entry.args.track}`,\n        () => ({\n          name: entry.args.track,\n          extensionName: entry.args.metadata.extensionName,\n          flameChartEntries: [],\n        }));\n    trackData.flameChartEntries.push(entry);\n  }\n  for (const trackData of dataByTrack.values()) {\n    sortTraceEventsInPlace(trackData.flameChartEntries);\n    if (canBuildTreesFromEvents(trackData.flameChartEntries)) {\n      treify(trackData.flameChartEntries);\n    }\n    extensionTrackData.push(trackData);\n  }\n  return extensionTrackData;\n}\n"]}