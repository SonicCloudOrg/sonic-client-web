{"version":3,"file":"TreeHelpers.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/helpers/TreeHelpers.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {\n  getEventsIn,\n  makeCompleteEvent,\n  makeProfileCall,\n  prettyPrint,\n} from '../../../testing/TraceHelpers.js';\nimport * as TraceModel from '../trace.js';\n\ndescribe('TreeHelpers', () => {\n  describe('treify', () => {\n    it('can build a hierarchy of events without filters', async () => {\n      /**\n       * |------------- Task A -------------||-- Task E --|\n       *  |-- Task B --||-- Task D --|\n       *   |- Task C -|\n       */\n      const data = [\n        makeCompleteEvent('A', 0, 10),  // 0..10\n        makeCompleteEvent('B', 1, 3),   // 1..4\n        makeCompleteEvent('D', 5, 3),   // 5..8\n        makeCompleteEvent('C', 2, 1),   // 2..3\n        makeCompleteEvent('E', 11, 3),  // 11..14\n      ];\n\n      TraceModel.Helpers.Trace.sortTraceEventsInPlace(data);\n      const {tree} = TraceModel.Helpers.TreeHelpers.treify(data, {filter: {has: () => true}});\n\n      assert.strictEqual(tree.maxDepth, 3, 'Got the correct tree max depth');\n\n      const rootsEvents = [...tree.roots].map(n => n ? n.entry : null);\n      assert.deepEqual(rootsEvents.map(e => e ? {name: e.name, ts: e.ts, dur: e.dur} : null) as unknown[], [\n        {'name': 'A', 'ts': 0, 'dur': 10},\n        {'name': 'E', 'ts': 11, 'dur': 3},\n      ]);\n\n      const nodeA = [...tree.roots].at(0);\n      const nodeE = [...tree.roots].at(1);\n      if (!nodeA || !nodeE) {\n        assert(false, 'Root nodes were not found');\n        return;\n      }\n\n      const childrenOfA = getEventsIn(nodeA.children.values());\n      assert.deepEqual(childrenOfA.map(e => e ? {name: e.name, ts: e.ts, dur: e.dur} : null) as unknown[], [\n        {'name': 'B', 'ts': 1, 'dur': 3},\n        {'name': 'D', 'ts': 5, 'dur': 3},\n      ]);\n\n      const childrenOfE = getEventsIn(nodeE.children.values());\n      assert.deepEqual(childrenOfE, []);\n\n      const nodeB = [...nodeA.children].at(0);\n      const nodeD = [...nodeA.children].at(1);\n      if (!nodeB || !nodeD) {\n        assert(false, 'Child nodes were not found');\n        return;\n      }\n\n      const childrenOfB = getEventsIn(nodeB.children.values());\n      assert.deepEqual(childrenOfB.map(e => e ? {name: e.name, ts: e.ts, dur: e.dur} : null) as unknown[], [\n        {'name': 'C', 'ts': 2, 'dur': 1},\n      ]);\n\n      const childrenOfD = getEventsIn(nodeD.children.values());\n      assert.deepEqual(childrenOfD, []);\n\n      const nodeC = [...nodeB.children].at(0);\n      if (!nodeC) {\n        assert(false, 'Child nodes were not found');\n        return;\n      }\n\n      const childrenOfC = getEventsIn(nodeC.children.values());\n      assert.deepEqual(childrenOfC, []);\n    });\n\n    it('can build a hierarchy of events with filters', async () => {\n      /**\n       * |------------- Task A -------------||-- ?????? --|\n       *  |-- ?????? --||-- Task D --|\n       *   |- ?????? -|\n       */\n      const data = [\n        makeCompleteEvent('A', 0, 10),  // 0..10\n        makeCompleteEvent('B', 1, 3),   // 1..4\n        makeCompleteEvent('D', 5, 3),   // 5..8\n        makeCompleteEvent('C', 2, 1),   // 2..3\n        makeCompleteEvent('E', 11, 3),  // 11..14\n      ];\n\n      TraceModel.Helpers.Trace.sortTraceEventsInPlace(data);\n      const filter = new Set(['A', 'D']);\n      const {tree} = TraceModel.Helpers.TreeHelpers.treify(data, {filter});\n\n      assert.strictEqual(tree.maxDepth, 2, 'Got the correct tree max depth');\n\n      const rootsEvents = [...tree.roots].map(n => n.entry);\n      assert.deepEqual(rootsEvents.map(e => e ? {name: e.name, ts: e.ts, dur: e.dur} : null) as unknown[], [\n        {'name': 'A', 'ts': 0, 'dur': 10},\n      ]);\n\n      const nodeA = [...tree.roots].at(0);\n      if (!nodeA) {\n        assert(false, 'Root nodes were not found');\n        return;\n      }\n\n      const childrenOfA = getEventsIn(nodeA.children.values());\n      assert.deepEqual(childrenOfA.map(e => e ? {name: e.name, ts: e.ts, dur: e.dur} : null) as unknown[], [\n        {'name': 'D', 'ts': 5, 'dur': 3},\n      ]);\n\n      const nodeD = [...nodeA.children].at(0);\n      if (!nodeD) {\n        assert(false, 'Child nodes were not found');\n        return;\n      }\n\n      const childrenOfD = getEventsIn(nodeD.children.values());\n      assert.deepEqual(childrenOfD, []);\n    });\n\n    it('can build a hierarchy of events that start and end close to each other', async () => {\n      /**\n       * |------------- Task A -------------||-- Task E --|\n       * |-- Task B --||-- Task D --|\n       *   |- Task C -|\n       */\n      const data = [\n        makeCompleteEvent('A', 0, 10),  // 0..10\n        makeCompleteEvent('B', 0, 3),   // 0..3 (starts same time as A)\n        makeCompleteEvent('D', 3, 3),   // 3..6 (starts when B finishes)\n        makeCompleteEvent('C', 2, 1),   // 2..3 (finishes when B finishes)\n        makeCompleteEvent('E', 10, 3),  // 10..13 (starts when A finishes)\n      ];\n\n      TraceModel.Helpers.Trace.sortTraceEventsInPlace(data);\n      const {tree} = TraceModel.Helpers.TreeHelpers.treify(data, {filter: {has: () => true}});\n\n      assert.strictEqual(tree.maxDepth, 3, 'Got the correct tree max depth');\n\n      const rootsEvents = [...tree.roots].map(n => n.entry);\n      assert.deepEqual(rootsEvents.map(e => e ? {name: e.name, ts: e.ts, dur: e.dur} : null) as unknown[], [\n        {'name': 'A', 'ts': 0, 'dur': 10},\n        {'name': 'E', 'ts': 10, 'dur': 3},\n      ]);\n\n      const nodeA = [...tree.roots].at(0);\n      const nodeE = [...tree.roots].at(1);\n      if (!nodeA || !nodeE) {\n        assert(false, 'Root nodes were not found');\n        return;\n      }\n\n      const childrenOfA = getEventsIn(nodeA.children.values());\n      assert.deepEqual(childrenOfA.map(e => e ? {name: e.name, ts: e.ts, dur: e.dur} : null) as unknown[], [\n        {'name': 'B', 'ts': 0, 'dur': 3},\n        {'name': 'D', 'ts': 3, 'dur': 3},\n      ]);\n\n      const childrenOfE = getEventsIn(nodeE.children.values());\n      assert.deepEqual(childrenOfE, []);\n\n      const nodeB = [...nodeA.children].at(0);\n      const nodeD = [...nodeA.children].at(1);\n      if (!nodeB || !nodeD) {\n        assert(false, 'Child nodes were not found');\n        return;\n      }\n\n      const childrenOfB = getEventsIn(nodeB.children.values());\n      assert.deepEqual(childrenOfB.map(e => e ? {name: e.name, ts: e.ts, dur: e.dur} : null) as unknown[], [\n        {'name': 'C', 'ts': 2, 'dur': 1},\n      ]);\n\n      const childrenOfD = getEventsIn(nodeD.children.values());\n      assert.deepEqual(childrenOfD, []);\n\n      const nodeC = [...nodeB.children].at(0);\n      if (!nodeC) {\n        assert(false, 'Child nodes were not found');\n        return;\n      }\n\n      const childrenOfC = getEventsIn(nodeC.children.values());\n      assert.deepEqual(childrenOfC, []);\n    });\n\n    it('correctly calculates the total and self times of a hierarchy of events', async () => {\n      /**\n       * |------------- Task A -------------||-- Task E --|\n       * |-- Task B --||-- Task D --|\n       *   |- Task C -|\n       */\n      const data = [\n        makeCompleteEvent('A', 0, 10),  // 0..10\n        makeCompleteEvent('B', 0, 3),   // 0..3 (starts same time as A)\n        makeCompleteEvent('D', 3, 3),   // 3..6 (starts when B finishes)\n        makeCompleteEvent('C', 2, 1),   // 2..3 (finishes when B finishes)\n        makeCompleteEvent('E', 10, 3),  // 10..13 (starts when A finishes)\n      ] as TraceModel.Types.TraceEvents.SyntheticTraceEntry[];\n\n      TraceModel.Helpers.Trace.sortTraceEventsInPlace(data);\n      const {tree} = TraceModel.Helpers.TreeHelpers.treify(data, {filter: {has: () => true}});\n\n      const nodeA = [...tree.roots].at(0);\n      const nodeE = [...tree.roots].at(1);\n      if (!nodeA || !nodeE) {\n        assert(false, 'Root nodes were not found');\n        return;\n      }\n      const taskA = nodeA.entry;\n      const taskE = nodeE.entry;\n      const nodeD = [...nodeA.children].at(1);\n      const nodeB = [...nodeA.children].at(0);\n      if (!nodeB || !nodeD) {\n        assert(false, 'Child nodes were not found');\n        return;\n      }\n      const taskD = nodeD.entry;\n      const taskB = nodeB.entry;\n\n      const nodeC = [...nodeB.children].at(0);\n\n      if (!nodeC) {\n        assert(false, 'Child nodes were not found');\n        return;\n      }\n      const taskC = nodeC.entry;\n\n      const taskCTotalTime = taskC.dur;\n      if (taskCTotalTime === undefined) {\n        assert.fail('Total time for task was not found');\n        return;\n      }\n      assert.strictEqual(taskCTotalTime, TraceModel.Types.Timing.MicroSeconds(1));\n      assert.strictEqual(taskC.selfTime, taskCTotalTime);\n\n      const taskBTotalTime = taskB.dur;\n      if (taskBTotalTime === undefined) {\n        assert.fail('Total time for task was not found');\n        return;\n      }\n      assert.strictEqual(taskBTotalTime, TraceModel.Types.Timing.MicroSeconds(3));\n      assert.strictEqual(taskB.selfTime, TraceModel.Types.Timing.MicroSeconds(taskBTotalTime - taskCTotalTime));\n\n      const taskDTotalTime = taskD.dur;\n      if (taskDTotalTime === undefined) {\n        assert.fail('Total time for task was not found');\n        return;\n      }\n      assert.strictEqual(taskDTotalTime, TraceModel.Types.Timing.MicroSeconds(3));\n      assert.strictEqual(taskD.selfTime, taskDTotalTime);\n\n      const taskATotalTime = taskA.dur;\n      if (taskATotalTime === undefined) {\n        assert.fail('Total time for task was not found');\n        return;\n      }\n      assert.strictEqual(taskATotalTime, TraceModel.Types.Timing.MicroSeconds(10));\n      assert.strictEqual(\n          taskA.selfTime, TraceModel.Types.Timing.MicroSeconds(taskATotalTime - taskBTotalTime - taskDTotalTime));\n\n      const taskETotalTime = taskE.dur;\n      if (taskETotalTime === undefined) {\n        assert.fail('Total time for task was not found');\n        return;\n      }\n      assert.strictEqual(taskETotalTime, TraceModel.Types.Timing.MicroSeconds(3));\n      assert.strictEqual(taskD.selfTime, taskETotalTime);\n    });\n    describe('building hierarchies trace events and profile calls', () => {\n      it('builds a hierarchy from trace events and profile calls', async () => {\n        const evaluateScript = makeCompleteEvent(TraceModel.Types.TraceEvents.KnownEventName.EvaluateScript, 0, 500);\n        const v8Run = makeCompleteEvent('v8.run', 10, 490);\n        const parseFunction = makeCompleteEvent('V8.ParseFunction', 12, 1);\n\n        const traceEvents: TraceModel.Types.TraceEvents.SyntheticTraceEntry[] = [evaluateScript, v8Run, parseFunction];\n\n        const profileCalls = [makeProfileCall('a', 100, 200), makeProfileCall('b', 300, 200)];\n        const allEntries = TraceModel.Helpers.Trace.mergeEventsInOrder(traceEvents, profileCalls);\n        const {tree} = TraceModel.Helpers.TreeHelpers.treify(allEntries, {filter: {has: () => true}});\n        assert.strictEqual(prettyPrint(tree), `\n-EvaluateScript [0.5ms]\n  -v8.run [0.49ms]\n    -V8.ParseFunction [0.001ms]\n    -ProfileCall (a) [0.2ms]\n    -ProfileCall (b) [0.2ms]`);\n      });\n\n      it('builds a hierarchy from only profile calls', async () => {\n        const allEntries = [\n          makeProfileCall('a', 100, 200),\n          makeProfileCall('b', 300, 200),\n          makeProfileCall('c', 300, 200),\n          makeProfileCall('d', 400, 100),\n        ];\n        const {tree} = TraceModel.Helpers.TreeHelpers.treify(allEntries, {filter: {has: () => true}});\n        assert.strictEqual(prettyPrint(tree), `\n-ProfileCall (a) [0.2ms]\n-ProfileCall (b) [0.2ms]\n  -ProfileCall (c) [0.2ms]\n    -ProfileCall (d) [0.1ms]`);\n      });\n    });\n  });\n  describe('walking trees', () => {\n    it('walkEntireTree walks the entire tree and visits all the roots as well as all children', async () => {\n      /**\n       * |------------- Task A -------------||-- Task E --|\n       *  |-- Task B --||-- Task D --|\n       *   |- Task C -|\n       */\n      const data = [\n        makeCompleteEvent('A', 0, 10),  // 0..10\n        makeCompleteEvent('B', 1, 3),   // 1..4\n        makeCompleteEvent('D', 5, 3),   // 5..8\n        makeCompleteEvent('C', 2, 1),   // 2..3\n        makeCompleteEvent('E', 11, 3),  // 11..14\n      ];\n      TraceModel.Helpers.Trace.sortTraceEventsInPlace(data);\n      const {tree, entryToNode} = TraceModel.Helpers.TreeHelpers.treify(data, {filter: {has: () => true}});\n\n      const callOrder: Array<{type: 'START' | 'END', entryName: string}> = [];\n      function onEntryStart(entry: TraceModel.Types.TraceEvents.SyntheticTraceEntry): void {\n        callOrder.push({type: 'START', entryName: entry.name});\n      }\n      function onEntryEnd(entry: TraceModel.Types.TraceEvents.SyntheticTraceEntry): void {\n        callOrder.push({type: 'END', entryName: entry.name});\n      }\n      TraceModel.Helpers.TreeHelpers.walkEntireTree(entryToNode, tree, onEntryStart, onEntryEnd);\n      assert.deepEqual(callOrder, [\n        {type: 'START', entryName: 'A'},\n        {type: 'START', entryName: 'B'},\n        {type: 'START', entryName: 'C'},\n        {type: 'END', entryName: 'C'},\n        {type: 'END', entryName: 'B'},\n        {type: 'START', entryName: 'D'},\n        {type: 'END', entryName: 'D'},\n        {type: 'END', entryName: 'A'},\n        {type: 'START', entryName: 'E'},\n        {type: 'END', entryName: 'E'},\n      ]);\n    });\n\n    it('walkEntireTree can take a trace window and will only run for events in that window', async () => {\n      /**\n       *                | min: 5 - max 10| <<<< custom trace window\n       * |------------- Task A -------------||-- Task E --|\n       *  |-- Task B --||-- Task D --|\n       *   |- Task C -|\n       */\n      const data = [\n        makeCompleteEvent('A', 0, 10),  // 0..10\n        makeCompleteEvent('B', 1, 3),   // 1..4\n        makeCompleteEvent('D', 5, 3),   // 5..8\n        makeCompleteEvent('C', 2, 1),   // 2..3\n        makeCompleteEvent('E', 11, 3),  // 11..14\n      ];\n      TraceModel.Helpers.Trace.sortTraceEventsInPlace(data);\n      const {tree, entryToNode} = TraceModel.Helpers.TreeHelpers.treify(data, {filter: {has: () => true}});\n\n      const callOrder: Array<{type: 'START' | 'END', entryName: string}> = [];\n      function onEntryStart(entry: TraceModel.Types.TraceEvents.SyntheticTraceEntry): void {\n        callOrder.push({type: 'START', entryName: entry.name});\n      }\n      function onEntryEnd(entry: TraceModel.Types.TraceEvents.SyntheticTraceEntry): void {\n        callOrder.push({type: 'END', entryName: entry.name});\n      }\n      TraceModel.Helpers.TreeHelpers.walkEntireTree(entryToNode, tree, onEntryStart, onEntryEnd, {\n        min: TraceModel.Types.Timing.MicroSeconds(5),\n        max: TraceModel.Types.Timing.MicroSeconds(10),\n        range: TraceModel.Types.Timing.MicroSeconds(5),\n      });\n\n      assert.deepEqual(callOrder, [\n        {type: 'START', entryName: 'A'},\n        {type: 'START', entryName: 'D'},\n        {type: 'END', entryName: 'D'},\n        {type: 'END', entryName: 'A'},\n      ]);\n    });\n\n    it('walkTreeFromEntry walks the tree down and then back up and calls onEntryStart and onEntryEnd', async () => {\n      /**\n       * |------------- Task A -------------||-- Task E --|\n       *  |-- Task B --||-- Task D --|\n       *   |- Task C -|\n       */\n      const data = [\n        makeCompleteEvent('A', 0, 10),  // 0..10\n        makeCompleteEvent('B', 1, 3),   // 1..4\n        makeCompleteEvent('D', 5, 3),   // 5..8\n        makeCompleteEvent('C', 2, 1),   // 2..3\n        makeCompleteEvent('E', 11, 3),  // 11..14\n      ];\n      TraceModel.Helpers.Trace.sortTraceEventsInPlace(data);\n      const {tree, entryToNode} = TraceModel.Helpers.TreeHelpers.treify(data, {filter: {has: () => true}});\n\n      const callOrder: Array<{type: 'START' | 'END', entryName: string}> = [];\n      function onEntryStart(entry: TraceModel.Types.TraceEvents.SyntheticTraceEntry): void {\n        callOrder.push({type: 'START', entryName: entry.name});\n      }\n      function onEntryEnd(entry: TraceModel.Types.TraceEvents.SyntheticTraceEntry): void {\n        callOrder.push({type: 'END', entryName: entry.name});\n      }\n      const rootNode = Array.from(tree.roots).at(0);\n      if (!rootNode) {\n        throw new Error('Could not find root node');\n      }\n      assert.strictEqual(rootNode.entry.name, 'A');\n      TraceModel.Helpers.TreeHelpers.walkTreeFromEntry(entryToNode, rootNode.entry, onEntryStart, onEntryEnd);\n      assert.deepEqual(callOrder, [\n        {type: 'START', entryName: 'A'},\n        {type: 'START', entryName: 'B'},\n        {type: 'START', entryName: 'C'},\n        {type: 'END', entryName: 'C'},\n        {type: 'END', entryName: 'B'},\n        {type: 'START', entryName: 'D'},\n        {type: 'END', entryName: 'D'},\n        {type: 'END', entryName: 'A'},\n      ]);\n    });\n  });\n  describe('canBuildTreesFromEvents', () => {\n    it('returns true if no pair of events (e1, e2) exists such that e1 overlaps with e2 without one fully containing the other',\n       () => {\n         const data = [\n           makeCompleteEvent('a', 0, 100),\n           makeCompleteEvent('b', 0, 50),\n           makeCompleteEvent('c', 0, 25),\n           makeCompleteEvent('d', 26, 24),\n           makeCompleteEvent('e', 51, 49),\n           makeCompleteEvent('f', 51, 24),\n           makeCompleteEvent('g', 76, 24),\n         ];\n         assert.isTrue(TraceModel.Helpers.TreeHelpers.canBuildTreesFromEvents(data));\n       });\n    it('returns false if a pair of events (e1, e2) exists such that e1 overlaps with e2 without one fully containing the other',\n       () => {\n         const data = [\n           makeCompleteEvent('a', 0, 100),\n           makeCompleteEvent('b', 0, 50),\n           makeCompleteEvent('c', 0, 25),\n           // d overlaps with b but isn't fully contained by it.\n           makeCompleteEvent('d', 26, 50),\n           makeCompleteEvent('e', 51, 49),\n           makeCompleteEvent('f', 51, 24),\n           makeCompleteEvent('g', 76, 24),\n         ];\n         assert.isFalse(TraceModel.Helpers.TreeHelpers.canBuildTreesFromEvents(data));\n       });\n  });\n});\n"]}