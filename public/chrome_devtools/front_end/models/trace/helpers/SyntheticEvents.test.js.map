{"version":3,"file":"SyntheticEvents.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/helpers/SyntheticEvents.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\nimport * as TraceModel from '../trace.js';\n\ndescribe('SyntheticEvents', function() {\n  beforeEach(() => {\n    TraceModel.Helpers.SyntheticEvents.SyntheticEventsManager.reset();\n  });\n  afterEach(() => {\n    TraceModel.Helpers.SyntheticEvents.SyntheticEventsManager.reset();\n  });\n  describe('Initialization', function() {\n    it('does not throw when invoking getActiveManager after executing the trace engine', async function() {\n      const events = await TraceLoader.fixtureContents(this, 'basic.json.gz');\n      await TraceLoader.executeTraceEngineOnFileContents(events);\n      assert.doesNotThrow(TraceModel.Helpers.SyntheticEvents.SyntheticEventsManager.getActiveManager);\n    });\n\n    it('returns the last active SyntheticEventsManager with getActiveManager', async function() {\n      const events = await TraceLoader.fixtureContents(this, 'basic.json.gz');\n      await TraceLoader.executeTraceEngineOnFileContents(events);\n      const firstActiveManager = TraceModel.Helpers.SyntheticEvents.SyntheticEventsManager.getActiveManager();\n      await TraceLoader.executeTraceEngineOnFileContents(events);\n      const secondActiveManager = TraceModel.Helpers.SyntheticEvents.SyntheticEventsManager.getActiveManager();\n      assert.notEqual(firstActiveManager, secondActiveManager);\n    });\n    it('returns the SyntheticEventsManager for a given trace index with getManagerForTrace', async function() {\n      const events = await TraceLoader.fixtureContents(this, 'basic.json.gz');\n      await TraceLoader.executeTraceEngineOnFileContents(events);\n      const firstActiveManager = TraceModel.Helpers.SyntheticEvents.SyntheticEventsManager.getActiveManager();\n      await TraceLoader.executeTraceEngineOnFileContents(events);\n      const testActiveManager = TraceModel.Helpers.SyntheticEvents.SyntheticEventsManager.getManagerForTrace(0);\n      assert.strictEqual(testActiveManager, firstActiveManager);\n    });\n  });\n\n  describe('SyntheticBasedEvent registration', () => {\n    it('stores synthetic based events at the same index as their corresponding raw event in the source array',\n       async function() {\n         const contents = await TraceLoader.fixtureContents(this, 'web-dev.json.gz');\n         const rawEvents = 'traceEvents' in contents ?\n             contents.traceEvents as TraceModel.Types.TraceEvents.TraceEventData[] :\n             contents;\n         const {traceParsedData} = await TraceLoader.executeTraceEngineOnFileContents(rawEvents);\n         const allSyntheticEvents = [\n           ...traceParsedData.Animations.animations,\n           ...traceParsedData.NetworkRequests.byTime,\n           ...traceParsedData.Screenshots,\n         ];\n         const syntheticEventsManager = TraceModel.Helpers.SyntheticEvents.SyntheticEventsManager.getActiveManager();\n         for (const syntheticEvent of allSyntheticEvents) {\n           const rawEventIndex = rawEvents.indexOf(syntheticEvent.rawSourceEvent);\n           // Test synthetic events are stored in the correct position.\n           assert.strictEqual(syntheticEventsManager.syntheticEventForRawEventIndex(rawEventIndex), syntheticEvent);\n         }\n         const allSyntheticEventsInManagerCount = syntheticEventsManager.getSyntheticTraceEvents().reduce(\n             (count, event) => event !== undefined ? (count + 1) : 0, 0);\n         // Test synthetic events are stored only once.\n         assert.strictEqual(allSyntheticEventsInManagerCount, allSyntheticEvents.length);\n       });\n  });\n});\n"]}