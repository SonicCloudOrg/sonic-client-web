{"version":3,"file":"SamplesIntegrator.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/helpers/SamplesIntegrator.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAG7B,OAAO,KAAK,UAAU,MAAM,4CAA4C,CAAC;AACzE,OAAO,EAAC,uBAAuB,EAAC,MAAM,wCAAwC,CAAC;AAC/E,OAAO,EAAC,iBAAiB,EAAC,MAAM,kCAAkC,CAAC;AACnE,OAAO,EAAC,WAAW,EAAC,MAAM,iCAAiC,CAAC;AAC5D,OAAO,KAAK,UAAU,MAAM,aAAa,CAAC;AAE1C,uBAAuB,CAAC,mBAAmB,EAAE;IAC3C,MAAM,QAAQ,GAAG,UAAuC,CAAC;IACzD,MAAM,GAAG,GAAG,EAAE,CAAC;IACf,MAAM,UAAU,GAAG,CAAC,CAAC,CAAC;IACtB,MAAM,YAAY,GAAG,CAAC,CAAC,CAAC;IACxB,MAAM,GAAG,GAAG,UAAU,CAAC,KAAK,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IACtD,MAAM,GAAG,GAAG,UAAU,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAErD,0CAA0C;IAC1C,eAAe;IACf,eAAe;IACf,MAAM,eAAe,GAA8B;QACjD,SAAS,EAAE,CAAC;QACZ,OAAO,EAAE,IAAI;QACb,KAAK,EAAE;YACL;gBACE,EAAE,EAAE,CAAC;gBACL,QAAQ,EAAE,CAAC;gBACX,SAAS,EAAE,EAAC,YAAY,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,EAAE,UAAU,EAAE,YAAY,EAAC;gBAC5E,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;aACjB;YACD,EAAC,EAAE,EAAE,CAAC,EAAE,SAAS,EAAE,EAAC,YAAY,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE,UAAU,EAAE,YAAY,EAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC,EAAC;YAC/F,EAAC,EAAE,EAAE,CAAC,EAAE,SAAS,EAAE,EAAC,YAAY,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE,UAAU,EAAE,YAAY,EAAC,EAAC;SACjF;QACD,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACrB,UAAU,EAAE,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;KACnC,CAAC;IAEF,MAAM,kBAAkB,GAAG,IAAI,UAAU,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,eAAe,CAAC,CAAC;IACnG,MAAM,UAAU,GAAG,UAAU,CAAC,KAAK,CAAC,WAAW,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC;IAE7E,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACvC,EAAE,CAAC,2DAA2D,EAAE,GAAG,EAAE;YACnE,MAAM,UAAU,GACZ,IAAI,UAAU,CAAC,OAAO,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,kBAAkB,EAAE,UAAU,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YACzG,MAAM,KAAK,GAAG,UAAU,CAAC,uBAAuB,EAAE,CAAC;YACnD,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,eAAe,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YAClE,IAAI,gBAAgB,GAAG,CAAC,CAAC;YACzB,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,YAAY,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;YACjF,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBACtC,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACtB,gBAAgB,IAAI,eAAe,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;gBACzD,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;gBAChC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;gBAChC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,EAAE,gBAAgB,CAAC,CAAC;gBAE9C,mEAAmE;gBACnE,UAAU;gBACV,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;gBAC/C,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;gBACxC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAChC,CAAC;QACH,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,mDAAmD,EAAE,GAAG,EAAE;YAC3D,MAAM,MAAM,GAAG;gBACb,GAAG,UAAU,CAAC,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE;aAC7C,CAAC;YACF,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC;YACxB,MAAM,CAAC,WAAW,CACd,UAAU,CAAC,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,SAAS,EAAE,KAAK,EAAE,sCAAsC,CAAC,CAAC;YAExG,MAAM,UAAU,GACZ,IAAI,UAAU,CAAC,OAAO,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,kBAAkB,EAAE,UAAU,EAAE,GAAG,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;YACjH,UAAU,CAAC,uBAAuB,EAAE,CAAC;YACrC,MAAM,cAAc,GAAG,UAAU,CAAC,cAAc,CAAC;YAEjD,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;YAC9C,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;YAC9C,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;YAC9C,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;YAE9C,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;YAE7C,MAAM,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;YAC/F,MAAM,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;YAC/F,MAAM,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;YACpG,MAAM,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;QACtG,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;QACjC,EAAE,CAAC,6EAA6E,EAAE,KAAK;YACrF,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC,WAAW,CAAC,IAAI,EAAE,+BAA+B,CAAC,CAAC;YAClF,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC;YACjC,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YAC1D,MAAM,CAAC,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC,GAAG,WAAW,CAAC,iBAAiB,CAAC,OAAO,EAAE,CAAC;YACzE,MAAM,CAAC,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC,GAAG,eAAe,CAAC,OAAO,EAAE,CAAC;YAC1D,MAAM,aAAa,GAAG,cAAc,CAAC,aAAa,CAAC;YACnD,MAAM,iBAAiB,GACnB,IAAI,UAAU,CAAC,OAAO,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,aAAa,EAAE,UAAU,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YACpG,MAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;YAC1G,IAAI,CAAC,WAAW,EAAE,CAAC;gBACjB,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;YAC/D,CAAC;YACD,MAAM,gBAAgB,GAAG,iBAAiB,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;YAC1E,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yDAAyD,EAAE,GAAG,EAAE;YACjE,uDAAuD;YACvD,oBAAoB;YACpB,wBAAwB;YACxB,wBAAwB;YACxB,wBAAwB;YACxB,MAAM,UAAU,GACZ,IAAI,UAAU,CAAC,OAAO,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,kBAAkB,EAAE,UAAU,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YACzG,MAAM,SAAS,GAAG,iBAAiB,gFAA2D,CAAC,EAAE,GAAG,CAAC,CAAC;YACtG,MAAM,WAAW,GAAG,CAAC,SAAS,CAAC,CAAC;YAChC,MAAM,gBAAgB,GAAG,UAAU,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;YACnE,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC/C,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;YACpE,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;YAChD,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YACjD,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;YACpE,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;YAChD,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2DAA2D,EAAE,GAAG,EAAE;YACnE,MAAM,UAAU,GACZ,IAAI,UAAU,CAAC,OAAO,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,kBAAkB,EAAE,UAAU,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YACzG,MAAM,WAAW,GAAsD,EAAE,CAAC;YAC1E,MAAM,gBAAgB,GAAG,UAAU,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;YACnE,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC/C,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;YACpE,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;YAChD,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YACjD,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;YACpE,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;YAChD,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iEAAiE,EAAE,GAAG,EAAE;YACzE,0CAA0C;YAC1C,YAAY;YACZ,MAAM,UAAU,GAA8B;gBAC5C,SAAS,EAAE,CAAC;gBACZ,OAAO,EAAE,IAAI;gBACb,KAAK,EAAE;oBACL;wBACE,EAAE,EAAE,CAAC;wBACL,QAAQ,EAAE,CAAC;wBACX,SAAS,EAAE,EAAC,YAAY,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,EAAE,UAAU,EAAE,YAAY,EAAC;wBAC5E,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;qBACjB;oBACD,EAAC,EAAE,EAAE,CAAC,EAAE,SAAS,EAAE,EAAC,YAAY,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE,UAAU,EAAE,YAAY,EAAC,EAAC;oBAChF,EAAC,EAAE,EAAE,CAAC,EAAE,SAAS,EAAE,EAAC,YAAY,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE,UAAU,EAAE,YAAY,EAAC,EAAC;iBACjF;gBACD,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBACrB,UAAU,EAAE,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;aACnC,CAAC;YAEF,uDAAuD;YACvD,oBAAoB;YACpB,iCAAiC;YACjC,iCAAiC;YACjC,MAAM,aAAa,GAAG,IAAI,UAAU,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;YACzF,MAAM,UAAU,GACZ,IAAI,UAAU,CAAC,OAAO,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,aAAa,EAAE,UAAU,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YACpG,MAAM,SAAS,GAAG,iBAAiB,gFAA2D,GAAG,EAAE,GAAG,CAAC,CAAC;YACxG,MAAM,WAAW,GAAG,CAAC,SAAS,CAAC,CAAC;YAChC,MAAM,gBAAgB,GAAG,UAAU,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;YACnE,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC/C,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;YACpE,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;YAChD,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YACjD,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;YACpE,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;YAChD,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,iHAAiH;QACjH,4FAA4F;QAC5F,EAAE,CAAC,2DAA2D,EAAE,GAAG,EAAE;YACnE,0CAA0C;YAC1C,YAAY;YACZ,MAAM,UAAU,GAA8B;gBAC5C,SAAS,EAAE,CAAC;gBACZ,OAAO,EAAE,IAAI;gBACb,KAAK,EAAE;oBACL;wBACE,EAAE,EAAE,CAAC;wBACL,QAAQ,EAAE,CAAC;wBACX,SAAS,EAAE,EAAC,YAAY,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,EAAE,UAAU,EAAE,YAAY,EAAC;wBAC5E,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;qBACjB;oBACD,EAAC,EAAE,EAAE,CAAC,EAAE,SAAS,EAAE,EAAC,YAAY,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE,UAAU,EAAE,YAAY,EAAC,EAAC;oBAChF,EAAC,EAAE,EAAE,CAAC,EAAE,SAAS,EAAE,EAAC,YAAY,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE,UAAU,EAAE,YAAY,EAAC,EAAC;iBACjF;gBACD,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBACrB,UAAU,EAAE,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;aACnC,CAAC;YAEF,uDAAuD;YACvD,oBAAoB;YACpB,sDAAsD;YACtD,sDAAsD;YACtD,sDAAsD;YAEtD,MAAM,aAAa,GAAG,IAAI,UAAU,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;YACzF,MAAM,UAAU,GACZ,IAAI,UAAU,CAAC,OAAO,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,aAAa,EAAE,UAAU,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YACpG,MAAM,cAAc,GAAG,iBAAiB,oFAA6D,CAAC,EAAE,GAAG,CAAC,CAAC;YAC7G,MAAM,KAAK,GAAG,iBAAiB,CAAC,QAAQ,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC;YACnD,MAAM,aAAa,GAAG,iBAAiB,CAAC,kBAAkB,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;YAEnE,MAAM,WAAW,GAAG,CAAC,cAAc,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;YAC3D,MAAM,gBAAgB,GAAG,UAAU,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;YACnE,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC/C,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;YACpE,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;YAChD,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YACjD,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;YACpE,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;YAChD,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,yEAAyE,EAAE,GAAG,EAAE;YACjF,0CAA0C;YAC1C,eAAe;YACf,eAAe;YACf,MAAM,UAAU,GAA8B;gBAC5C,SAAS,EAAE,CAAC;gBACZ,OAAO,EAAE,IAAI;gBACb,KAAK,EAAE;oBACL;wBACE,EAAE,EAAE,CAAC;wBACL,QAAQ,EAAE,CAAC;wBACX,SAAS,EAAE,EAAC,YAAY,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,EAAE,UAAU,EAAE,YAAY,EAAC;wBAC5E,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;qBACjB;oBACD,EAAC,EAAE,EAAE,CAAC,EAAE,SAAS,EAAE,EAAC,YAAY,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE,UAAU,EAAE,YAAY,EAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC,EAAC;oBAC/F,EAAC,EAAE,EAAE,CAAC,EAAE,SAAS,EAAE,EAAC,YAAY,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE,UAAU,EAAE,YAAY,EAAC,EAAC;iBACjF;gBACD,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBACrB,UAAU,EAAE,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC;aAClC,CAAC;YAEF,uDAAuD;YACvD,oBAAoB;YACpB,+DAA+D;YAC/D,+DAA+D;YAC/D,6DAA6D;YAC7D,4DAA4D;YAC5D,4DAA4D;YAC5D,MAAM,OAAO,GAAG,iBAAiB,sEAAsD,CAAC,EAAE,GAAG,CAAC,CAAC;YAC/F,MAAM,cAAc,GAAG,iBAAiB,oFAA6D,CAAC,EAAE,GAAG,CAAC,CAAC;YAC7G,MAAM,aAAa,GAAG,iBAAiB,kFAA4D,EAAE,EAAE,GAAG,CAAC,CAAC;YAC5G,MAAM,WAAW,GAAG,CAAC,OAAO,EAAE,cAAc,EAAE,aAAa,CAAC,CAAC;YAC7D,MAAM,aAAa,GAAG,IAAI,UAAU,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;YACzF,MAAM,UAAU,GACZ,IAAI,UAAU,CAAC,OAAO,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,aAAa,EAAE,UAAU,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YACpG,MAAM,gBAAgB,GAAG,UAAU,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;YAEnE,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC/C,MAAM,kBAAkB,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,YAAY,KAAK,GAAG,CAAC,CAAC;YAC1F,MAAM,CAAC,WAAW,CAAC,kBAAkB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACjD,MAAM,kBAAkB,GAAG,EAAE,CAAC;YAC9B,MAAM,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;YACjD,yDAAyD;YACzD,+BAA+B;YAC/B,MAAM,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,aAAa,CAAC,EAAE,GAAG,kBAAkB,CAAC,CAAC;YACrF,MAAM,kBAAkB,GAAG,EAAE,CAAC;YAC9B,MAAM,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,kBAAkB,CAAC,CAAC;YACjE,MAAM,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,aAAa,CAAC,EAAE,GAAG,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,kBAAkB,CAAC,CAAC;QAClH,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,4EAA4E,EAAE,KAAK;YACpF,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC,WAAW,CAAC,IAAI,EAAE,+BAA+B,CAAC,CAAC;YAClF,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC;YACjC,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YAC1D,MAAM,CAAC,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC,GAAG,WAAW,CAAC,iBAAiB,CAAC,OAAO,EAAE,CAAC;YACzE,MAAM,CAAC,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC,GAAG,eAAe,CAAC,OAAO,EAAE,CAAC;YAC1D,MAAM,aAAa,GAAG,cAAc,CAAC,aAAa,CAAC;YACnD,MAAM,iBAAiB,GACnB,IAAI,UAAU,CAAC,OAAO,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,aAAa,EAAE,UAAU,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YACpG,MAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;YAC1G,IAAI,CAAC,WAAW,EAAE,CAAC;gBACjB,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;YAC/D,CAAC;YACD,MAAM,QAAQ,GAAG,aAAa,CAAC,IAAI,CAAC;YACpC,MAAM,WAAW,GAAG,aAAa,CAAC,WAAW,CAAC;YAC9C,MAAM,QAAQ,GAAG,aAAa,CAAC,QAAQ,CAAC;YACxC,MAAM,MAAM,GAAG,aAAa,CAAC,MAAM,CAAC;YACpC,IAAI,WAAW,KAAK,SAAS,IAAI,QAAQ,KAAK,SAAS,IAAI,MAAM,KAAK,SAAS,EAAE,CAAC;gBAChF,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;YAC7D,CAAC;YACD,MAAM,gBAAgB,GAAG,iBAAiB,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;YAE1E,MAAM,aAAa,GAAG,gBAAgB,CAAC,MAAM,CACzC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,QAAQ,CAAC,EAAE,IAAI,CAAC,CAAC,MAAM,KAAK,QAAQ,CAAC,EAAE,IAAI,CAAC,CAAC,MAAM,KAAK,WAAW,CAAC,EAAE;gBACpF,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,EAAE,CAAC,CAAC;YAChC,MAAM,CAAC,WAAW,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Protocol from '../../../generated/protocol.js';\nimport * as CPUProfile from '../../../models/cpu_profile/cpu_profile.js';\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport {makeCompleteEvent} from '../../../testing/TraceHelpers.js';\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\nimport * as TraceModel from '../trace.js';\n\ndescribeWithEnvironment('SamplesIntegrator', function() {\n  const scriptId = 'Peperoni' as Protocol.Runtime.ScriptId;\n  const url = '';\n  const lineNumber = -1;\n  const columnNumber = -1;\n  const pid = TraceModel.Types.TraceEvents.ProcessID(0);\n  const tid = TraceModel.Types.TraceEvents.ThreadID(0);\n\n  // Profile contains the following samples:\n  // |a||a||a||a|\n  //       |b||b|\n  const basicCDPProfile: Protocol.Profiler.Profile = {\n    startTime: 0,\n    endTime: 3000,\n    nodes: [\n      {\n        id: 1,\n        hitCount: 0,\n        callFrame: {functionName: '(root)', scriptId, url, lineNumber, columnNumber},\n        children: [2, 3],\n      },\n      {id: 2, callFrame: {functionName: 'a', scriptId, url, lineNumber, columnNumber}, children: [3]},\n      {id: 3, callFrame: {functionName: 'b', scriptId, url, lineNumber, columnNumber}},\n    ],\n    samples: [2, 2, 3, 3],\n    timeDeltas: new Array(4).fill(100),\n  };\n\n  const parsedBasicProfile = new CPUProfile.CPUProfileDataModel.CPUProfileDataModel(basicCDPProfile);\n  const PROFILE_ID = TraceModel.Types.TraceEvents.ProfileID('fake-profile-id');\n\n  describe('callsFromProfileSamples', () => {\n    it('generates empty profile calls from a profile with samples', () => {\n      const integrator =\n          new TraceModel.Helpers.SamplesIntegrator.SamplesIntegrator(parsedBasicProfile, PROFILE_ID, pid, tid);\n      const calls = integrator.callsFromProfileSamples();\n      assert.strictEqual(calls.length, basicCDPProfile.samples?.length);\n      let currentTimestamp = 0;\n      assert.deepEqual(calls.map(c => c.callFrame.functionName), ['a', 'a', 'b', 'b']);\n      for (let i = 0; i < calls.length; i++) {\n        const call = calls[i];\n        currentTimestamp += basicCDPProfile.timeDeltas?.[i] || 0;\n        assert.strictEqual(call.dur, 0);\n        assert.strictEqual(call.dur, 0);\n        assert.strictEqual(call.ts, currentTimestamp);\n\n        // Ensure each ProfileCall has been \"linked\" to the Profile and the\n        // sample.\n        assert.strictEqual(call.profileId, PROFILE_ID);\n        assert.strictEqual(call.sampleIndex, i);\n        assert.isDefined(call.nodeId);\n      }\n    });\n    it('generates JSSamples from samples under debug mode', () => {\n      const config = {\n        ...TraceModel.Types.Configuration.defaults(),\n      };\n      config.debugMode = true;\n      assert.strictEqual(\n          TraceModel.Types.Configuration.defaults().debugMode, false, 'Default config should not be mutable');\n\n      const integrator =\n          new TraceModel.Helpers.SamplesIntegrator.SamplesIntegrator(parsedBasicProfile, PROFILE_ID, pid, tid, config);\n      integrator.callsFromProfileSamples();\n      const jsSampleEvents = integrator.jsSampleEvents;\n\n      assert.strictEqual(jsSampleEvents[0].ts, 100);\n      assert.strictEqual(jsSampleEvents[1].ts, 200);\n      assert.strictEqual(jsSampleEvents[2].ts, 300);\n      assert.strictEqual(jsSampleEvents[3].ts, 400);\n\n      assert.strictEqual(jsSampleEvents[0].dur, 0);\n      assert.strictEqual(jsSampleEvents[1].dur, 0);\n      assert.strictEqual(jsSampleEvents[2].dur, 0);\n      assert.strictEqual(jsSampleEvents[3].dur, 0);\n\n      assert.deepStrictEqual(jsSampleEvents[0].args.data.stackTrace.map(f => f.functionName), ['a']);\n      assert.deepStrictEqual(jsSampleEvents[1].args.data.stackTrace.map(f => f.functionName), ['a']);\n      assert.deepStrictEqual(jsSampleEvents[2].args.data.stackTrace.map(f => f.functionName), ['a', 'b']);\n      assert.deepStrictEqual(jsSampleEvents[3].args.data.stackTrace.map(f => f.functionName), ['a', 'b']);\n    });\n  });\n\n  describe('buildProfileCalls', () => {\n    it('generates profile calls using trace events and JS samples from a trace file', async function() {\n      const data = await TraceLoader.traceEngine(this, 'recursive-blocking-js.json.gz');\n      const samplesData = data.Samples;\n      assert.strictEqual(samplesData.profilesInProcess.size, 1);\n      const [[pid, profileByThread]] = samplesData.profilesInProcess.entries();\n      const [[tid, cpuProfileData]] = profileByThread.entries();\n      const parsedProfile = cpuProfileData.parsedProfile;\n      const samplesIntegrator =\n          new TraceModel.Helpers.SamplesIntegrator.SamplesIntegrator(parsedProfile, PROFILE_ID, pid, tid);\n      const traceEvents = data.Renderer.allTraceEntries.filter(event => event.pid === pid && event.tid === tid);\n      if (!traceEvents) {\n        throw new Error('Trace events were unexpectedly not found.');\n      }\n      const constructedCalls = samplesIntegrator.buildProfileCalls(traceEvents);\n      assert.strictEqual(constructedCalls.length, 5131);\n    });\n\n    it('creates JS profile calls with a top-level V8 invocation', () => {\n      // After integrating with trace events, the flame chart\n      // should look like:\n      // |----Trace Event----|\n      //           |----a----|\n      //                 |-b-|\n      const integrator =\n          new TraceModel.Helpers.SamplesIntegrator.SamplesIntegrator(parsedBasicProfile, PROFILE_ID, pid, tid);\n      const callEvent = makeCompleteEvent(TraceModel.Types.TraceEvents.KnownEventName.FunctionCall, 0, 500);\n      const traceEvents = [callEvent];\n      const constructedCalls = integrator.buildProfileCalls(traceEvents);\n      assert.strictEqual(constructedCalls.length, 2);\n      assert.strictEqual(constructedCalls[0].callFrame.functionName, 'a');\n      assert.strictEqual(constructedCalls[0].ts, 100);\n      assert.strictEqual(constructedCalls[0].dur, 400);\n      assert.strictEqual(constructedCalls[1].callFrame.functionName, 'b');\n      assert.strictEqual(constructedCalls[1].ts, 300);\n      assert.strictEqual(constructedCalls[1].dur, 200);\n    });\n\n    it('creates JS frame events without a top-level V8 invocation', () => {\n      const integrator =\n          new TraceModel.Helpers.SamplesIntegrator.SamplesIntegrator(parsedBasicProfile, PROFILE_ID, pid, tid);\n      const traceEvents: TraceModel.Types.TraceEvents.TraceEventComplete[] = [];\n      const constructedCalls = integrator.buildProfileCalls(traceEvents);\n      assert.strictEqual(constructedCalls.length, 2);\n      assert.strictEqual(constructedCalls[0].callFrame.functionName, 'a');\n      assert.strictEqual(constructedCalls[0].ts, 100);\n      assert.strictEqual(constructedCalls[0].dur, 300);\n      assert.strictEqual(constructedCalls[1].callFrame.functionName, 'b');\n      assert.strictEqual(constructedCalls[1].ts, 300);\n      assert.strictEqual(constructedCalls[1].dur, 100);\n    });\n\n    it('creates JS frame events for mixed with/without top-level events', () => {\n      // Profile contains the following samples:\n      // |a|a|b|b|\n      const cdpProfile: Protocol.Profiler.Profile = {\n        startTime: 0,\n        endTime: 3000,\n        nodes: [\n          {\n            id: 1,\n            hitCount: 0,\n            callFrame: {functionName: '(root)', scriptId, url, lineNumber, columnNumber},\n            children: [2, 3],\n          },\n          {id: 2, callFrame: {functionName: 'a', scriptId, url, lineNumber, columnNumber}},\n          {id: 3, callFrame: {functionName: 'b', scriptId, url, lineNumber, columnNumber}},\n        ],\n        samples: [2, 2, 3, 3],\n        timeDeltas: new Array(4).fill(100),\n      };\n\n      // After integrating with trace events, the flame chart\n      // should look like:\n      //  |----a----| |--Trace Event--|\n      //              |-------b-------|\n      const parsedProfile = new CPUProfile.CPUProfileDataModel.CPUProfileDataModel(cdpProfile);\n      const integrator =\n          new TraceModel.Helpers.SamplesIntegrator.SamplesIntegrator(parsedProfile, PROFILE_ID, pid, tid);\n      const callEvent = makeCompleteEvent(TraceModel.Types.TraceEvents.KnownEventName.FunctionCall, 250, 250);\n      const traceEvents = [callEvent];\n      const constructedCalls = integrator.buildProfileCalls(traceEvents);\n      assert.strictEqual(constructedCalls.length, 2);\n      assert.strictEqual(constructedCalls[0].callFrame.functionName, 'a');\n      assert.strictEqual(constructedCalls[0].ts, 100);\n      assert.strictEqual(constructedCalls[0].dur, 150);\n      assert.strictEqual(constructedCalls[1].callFrame.functionName, 'b');\n      assert.strictEqual(constructedCalls[1].ts, 300);\n      assert.strictEqual(constructedCalls[1].dur, 200);\n    });\n\n    // EvaluateScript and FunctionCall are two obvious \"invocation events\", but there are others (and sometimes none)\n    // We must ensure we get reasonable JSFrames even when the invocation events are unexpected.\n    it('creates JS frame events with v8.run trace event as parent', () => {\n      // Profile contains the following samples:\n      // |a|a|b|b|\n      const cdpProfile: Protocol.Profiler.Profile = {\n        startTime: 0,\n        endTime: 3000,\n        nodes: [\n          {\n            id: 1,\n            hitCount: 0,\n            callFrame: {functionName: '(root)', scriptId, url, lineNumber, columnNumber},\n            children: [2, 3],\n          },\n          {id: 2, callFrame: {functionName: 'a', scriptId, url, lineNumber, columnNumber}},\n          {id: 3, callFrame: {functionName: 'b', scriptId, url, lineNumber, columnNumber}},\n        ],\n        samples: [2, 2, 3, 3],\n        timeDeltas: new Array(4).fill(100),\n      };\n\n      // After integrating with trace events, the flame chart\n      // should look like:\n      //   |----------------EvaluateScript-----------------|\n      //       |-----------------v8.run--------------------|\n      //        |--V8.ParseFuntion--||---a---||-----b------|\n\n      const parsedProfile = new CPUProfile.CPUProfileDataModel.CPUProfileDataModel(cdpProfile);\n      const integrator =\n          new TraceModel.Helpers.SamplesIntegrator.SamplesIntegrator(parsedProfile, PROFILE_ID, pid, tid);\n      const evaluateScript = makeCompleteEvent(TraceModel.Types.TraceEvents.KnownEventName.EvaluateScript, 0, 500);\n      const v8Run = makeCompleteEvent('v8.run', 10, 490);\n      const parseFunction = makeCompleteEvent('V8.ParseFunction', 12, 1);\n\n      const traceEvents = [evaluateScript, v8Run, parseFunction];\n      const constructedCalls = integrator.buildProfileCalls(traceEvents);\n      assert.strictEqual(constructedCalls.length, 2);\n      assert.strictEqual(constructedCalls[0].callFrame.functionName, 'a');\n      assert.strictEqual(constructedCalls[0].ts, 100);\n      assert.strictEqual(constructedCalls[0].dur, 200);\n      assert.strictEqual(constructedCalls[1].callFrame.functionName, 'b');\n      assert.strictEqual(constructedCalls[1].ts, 300);\n      assert.strictEqual(constructedCalls[1].dur, 200);\n    });\n    it('restarts the call frame stack when a new top level event is encountered', () => {\n      // Profile contains the following samples:\n      // |a||a||a||a|\n      //       |b||b|\n      const cdpProfile: Protocol.Profiler.Profile = {\n        startTime: 0,\n        endTime: 3000,\n        nodes: [\n          {\n            id: 1,\n            hitCount: 0,\n            callFrame: {functionName: '(root)', scriptId, url, lineNumber, columnNumber},\n            children: [2, 3],\n          },\n          {id: 2, callFrame: {functionName: 'a', scriptId, url, lineNumber, columnNumber}, children: [3]},\n          {id: 3, callFrame: {functionName: 'b', scriptId, url, lineNumber, columnNumber}},\n        ],\n        samples: [2, 2, 3, 3],\n        timeDeltas: new Array(4).fill(20),\n      };\n\n      // After integrating with trace events, the flame chart\n      // should look like:\n      //   |-------------------------RunTask------------------------|\n      //   |----------------------EvaluateScript--------------------|\n      //              |--------a-------||------RunMicroTasks------|\n      //                                |-----------a------------|\n      //                                |-----------b------------|\n      const runTask = makeCompleteEvent(TraceModel.Types.TraceEvents.KnownEventName.RunTask, 0, 100);\n      const evaluateScript = makeCompleteEvent(TraceModel.Types.TraceEvents.KnownEventName.EvaluateScript, 0, 100);\n      const runMicroTasks = makeCompleteEvent(TraceModel.Types.TraceEvents.KnownEventName.RunMicrotasks, 50, 100);\n      const traceEvents = [runTask, evaluateScript, runMicroTasks];\n      const parsedProfile = new CPUProfile.CPUProfileDataModel.CPUProfileDataModel(cdpProfile);\n      const integrator =\n          new TraceModel.Helpers.SamplesIntegrator.SamplesIntegrator(parsedProfile, PROFILE_ID, pid, tid);\n      const constructedCalls = integrator.buildProfileCalls(traceEvents);\n\n      assert.strictEqual(constructedCalls.length, 3);\n      const framesForFunctionA = constructedCalls.filter(c => c.callFrame.functionName === 'a');\n      assert.strictEqual(framesForFunctionA.length, 2);\n      const expectedATimestamp = 20;\n      assert.strictEqual(framesForFunctionA[0].ts, 20);\n      // First frame for function A should be finished when the\n      // RunMicrotasks event started.\n      assert.strictEqual(framesForFunctionA[0].dur, runMicroTasks.ts - expectedATimestamp);\n      const expectedBTimestamp = 60;\n      assert.strictEqual(framesForFunctionA[1].ts, expectedBTimestamp);\n      assert.strictEqual(framesForFunctionA[1].dur, runMicroTasks.ts + (runMicroTasks.dur || 0) - expectedBTimestamp);\n    });\n    it('skips samples from (program), (idle), (root) and (garbage collector) nodes', async function() {\n      const data = await TraceLoader.traceEngine(this, 'recursive-blocking-js.json.gz');\n      const samplesData = data.Samples;\n      assert.strictEqual(samplesData.profilesInProcess.size, 1);\n      const [[pid, profileByThread]] = samplesData.profilesInProcess.entries();\n      const [[tid, cpuProfileData]] = profileByThread.entries();\n      const parsedProfile = cpuProfileData.parsedProfile;\n      const samplesIntegrator =\n          new TraceModel.Helpers.SamplesIntegrator.SamplesIntegrator(parsedProfile, PROFILE_ID, pid, tid);\n      const traceEvents = data.Renderer.allTraceEntries.filter(event => event.pid === pid && event.tid === tid);\n      if (!traceEvents) {\n        throw new Error('Trace events were unexpectedly not found.');\n      }\n      const rootNode = parsedProfile.root;\n      const programNode = parsedProfile.programNode;\n      const idleNode = parsedProfile.idleNode;\n      const gcNode = parsedProfile.gcNode;\n      if (programNode === undefined || idleNode === undefined || gcNode === undefined) {\n        throw new Error('Could not find program, idle or gc node');\n      }\n      const constructedCalls = samplesIntegrator.buildProfileCalls(traceEvents);\n\n      const filteredNodes = constructedCalls.filter(\n          c => c.nodeId === rootNode.id || c.nodeId === idleNode.id || c.nodeId === programNode.id ||\n              c.nodeId === gcNode.id);\n      assert.strictEqual(filteredNodes.length, 0);\n    });\n  });\n});\n"]}