{"version":3,"file":"Timing.test.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/helpers/Timing.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\nimport * as TraceModel from '../trace.js';\n\nfunction milliToMicro(value: number) {\n  return TraceModel.Types.Timing.MicroSeconds(value * 1000);\n}\n\ndescribeWithEnvironment('Timing helpers', () => {\n  describe('Timing conversions', () => {\n    it('can convert milliseconds to microseconds', () => {\n      const input = TraceModel.Types.Timing.MilliSeconds(1);\n      const expected = TraceModel.Types.Timing.MicroSeconds(1000);\n      assert.strictEqual(TraceModel.Helpers.Timing.millisecondsToMicroseconds(input), expected);\n    });\n\n    it('can convert seconds to milliseconds', () => {\n      const input = TraceModel.Types.Timing.Seconds(1);\n      const expected = TraceModel.Types.Timing.MilliSeconds(1000);\n      assert.strictEqual(TraceModel.Helpers.Timing.secondsToMilliseconds(input), expected);\n    });\n\n    it('can convert seconds to microseconds', () => {\n      const input = TraceModel.Types.Timing.Seconds(1);\n      // 1 Second = 1000 Milliseconds\n      // 1000 Milliseconds = 1,000,000 Microseconds\n      const expected = TraceModel.Types.Timing.MicroSeconds(1_000_000);\n      assert.strictEqual(TraceModel.Helpers.Timing.secondsToMicroseconds(input), expected);\n    });\n\n    it('can convert microSeconds milliseconds', () => {\n      const input = TraceModel.Types.Timing.MicroSeconds(1_000_000);\n      const expected = TraceModel.Types.Timing.MilliSeconds(1_000);\n      assert.strictEqual(TraceModel.Helpers.Timing.microSecondsToMilliseconds(input), expected);\n    });\n  });\n\n  it('eventTimingsMicroSeconds returns the right numbers', async () => {\n    const event = {\n      ts: 10,\n      dur: 5,\n    } as unknown as TraceModel.Types.TraceEvents.TraceEventData;\n    assert.deepEqual(TraceModel.Helpers.Timing.eventTimingsMicroSeconds(event), {\n      startTime: TraceModel.Types.Timing.MicroSeconds(10),\n      endTime: TraceModel.Types.Timing.MicroSeconds(15),\n      duration: TraceModel.Types.Timing.MicroSeconds(5),\n      selfTime: TraceModel.Types.Timing.MicroSeconds(5),\n    });\n  });\n\n  it('eventTimingsMilliSeconds returns the right numbers', async () => {\n    const event = {\n      ts: 10_000,\n      dur: 5_000,\n    } as unknown as TraceModel.Types.TraceEvents.TraceEventData;\n    assert.deepEqual(TraceModel.Helpers.Timing.eventTimingsMilliSeconds(event), {\n      startTime: TraceModel.Types.Timing.MilliSeconds(10),\n      endTime: TraceModel.Types.Timing.MilliSeconds(15),\n      duration: TraceModel.Types.Timing.MilliSeconds(5),\n      selfTime: TraceModel.Types.Timing.MilliSeconds(5),\n    });\n  });\n\n  it('eventTimingsSeconds returns the right numbers', async () => {\n    const event = {\n      ts: 100_000,  // 100k microseconds = 100ms = 0.1second\n      dur: 50_000,  // 50k microseconds = 50ms = 0.05second\n    } as unknown as TraceModel.Types.TraceEvents.TraceEventData;\n    assert.deepEqual(TraceModel.Helpers.Timing.eventTimingsSeconds(event), {\n      startTime: TraceModel.Types.Timing.Seconds(0.1),\n      endTime: TraceModel.Types.Timing.Seconds(0.15),\n      duration: TraceModel.Types.Timing.Seconds(0.05),\n      selfTime: TraceModel.Types.Timing.Seconds(0.05),\n    });\n  });\n\n  describe('timeStampForEventAdjustedByClosestNavigation', () => {\n    it('can use the navigation ID to adjust the time correctly', async function() {\n      const traceParsedData = await TraceLoader.traceEngine(this, 'web-dev.json.gz');\n      const lcpEvent = traceParsedData.PageLoadMetrics.allMarkerEvents.find(event => {\n        // Just one LCP Event so we do not need to worry about ordering and finding the right one.\n        return event.name === 'largestContentfulPaint::Candidate';\n      });\n      if (!lcpEvent) {\n        throw new Error('Could not find LCP event');\n      }\n      // Ensure we are testing the navigationID path!\n      assert.exists(lcpEvent.args.data?.navigationId);\n      const adjustedTime = TraceModel.Helpers.Timing.timeStampForEventAdjustedByClosestNavigation(\n          lcpEvent,\n          traceParsedData.Meta.traceBounds,\n          traceParsedData.Meta.navigationsByNavigationId,\n          traceParsedData.Meta.navigationsByFrameId,\n      );\n\n      const unadjustedTime = TraceModel.Helpers.Timing.microSecondsToMilliseconds(\n          TraceModel.Types.Timing.MicroSeconds(lcpEvent.ts - traceParsedData.Meta.traceBounds.min),\n      );\n      assert.strictEqual(unadjustedTime.toFixed(2), String(130.31));\n\n      // To make the assertion easier to read.\n      const timeAsMS = TraceModel.Helpers.Timing.microSecondsToMilliseconds(adjustedTime);\n      assert.strictEqual(timeAsMS.toFixed(2), String(118.44));\n    });\n\n    it('can use the frame ID to adjust the time correctly', async function() {\n      const traceParsedData = await TraceLoader.traceEngine(this, 'web-dev.json.gz');\n      const dclEvent = traceParsedData.PageLoadMetrics.allMarkerEvents.find(event => {\n        return event.name === 'MarkDOMContent' && event.args.data?.frame === traceParsedData.Meta.mainFrameId;\n      });\n      if (!dclEvent) {\n        throw new Error('Could not find DCL event');\n      }\n      // Ensure we are testing the frameID path!\n      assert.isUndefined(dclEvent.args.data?.navigationId);\n\n      const unadjustedTime = TraceModel.Helpers.Timing.microSecondsToMilliseconds(\n          TraceModel.Types.Timing.MicroSeconds(dclEvent.ts - traceParsedData.Meta.traceBounds.min),\n      );\n      assert.strictEqual(unadjustedTime.toFixed(2), String(190.79));\n      const adjustedTime = TraceModel.Helpers.Timing.timeStampForEventAdjustedByClosestNavigation(\n          dclEvent,\n          traceParsedData.Meta.traceBounds,\n          traceParsedData.Meta.navigationsByNavigationId,\n          traceParsedData.Meta.navigationsByFrameId,\n      );\n\n      // To make the assertion easier to read.\n      const timeAsMS = TraceModel.Helpers.Timing.microSecondsToMilliseconds(adjustedTime);\n      assert.strictEqual(timeAsMS.toFixed(2), String(178.92));\n    });\n  });\n\n  describe('BoundsIncludeTimeRange', () => {\n    const {boundsIncludeTimeRange, traceWindowFromMicroSeconds} = TraceModel.Helpers.Timing;\n\n    it('is false for an event that is outside the LHS of the visible bounds', () => {\n      const bounds = traceWindowFromMicroSeconds(\n          milliToMicro(50),\n          milliToMicro(100),\n      );\n\n      const timeRange = traceWindowFromMicroSeconds(\n          milliToMicro(10),\n          milliToMicro(20),\n      );\n\n      assert.isFalse(boundsIncludeTimeRange({\n        bounds,\n        timeRange,\n      }));\n    });\n\n    it('is false for an event that is outside the RHS of the visible bounds', () => {\n      const bounds = traceWindowFromMicroSeconds(\n          milliToMicro(50),\n          milliToMicro(100),\n      );\n\n      const timeRange = traceWindowFromMicroSeconds(\n          milliToMicro(101),\n          milliToMicro(200),\n      );\n\n      assert.isFalse(boundsIncludeTimeRange({\n        bounds,\n        timeRange,\n      }));\n    });\n\n    it('is true for an event that overlaps the LHS of the bounds', () => {\n      const bounds = traceWindowFromMicroSeconds(\n          milliToMicro(50),\n          milliToMicro(100),\n      );\n\n      const timeRange = traceWindowFromMicroSeconds(\n          milliToMicro(0),\n          milliToMicro(52),\n      );\n\n      assert.isTrue(boundsIncludeTimeRange({\n        bounds,\n        timeRange,\n      }));\n    });\n\n    it('is true for an event that overlaps the RHS of the bounds', () => {\n      const bounds = traceWindowFromMicroSeconds(\n          milliToMicro(50),\n          milliToMicro(100),\n      );\n\n      const timeRange = traceWindowFromMicroSeconds(\n          milliToMicro(99),\n          milliToMicro(101),\n      );\n\n      assert.isTrue(boundsIncludeTimeRange({\n        bounds,\n        timeRange,\n      }));\n    });\n\n    it('is true for an event that is entirely within the bounds', () => {\n      const bounds = traceWindowFromMicroSeconds(\n          milliToMicro(50),\n          milliToMicro(100),\n      );\n\n      const timeRange = traceWindowFromMicroSeconds(\n          milliToMicro(51),\n          milliToMicro(75),\n      );\n\n      assert.isTrue(boundsIncludeTimeRange({\n        bounds,\n        timeRange,\n      }));\n    });\n\n    it('is true for an event that is larger than the bounds', () => {\n      const bounds = traceWindowFromMicroSeconds(\n          milliToMicro(50),\n          milliToMicro(100),\n      );\n\n      const timeRange = traceWindowFromMicroSeconds(\n          milliToMicro(0),\n          milliToMicro(200),\n      );\n\n      assert.isTrue(boundsIncludeTimeRange({\n        bounds,\n        timeRange,\n      }));\n    });\n  });\n});\n"]}