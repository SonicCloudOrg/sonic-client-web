{"version":3,"file":"AutofillManager.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/autofill_manager/AutofillManager.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport * as AutofillManager from './autofill_manager.js';\n\ndescribeWithMockConnection('AutofillManager', () => {\n  let target: SDK.Target.Target;\n  let model: SDK.AutofillModel.AutofillModel;\n  let autofillManager: AutofillManager.AutofillManager.AutofillManager;\n  let showViewStub: sinon.SinonStub;\n\n  beforeEach(() => {\n    target = createTarget();\n    model = target.model(SDK.AutofillModel.AutofillModel)!;\n    showViewStub = sinon.stub(UI.ViewManager.ViewManager.instance(), 'showView').resolves();\n    autofillManager = AutofillManager.AutofillManager.AutofillManager.instance({forceNew: true});\n    Root.Runtime.experiments.enableForTest(Root.Runtime.ExperimentName.AUTOFILL_VIEW);\n  });\n\n  afterEach(() => {\n    showViewStub.restore();\n  });\n\n  describe('emits AddressFormFilled events', () => {\n    const assertAutofillManagerEvent = async (\n        inEvent: Protocol.Autofill.AddressFormFilledEvent,\n        outEvent: AutofillManager.AutofillManager.AddressFormFilledEvent) => {\n      const dispatchedAutofillEvents: AutofillManager.AutofillManager.AddressFormFilledEvent[] = [];\n      autofillManager.addEventListener(\n          AutofillManager.AutofillManager.Events.AddressFormFilled, event => dispatchedAutofillEvents.push(event.data));\n      model.dispatchEventToListeners(\n          SDK.AutofillModel.Events.AddressFormFilled, {autofillModel: model, event: inEvent});\n      await new Promise(resolve => setTimeout(resolve, 0));\n      assert.isTrue(showViewStub.calledOnceWithExactly('autofill-view'));\n      assert.deepStrictEqual(dispatchedAutofillEvents, [outEvent]);\n    };\n\n    it('with a single match', async () => {\n      const filledFields = [\n        {\n          htmlType: 'text',\n          id: 'input1',\n          name: '',\n          value: 'Crocodile',\n          autofillType: 'First name',\n          fillingStrategy: Protocol.Autofill.FillingStrategy.AutofillInferred,\n          fieldId: 1 as Protocol.DOM.BackendNodeId,\n          frameId: '1' as Protocol.Page.FrameId,\n        },\n      ];\n      const inEvent = {\n        addressUi: {\n          addressFields: [\n            {\n              fields: [\n                {name: 'NAME_FULL', value: 'Crocodile Dundee'},\n              ],\n            },\n          ],\n        },\n        filledFields,\n      };\n      const outEvent = {\n        address: 'Crocodile Dundee',\n        filledFields,\n        matches: [{startIndex: 0, endIndex: 9, filledFieldIndex: 0}],\n        autofillModel: model,\n      };\n      await assertAutofillManagerEvent(inEvent, outEvent);\n    });\n\n    it('with multiple matches', async () => {\n      const filledFields = [\n        {\n          htmlType: 'text',\n          id: 'input1',\n          name: '',\n          value: 'Crocodile',\n          autofillType: 'First name',\n          fillingStrategy: Protocol.Autofill.FillingStrategy.AutofillInferred,\n          fieldId: 1 as Protocol.DOM.BackendNodeId,\n          frameId: '1' as Protocol.Page.FrameId,\n        },\n        {\n          htmlType: 'text',\n          id: 'input2',\n          name: '',\n          value: 'Dundee',\n          autofillType: 'Last name',\n          fillingStrategy: Protocol.Autofill.FillingStrategy.AutofillInferred,\n          fieldId: 2 as Protocol.DOM.BackendNodeId,\n          frameId: '1' as Protocol.Page.FrameId,\n        },\n      ];\n      const inEvent = {\n        addressUi: {\n          addressFields: [\n            {\n              fields: [\n                {name: 'NAME_FULL', value: 'Crocodile Dundee'},\n              ],\n            },\n          ],\n        },\n        filledFields,\n      };\n      const outEvent = {\n        address: 'Crocodile Dundee',\n        filledFields,\n        matches: [\n          {startIndex: 0, endIndex: 9, filledFieldIndex: 0},\n          {startIndex: 10, endIndex: 16, filledFieldIndex: 1},\n        ],\n        autofillModel: model,\n      };\n      await assertAutofillManagerEvent(inEvent, outEvent);\n    });\n\n    it('with new line characters and commas', async () => {\n      const filledFields = [\n        {\n          htmlType: 'text',\n          id: 'input1',\n          name: '',\n          value: 'Outback Road 1, Melbourne',\n          autofillType: 'Street address',\n          fillingStrategy: Protocol.Autofill.FillingStrategy.AutofillInferred,\n          fieldId: 1 as Protocol.DOM.BackendNodeId,\n          frameId: '1' as Protocol.Page.FrameId,\n        },\n      ];\n      const inEvent = {\n        addressUi: {\n          addressFields: [\n            {\n              fields: [\n                {name: 'ADDRESS_HOME_STREET_ADDRESS', value: 'Outback Road 1\\nMelbourne'},\n              ],\n            },\n          ],\n        },\n        filledFields,\n      };\n      const outEvent = {\n        address: 'Outback Road 1\\nMelbourne',\n        filledFields,\n        matches: [{startIndex: 0, endIndex: 24, filledFieldIndex: 0}],\n        autofillModel: model,\n      };\n      await assertAutofillManagerEvent(inEvent, outEvent);\n    });\n\n    it('with a comma in the address', async () => {\n      const filledFields = [\n        {\n          htmlType: 'text',\n          id: 'input1',\n          name: '',\n          value: 'Outback Road 1, Melbourne',\n          autofillType: 'Street address',\n          fillingStrategy: Protocol.Autofill.FillingStrategy.AutofillInferred,\n          fieldId: 1 as Protocol.DOM.BackendNodeId,\n          frameId: '1' as Protocol.Page.FrameId,\n        },\n      ];\n      const inEvent = {\n        addressUi: {\n          addressFields: [\n            {\n              fields: [\n                {name: 'ADDRESS_HOME_STREET_ADDRESS', value: 'Outback Road 1, Melbourne'},\n              ],\n            },\n          ],\n        },\n        filledFields,\n      };\n      const outEvent = {\n        address: 'Outback Road 1, Melbourne',\n        filledFields,\n        matches: [{startIndex: 0, endIndex: 25, filledFieldIndex: 0}],\n        autofillModel: model,\n      };\n      await assertAutofillManagerEvent(inEvent, outEvent);\n    });\n\n    it('for phone numbers starting with \"+\"', async () => {\n      const filledFields = [\n        {\n          htmlType: 'text',\n          id: 'input1',\n          name: 'phone',\n          value: '+1234567890',\n          autofillType: 'Phone number',\n          fillingStrategy: Protocol.Autofill.FillingStrategy.AutofillInferred,\n          fieldId: 1 as Protocol.DOM.BackendNodeId,\n          frameId: '1' as Protocol.Page.FrameId,\n        },\n      ];\n      const inEvent = {\n        addressUi: {\n          addressFields: [\n            {\n              fields: [\n                {name: 'PHONE_HOME_WHOLE_NUMBER', value: '+1234567890'},\n              ],\n            },\n          ],\n        },\n        filledFields,\n      };\n      const outEvent = {\n        address: '+1234567890',\n        filledFields,\n        matches: [{startIndex: 0, endIndex: 11, filledFieldIndex: 0}],\n        autofillModel: model,\n      };\n      await assertAutofillManagerEvent(inEvent, outEvent);\n    });\n\n    it('with an empty string as filled field value', async () => {\n      const filledFields = [\n        {\n          htmlType: 'text',\n          id: 'input1',\n          name: 'name',\n          value: 'Crocodile',\n          autofillType: 'First name',\n          fillingStrategy: Protocol.Autofill.FillingStrategy.AutofillInferred,\n          fieldId: 1 as Protocol.DOM.BackendNodeId,\n          frameId: '1' as Protocol.Page.FrameId,\n        },\n        {\n          htmlType: 'text',\n          id: 'input2',\n          name: 'city',\n          value: '',\n          autofillType: 'City',\n          fillingStrategy: Protocol.Autofill.FillingStrategy.AutofillInferred,\n          fieldId: 2 as Protocol.DOM.BackendNodeId,\n          frameId: '1' as Protocol.Page.FrameId,\n        },\n      ];\n      const inEvent = {\n        addressUi: {\n          addressFields: [\n            {\n              fields: [\n                {name: 'NAME_FULL', value: 'Crocodile Dundee'},\n              ],\n            },\n          ],\n        },\n        filledFields,\n      };\n      const outEvent = {\n        address: 'Crocodile Dundee',\n        filledFields,\n        matches: [{startIndex: 0, endIndex: 9, filledFieldIndex: 0}],\n        autofillModel: model,\n      };\n      await assertAutofillManagerEvent(inEvent, outEvent);\n    });\n  });\n});\n"]}