{"version":3,"file":"AutofillManager.js","sourceRoot":"","sources":["../../../../../../front_end/models/autofill_manager/AutofillManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nlet autofillManagerInstance: AutofillManager;\n\nexport class AutofillManager extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  #autoOpenViewSetting: Common.Settings.Setting<boolean>;\n  #address: string = '';\n  #filledFields: Protocol.Autofill.FilledField[] = [];\n  #matches: Match[] = [];\n  #autofillModel: SDK.AutofillModel.AutofillModel|null = null;\n\n  private constructor() {\n    super();\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.AutofillModel.AutofillModel, SDK.AutofillModel.Events.AddressFormFilled, this.#addressFormFilled, this,\n        {scoped: true});\n    this.#autoOpenViewSetting =\n        Common.Settings.Settings.instance().createSetting('auto-open-autofill-view-on-event', true);\n  }\n\n  static instance(opts: {forceNew: boolean|null} = {forceNew: null}): AutofillManager {\n    const {forceNew} = opts;\n    if (!autofillManagerInstance || forceNew) {\n      autofillManagerInstance = new AutofillManager();\n    }\n    return autofillManagerInstance;\n  }\n\n  async #addressFormFilled(\n      {data}: Common.EventTarget\n          .EventTargetEvent<SDK.AutofillModel.EventTypes[SDK.AutofillModel.Events.AddressFormFilled]>): Promise<void> {\n    if (Root.Runtime.experiments.isEnabled(Root.Runtime.ExperimentName.AUTOFILL_VIEW) &&\n        this.#autoOpenViewSetting.get()) {\n      await UI.ViewManager.ViewManager.instance().showView('autofill-view');\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.AutofillReceivedAndTabAutoOpened);\n    } else {\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.AutofillReceived);\n    }\n    this.#autofillModel = data.autofillModel;\n    this.#processAddressFormFilledData(data.event);\n    if (this.#address) {\n      this.dispatchEventToListeners(Events.AddressFormFilled, {\n        address: this.#address,\n        filledFields: this.#filledFields,\n        matches: this.#matches,\n        autofillModel: this.#autofillModel,\n      });\n    }\n  }\n\n  getLastFilledAddressForm(): AddressFormFilledEvent|null {\n    if (!this.#address || !this.#autofillModel) {\n      return null;\n    }\n    return {\n      address: this.#address,\n      filledFields: this.#filledFields,\n      matches: this.#matches,\n      autofillModel: this.#autofillModel,\n    };\n  }\n\n  #processAddressFormFilledData({addressUi, filledFields}: Protocol.Autofill.AddressFormFilledEvent): void {\n    // Transform addressUi into a single (multi-line) string.\n    const concatAddressFields = (addressFields: Protocol.Autofill.AddressFields): string =>\n        addressFields.fields.filter(field => field.value.length).map(field => field.value).join(' ');\n    this.#address = addressUi.addressFields.map(addressFields => concatAddressFields(addressFields))\n                        .filter(str => str.length)\n                        .join('\\n');\n\n    this.#filledFields = filledFields;\n    this.#matches = [];\n\n    // Populate a list of matches by searching in the address string for\n    // occurences of filled field values.\n    for (let i = 0; i < this.#filledFields.length; i++) {\n      if (this.#filledFields[i].value === '') {\n        continue;\n      }\n      // 1) Replace multiple whitespaces with a single space.\n      // 2) Escape special characters.\n      // 3) For ',' or '.' before whitespace, insert the '?' quantifier.\n      const needle = Platform.StringUtilities.escapeForRegExp(this.#filledFields[i].value.replaceAll(/\\s/g, ' '))\n                         .replaceAll(/([.,]+)\\s/g, '$1? ');\n      const matches = this.#address.replaceAll(/\\s/g, ' ').matchAll(new RegExp(needle, 'g'));\n      for (const match of matches) {\n        if (typeof match.index !== 'undefined') {\n          this.#matches.push({startIndex: match.index, endIndex: match.index + match[0].length, filledFieldIndex: i});\n        }\n      }\n    }\n  }\n}\n\n// A Match describes how the value of a filled field corresponds to a substring\n// of address from startIndex to endIndex.\nexport interface Match {\n  startIndex: number;\n  endIndex: number;\n  filledFieldIndex: number;\n}\n\nexport const enum Events {\n  AddressFormFilled = 'AddressFormFilled',\n}\n\nexport interface AddressFormFilledEvent {\n  address: string;\n  filledFields: Protocol.Autofill.FilledField[];\n  matches: Match[];\n  autofillModel: SDK.AutofillModel.AutofillModel;\n}\n\nexport type EventTypes = {\n  [Events.AddressFormFilled]: AddressFormFilledEvent,\n};\n"]}