{"version":3,"file":"Log.test.js","sourceRoot":"","sources":["../../../../../../front_end/models/har/Log.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as HAR from '../har/har.js';\n\ndescribe('HAR.Log', () => {\n  it('blocked time when no response received is returned in milliseconds (crbug.com/1145177)', async () => {\n    const requestId = 'r0' as Protocol.Network.RequestId;\n    const request = SDK.NetworkRequest.NetworkRequest.create(\n        requestId, 'p0.com' as Platform.DevToolsPath.UrlString, Platform.DevToolsPath.EmptyUrlString, null, null, null);\n    const issueTime = new Date(2020, 1, 3).getTime() / 1000;\n    request.setIssueTime(issueTime, issueTime);\n    request.endTime = issueTime + 5;\n    const entry = await HAR.Log.Entry.build(request);\n\n    assert.strictEqual(entry.timings.blocked, 5000, 'HARLog entry\\'s blocked time is incorrect');\n  });\n\n  it('_initiator.requestId is exported', async () => {\n    const requestId = 'r0' as Protocol.Network.RequestId;\n    const request = SDK.NetworkRequest.NetworkRequest.create(\n        requestId, 'p0.com' as Platform.DevToolsPath.UrlString, Platform.DevToolsPath.EmptyUrlString, null, null,\n        {requestId, type: Protocol.Network.InitiatorType.Script});\n    const entry = await HAR.Log.Entry.build(request);\n\n    assert.strictEqual(entry._initiator?.requestId, requestId);\n  });\n\n  it('Exports Service worker info', async () => {\n    const requestId = 'r0' as Protocol.Network.RequestId;\n    const request = SDK.NetworkRequest.NetworkRequest.create(\n        requestId, 'p0.com' as Platform.DevToolsPath.UrlString, Platform.DevToolsPath.EmptyUrlString, null, null,\n        {requestId, type: Protocol.Network.InitiatorType.Script});\n\n    const cacheName = 'v1';\n    request.fetchedViaServiceWorker = true;\n    request.setResponseCacheStorageCacheName(cacheName);\n    request.setServiceWorkerResponseSource(Protocol.Network.ServiceWorkerResponseSource.CacheStorage);\n\n    const timingInfo: Protocol.Network.ResourceTiming = {\n      requestTime: 500,\n      proxyStart: 0,\n      proxyEnd: 0,\n      dnsStart: 0,\n      dnsEnd: 0,\n      connectStart: 0,\n      connectEnd: 0,\n      sslStart: 0,\n      sslEnd: 0,\n      workerStart: 500,\n      workerReady: 1000,\n      workerFetchStart: 1050,\n      workerRespondWithSettled: 3000,\n      sendStart: 0,\n      sendEnd: 0,\n      pushStart: 0,\n      pushEnd: 0,\n      receiveHeadersStart: 0,\n      receiveHeadersEnd: 0,\n    };\n    request.timing = timingInfo;\n\n    const entry = await HAR.Log.Entry.build(request);\n\n    assert.strictEqual(entry.response._fetchedViaServiceWorker, true);\n    assert.strictEqual(entry.response._responseCacheStorageCacheName, cacheName);\n    assert.strictEqual(\n        entry.response._serviceWorkerResponseSource, Protocol.Network.ServiceWorkerResponseSource.CacheStorage);\n\n    assert.strictEqual(entry.timings._workerStart, timingInfo.workerStart);\n    assert.strictEqual(entry.timings._workerReady, timingInfo.workerReady);\n    assert.strictEqual(entry.timings._workerFetchStart, timingInfo.workerFetchStart);\n    assert.strictEqual(entry.timings._workerRespondWithSettled, timingInfo.workerRespondWithSettled);\n  });\n});\n"]}