{"version":3,"file":"InspectElementModeController.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/elements/InspectElementModeController.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,GAAG,MAAM,uBAAuB,CAAC;AAE7C,OAAO,EACL,YAAY,EACZ,mBAAmB,EACnB,gBAAgB,GACjB,MAAM,qCAAqC,CAAC;AAC7C,OAAO,EACL,0BAA0B,EAC1B,gCAAgC,GACjC,MAAM,iCAAiC,CAAC;AACzC,OAAO,EACL,mBAAmB,GACpB,MAAM,sCAAsC,CAAC;AAE9C,OAAO,KAAK,QAAQ,MAAM,eAAe,CAAC;AAE1C,MAAM,OAAO,GAAG,CAAwB,CAAC;AAEzC,0BAA0B,CAAC,8BAA8B,EAAE,GAAG,EAAE;IAC9D,IAAI,aAAgC,CAAC;IACrC,IAAI,gBAAmC,CAAC;IACxC,IAAI,gBAAmC,CAAC;IACxC,IAAI,mBAAsC,CAAC;IAC3C,IAAI,cAAkF,CAAC;IAEvF,SAAS,YAAY,CAAC,MAAyB;QAC7C,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;QAC1D,OAAO,KAAM,CAAC,IAAI,mFAAkD,CAAC;IACvE,CAAC;IAED,SAAS,gBAAgB,CAAC,MAAyB;QACjD,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;QAC1D,KAAM,CAAC,gBAAgB,oFAEnB,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,8CAA8C,CAAC,CAAC,CAAC;IACzE,CAAC;IAED,UAAU,CAAC,GAAG,EAAE;QACd,mBAAmB,CAAC,KAAK,CAAC,CAAC;QAC3B,gBAAgB,EAAE,CAAC;QACnB,mBAAmB,CAAC,CAAC,gCAAgC,CAAC,CAAC,CAAC;QACxD,MAAM,SAAS,GAAG,YAAY,CAAC,EAAC,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAC,CAAC,CAAC;QAC5D,aAAa,GAAG,YAAY,CAAC,EAAC,YAAY,EAAE,SAAS,EAAC,CAAC,CAAC;QACxD,gBAAgB,GAAG,YAAY,CAAC,EAAC,YAAY,EAAE,aAAa,EAAC,CAAC,CAAC;QAC/D,gBAAgB,GAAG,YAAY,CAAC,EAAC,YAAY,EAAE,SAAS,EAAC,CAAC,CAAC;QAC3D,mBAAmB,GAAG,YAAY,CAAC,EAAC,YAAY,EAAE,gBAAgB,EAAC,CAAC,CAAC;QACrE,gBAAgB,CAAC,gBAAgB,CAAC,CAAC;QACnC,gBAAgB,CAAC,mBAAmB,CAAC,CAAC;QACtC,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;QACzE,cAAc,GAAG,IAAI,QAAQ,CAAC,4BAA4B,CAAC,4BAA4B,EAAE,CAAC;QAC1F,gCAAgC,CAAC,iBAAiB,EAAE,GAAG,EAAE,CAAC,CAAC,EAAC,IAAI,EAAE,EAAC,MAAM,EAAE,OAAO,EAAC,EAAC,CAAC,CAAC,CAAC;IACzF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;QACrD,KAAK,MAAM,MAAM,IAAI,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,OAAO,EAAE,EAAE,CAAC;YAC1E,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,YAAY,CAAC,EAAE,kBAAkB,EAAE,CAAC,CAAC,CAAC;QAC7F,CAAC;QAED,cAAc,CAAC,iBAAiB,EAAE,CAAC;QACnC,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,aAAa,CAAC,EAAE,YAAY,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;QAEjF,MAAM,uBAAuB,GAAG,YAAY,CAAC,EAAC,YAAY,EAAE,aAAa,EAAC,CAAC,CAAC;QAC5E,MAAM,YAAY,CAAC,uBAAuB,CAAC,CAAC;QAE5C,MAAM,0BAA0B,GAAG,YAAY,CAAC,EAAC,YAAY,EAAE,aAAa,EAAC,CAAC,CAAC;QAC/E,gBAAgB,CAAC,0BAA0B,CAAC,CAAC;QAE7C,IAAI,YAAY,GAAG,KAAK,CAAC;QACzB,MAAM,WAAW,GACb,OAAO,CAAC,GAAG,CAAC,CAAC,aAAa,EAAE,gBAAgB,EAAE,uBAAuB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;YACxG,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC,CAAC,CAAC;QACT,gBAAgB,CAAC,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,YAAY,CAAC;YACjD,EAAE,wBAAwB,qEAA2C,CAAC;QAE1E,MAAM,IAAI,OAAO,CAAO,OAAO,CAAC,EAAE,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC;QAE5D,YAAY,GAAG,IAAI,CAAC;QACpB,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,YAAY,CAAC;YAC9C,EAAE,wBAAwB,qEAA2C,CAAC;QAC1E,MAAM,WAAW,CAAC;IACpB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport {\n  createTarget,\n  registerNoopActions,\n  stubNoopSettings,\n} from '../../testing/EnvironmentHelpers.js';\nimport {\n  describeWithMockConnection,\n  setMockConnectionResponseHandler,\n} from '../../testing/MockConnection.js';\nimport {\n  setMockResourceTree,\n} from '../../testing/ResourceTreeHelpers.js';\n\nimport * as Elements from './elements.js';\n\nconst NODE_ID = 1 as Protocol.DOM.NodeId;\n\ndescribeWithMockConnection('InspectElementModeController', () => {\n  let inScopeTarget: SDK.Target.Target;\n  let inScopeSubTarget: SDK.Target.Target;\n  let outOfScopeTarget: SDK.Target.Target;\n  let outOfScopeSubTarget: SDK.Target.Target;\n  let modeController: Elements.InspectElementModeController.InspectElementModeController;\n\n  function onModeToggle(target: SDK.Target.Target) {\n    const model = target.model(SDK.OverlayModel.OverlayModel);\n    return model!.once(SDK.OverlayModel.Events.InspectModeWillBeToggled);\n  }\n\n  function failOnModeToggle(target: SDK.Target.Target) {\n    const model = target.model(SDK.OverlayModel.OverlayModel);\n    model!.addEventListener(\n        SDK.OverlayModel.Events.InspectModeWillBeToggled,\n        () => assert.fail('Unexected mode toggle on out of scope target'));\n  }\n\n  beforeEach(() => {\n    setMockResourceTree(false);\n    stubNoopSettings();\n    registerNoopActions(['elements.toggle-element-search']);\n    const tabTarget = createTarget({type: SDK.Target.Type.Tab});\n    inScopeTarget = createTarget({parentTarget: tabTarget});\n    inScopeSubTarget = createTarget({parentTarget: inScopeTarget});\n    outOfScopeTarget = createTarget({parentTarget: tabTarget});\n    outOfScopeSubTarget = createTarget({parentTarget: outOfScopeTarget});\n    failOnModeToggle(outOfScopeTarget);\n    failOnModeToggle(outOfScopeSubTarget);\n    SDK.TargetManager.TargetManager.instance().setScopeTarget(inScopeTarget);\n    modeController = new Elements.InspectElementModeController.InspectElementModeController();\n    setMockConnectionResponseHandler('DOM.getDocument', () => ({root: {nodeId: NODE_ID}}));\n  });\n\n  it('synchronises mode for in scope models', async () => {\n    for (const target of SDK.TargetManager.TargetManager.instance().targets()) {\n      assert.isFalse(Boolean(target.model(SDK.OverlayModel.OverlayModel)?.inspectModeEnabled()));\n    }\n\n    modeController.toggleInspectMode();\n    await Promise.all([onModeToggle(inScopeTarget), onModeToggle(inScopeSubTarget)]);\n\n    const anotherInScopeSubTarget = createTarget({parentTarget: inScopeTarget});\n    await onModeToggle(anotherInScopeSubTarget);\n\n    const anotherOutOfScopeSubTarget = createTarget({parentTarget: inScopeTarget});\n    failOnModeToggle(anotherOutOfScopeSubTarget);\n\n    let expectToggle = false;\n    const modeToggles =\n        Promise.all([inScopeTarget, inScopeSubTarget, anotherInScopeSubTarget].map(t => onModeToggle(t).then(() => {\n          assert.isTrue(expectToggle);\n        })));\n    outOfScopeTarget.model(SDK.OverlayModel.OverlayModel)\n        ?.dispatchEventToListeners(SDK.OverlayModel.Events.ExitedInspectMode);\n\n    await new Promise<void>(resolve => queueMicrotask(resolve));\n\n    expectToggle = true;\n    inScopeTarget.model(SDK.OverlayModel.OverlayModel)\n        ?.dispatchEventToListeners(SDK.OverlayModel.Events.ExitedInspectMode);\n    await modeToggles;\n  });\n});\n"]}