{"version":3,"file":"PropertyMatchers.js","sourceRoot":"","sources":["../../../../../../front_end/panels/elements/PropertyMatchers.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,MAAM,MAAM,6BAA6B,CAAC;AAEtD,OAAO,KAAK,GAAG,MAAM,uBAAuB,CAAC;AAE7C,OAAO,KAAK,YAAY,MAAM,2DAA2D,CAAC;AAC1F,OAAO,KAAK,EAAE,MAAM,2BAA2B,CAAC;AAMhD,MAAM,QAAQ,GAAG,GAAG,CAAC,iBAAiB,CAAC,QAAQ,CAAC;AAChD,MAAM,WAAW,GAAG,GAAG,CAAC,iBAAiB,CAAC,WAAW,CAAC;AACtD,MAAM,mBAAmB,GAAG,GAAG,CAAC,iBAAiB,CAAC,mBAAmB,CAAC;AAEtE,MAAM,OAAO,UAAU;IACA;IAAuB;IAA5C,YAAqB,IAAY,EAAW,IAA2B;QAAlD,SAAI,GAAJ,IAAI,CAAQ;QAAW,SAAI,GAAJ,IAAI,CAAuB;IACvE,CAAC;IAED,YAAY;QACV,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;CACF;AAED,mBAAmB;AACnB,MAAM,OAAO,YAAa,SAAQ,WAAW,CAAC,UAAU,CAAC;IACvD,kBAAkB;IACT,OAAO,CAAC,YAAoB;QACnC,OAAO,GAAG,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,oBAAoB,CAAC,YAAY,CAAC,CAAC;IAC1E,CAAC;IACQ,OAAO,CAAC,IAA2B,EAAE,QAA8B;QAC1E,IAAI,IAAI,CAAC,IAAI,KAAK,eAAe,EAAE,CAAC;YAClC,OAAO,IAAI,CAAC;QACd,CAAC;QACD,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACnC,wCAAwC;QACxC,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC;YAC/E,OAAO,IAAI,CAAC;QACd,CAAC;QAED,OAAO,IAAI,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;IACvD,CAAC;CACF;AAED,SAAS,eAAe,CAAC,IAA2B,EAAE,GAAe;IACnE,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,eAAe,EAAE,CAAC;QACvC,OAAO,IAAI,CAAC;IACd,CAAC;IACD,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAE5B,OAAO,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;AACzF,CAAC;AAED,MAAM,OAAO,aAAa;IAEX;IAAuB;IAAsC;IAC7D;IAA0C;IAFvD,YACa,IAAY,EAAW,IAA2B,EAAW,KAA8B,EAC3F,MAA+B,EAAW,MAA+B;QADzE,SAAI,GAAJ,IAAI,CAAQ;QAAW,SAAI,GAAJ,IAAI,CAAuB;QAAW,UAAK,GAAL,KAAK,CAAyB;QAC3F,WAAM,GAAN,MAAM,CAAyB;QAAW,WAAM,GAAN,MAAM,CAAyB;IACtF,CAAC;CACF;AAED,mBAAmB;AACnB,MAAM,OAAO,eAAgB,SAAQ,WAAW,CAAC,aAAa,CAAC;IAC7D,kBAAkB;IACT,OAAO,CAAC,YAAoB;QACnC,OAAO,GAAG,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,oBAAoB,CAAC,YAAY,CAAC,CAAC;IAC1E,CAAC;IACQ,OAAO,CAAC,IAA2B,EAAE,QAA8B;QAC1E,IAAI,IAAI,CAAC,IAAI,KAAK,gBAAgB,IAAI,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,KAAK,WAAW,EAAE,CAAC;YACjG,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,iBAAiB,GAAG,mBAAmB,CAAC,YAAY,EAAE,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;QAC5F,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACvB,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,KAAK,GAAG,QAAQ,CAAC,SAAS,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;QACzD,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,OAAO,IAAI,CAAC;QACd,CAAC;QACD,MAAM,iBAAiB,GAAG,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACnD,IAAI,iBAAiB,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACnC,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC,GAAG,iBAAiB,CAAC;QAClD,sFAAsF;QACtF,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,KAAK,IAAI;YAC/F,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC3C,OAAO,IAAI,CAAC;QACd,CAAC;QAED,8DAA8D;QAC9D,MAAM,EAAE,GACJ,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,eAAe,IAAI,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC;QAC9G,MAAM,EAAE,GACJ,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,eAAe,IAAI,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC;QAC9G,IAAI,EAAE,CAAC,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACnC,OAAO,IAAI,CAAC;QACd,CAAC;QAED,4GAA4G;QAC5G,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,iBAAiB,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC;YACxE,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,iBAAiB,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC;YAC3D,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,IAAI,GAAG,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACrC,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACtB,OAAO,IAAI,CAAC;QACd,CAAC;QACD,OAAO,IAAI,aAAa,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACrF,CAAC;CACF;AAED,mBAAmB;AACnB,MAAM,OAAO,QAAQ;IAEN;IAA+C;IAAuB;IADnF,YACa,GAAoC,EAAW,IAAY,EAAW,IAA2B;QAAjG,QAAG,GAAH,GAAG,CAAiC;QAAW,SAAI,GAAJ,IAAI,CAAQ;QAAW,SAAI,GAAJ,IAAI,CAAuB;IAC9G,CAAC;CACF;AAED,mBAAmB;AACnB,MAAM,OAAO,UAAW,SAAQ,WAAW,CAAC,QAAQ,CAAC;IACnD,kBAAkB;IACT,OAAO,CAAC,IAA2B,EAAE,QAA8B;QAC1E,IAAI,IAAI,CAAC,IAAI,KAAK,aAAa,EAAE,CAAC;YAChC,OAAO,IAAI,CAAC;QACd,CAAC;QACD,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QACxC,IAAI,CAAC,MAAM,IAAI,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,KAAK,EAAE,CAAC;YACnD,OAAO,IAAI,CAAC;QACd,CAAC;QACD,MAAM,CAAC,EAAE,UAAU,EAAE,OAAO,EAAE,UAAU,CAAC,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACtE,IAAI,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG;YACrC,CAAC,OAAO,CAAC,IAAI,KAAK,sBAAsB,IAAI,OAAO,CAAC,IAAI,KAAK,eAAe,CAAC;YAC7E,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,EAAE,CAAC;YAC1C,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,IAAI,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACxC,MAAM,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,KAAK,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,CAC1D,CAAC;QACpC,OAAO,IAAI,QAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;IAC1D,CAAC;CACF;AAED,MAAM,OAAO,mBAAmB;IACT;IAAuB;IAA5C,YAAqB,IAAY,EAAW,IAA2B;QAAlD,SAAI,GAAJ,IAAI,CAAQ;QAAW,SAAI,GAAJ,IAAI,CAAuB;IACvE,CAAC;CACF;AAED,mBAAmB;AACnB,MAAM,OAAO,qBAAsB,SAAQ,WAAW,CAAC,mBAAmB,CAAC;IACzE,kBAAkB;IACT,OAAO,CAAC,IAA2B,EAAE,QAA8B;QAC1E,MAAM,IAAI,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrC,IAAI,IAAI,CAAC,IAAI,KAAK,gBAAgB,IAAI,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,KAAK,iBAAiB,EAAE,CAAC;YACvG,OAAO,IAAI,mBAAmB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAC7C,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IACQ,OAAO,CAAC,YAAoB;QACnC,OAAO,CAAC,YAAY,EAAE,kBAAkB,EAAE,oBAAoB,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;IACzF,CAAC;CACF;AAED,MAAM,OAAO,UAAU;IACA;IAAuB;IAA5C,YAAqB,IAAY,EAAW,IAA2B;QAAlD,SAAI,GAAJ,IAAI,CAAQ;QAAW,SAAI,GAAJ,IAAI,CAAuB;IACvE,CAAC;CACF;AAED,mBAAmB;AACnB,MAAM,OAAO,YAAa,SAAQ,WAAW,CAAC,UAAU,CAAC;IACvD,kBAAkB;IACT,OAAO,CAAC,YAAoB;QACnC,OAAO,GAAG,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,oBAAoB,CAAC,YAAY,CAAC,CAAC;IAC1E,CAAC;IAEQ,OAAO,CAAC,IAA2B,EAAE,QAA8B;QAC1E,MAAM,IAAI,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrC,IAAI,IAAI,CAAC,IAAI,KAAK,cAAc,EAAE,CAAC;YACjC,OAAO,IAAI,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACpC,CAAC;QACD,IAAI,IAAI,CAAC,IAAI,KAAK,WAAW,IAAI,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;YAClE,OAAO,IAAI,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACpC,CAAC;QACD,IAAI,IAAI,CAAC,IAAI,KAAK,gBAAgB,EAAE,CAAC;YACnC,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YACvC,IAAI,MAAM,IAAI,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,iDAAiD,CAAC,EAAE,CAAC;gBACjG,OAAO,IAAI,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YACpC,CAAC;QACH,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAED,MAAM,OAAO,mBAAmB;IAEjB;IAAuB;IAAsC;IAC7D;IAFb,YACa,IAAY,EAAW,IAA2B,EAAW,KAA8B,EAC3F,IAA6B;QAD7B,SAAI,GAAJ,IAAI,CAAQ;QAAW,SAAI,GAAJ,IAAI,CAAuB;QAAW,UAAK,GAAL,KAAK,CAAyB;QAC3F,SAAI,GAAJ,IAAI,CAAyB;IAC1C,CAAC;CACF;AAED,mBAAmB;AACnB,MAAM,OAAO,qBAAsB,SAAQ,WAAW,CAAC,mBAAmB,CAAC;IACzE,kBAAkB;IACT,OAAO,CAAC,YAAoB;QACnC,OAAO,GAAG,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,oBAAoB,CAAC,YAAY,CAAC,CAAC;IAC1E,CAAC;IAEQ,OAAO,CAAC,IAA2B,EAAE,QAA8B;QAC1E,IAAI,IAAI,CAAC,IAAI,KAAK,gBAAgB,IAAI,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,KAAK,YAAY,EAAE,CAAC;YAClG,OAAO,IAAI,CAAC;QACd,CAAC;QACD,MAAM,IAAI,GAAG,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACrC,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACtE,OAAO,IAAI,CAAC;QACd,CAAC;QACD,OAAO,IAAI,mBAAmB,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAClF,CAAC;CACF;AAmBD,MAAM,OAAO,iBAAiB;IAEf;IAAuB;IAAsC;IAD1E,YACa,IAAY,EAAW,IAA2B,EAAW,WAAmC;QAAhG,SAAI,GAAJ,IAAI,CAAQ;QAAW,SAAI,GAAJ,IAAI,CAAuB;QAAW,gBAAW,GAAX,WAAW,CAAwB;IAC7G,CAAC;CACF;AAED,mBAAmB;AACnB,MAAM,OAAO,mBAAoB,SAAQ,WAAW,CAAC,iBAAiB,CAAC;IACrE,kBAAkB;IACV,MAAM,CAAC,sBAAsB,CAAC,YAAoB;QACxD,MAAM,KAAK,GAAa;;;;;;;SAOvB,CAAC;QACF,OAAO,KAAK,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;IACtC,CAAC;IAED,MAAM,CAAU,8BAA8B,GAAuC,IAAI,GAAG,CACxF,MAAM,CAAC,OAAO,CAAC;QACb,QAAQ,mDAAiC;QACzC,WAAW,mDAAiC;QAC5C,SAAS,mDAAiC;QAC1C,mBAAmB,mDAAiC;QACpD,MAAM,kDAAgC;QACtC,UAAU,kDAAgC;QAC1C,WAAW,kDAAgC;QAC3C,MAAM,kDAAgC;QACtC,SAAS,oDAAiC;QAC1C,QAAQ,oDAAiC;QACzC,UAAU,8DAAsC;QAChD,QAAQ,8DAAsC;QAC9C,MAAM,8DAAsC;QAC5C,SAAS,8DAAsC;QAC/C,UAAU,8DAAsC;QAChD,aAAa,8DAAsC;KACpD,CAAC,CACL,CAAC;IAEM,6BAA6B,CAAC,IAA2B,EAAE,QAA8B;QAC/F,sHAAsH;QACtH,iFAAiF;QACjF,6HAA6H;QAC7H,oFAAoF;QACpF,MAAM,IAAI,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrC,oEAAoE;QACpE,IAAI,CAAC,mBAAmB,CAAC,8BAA8B,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;YAClE,OAAO,IAAI,iBAAiB,CAAC,IAAI,EAAE,IAAI,qDAAmC,CAAC;QAC7E,CAAC;QACD,sEAAsE;QACtE,2EAA2E;QAC3E,MAAM,YAAY,GAAG,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC9F,MAAM,uBAAuB,GAAG,YAAY,CAAC,IAAI,CAC7C,WAAW,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,IAAI,CAAC,EAAE,CAAC,CAAC;QAC1G,IAAI,CAAC,uBAAuB,EAAE,CAAC;YAC7B,OAAO,IAAI,CAAC;QACd,CAAC;QAED,oEAAoE;QACpE,yDAAyD;QACzD,6CAA6C;QAC7C,MAAM,YAAY,GAAG,QAAQ,CAAC,oBAAoB,CAAC,uBAAuB,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;QACrF,MAAM,SAAS,GAAG,mBAAmB,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;QAC3D,IAAI,CAAC,SAAS,EAAE,CAAC;YACf,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,kBAAkB,GACpB,mBAAmB,CAAC,8BAA8B,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAE,oCAAoC;QACvG,KAAK,IAAI,MAAM,GAA+B,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,WAAW,EAChG,MAAM,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC;YACjC,2DAA2D;YAC3D,2DAA2D;YAC3D,iEAAiE;YACjE,IAAI,MAAM,CAAC,IAAI,KAAK,WAAW,EAAE,CAAC;gBAChC,MAAM,aAAa,GAAG,mBAAmB,CAAC,8BAA8B,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBACrG,IAAI,aAAa,IAAI,aAAa,KAAK,kBAAkB,EAAE,CAAC;oBAC1D,OAAO,IAAI,iBAAiB,CAAC,IAAI,EAAE,IAAI,qDAAmC,CAAC;gBAC7E,CAAC;YACH,CAAC;QACH,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAEQ,OAAO,CAAC,YAAoB;QACnC,OAAO,mBAAmB,CAAC,sBAAsB,CAAC,YAAY,CAAC,CAAC;IAClE,CAAC;IAEQ,OAAO,CAAC,IAA2B,EAAE,QAA8B;QAC1E,MAAM,EAAC,YAAY,EAAC,GAAG,QAAQ,CAAC,GAAG,CAAC;QACpC,MAAM,IAAI,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrC,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC;QAC/B,IAAI,CAAC,UAAU,EAAE,CAAC;YAChB,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,oBAAoB,GAAG,UAAU,CAAC,IAAI,KAAK,aAAa,CAAC;QAC/D,MAAM,eAAe,GAAG,UAAU,CAAC,IAAI,KAAK,SAAS,IAAI,UAAU,CAAC,WAAW,EAAE,IAAI,KAAK,QAAQ;YAC9F,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,KAAK,KAAK,CAAC;QACxD,MAAM,6BAA6B,GAAG,oBAAoB,IAAI,eAAe,CAAC;QAC9E,kFAAkF;QAClF,MAAM,2BAA2B,GAAG,YAAY,4DAAuC;YACnF,YAAY,2EAA8C,CAAC;QAC/D,+FAA+F;QAC/F,IAAI,CAAC,YAAY,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,WAAW,IAAI,IAAI,CAAC,IAAI,KAAK,cAAc,CAAC;YAC5E,CAAC,6BAA6B,IAAI,CAAC,IAAI,CAAC,IAAI,KAAK,WAAW,IAAI,2BAA2B,CAAC,EAAE,CAAC;YACjG,OAAO,IAAI,CAAC;QACd,CAAC;QAED,IAAI,YAAY,KAAK,WAAW,EAAE,CAAC;YACjC,OAAO,IAAI,CAAC,6BAA6B,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAC5D,CAAC;QAED,8DAA8D;QAC9D,sFAAsF;QACtF,OAAO,IAAI,iBAAiB,CAAC,IAAI,EAAE,IAAI,EAAE,YAAsC,CAAC,CAAC;IACnF,CAAC;;AAGH,MAAM,OAAO,WAAW;IACD;IAAuB;IAA5C,YAAqB,IAAY,EAAW,IAA2B;QAAlD,SAAI,GAAJ,IAAI,CAAQ;QAAW,SAAI,GAAJ,IAAI,CAAuB;IACvE,CAAC;CACF;AAED,mBAAmB;AACnB,MAAM,OAAO,aAAc,SAAQ,WAAW,CAAC,WAAW,CAAC;IACzD,kBAAkB;IACT,OAAO,CAAC,YAAoB;QACnC,OAAO,GAAG,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC;IAC3E,CAAC;IAEQ,OAAO,CAAC,IAA2B,EAAE,QAA8B;QAC1E,MAAM,IAAI,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAErC,MAAM,oBAAoB,GAAG,IAAI,CAAC,IAAI,KAAK,WAAW,IAAI,EAAE,CAAC,QAAQ,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC1G,MAAM,6BAA6B,GAAG,IAAI,CAAC,IAAI,KAAK,gBAAgB;YAChE,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAEpF,IAAI,CAAC,oBAAoB,IAAI,CAAC,6BAA6B,EAAE,CAAC;YAC5D,OAAO,IAAI,CAAC;QACd,CAAC;QAED,IAAI,CAAC,YAAY,CAAC,oBAAoB,CAAC,oBAAoB,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC;YACxE,OAAO,IAAI,CAAC;QACd,CAAC;QACD,OAAO,IAAI,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACrC,CAAC;CACF;AAED,MAAM,OAAO,WAAW;IACD;IAAuB;IAA5C,YAAqB,IAAY,EAAW,IAA2B;QAAlD,SAAI,GAAJ,IAAI,CAAQ;QAAW,SAAI,GAAJ,IAAI,CAAuB;IACvE,CAAC;CACF;AAED,mBAAmB;AACnB,MAAM,OAAO,aAAc,SAAQ,WAAW,CAAC,WAAW,CAAC;IACzD,kBAAkB;IACT,OAAO,CAAC,IAA2B,EAAE,QAA8B;QAC1E,OAAO,IAAI,CAAC,IAAI,KAAK,eAAe,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAC/F,CAAC;CACF;AAMD,MAAM,OAAO,WAAW;IACD;IAAuB;IAAsC;IAAlF,YAAqB,IAAY,EAAW,IAA2B,EAAW,UAAsB;QAAnF,SAAI,GAAJ,IAAI,CAAQ;QAAW,SAAI,GAAJ,IAAI,CAAuB;QAAW,eAAU,GAAV,UAAU,CAAY;IACxG,CAAC;CACF;AAED,mBAAmB;AACnB,MAAM,OAAO,aAAc,SAAQ,WAAW,CAAC,WAAW,CAAC;IACzD,kBAAkB;IACT,OAAO,CAAC,YAAoB;QACnC,OAAO,GAAG,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;IACtE,CAAC;IACQ,OAAO,CAAC,IAA2B,EAAE,QAA8B;QAC1E,IAAI,IAAI,CAAC,IAAI,KAAK,aAAa,EAAE,CAAC;YAChC,OAAO,IAAI,CAAC;QACd,CAAC;QACD,MAAM,UAAU,GAAG,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;QAC/D,MAAM,SAAS,GAAG,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QAC3F,OAAO,IAAI,WAAW,CAClB,SAAS,EAAE,IAAI,EAAE,QAAQ,CAAC,GAAG,CAAC,YAAY,KAAK,aAAa,CAAC,CAAC,0CAAuB,CAAC,uCAAqB,CAAC,CAAC;IACnH,CAAC;CACF;AAED,MAAM,OAAO,SAAS;IACC;IAAuB;IAA5C,YAAqB,IAAY,EAAW,IAA2B;QAAlD,SAAI,GAAJ,IAAI,CAAQ;QAAW,SAAI,GAAJ,IAAI,CAAuB;IACvE,CAAC;CACF;AAED,mBAAmB;AACnB,MAAM,OAAO,WAAY,SAAQ,WAAW,CAAC,SAAS,CAAC;IACrD,kBAAkB;IACT,OAAO,CAAC,YAAoB;QACnC,OAAO,GAAG,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC;IACzE,CAAC;IACQ,OAAO,CAAC,IAA2B,EAAE,QAA8B;QAC1E,IAAI,IAAI,CAAC,IAAI,KAAK,aAAa,EAAE,CAAC;YAChC,OAAO,IAAI,CAAC;QACd,CAAC;QACD,MAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,YAAY,KAAK,aAAa,CAAC,CAAC,CAAC,YAAY,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC;YAC9C,YAAY,CAAC,eAAe,CAAC,mBAAmB,CAAC;QAC7G,MAAM,IAAI,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrC,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAC7D,CAAC;CACF;AAED,MAAM,OAAO,WAAW;IACD;IAAuB;IAA5C,YAAqB,IAAY,EAAW,IAA2B;QAAlD,SAAI,GAAJ,IAAI,CAAQ;QAAW,SAAI,GAAJ,IAAI,CAAuB;IACvE,CAAC;CACF;AAED,mBAAmB;AACnB,MAAM,OAAO,aAAc,SAAQ,WAAW,CAAC,WAAW,CAAC;IACzD,kBAAkB;IACT,OAAO,CAAC,IAA2B,EAAE,QAA8B;QAC1E,MAAM,IAAI,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrC,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,YAAY,CAAC,cAAc,CAAC,cAAc,GAAG,CAAC,CAAC;QAC7E,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,KAAK,CAAC,EAAE,CAAC;YAChC,OAAO,IAAI,CAAC;QACd,CAAC;QACD,OAAO,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;IACzC,CAAC;CACF;AAED,MAAM,OAAO,iBAAiB;IACP;IAAuB;IAAsC;IAAlF,YAAqB,IAAY,EAAW,IAA2B,EAAW,KAAgC;QAA7F,SAAI,GAAJ,IAAI,CAAQ;QAAW,SAAI,GAAJ,IAAI,CAAuB;QAAW,UAAK,GAAL,KAAK,CAA2B;IAClH,CAAC;CACF;AAED,mBAAmB;AACnB,MAAM,OAAO,mBAAoB,SAAQ,WAAW,CAAC,iBAAiB,CAAC;IACrE,kBAAkB;IACT,OAAO,CAAC,YAAoB;QACnC,OAAO,GAAG,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,0BAA0B,CAAC,YAAY,CAAC,CAAC;IAChF,CAAC;IACQ,OAAO,CAAC,IAA2B,EAAE,QAA8B;QAC1E,IAAI,IAAI,CAAC,IAAI,KAAK,aAAa,IAAI,QAAQ,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC;YACpE,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,KAAK,GAA8B,EAAE,CAAC;QAC5C,IAAI,OAAO,GAA4B,EAAE,CAAC;QAC1C,iFAAiF;QACjF,6CAA6C;QAC7C,sFAAsF;QACtF,mFAAmF;QACnF,sFAAsF;QACtF,sFAAsF;QACtF,qEAAqE;QACrE,IAAI,mBAAmB,GAAG,KAAK,CAAC;QAChC,4FAA4F;QAC5F,0FAA0F;QAC1F,IAAI,oBAAoB,GAAG,KAAK,CAAC;QACjC,wFAAwF;QACxF,mCAAmC;QACnC,SAAS,UAAU,CAAC,KAA8B,EAAE,cAAc,GAAG,KAAK;YACxE,KAAK,MAAM,OAAO,IAAI,KAAK,EAAE,CAAC;gBAC5B,IAAI,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,GAAG,CAAC,iBAAiB,CAAC,aAAa,EAAE,CAAC;oBAC9E,MAAM,iBAAiB,GAAG,mBAAmB,CAAC,YAAY,EAAE,QAAQ,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC;oBAC/F,IAAI,CAAC,iBAAiB,EAAE,CAAC;wBACvB,SAAS;oBACX,CAAC;oBACD,MAAM,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;oBAC/E,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;wBAC1B,SAAS;oBACX,CAAC;oBACD,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,eAAe,IAAI,CAAC,mBAAmB,CAAC;wBAC9D,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,WAAW,IAAI,CAAC,oBAAoB,CAAC,EAAE,CAAC;wBAChE,iGAAiG;wBACjG,mDAAmD;wBACnD,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;wBACpB,OAAO,GAAG,CAAC,OAAO,CAAC,CAAC;oBACtB,CAAC;yBAAM,CAAC;wBACN,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBACxB,CAAC;oBACD,kFAAkF;oBAClF,oDAAoD;oBACpD,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;gBAC7B,CAAC;qBAAM,IAAI,OAAO,CAAC,IAAI,KAAK,kBAAkB,EAAE,CAAC;oBAC/C,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;gBACpD,CAAC;qBAAM,IAAI,OAAO,CAAC,IAAI,KAAK,eAAe,EAAE,CAAC;oBAC5C,IAAI,CAAC,cAAc,EAAE,CAAC;wBACpB,IAAI,mBAAmB,EAAE,CAAC;4BACxB,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;wBACxB,CAAC;6BAAM,CAAC;4BACN,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;4BACpB,OAAO,GAAG,CAAC,OAAO,CAAC,CAAC;wBACtB,CAAC;oBACH,CAAC;oBACD,oBAAoB,GAAG,IAAI,CAAC;oBAC5B,mBAAmB,GAAG,KAAK,CAAC;gBAC9B,CAAC;qBAAM,IAAI,OAAO,CAAC,IAAI,KAAK,WAAW,EAAE,CAAC;oBACxC,IAAI,CAAC,cAAc,EAAE,CAAC;wBACpB,IAAI,oBAAoB,EAAE,CAAC;4BACzB,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;wBACxB,CAAC;6BAAM,CAAC;4BACN,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;4BACpB,OAAO,GAAG,CAAC,OAAO,CAAC,CAAC;wBACtB,CAAC;oBACH,CAAC;oBACD,mBAAmB,GAAG,CAAC,oBAAoB,CAAC;oBAC5C,oBAAoB,GAAG,CAAC,oBAAoB,CAAC;gBAC/C,CAAC;qBAAM,IAAI,CAAC,cAAc,EAAE,CAAC;oBAC3B,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACxB,CAAC;YACH,CAAC;QACH,CAAC;QAED,MAAM,UAAU,GAAG,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;QAC/D,UAAU,CAAC,UAAU,CAAC,CAAC;QACvB,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACpB,MAAM,SAAS,GAAG,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QAC3F,OAAO,IAAI,iBAAiB,CAAC,SAAS,EAAE,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;IACvF,CAAC;CACF;AACD,MAAM,OAAO,mBAAmB;IAEjB;IAAuB;IAAyC;IAChE;IAA+B;IAF5C,YACa,IAAY,EAAW,QAA8B,EAAW,IAA2B,EAC3F,YAAoB,EAAW,IAA6B;QAD5D,SAAI,GAAJ,IAAI,CAAQ;QAAW,aAAQ,GAAR,QAAQ,CAAsB;QAAW,SAAI,GAAJ,IAAI,CAAuB;QAC3F,iBAAY,GAAZ,YAAY,CAAQ;QAAW,SAAI,GAAJ,IAAI,CAAyB;IACzE,CAAC;CACF;AAED,mBAAmB;AACnB,MAAM,OAAO,qBAAsB,SAAQ,WAAW,CAAC,mBAAmB,CAAC;IAChE,OAAO,CAAC,IAA2B,EAAE,QAA8B;QAC1E,IAAI,IAAI,CAAC,IAAI,KAAK,gBAAgB,EAAE,CAAC;YACnC,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,UAAU,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC9D,IAAI,UAAU,KAAK,QAAQ,IAAI,UAAU,KAAK,aAAa,EAAE,CAAC;YAC5D,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC3C,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACvC,OAAO,IAAI,CAAC;QACd,CAAC;QAED,OAAO,IAAI,mBAAmB,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;IAChG,CAAC;CACF;AACD,kBAAkB;AAElB,gDAAgD;AAChD,MAAM,OAAO,mBAAmB;IACT;IAAuB;IAAyC;IAArF,YAAqB,IAAY,EAAW,QAA8B,EAAW,IAA2B;QAA3F,SAAI,GAAJ,IAAI,CAAQ;QAAW,aAAQ,GAAR,QAAQ,CAAsB;QAAW,SAAI,GAAJ,IAAI,CAAuB;IAChH,CAAC;CACF;AAED,mBAAmB;AACnB,MAAM,OAAO,qBAAsB,SAAQ,WAAW,CAAC,mBAAmB,CAAC;IAChE,OAAO,CAAC,YAAoB;QACnC,OAAO,YAAY,KAAK,iBAAiB,CAAC;IAC5C,CAAC;IAEQ,OAAO,CAAC,IAA2B,EAAE,QAA8B;QAC1E,IAAI,IAAI,CAAC,IAAI,KAAK,cAAc,EAAE,CAAC;YACjC,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,gBAAgB,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjD,OAAO,IAAI,mBAAmB,CAAC,gBAAgB,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;IACnE,CAAC;CACF;AACD,kBAAkB","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as CodeMirror from '../../third_party/codemirror.next/codemirror.next.js';\nimport * as InlineEditor from '../../ui/legacy/components/inline_editor/inline_editor.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\ntype Match = SDK.CSSPropertyParser.Match;\ntype BottomUpTreeMatching = SDK.CSSPropertyParser.BottomUpTreeMatching;\ntype SyntaxTree = SDK.CSSPropertyParser.SyntaxTree;\n\nconst ASTUtils = SDK.CSSPropertyParser.ASTUtils;\nconst matcherBase = SDK.CSSPropertyParser.matcherBase;\nconst tokenizeDeclaration = SDK.CSSPropertyParser.tokenizeDeclaration;\n\nexport class AngleMatch implements SDK.CSSPropertyParser.Match {\n  constructor(readonly text: string, readonly node: CodeMirror.SyntaxNode) {\n  }\n\n  computedText(): string {\n    return this.text;\n  }\n}\n\n// clang-format off\nexport class AngleMatcher extends matcherBase(AngleMatch) {\n  // clang-format on\n  override accepts(propertyName: string): boolean {\n    return SDK.CSSMetadata.cssMetadata().isAngleAwareProperty(propertyName);\n  }\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): Match|null {\n    if (node.name !== 'NumberLiteral') {\n      return null;\n    }\n    const unit = node.getChild('Unit');\n    // TODO(crbug/1138628) handle unitless 0\n    if (!unit || !['deg', 'grad', 'rad', 'turn'].includes(matching.ast.text(unit))) {\n      return null;\n    }\n\n    return new AngleMatch(matching.ast.text(node), node);\n  }\n}\n\nfunction literalToNumber(node: CodeMirror.SyntaxNode, ast: SyntaxTree): number|null {\n  if (node.type.name !== 'NumberLiteral') {\n    return null;\n  }\n  const text = ast.text(node);\n\n  return Number(text.substring(0, text.length - ast.text(node.getChild('Unit')).length));\n}\n\nexport class ColorMixMatch implements Match {\n  constructor(\n      readonly text: string, readonly node: CodeMirror.SyntaxNode, readonly space: CodeMirror.SyntaxNode[],\n      readonly color1: CodeMirror.SyntaxNode[], readonly color2: CodeMirror.SyntaxNode[]) {\n  }\n}\n\n// clang-format off\nexport class ColorMixMatcher extends matcherBase(ColorMixMatch) {\n  // clang-format on\n  override accepts(propertyName: string): boolean {\n    return SDK.CSSMetadata.cssMetadata().isColorAwareProperty(propertyName);\n  }\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): Match|null {\n    if (node.name !== 'CallExpression' || matching.ast.text(node.getChild('Callee')) !== 'color-mix') {\n      return null;\n    }\n\n    const computedValueTree = tokenizeDeclaration('--property', matching.getComputedText(node));\n    if (!computedValueTree) {\n      return null;\n    }\n\n    const value = ASTUtils.declValue(computedValueTree.tree);\n    if (!value) {\n      return null;\n    }\n    const computedValueArgs = ASTUtils.callArgs(value);\n    if (computedValueArgs.length !== 3) {\n      return null;\n    }\n\n    const [space, color1, color2] = computedValueArgs;\n    // Verify that all arguments are there, and that the space starts with a literal `in`.\n    if (space.length < 2 || computedValueTree.text(ASTUtils.stripComments(space).next().value) !== 'in' ||\n        color1.length < 1 || color2.length < 1) {\n      return null;\n    }\n\n    // Verify there's at most one percentage value for each color.\n    const p1 =\n        color1.filter(n => n.type.name === 'NumberLiteral' && computedValueTree.text(n.getChild('Unit')) === '%');\n    const p2 =\n        color2.filter(n => n.type.name === 'NumberLiteral' && computedValueTree.text(n.getChild('Unit')) === '%');\n    if (p1.length > 1 || p2.length > 1) {\n      return null;\n    }\n\n    // Verify that if both colors carry percentages, they aren't both zero (which is an invalid property value).\n    if (p1[0] && p2[0] && (literalToNumber(p1[0], computedValueTree) ?? 0) === 0 &&\n        (literalToNumber(p2[0], computedValueTree) ?? 0) === 0) {\n      return null;\n    }\n\n    const args = ASTUtils.callArgs(node);\n    if (args.length !== 3) {\n      return null;\n    }\n    return new ColorMixMatch(matching.ast.text(node), node, args[0], args[1], args[2]);\n  }\n}\n\n// clang-format off\nexport class URLMatch implements Match {\n  constructor(\n      readonly url: Platform.DevToolsPath.UrlString, readonly text: string, readonly node: CodeMirror.SyntaxNode) {\n  }\n}\n\n// clang-format off\nexport class URLMatcher extends matcherBase(URLMatch) {\n  // clang-format on\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): Match|null {\n    if (node.name !== 'CallLiteral') {\n      return null;\n    }\n    const callee = node.getChild('CallTag');\n    if (!callee || matching.ast.text(callee) !== 'url') {\n      return null;\n    }\n    const [, lparenNode, urlNode, rparenNode] = ASTUtils.siblings(callee);\n    if (matching.ast.text(lparenNode) !== '(' ||\n        (urlNode.name !== 'ParenthesizedContent' && urlNode.name !== 'StringLiteral') ||\n        matching.ast.text(rparenNode) !== ')') {\n      return null;\n    }\n\n    const text = matching.ast.text(urlNode);\n    const url = (urlNode.name === 'StringLiteral' ? text.substr(1, text.length - 2) : text.trim()) as\n        Platform.DevToolsPath.UrlString;\n    return new URLMatch(url, matching.ast.text(node), node);\n  }\n}\n\nexport class LinearGradientMatch implements Match {\n  constructor(readonly text: string, readonly node: CodeMirror.SyntaxNode) {\n  }\n}\n\n// clang-format off\nexport class LinearGradientMatcher extends matcherBase(LinearGradientMatch) {\n  // clang-format on\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): Match|null {\n    const text = matching.ast.text(node);\n    if (node.name === 'CallExpression' && matching.ast.text(node.getChild('Callee')) === 'linear-gradient') {\n      return new LinearGradientMatch(text, node);\n    }\n    return null;\n  }\n  override accepts(propertyName: string): boolean {\n    return ['background', 'background-image', '-webkit-mask-image'].includes(propertyName);\n  }\n}\n\nexport class ColorMatch implements Match {\n  constructor(readonly text: string, readonly node: CodeMirror.SyntaxNode) {\n  }\n}\n\n// clang-format off\nexport class ColorMatcher extends matcherBase(ColorMatch) {\n  // clang-format on\n  override accepts(propertyName: string): boolean {\n    return SDK.CSSMetadata.cssMetadata().isColorAwareProperty(propertyName);\n  }\n\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): Match|null {\n    const text = matching.ast.text(node);\n    if (node.name === 'ColorLiteral') {\n      return new ColorMatch(text, node);\n    }\n    if (node.name === 'ValueName' && Common.Color.Nicknames.has(text)) {\n      return new ColorMatch(text, node);\n    }\n    if (node.name === 'CallExpression') {\n      const callee = node.getChild('Callee');\n      if (callee && matching.ast.text(callee).match(/^(rgba?|hsla?|hwba?|lab|lch|oklab|oklch|color)$/)) {\n        return new ColorMatch(text, node);\n      }\n    }\n    return null;\n  }\n}\n\nexport class LightDarkColorMatch implements Match {\n  constructor(\n      readonly text: string, readonly node: CodeMirror.SyntaxNode, readonly light: CodeMirror.SyntaxNode[],\n      readonly dark: CodeMirror.SyntaxNode[]) {\n  }\n}\n\n// clang-format off\nexport class LightDarkColorMatcher extends matcherBase(LightDarkColorMatch) {\n  // clang-format on\n  override accepts(propertyName: string): boolean {\n    return SDK.CSSMetadata.cssMetadata().isColorAwareProperty(propertyName);\n  }\n\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): Match|null {\n    if (node.name !== 'CallExpression' || matching.ast.text(node.getChild('Callee')) !== 'light-dark') {\n      return null;\n    }\n    const args = ASTUtils.callArgs(node);\n    if (args.length !== 2 || args[0].length === 0 || args[1].length === 0) {\n      return null;\n    }\n    return new LightDarkColorMatch(matching.ast.text(node), node, args[0], args[1]);\n  }\n}\n\nexport const enum LinkableNameProperties {\n  Animation = 'animation',\n  AnimationName = 'animation-name',\n  FontPalette = 'font-palette',\n  PositionFallback = 'position-fallback',\n  PositionTryOptions = 'position-try-options',\n  PositionTry = 'position-try',\n}\n\nconst enum AnimationLonghandPart {\n  Direction = 'direction',\n  FillMode = 'fill-mode',\n  PlayState = 'play-state',\n  IterationCount = 'iteration-count',\n  EasingFunction = 'easing-function',\n}\n\nexport class LinkableNameMatch implements Match {\n  constructor(\n      readonly text: string, readonly node: CodeMirror.SyntaxNode, readonly properyName: LinkableNameProperties) {\n  }\n}\n\n// clang-format off\nexport class LinkableNameMatcher extends matcherBase(LinkableNameMatch) {\n  // clang-format on\n  private static isLinkableNameProperty(propertyName: string): propertyName is LinkableNameProperties {\n    const names: string[] = [\n      LinkableNameProperties.Animation,\n      LinkableNameProperties.AnimationName,\n      LinkableNameProperties.FontPalette,\n      LinkableNameProperties.PositionFallback,\n      LinkableNameProperties.PositionTryOptions,\n      LinkableNameProperties.PositionTry,\n    ];\n    return names.includes(propertyName);\n  }\n\n  static readonly identifierAnimationLonghandMap: Map<string, AnimationLonghandPart> = new Map(\n      Object.entries({\n        'normal': AnimationLonghandPart.Direction,\n        'alternate': AnimationLonghandPart.Direction,\n        'reverse': AnimationLonghandPart.Direction,\n        'alternate-reverse': AnimationLonghandPart.Direction,\n        'none': AnimationLonghandPart.FillMode,\n        'forwards': AnimationLonghandPart.FillMode,\n        'backwards': AnimationLonghandPart.FillMode,\n        'both': AnimationLonghandPart.FillMode,\n        'running': AnimationLonghandPart.PlayState,\n        'paused': AnimationLonghandPart.PlayState,\n        'infinite': AnimationLonghandPart.IterationCount,\n        'linear': AnimationLonghandPart.EasingFunction,\n        'ease': AnimationLonghandPart.EasingFunction,\n        'ease-in': AnimationLonghandPart.EasingFunction,\n        'ease-out': AnimationLonghandPart.EasingFunction,\n        'ease-in-out': AnimationLonghandPart.EasingFunction,\n      }),\n  );\n\n  private matchAnimationNameInShorthand(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): Match|null {\n    // Order is important within each animation definition for distinguishing <keyframes-name> values from other keywords.\n    // When parsing, keywords that are valid for properties other than animation-name\n    // whose values were not found earlier in the shorthand must be accepted for those properties rather than for animation-name.\n    // See the details in: https://w3c.github.io/csswg-drafts/css-animations/#animation.\n    const text = matching.ast.text(node);\n    // This is not a known identifier, so return it as `animation-name`.\n    if (!LinkableNameMatcher.identifierAnimationLonghandMap.has(text)) {\n      return new LinkableNameMatch(text, node, LinkableNameProperties.Animation);\n    }\n    // There can be multiple `animation` declarations splitted by a comma.\n    // So, we find the declaration nodes that are related to the node argument.\n    const declarations = ASTUtils.split(ASTUtils.siblings(ASTUtils.declValue(matching.ast.tree)));\n    const currentDeclarationNodes = declarations.find(\n        declaration => declaration[0].from <= node.from && declaration[declaration.length - 1].to >= node.to);\n    if (!currentDeclarationNodes) {\n      return null;\n    }\n\n    // We reparse here until the node argument since a variable might be\n    // providing a meaningful value such as a timing keyword,\n    // that might change the meaning of the node.\n    const computedText = matching.getComputedTextRange(currentDeclarationNodes[0], node);\n    const tokenized = tokenizeDeclaration('--p', computedText);\n    if (!tokenized) {\n      return null;\n    }\n\n    const identifierCategory =\n        LinkableNameMatcher.identifierAnimationLonghandMap.get(text);  // The category of the node argument\n    for (let itNode: typeof tokenized.tree|null = ASTUtils.declValue(tokenized.tree); itNode?.nextSibling;\n         itNode = itNode.nextSibling) {\n      // Run through all the nodes that come before node argument\n      // and check whether a value in the same category is found.\n      // if so, it means our identifier is an `animation-name` keyword.\n      if (itNode.name === 'ValueName') {\n        const categoryValue = LinkableNameMatcher.identifierAnimationLonghandMap.get(tokenized.text(itNode));\n        if (categoryValue && categoryValue === identifierCategory) {\n          return new LinkableNameMatch(text, node, LinkableNameProperties.Animation);\n        }\n      }\n    }\n\n    return null;\n  }\n\n  override accepts(propertyName: string): boolean {\n    return LinkableNameMatcher.isLinkableNameProperty(propertyName);\n  }\n\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): Match|null {\n    const {propertyName} = matching.ast;\n    const text = matching.ast.text(node);\n    const parentNode = node.parent;\n    if (!parentNode) {\n      return null;\n    }\n\n    const isParentADeclaration = parentNode.name === 'Declaration';\n    const isInsideVarCall = parentNode.name === 'ArgList' && parentNode.prevSibling?.name === 'Callee' &&\n        matching.ast.text(parentNode.prevSibling) === 'var';\n    const isAParentDeclarationOrVarCall = isParentADeclaration || isInsideVarCall;\n    // `position-try-options` and `position-try` only accepts names with dashed ident.\n    const shouldMatchOnlyVariableName = propertyName === LinkableNameProperties.PositionTry ||\n        propertyName === LinkableNameProperties.PositionTryOptions;\n    // We only mark top level nodes or nodes that are inside `var()` expressions as linkable names.\n    if (!propertyName || (node.name !== 'ValueName' && node.name !== 'VariableName') ||\n        !isAParentDeclarationOrVarCall || (node.name === 'ValueName' && shouldMatchOnlyVariableName)) {\n      return null;\n    }\n\n    if (propertyName === 'animation') {\n      return this.matchAnimationNameInShorthand(node, matching);\n    }\n\n    // The assertion here is safe since this matcher only runs for\n    // properties with names inside `LinkableNameProperties` (See the `accepts` function.)\n    return new LinkableNameMatch(text, node, propertyName as LinkableNameProperties);\n  }\n}\n\nexport class BezierMatch implements Match {\n  constructor(readonly text: string, readonly node: CodeMirror.SyntaxNode) {\n  }\n}\n\n// clang-format off\nexport class BezierMatcher extends matcherBase(BezierMatch) {\n  // clang-format on\n  override accepts(propertyName: string): boolean {\n    return SDK.CSSMetadata.cssMetadata().isBezierAwareProperty(propertyName);\n  }\n\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): Match|null {\n    const text = matching.ast.text(node);\n\n    const isCubicBezierKeyword = node.name === 'ValueName' && UI.Geometry.CubicBezier.KeywordValues.has(text);\n    const isCubicBezierOrLinearFunction = node.name === 'CallExpression' &&\n        ['cubic-bezier', 'linear'].includes(matching.ast.text(node.getChild('Callee')));\n\n    if (!isCubicBezierKeyword && !isCubicBezierOrLinearFunction) {\n      return null;\n    }\n\n    if (!InlineEditor.AnimationTimingModel.AnimationTimingModel.parse(text)) {\n      return null;\n    }\n    return new BezierMatch(text, node);\n  }\n}\n\nexport class StringMatch implements Match {\n  constructor(readonly text: string, readonly node: CodeMirror.SyntaxNode) {\n  }\n}\n\n// clang-format off\nexport class StringMatcher extends matcherBase(StringMatch) {\n  // clang-format on\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): Match|null {\n    return node.name === 'StringLiteral' ? new StringMatch(matching.ast.text(node), node) : null;\n  }\n}\n\nexport const enum ShadowType {\n  BoxShadow = 'boxShadow',\n  TextShadow = 'textShadow',\n}\nexport class ShadowMatch implements Match {\n  constructor(readonly text: string, readonly node: CodeMirror.SyntaxNode, readonly shadowType: ShadowType) {\n  }\n}\n\n// clang-format off\nexport class ShadowMatcher extends matcherBase(ShadowMatch) {\n  // clang-format on\n  override accepts(propertyName: string): boolean {\n    return SDK.CSSMetadata.cssMetadata().isShadowProperty(propertyName);\n  }\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): Match|null {\n    if (node.name !== 'Declaration') {\n      return null;\n    }\n    const valueNodes = ASTUtils.siblings(ASTUtils.declValue(node));\n    const valueText = matching.ast.textRange(valueNodes[0], valueNodes[valueNodes.length - 1]);\n    return new ShadowMatch(\n        valueText, node, matching.ast.propertyName === 'text-shadow' ? ShadowType.TextShadow : ShadowType.BoxShadow);\n  }\n}\n\nexport class FontMatch implements Match {\n  constructor(readonly text: string, readonly node: CodeMirror.SyntaxNode) {\n  }\n}\n\n// clang-format off\nexport class FontMatcher extends matcherBase(FontMatch) {\n  // clang-format on\n  override accepts(propertyName: string): boolean {\n    return SDK.CSSMetadata.cssMetadata().isFontAwareProperty(propertyName);\n  }\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): Match|null {\n    if (node.name === 'Declaration') {\n      return null;\n    }\n    const regex = matching.ast.propertyName === 'font-family' ? InlineEditor.FontEditorUtils.FontFamilyRegex :\n                                                                InlineEditor.FontEditorUtils.FontPropertiesRegex;\n    const text = matching.ast.text(node);\n    return regex.test(text) ? new FontMatch(text, node) : null;\n  }\n}\n\nexport class LengthMatch implements Match {\n  constructor(readonly text: string, readonly node: CodeMirror.SyntaxNode) {\n  }\n}\n\n// clang-format off\nexport class LengthMatcher extends matcherBase(LengthMatch) {\n  // clang-format on\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): Match|null {\n    const text = matching.ast.text(node);\n    const regexp = new RegExp(`^${InlineEditor.CSSLengthUtils.CSSLengthRegex}$`);\n    const match = regexp.exec(text);\n    if (!match || match.index !== 0) {\n      return null;\n    }\n    return new LengthMatch(match[0], node);\n  }\n}\n\nexport class GridTemplateMatch implements Match {\n  constructor(readonly text: string, readonly node: CodeMirror.SyntaxNode, readonly lines: CodeMirror.SyntaxNode[][]) {\n  }\n}\n\n// clang-format off\nexport class GridTemplateMatcher extends matcherBase(GridTemplateMatch) {\n  // clang-format on\n  override accepts(propertyName: string): boolean {\n    return SDK.CSSMetadata.cssMetadata().isGridAreaDefiningProperty(propertyName);\n  }\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): Match|null {\n    if (node.name !== 'Declaration' || matching.hasUnresolvedVars(node)) {\n      return null;\n    }\n\n    const lines: CodeMirror.SyntaxNode[][] = [];\n    let curLine: CodeMirror.SyntaxNode[] = [];\n    // The following two states are designed to consume different cases of LineNames:\n    // 1. no LineNames in between StringLiterals;\n    // 2. one LineNames in between, which means the LineNames belongs to the current line;\n    // 3. two LineNames in between, which means the second LineNames starts a new line.\n    // `hasLeadingLineNames` tracks if the current row already starts with a LineNames and\n    // with no following StringLiteral yet, which means that the next StringLiteral should\n    // be appended to the same `curLine`, instead of creating a new line.\n    let hasLeadingLineNames = false;\n    // `needClosingLineNames` tracks if the current row can still consume an optional LineNames,\n    // which will decide if we should start a new line or not when a LineNames is encountered.\n    let needClosingLineNames = false;\n    // Gather row definitions of [<line-names>? <string> <track-size>? <line-names>?], which\n    // be rendered into separate lines.\n    function parseNodes(nodes: CodeMirror.SyntaxNode[], varParsingMode = false): void {\n      for (const curNode of nodes) {\n        if (matching.getMatch(curNode) instanceof SDK.CSSPropertyParser.VariableMatch) {\n          const computedValueTree = tokenizeDeclaration('--property', matching.getComputedText(curNode));\n          if (!computedValueTree) {\n            continue;\n          }\n          const varNodes = ASTUtils.siblings(ASTUtils.declValue(computedValueTree.tree));\n          if (varNodes.length === 0) {\n            continue;\n          }\n          if ((varNodes[0].name === 'StringLiteral' && !hasLeadingLineNames) ||\n              (varNodes[0].name === 'LineNames' && !needClosingLineNames)) {\n            // The variable value either starts with a string, or with a line name that belongs to a new row;\n            // therefore we start a new line with the variable.\n            lines.push(curLine);\n            curLine = [curNode];\n          } else {\n            curLine.push(curNode);\n          }\n          // We parse computed nodes of this variable to correctly advance local states, but\n          // these computed nodes won't be added to the lines.\n          parseNodes(varNodes, true);\n        } else if (curNode.name === 'BinaryExpression') {\n          parseNodes(ASTUtils.siblings(curNode.firstChild));\n        } else if (curNode.name === 'StringLiteral') {\n          if (!varParsingMode) {\n            if (hasLeadingLineNames) {\n              curLine.push(curNode);\n            } else {\n              lines.push(curLine);\n              curLine = [curNode];\n            }\n          }\n          needClosingLineNames = true;\n          hasLeadingLineNames = false;\n        } else if (curNode.name === 'LineNames') {\n          if (!varParsingMode) {\n            if (needClosingLineNames) {\n              curLine.push(curNode);\n            } else {\n              lines.push(curLine);\n              curLine = [curNode];\n            }\n          }\n          hasLeadingLineNames = !needClosingLineNames;\n          needClosingLineNames = !needClosingLineNames;\n        } else if (!varParsingMode) {\n          curLine.push(curNode);\n        }\n      }\n    }\n\n    const valueNodes = ASTUtils.siblings(ASTUtils.declValue(node));\n    parseNodes(valueNodes);\n    lines.push(curLine);\n    const valueText = matching.ast.textRange(valueNodes[0], valueNodes[valueNodes.length - 1]);\n    return new GridTemplateMatch(valueText, node, lines.filter(line => line.length > 0));\n  }\n}\nexport class AnchorFunctionMatch implements Match {\n  constructor(\n      readonly text: string, readonly matching: BottomUpTreeMatching, readonly node: CodeMirror.SyntaxNode,\n      readonly functionName: string, readonly args: CodeMirror.SyntaxNode[]) {\n  }\n}\n\n// clang-format off\nexport class AnchorFunctionMatcher extends matcherBase(AnchorFunctionMatch) {\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): Match|null {\n    if (node.name !== 'CallExpression') {\n      return null;\n    }\n\n    const calleeText = matching.ast.text(node.getChild('Callee'));\n    if (calleeText !== 'anchor' && calleeText !== 'anchor-size') {\n      return null;\n    }\n\n    const [firstArg] = ASTUtils.callArgs(node);\n    if (!firstArg || firstArg.length === 0) {\n      return null;\n    }\n\n    return new AnchorFunctionMatch(matching.ast.text(node), matching, node, calleeText, firstArg);\n  }\n}\n// clang-format on\n\n// For linking `position-anchor: --anchor-name`.\nexport class PositionAnchorMatch implements Match {\n  constructor(readonly text: string, readonly matching: BottomUpTreeMatching, readonly node: CodeMirror.SyntaxNode) {\n  }\n}\n\n// clang-format off\nexport class PositionAnchorMatcher extends matcherBase(PositionAnchorMatch) {\n  override accepts(propertyName: string): boolean {\n    return propertyName === 'position-anchor';\n  }\n\n  override matches(node: CodeMirror.SyntaxNode, matching: BottomUpTreeMatching): Match|null {\n    if (node.name !== 'VariableName') {\n      return null;\n    }\n\n    const dashedIdentifier = matching.ast.text(node);\n    return new PositionAnchorMatch(dashedIdentifier, matching, node);\n  }\n}\n// clang-format on\n"]}