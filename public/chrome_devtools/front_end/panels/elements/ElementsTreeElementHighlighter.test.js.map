{"version":3,"file":"ElementsTreeElementHighlighter.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/elements/ElementsTreeElementHighlighter.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport {createTarget, stubNoopSettings} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\n\nimport * as Elements from './elements.js';\n\ndescribeWithMockConnection('ElementsTreeElementHighlighter', () => {\n  let target: SDK.Target.Target;\n  let treeOutline: Elements.ElementsTreeOutline.ElementsTreeOutline;\n  let throttler: Common.Throttler.Throttler;\n  let throttlerSchedule: sinon.SinonStub;\n\n  beforeEach(() => {\n    stubNoopSettings();\n    target = createTarget();\n    treeOutline = new Elements.ElementsTreeOutline.ElementsTreeOutline();\n    treeOutline.wireToDOMModel(target.model(SDK.DOMModel.DOMModel) as SDK.DOMModel.DOMModel);\n    throttler = new Common.Throttler.Throttler(0);\n    throttlerSchedule = sinon.stub(throttler, 'schedule');\n    throttlerSchedule.resolves();\n  });\n\n  const highlightsNodeOnRequestEvent = (inScope: boolean) => () => {\n    SDK.TargetManager.TargetManager.instance().setScopeTarget(inScope ? target : null);\n    new Elements.ElementsTreeElementHighlighter.ElementsTreeElementHighlighter(treeOutline, throttler);\n\n    const model = target.model(SDK.OverlayModel.OverlayModel);\n    assert.exists(model);\n    const node = new SDK.DOMModel.DOMNode(target.model(SDK.DOMModel.DOMModel) as SDK.DOMModel.DOMModel);\n    const treeElement = new Elements.ElementsTreeElement.ElementsTreeElement(node, /* isClosingTag=*/ true);\n    sinon.stub(treeOutline, 'createTreeElementFor').withArgs(node).returns(treeElement);\n    const treeOutlineSetHoverEffect = sinon.spy(treeOutline, 'setHoverEffect');\n    const treeElementReveal = sinon.spy(treeElement, 'reveal');\n\n    model.dispatchEventToListeners(SDK.OverlayModel.Events.HighlightNodeRequested, node);\n    assert.strictEqual(throttlerSchedule.calledOnce, inScope);\n    if (inScope) {\n      throttlerSchedule.firstCall.firstArg();\n      assert.isTrue(treeOutlineSetHoverEffect.calledOnce);\n      assert.isTrue(treeElementReveal.called);\n    }\n  };\n\n  it('highlights node on in scope request event', highlightsNodeOnRequestEvent(true));\n  it('highlights node on out of scope request event', highlightsNodeOnRequestEvent(false));\n});\n"]}