{"version":3,"file":"CSSPropertyIconResolver.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/elements/components/CSSPropertyIconResolver.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as ElementsComponents from './components.js';\n\ndescribe('CSSPropertyIconResolver', () => {\n  function mapFromStyle(style: {[key: string]: string|undefined}) {\n    const result = new Map();\n    for (const key of Object.keys(style)) {\n      result.set(key, style[key]);\n    }\n    return result;\n  }\n\n  it('can computed actual directions for row and column', () => {\n    const tests = [\n      {\n        style: {\n          'direction': 'ltr',\n          display: 'flex',\n        },\n        expected: {\n          row: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.LEFT_TO_RIGHT,\n          column: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.TOP_TO_BOTTOM,\n          'row-reverse': ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.RIGHT_TO_LEFT,\n          'column-reverse': ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.BOTTOM_TO_TOP,\n        },\n      },\n      {\n        style: {\n          'direction': 'ltr',\n          'writing-mode': 'vertical-rl',\n          display: 'flex',\n        },\n        expected: {\n          row: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.TOP_TO_BOTTOM,\n          column: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.RIGHT_TO_LEFT,\n          'row-reverse': ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.BOTTOM_TO_TOP,\n          'column-reverse': ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.LEFT_TO_RIGHT,\n        },\n      },\n      {\n        style: {\n          'direction': 'ltr',\n          'writing-mode': 'vertical-lr',\n          display: 'flex',\n        },\n        expected: {\n          row: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.TOP_TO_BOTTOM,\n          column: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.LEFT_TO_RIGHT,\n          'row-reverse': ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.BOTTOM_TO_TOP,\n          'column-reverse': ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.RIGHT_TO_LEFT,\n        },\n      },\n      {\n        style: {\n          'direction': 'ltr',\n          'writing-mode': 'tb',\n          display: 'flex',\n        },\n        expected: {\n          row: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.TOP_TO_BOTTOM,\n          column: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.RIGHT_TO_LEFT,\n          'row-reverse': ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.BOTTOM_TO_TOP,\n          'column-reverse': ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.LEFT_TO_RIGHT,\n        },\n      },\n      {\n        style: {\n          'direction': 'ltr',\n          'writing-mode': 'tb-rl',\n          display: 'flex',\n        },\n        expected: {\n          row: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.TOP_TO_BOTTOM,\n          column: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.RIGHT_TO_LEFT,\n          'row-reverse': ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.BOTTOM_TO_TOP,\n          'column-reverse': ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.LEFT_TO_RIGHT,\n        },\n      },\n      {\n        style: {\n          'direction': 'rtl',\n          display: 'flex',\n        },\n        expected: {\n          row: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.RIGHT_TO_LEFT,\n          column: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.TOP_TO_BOTTOM,\n          'row-reverse': ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.LEFT_TO_RIGHT,\n          'column-reverse': ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.BOTTOM_TO_TOP,\n        },\n      },\n      {\n        style: {\n          'direction': 'rtl',\n          'writing-mode': 'vertical-rl',\n          display: 'flex',\n        },\n        expected: {\n          row: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.BOTTOM_TO_TOP,\n          column: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.RIGHT_TO_LEFT,\n          'row-reverse': ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.TOP_TO_BOTTOM,\n          'column-reverse': ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.LEFT_TO_RIGHT,\n        },\n      },\n      {\n        style: {\n          'direction': 'rtl',\n          'writing-mode': 'vertical-lr',\n          display: 'flex',\n        },\n        expected: {\n          row: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.BOTTOM_TO_TOP,\n          column: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.LEFT_TO_RIGHT,\n          'row-reverse': ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.TOP_TO_BOTTOM,\n          'column-reverse': ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.RIGHT_TO_LEFT,\n        },\n      },\n      {\n        style: {\n          'direction': 'rtl',\n          'writing-mode': 'tb',\n          display: 'flex',\n        },\n        expected: {\n          row: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.BOTTOM_TO_TOP,\n          column: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.RIGHT_TO_LEFT,\n          'row-reverse': ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.TOP_TO_BOTTOM,\n          'column-reverse': ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.LEFT_TO_RIGHT,\n        },\n      },\n      {\n        style: {\n          'direction': 'rtl',\n          'writing-mode': 'tb-rl',\n          display: 'flex',\n        },\n        expected: {\n          row: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.BOTTOM_TO_TOP,\n          column: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.RIGHT_TO_LEFT,\n          'row-reverse': ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.TOP_TO_BOTTOM,\n          'column-reverse': ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.LEFT_TO_RIGHT,\n        },\n      },\n    ];\n\n    for (const test of tests) {\n      assert.deepEqual(\n          ElementsComponents.CSSPropertyIconResolver.getPhysicalDirections(mapFromStyle(test.style)), test.expected,\n          `Test ${JSON.stringify(test.style)} failed.`);\n    }\n  });\n\n  it('can rotate the icon', () => {\n    assert.deepEqual(\n        ElementsComponents.CSSPropertyIconResolver.rotateFlexDirectionIcon(\n            ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.LEFT_TO_RIGHT),\n        {\n          iconName: 'flex-direction',\n          rotate: -90,\n          scaleX: -1,\n          scaleY: 1,\n        });\n    assert.deepEqual(\n        ElementsComponents.CSSPropertyIconResolver.rotateFlexDirectionIcon(\n            ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.RIGHT_TO_LEFT),\n        {\n          iconName: 'flex-direction',\n          rotate: 90,\n          scaleX: 1,\n          scaleY: 1,\n        });\n    assert.deepEqual(\n        ElementsComponents.CSSPropertyIconResolver.rotateFlexDirectionIcon(\n            ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.TOP_TO_BOTTOM),\n        {\n          iconName: 'flex-direction',\n          rotate: 0,\n          scaleX: 1,\n          scaleY: 1,\n        });\n    assert.deepEqual(\n        ElementsComponents.CSSPropertyIconResolver.rotateFlexDirectionIcon(\n            ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.BOTTOM_TO_TOP),\n        {\n          iconName: 'flex-direction',\n          rotate: 0,\n          scaleX: 1,\n          scaleY: -1,\n        });\n  });\n\n  it('can find an icon for flex-direction row', () => {\n    const tests = [\n      {\n        style: {\n          'direction': 'ltr',\n          display: 'flex',\n        },\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.LEFT_TO_RIGHT,\n      },\n      {\n        style: {\n          'direction': 'ltr',\n          'writing-mode': 'tb',\n          display: 'flex',\n        },\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.TOP_TO_BOTTOM,\n      },\n      {\n        style: {\n          'direction': 'ltr',\n          'writing-mode': 'vertical-lr',\n          display: 'flex',\n        },\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.TOP_TO_BOTTOM,\n      },\n      {\n        style: {\n          'direction': 'ltr',\n          'writing-mode': 'vertical-rl',\n          display: 'flex',\n        },\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.TOP_TO_BOTTOM,\n      },\n      {\n        style: {\n          'direction': 'ltr',\n          'writing-mode': 'tb-rl',\n          display: 'flex',\n        },\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.TOP_TO_BOTTOM,\n      },\n      {\n        style: {\n          'direction': 'rtl',\n          display: 'flex',\n        },\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.RIGHT_TO_LEFT,\n      },\n      {\n        style: {\n          'direction': 'rtl',\n          'writing-mode': 'tb',\n          display: 'flex',\n        },\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.BOTTOM_TO_TOP,\n      },\n      {\n        style: {\n          'direction': 'rtl',\n          'writing-mode': 'vertical-lr',\n          display: 'flex',\n        },\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.BOTTOM_TO_TOP,\n      },\n      {\n        style: {\n          'direction': 'rtl',\n          'writing-mode': 'vertical-rl',\n          display: 'flex',\n        },\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.BOTTOM_TO_TOP,\n      },\n      {\n        style: {\n          'direction': 'rtl',\n          'writing-mode': 'tb-rl',\n          display: 'flex',\n        },\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.BOTTOM_TO_TOP,\n      },\n    ];\n    for (const test of tests) {\n      assert.deepEqual(\n          ElementsComponents.CSSPropertyIconResolver.findIcon('flex-direction: row', mapFromStyle(test.style)),\n          ElementsComponents.CSSPropertyIconResolver.rotateFlexDirectionIcon(test.expected),\n          `Test 'flex-direction: row'(${JSON.stringify(test.style)}) failed.`);\n\n      assert.deepEqual(\n          ElementsComponents.CSSPropertyIconResolver.findIcon('flex-direction: row-reverse', mapFromStyle(test.style)),\n          ElementsComponents.CSSPropertyIconResolver.rotateFlexDirectionIcon(\n              ElementsComponents.CSSPropertyIconResolver.reverseDirection(test.expected)),\n          `Test 'flex-direction: row-reverse'(${JSON.stringify(test.style)}) failed.`);\n    }\n  });\n\n  it('can find an icon for flex-direction: column and column-reverse', () => {\n    const tests = [\n      {\n        style: {\n          'direction': 'ltr',\n          display: 'flex',\n        },\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.TOP_TO_BOTTOM,\n      },\n      {\n        style: {\n          'writing-mode': 'vertical-rl',\n          display: 'flex',\n        },\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.RIGHT_TO_LEFT,\n      },\n      {\n        style: {\n          'writing-mode': 'vertical-lr',\n          display: 'flex',\n        },\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.LEFT_TO_RIGHT,\n      },\n    ];\n\n    for (const test of tests) {\n      assert.deepEqual(\n          ElementsComponents.CSSPropertyIconResolver.findIcon('flex-direction: column', mapFromStyle(test.style)),\n          ElementsComponents.CSSPropertyIconResolver.rotateFlexDirectionIcon(test.expected),\n          `Test 'flex-direction: column'(${JSON.stringify(test.style)}) failed.`);\n\n      assert.deepEqual(\n          ElementsComponents.CSSPropertyIconResolver.findIcon(\n              'flex-direction: column-reverse', mapFromStyle(test.style)),\n          ElementsComponents.CSSPropertyIconResolver.rotateFlexDirectionIcon(\n              ElementsComponents.CSSPropertyIconResolver.reverseDirection(test.expected)),\n          `Test 'flex-direction: column-reverse'(${JSON.stringify(test.style)}) failed.`);\n    }\n  });\n\n  it('can rotate an icon for align-content', () => {\n    const iconName = 'iconName';\n    assert.deepEqual(\n        ElementsComponents.CSSPropertyIconResolver.rotateAlignContentIcon(\n            iconName, ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.LEFT_TO_RIGHT),\n        {\n          iconName,\n          rotate: -90,\n          scaleX: 1,\n          scaleY: 1,\n        });\n    assert.deepEqual(\n        ElementsComponents.CSSPropertyIconResolver.rotateAlignContentIcon(\n            iconName, ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.RIGHT_TO_LEFT),\n        {\n          iconName,\n          rotate: 90,\n          scaleX: 1,\n          scaleY: 1,\n        });\n    assert.deepEqual(\n        ElementsComponents.CSSPropertyIconResolver.rotateAlignContentIcon(\n            iconName, ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.TOP_TO_BOTTOM),\n        {\n          iconName,\n          rotate: 0,\n          scaleX: 1,\n          scaleY: 1,\n        });\n    assert.deepEqual(\n        ElementsComponents.CSSPropertyIconResolver.rotateAlignContentIcon(\n            iconName, ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.BOTTOM_TO_TOP),\n        {\n          iconName,\n          rotate: 0,\n          scaleX: 1,\n          scaleY: 1,\n        });\n  });\n\n  it('can find an icon for align-content properties', () => {\n    const tests = [\n      // flexbox\n      {\n        style: {\n          'flex-direction': 'row',\n          'align-content': 'center',\n          display: 'flex',\n        },\n        iconName: 'align-content-center',\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.TOP_TO_BOTTOM,\n      },\n      {\n        style: {\n          'flex-direction': 'column',\n          'align-content': 'center',\n          display: 'flex',\n        },\n        iconName: 'align-content-center',\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.LEFT_TO_RIGHT,\n      },\n      {\n        style: {\n          'flex-direction': 'row',\n          'align-content': 'center',\n          'writing-mode': 'vertical-rl',\n          display: 'flex',\n        },\n        iconName: 'align-content-center',\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.RIGHT_TO_LEFT,\n      },\n      {\n        style: {\n          'flex-direction': 'row',\n          'align-content': 'center',\n          'writing-mode': 'vertical-lr',\n          display: 'flex',\n        },\n        iconName: 'align-content-center',\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.LEFT_TO_RIGHT,\n      },\n      {\n        style: {\n          'flex-direction': 'row-reverse',\n          'align-content': 'center',\n          'writing-mode': 'vertical-rl',\n          display: 'flex',\n        },\n        iconName: 'align-content-center',\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.RIGHT_TO_LEFT,\n      },\n      // grid\n      {\n        style: {\n          'align-content': 'center',\n          display: 'grid',\n        },\n        iconName: 'align-content-center',\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.TOP_TO_BOTTOM,\n      },\n      {\n        style: {\n          'align-content': 'center',\n          'writing-mode': 'vertical-rl',\n          display: 'grid',\n        },\n        iconName: 'align-content-center',\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.RIGHT_TO_LEFT,\n      },\n    ];\n\n    for (const test of tests) {\n      assert.deepEqual(\n          ElementsComponents.CSSPropertyIconResolver.findIcon(\n              `align-content: ${test.style['align-content']}`, mapFromStyle(test.style)),\n          ElementsComponents.CSSPropertyIconResolver.rotateAlignContentIcon(test.iconName, test.expected),\n          `Test align-content(${JSON.stringify(test.style)}) failed.`);\n    }\n  });\n\n  it('can rotate an icon for justify-content', () => {\n    const iconName = 'iconName';\n    assert.deepEqual(\n        ElementsComponents.CSSPropertyIconResolver.rotateJustifyContentIcon(\n            iconName, ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.LEFT_TO_RIGHT),\n        {\n          iconName,\n          rotate: 0,\n          scaleX: 1,\n          scaleY: 1,\n        });\n    assert.deepEqual(\n        ElementsComponents.CSSPropertyIconResolver.rotateJustifyContentIcon(\n            iconName, ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.RIGHT_TO_LEFT),\n        {\n          iconName,\n          rotate: 0,\n          scaleX: -1,\n          scaleY: 1,\n        });\n    assert.deepEqual(\n        ElementsComponents.CSSPropertyIconResolver.rotateJustifyContentIcon(\n            iconName, ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.TOP_TO_BOTTOM),\n        {\n          iconName,\n          rotate: 90,\n          scaleX: 1,\n          scaleY: 1,\n        });\n    assert.deepEqual(\n        ElementsComponents.CSSPropertyIconResolver.rotateJustifyContentIcon(\n            iconName, ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.BOTTOM_TO_TOP),\n        {\n          iconName,\n          rotate: -90,\n          scaleX: 1,\n          scaleY: 1,\n        });\n  });\n\n  it('can find an icon for justify-content properties', () => {\n    const tests = [\n      // flexbox\n      {\n        style: {\n          'flex-direction': 'row',\n          'justify-content': 'center',\n          display: 'flex',\n        },\n        iconName: 'justify-content-center',\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.LEFT_TO_RIGHT,\n      },\n      {\n        style: {\n          'flex-direction': 'column',\n          'justify-content': 'center',\n          display: 'flex',\n        },\n        iconName: 'justify-content-center',\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.TOP_TO_BOTTOM,\n      },\n      {\n        style: {\n          'flex-direction': 'row',\n          'justify-content': 'center',\n          'writing-mode': 'vertical-rl',\n          display: 'flex',\n        },\n        iconName: 'justify-content-center',\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.TOP_TO_BOTTOM,\n      },\n      {\n        style: {\n          'flex-direction': 'row',\n          'justify-content': 'center',\n          'writing-mode': 'vertical-lr',\n          display: 'flex',\n        },\n        iconName: 'justify-content-center',\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.TOP_TO_BOTTOM,\n      },\n      {\n        style: {\n          'flex-direction': 'row-reverse',\n          'justify-content': 'center',\n          display: 'flex',\n        },\n        iconName: 'justify-content-center',\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.RIGHT_TO_LEFT,\n      },\n      // grid\n      {\n        style: {\n          'justify-content': 'center',\n          display: 'grid',\n        },\n        iconName: 'justify-content-center',\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.LEFT_TO_RIGHT,\n      },\n      {\n        style: {\n          'justify-content': 'center',\n          'writing-mode': 'vertical-rl',\n          display: 'grid',\n        },\n        iconName: 'justify-content-center',\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.TOP_TO_BOTTOM,\n      },\n    ];\n\n    for (const test of tests) {\n      assert.deepEqual(\n          ElementsComponents.CSSPropertyIconResolver.findIcon(\n              `justify-content: ${test.style['justify-content']}`, mapFromStyle(test.style)),\n          ElementsComponents.CSSPropertyIconResolver.rotateJustifyContentIcon(test.iconName, test.expected),\n          `Test justify-content(${JSON.stringify(test.style)}) failed.`);\n    }\n  });\n\n  it('can rotate an icon for align-items', () => {\n    const iconName = 'iconName';\n    assert.deepEqual(\n        ElementsComponents.CSSPropertyIconResolver.rotateAlignItemsIcon(\n            iconName, ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.LEFT_TO_RIGHT),\n        {\n          iconName,\n          rotate: -90,\n          scaleX: 1,\n          scaleY: 1,\n        });\n    assert.deepEqual(\n        ElementsComponents.CSSPropertyIconResolver.rotateAlignItemsIcon(\n            iconName, ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.RIGHT_TO_LEFT),\n        {\n          iconName,\n          rotate: 90,\n          scaleX: 1,\n          scaleY: 1,\n        });\n    assert.deepEqual(\n        ElementsComponents.CSSPropertyIconResolver.rotateAlignItemsIcon(\n            iconName, ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.TOP_TO_BOTTOM),\n        {\n          iconName,\n          rotate: 0,\n          scaleX: 1,\n          scaleY: 1,\n        });\n    assert.deepEqual(\n        ElementsComponents.CSSPropertyIconResolver.rotateAlignItemsIcon(\n            iconName, ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.BOTTOM_TO_TOP),\n        {\n          iconName,\n          rotate: 0,\n          scaleX: 1,\n          scaleY: 1,\n        });\n  });\n\n  it('can find an icon for align-items properties', () => {\n    const tests = [\n      // flexbox\n      {\n        style: {\n          'flex-direction': 'row',\n          'align-items': 'flex-start',\n          display: 'flex',\n        },\n        iconName: 'align-items-start',\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.TOP_TO_BOTTOM,\n      },\n      {\n        style: {\n          'flex-direction': 'column',\n          'align-items': 'flex-start',\n          display: 'flex',\n        },\n        iconName: 'align-items-start',\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.LEFT_TO_RIGHT,\n      },\n      {\n        style: {\n          'flex-direction': 'row',\n          'align-items': 'flex-start',\n          'writing-mode': 'vertical-rl',\n          display: 'flex',\n        },\n        iconName: 'align-items-start',\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.RIGHT_TO_LEFT,\n      },\n      {\n        style: {\n          'flex-direction': 'row',\n          'align-items': 'flex-start',\n          'writing-mode': 'vertical-lr',\n          display: 'flex',\n        },\n        iconName: 'align-items-start',\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.LEFT_TO_RIGHT,\n      },\n      {\n        style: {\n          'flex-direction': 'column-reverse',\n          'align-items': 'flex-start',\n          display: 'flex',\n        },\n        iconName: 'align-items-start',\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.LEFT_TO_RIGHT,\n      },\n      // grid\n      {\n        style: {\n          'align-items': 'start',\n          display: 'grid',\n        },\n        iconName: 'align-items-start',\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.TOP_TO_BOTTOM,\n      },\n      {\n        style: {\n          'align-items': 'start',\n          'writing-mode': 'vertical-lr',\n          display: 'grid',\n        },\n        iconName: 'align-items-start',\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.LEFT_TO_RIGHT,\n      },\n    ];\n\n    for (const test of tests) {\n      assert.deepEqual(\n          ElementsComponents.CSSPropertyIconResolver.findIcon(\n              `align-items: ${test.style['align-items']}`, mapFromStyle(test.style)),\n          ElementsComponents.CSSPropertyIconResolver.rotateAlignItemsIcon(test.iconName, test.expected),\n          `Test align-items(${JSON.stringify(test.style)}) failed.`);\n    }\n  });\n\n  it('can find baseline icons', () => {\n    const baselineIconInfo = {\n      iconName: 'align-items-baseline',\n      rotate: 0,\n      scaleX: 1,\n      scaleY: 1,\n    };\n    assert.deepEqual(\n        ElementsComponents.CSSPropertyIconResolver.findIcon('align-items: baseline', mapFromStyle({display: 'flex'})),\n        baselineIconInfo, 'Assertion for the \\'align-items: baseline\\' icon failed.');\n\n    assert.deepEqual(\n        ElementsComponents.CSSPropertyIconResolver.findIcon(\n            'align-self: baseline', null, mapFromStyle({display: 'flex'})),\n        baselineIconInfo, 'Assertion for the \\'align-self: baseline\\' icon failed.');\n\n    assert.deepEqual(\n        ElementsComponents.CSSPropertyIconResolver.findIcon('align-content: baseline', mapFromStyle({display: 'flex'})),\n        baselineIconInfo, 'Assertion for the \\'align-content: baseline\\' icon failed.');\n  });\n\n  it('can find an icon for align-self properties', () => {\n    const tests = [\n      // flexbox\n      {\n        style: {\n          'align-self': 'flex-start',\n        },\n        parentStyle: {\n          'flex-direction': 'row',\n          display: 'flex',\n        },\n        iconName: 'align-self-start',\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.TOP_TO_BOTTOM,\n      },\n      {\n        style: {\n          'align-self': 'flex-start',\n        },\n        parentStyle: {\n          'flex-direction': 'column',\n          display: 'flex',\n        },\n        iconName: 'align-self-start',\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.LEFT_TO_RIGHT,\n      },\n      {\n        style: {\n          'align-self': 'flex-start',\n        },\n        parentStyle: {\n          'flex-direction': 'row',\n          'writing-mode': 'vertical-rl',\n          display: 'flex',\n        },\n        iconName: 'align-self-start',\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.RIGHT_TO_LEFT,\n      },\n      {\n        style: {\n          'align-self': 'flex-start',\n        },\n        parentStyle: {\n          'writing-mode': 'vertical-lr',\n          'flex-direction': 'row',\n          display: 'flex',\n        },\n        iconName: 'align-self-start',\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.LEFT_TO_RIGHT,\n      },\n      {\n        style: {\n          'align-self': 'flex-start',\n        },\n        parentStyle: {\n          'flex-direction': 'column-reverse',\n          display: 'flex',\n        },\n        iconName: 'align-self-start',\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.LEFT_TO_RIGHT,\n      },\n      // grid\n      {\n        style: {\n          'align-self': 'start',\n        },\n        parentStyle: {\n          display: 'grid',\n        },\n        iconName: 'align-self-start',\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.TOP_TO_BOTTOM,\n      },\n      {\n        style: {\n          'align-self': 'start',\n        },\n        parentStyle: {\n          'writing-mode': 'vertical-rl',\n          display: 'grid',\n        },\n        iconName: 'align-self-start',\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.RIGHT_TO_LEFT,\n      },\n      {\n        style: {\n          'align-self': 'start',\n        },\n        parentStyle: {\n          'writing-mode': 'vertical-lr',\n          display: 'grid',\n        },\n        iconName: 'align-self-start',\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.LEFT_TO_RIGHT,\n      },\n    ];\n\n    for (const test of tests) {\n      assert.deepEqual(\n          ElementsComponents.CSSPropertyIconResolver.findIcon(\n              `align-self: ${test.style['align-self']}`, mapFromStyle(test.style), mapFromStyle(test.parentStyle)),\n          ElementsComponents.CSSPropertyIconResolver.rotateAlignItemsIcon(test.iconName, test.expected),\n          `Test align-self(${JSON.stringify(test.style)}) failed.`);\n    }\n  });\n\n  it('can find an icon for flex-wrap properties', () => {\n    const tests = [\n      {\n        style: {\n          'flex-direction': 'row',\n          'flex-wrap': 'wrap',\n          display: 'flex',\n        },\n        iconName: 'flex-wrap',\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.LEFT_TO_RIGHT,\n      },\n      {\n        style: {\n          'flex-direction': 'row',\n          'flex-wrap': 'nowrap',\n          display: 'flex',\n        },\n        iconName: 'flex-no-wrap',\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.LEFT_TO_RIGHT,\n      },\n      {\n        style: {\n          'flex-direction': 'column',\n          'flex-wrap': 'wrap',\n          display: 'flex',\n        },\n        iconName: 'flex-wrap',\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.TOP_TO_BOTTOM,\n      },\n      {\n        style: {\n          'flex-direction': 'column',\n          'flex-wrap': 'nowrap',\n          display: 'flex',\n        },\n        iconName: 'flex-no-wrap',\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.TOP_TO_BOTTOM,\n      },\n    ];\n\n    for (const test of tests) {\n      assert.deepEqual(\n          ElementsComponents.CSSPropertyIconResolver.findIcon(\n              `flex-wrap: ${test.style['flex-wrap']}`, mapFromStyle(test.style)),\n          ElementsComponents.CSSPropertyIconResolver.roateFlexWrapIcon(test.iconName, test.expected),\n          `Test flex-wrap(${JSON.stringify(test.style)}) failed.`);\n    }\n  });\n\n  it('can rotate an icon for justify-items', () => {\n    const iconName = 'iconName';\n    assert.deepEqual(\n        ElementsComponents.CSSPropertyIconResolver.rotateJustifyItemsIcon(\n            iconName, ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.LEFT_TO_RIGHT),\n        {\n          iconName,\n          rotate: 0,\n          scaleX: 1,\n          scaleY: 1,\n        });\n    assert.deepEqual(\n        ElementsComponents.CSSPropertyIconResolver.rotateJustifyItemsIcon(\n            iconName, ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.RIGHT_TO_LEFT),\n        {\n          iconName,\n          rotate: 0,\n          scaleX: -1,\n          scaleY: 1,\n        });\n    assert.deepEqual(\n        ElementsComponents.CSSPropertyIconResolver.rotateJustifyItemsIcon(\n            iconName, ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.TOP_TO_BOTTOM),\n        {\n          iconName,\n          rotate: 90,\n          scaleX: 1,\n          scaleY: 1,\n        });\n    assert.deepEqual(\n        ElementsComponents.CSSPropertyIconResolver.rotateJustifyItemsIcon(\n            iconName, ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.BOTTOM_TO_TOP),\n        {\n          iconName,\n          rotate: -90,\n          scaleX: 1,\n          scaleY: 1,\n        });\n  });\n\n  it('can find an icon for justify-items properties', () => {\n    const tests = [\n      // grid\n      {\n        style: {\n          'justify-items': 'start',\n          display: 'grid',\n        },\n        iconName: 'justify-items-start',\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.TOP_TO_BOTTOM,\n      },\n      {\n        style: {\n          'justify-items': 'start',\n          'writing-mode': 'vertical-lr',\n          display: 'grid',\n        },\n        iconName: 'justify-items-start',\n        expected: ElementsComponents.CSSPropertyIconResolver.PhysicalDirection.RIGHT_TO_LEFT,\n      },\n    ];\n\n    for (const test of tests) {\n      assert.deepEqual(\n          ElementsComponents.CSSPropertyIconResolver.findIcon(\n              `justify-items: ${test.style['justify-items']}`, mapFromStyle(test.style)),\n          ElementsComponents.CSSPropertyIconResolver.rotateAlignItemsIcon(test.iconName, test.expected),\n          `Test justify-items(${JSON.stringify(test.style)}) failed.`);\n    }\n  });\n});\n"]}