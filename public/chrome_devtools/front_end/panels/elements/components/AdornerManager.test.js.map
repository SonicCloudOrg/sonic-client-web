{"version":3,"file":"AdornerManager.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/elements/components/AdornerManager.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as ElementsComponents from './components.js';\n\nclass FakeSettingStore {\n  #store: ElementsComponents.AdornerManager.AdornerSetting[];\n\n  constructor(store: ElementsComponents.AdornerManager.AdornerSetting[]) {\n    this.#store = store;\n  }\n\n  get(): ElementsComponents.AdornerManager.AdornerSetting[] {\n    return this.#store;\n  }\n\n  set(settings: ElementsComponents.AdornerManager.AdornerSetting[]) {\n    this.#store = settings;\n  }\n}\n\ndescribe('AdornerManager', () => {\n  it('can sync badge settings with the settings store correctly', () => {\n    const nonexistentAdorner = '__SHOULD_NEVER_EXIST__';\n    const settingStore = new FakeSettingStore([\n      {\n        adorner: nonexistentAdorner,\n        isEnabled: true,\n      },\n    ]);\n    const adornerManager = new ElementsComponents.AdornerManager.AdornerManager(settingStore);\n    const syncedSettings = adornerManager.getSettings();\n    assert.isFalse(\n        syncedSettings.has(nonexistentAdorner),\n        'setting-syncing should remove nonexistent adorners from setting store');\n\n    for (const {adorner, isEnabled} of ElementsComponents.AdornerManager.DefaultAdornerSettings) {\n      assert.isTrue(syncedSettings.has(adorner), 'synced settings should contain default adorners');\n      assert.strictEqual(\n          syncedSettings.get(adorner), isEnabled, 'synced default setting should store the correct value');\n    }\n\n    assert.sameDeepMembers(\n        settingStore.get(), ElementsComponents.AdornerManager.DefaultAdornerSettings,\n        'the setting store should be persisted with the updated settings');\n  });\n\n  it('can preserve persisted setting after syncing', () => {\n    const {adorner, isEnabled} = ElementsComponents.AdornerManager.DefaultAdornerSettings[0];\n    const updatedSetting = !isEnabled;\n    const adornerManager = new ElementsComponents.AdornerManager.AdornerManager(new FakeSettingStore([\n      {\n        adorner,\n        isEnabled: updatedSetting,\n      },\n    ]));\n    assert.isTrue(adornerManager.getSettings().has(adorner), 'synced settings should contain existing adorners');\n    assert.strictEqual(\n        adornerManager.isAdornerEnabled(adorner), updatedSetting,\n        'synced setting should preserve previously persisted value');\n  });\n\n  it('can update settings to be persisted', () => {\n    const {adorner, isEnabled} = ElementsComponents.AdornerManager.DefaultAdornerSettings[0];\n    const updatedSetting = !isEnabled;\n    const settingStore = new FakeSettingStore([]);\n    const adornerManager = new ElementsComponents.AdornerManager.AdornerManager(settingStore);\n    adornerManager.updateSettings(new Map([\n      [adorner, updatedSetting],\n    ]));\n    assert.isTrue(adornerManager.getSettings().has(adorner), 'badge setting should still exist after update');\n    assert.strictEqual(\n        adornerManager.isAdornerEnabled(adorner), updatedSetting, 'badge setting should be updated in the manager');\n    assert.deepOwnInclude(\n        settingStore.get(), {\n          adorner,\n          isEnabled: updatedSetting,\n        },\n        'badge setting update should be persisted to the setting store');\n  });\n});\n"]}