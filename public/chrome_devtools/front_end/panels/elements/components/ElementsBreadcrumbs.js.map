{"version":3,"file":"ElementsBreadcrumbs.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/elements/components/ElementsBreadcrumbs.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport type * as SDK from '../../../core/sdk/sdk.js';\nimport * as ComponentHelpers from '../../../ui/components/helpers/helpers.js';\nimport * as IconButton from '../../../ui/components/icon_button/icon_button.js';\nimport * as NodeText from '../../../ui/components/node_text/node_text.js';\nimport * as Coordinator from '../../../ui/components/render_coordinator/render_coordinator.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\nimport * as VisualLogging from '../../../ui/visual_logging/visual_logging.js';\n\nimport elementsBreadcrumbsStyles from './elementsBreadcrumbs.css.js';\nimport {crumbsToRender, type UserScrollPosition} from './ElementsBreadcrumbsUtils.js';\nimport {type DOMNode} from './Helper.js';\n\nconst UIStrings = {\n  /**\n   * @description Accessible name for DOM tree breadcrumb navigation.\n   */\n  breadcrumbs: 'DOM tree breadcrumbs',\n  /**\n   * @description A label/tooltip for a button that scrolls the breadcrumbs bar to the left to show more entries.\n   */\n  scrollLeft: 'Scroll left',\n  /**\n   * @description A label/tooltip for a button that scrolls the breadcrumbs bar to the right to show more entries.\n   */\n  scrollRight: 'Scroll right',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/elements/components/ElementsBreadcrumbs.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class NodeSelectedEvent extends Event {\n  static readonly eventName = 'breadcrumbsnodeselected';\n  legacyDomNode: SDK.DOMModel.DOMNode;\n\n  constructor(node: DOMNode) {\n    super(NodeSelectedEvent.eventName, {});\n    this.legacyDomNode = node.legacyDomNode;\n  }\n}\n\nexport interface ElementsBreadcrumbsData {\n  selectedNode: DOMNode|null;\n  crumbs: DOMNode[];\n}\nconst coordinator = Coordinator.RenderCoordinator.RenderCoordinator.instance();\n\nexport class ElementsBreadcrumbs extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-elements-breadcrumbs`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  readonly #resizeObserver = new ResizeObserver(() => this.#checkForOverflowOnResize());\n  readonly #renderBound = this.#render.bind(this);\n\n  #crumbsData: readonly DOMNode[] = [];\n  #selectedDOMNode: Readonly<DOMNode>|null = null;\n  #overflowing = false;\n  #userScrollPosition: UserScrollPosition = 'start';\n  #isObservingResize = false;\n  #userHasManuallyScrolled = false;\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [elementsBreadcrumbsStyles];\n  }\n\n  set data(data: ElementsBreadcrumbsData) {\n    this.#selectedDOMNode = data.selectedNode;\n    this.#crumbsData = data.crumbs;\n    this.#userHasManuallyScrolled = false;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#renderBound);\n  }\n\n  disconnectedCallback(): void {\n    this.#isObservingResize = false;\n    this.#resizeObserver.disconnect();\n  }\n\n  #onCrumbClick(node: DOMNode): (event: Event) => void {\n    return (event: Event): void => {\n      event.preventDefault();\n      this.dispatchEvent(new NodeSelectedEvent(node));\n    };\n  }\n\n  /*\n   * When the window is resized, we need to check if we either:\n   * 1) overflowing, and now the window is big enough that we don't need to\n   * 2) not overflowing, and now the window is small and we do need to\n   *\n   * If either of these are true, we toggle the overflowing state accordingly and trigger a re-render.\n   */\n  async #checkForOverflowOnResize(): Promise<void> {\n    const crumbScrollContainer = this.#shadow.querySelector('.crumbs-scroll-container');\n    const crumbWindow = this.#shadow.querySelector('.crumbs-window');\n\n    if (!crumbScrollContainer || !crumbWindow) {\n      return;\n    }\n\n    const crumbWindowWidth = await coordinator.read<number>(() => {\n      return crumbWindow.clientWidth;\n    });\n\n    const scrollContainerWidth = await coordinator.read<number>(() => {\n      return crumbScrollContainer.clientWidth;\n    });\n\n    if (this.#overflowing) {\n      // We currently have overflow buttons.\n      // If the content while displaying buttons still fits, then we can\n      // rerender without overflow.\n      if (scrollContainerWidth < crumbWindowWidth) {\n        this.#overflowing = false;\n      }\n    } else {\n      // We currently do not have overflow buttons.\n      // If the content won't fit anymore, then rerender with overflow.\n      if (scrollContainerWidth > crumbWindowWidth) {\n        this.#overflowing = true;\n      }\n    }\n    void this.#ensureSelectedNodeIsVisible();\n    void this.#updateScrollState(crumbWindow);\n  }\n\n  #onCrumbMouseMove(node: DOMNode): () => void {\n    return (): void => node.highlightNode();\n  }\n\n  #onCrumbMouseLeave(node: DOMNode): () => void {\n    return (): void => node.clearHighlight();\n  }\n\n  #onCrumbFocus(node: DOMNode): () => void {\n    return (): void => node.highlightNode();\n  }\n\n  #onCrumbBlur(node: DOMNode): () => void {\n    return (): void => node.clearHighlight();\n  }\n\n  #engageResizeObserver(): void {\n    if (!this.#resizeObserver || this.#isObservingResize === true) {\n      return;\n    }\n\n    const crumbs = this.#shadow.querySelector('.crumbs');\n\n    if (!crumbs) {\n      return;\n    }\n\n    this.#resizeObserver.observe(crumbs);\n    this.#isObservingResize = true;\n  }\n\n  /**\n   * This method runs after render or resize and checks if the crumbs are too large\n   * for their container and therefore we need to render the overflow buttons at\n   * either end which the user can use to scroll back and forward through the crumbs.\n   * If it finds that we are overflowing, it sets the instance variable and\n   * triggers a re-render. If we are not overflowing, this method returns and\n   * does nothing.\n   */\n  async #checkForOverflow(): Promise<void> {\n    const crumbScrollContainer = this.#shadow.querySelector('.crumbs-scroll-container');\n    const crumbWindow = this.#shadow.querySelector('.crumbs-window');\n\n    if (!crumbScrollContainer || !crumbWindow) {\n      return;\n    }\n\n    const crumbWindowWidth = await coordinator.read<number>(() => {\n      return crumbWindow.clientWidth;\n    });\n\n    const scrollContainerWidth = await coordinator.read<number>(() => {\n      return crumbScrollContainer.clientWidth;\n    });\n\n    if (this.#overflowing) {\n      // We currently have overflow buttons.\n      // If the content while displaying buttons still fits, then we can\n      // rerender without overflow.\n      if (scrollContainerWidth < crumbWindowWidth) {\n        this.#overflowing = false;\n        void this.#render();\n      }\n    } else {\n      // We currently do not have overflow buttons.\n      // If the content won't fit anymore, then rerender with overflow.\n      if (scrollContainerWidth > crumbWindowWidth) {\n        this.#overflowing = true;\n        void this.#render();\n      }\n    }\n  }\n\n  #onCrumbsWindowScroll(event: Event): void {\n    if (!event.target) {\n      return;\n    }\n\n    /* not all Events are DOM Events so the TS Event def doesn't have\n     * .target typed as an Element but in this case we're getting this\n     * from a DOM event so we're confident of having .target and it\n     * being an element\n     */\n    const scrollWindow = event.target as Element;\n\n    this.#updateScrollState(scrollWindow);\n  }\n\n  #updateScrollState(scrollWindow: Element): void {\n    const maxScrollLeft = scrollWindow.scrollWidth - scrollWindow.clientWidth;\n    const currentScroll = scrollWindow.scrollLeft;\n\n    /**\n     * When we check if the user is at the beginning or end of the crumbs (such\n     * that we disable the relevant button - you can't keep scrolling right if\n     * you're at the last breadcrumb) we want to not check exact numbers but\n     * give a bit of padding. This means if the user has scrolled to nearly the\n     * end but not quite (e.g. there are 2 more pixels they could scroll) we'll\n     * mark it as them being at the end. This variable controls how much padding\n     * we apply. So if a user has scrolled to within 10px of the end, we count\n     * them as being at the end and disable the button.\n     */\n    const scrollBeginningAndEndPadding = 10;\n\n    if (currentScroll < scrollBeginningAndEndPadding) {\n      this.#userScrollPosition = 'start';\n    } else if (currentScroll >= maxScrollLeft - scrollBeginningAndEndPadding) {\n      this.#userScrollPosition = 'end';\n    } else {\n      this.#userScrollPosition = 'middle';\n    }\n\n    void this.#render();\n  }\n\n  #onOverflowClick(direction: 'left'|'right'): () => void {\n    return (): void => {\n      this.#userHasManuallyScrolled = true;\n      const scrollWindow = this.#shadow.querySelector('.crumbs-window');\n\n      if (!scrollWindow) {\n        return;\n      }\n\n      const amountToScrollOnClick = scrollWindow.clientWidth / 2;\n\n      const newScrollAmount = direction === 'left' ?\n          Math.max(Math.floor(scrollWindow.scrollLeft - amountToScrollOnClick), 0) :\n          scrollWindow.scrollLeft + amountToScrollOnClick;\n\n      scrollWindow.scrollTo({\n        behavior: 'smooth',\n        left: newScrollAmount,\n      });\n    };\n  }\n\n  #renderOverflowButton(direction: 'left'|'right', disabled: boolean): LitHtml.TemplateResult {\n    const buttonStyles = LitHtml.Directives.classMap({\n      overflow: true,\n      [direction]: true,\n      hidden: !this.#overflowing,\n    });\n\n    const tooltipString = direction === 'left' ? i18nString(UIStrings.scrollLeft) : i18nString(UIStrings.scrollRight);\n    // clang-format off\n    return LitHtml.html`\n      <button\n        class=${buttonStyles}\n        @click=${this.#onOverflowClick(direction)}\n        ?disabled=${disabled}\n        aria-label=${tooltipString}\n        title=${tooltipString}>\n        <${IconButton.Icon.Icon.litTagName} .data=${{\n          iconName: 'triangle-' + direction,\n          color: 'var(--sys-color-on-surface)',\n          width: '12px',\n          height: '10px',\n        } as IconButton.Icon.IconData}>\n        </${IconButton.Icon.Icon.litTagName}>\n      </button>\n      `;\n    // clang-format on\n  }\n\n  #render(): void {\n    const crumbs = crumbsToRender(this.#crumbsData, this.#selectedDOMNode);\n\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    LitHtml.render(LitHtml.html`\n      <nav class=\"crumbs\" aria-label=${i18nString(UIStrings.breadcrumbs)} jslog=${VisualLogging.elementsBreadcrumbs()}>\n        ${this.#renderOverflowButton('left', this.#userScrollPosition === 'start')}\n\n        <div class=\"crumbs-window\" @scroll=${this.#onCrumbsWindowScroll}>\n          <ul class=\"crumbs-scroll-container\">\n            ${crumbs.map(crumb => {\n              const crumbClasses = {\n                crumb: true,\n                selected: crumb.selected,\n              };\n              // eslint-disable-next-line rulesdir/ban_a_tags_in_lit_html\n              return LitHtml.html`\n                <li class=${LitHtml.Directives.classMap(crumbClasses)}\n                  data-node-id=${crumb.node.id}\n                  data-crumb=\"true\"\n                >\n                  <a href=\"#\"\n                    draggable=false\n                    class=\"crumb-link\"\n                    jslog=${VisualLogging.item().track({click:true})}\n                    @click=${this.#onCrumbClick(crumb.node)}\n                    @mousemove=${this.#onCrumbMouseMove(crumb.node)}\n                    @mouseleave=${this.#onCrumbMouseLeave(crumb.node)}\n                    @focus=${this.#onCrumbFocus(crumb.node)}\n                    @blur=${this.#onCrumbBlur(crumb.node)}\n                  ><${NodeText.NodeText.NodeText.litTagName} data-node-title=${crumb.title.main} .data=${{\n                    nodeTitle: crumb.title.main,\n                    nodeId: crumb.title.extras.id,\n                    nodeClasses: crumb.title.extras.classes,\n                  } as NodeText.NodeText.NodeTextData}></${NodeText.NodeText.NodeText.litTagName}></a>\n                </li>`;\n            })}\n          </ul>\n        </div>\n        ${this.#renderOverflowButton('right', this.#userScrollPosition === 'end')}\n      </nav>\n    `, this.#shadow, { host: this });\n    // clang-format on\n\n    void this.#checkForOverflow();\n    this.#engageResizeObserver();\n    void this.#ensureSelectedNodeIsVisible();\n  }\n\n  async #ensureSelectedNodeIsVisible(): Promise<void> {\n    /*\n     * If the user has manually scrolled the crumbs in either direction, we\n     * effectively hand control over the scrolling down to them. This is to\n     * prevent the user manually scrolling to the end, and then us scrolling\n     * them back to the selected node. The moment they click either scroll\n     * button we set userHasManuallyScrolled, and we reset it when we get new\n     * data in. This means if the user clicks on a different element in the\n     * tree, we will auto-scroll that element into view, because we'll get new\n     * data and hence the flag will be reset.\n     */\n    if (!this.#selectedDOMNode || !this.#shadow || !this.#overflowing || this.#userHasManuallyScrolled) {\n      return;\n    }\n    const activeCrumbId = this.#selectedDOMNode.id;\n    const activeCrumb = this.#shadow.querySelector(`.crumb[data-node-id=\"${activeCrumbId}\"]`);\n\n    if (activeCrumb) {\n      await coordinator.scroll(() => {\n        activeCrumb.scrollIntoView({\n          // We only want to scroll smoothly when the user is clicking the\n          // buttons manually. If we are automatically scrolling, we could be\n          // scrolling a long distance, so just jump there right away. This\n          // most commonly occurs when the user first opens DevTools on a\n          // deeply nested element, and the slow scrolling of the breadcrumbs\n          // is just a distraction and not useful.\n          behavior: 'auto',\n        });\n      });\n    }\n  }\n}\n\ncustomElements.define('devtools-elements-breadcrumbs', ElementsBreadcrumbs);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-elements-breadcrumbs': ElementsBreadcrumbs;\n  }\n\n  interface HTMLElementEventMap {\n    [NodeSelectedEvent.eventName]: NodeSelectedEvent;\n  }\n}\n"]}