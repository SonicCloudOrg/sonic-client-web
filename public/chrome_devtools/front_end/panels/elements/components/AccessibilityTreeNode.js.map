{"version":3,"file":"AccessibilityTreeNode.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/elements/components/AccessibilityTreeNode.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Platform from '../../../core/platform/platform.js';\nimport * as Protocol from '../../../generated/protocol.js';\n\nimport * as Coordinator from '../../../ui/components/render_coordinator/render_coordinator.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\n\nimport accessibilityTreeNodeStyles from './accessibilityTreeNode.css.js';\n\nconst UIStrings = {\n  /**\n   *@description Ignored node element text content in Accessibility Tree View of the Elements panel\n   */\n  ignored: 'Ignored',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/elements/components/AccessibilityTreeNode.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n// TODO(jobay) move this to Platform.StringUtilities if still needed.\n// This function is a variant of setTextContentTruncatedIfNeeded found in DOMExtension.\nfunction truncateTextIfNeeded(text: string): string {\n  const maxTextContentLength = 10000;\n\n  if (text.length > maxTextContentLength) {\n    return Platform.StringUtilities.trimMiddle(text, maxTextContentLength);\n  }\n  return text;\n}\n\nfunction isPrintable(valueType: Protocol.Accessibility.AXValueType): boolean {\n  switch (valueType) {\n    case Protocol.Accessibility.AXValueType.Boolean:\n    case Protocol.Accessibility.AXValueType.BooleanOrUndefined:\n    case Protocol.Accessibility.AXValueType.String:\n    case Protocol.Accessibility.AXValueType.Number:\n      return true;\n    default:\n      return false;\n  }\n}\n\nexport interface AccessibilityTreeNodeData {\n  ignored: boolean;\n  name: string;\n  role: string;\n  properties: Protocol.Accessibility.AXProperty[];\n  id: string;\n}\n\nexport class AccessibilityTreeNode extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-accessibility-tree-node`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n\n  #ignored = true;\n  #name = '';\n  #role = '';\n  #properties: Protocol.Accessibility.AXProperty[] = [];\n  #id = '';\n\n  set data(data: AccessibilityTreeNodeData) {\n    this.#ignored = data.ignored;\n    this.#name = data.name;\n    this.#role = data.role;\n    this.#properties = data.properties;\n    this.#id = data.id;\n    void this.#render();\n  }\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [accessibilityTreeNodeStyles];\n  }\n\n  async #render(): Promise<void> {\n    const role = LitHtml.html`<span class='role-value'>${truncateTextIfNeeded(this.#role)}</span>`;\n    const name = LitHtml.html`\"<span class='attribute-value'>${this.#name}</span>\"`;\n    const properties = this.#properties.map(\n        ({name, value}) => isPrintable(value.type) ?\n            LitHtml.html` <span class='attribute-name'>${name}</span>:&nbsp;<span class='attribute-value'>${\n                value.value}</span>` :\n            LitHtml.nothing);\n    const content = this.#ignored ? LitHtml.html`<span>${i18nString(UIStrings.ignored)}</span>` :\n                                    LitHtml.html`${role}&nbsp;${name}${properties}`;\n    await Coordinator.RenderCoordinator.RenderCoordinator.instance().write(\n        `Accessibility node ${this.#id} render`, () => {\n          // clang-format off\n      LitHtml.render(\n        LitHtml.html`<div class='container'>${content}</div>`,\n        this.#shadow,\n        {host: this});\n          // clang-format on\n        });\n  }\n}\n\ncustomElements.define('devtools-accessibility-tree-node', AccessibilityTreeNode);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-accessibility-tree-node': AccessibilityTreeNode;\n  }\n}\n"]}