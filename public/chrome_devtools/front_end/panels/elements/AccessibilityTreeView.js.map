{"version":3,"file":"AccessibilityTreeView.js","sourceRoot":"","sources":["../../../../../../front_end/panels/elements/AccessibilityTreeView.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as TreeOutline from '../../ui/components/tree_outline/tree_outline.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport * as AccessibilityTreeUtils from './AccessibilityTreeUtils.js';\nimport accessibilityTreeViewStyles from './accessibilityTreeView.css.js';\nimport {ElementsPanel} from './ElementsPanel.js';\n\nexport class AccessibilityTreeView extends UI.Widget.VBox implements\n    SDK.TargetManager.SDKModelObserver<SDK.AccessibilityModel.AccessibilityModel> {\n  private accessibilityTreeComponent: TreeOutline.TreeOutline.TreeOutline<AccessibilityTreeUtils.AXTreeNodeData>;\n  private readonly toggleButton: HTMLElement;\n  private inspectedDOMNode: SDK.DOMModel.DOMNode|null = null;\n  private root: SDK.AccessibilityModel.AccessibilityNode|null = null;\n\n  constructor(\n      toggleButton: HTMLElement,\n      accessibilityTreeComponent: TreeOutline.TreeOutline.TreeOutline<AccessibilityTreeUtils.AXTreeNodeData>) {\n    super();\n    // toggleButton is bound to a click handler on ElementsPanel to switch between the DOM tree\n    // and accessibility tree views.\n    this.toggleButton = toggleButton;\n    this.accessibilityTreeComponent = accessibilityTreeComponent;\n\n    const container = this.contentElement.createChild('div');\n\n    container.classList.add('accessibility-tree-view-container');\n    container.setAttribute('jslog', `${VisualLogging.tree('full-accessibility')}`);\n    container.appendChild(this.toggleButton);\n    container.appendChild(this.accessibilityTreeComponent);\n\n    SDK.TargetManager.TargetManager.instance().observeModels(\n        SDK.AccessibilityModel.AccessibilityModel, this, {scoped: true});\n\n    // The DOM tree and accessibility are kept in sync as much as possible, so\n    // on node selection, update the currently inspected node and reveal in the\n    // DOM tree.\n    this.accessibilityTreeComponent.addEventListener('itemselected', (event: Event) => {\n      const evt = event as TreeOutline.TreeOutline.ItemSelectedEvent<AccessibilityTreeUtils.AXTreeNodeData>;\n      const axNode = evt.data.node.treeNodeData;\n      if (!axNode.isDOMNode()) {\n        return;\n      }\n      const deferredNode = axNode.deferredDOMNode();\n      if (deferredNode) {\n        deferredNode.resolve(domNode => {\n          if (domNode) {\n            this.inspectedDOMNode = domNode;\n            void ElementsPanel.instance().revealAndSelectNode(domNode, true, false);\n          }\n        });\n      }\n    });\n\n    this.accessibilityTreeComponent.addEventListener('itemmouseover', (event: Event) => {\n      const evt = event as TreeOutline.TreeOutline.ItemMouseOverEvent<AccessibilityTreeUtils.AXTreeNodeData>;\n      evt.data.node.treeNodeData.highlightDOMNode();\n    });\n\n    this.accessibilityTreeComponent.addEventListener('itemmouseout', () => {\n      SDK.OverlayModel.OverlayModel.hideDOMNodeHighlight();\n    });\n  }\n\n  override async wasShown(): Promise<void> {\n    await this.refreshAccessibilityTree();\n    if (this.inspectedDOMNode) {\n      await this.loadSubTreeIntoAccessibilityModel(this.inspectedDOMNode);\n    }\n    this.registerCSSFiles([accessibilityTreeViewStyles]);\n  }\n\n  async refreshAccessibilityTree(): Promise<void> {\n    if (!this.root) {\n      const frameId = SDK.FrameManager.FrameManager.instance().getOutermostFrame()?.id;\n      if (!frameId) {\n        throw Error('No top frame');\n      }\n      this.root = await AccessibilityTreeUtils.getRootNode(frameId);\n      if (!this.root) {\n        throw Error('No root');\n      }\n    }\n    await this.renderTree();\n    await this.accessibilityTreeComponent.expandRecursively(1);\n  }\n\n  async renderTree(): Promise<void> {\n    if (!this.root) {\n      return;\n    }\n    const treeData = await AccessibilityTreeUtils.sdkNodeToAXTreeNodes(this.root);\n    this.accessibilityTreeComponent.data = {\n      defaultRenderer: AccessibilityTreeUtils.accessibilityNodeRenderer,\n      tree: treeData,\n      filter: node => {\n        return node.ignored() || (node.role()?.value === 'generic' && !node.name()?.value) ?\n            TreeOutline.TreeOutline.FilterOption.FLATTEN :\n            TreeOutline.TreeOutline.FilterOption.SHOW;\n      },\n    };\n  }\n\n  // Given a selected DOM node, asks the model to load the missing subtree from the root to the\n  // selected node and then re-renders the tree.\n  async loadSubTreeIntoAccessibilityModel(selectedNode: SDK.DOMModel.DOMNode): Promise<void> {\n    const ancestors = await AccessibilityTreeUtils.getNodeAndAncestorsFromDOMNode(selectedNode);\n    const inspectedAXNode = ancestors.find(node => node.backendDOMNodeId() === selectedNode.backendNodeId());\n    if (!inspectedAXNode) {\n      return;\n    }\n    await this.accessibilityTreeComponent.expandNodeIds(ancestors.map(node => node.getFrameId() + '#' + node.id()));\n    await this.accessibilityTreeComponent.focusNodeId(AccessibilityTreeUtils.getNodeId(inspectedAXNode));\n  }\n\n  // A node was revealed through the elements picker.\n  async revealAndSelectNode(inspectedNode: SDK.DOMModel.DOMNode): Promise<void> {\n    if (inspectedNode === this.inspectedDOMNode) {\n      return;\n    }\n    this.inspectedDOMNode = inspectedNode;\n    // We only want to load nodes into the model when the AccessibilityTree is visible.\n    if (this.isShowing()) {\n      await this.loadSubTreeIntoAccessibilityModel(inspectedNode);\n    }\n  }\n\n  // Selected node in the DOM tree has changed.\n  async selectedNodeChanged(inspectedNode: SDK.DOMModel.DOMNode): Promise<void> {\n    if (this.isShowing() || (inspectedNode === this.inspectedDOMNode)) {\n      return;\n    }\n    if (inspectedNode.ownerDocument && (inspectedNode.nodeName() === 'HTML' || inspectedNode.nodeName() === 'BODY')) {\n      this.inspectedDOMNode = inspectedNode.ownerDocument;\n    } else {\n      this.inspectedDOMNode = inspectedNode;\n    }\n  }\n\n  treeUpdated({data}: Common.EventTarget\n                  .EventTargetEvent<SDK.AccessibilityModel.EventTypes[SDK.AccessibilityModel.Events.TreeUpdated]>):\n      void {\n    if (!data.root) {\n      void this.renderTree();\n      return;\n    }\n    const outermostFrameId = SDK.FrameManager.FrameManager.instance().getOutermostFrame()?.id;\n    if (data.root?.getFrameId() !== outermostFrameId) {\n      void this.renderTree();\n      return;\n    }\n    this.root = data.root;\n    void this.accessibilityTreeComponent.collapseAllNodes();\n\n    void this.refreshAccessibilityTree();\n  }\n\n  modelAdded(model: SDK.AccessibilityModel.AccessibilityModel): void {\n    model.addEventListener(SDK.AccessibilityModel.Events.TreeUpdated, this.treeUpdated, this);\n  }\n\n  modelRemoved(model: SDK.AccessibilityModel.AccessibilityModel): void {\n    model.removeEventListener(SDK.AccessibilityModel.Events.TreeUpdated, this.treeUpdated, this);\n  }\n}\n"]}