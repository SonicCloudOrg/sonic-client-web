{"version":3,"file":"PlatformFontsWidget.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/elements/PlatformFontsWidget.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAG7B,OAAO,EAAC,0BAA0B,EAAC,MAAM,iCAAiC,CAAC;AAE3E,OAAO,KAAK,QAAQ,MAAM,eAAe,CAAC;AAE1C,0BAA0B,CAAC,qBAAqB,EAAE,GAAG,EAAE;IACrD,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;QAC7C,MAAM,WAAW,GAAG,EAAoD,CAAC;QACzE,WAAW,CAAC,gBAAgB,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;QAC5C,MAAM,QAAQ,GAAG,EAA2B,CAAC;QAC7C,QAAQ,CAAC,gBAAgB,GAAG,KAAK,IAAI,EAAE,CAAC,CAAC;YACvC;gBACE,UAAU,EAAE,OAAO;gBACnB,cAAc,EAAE,SAAS;gBACzB,YAAY,EAAE,KAAK;gBACnB,UAAU,EAAE,CAAC;aACd;YACD;gBACE,UAAU,EAAE,oBAAoB;gBAChC,cAAc,EAAE,oBAAoB;gBACpC,YAAY,EAAE,KAAK;gBACnB,UAAU,EAAE,EAAE;aACf;SACF,CAAC,CAAC;QACH,MAAM,IAAI,GAAG;YACX,EAAE,EAAE,CAAC;SACkB,CAAC;QAC1B,WAAW,CAAC,QAAQ,GAAG,GAAG,EAAE,CAAC,QAAQ,CAAC;QACtC,WAAW,CAAC,IAAI,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC;QAC9B,MAAM,mBAAmB,GAAG,IAAI,QAAQ,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC;QAC9F,MAAM,mBAAmB,CAAC,QAAQ,EAAE,CAAC;QACrC,MAAM,cAAc,GAAG,mBAAmB,CAAC,cAAc,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,CAAC;QAC/F,MAAM,gBAAgB,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC;QACvD,MAAM,iBAAiB,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC;QACxD,MAAM,CAAC,OAAO,CAAC,gBAAgB,EAAE,iCAAiC,CAAC,CAAC;QACpE,MAAM,CAAC,OAAO,CAAC,gBAAgB,EAAE,qCAAqC,CAAC,CAAC;QACxE,MAAM,CAAC,OAAO,CAAC,gBAAgB,EAAE,oCAAoC,CAAC,CAAC;QACvE,MAAM,CAAC,OAAO,CAAC,iBAAiB,EAAE,oBAAoB,CAAC,CAAC;QACxD,MAAM,CAAC,OAAO,CAAC,iBAAiB,EAAE,0BAA0B,CAAC,CAAC;QAC9D,MAAM,CAAC,OAAO,CAAC,iBAAiB,EAAE,mCAAmC,CAAC,CAAC;IACzE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\n\nimport * as Elements from './elements.js';\n\ndescribeWithMockConnection('PlatformFontsWidget', () => {\n  it('correctly displays font stats', async () => {\n    const sharedModel = {} as Elements.ComputedStyleModel.ComputedStyleModel;\n    sharedModel.addEventListener = sinon.stub();\n    const cssModel = {} as SDK.CSSModel.CSSModel;\n    cssModel.getPlatformFonts = async () => ([\n      {\n        familyName: 'Arial',\n        postScriptName: 'ArialMT',\n        isCustomFont: false,\n        glyphCount: 5,\n      },\n      {\n        familyName: 'Merriweather Black',\n        postScriptName: 'Merriweather-Black',\n        isCustomFont: false,\n        glyphCount: 18,\n      },\n    ]);\n    const node = {\n      id: 1,\n    } as SDK.DOMModel.DOMNode;\n    sharedModel.cssModel = () => cssModel;\n    sharedModel.node = () => node;\n    const platformFontsWidget = new Elements.PlatformFontsWidget.PlatformFontsWidget(sharedModel);\n    await platformFontsWidget.doUpdate();\n    const fontStatsItems = platformFontsWidget.contentElement.querySelectorAll('.font-stats-item');\n    const firstFontContent = fontStatsItems[0].textContent;\n    const secontFontContent = fontStatsItems[1].textContent;\n    assert.include(firstFontContent, 'Family name: Merriweather Black');\n    assert.include(firstFontContent, 'PostScript name: Merriweather-Black');\n    assert.include(firstFontContent, 'Font origin: Local file(18 glyphs)');\n    assert.include(secontFontContent, 'Family name: Arial');\n    assert.include(secontFontContent, 'PostScript name: ArialMT');\n    assert.include(secontFontContent, 'Font origin: Local file(5 glyphs)');\n  });\n});\n"]}