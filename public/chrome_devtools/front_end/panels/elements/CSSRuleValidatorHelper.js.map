{"version":3,"file":"CSSRuleValidatorHelper.js","sourceRoot":"","sources":["../../../../../../front_end/panels/elements/CSSRuleValidatorHelper.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nexport const buildPropertyDefinitionText = (property: string, value?: string): string => {\n  if (value === undefined) {\n    return buildPropertyName(property);\n  }\n  return '<code class=\"unbreakable-text\"><span class=\"property\">' + property + '</span>: ' + value + '</code>';\n};\n\nexport const buildPropertyName = (property: string): string => {\n  return '<code class=\"unbreakable-text\"><span class=\"property\">' + property + '</span></code>';\n};\n\nexport const buildPropertyValue = (property: string): string => {\n  return '<code class=\"unbreakable-text\">' + property + '</code>';\n};\n\nexport const isFlexContainer = (computedStyles?: Map<string, string>): boolean => {\n  if (!computedStyles) {\n    return false;\n  }\n  const display = computedStyles.get('display');\n  return display === 'flex' || display === 'inline-flex';\n};\n\nconst blockContainerDisplayValueSet = new Set([\n  'block',\n  'flow-root',\n  'inline-block',\n  'list-item',\n  'table-caption',\n  'table-cell',\n]);\n\nexport const isBlockContainer = (computedStyles?: Map<string, string>): boolean => {\n  if (!computedStyles) {\n    return false;\n  }\n  const displayValue = computedStyles.get('display');\n  if (!displayValue) {\n    return false;\n  }\n  const split = displayValue.split(' ');\n  if (split.length > 3) {\n    return false;\n  }\n  // The order of keywords is canonicalized to \"outside? inside? list-item?\"\n  // If the number of keywords is 3, it must be 'inline flow-root list-item'.\n  if (split.length === 3) {\n    return split[2] === 'list-item';\n  }\n  if (split.length === 2) {\n    return split[1] === 'list-item' && split[0] !== 'inline';\n  }\n  return blockContainerDisplayValueSet.has(split[0]);\n};\n\nexport const isInlineElement = (computedStyles?: Map<string, string>): boolean => {\n  if (!computedStyles) {\n    return false;\n  }\n  return computedStyles.get('display') === 'inline';\n};\n\n// See https://html.spec.whatwg.org/multipage/rendering.html#replaced-elements\nconst possiblyReplacedElements = new Set([\n  'audio',\n  'canvas',\n  'embed',\n  'iframe',\n  'img',\n  'input',\n  'object',\n  'video',\n]);\n\nexport const isPossiblyReplacedElement = (nodeName?: string): boolean => {\n  if (!nodeName) {\n    return false;\n  }\n  return possiblyReplacedElements.has(nodeName);\n};\n\nexport const isGridContainer = (computedStyles?: Map<string, string>): boolean => {\n  if (!computedStyles) {\n    return false;\n  }\n  const display = computedStyles.get('display');\n  return display === 'grid' || display === 'inline-grid';\n};\n\nexport const isMulticolContainer = (computedStyles?: Map<string, string>): boolean => {\n  if (!computedStyles) {\n    return false;\n  }\n  const columnWidth = computedStyles.get('column-width');\n  const columnCount = computedStyles.get('column-count');\n\n  return columnWidth !== 'auto' || columnCount !== 'auto';\n};\n"]}