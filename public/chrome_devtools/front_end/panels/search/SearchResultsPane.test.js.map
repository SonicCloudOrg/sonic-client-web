{"version":3,"file":"SearchResultsPane.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/search/SearchResultsPane.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\nimport {describeWithLocale} from '../../testing/EnvironmentHelpers.js';\n\nimport * as Search from './search.js';\n\nconst {lineSegmentForMatch} = Search.SearchResultsPane;\n\nfunction r(matchDescriptor: TemplateStringsArray): TextUtils.TextRange.SourceRange {\n  const start = matchDescriptor[0].indexOf('[');\n  const end = matchDescriptor[0].indexOf(')');\n  return new TextUtils.TextRange.SourceRange(start, end - start);\n}\n\ndescribe('lineSegmentForMatch', () => {\n  it('is a no-op if for short lines with the match close to the start', () => {\n    const lineContent = 'Just a short line';\n    const matchRange = r`       [    )`;\n\n    const {lineSegment, matchRange: actualMRange} = lineSegmentForMatch(lineContent, matchRange);\n\n    assert.strictEqual(lineSegment, lineContent);\n    assert.deepEqual(actualMRange, matchRange);\n  });\n\n  it('only shows {prefixLength} characters before the match with an ellipsis', () => {\n    const lineContent = 'Just a somewhat short line';\n    const matchRange = r`                [    )`;\n\n    const {lineSegment, matchRange: actualMRange} = lineSegmentForMatch(lineContent, matchRange, {prefixLength: 5});\n\n    assert.strictEqual(lineSegment, 'â€¦what short line');\n    assert.deepEqual(actualMRange, r`      [    )`);\n  });\n\n  it('only shows {maxLength} characters (excluding prefix ellipsis)', () => {\n    const lineContent = 'A somewhat longer line to demonstrate maxLength';\n    const matchRange = r`           [     )`;\n\n    const {lineSegment, matchRange: actualMRange} = lineSegmentForMatch(lineContent, matchRange, {maxLength: 22});\n\n    assert.strictEqual(lineSegment, 'A somewhat longer line');\n    assert.deepEqual(actualMRange, r`           [     )`);\n  });\n\n  it('trims whitespace at the beginning of the line', () => {\n    const lineContent = '     A line with whitespace at the beginning';\n    const matchRange = r`            [   )`;\n\n    const {lineSegment, matchRange: actualMRange} = lineSegmentForMatch(lineContent, matchRange);\n\n    assert.strictEqual(lineSegment, 'A line with whitespace at the beginning');\n    assert.deepEqual(actualMRange, r`       [   )`);\n  });\n\n  it('works with whitespace trimming and {prefixLength}', () => {\n    const lineContent = '     A line with whitespace at the beginning';\n    const matchRange = r`                            [     )`;\n\n    const {lineSegment, matchRange: actualMRange} = lineSegmentForMatch(lineContent, matchRange, {prefixLength: 5});\n\n    assert.strictEqual(lineSegment, 'â€¦pace at the beginning');\n    assert.deepEqual(actualMRange, r`      [     )`);\n  });\n\n  it('only trims whitespace until the match starts', () => {\n    const lineContent = '     A line with whitespace at the beginning';\n    const matchRange = r`   [       )`;\n\n    const {lineSegment, matchRange: actualMRange} = lineSegmentForMatch(lineContent, matchRange);\n\n    assert.strictEqual(lineSegment, '  A line with whitespace at the beginning');\n    assert.deepEqual(actualMRange, r`[       )`);\n  });\n\n  it('it shortens the range to the end of the segment if the line was truncated (together with the match)', () => {\n    const lineContent = 'A very very very long line with a very long match';\n    const matchRange = r`            [                                    )`;\n\n    const {lineSegment, matchRange: actualMRange} =\n        lineSegmentForMatch(lineContent, matchRange, {prefixLength: 5, maxLength: 15});\n\n    assert.strictEqual(lineSegment, 'â€¦very very long ');\n    assert.deepEqual(actualMRange, r`      [         )`);\n  });\n});\n\nclass FakeSearchResult implements Search.SearchScope.SearchResult {\n  #label: string;\n  #description: string;\n  #matchDescriptors: {lineNumber: number, lineContent: string, matchRange?: TextUtils.TextRange.SourceRange}[];\n\n  constructor(\n      label: string, description: string,\n      matchDescriptors: {lineNumber: number, lineContent: string, matchRange?: TextUtils.TextRange.SourceRange}[]) {\n    this.#label = label;\n    this.#description = description;\n    this.#matchDescriptors = matchDescriptors;\n  }\n\n  label(): string {\n    return this.#label;\n  }\n  description(): string {\n    return this.#description;\n  }\n  matchesCount(): number {\n    return this.#matchDescriptors.length;\n  }\n  matchLabel(index: number): string {\n    return this.#matchDescriptors[index].lineNumber.toString();\n  }\n  matchLineContent(index: number): string {\n    return this.#matchDescriptors[index].lineContent;\n  }\n  matchRevealable(): Object {\n    return {};\n  }\n  matchColumn(index: number): number|undefined {\n    return this.#matchDescriptors[index].matchRange?.offset;\n  }\n  matchLength(index: number): number|undefined {\n    return this.#matchDescriptors[index].matchRange?.length;\n  }\n}\n\ndescribeWithLocale('SearchResultsPane', () => {\n  it('shows one entry per line with matches when matchColumn/matchLength is NOT present', () => {\n    const searchConfig = new Workspace.SearchConfig.SearchConfig('the', true, false);\n    const resultPane = new Search.SearchResultsPane.SearchResultsPane(searchConfig);\n    resultPane.addSearchResult(new FakeSearchResult('file.txt', 'file.txt', [\n      {lineNumber: 10, lineContent: 'This is the line with multiple \"the\" matches'},\n      {lineNumber: 15, lineContent: 'This is a line with only one \"the\" match'},\n    ]));\n\n    resultPane.showAllMatches();\n\n    const matchSpans = resultPane['treeOutline'].shadowRoot.querySelectorAll('.search-match-content');\n    assert.lengthOf(matchSpans, 2);\n    assert.deepEqual(\n        [...matchSpans].map(span => span.textContent),\n        ['This is the line with multiple \"the\" matches', 'â€¦with only one \"the\" match']);\n  });\n\n  it('shows one entry per match when matchColumn/matchLength is present', () => {\n    const searchConfig = new Workspace.SearchConfig.SearchConfig('the', true, false);\n    const resultPane = new Search.SearchResultsPane.SearchResultsPane(searchConfig);\n    resultPane.addSearchResult(new FakeSearchResult('file.txt', 'file.txt', [\n      {\n        lineNumber: 10,\n        lineContent: 'This is the line with multiple \"the\" matches',\n        matchRange: r`        [  )`,\n      },\n      {\n        lineNumber: 10,\n        lineContent: 'This is the line with multiple \"the\" matches',\n        matchRange: r`                                [  )`,\n      },\n      {\n        lineNumber: 15,\n        lineContent: 'This is a line with only one \"the\" match',\n        matchRange: r`                              [  )`,\n      },\n    ]));\n\n    resultPane.showAllMatches();\n\n    const matchSpans = resultPane['treeOutline'].shadowRoot.querySelectorAll('.search-match-content');\n    assert.lengthOf(matchSpans, 3);\n    assert.deepEqual([...matchSpans].map(span => span.textContent), [\n      'This is the line with multiple \"the\" matches',\n      'â€¦ the line with multiple \"the\" matches',\n      'â€¦is a line with only one \"the\" match',\n    ]);\n  });\n\n  it('highlights all matches of a line when matchColumn/matchLength is NOT present', () => {\n    const searchConfig = new Workspace.SearchConfig.SearchConfig('the', true, false);\n    const resultPane = new Search.SearchResultsPane.SearchResultsPane(searchConfig);\n    resultPane.addSearchResult(new FakeSearchResult('file.txt', 'file.txt', [\n      {lineNumber: 10, lineContent: 'This is the line with multiple \"the\" matches'},\n      {lineNumber: 15, lineContent: 'This is a line with only one \"the\" match'},\n    ]));\n\n    resultPane.showAllMatches();\n\n    const matchSpans = resultPane['treeOutline'].shadowRoot.querySelectorAll('.highlighted-search-result');\n    assert.lengthOf(matchSpans, 3);\n    assert.deepEqual([...matchSpans].map(span => span.textContent), ['the', 'the', 'the']);\n  });\n\n  it('highlights only the specified match when matchColumn/matchLength is present', () => {\n    const searchConfig = new Workspace.SearchConfig.SearchConfig('the', true, false);\n    const resultPane = new Search.SearchResultsPane.SearchResultsPane(searchConfig);\n    resultPane.addSearchResult(new FakeSearchResult('file.txt', 'file.txt', [\n      {\n        lineNumber: 10,\n        lineContent: 'This is the line with multiple \"the\" matches',\n        matchRange: r`        [  )`,\n      },\n      {\n        lineNumber: 10,\n        lineContent: 'This is the line with multiple \"the\" matches',\n        matchRange: r`                                [  )`,\n      },\n      {\n        lineNumber: 15,\n        lineContent: 'This is a line with only one \"the\" match',\n        matchRange: r`                              [  )`,\n      },\n    ]));\n\n    resultPane.showAllMatches();\n\n    const matchSpans = resultPane['treeOutline'].shadowRoot.querySelectorAll('.search-match-content');\n    assert.lengthOf(matchSpans, 3);\n    assert.deepEqual([...matchSpans].map(span => span.innerHTML), [\n      'This is <span class=\"highlighted-search-result\">the</span> line with multiple \"the\" matches',\n      'â€¦ the line with multiple \"<span class=\"highlighted-search-result\">the</span>\" matches',\n      'â€¦is a line with only one \"<span class=\"highlighted-search-result\">the</span>\" match',\n    ]);\n  });\n});\n"]}