{"version":3,"file":"SearchView.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/search/SearchView.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport type * as Workspace from '../../models/workspace/workspace.js';\nimport {dispatchKeyDownEvent} from '../../testing/DOMHelpers.js';\nimport {describeWithEnvironment} from '../../testing/EnvironmentHelpers.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport * as Search from './search.js';\n\ninterface PerformSearchArgs {\n  searchConfig: Workspace.SearchConfig.SearchConfig;\n  progress: Common.Progress.Progress;\n  searchResultCallback: (arg0: Search.SearchScope.SearchResult) => void;\n  searchFinishedCallback: (arg0: boolean) => void;\n}\n\nclass FakeSearchScope implements Search.SearchScope.SearchScope {\n  readonly performSearchCalledPromise: Promise<PerformSearchArgs>;\n  readonly #resolvePerformSearchCalledPromise: (args: PerformSearchArgs) => void;\n\n  constructor() {\n    const {promise, resolve} = Platform.PromiseUtilities.promiseWithResolvers<PerformSearchArgs>();\n    this.performSearchCalledPromise = promise;\n    this.#resolvePerformSearchCalledPromise = resolve;\n  }\n\n  performSearch(\n      searchConfig: Workspace.SearchConfig.SearchConfig, progress: Common.Progress.Progress,\n      searchResultCallback: (arg0: Search.SearchScope.SearchResult) => void,\n      searchFinishedCallback: (arg0: boolean) => void): void|Promise<void> {\n    this.#resolvePerformSearchCalledPromise({searchConfig, progress, searchResultCallback, searchFinishedCallback});\n  }\n\n  performIndexing(progress: Common.Progress.Progress): void {\n    setTimeout(() => progress.done(), 0);  // Allow microtasks to run.\n  }\n\n  stopSearch(): void {\n  }\n}\n\nclass TestSearchView extends Search.SearchView.SearchView {\n  /**\n   * The throttler with which the base 'SearchView' throttles UI updates.\n   * Exposed here so tests can wait for the updates to finish.\n   */\n  readonly throttler: Common.Throttler.Throttler;\n\n  readonly #scopeCreator: () => Search.SearchScope.SearchScope;\n  /**\n   * `SearchView` resets and lazily re-creates the search results pane for each search.\n   * To provide a fake instance we install a get/set accesssor for the original property\n   * that behaves normally with no override, but returns the mock if one is provided.\n   */\n  #searchResultsPane: Search.SearchResultsPane.SearchResultsPane|null = null;\n  readonly #overrideResultsPane: boolean;\n\n  constructor(\n      scopeCreator: () => Search.SearchScope.SearchScope,\n      searchResultsPane?: Search.SearchResultsPane.SearchResultsPane) {\n    const throttler = new Common.Throttler.Throttler(/* timeoutMs */ 0);\n    super('fake', throttler);\n    this.throttler = throttler;\n    this.#scopeCreator = scopeCreator;\n    this.#searchResultsPane = searchResultsPane ?? null;\n    this.#overrideResultsPane = Boolean(searchResultsPane);\n\n    // Use 'Object.definePrroperty' or TS won't be happy that we replace a prop with an accessor.\n    Object.defineProperty(this, 'searchResultsPane', {\n      get: () => this.#searchResultsPane,\n      set: (pane: Search.SearchResultsPane.SearchResultsPane|null) => {\n        if (!this.#overrideResultsPane) {\n          this.#searchResultsPane = pane;\n        }\n      },\n    });\n  }\n\n  override createScope(): Search.SearchScope.SearchScope {\n    return this.#scopeCreator();\n  }\n\n  /** Fills in the UI elements of the SearchView and hits 'Enter'. */\n  triggerSearch(query: string, matchCase: boolean, isRegex: boolean): void {\n    this.search.value = query;\n    this.matchCaseButton.toggled = matchCase;\n    this.regexButton.toggled = isRegex;\n\n    dispatchKeyDownEvent(this.search, {keyCode: UI.KeyboardShortcut.Keys.Enter.code});\n  }\n\n  get currentSearchResultMessage(): string {\n    return this.contentElement.querySelector('.search-message:nth-child(3)')!.textContent ?? '';\n  }\n}\n\ndescribeWithEnvironment('SearchView', () => {\n  it('calls the search scope with the search config provided by the user via the UI', async () => {\n    const fakeScope = new FakeSearchScope();\n    const searchView = new TestSearchView(() => fakeScope);\n\n    searchView.triggerSearch('a query', true, true);\n\n    const {searchConfig} = await fakeScope.performSearchCalledPromise;\n    assert.strictEqual(searchConfig.query(), 'a query');\n    assert.isFalse(searchConfig.ignoreCase());\n    assert.isTrue(searchConfig.isRegex());\n  });\n\n  it('notifies the user when no search results were found', async () => {\n    const fakeScope = new FakeSearchScope();\n    const searchView = new TestSearchView(() => fakeScope);\n\n    searchView.triggerSearch('a query', true, true);\n\n    const {searchFinishedCallback} = await fakeScope.performSearchCalledPromise;\n    searchFinishedCallback(/* finished */ true);\n\n    assert.strictEqual(searchView.currentSearchResultMessage, 'No matches found.');\n  });\n\n  it('updates the search result message with a count when search results are added', async () => {\n    const fakeScope = new FakeSearchScope();\n    const fakeResultsPane = sinon.createStubInstance(Search.SearchResultsPane.SearchResultsPane);\n    const searchView = new TestSearchView(() => fakeScope, fakeResultsPane);\n\n    searchView.triggerSearch('a query', true, true);\n\n    const {searchResultCallback} = await fakeScope.performSearchCalledPromise;\n\n    searchResultCallback({matchesCount: () => 10} as Search.SearchScope.SearchResult);\n    await searchView.throttler.process?.();\n    assert.strictEqual(searchView.currentSearchResultMessage, 'Found 10 matching lines in 1 file.');\n\n    searchResultCallback({matchesCount: () => 42} as Search.SearchScope.SearchResult);\n    await searchView.throttler.process?.();\n    assert.strictEqual(searchView.currentSearchResultMessage, 'Found 52 matching lines in 2 files.');\n  });\n\n  it('forwards each SearchResult to the results pane', async () => {\n    const fakeScope = new FakeSearchScope();\n    const fakeResultsPane = sinon.createStubInstance(Search.SearchResultsPane.SearchResultsPane);\n    const searchView = new TestSearchView(() => fakeScope, fakeResultsPane);\n\n    searchView.triggerSearch('a query', true, true);\n\n    const {searchResultCallback} = await fakeScope.performSearchCalledPromise;\n\n    const searchResult1 = ({matchesCount: () => 10}) as Search.SearchScope.SearchResult;\n    const searchResult2 = ({matchesCount: () => 42}) as Search.SearchScope.SearchResult;\n\n    searchResultCallback(searchResult1);\n    searchResultCallback(searchResult2);\n    await searchView.throttler.process?.();\n\n    assert.isTrue(fakeResultsPane.addSearchResult.calledTwice);\n    assert.strictEqual(fakeResultsPane.addSearchResult.args[0][0], searchResult1);\n    assert.strictEqual(fakeResultsPane.addSearchResult.args[1][0], searchResult2);\n  });\n});\n"]}