{"version":3,"file":"AdvancedApp.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/emulation/AdvancedApp.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,MAAM,MAAM,6BAA6B,CAAC;AACtD,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAEhD,OAAO,EACL,sBAAsB,EACtB,oBAAoB,GACrB,MAAM,qCAAqC,CAAC;AAC7C,OAAO,EAAC,0BAA0B,EAAC,MAAM,iCAAiC,CAAC;AAC3E,OAAO,KAAK,YAAY,MAAM,gDAAgD,CAAC;AAE/E,OAAO,KAAK,SAAS,MAAM,gBAAgB,CAAC;AAE5C,0BAA0B,CAAC,aAAa,EAAE,GAAG,EAAE;IAC7C,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,sBAAsB,EAAE,CAAC;QAC/B,MAAM,CAAC,QAAQ,CAAC,uBAAuB,CAAC,CAAC;gBACvC,QAAQ,uDAAwC;gBAChD,WAAW,EAAE,kBAAkB;gBAC/B,WAAW,+CAAkC;gBAC7C,YAAY,EAAE,OAAO;gBACrB,OAAO,EAAE;oBACP;wBACE,KAAK,EAAE,OAAO;wBACd,IAAI,EAAE,GAAG,EAAE,CAAC,OAA4C;wBACxD,KAAK,EAAE,GAAG,EAAE,CAAC,eAAoD;wBACjE,GAAG,EAAE,KAAK;qBACX;oBACD;wBACE,KAAK,EAAE,QAAQ;wBACf,IAAI,EAAE,GAAG,EAAE,CAAC,QAA6C;wBACzD,KAAK,EAAE,GAAG,EAAE,CAAC,gBAAqD;wBAClE,GAAG,EAAE,KAAK;qBACX;oBACD;wBACE,KAAK,EAAE,MAAM;wBACb,IAAI,EAAE,GAAG,EAAE,CAAC,MAA2C;wBACvD,KAAK,EAAE,GAAG,EAAE,CAAC,cAAmD;wBAChE,GAAG,EAAE,KAAK;qBACX;oBACD;wBACE,KAAK,EAAE,UAAU;wBACjB,IAAI,EAAE,GAAG,EAAE,CAAC,UAA+C;wBAC3D,KAAK,EAAE,GAAG,EAAE,CAAC,QAA6C;wBAC1D,GAAG,EAAE,KAAK;qBACX;iBACF;aACF,CAAC,CAAC,CAAC;QACJ,MAAM,oBAAoB,CAAC,EAAC,KAAK,EAAE,KAAK,EAAC,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,MAAM,sBAAsB,EAAE,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;QAC7D,MAAM,WAAW,GAAG,SAAS,CAAC,WAAW,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;QACjE,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QAE3B,MAAM,cAAc,GAAG,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,YAAY,CAAC,QAAQ,EAAE,EAAE,8BAA8B,CAAC,CAAC;QAEvG,IAAI,CAAC,qBAAqB,CAAC,6BAA6B,CAAC,MAAM,CAAC,wBAAwB,CACpF,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;QAE5D,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport {\n  deinitializeGlobalVars,\n  initializeGlobalVars,\n} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\nimport * as ThemeSupport from '../../ui/legacy/theme_support/theme_support.js';\n\nimport * as Emulation from './emulation.js';\n\ndescribeWithMockConnection('AdvancedApp', () => {\n  beforeEach(async () => {\n    await deinitializeGlobalVars();\n    Common.Settings.registerSettingsForTest([{\n      category: Common.Settings.SettingCategory.GLOBAL,\n      settingName: 'currentDockState',\n      settingType: Common.Settings.SettingType.ENUM,\n      defaultValue: 'right',\n      options: [\n        {\n          value: 'right',\n          text: () => 'right' as Platform.UIString.LocalizedString,\n          title: () => 'Dock to right' as Platform.UIString.LocalizedString,\n          raw: false,\n        },\n        {\n          value: 'bottom',\n          text: () => 'bottom' as Platform.UIString.LocalizedString,\n          title: () => 'Dock to bottom' as Platform.UIString.LocalizedString,\n          raw: false,\n        },\n        {\n          value: 'left',\n          text: () => 'left' as Platform.UIString.LocalizedString,\n          title: () => 'Dock to left' as Platform.UIString.LocalizedString,\n          raw: false,\n        },\n        {\n          value: 'undocked',\n          text: () => 'undocked' as Platform.UIString.LocalizedString,\n          title: () => 'Undock' as Platform.UIString.LocalizedString,\n          raw: false,\n        },\n      ],\n    }]);\n    await initializeGlobalVars({reset: false});\n  });\n\n  afterEach(async () => {\n    await deinitializeGlobalVars();\n  });\n\n  it('updates colors node link on ColorThemeChanged', async () => {\n    const advancedApp = Emulation.AdvancedApp.AdvancedApp.instance();\n    assert.exists(advancedApp);\n\n    const fetchColorsSpy = sinon.spy(ThemeSupport.ThemeSupport.instance(), 'fetchColorsAndApplyHostTheme');\n\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.events.dispatchEventToListeners(\n        Host.InspectorFrontendHostAPI.Events.ColorThemeChanged);\n\n    assert.isTrue(fetchColorsSpy.called);\n  });\n});\n"]}