{"version":3,"file":"NetworkDataGridNode.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/network/NetworkDataGridNode.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport {describeWithEnvironment} from '../../testing/EnvironmentHelpers.js';\n\nimport * as Network from './network.js';\n\ndescribeWithEnvironment('NetworkLogView', () => {\n  it('adds marker to requests with overridden headers', async () => {\n    const request = SDK.NetworkRequest.NetworkRequest.create(\n        'requestId' as Protocol.Network.RequestId, 'https://www.example.com' as Platform.DevToolsPath.UrlString,\n        '' as Platform.DevToolsPath.UrlString, null, null, null);\n    request.statusCode = 200;\n\n    request.setWasIntercepted(true);\n    request.responseHeaders = [{name: 'foo', value: 'overridden'}];\n    request.originalResponseHeaders = [{name: 'foo', value: 'original'}];\n\n    const networkRequestNode = new Network.NetworkDataGridNode.NetworkRequestNode(\n        {} as Network.NetworkDataGridNode.NetworkLogViewInterface, request);\n    const el = document.createElement('div');\n    networkRequestNode.renderCell(el, 'name');\n    const marker = el.querySelector('.network-override-marker');\n    const tooltip = el.querySelector('[title=\"Request headers are overridden\"]');\n    assert.instanceOf(marker, HTMLDivElement);\n    assert.isNotNull(tooltip);\n  });\n\n  it('adds marker to requests with overridden content', async () => {\n    const request = SDK.NetworkRequest.NetworkRequest.create(\n        'requestId' as Protocol.Network.RequestId, 'https://www.example.com' as Platform.DevToolsPath.UrlString,\n        '' as Platform.DevToolsPath.UrlString, null, null, null);\n    request.statusCode = 200;\n\n    request.setWasIntercepted(true);\n    request.hasOverriddenContent = true;\n\n    const networkRequestNode = new Network.NetworkDataGridNode.NetworkRequestNode(\n        {} as Network.NetworkDataGridNode.NetworkLogViewInterface, request);\n    const el = document.createElement('div');\n    networkRequestNode.renderCell(el, 'name');\n    const marker = el.querySelector('.network-override-marker');\n    const tooltip = el.querySelector('[title=\"Request content is overridden\"]');\n    assert.instanceOf(marker, HTMLDivElement);\n    assert.isNotNull(tooltip);\n  });\n\n  it('adds marker to requests with overridden headers and content', async () => {\n    const request = SDK.NetworkRequest.NetworkRequest.create(\n        'requestId' as Protocol.Network.RequestId, 'https://www.example.com' as Platform.DevToolsPath.UrlString,\n        '' as Platform.DevToolsPath.UrlString, null, null, null);\n    request.statusCode = 200;\n\n    request.setWasIntercepted(true);\n    request.hasOverriddenContent = true;\n    request.responseHeaders = [{name: 'foo', value: 'overridden'}];\n    request.originalResponseHeaders = [{name: 'foo', value: 'original'}];\n\n    const networkRequestNode = new Network.NetworkDataGridNode.NetworkRequestNode(\n        {} as Network.NetworkDataGridNode.NetworkLogViewInterface, request);\n    const el = document.createElement('div');\n    networkRequestNode.renderCell(el, 'name');\n    const marker = el.querySelector('.network-override-marker');\n    const tooltip = el.querySelector('[title=\"Both request content and headers are overridden\"]');\n    assert.instanceOf(marker, HTMLDivElement);\n    assert.isNotNull(tooltip);\n  });\n\n  it('does not add marker to unoverridden request', async () => {\n    const request = SDK.NetworkRequest.NetworkRequest.create(\n        'requestId' as Protocol.Network.RequestId, 'https://www.example.com' as Platform.DevToolsPath.UrlString,\n        '' as Platform.DevToolsPath.UrlString, null, null, null);\n    request.statusCode = 200;\n\n    const networkRequestNode = new Network.NetworkDataGridNode.NetworkRequestNode(\n        {} as Network.NetworkDataGridNode.NetworkLogViewInterface, request);\n    const el = document.createElement('div');\n    networkRequestNode.renderCell(el, 'name');\n    const marker = el.querySelector('.network-override-marker');\n    assert.isNull(marker);\n  });\n\n  it('does not add a marker to requests which are intercepted but not overridden', async () => {\n    const request = SDK.NetworkRequest.NetworkRequest.create(\n        'requestId' as Protocol.Network.RequestId, 'https://www.example.com' as Platform.DevToolsPath.UrlString,\n        '' as Platform.DevToolsPath.UrlString, null, null, null);\n    request.statusCode = 200;\n\n    request.setWasIntercepted(true);\n\n    const networkRequestNode = new Network.NetworkDataGridNode.NetworkRequestNode(\n        {} as Network.NetworkDataGridNode.NetworkLogViewInterface, request);\n    const el = document.createElement('div');\n    networkRequestNode.renderCell(el, 'name');\n    const marker = el.querySelector('.network-override-marker');\n    assert.isNull(marker);\n  });\n\n  it('adds an error red icon to the left of the failed requests', async () => {\n    const request = SDK.NetworkRequest.NetworkRequest.create(\n        'requestId' as Protocol.Network.RequestId, 'https://www.example.com' as Platform.DevToolsPath.UrlString,\n        '' as Platform.DevToolsPath.UrlString, null, null, null);\n    request.statusCode = 404;\n\n    const networkRequestNode = new Network.NetworkDataGridNode.NetworkRequestNode(\n        {} as Network.NetworkDataGridNode.NetworkLogViewInterface, request);\n    const el = document.createElement('div');\n\n    networkRequestNode.renderCell(el, 'name');\n    const iconElement = el.querySelector('.icon') as HTMLElement;\n\n    const iconStyle = iconElement.style;\n    const indexOfIconImage = iconStyle.webkitMaskImage.indexOf('Images/') + 7;\n    const iconImage = iconStyle.webkitMaskImage.substring(indexOfIconImage);\n\n    assert.strictEqual('cross-circle-filled.svg\")', iconImage);\n\n    const backgroundColorOfIcon = iconStyle.backgroundColor.toString();\n    assert.strictEqual(backgroundColorOfIcon, 'var(--icon-error)');\n  });\n\n  it('show media icon', async () => {\n    const request = SDK.NetworkRequest.NetworkRequest.create(\n        'requestId' as Protocol.Network.RequestId,\n        'https://www.example.com/test.mp3' as Platform.DevToolsPath.UrlString, '' as Platform.DevToolsPath.UrlString,\n        null, null, null);\n    request.setResourceType(Common.ResourceType.resourceTypes.Media);\n    request.mimeType = 'audio/mpeg';\n\n    const networkRequestNode = new Network.NetworkDataGridNode.NetworkRequestNode(\n        {} as Network.NetworkDataGridNode.NetworkLogViewInterface, request);\n    const el = document.createElement('div');\n\n    networkRequestNode.renderCell(el, 'name');\n    const iconElement = el.querySelector('.icon') as HTMLElement;\n\n    const iconStyle = iconElement.style;\n    const indexOfIconImage = iconStyle.webkitMaskImage.indexOf('Images/') + 7;\n    const iconImage = iconStyle.webkitMaskImage.substring(indexOfIconImage);\n\n    assert.strictEqual('file-media.svg\")', iconImage);\n  });\n\n  it('show wasm icon', async () => {\n    const request = SDK.NetworkRequest.NetworkRequest.create(\n        'requestId' as Protocol.Network.RequestId,\n        'https://www.example.com/test.wasm' as Platform.DevToolsPath.UrlString, '' as Platform.DevToolsPath.UrlString,\n        null, null, null);\n    request.setResourceType(Common.ResourceType.resourceTypes.Wasm);\n    request.mimeType = 'application/wasm';\n\n    const networkRequestNode = new Network.NetworkDataGridNode.NetworkRequestNode(\n        {} as Network.NetworkDataGridNode.NetworkLogViewInterface, request);\n    const el = document.createElement('div');\n\n    networkRequestNode.renderCell(el, 'name');\n    const iconElement = el.querySelector('.icon') as HTMLElement;\n\n    const iconStyle = iconElement.style;\n    const indexOfIconImage = iconStyle.webkitMaskImage.indexOf('Images/') + 7;\n    const iconImage = iconStyle.webkitMaskImage.substring(indexOfIconImage);\n\n    assert.strictEqual('file-wasm.svg\")', iconImage);\n  });\n\n  it('show websocket icon', async () => {\n    const request = SDK.NetworkRequest.NetworkRequest.create(\n        'requestId' as Protocol.Network.RequestId, 'https://www.example.com/ws' as Platform.DevToolsPath.UrlString,\n        '' as Platform.DevToolsPath.UrlString, null, null, null);\n    request.setResourceType(Common.ResourceType.resourceTypes.WebSocket);\n    request.mimeType = '';\n\n    const networkRequestNode = new Network.NetworkDataGridNode.NetworkRequestNode(\n        {} as Network.NetworkDataGridNode.NetworkLogViewInterface, request);\n    const el = document.createElement('div');\n\n    networkRequestNode.renderCell(el, 'name');\n    const iconElement = el.querySelector('.icon') as HTMLElement;\n\n    const iconStyle = iconElement.style;\n    const indexOfIconImage = iconStyle.webkitMaskImage.indexOf('Images/') + 7;\n    const iconImage = iconStyle.webkitMaskImage.substring(indexOfIconImage);\n\n    assert.strictEqual('file-websocket.svg\")', iconImage);\n  });\n\n  it('shows fetch icon', async () => {\n    const request = SDK.NetworkRequest.NetworkRequest.create(\n        'requestId' as Protocol.Network.RequestId,\n        'https://www.example.com/test.json?keepalive=false' as Platform.DevToolsPath.UrlString,\n        '' as Platform.DevToolsPath.UrlString, null, null, null);\n    request.setResourceType(Common.ResourceType.resourceTypes.Fetch);\n    request.mimeType = '';\n\n    const networkRequestNode = new Network.NetworkDataGridNode.NetworkRequestNode(\n        {} as Network.NetworkDataGridNode.NetworkLogViewInterface, request);\n    const el = document.createElement('div');\n\n    networkRequestNode.renderCell(el, 'name');\n    const iconElement = el.querySelector('.icon') as HTMLElement;\n\n    const iconStyle = iconElement.style;\n    const indexOfIconImage = iconStyle.webkitMaskImage.indexOf('Images/') + 7;\n    const iconImage = iconStyle.webkitMaskImage.substring(indexOfIconImage);\n\n    assert.strictEqual('file-fetch-xhr.svg\")', iconImage);\n  });\n\n  it('shows xhr icon', async () => {\n    const request = SDK.NetworkRequest.NetworkRequest.create(\n        'requestId' as Protocol.Network.RequestId,\n        'https://www.example.com/test.json?keepalive=false' as Platform.DevToolsPath.UrlString,\n        '' as Platform.DevToolsPath.UrlString, null, null, null);\n    request.setResourceType(Common.ResourceType.resourceTypes.XHR);\n    request.mimeType = 'application/octet-stream';\n\n    const networkRequestNode = new Network.NetworkDataGridNode.NetworkRequestNode(\n        {} as Network.NetworkDataGridNode.NetworkLogViewInterface, request);\n    const el = document.createElement('div');\n\n    networkRequestNode.renderCell(el, 'name');\n    const iconElement = el.querySelector('.icon') as HTMLElement;\n\n    const iconStyle = iconElement.style;\n    const indexOfIconImage = iconStyle.webkitMaskImage.indexOf('Images/') + 7;\n    const iconImage = iconStyle.webkitMaskImage.substring(indexOfIconImage);\n\n    assert.strictEqual('file-fetch-xhr.svg\")', iconImage);\n  });\n\n  it('mime win: show image preview icon for xhr-image', async () => {\n    const request = SDK.NetworkRequest.NetworkRequest.create(\n        'requestId' as Protocol.Network.RequestId,\n        'https://www.example.com/test.svg' as Platform.DevToolsPath.UrlString, '' as Platform.DevToolsPath.UrlString,\n        null, null, null);\n    request.setResourceType(Common.ResourceType.resourceTypes.XHR);\n    request.mimeType = 'image/svg+xml';\n\n    const networkRequestNode = new Network.NetworkDataGridNode.NetworkRequestNode(\n        {} as Network.NetworkDataGridNode.NetworkLogViewInterface, request);\n    const el = document.createElement('div');\n\n    networkRequestNode.renderCell(el, 'name');\n    const iconElement = el.querySelector('.icon.image') as HTMLElement;\n    const imagePreview = el.querySelector('.image-network-icon-preview') as HTMLImageElement;\n\n    assert.isTrue(iconElement instanceof HTMLDivElement);\n    assert.isTrue(imagePreview instanceof HTMLImageElement);\n  });\n\n  it('mime win: show document icon for fetch-html', async () => {\n    const request = SDK.NetworkRequest.NetworkRequest.create(\n        'requestId' as Protocol.Network.RequestId, 'https://www.example.com/page' as Platform.DevToolsPath.UrlString,\n        '' as Platform.DevToolsPath.UrlString, null, null, null);\n    request.setResourceType(Common.ResourceType.resourceTypes.Fetch);\n    request.mimeType = 'text/html';\n\n    const networkRequestNode = new Network.NetworkDataGridNode.NetworkRequestNode(\n        {} as Network.NetworkDataGridNode.NetworkLogViewInterface, request);\n    const el = document.createElement('div');\n\n    networkRequestNode.renderCell(el, 'name');\n    const iconElement = el.querySelector('.icon') as HTMLElement;\n\n    const iconStyle = iconElement.style;\n    const indexOfIconImage = iconStyle.webkitMaskImage.indexOf('Images/') + 7;\n    const iconImage = iconStyle.webkitMaskImage.substring(indexOfIconImage);\n\n    assert.strictEqual('file-document.svg\")', iconImage);\n  });\n\n  it('mime win: show generic icon for preflight-text', async () => {\n    const request = SDK.NetworkRequest.NetworkRequest.create(\n        'requestId' as Protocol.Network.RequestId,\n        'https://www.example.com/api/test' as Platform.DevToolsPath.UrlString, '' as Platform.DevToolsPath.UrlString,\n        null, null, null);\n    request.setResourceType(Common.ResourceType.resourceTypes.Preflight);\n    request.mimeType = 'text/plain';\n\n    const networkRequestNode = new Network.NetworkDataGridNode.NetworkRequestNode(\n        {} as Network.NetworkDataGridNode.NetworkLogViewInterface, request);\n    const el = document.createElement('div');\n\n    networkRequestNode.renderCell(el, 'name');\n    const iconElement = el.querySelector('.icon') as HTMLElement;\n\n    const iconStyle = iconElement.style;\n    const indexOfIconImage = iconStyle.webkitMaskImage.indexOf('Images/') + 7;\n    const iconImage = iconStyle.webkitMaskImage.substring(indexOfIconImage);\n\n    assert.strictEqual('file-generic.svg\")', iconImage);\n  });\n\n  it('mime win: show script icon for other-javascript)', async () => {\n    const request = SDK.NetworkRequest.NetworkRequest.create(\n        'requestId' as Protocol.Network.RequestId, 'https://www.example.com/ping' as Platform.DevToolsPath.UrlString,\n        '' as Platform.DevToolsPath.UrlString, null, null, null);\n    request.setResourceType(Common.ResourceType.resourceTypes.Other);\n    request.mimeType = 'application/javascript';\n\n    const networkRequestNode = new Network.NetworkDataGridNode.NetworkRequestNode(\n        {} as Network.NetworkDataGridNode.NetworkLogViewInterface, request);\n    const el = document.createElement('div');\n\n    networkRequestNode.renderCell(el, 'name');\n    const iconElement = el.querySelector('.icon') as HTMLElement;\n\n    const iconStyle = iconElement.style;\n    const indexOfIconImage = iconStyle.webkitMaskImage.indexOf('Images/') + 7;\n    const iconImage = iconStyle.webkitMaskImage.substring(indexOfIconImage);\n\n    assert.strictEqual('file-script.svg\")', iconImage);\n  });\n\n  it('mime win: shows json icon for fetch-json', async () => {\n    const request = SDK.NetworkRequest.NetworkRequest.create(\n        'requestId' as Protocol.Network.RequestId,\n        'https://www.example.com/api/list' as Platform.DevToolsPath.UrlString, '' as Platform.DevToolsPath.UrlString,\n        null, null, null);\n    request.setResourceType(Common.ResourceType.resourceTypes.Fetch);\n    request.mimeType = 'application/json';\n\n    const networkRequestNode = new Network.NetworkDataGridNode.NetworkRequestNode(\n        {} as Network.NetworkDataGridNode.NetworkLogViewInterface, request);\n    const el = document.createElement('div');\n\n    networkRequestNode.renderCell(el, 'name');\n    const iconElement = el.querySelector('.icon') as HTMLElement;\n\n    const iconStyle = iconElement.style;\n    const indexOfIconImage = iconStyle.webkitMaskImage.indexOf('Images/') + 7;\n    const iconImage = iconStyle.webkitMaskImage.substring(indexOfIconImage);\n\n    assert.strictEqual('file-json.svg\")', iconImage);\n  });\n\n  it('shows the corresponding status text of a status code', async () => {\n    const request = SDK.NetworkRequest.NetworkRequest.create(\n        'requestId' as Protocol.Network.RequestId, 'https://www.example.com' as Platform.DevToolsPath.UrlString,\n        '' as Platform.DevToolsPath.UrlString, null, null, null);\n    request.statusCode = 305;\n\n    const networkRequestNode = new Network.NetworkDataGridNode.NetworkRequestNode(\n        {} as Network.NetworkDataGridNode.NetworkLogViewInterface, request);\n    const el = document.createElement('div');\n\n    networkRequestNode.renderCell(el, 'status');\n\n    assert.strictEqual(el.title, '305 Use Proxy');\n  });\n\n  it('populate has-overrides: headers', async () => {\n    const request = SDK.NetworkRequest.NetworkRequest.create(\n        'requestId' as Protocol.Network.RequestId, 'https://www.example.com' as Platform.DevToolsPath.UrlString,\n        '' as Platform.DevToolsPath.UrlString, null, null, null);\n    request.statusCode = 200;\n\n    request.setWasIntercepted(true);\n    request.responseHeaders = [{name: 'foo', value: 'overridden'}];\n    request.originalResponseHeaders = [{name: 'foo', value: 'original'}];\n\n    const networkRequestNode = new Network.NetworkDataGridNode.NetworkRequestNode(\n        {} as Network.NetworkDataGridNode.NetworkLogViewInterface, request);\n    const el = document.createElement('div');\n    networkRequestNode.renderCell(el, 'has-overrides');\n    const marker = el.innerText;\n    assert.strictEqual(marker, 'headers');\n  });\n\n  it('populate has-overrides: content', async () => {\n    const request = SDK.NetworkRequest.NetworkRequest.create(\n        'requestId' as Protocol.Network.RequestId, 'https://www.example.com' as Platform.DevToolsPath.UrlString,\n        '' as Platform.DevToolsPath.UrlString, null, null, null);\n    request.statusCode = 200;\n\n    request.setWasIntercepted(true);\n    request.hasOverriddenContent = true;\n\n    const networkRequestNode = new Network.NetworkDataGridNode.NetworkRequestNode(\n        {} as Network.NetworkDataGridNode.NetworkLogViewInterface, request);\n    const el = document.createElement('div');\n    networkRequestNode.renderCell(el, 'has-overrides');\n    const marker = el.innerText;\n    assert.strictEqual(marker, 'content');\n  });\n\n  it('populate has-overrides: content, headers', async () => {\n    const request = SDK.NetworkRequest.NetworkRequest.create(\n        'requestId' as Protocol.Network.RequestId, 'https://www.example.com' as Platform.DevToolsPath.UrlString,\n        '' as Platform.DevToolsPath.UrlString, null, null, null);\n    request.statusCode = 200;\n\n    request.setWasIntercepted(true);\n    request.hasOverriddenContent = true;\n    request.responseHeaders = [{name: 'foo', value: 'overridden'}];\n    request.originalResponseHeaders = [{name: 'foo', value: 'original'}];\n\n    const networkRequestNode = new Network.NetworkDataGridNode.NetworkRequestNode(\n        {} as Network.NetworkDataGridNode.NetworkLogViewInterface, request);\n    const el = document.createElement('div');\n    networkRequestNode.renderCell(el, 'has-overrides');\n    const marker = el.innerText;\n    assert.strictEqual(marker, 'content, headers');\n  });\n\n  it('populate has-overrides: null', async () => {\n    const request = SDK.NetworkRequest.NetworkRequest.create(\n        'requestId' as Protocol.Network.RequestId, 'https://www.example.com' as Platform.DevToolsPath.UrlString,\n        '' as Platform.DevToolsPath.UrlString, null, null, null);\n    request.statusCode = 200;\n\n    request.setWasIntercepted(false);\n\n    const networkRequestNode = new Network.NetworkDataGridNode.NetworkRequestNode(\n        {} as Network.NetworkDataGridNode.NetworkLogViewInterface, request);\n    const el = document.createElement('div');\n    networkRequestNode.renderCell(el, 'has-overrides');\n    const marker = el.innerText;\n    assert.strictEqual(marker, '');\n  });\n\n  it('only counts non-blocked response cookies', async () => {\n    const request = SDK.NetworkRequest.NetworkRequest.create(\n        'requestId' as Protocol.Network.RequestId, 'https://www.example.com' as Platform.DevToolsPath.UrlString,\n        '' as Platform.DevToolsPath.UrlString, null, null, null);\n    request.addExtraResponseInfo({\n      responseHeaders:\n          [{name: 'Set-Cookie', value: 'good=123; Path=/; Secure; SameSite=None\\nbad=456; Path=/; SameSite=None'}],\n      blockedResponseCookies: [{\n        blockedReasons: [Protocol.Network.SetCookieBlockedReason.SameSiteNoneInsecure],\n        cookie: null,\n        cookieLine: 'bad=456; Path=/; SameSite=None',\n      }],\n      resourceIPAddressSpace: Protocol.Network.IPAddressSpace.Public,\n      statusCode: undefined,\n      cookiePartitionKey: undefined,\n      cookiePartitionKeyOpaque: undefined,\n      exemptedResponseCookies: undefined,\n    });\n\n    const networkRequestNode = new Network.NetworkDataGridNode.NetworkRequestNode(\n        {} as Network.NetworkDataGridNode.NetworkLogViewInterface, request);\n    const el = document.createElement('div');\n    networkRequestNode.renderCell(el, 'set-cookies');\n    assert.strictEqual(el.innerText, '1');\n  });\n\n  it('shows transferred size when the matched ServiceWorker router source is network', async () => {\n    const request = SDK.NetworkRequest.NetworkRequest.create(\n        'requestId' as Protocol.Network.RequestId, 'https://www.example.com' as Platform.DevToolsPath.UrlString,\n        '' as Platform.DevToolsPath.UrlString, null, null, null);\n    request.resourceSize = 4;\n    request.setTransferSize(2);\n    request.statusCode = 200;\n    request.serviceWorkerRouterInfo = {\n      ruleIdMatched: 1,\n      matchedSourceType: Protocol.Network.ServiceWorkerRouterSource.Network,\n    };\n\n    const networkRequestNode = new Network.NetworkDataGridNode.NetworkRequestNode(\n        {} as Network.NetworkDataGridNode.NetworkLogViewInterface, request);\n    const el = document.createElement('div');\n    networkRequestNode.renderCell(el, 'size');\n    assert.strictEqual(el.innerText, '(ServiceWorker router)4\\xa0B');\n    const tooltip = el.getAttribute('title')!;\n    const expected = 'Matched to ServiceWorker router#1, 2\\xa0B transferred over network, resource size: 4\\xa0B';\n    assert.strictEqual(tooltip, expected);\n  });\n});\n"]}