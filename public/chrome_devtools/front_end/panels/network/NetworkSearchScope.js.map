{"version":3,"file":"NetworkSearchScope.js","sourceRoot":"","sources":["../../../../../../front_end/panels/network/NetworkSearchScope.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport type * as Logs from '../../models/logs/logs.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport type * as Workspace from '../../models/workspace/workspace.js';\nimport * as NetworkForward from '../../panels/network/forward/forward.js';\nimport type * as Search from '../search/search.js';\n\nconst UIStrings = {\n  /**\n   *@description Text for web URLs\n   */\n  url: 'URL',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/network/NetworkSearchScope.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class NetworkSearchScope implements Search.SearchScope.SearchScope {\n  #networkLog: Logs.NetworkLog.NetworkLog;\n\n  constructor(networkLog: Logs.NetworkLog.NetworkLog) {\n    this.#networkLog = networkLog;\n  }\n\n  performIndexing(progress: Common.Progress.Progress): void {\n    queueMicrotask(() => {\n      progress.done();\n    });\n  }\n\n  async performSearch(\n      searchConfig: Workspace.SearchConfig.SearchConfig, progress: Common.Progress.Progress,\n      searchResultCallback: (arg0: Search.SearchScope.SearchResult) => void,\n      searchFinishedCallback: (arg0: boolean) => void): Promise<void> {\n    const promises = [];\n    const requests =\n        this.#networkLog.requests().filter(request => searchConfig.filePathMatchesFileQuery(request.url()));\n    progress.setTotalWork(requests.length);\n    for (const request of requests) {\n      const promise = this.searchRequest(searchConfig, request, progress);\n      promises.push(promise);\n    }\n    const resultsWithNull = await Promise.all(promises);\n    const results = (resultsWithNull.filter(result => result !== null) as NetworkSearchResult[]);\n    if (progress.isCanceled()) {\n      searchFinishedCallback(false);\n      return;\n    }\n    for (const result of results.sort((r1, r2) => r1.label().localeCompare(r2.label()))) {\n      if (result.matchesCount() > 0) {\n        searchResultCallback(result);\n      }\n    }\n    progress.done();\n    searchFinishedCallback(true);\n  }\n\n  private async searchRequest(\n      searchConfig: Workspace.SearchConfig.SearchConfig, request: SDK.NetworkRequest.NetworkRequest,\n      progress: Common.Progress.Progress): Promise<NetworkSearchResult|null> {\n    const bodyMatches = await NetworkSearchScope.#responseBodyMatches(searchConfig, request);\n    if (progress.isCanceled()) {\n      return null;\n    }\n    const locations = [];\n    if (stringMatchesQuery(request.url())) {\n      locations.push(NetworkForward.UIRequestLocation.UIRequestLocation.urlMatch(request));\n    }\n    for (const header of request.requestHeaders()) {\n      if (headerMatchesQuery(header)) {\n        locations.push(NetworkForward.UIRequestLocation.UIRequestLocation.requestHeaderMatch(request, header));\n      }\n    }\n    for (const header of request.responseHeaders) {\n      if (headerMatchesQuery(header)) {\n        locations.push(NetworkForward.UIRequestLocation.UIRequestLocation.responseHeaderMatch(request, header));\n      }\n    }\n    for (const match of bodyMatches) {\n      locations.push(NetworkForward.UIRequestLocation.UIRequestLocation.bodyMatch(request, match));\n    }\n    progress.incrementWorked();\n    return new NetworkSearchResult(request, locations);\n\n    function headerMatchesQuery(header: SDK.NetworkRequest.NameValue): boolean {\n      return stringMatchesQuery(`${header.name}: ${header.value}`);\n    }\n\n    function stringMatchesQuery(string: string): boolean {\n      const flags = searchConfig.ignoreCase() ? 'i' : '';\n      const regExps =\n          searchConfig.queries().map(query => new RegExp(Platform.StringUtilities.escapeForRegExp(query), flags));\n      let pos = 0;\n      for (const regExp of regExps) {\n        const match = string.substr(pos).match(regExp);\n        if (!match || match.index === undefined) {\n          return false;\n        }\n        pos += match.index + match[0].length;\n      }\n      return true;\n    }\n  }\n\n  static async #responseBodyMatches(\n      searchConfig: Workspace.SearchConfig.SearchConfig,\n      request: SDK.NetworkRequest.NetworkRequest): Promise<TextUtils.ContentProvider.SearchMatch[]> {\n    if (!request.contentType().isTextType()) {\n      return [];\n    }\n\n    let matches: TextUtils.ContentProvider.SearchMatch[] = [];\n    for (const query of searchConfig.queries()) {\n      const tmpMatches = await request.searchInContent(query, !searchConfig.ignoreCase(), searchConfig.isRegex());\n      if (tmpMatches.length === 0) {\n        // Mirror file search that all individual queries must produce matches.\n        return [];\n      }\n      matches =\n          Platform.ArrayUtilities.mergeOrdered(matches, tmpMatches, TextUtils.ContentProvider.SearchMatch.comparator);\n    }\n    return matches;\n  }\n\n  stopSearch(): void {\n  }\n}\n\nexport class NetworkSearchResult implements Search.SearchScope.SearchResult {\n  private readonly request: SDK.NetworkRequest.NetworkRequest;\n  private readonly locations: NetworkForward.UIRequestLocation.UIRequestLocation[];\n\n  constructor(\n      request: SDK.NetworkRequest.NetworkRequest, locations: NetworkForward.UIRequestLocation.UIRequestLocation[]) {\n    this.request = request;\n    this.locations = locations;\n  }\n\n  matchesCount(): number {\n    return this.locations.length;\n  }\n\n  label(): string {\n    return this.request.displayName;\n  }\n\n  description(): string {\n    const parsedUrl = this.request.parsedURL;\n    if (!parsedUrl) {\n      return this.request.url();\n    }\n    return parsedUrl.urlWithoutScheme();\n  }\n\n  matchLineContent(index: number): string {\n    const location = this.locations[index];\n    if (location.isUrlMatch) {\n      return this.request.url();\n    }\n    const header = location?.header?.header;\n    if (header) {\n      return header.value;\n    }\n    return (location.searchMatch as TextUtils.ContentProvider.SearchMatch).lineContent;\n  }\n\n  matchRevealable(index: number): Object {\n    return this.locations[index];\n  }\n\n  matchLabel(index: number): string {\n    const location = this.locations[index];\n    if (location.isUrlMatch) {\n      return i18nString(UIStrings.url);\n    }\n    const header = location?.header?.header;\n    if (header) {\n      return `${header.name}:`;\n    }\n\n    return ((location.searchMatch as TextUtils.ContentProvider.SearchMatch).lineNumber + 1).toString();\n  }\n\n  matchColumn(index: number): number|undefined {\n    const location = this.locations[index];\n    return location.searchMatch?.columnNumber;\n  }\n\n  matchLength(index: number): number|undefined {\n    const location = this.locations[index];\n    return location.searchMatch?.matchLength;\n  }\n}\n"]}