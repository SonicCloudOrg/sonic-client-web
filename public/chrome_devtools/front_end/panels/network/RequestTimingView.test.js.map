{"version":3,"file":"RequestTimingView.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/network/RequestTimingView.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\n\nimport * as RequestTimingView from './RequestTimingView.js';\n\nfunction createNetworkRequest(\n    matchedSource: Protocol.Network.ServiceWorkerRouterSource,\n    actualSource: Protocol.Network.ServiceWorkerRouterSource): SDK.NetworkRequest.NetworkRequest {\n  const request = SDK.NetworkRequest.NetworkRequest.create(\n      'requestId' as Protocol.Network.RequestId, 'http://devtools-frontend.test' as Platform.DevToolsPath.UrlString,\n      '' as Platform.DevToolsPath.UrlString, null, null, null);\n\n  request.mimeType = 'application/wasm';\n  request.finished = true;\n  const timingInfo: Protocol.Network.ResourceTiming = {\n    requestTime: 500,\n    proxyStart: 0,\n    proxyEnd: 0,\n    dnsStart: 0,\n    dnsEnd: 0,\n    connectStart: 0,\n    connectEnd: 0,\n    sslStart: 0,\n    sslEnd: 0,\n    workerReady: 400,\n    workerStart: 500,\n    workerRouterEvaluationStart: -200,\n    workerFetchStart: 600,\n    workerRespondWithSettled: 700,\n    sendStart: 800,\n    sendEnd: 900,\n    pushStart: 0,\n    pushEnd: 0,\n    receiveHeadersStart: 1000,\n    receiveHeadersEnd: 0,\n  };\n  if (matchedSource === Protocol.Network.ServiceWorkerRouterSource.Cache) {\n    timingInfo.workerCacheLookupStart = -100;\n  }\n\n  request.timing = timingInfo;\n  request.serviceWorkerRouterInfo = {\n    ruleIdMatched: 1,\n    matchedSourceType: matchedSource,\n    actualSourceType: actualSource,\n  };\n\n  return request;\n}\n\ndescribe('ResourceTimingView', () => {\n  it('RequestTimeRanges has router evaluation field with SW router source as network', async () => {\n    const request = createNetworkRequest(\n        Protocol.Network.ServiceWorkerRouterSource.Network, Protocol.Network.ServiceWorkerRouterSource.Network);\n    const timingInfo = request.timing as Protocol.Network.ResourceTiming;\n    const timeRanges = RequestTimingView.RequestTimingView.calculateRequestTimeRanges(request, 100);\n    const routerEvaluationTime = timingInfo.workerRouterEvaluationStart as number;\n    const sendStart = timingInfo.sendStart as number;\n\n    const routerEvaluation = timeRanges.find(\n        timeRange => timeRange.name === RequestTimingView.RequestTimeRangeNames.ServiceWorkerRouterEvaluation);\n    assert.isTrue(Boolean(routerEvaluation), 'worker router evaluation exists');\n    assert.strictEqual(routerEvaluation?.start, timingInfo.requestTime + routerEvaluationTime / 1000);\n    assert.strictEqual(routerEvaluation?.end, timingInfo.requestTime + sendStart / 1000);\n\n    const cacheLookup = timeRanges.find(\n        timeRange => timeRange.name === RequestTimingView.RequestTimeRangeNames.ServiceWorkerCacheLookup);\n    assert.isFalse(Boolean(cacheLookup), 'worker cache lookup does not exist');\n  });\n\n  it('RequestTimeRanges has router evaluation field with SW router source as fetch-event', async () => {\n    const request = createNetworkRequest(\n        Protocol.Network.ServiceWorkerRouterSource.FetchEvent, Protocol.Network.ServiceWorkerRouterSource.FetchEvent);\n    const timingInfo = request.timing as Protocol.Network.ResourceTiming;\n    const timeRanges = RequestTimingView.RequestTimingView.calculateRequestTimeRanges(request, 100);\n    const routerEvaluationTime = timingInfo.workerRouterEvaluationStart as number;\n    const workerStart = timingInfo.workerStart as number;\n\n    const routerEvaluation = timeRanges.find(\n        timeRange => timeRange.name === RequestTimingView.RequestTimeRangeNames.ServiceWorkerRouterEvaluation);\n    assert.isTrue(Boolean(routerEvaluation), 'worker router evaluation exists');\n    assert.strictEqual(routerEvaluation?.start, timingInfo.requestTime + routerEvaluationTime / 1000);\n    assert.strictEqual(routerEvaluation?.end, timingInfo.requestTime + workerStart / 1000);\n\n    const cacheLookup = timeRanges.find(\n        timeRange => timeRange.name === RequestTimingView.RequestTimeRangeNames.ServiceWorkerCacheLookup);\n    assert.isFalse(Boolean(cacheLookup), 'worker cache lookup does not exist');\n  });\n\n  it('RequestTimeRanges has router evaluation field with SW router source as cache hit', async () => {\n    const request = createNetworkRequest(\n        Protocol.Network.ServiceWorkerRouterSource.Cache, Protocol.Network.ServiceWorkerRouterSource.Cache);\n    const timingInfo = request.timing as Protocol.Network.ResourceTiming;\n    const timeRanges = RequestTimingView.RequestTimingView.calculateRequestTimeRanges(request, 100);\n    const routerEvaluationTime = timingInfo.workerRouterEvaluationStart as number;\n    const cacheLookupStart = timingInfo.workerCacheLookupStart as number;\n\n    const routerEvaluation = timeRanges.find(\n        timeRange => timeRange.name === RequestTimingView.RequestTimeRangeNames.ServiceWorkerRouterEvaluation);\n    assert.isTrue(Boolean(routerEvaluation), 'worker router evaluation exists');\n    assert.strictEqual(routerEvaluation?.start, timingInfo.requestTime + routerEvaluationTime / 1000);\n    assert.strictEqual(routerEvaluation?.end, timingInfo.requestTime + cacheLookupStart / 1000);\n\n    const cacheLookup = timeRanges.find(\n        timeRange => timeRange.name === RequestTimingView.RequestTimeRangeNames.ServiceWorkerCacheLookup);\n    assert.isTrue(Boolean(cacheLookup), 'worker cache lookup does not exist');\n    assert.strictEqual(cacheLookup?.start, timingInfo.requestTime + cacheLookupStart / 1000);\n    assert.strictEqual(cacheLookup?.end, timingInfo.requestTime + timingInfo.receiveHeadersStart / 1000);\n  });\n\n  it('RequestTimeRanges has router evaluation field with SW router source as cache miss', async () => {\n    const request = createNetworkRequest(\n        Protocol.Network.ServiceWorkerRouterSource.Cache, Protocol.Network.ServiceWorkerRouterSource.Network);\n    const timingInfo = request.timing as Protocol.Network.ResourceTiming;\n    const timeRanges = RequestTimingView.RequestTimingView.calculateRequestTimeRanges(request, 100);\n    const routerEvaluationTime = timingInfo.workerRouterEvaluationStart as number;\n    const cacheLookupStart = timingInfo.workerCacheLookupStart as number;\n\n    const routerEvaluation = timeRanges.find(\n        timeRange => timeRange.name === RequestTimingView.RequestTimeRangeNames.ServiceWorkerRouterEvaluation);\n    assert.isTrue(Boolean(routerEvaluation), 'worker router evaluation exists');\n    assert.strictEqual(routerEvaluation?.start, timingInfo.requestTime + routerEvaluationTime / 1000);\n    assert.strictEqual(routerEvaluation?.end, timingInfo.requestTime + cacheLookupStart / 1000);\n\n    const cacheLookup = timeRanges.find(\n        timeRange => timeRange.name === RequestTimingView.RequestTimeRangeNames.ServiceWorkerCacheLookup);\n    assert.isTrue(Boolean(cacheLookup), 'worker cache lookup does not exist');\n    assert.strictEqual(cacheLookup?.start, timingInfo.requestTime + cacheLookupStart / 1000);\n    assert.strictEqual(cacheLookup?.end, timingInfo.requestTime + timingInfo.sendStart / 1000);\n  });\n});\n"]}