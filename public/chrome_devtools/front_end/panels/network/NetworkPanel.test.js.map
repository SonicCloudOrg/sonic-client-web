{"version":3,"file":"NetworkPanel.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/network/NetworkPanel.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Logs from '../../models/logs/logs.js';\nimport * as TraceEngine from '../../models/trace/trace.js';\nimport {createTarget, registerNoopActions} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\nimport * as Coordinator from '../../ui/components/render_coordinator/render_coordinator.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport * as Network from './network.js';\n\nconst coordinator = Coordinator.RenderCoordinator.RenderCoordinator.instance();\n\ndescribeWithMockConnection('NetworkPanel', () => {\n  let target: SDK.Target.Target;\n  let networkPanel: Network.NetworkPanel.NetworkPanel;\n\n  beforeEach(async () => {\n    registerNoopActions(['network.toggle-recording', 'network.clear']);\n\n    target = createTarget();\n    const dummyStorage = new Common.Settings.SettingsStorage({});\n    for (const settingName\n             of ['network-color-code-resource-types', 'network.group-by-frame', 'network-record-film-strip-setting']) {\n      Common.Settings.registerSettingExtension({\n        settingName,\n        settingType: Common.Settings.SettingType.BOOLEAN,\n        defaultValue: false,\n      });\n    }\n    Common.Settings.Settings.instance({\n      forceNew: true,\n      syncedStorage: dummyStorage,\n      globalStorage: dummyStorage,\n      localStorage: dummyStorage,\n    });\n    networkPanel = Network.NetworkPanel.NetworkPanel.instance({forceNew: true, displayScreenshotDelay: 0});\n    networkPanel.markAsRoot();\n    networkPanel.show(document.body);\n    await coordinator.done();\n  });\n\n  afterEach(async () => {\n    await coordinator.done();\n    networkPanel.detach();\n  });\n\n  const tracingTests = (inScope: boolean) => () => {\n    it('starts recording on page reload', async () => {\n      SDK.TargetManager.TargetManager.instance().setScopeTarget(inScope ? target : null);\n      Common.Settings.Settings.instance().moduleSetting('network-record-film-strip-setting').set(true);\n      const resourceTreeModel = target.model(SDK.ResourceTreeModel.ResourceTreeModel);\n      assert.exists(resourceTreeModel);\n      const tracingManager = target.model(TraceEngine.TracingManager.TracingManager);\n      assert.exists(tracingManager);\n      const tracingStart = sinon.spy(tracingManager, 'start');\n      resourceTreeModel.dispatchEventToListeners(SDK.ResourceTreeModel.Events.WillReloadPage);\n      assert.strictEqual(tracingStart.called, inScope);\n    });\n\n    it('stops recording on page load', async () => {\n      SDK.TargetManager.TargetManager.instance().setScopeTarget(target);\n      Common.Settings.Settings.instance().moduleSetting('network-record-film-strip-setting').set(true);\n      const resourceTreeModel = target.model(SDK.ResourceTreeModel.ResourceTreeModel);\n      assert.exists(resourceTreeModel);\n      const tracingManager = target.model(TraceEngine.TracingManager.TracingManager);\n      assert.exists(tracingManager);\n      resourceTreeModel.dispatchEventToListeners(SDK.ResourceTreeModel.Events.WillReloadPage);\n      SDK.TargetManager.TargetManager.instance().setScopeTarget(inScope ? target : null);\n\n      const tracingStop = sinon.spy(tracingManager, 'stop');\n      resourceTreeModel.dispatchEventToListeners(SDK.ResourceTreeModel.Events.Load, {resourceTreeModel, loadTime: 42});\n      await new Promise(resolve => setTimeout(resolve, 0));\n      assert.strictEqual(tracingStop.called, inScope);\n    });\n  };\n\n  describe('in scope', tracingTests(true));\n  describe('out of scpe', tracingTests(false));\n});\n\ndescribeWithMockConnection('NetworkPanel', () => {\n  let networkPanel: Network.NetworkPanel.NetworkPanel;\n\n  beforeEach(async () => {\n    UI.ActionRegistration.maybeRemoveActionExtension('network.toggle-recording');\n    UI.ActionRegistration.maybeRemoveActionExtension('network.clear');\n    await import('./network-meta.js');\n    createTarget();\n    const dummyStorage = new Common.Settings.SettingsStorage({});\n    Common.Settings.Settings.instance({\n      forceNew: true,\n      syncedStorage: dummyStorage,\n      globalStorage: dummyStorage,\n      localStorage: dummyStorage,\n    });\n    const actionRegistryInstance = UI.ActionRegistry.ActionRegistry.instance({forceNew: true});\n    UI.ShortcutRegistry.ShortcutRegistry.instance({forceNew: true, actionRegistry: actionRegistryInstance});\n\n    networkPanel = Network.NetworkPanel.NetworkPanel.instance({forceNew: true, displayScreenshotDelay: 0});\n    networkPanel.markAsRoot();\n    networkPanel.show(document.body);\n    await coordinator.done();\n  });\n\n  afterEach(async () => {\n    await coordinator.done();\n    networkPanel.detach();\n  });\n\n  it('clears network log on button click', async () => {\n    const networkLogResetSpy = sinon.spy(Logs.NetworkLog.NetworkLog.instance(), 'reset');\n    const toolbar = networkPanel.element.querySelector('.network-toolbar-container .toolbar');\n    const button = toolbar!.shadowRoot!.querySelector('[aria-label=\"Clear network log\"]');\n    assert.instanceOf(button, HTMLButtonElement);\n    button.click();\n    await coordinator.done({waitForWork: true});\n    assert.isTrue(networkLogResetSpy.called);\n  });\n});\n"]}