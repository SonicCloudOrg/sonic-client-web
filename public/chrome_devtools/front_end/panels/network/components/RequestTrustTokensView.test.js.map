{"version":3,"file":"RequestTrustTokensView.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/network/components/RequestTrustTokensView.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as SDK from '../../../core/sdk/sdk.js';\nimport * as Protocol from '../../../generated/protocol.js';\nimport {\n  getElementsWithinComponent,\n  getElementWithinComponent,\n  renderElementIntoDOM,\n} from '../../../testing/DOMHelpers.js';\nimport {describeWithLocale} from '../../../testing/EnvironmentHelpers.js';\n\nimport * as NetworkComponents from './components.js';\n\ndescribeWithLocale('RequestTrustTokensView', () => {\n  const mockId = 'mockId' as Protocol.Network.RequestId;\n\n  const makeRequest =\n      (params?: Protocol.Network.TrustTokenParams, result?: Protocol.Network.TrustTokenOperationDoneEvent) => {\n        return {trustTokenParams: () => params, trustTokenOperationDoneEvent: () => result} as\n            SDK.NetworkRequest.NetworkRequest;\n      };\n\n  const renderRequestTrustTokensView = (request: SDK.NetworkRequest.NetworkRequest) => {\n    const component = new NetworkComponents.RequestTrustTokensView.RequestTrustTokensView(request);\n    renderElementIntoDOM(component);\n    void component.render();\n    return component;\n  };\n\n  it('renders the RefreshPolicy for redemptions', () => {\n    const component = renderRequestTrustTokensView(makeRequest({\n      operation: Protocol.Network.TrustTokenOperationType.Redemption,\n      refreshPolicy: Protocol.Network.TrustTokenParamsRefreshPolicy.UseCached,\n    }));\n\n    const [typeSpan, refreshPolicySpan] =\n        getElementsWithinComponent(component, 'devtools-report-value.code', HTMLElement);\n    assert.strictEqual(typeSpan.textContent, 'Redemption');\n    assert.strictEqual(refreshPolicySpan.textContent, 'UseCached');\n  });\n\n  it('renders all issuers as a list', () => {\n    const expectedIssuers = ['example.org', 'foo.dev', 'bar.com'];\n    const component = renderRequestTrustTokensView(makeRequest({\n      operation: Protocol.Network.TrustTokenOperationType.Signing,\n      issuers: expectedIssuers,\n    } as Protocol.Network.TrustTokenParams));\n\n    const issuerElements = getElementsWithinComponent(component, 'ul.issuers-list > li', HTMLElement);\n    const actualIssuers = [...issuerElements].map(e => e.textContent);\n\n    assert.deepStrictEqual(actualIssuers.sort(), expectedIssuers.sort());\n  });\n\n  it('renders a result section with success status for successful requests', () => {\n    const component = renderRequestTrustTokensView(makeRequest(undefined, {\n      status: Protocol.Network.TrustTokenOperationDoneEventStatus.Ok,\n      type: Protocol.Network.TrustTokenOperationType.Issuance,\n      requestId: mockId,\n    }));\n\n    const simpleText = getElementWithinComponent(component, 'span > strong', HTMLElement);\n    assert.exists(simpleText);\n    assert.strictEqual(simpleText.textContent, 'Success');\n  });\n\n  it('renders a result section with failure status for failed requests', () => {\n    const component = renderRequestTrustTokensView(makeRequest(undefined, {\n      status: Protocol.Network.TrustTokenOperationDoneEventStatus.BadResponse,\n      type: Protocol.Network.TrustTokenOperationType.Issuance,\n      requestId: mockId,\n    }));\n\n    const simpleText = getElementWithinComponent(component, 'span > strong', HTMLElement);\n    assert.exists(simpleText);\n    assert.strictEqual(simpleText.textContent, 'Failure');\n  });\n});\n"]}