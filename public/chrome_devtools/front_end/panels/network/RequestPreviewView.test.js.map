{"version":3,"file":"RequestPreviewView.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/network/RequestPreviewView.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport {renderElementIntoDOM} from '../../testing/DOMHelpers.js';\nimport {describeWithLocale} from '../../testing/EnvironmentHelpers.js';\n\nimport * as Network from './network.js';\n\nasync function contentData(): Promise<TextUtils.ContentData.ContentData> {\n  const content = '<style> p { color: red; }</style><link rel=\"stylesheet\" ref=\"http://devtools-frontend.test/style\">';\n  return new TextUtils.ContentData.ContentData(content, false, 'text/css');\n}\n\nfunction renderPreviewView(request: SDK.NetworkRequest.NetworkRequest): Network.RequestPreviewView.RequestPreviewView {\n  const component = new Network.RequestPreviewView.RequestPreviewView(request);\n  const div = document.createElement('div');\n  renderElementIntoDOM(div);\n  component.markAsRoot();\n  component.show(div);\n  return component;\n}\n\ndescribeWithLocale('RequestPreviewView', () => {\n  it('prevents previewed html from making same-site requests', async () => {\n    const request = SDK.NetworkRequest.NetworkRequest.create(\n        'requestId' as Protocol.Network.RequestId,\n        'http://devtools-frontend.test/content' as Platform.DevToolsPath.UrlString,\n        '' as Platform.DevToolsPath.UrlString, null, null, null);\n    request.setContentDataProvider(contentData);\n    request.mimeType = Platform.MimeType.MimeType.HTML;\n    const component = renderPreviewView(request);\n    const widget = await component.showPreview();\n    const frame = widget.contentElement.querySelector('iframe');\n    expect(frame).to.be.not.null;\n    expect(frame?.getAttribute('csp')).to.eql('default-src \\'none\\';img-src data:;style-src \\'unsafe-inline\\'');\n    component.detach();\n  });\n\n  it('does add utf-8 charset to the data URL for the HTML preview for already decoded content', async () => {\n    const request = SDK.NetworkRequest.NetworkRequest.create(\n        'requestId' as Protocol.Network.RequestId,\n        'http://devtools-frontend.test/index.html' as Platform.DevToolsPath.UrlString,\n        '' as Platform.DevToolsPath.UrlString, null, null, null);\n    request.setContentDataProvider(\n        () => Promise.resolve(new TextUtils.ContentData.ContentData(\n            '<!DOCTYPE html>\\n<p>I√±t√´rn√¢ti√¥n√†liz√¶ti√∏n‚òÉùåÜ</p>', false, 'text/html', 'utf-16')));\n    request.mimeType = Platform.MimeType.MimeType.HTML;\n    request.setCharset('utf-16');\n\n    assert.strictEqual(request.charset(), 'utf-16');\n\n    const component = renderPreviewView(request);\n    const widget = await component.showPreview();\n    const frame = widget.contentElement.querySelector('iframe');\n    assert.exists(frame);\n\n    assert.include(frame.src, 'charset=utf-8');\n    assert.notInclude(frame.src, ' base64');\n  });\n\n  it('does add the correct charset to the data URL for the HTML preview for base64 content', async () => {\n    const request = SDK.NetworkRequest.NetworkRequest.create(\n        'requestId' as Protocol.Network.RequestId,\n        'http://devtools-frontend.test/index.html' as Platform.DevToolsPath.UrlString,\n        '' as Platform.DevToolsPath.UrlString, null, null, null);\n    // UTF-16 + base64 encoded \"<!DOCTYPE html>\\n<p>I√±t√´rn√¢ti√¥n√†liz√¶ti√∏n‚òÉùåÜ</p>\".\n    request.setContentDataProvider(\n        () => Promise.resolve(new TextUtils.ContentData.ContentData(\n            '//48ACEARABPAEMAVABZAFAARQAgAGgAdABtAGwAPgAKADwAcAA+AEkA8QB0AOsAcgBuAOIAdABpAPQAbgDgAGwAaQB6AOYAdABpAPgAbgADJjTYBt88AC8AcAA+AAoA',\n            true, 'text/html', 'utf-16')));\n    request.mimeType = Platform.MimeType.MimeType.HTML;\n    request.setCharset('utf-16');\n\n    assert.strictEqual(request.charset(), 'utf-16');\n\n    const component = renderPreviewView(request);\n    const widget = await component.showPreview();\n    const frame = widget.contentElement.querySelector('iframe');\n    assert.exists(frame);\n\n    assert.include(frame.src, 'charset=utf-16');\n    assert.include(frame.src, 'base64');\n  });\n});\n"]}