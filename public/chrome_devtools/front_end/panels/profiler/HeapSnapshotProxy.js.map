{"version":3,"file":"HeapSnapshotProxy.js","sourceRoot":"","sources":["../../../../../../front_end/panels/profiler/HeapSnapshotProxy.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (C) 2011 Google Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Root from '../../core/root/root.js';\nimport type * as HeapSnapshotModel from '../../models/heap_snapshot_model/heap_snapshot_model.js';\n\nimport {type ChildrenProvider} from './ChildrenProvider.js';\n\nconst UIStrings = {\n  /**\n   *@description Text in Heap Snapshot Proxy of a profiler tool\n   *@example {functionName} PH1\n   */\n  anErrorOccurredWhenACallToMethod: 'An error occurred when a call to method \\'\\'{PH1}\\'\\' was requested',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/profiler/HeapSnapshotProxy.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class HeapSnapshotWorkerProxy extends Common.ObjectWrapper.ObjectWrapper<HeapSnapshotWorkerProxy.EventTypes> {\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  readonly eventHandler: (arg0: string, arg1: any) => void;\n  nextObjectId: number;\n  nextCallId: number;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  callbacks: Map<number, (arg0: any) => void>;\n  readonly previousCallbacks: Set<number>;\n  readonly worker: Common.Worker.WorkerWrapper;\n  interval?: number;\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor(eventHandler: (arg0: string, arg1: any) => void) {\n    super();\n    this.eventHandler = eventHandler;\n    this.nextObjectId = 1;\n    this.nextCallId = 1;\n    this.callbacks = new Map();\n    this.previousCallbacks = new Set();\n    this.worker = Common.Worker.WorkerWrapper.fromURL(\n        new URL('../../entrypoints/heap_snapshot_worker/heap_snapshot_worker-entrypoint.js', import.meta.url));\n    this.worker.onmessage = this.messageReceived.bind(this);\n  }\n\n  createLoader(profileUid: number, snapshotReceivedCallback: (arg0: HeapSnapshotProxy) => void):\n      HeapSnapshotLoaderProxy {\n    const objectId = this.nextObjectId++;\n    const proxy = new HeapSnapshotLoaderProxy(this, objectId, profileUid, snapshotReceivedCallback);\n    this.postMessage({\n      callId: this.nextCallId++,\n      disposition: 'createLoader',\n      objectId: objectId,\n    });\n    return proxy;\n  }\n\n  dispose(): void {\n    this.worker.terminate();\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n\n  disposeObject(objectId: number): void {\n    this.postMessage({callId: this.nextCallId++, disposition: 'dispose', objectId: objectId});\n  }\n\n  evaluateForTest(script: string, callback: (...arg0: any[]) => void): void {\n    const callId = this.nextCallId++;\n    this.callbacks.set(callId, callback);\n    this.postMessage({callId: callId, disposition: 'evaluateForTest', source: script});\n  }\n\n  callFactoryMethod<T extends Object>(\n      callback: null, objectId: string, methodName: string, proxyConstructor: new(...arg1: any[]) => T,\n      ...methodArguments: any[]): T;\n  callFactoryMethod<T extends Object>(\n      callback: ((...arg0: any[]) => void), objectId: string, methodName: string,\n      proxyConstructor: new(...arg1: any[]) => T, ...methodArguments: any[]): null;\n  callFactoryMethod<T extends Object>(\n      callback: ((...arg0: any[]) => void)|null, objectId: string, methodName: string,\n      proxyConstructor: new(...arg1: any[]) => T, ...methodArguments: any[]): T|null {\n    const callId = this.nextCallId++;\n    const newObjectId = this.nextObjectId++;\n\n    if (callback) {\n      this.callbacks.set(callId, remoteResult => {\n        callback(remoteResult ? new proxyConstructor(this, newObjectId) : null);\n      });\n      this.postMessage({\n        callId: callId,\n        disposition: 'factory',\n        objectId: objectId,\n        methodName: methodName,\n        methodArguments: methodArguments,\n        newObjectId: newObjectId,\n      });\n      return null;\n    }\n    this.postMessage({\n      callId: callId,\n      disposition: 'factory',\n      objectId: objectId,\n      methodName: methodName,\n      methodArguments: methodArguments,\n      newObjectId: newObjectId,\n    });\n    return new proxyConstructor(this, newObjectId);\n  }\n\n  callMethod(callback: (...arg0: any[]) => void, objectId: string, methodName: string, ...methodArguments: any[]):\n      void {\n    const callId = this.nextCallId++;\n    if (callback) {\n      this.callbacks.set(callId, callback);\n    }\n    this.postMessage({\n      callId: callId,\n      disposition: 'method',\n      objectId: objectId,\n      methodName: methodName,\n      methodArguments: methodArguments,\n    });\n  }\n\n  startCheckingForLongRunningCalls(): void {\n    if (this.interval) {\n      return;\n    }\n    this.checkLongRunningCalls();\n    this.interval = window.setInterval(this.checkLongRunningCalls.bind(this), 300);\n  }\n\n  checkLongRunningCalls(): void {\n    for (const callId of this.previousCallbacks) {\n      if (!this.callbacks.has(callId)) {\n        this.previousCallbacks.delete(callId);\n      }\n    }\n    const hasLongRunningCalls = Boolean(this.previousCallbacks.size);\n    this.dispatchEventToListeners(HeapSnapshotWorkerProxy.Events.Wait, hasLongRunningCalls);\n    for (const callId of this.callbacks.keys()) {\n      this.previousCallbacks.add(callId);\n    }\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  messageReceived(event: MessageEvent<any>): void {\n    const data = event.data;\n    if (data.eventName) {\n      if (this.eventHandler) {\n        this.eventHandler(data.eventName, data.data);\n      }\n      return;\n    }\n    if (data.error) {\n      if (data.errorMethodName) {\n        Common.Console.Console.instance().error(\n            i18nString(UIStrings.anErrorOccurredWhenACallToMethod, {PH1: data.errorMethodName}));\n      }\n      Common.Console.Console.instance().error(data['errorCallStack']);\n      this.callbacks.delete(data.callId);\n      return;\n    }\n    const callback = this.callbacks.get(data.callId);\n    if (!callback) {\n      return;\n    }\n    this.callbacks.delete(data.callId);\n    callback(data.result);\n  }\n\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  postMessage(message: any): void {\n    this.worker.postMessage(message);\n  }\n}\n\nexport namespace HeapSnapshotWorkerProxy {\n\n  export const enum Events {\n    Wait = 'Wait',\n  }\n\n  export type EventTypes = {\n    [Events.Wait]: boolean,\n  };\n}\n\nexport class HeapSnapshotProxyObject {\n  readonly worker: HeapSnapshotWorkerProxy;\n  readonly objectId: number;\n  constructor(worker: HeapSnapshotWorkerProxy, objectId: number) {\n    this.worker = worker;\n    this.objectId = objectId;\n  }\n\n  dispose(): void {\n    this.worker.disposeObject(this.objectId);\n  }\n\n  disposeWorker(): void {\n    this.worker.dispose();\n  }\n\n  callFactoryMethod<T extends Object>(methodName: string, proxyConstructor: new(...arg1: any[]) => T, ...args: any[]):\n      T {\n    return this.worker.callFactoryMethod(null, String(this.objectId), methodName, proxyConstructor, ...args);\n  }\n\n  callFactoryMethodPromise<T extends Object>(\n      methodName: string, proxyConstructor: new(...arg1: any[]) => T, ...args: any[]): Promise<T> {\n    return new Promise(\n        resolve =>\n            this.worker.callFactoryMethod(resolve, String(this.objectId), methodName, proxyConstructor, ...args));\n  }\n\n  callMethodPromise<T>(methodName: string, ...args: any[]): Promise<T> {\n    return new Promise(resolve => this.worker.callMethod(resolve, String(this.objectId), methodName, ...args));\n  }\n}\n\nexport class HeapSnapshotLoaderProxy extends HeapSnapshotProxyObject implements Common.StringOutputStream.OutputStream {\n  readonly profileUid: number;\n  readonly snapshotReceivedCallback: (arg0: HeapSnapshotProxy) => void;\n  constructor(\n      worker: HeapSnapshotWorkerProxy, objectId: number, profileUid: number,\n      snapshotReceivedCallback: (arg0: HeapSnapshotProxy) => void) {\n    super(worker, objectId);\n    this.profileUid = profileUid;\n    this.snapshotReceivedCallback = snapshotReceivedCallback;\n  }\n\n  async write(chunk: string): Promise<void> {\n    await this.callMethodPromise('write', chunk);\n  }\n\n  async close(): Promise<void> {\n    await this.callMethodPromise('close');\n    const snapshotProxy = await this.callFactoryMethodPromise('buildSnapshot', HeapSnapshotProxy, {\n      heapSnapshotTreatBackingStoreAsContainingObject:\n          Root.Runtime.experiments.isEnabled('heap-snapshot-treat-backing-store-as-containing-object'),\n    });\n    this.dispose();\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n    // @ts-expect-error\n    snapshotProxy.setProfileUid(this.profileUid);\n    await snapshotProxy.updateStaticData();\n    this.snapshotReceivedCallback(snapshotProxy);\n  }\n}\n\nexport class HeapSnapshotProxy extends HeapSnapshotProxyObject {\n  staticData: HeapSnapshotModel.HeapSnapshotModel.StaticData|null;\n  profileUid?: string;\n\n  constructor(worker: HeapSnapshotWorkerProxy, objectId: number) {\n    super(worker, objectId);\n    this.staticData = null;\n  }\n\n  search(\n      searchConfig: HeapSnapshotModel.HeapSnapshotModel.SearchConfig,\n      filter: HeapSnapshotModel.HeapSnapshotModel.NodeFilter): Promise<number[]> {\n    return this.callMethodPromise('search', searchConfig, filter);\n  }\n\n  aggregatesWithFilter(filter: HeapSnapshotModel.HeapSnapshotModel.NodeFilter): Promise<{\n    [x: string]: HeapSnapshotModel.HeapSnapshotModel.Aggregate,\n  }> {\n    return this.callMethodPromise('aggregatesWithFilter', filter);\n  }\n\n  aggregatesForDiff(): Promise<{\n    [x: string]: HeapSnapshotModel.HeapSnapshotModel.AggregateForDiff,\n  }> {\n    return this.callMethodPromise('aggregatesForDiff');\n  }\n\n  calculateSnapshotDiff(baseSnapshotId: string, baseSnapshotAggregates: {\n    [x: string]: HeapSnapshotModel.HeapSnapshotModel.AggregateForDiff,\n  }): Promise<{\n    [x: string]: HeapSnapshotModel.HeapSnapshotModel.Diff,\n  }> {\n    return this.callMethodPromise('calculateSnapshotDiff', baseSnapshotId, baseSnapshotAggregates);\n  }\n\n  nodeClassName(snapshotObjectId: number): Promise<string|null> {\n    return this.callMethodPromise('nodeClassName', snapshotObjectId);\n  }\n\n  createEdgesProvider(nodeIndex: number): HeapSnapshotProviderProxy {\n    return this.callFactoryMethod('createEdgesProvider', HeapSnapshotProviderProxy, nodeIndex);\n  }\n\n  createRetainingEdgesProvider(nodeIndex: number): HeapSnapshotProviderProxy {\n    return this.callFactoryMethod('createRetainingEdgesProvider', HeapSnapshotProviderProxy, nodeIndex);\n  }\n\n  createAddedNodesProvider(baseSnapshotId: string, className: string): HeapSnapshotProviderProxy {\n    return this.callFactoryMethod('createAddedNodesProvider', HeapSnapshotProviderProxy, baseSnapshotId, className);\n  }\n\n  createDeletedNodesProvider(nodeIndexes: number[]): HeapSnapshotProviderProxy {\n    return this.callFactoryMethod('createDeletedNodesProvider', HeapSnapshotProviderProxy, nodeIndexes);\n  }\n\n  createNodesProvider(filter: (...args: any[]) => boolean): HeapSnapshotProviderProxy {\n    return this.callFactoryMethod('createNodesProvider', HeapSnapshotProviderProxy, filter);\n  }\n\n  createNodesProviderForClass(className: string, nodeFilter: HeapSnapshotModel.HeapSnapshotModel.NodeFilter):\n      HeapSnapshotProviderProxy {\n    return this.callFactoryMethod('createNodesProviderForClass', HeapSnapshotProviderProxy, className, nodeFilter);\n  }\n\n  allocationTracesTops(): Promise<HeapSnapshotModel.HeapSnapshotModel.SerializedAllocationNode[]> {\n    return this.callMethodPromise('allocationTracesTops');\n  }\n\n  allocationNodeCallers(nodeId: number): Promise<HeapSnapshotModel.HeapSnapshotModel.AllocationNodeCallers> {\n    return this.callMethodPromise('allocationNodeCallers', nodeId);\n  }\n\n  allocationStack(nodeIndex: number): Promise<HeapSnapshotModel.HeapSnapshotModel.AllocationStackFrame[]|null> {\n    return this.callMethodPromise('allocationStack', nodeIndex);\n  }\n\n  override dispose(): void {\n    throw new Error('Should never be called');\n  }\n\n  get nodeCount(): number {\n    if (!this.staticData) {\n      return 0;\n    }\n    return this.staticData.nodeCount;\n  }\n\n  get rootNodeIndex(): number {\n    if (!this.staticData) {\n      return 0;\n    }\n    return this.staticData.rootNodeIndex;\n  }\n\n  async updateStaticData(): Promise<void> {\n    this.staticData = await this.callMethodPromise('updateStaticData');\n  }\n\n  getStatistics(): Promise<HeapSnapshotModel.HeapSnapshotModel.Statistics> {\n    return this.callMethodPromise('getStatistics');\n  }\n\n  getLocation(nodeIndex: number): Promise<HeapSnapshotModel.HeapSnapshotModel.Location|null> {\n    return this.callMethodPromise('getLocation', nodeIndex);\n  }\n\n  getSamples(): Promise<HeapSnapshotModel.HeapSnapshotModel.Samples|null> {\n    return this.callMethodPromise('getSamples');\n  }\n\n  ignoreNodeInRetainersView(nodeIndex: number): Promise<void> {\n    return this.callMethodPromise('ignoreNodeInRetainersView', nodeIndex);\n  }\n\n  unignoreNodeInRetainersView(nodeIndex: number): Promise<void> {\n    return this.callMethodPromise('unignoreNodeInRetainersView', nodeIndex);\n  }\n\n  unignoreAllNodesInRetainersView(): Promise<void> {\n    return this.callMethodPromise('unignoreAllNodesInRetainersView');\n  }\n\n  areNodesIgnoredInRetainersView(): Promise<boolean> {\n    return this.callMethodPromise('areNodesIgnoredInRetainersView');\n  }\n\n  get totalSize(): number {\n    if (!this.staticData) {\n      return 0;\n    }\n    return this.staticData.totalSize;\n  }\n\n  get uid(): string|undefined {\n    return this.profileUid;\n  }\n\n  setProfileUid(profileUid: string): void {\n    this.profileUid = profileUid;\n  }\n\n  maxJSObjectId(): number {\n    if (!this.staticData) {\n      return 0;\n    }\n    return this.staticData.maxJSObjectId;\n  }\n}\n\nexport class HeapSnapshotProviderProxy extends HeapSnapshotProxyObject implements ChildrenProvider {\n  constructor(worker: HeapSnapshotWorkerProxy, objectId: number) {\n    super(worker, objectId);\n  }\n\n  nodePosition(snapshotObjectId: number): Promise<number> {\n    return this.callMethodPromise('nodePosition', snapshotObjectId);\n  }\n\n  isEmpty(): Promise<boolean> {\n    return this.callMethodPromise('isEmpty');\n  }\n\n  serializeItemsRange(startPosition: number, endPosition: number):\n      Promise<HeapSnapshotModel.HeapSnapshotModel.ItemsRange> {\n    return this.callMethodPromise('serializeItemsRange', startPosition, endPosition);\n  }\n\n  async sortAndRewind(comparator: HeapSnapshotModel.HeapSnapshotModel.ComparatorConfig): Promise<void> {\n    await this.callMethodPromise('sortAndRewind', comparator);\n  }\n}\n"]}