{"version":3,"file":"ConsoleSidebar.js","sourceRoot":"","sources":["../../../../../../front_end/panels/console/ConsoleSidebar.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport type * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as IconButton from '../../ui/components/icon_button/icon_button.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport {ConsoleFilter, FilterType, type LevelsMask} from './ConsoleFilter.js';\nimport consoleSidebarStyles from './consoleSidebar.css.js';\nimport {type ConsoleViewMessage} from './ConsoleViewMessage.js';\n\nconst UIStrings = {\n  /**\n   * @description Filter name in Console Sidebar of the Console panel. This is shown when we fail to\n   * parse a URL when trying to display console messages from each URL separately. This might be\n   * because the console message does not come from any particular URL. This should be translated as\n   * a term that indicates 'not one of the other URLs listed here'.\n   */\n  other: '<other>',\n  /**\n   *@description Text in Console Sidebar of the Console panel to show how many user messages exist.\n   */\n  dUserMessages: '{n, plural, =0 {No user messages} =1 {# user message} other {# user messages}}',\n  /**\n   *@description Text in Console Sidebar of the Console panel to show how many messages exist.\n   */\n  dMessages: '{n, plural, =0 {No messages} =1 {# message} other {# messages}}',\n  /**\n   *@description Text in Console Sidebar of the Console panel to show how many errors exist.\n   */\n  dErrors: '{n, plural, =0 {No errors} =1 {# error} other {# errors}}',\n  /**\n   *@description Text in Console Sidebar of the Console panel to show how many warnings exist.\n   */\n  dWarnings: '{n, plural, =0 {No warnings} =1 {# warning} other {# warnings}}',\n  /**\n   *@description Text in Console Sidebar of the Console panel to show how many info messages exist.\n   */\n  dInfo: '{n, plural, =0 {No info} =1 {# info} other {# info}}',\n  /**\n   *@description Text in Console Sidebar of the Console panel to show how many verbose messages exist.\n   */\n  dVerbose: '{n, plural, =0 {No verbose} =1 {# verbose} other {# verbose}}',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/console/ConsoleSidebar.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class ConsoleSidebar extends Common.ObjectWrapper.eventMixin<EventTypes, typeof UI.Widget.VBox>(UI.Widget.VBox) {\n  private readonly tree: UI.TreeOutline.TreeOutlineInShadow;\n  private selectedTreeElement: UI.TreeOutline.TreeElement|null;\n  private readonly treeElements: FilterTreeElement[];\n\n  constructor() {\n    super(true);\n    this.setMinimumSize(125, 0);\n\n    this.tree = new UI.TreeOutline.TreeOutlineInShadow();\n    this.tree.addEventListener(UI.TreeOutline.Events.ElementSelected, this.selectionChanged.bind(this));\n\n    this.contentElement.setAttribute('jslog', `${VisualLogging.pane('sidebar').track({resize: true})}`);\n    this.contentElement.appendChild(this.tree.element);\n    this.selectedTreeElement = null;\n    this.treeElements = [];\n    const selectedFilterSetting =\n        Common.Settings.Settings.instance().createSetting<string|null>('console.sidebar-selected-filter', null);\n\n    const consoleAPIParsedFilters = [{\n      key: FilterType.Source,\n      text: Common.Console.FrontendMessageSource.ConsoleAPI,\n      negative: false,\n      regex: undefined,\n    }];\n    this.appendGroup(\n        GroupName.All, [], ConsoleFilter.allLevelsFilterValue(), IconButton.Icon.create('list'), selectedFilterSetting);\n    this.appendGroup(\n        GroupName.ConsoleAPI, consoleAPIParsedFilters, ConsoleFilter.allLevelsFilterValue(),\n        IconButton.Icon.create('profile'), selectedFilterSetting);\n    this.appendGroup(\n        GroupName.Error, [], ConsoleFilter.singleLevelMask(Protocol.Log.LogEntryLevel.Error),\n        IconButton.Icon.create('cross-circle'), selectedFilterSetting);\n    this.appendGroup(\n        GroupName.Warning, [], ConsoleFilter.singleLevelMask(Protocol.Log.LogEntryLevel.Warning),\n        IconButton.Icon.create('warning'), selectedFilterSetting);\n    this.appendGroup(\n        GroupName.Info, [], ConsoleFilter.singleLevelMask(Protocol.Log.LogEntryLevel.Info),\n        IconButton.Icon.create('info'), selectedFilterSetting);\n    this.appendGroup(\n        GroupName.Verbose, [], ConsoleFilter.singleLevelMask(Protocol.Log.LogEntryLevel.Verbose),\n        IconButton.Icon.create('bug'), selectedFilterSetting);\n    const selectedTreeElementName = selectedFilterSetting.get();\n    const defaultTreeElement =\n        this.treeElements.find(x => x.name() === selectedTreeElementName) || this.treeElements[0];\n    defaultTreeElement.select();\n  }\n\n  private appendGroup(\n      name: string, parsedFilters: TextUtils.TextUtils.ParsedFilter[], levelsMask: LevelsMask,\n      icon: IconButton.Icon.Icon, selectedFilterSetting: Common.Settings.Setting<string|null>): void {\n    const filter = new ConsoleFilter(name, parsedFilters, null, levelsMask);\n    const treeElement = new FilterTreeElement(filter, icon, selectedFilterSetting);\n    this.tree.appendChild(treeElement);\n    this.treeElements.push(treeElement);\n  }\n\n  clear(): void {\n    for (const treeElement of this.treeElements) {\n      treeElement.clear();\n    }\n  }\n\n  onMessageAdded(viewMessage: ConsoleViewMessage): void {\n    for (const treeElement of this.treeElements) {\n      treeElement.onMessageAdded(viewMessage);\n    }\n  }\n\n  shouldBeVisible(viewMessage: ConsoleViewMessage): boolean {\n    if (this.selectedTreeElement instanceof ConsoleSidebarTreeElement) {\n      return this.selectedTreeElement.filter().shouldBeVisible(viewMessage);\n    }\n    return true;\n  }\n\n  private selectionChanged(event: Common.EventTarget.EventTargetEvent<UI.TreeOutline.TreeElement>): void {\n    this.selectedTreeElement = event.data;\n    this.dispatchEventToListeners(Events.FilterSelected);\n  }\n\n  override wasShown(): void {\n    super.wasShown();\n    this.tree.registerCSSFiles([consoleSidebarStyles]);\n  }\n}\n\nexport const enum Events {\n  FilterSelected = 'FilterSelected',\n}\n\nexport type EventTypes = {\n  [Events.FilterSelected]: void,\n};\n\nclass ConsoleSidebarTreeElement extends UI.TreeOutline.TreeElement {\n  protected filterInternal: ConsoleFilter;\n\n  constructor(title: string|Node, filter: ConsoleFilter) {\n    super(title);\n    this.filterInternal = filter;\n  }\n\n  filter(): ConsoleFilter {\n    return this.filterInternal;\n  }\n}\n\nexport class URLGroupTreeElement extends ConsoleSidebarTreeElement {\n  private countElement: HTMLElement;\n  private messageCount: number;\n\n  constructor(filter: ConsoleFilter) {\n    super(filter.name, filter);\n    this.countElement = this.listItemElement.createChild('span', 'count');\n    const icon = IconButton.Icon.create('document');\n    this.setLeadingIcons([icon]);\n    this.messageCount = 0;\n  }\n\n  incrementAndUpdateCounter(): void {\n    this.messageCount++;\n    this.countElement.textContent = `${this.messageCount}`;\n  }\n}\n\nconst enum GroupName {\n  ConsoleAPI = 'user message',\n  All = 'message',\n  Error = 'error',\n  Warning = 'warning',\n  Info = 'info',\n  Verbose = 'verbose',\n}\n\n/**\n * Maps the GroupName for a filter to the UIString used to render messages.\n * Stored here so we only construct it once at runtime, rather than everytime we\n * construct a filter or get a new message.\n */\nconst stringForFilterSidebarItemMap = new Map<GroupName, string>([\n  [GroupName.ConsoleAPI, UIStrings.dUserMessages],\n  [GroupName.All, UIStrings.dMessages],\n  [GroupName.Error, UIStrings.dErrors],\n  [GroupName.Warning, UIStrings.dWarnings],\n  [GroupName.Info, UIStrings.dInfo],\n  [GroupName.Verbose, UIStrings.dVerbose],\n]);\n\nexport class FilterTreeElement extends ConsoleSidebarTreeElement {\n  private readonly selectedFilterSetting: Common.Settings.Setting<string|null>;\n  private readonly urlTreeElements: Map<string|null, URLGroupTreeElement>;\n  private messageCount: number;\n  private uiStringForFilterCount: string;\n\n  constructor(\n      filter: ConsoleFilter, icon: IconButton.Icon.Icon, selectedFilterSetting: Common.Settings.Setting<string|null>) {\n    super(filter.name, filter);\n    this.uiStringForFilterCount = stringForFilterSidebarItemMap.get(filter.name as GroupName) || '';\n    this.selectedFilterSetting = selectedFilterSetting;\n    this.urlTreeElements = new Map();\n    this.setLeadingIcons([icon]);\n    this.messageCount = 0;\n    this.updateCounter();\n  }\n\n  clear(): void {\n    this.urlTreeElements.clear();\n    this.removeChildren();\n    this.messageCount = 0;\n    this.updateCounter();\n  }\n\n  name(): string {\n    return this.filterInternal.name;\n  }\n\n  override onselect(selectedByUser?: boolean): boolean {\n    this.selectedFilterSetting.set(this.filterInternal.name);\n    return super.onselect(selectedByUser);\n  }\n\n  private updateCounter(): void {\n    this.title = this.updateGroupTitle(this.messageCount);\n    this.setExpandable(Boolean(this.childCount()));\n  }\n\n  private updateGroupTitle(messageCount: number): string {\n    if (this.uiStringForFilterCount) {\n      // eslint-disable-next-line rulesdir/l10n_i18nString_call_only_with_uistrings\n      return i18nString(this.uiStringForFilterCount, {n: messageCount});\n    }\n    return '';\n  }\n\n  onMessageAdded(viewMessage: ConsoleViewMessage): void {\n    const message = viewMessage.consoleMessage();\n    const shouldIncrementCounter = message.type !== SDK.ConsoleModel.FrontendMessageType.Command &&\n        message.type !== SDK.ConsoleModel.FrontendMessageType.Result && !message.isGroupMessage();\n    if (!this.filterInternal.shouldBeVisible(viewMessage) || !shouldIncrementCounter) {\n      return;\n    }\n    const child = this.childElement(message.url);\n    child.incrementAndUpdateCounter();\n    this.messageCount++;\n    this.updateCounter();\n  }\n\n  private childElement(url?: Platform.DevToolsPath.UrlString): URLGroupTreeElement {\n    const urlValue = url || null;\n    let child = this.urlTreeElements.get(urlValue);\n    if (child) {\n      return child;\n    }\n\n    const filter = this.filterInternal.clone();\n    const parsedURL = urlValue ? Common.ParsedURL.ParsedURL.fromString(urlValue) : null;\n    if (urlValue) {\n      filter.name = parsedURL ? parsedURL.displayName : urlValue;\n    } else {\n      filter.name = i18nString(UIStrings.other);\n    }\n    filter.parsedFilters.push({key: FilterType.Url, text: urlValue, negative: false, regex: undefined});\n    child = new URLGroupTreeElement(filter);\n    if (urlValue) {\n      child.tooltip = urlValue;\n    }\n    this.urlTreeElements.set(urlValue, child);\n    this.appendChild(child);\n    return child;\n  }\n}\n"]}