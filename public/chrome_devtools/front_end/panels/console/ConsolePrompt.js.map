{"version":3,"file":"ConsolePrompt.js","sourceRoot":"","sources":["../../../../../../front_end/panels/console/ConsolePrompt.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Formatter from '../../models/formatter/formatter.js';\nimport * as SourceMapScopes from '../../models/source_map_scopes/source_map_scopes.js';\nimport * as CodeMirror from '../../third_party/codemirror.next/codemirror.next.js';\nimport * as IconButton from '../../ui/components/icon_button/icon_button.js';\nimport * as TextEditor from '../../ui/components/text_editor/text_editor.js';\nimport * as ObjectUI from '../../ui/legacy/components/object_ui/object_ui.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport {ConsolePanel} from './ConsolePanel.js';\nimport consolePromptStyles from './consolePrompt.css.js';\n\nconst {Direction} = TextEditor.TextEditorHistory;\n\nconst UIStrings = {\n  /**\n   *@description Text in Console Prompt of the Console panel\n   */\n  consolePrompt: 'Console prompt',\n  /**\n   *@description Warning shown to users when pasting text into the DevTools console.\n   *@example {allow pasting} PH1\n   */\n  selfXssWarning:\n      'Warning: Don’t paste code into the DevTools Console that you don’t understand or haven’t reviewed yourself. This could allow attackers to steal your identity or take control of your computer. Please type ‘{PH1}’ below and hit Enter to allow pasting.',\n  /**\n   *@description Text a user needs to type in order to confirm that they are aware of the danger of pasting code into the DevTools console.\n   */\n  allowPasting: 'allow pasting',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/console/ConsolePrompt.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class ConsolePrompt extends Common.ObjectWrapper.eventMixin<EventTypes, typeof UI.Widget.Widget>(\n    UI.Widget.Widget) {\n  private addCompletionsFromHistory: boolean;\n  private historyInternal: TextEditor.AutocompleteHistory.AutocompleteHistory;\n  private initialText: string;\n  private editor: TextEditor.TextEditor.TextEditor;\n  private readonly eagerPreviewElement: HTMLDivElement;\n  private textChangeThrottler: Common.Throttler.Throttler;\n  private readonly formatter: ObjectUI.RemoteObjectPreviewFormatter.RemoteObjectPreviewFormatter;\n  private requestPreviewBound: () => Promise<void>;\n  private requestPreviewCurrent = 0;\n  private readonly innerPreviewElement: HTMLElement;\n  private readonly promptIcon: IconButton.Icon.Icon;\n  private readonly iconThrottler: Common.Throttler.Throttler;\n  private readonly eagerEvalSetting: Common.Settings.Setting<boolean>;\n  private previewRequestForTest: Promise<void>|null;\n  private highlightingNode: boolean;\n  // The CodeMirror state field that controls whether the argument hints are showing.\n  // If they are, the escape key will clear them. However, if they aren't, then the\n  // console drawer should be hidden as a whole.\n  #argumentHintsState: CodeMirror.StateField<CodeMirror.Tooltip|null>;\n\n  #editorHistory: TextEditor.TextEditorHistory.TextEditorHistory;\n  #selfXssWarningShown = false;\n  #javaScriptCompletionCompartment: CodeMirror.Compartment = new CodeMirror.Compartment();\n\n  #getJavaScriptCompletionExtensions(): CodeMirror.Extension {\n    if (this.#selfXssWarningShown) {\n      // No (JavaScript) completions at all while showing the self-XSS warning.\n      return [];\n    }\n    if (Root.Runtime.Runtime.queryParam('noJavaScriptCompletion') !== 'true') {\n      return [\n        CodeMirror.javascript.javascript(),\n        TextEditor.JavaScript.completion(),\n      ];\n    }\n    return [CodeMirror.javascript.javascriptLanguage];\n  }\n\n  #updateJavaScriptCompletionCompartment(): void {\n    const extensions = this.#getJavaScriptCompletionExtensions();\n    const effects = this.#javaScriptCompletionCompartment.reconfigure(extensions);\n    this.editor.dispatch({effects});\n  }\n\n  constructor() {\n    super();\n    this.addCompletionsFromHistory = true;\n    this.historyInternal = new TextEditor.AutocompleteHistory.AutocompleteHistory(\n        Common.Settings.Settings.instance().createLocalSetting('console-history', []));\n\n    this.initialText = '';\n    this.eagerPreviewElement = document.createElement('div');\n    this.eagerPreviewElement.classList.add('console-eager-preview');\n    this.textChangeThrottler = new Common.Throttler.Throttler(150);\n    this.formatter = new ObjectUI.RemoteObjectPreviewFormatter.RemoteObjectPreviewFormatter();\n    this.requestPreviewBound = this.requestPreview.bind(this);\n    this.innerPreviewElement = this.eagerPreviewElement.createChild('div', 'console-eager-inner-preview');\n    const previewIcon = new IconButton.Icon.Icon();\n    previewIcon.data = {iconName: 'chevron-left-dot', color: 'var(--icon-default)', width: '16px', height: '16px'};\n    previewIcon.classList.add('preview-result-icon');\n    this.eagerPreviewElement.appendChild(previewIcon);\n\n    const editorContainerElement = this.element.createChild('div', 'console-prompt-editor-container');\n    this.element.appendChild(this.eagerPreviewElement);\n\n    this.promptIcon = new IconButton.Icon.Icon();\n    this.promptIcon.data = {iconName: 'chevron-right', color: 'var(--icon-action)', width: '16px', height: '16px'};\n    this.promptIcon.classList.add('console-prompt-icon');\n    this.element.appendChild(this.promptIcon);\n    this.iconThrottler = new Common.Throttler.Throttler(0);\n\n    this.eagerEvalSetting = Common.Settings.Settings.instance().moduleSetting('console-eager-eval');\n    this.eagerEvalSetting.addChangeListener(this.eagerSettingChanged.bind(this));\n    this.eagerPreviewElement.classList.toggle('hidden', !this.eagerEvalSetting.get());\n\n    this.element.tabIndex = 0;\n    this.previewRequestForTest = null;\n    this.highlightingNode = false;\n    const argumentHints = TextEditor.JavaScript.argumentHints();\n    this.#argumentHintsState = argumentHints[0];\n\n    const autocompleteOnEnter = TextEditor.Config.DynamicSetting.bool(\n        'console-autocomplete-on-enter', [], TextEditor.Config.conservativeCompletion);\n\n    const extensions = [\n      CodeMirror.keymap.of(this.editorKeymap()),\n      CodeMirror.EditorView.updateListener.of(update => this.editorUpdate(update)),\n      argumentHints,\n      autocompleteOnEnter.instance(),\n      TextEditor.Config.showCompletionHint,\n      TextEditor.Config.baseConfiguration(this.initialText),\n      TextEditor.Config.autocompletion.instance(),\n      CodeMirror.javascript.javascriptLanguage.data.of({\n        autocomplete: (context: CodeMirror.CompletionContext) =>\n            this.addCompletionsFromHistory ? this.#editorHistory.historyCompletions(context) : null,\n      }),\n      CodeMirror.EditorView.contentAttributes.of({'aria-label': i18nString(UIStrings.consolePrompt)}),\n      CodeMirror.EditorView.lineWrapping,\n      CodeMirror.autocompletion({aboveCursor: true}),\n      this.#javaScriptCompletionCompartment.of(this.#getJavaScriptCompletionExtensions()),\n    ];\n    const doc = this.initialText;\n    const editorState = CodeMirror.EditorState.create({doc, extensions});\n\n    this.editor = new TextEditor.TextEditor.TextEditor(editorState);\n    this.editor.addEventListener('keydown', event => {\n      if (event.defaultPrevented) {\n        event.stopPropagation();\n      }\n    });\n    editorContainerElement.appendChild(this.editor);\n    this.#editorHistory = new TextEditor.TextEditorHistory.TextEditorHistory(this.editor, this.historyInternal);\n\n    if (this.hasFocus()) {\n      this.focus();\n    }\n    this.element.removeAttribute('tabindex');\n\n    this.editorSetForTest();\n\n    // Record the console tool load time after the console prompt constructor is complete.\n    Host.userMetrics.panelLoaded('console', 'DevTools.Launch.Console');\n\n    this.element.setAttribute('jslog', `${VisualLogging.textField('console-prompt').track({\n                                change: true,\n                                keydown: 'Enter|ArrowUp|ArrowDown|PageUp',\n                              })}`);\n  }\n\n  private eagerSettingChanged(): void {\n    const enabled = this.eagerEvalSetting.get();\n    this.eagerPreviewElement.classList.toggle('hidden', !enabled);\n    if (enabled) {\n      void this.requestPreview();\n    }\n  }\n\n  belowEditorElement(): Element {\n    return this.eagerPreviewElement;\n  }\n\n  private onTextChanged(): void {\n    // ConsoleView and prompt both use a throttler, so we clear the preview\n    // ASAP to avoid inconsistency between a fresh viewport and stale preview.\n    if (this.eagerEvalSetting.get()) {\n      const asSoonAsPossible = !TextEditor.Config.contentIncludingHint(this.editor.editor);\n      this.previewRequestForTest = this.textChangeThrottler.schedule(\n          this.requestPreviewBound,\n          asSoonAsPossible ? Common.Throttler.Scheduling.AsSoonAsPossible : Common.Throttler.Scheduling.Default);\n    }\n    this.updatePromptIcon();\n    this.dispatchEventToListeners(Events.TextChanged);\n  }\n\n  private async requestPreview(): Promise<void> {\n    const id = ++this.requestPreviewCurrent;\n    const text = TextEditor.Config.contentIncludingHint(this.editor.editor).trim();\n    const executionContext = UI.Context.Context.instance().flavor(SDK.RuntimeModel.ExecutionContext);\n    const {preview, result} = await ObjectUI.JavaScriptREPL.JavaScriptREPL.evaluateAndBuildPreview(\n        text, true /* throwOnSideEffect */, true /* replMode */, 500 /* timeout */);\n    if (this.requestPreviewCurrent !== id) {\n      return;\n    }\n    this.innerPreviewElement.removeChildren();\n    if (preview.deepTextContent() !== TextEditor.Config.contentIncludingHint(this.editor.editor).trim()) {\n      this.innerPreviewElement.appendChild(preview);\n    }\n    if (result && 'object' in result && result.object && result.object.subtype === 'node') {\n      this.highlightingNode = true;\n      SDK.OverlayModel.OverlayModel.highlightObjectAsDOMNode(result.object);\n    } else if (this.highlightingNode) {\n      this.highlightingNode = false;\n      SDK.OverlayModel.OverlayModel.hideDOMNodeHighlight();\n    }\n    if (result && executionContext) {\n      executionContext.runtimeModel.releaseEvaluationResult(result);\n    }\n  }\n\n  override wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([consolePromptStyles]);\n  }\n\n  override willHide(): void {\n    if (this.highlightingNode) {\n      this.highlightingNode = false;\n      SDK.OverlayModel.OverlayModel.hideDOMNodeHighlight();\n    }\n  }\n\n  history(): TextEditor.AutocompleteHistory.AutocompleteHistory {\n    return this.historyInternal;\n  }\n\n  clearAutocomplete(): void {\n    CodeMirror.closeCompletion(this.editor.editor);\n  }\n\n  private isCaretAtEndOfPrompt(): boolean {\n    return this.editor.state.selection.main.head === this.editor.state.doc.length;\n  }\n\n  moveCaretToEndOfPrompt(): void {\n    this.editor.dispatch({\n      selection: CodeMirror.EditorSelection.cursor(this.editor.state.doc.length),\n    });\n  }\n\n  clear(): void {\n    this.editor.dispatch({\n      changes: {from: 0, to: this.editor.state.doc.length},\n    });\n  }\n\n  text(): string {\n    return this.editor.state.doc.toString();\n  }\n\n  setAddCompletionsFromHistory(value: boolean): void {\n    this.addCompletionsFromHistory = value;\n  }\n\n  private editorKeymap(): readonly CodeMirror.KeyBinding[] {\n    return [\n      {key: 'ArrowUp', run: () => this.#editorHistory.moveHistory(Direction.BACKWARD)},\n      {key: 'ArrowDown', run: () => this.#editorHistory.moveHistory(Direction.FORWARD)},\n      {mac: 'Ctrl-p', run: () => this.#editorHistory.moveHistory(Direction.BACKWARD, true)},\n      {mac: 'Ctrl-n', run: () => this.#editorHistory.moveHistory(Direction.FORWARD, true)},\n      {\n        key: 'Escape',\n        run: () => {\n          return TextEditor.JavaScript.closeArgumentsHintsTooltip(this.editor.editor, this.#argumentHintsState);\n        },\n      },\n      {\n        key: 'Ctrl-Enter',\n        run: () => {\n          void this.handleEnter(/* forceEvaluate */ true);\n          return true;\n        },\n      },\n      {\n        key: 'Enter',\n        run: () => {\n          void this.handleEnter();\n          return true;\n        },\n        shift: CodeMirror.insertNewlineAndIndent,\n      },\n    ];\n  }\n\n  private async enterWillEvaluate(forceEvaluate?: boolean): Promise<boolean> {\n    const {doc, selection} = this.editor.state;\n    if (!doc.length) {\n      return false;\n    }\n    if (forceEvaluate || selection.main.head < doc.length) {\n      return true;\n    }\n    const currentExecutionContext = UI.Context.Context.instance().flavor(SDK.RuntimeModel.ExecutionContext);\n    const isExpressionComplete = await TextEditor.JavaScript.isExpressionComplete(doc.toString());\n    if (currentExecutionContext !== UI.Context.Context.instance().flavor(SDK.RuntimeModel.ExecutionContext)) {\n      // We should not evaluate if the current context has changed since user action\n      return false;\n    }\n    return isExpressionComplete;\n  }\n\n  showSelfXssWarning(): void {\n    Common.Console.Console.instance().warn(\n        i18nString(UIStrings.selfXssWarning, {PH1: i18nString(UIStrings.allowPasting)}),\n        Common.Console.FrontendMessageSource.SelfXss);\n    this.#selfXssWarningShown = true;\n    Host.userMetrics.actionTaken(Host.UserMetrics.Action.SelfXssWarningConsoleMessageShown);\n    this.#updateJavaScriptCompletionCompartment();\n  }\n\n  private async handleEnter(forceEvaluate?: boolean): Promise<void> {\n    if (this.#selfXssWarningShown && this.text() === i18nString(UIStrings.allowPasting)) {\n      Common.Console.Console.instance().log(this.text());\n      this.editor.dispatch({\n        changes: {from: 0, to: this.editor.state.doc.length},\n        scrollIntoView: true,\n      });\n      Common.Settings.Settings.instance()\n          .createSetting('disable-self-xss-warning', false, Common.Settings.SettingStorageType.Synced)\n          .set(true);\n      this.#selfXssWarningShown = false;\n      Host.userMetrics.actionTaken(Host.UserMetrics.Action.SelfXssAllowPastingInConsole);\n      this.#updateJavaScriptCompletionCompartment();\n      return;\n    }\n\n    if (await this.enterWillEvaluate(forceEvaluate)) {\n      this.appendCommand(this.text(), true);\n      TextEditor.JavaScript.closeArgumentsHintsTooltip(this.editor.editor, this.#argumentHintsState);\n      this.editor.dispatch({\n        changes: {from: 0, to: this.editor.state.doc.length},\n        scrollIntoView: true,\n      });\n    } else if (this.editor.state.doc.length) {\n      CodeMirror.insertNewlineAndIndent(this.editor.editor);\n    } else {\n      this.editor.dispatch({scrollIntoView: true});\n    }\n  }\n\n  private updatePromptIcon(): void {\n    void this.iconThrottler.schedule(async () => {\n      this.promptIcon.classList.toggle('console-prompt-incomplete', !(await this.enterWillEvaluate()));\n    });\n  }\n\n  private appendCommand(text: string, useCommandLineAPI: boolean): void {\n    const currentExecutionContext = UI.Context.Context.instance().flavor(SDK.RuntimeModel.ExecutionContext);\n    if (currentExecutionContext) {\n      const executionContext = currentExecutionContext;\n      const consoleModel = executionContext.target().model(SDK.ConsoleModel.ConsoleModel);\n      if (consoleModel) {\n        const message = consoleModel.addCommandMessage(executionContext, text);\n        const expression = ObjectUI.JavaScriptREPL.JavaScriptREPL.wrapObjectLiteral(text);\n        void this.evaluateCommandInConsole(executionContext, message, expression, useCommandLineAPI);\n        if (ConsolePanel.instance().isShowing()) {\n          Host.userMetrics.actionTaken(Host.UserMetrics.Action.CommandEvaluatedInConsolePanel);\n        }\n      }\n    }\n  }\n\n  private async evaluateCommandInConsole(\n      executionContext: SDK.RuntimeModel.ExecutionContext, message: SDK.ConsoleModel.ConsoleMessage, expression: string,\n      useCommandLineAPI: boolean): Promise<void> {\n    const callFrame = executionContext.debuggerModel.selectedCallFrame();\n    if (callFrame && callFrame.script.isJavaScript()) {\n      const nameMap = await SourceMapScopes.NamesResolver.allVariablesInCallFrame(callFrame);\n      expression = await this.substituteNames(expression, nameMap);\n    }\n\n    await executionContext.target()\n        .model(SDK.ConsoleModel.ConsoleModel)\n        ?.evaluateCommandInConsole(executionContext, message, expression, useCommandLineAPI);\n  }\n\n  private async substituteNames(expression: string, mapping: Map<string, string|null>): Promise<string> {\n    try {\n      return await Formatter.FormatterWorkerPool.formatterWorkerPool().javaScriptSubstitute(expression, mapping);\n    } catch {\n      return expression;\n    }\n  }\n\n  private editorUpdate(update: CodeMirror.ViewUpdate): void {\n    if (update.docChanged ||\n        CodeMirror.selectedCompletion(update.state) !== CodeMirror.selectedCompletion(update.startState)) {\n      this.onTextChanged();\n    } else if (update.selectionSet) {\n      this.updatePromptIcon();\n    }\n  }\n\n  override focus(): void {\n    this.editor.focus();\n  }\n\n  private editorSetForTest(): void {\n  }\n}\n\nexport const enum Events {\n  TextChanged = 'TextChanged',\n}\n\nexport type EventTypes = {\n  [Events.TextChanged]: void,\n};\n"]}