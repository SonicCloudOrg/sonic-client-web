{"version":3,"file":"LighthouseStartView.js","sourceRoot":"","sources":["../../../../../../front_end/panels/lighthouse/LighthouseStartView.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as Buttons from '../../ui/components/buttons/buttons.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport {type LighthouseController, type Preset, Presets, RuntimeSettings} from './LighthouseController.js';\nimport {type LighthousePanel} from './LighthousePanel.js';\nimport lighthouseStartViewStyles from './lighthouseStartView.css.js';\nimport {RadioSetting} from './RadioSetting.js';\n\nconst UIStrings = {\n  /**\n   * @description Text displayed as the title of a panel that can be used to audit a web page with Lighthouse.\n   */\n  generateLighthouseReport: 'Generate a Lighthouse report',\n  /**\n   * @description Text that refers to the Lighthouse mode\n   */\n  mode: 'Mode',\n  /**\n   * @description Title in the Lighthouse Start View for list of categories to run during audit\n   */\n  categories: 'Categories',\n  /**\n   * @description Label for a button to start analyzing a page navigation with Lighthouse\n   */\n  analyzeNavigation: 'Analyze page load',\n  /**\n   * @description Label for a button to start analyzing the current page state with Lighthouse\n   */\n  analyzeSnapshot: 'Analyze page state',\n  /**\n   * @description Label for a button that starts a Lighthouse mode that analyzes user interactions over a period of time.\n   */\n  startTimespan: 'Start timespan',\n  /**\n   * @description Text that is usually a hyperlink to more documentation\n   */\n  learnMore: 'Learn more',\n  /**\n   * @description Text that refers to device such as a phone\n   */\n  device: 'Device',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/lighthouse/LighthouseStartView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class StartView extends UI.Widget.Widget {\n  private controller: LighthouseController;\n  private panel: LighthousePanel;\n  private readonly settingsToolbarInternal: UI.Toolbar.Toolbar;\n  private startButton!: Buttons.Button.Button;\n  private helpText?: Element;\n  private warningText?: Element;\n  private checkboxes: Array<{preset: Preset, checkbox: UI.Toolbar.ToolbarCheckbox}> = [];\n\n  changeFormMode?: (mode: string) => void;\n\n  constructor(controller: LighthouseController, panel: LighthousePanel) {\n    super();\n\n    this.controller = controller;\n    this.panel = panel;\n    this.settingsToolbarInternal = new UI.Toolbar.Toolbar('');\n    this.render();\n  }\n\n  private populateRuntimeSettingAsRadio(settingName: string, label: string, parentElement: Element): void {\n    const runtimeSetting = RuntimeSettings.find(item => item.setting.name === settingName);\n    if (!runtimeSetting || !runtimeSetting.options) {\n      throw new Error(`${settingName} is not a setting with options`);\n    }\n\n    const labelEl = document.createElement('div');\n    labelEl.classList.add('lighthouse-form-section-label');\n    labelEl.textContent = label;\n\n    if (runtimeSetting.learnMore) {\n      const link = UI.XLink.XLink.create(\n          runtimeSetting.learnMore, i18nString(UIStrings.learnMore), 'lighthouse-learn-more', undefined, 'learn-more');\n      labelEl.append(link);\n    }\n    parentElement.appendChild(labelEl);\n\n    const control = new RadioSetting(\n        runtimeSetting.options, runtimeSetting.setting as Common.Settings.Setting<string>,\n        runtimeSetting.description());\n    parentElement.appendChild(control.element);\n    UI.ARIAUtils.setLabel(control.element, label);\n  }\n\n  private populateRuntimeSettingAsToolbarCheckbox(settingName: string, toolbar: UI.Toolbar.Toolbar): void {\n    const runtimeSetting = RuntimeSettings.find(item => item.setting.name === settingName);\n    if (!runtimeSetting || !runtimeSetting.title) {\n      throw new Error(`${settingName} is not a setting with a title`);\n    }\n\n    runtimeSetting.setting.setTitle(runtimeSetting.title());\n    const control = new UI.Toolbar.ToolbarSettingCheckbox(\n        runtimeSetting.setting as Common.Settings.Setting<boolean>, runtimeSetting.description());\n    toolbar.appendToolbarItem(control);\n    if (runtimeSetting.learnMore) {\n      const link = UI.XLink.XLink.create(\n          runtimeSetting.learnMore, i18nString(UIStrings.learnMore), 'lighthouse-learn-more', undefined, 'learn-more');\n      link.style.margin = '5px';\n      control.element.appendChild(link);\n    }\n  }\n\n  private populateRuntimeSettingAsToolbarDropdown(settingName: string, toolbar: UI.Toolbar.Toolbar): void {\n    const runtimeSetting = RuntimeSettings.find(item => item.setting.name === settingName);\n    if (!runtimeSetting || !runtimeSetting.title) {\n      throw new Error(`${settingName} is not a setting with a title`);\n    }\n\n    const options = runtimeSetting.options?.map(option => ({label: option.label(), value: option.value})) || [];\n\n    runtimeSetting.setting.setTitle(runtimeSetting.title());\n    const control = new UI.Toolbar.ToolbarSettingComboBox(\n        options,\n        runtimeSetting.setting as Common.Settings.Setting<string>,\n        runtimeSetting.title(),\n    );\n    control.setTitle(runtimeSetting.description());\n    toolbar.appendToolbarItem(control);\n    if (runtimeSetting.learnMore) {\n      const link = UI.XLink.XLink.create(\n          runtimeSetting.learnMore, i18nString(UIStrings.learnMore), 'lighthouse-learn-more', undefined, 'learn-more');\n      link.style.margin = '5px';\n      control.element.appendChild(link);\n    }\n  }\n\n  private populateFormControls(fragment: UI.Fragment.Fragment, mode?: string): void {\n    // Populate the device type\n    const deviceTypeFormElements = fragment.$('device-type-form-elements');\n    this.populateRuntimeSettingAsRadio('lighthouse.device-type', i18nString(UIStrings.device), deviceTypeFormElements);\n\n    // Populate the categories\n    const categoryFormElements = fragment.$('categories-form-elements') as HTMLElement;\n\n    this.checkboxes = [];\n    for (const preset of Presets) {\n      preset.setting.setTitle(preset.title());\n      const checkbox = new UI.Toolbar.ToolbarSettingCheckbox(preset.setting, preset.description());\n      const row = categoryFormElements.createChild('div', 'vbox lighthouse-launcher-row');\n      row.appendChild(checkbox.element);\n      checkbox.element.setAttribute('data-lh-category', preset.configID);\n      this.checkboxes.push({preset, checkbox});\n      if (mode && !preset.supportedModes.includes(mode)) {\n        checkbox.setEnabled(false);\n        checkbox.setIndeterminate(true);\n      }\n    }\n    UI.ARIAUtils.markAsGroup(categoryFormElements);\n    UI.ARIAUtils.setLabel(categoryFormElements, i18nString(UIStrings.categories));\n  }\n\n  private render(): void {\n    this.populateRuntimeSettingAsToolbarCheckbox('lighthouse.clear-storage', this.settingsToolbarInternal);\n    this.populateRuntimeSettingAsToolbarCheckbox('lighthouse.enable-sampling', this.settingsToolbarInternal);\n    this.populateRuntimeSettingAsToolbarDropdown('lighthouse.throttling', this.settingsToolbarInternal);\n\n    const {mode} = this.controller.getFlags();\n    this.populateStartButton(mode);\n\n    const fragment = UI.Fragment.Fragment.build`\n<form class=\"lighthouse-start-view\">\n  <header class=\"hbox\">\n    <div class=\"lighthouse-logo\"></div>\n    <div class=\"lighthouse-title\">${i18nString(UIStrings.generateLighthouseReport)}</div>\n    <div class=\"lighthouse-start-button-container\" $=\"start-button-container\">${this.startButton}</div>\n  </header>\n  <div $=\"help-text\" class=\"lighthouse-help-text hidden\"></div>\n  <div class=\"lighthouse-options hbox\">\n    <div class=\"lighthouse-form-section\">\n      <div class=\"lighthouse-form-elements\" $=\"mode-form-elements\"></div>\n    </div>\n    <div class=\"lighthouse-form-section\">\n      <div class=\"lighthouse-form-elements\" $=\"device-type-form-elements\"></div>\n    </div>\n    <div class=\"lighthouse-form-categories\">\n      <div class=\"lighthouse-form-section\">\n        <div class=\"lighthouse-form-section-label\">${i18nString(UIStrings.categories)}</div>\n        <div class=\"lighthouse-form-elements\" $=\"categories-form-elements\"></div>\n      </div>\n    </div>\n  </div>\n  <div $=\"warning-text\" class=\"lighthouse-warning-text hidden\"></div>\n</form>\n    `;\n\n    this.helpText = fragment.$('help-text');\n    this.warningText = fragment.$('warning-text');\n\n    const modeFormElements = fragment.$('mode-form-elements');\n    this.populateRuntimeSettingAsRadio('lighthouse.mode', i18nString(UIStrings.mode), modeFormElements);\n\n    this.populateFormControls(fragment, mode);\n\n    this.contentElement.textContent = '';\n    this.contentElement.append(fragment.element());\n\n    this.refresh();\n  }\n\n  private populateStartButton(mode: string): void {\n    let buttonLabel: Platform.UIString.LocalizedString;\n    let callback: () => void;\n\n    if (mode === 'timespan') {\n      buttonLabel = i18nString(UIStrings.startTimespan);\n      callback = () => {\n        void this.panel.handleTimespanStart();\n      };\n    } else if (mode === 'snapshot') {\n      buttonLabel = i18nString(UIStrings.analyzeSnapshot);\n      callback = () => {\n        void this.panel.handleCompleteRun();\n      };\n    } else {\n      buttonLabel = i18nString(UIStrings.analyzeNavigation);\n      callback = () => {\n        void this.panel.handleCompleteRun();\n      };\n    }\n\n    const startButtonContainer = this.contentElement.querySelector('.lighthouse-start-button-container');\n    if (startButtonContainer) {\n      startButtonContainer.textContent = '';\n      this.startButton = UI.UIUtils.createTextButton(\n          buttonLabel, callback, {variant: Buttons.Button.Variant.PRIMARY, jslogContext: 'lighthouse.start'});\n      startButtonContainer.append(this.startButton);\n    }\n  }\n\n  refresh(): void {\n    const {mode} = this.controller.getFlags();\n    this.populateStartButton(mode);\n\n    for (const {checkbox, preset} of this.checkboxes) {\n      if (preset.supportedModes.includes(mode)) {\n        checkbox.setEnabled(true);\n        checkbox.setIndeterminate(false);\n      } else {\n        checkbox.setEnabled(false);\n        checkbox.setIndeterminate(true);\n      }\n    }\n\n    // Ensure the correct layout is used after refresh.\n    this.onResize();\n  }\n\n  override onResize(): void {\n    const useNarrowLayout = this.contentElement.offsetWidth < 500;\n    const useWideLayout = this.contentElement.offsetWidth > 800;\n    const headerEl = this.contentElement.querySelector('.lighthouse-start-view header');\n    const optionsEl = this.contentElement.querySelector('.lighthouse-options');\n    if (headerEl) {\n      headerEl.classList.toggle('hbox', !useNarrowLayout);\n      headerEl.classList.toggle('vbox', useNarrowLayout);\n    }\n    if (optionsEl) {\n      optionsEl.classList.toggle('wide', useWideLayout);\n      optionsEl.classList.toggle('narrow', useNarrowLayout);\n    }\n  }\n\n  focusStartButton(): void {\n    this.startButton.focus();\n  }\n\n  setStartButtonEnabled(isEnabled: boolean): void {\n    if (this.helpText) {\n      this.helpText.classList.toggle('hidden', isEnabled);\n    }\n\n    if (this.startButton) {\n      this.startButton.disabled = !isEnabled;\n    }\n  }\n\n  setUnauditableExplanation(text: string|null): void {\n    if (this.helpText) {\n      this.helpText.textContent = text;\n    }\n  }\n\n  setWarningText(text: string|null): void {\n    if (this.warningText) {\n      this.warningText.textContent = text;\n      this.warningText.classList.toggle('hidden', !text);\n    }\n  }\n\n  override wasShown(): void {\n    super.wasShown();\n    this.controller.recomputePageAuditability();\n    this.registerCSSFiles([lighthouseStartViewStyles]);\n  }\n\n  settingsToolbar(): UI.Toolbar.Toolbar {\n    return this.settingsToolbarInternal;\n  }\n}\n"]}