{"version":3,"file":"LighthouseTimespanView.js","sourceRoot":"","sources":["../../../../../../front_end/panels/lighthouse/LighthouseTimespanView.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Buttons from '../../ui/components/buttons/buttons.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport lighthouseDialogStyles from './lighthouseDialog.css.js';\nimport {type LighthousePanel} from './LighthousePanel.js';\n\nconst UIStrings = {\n  /**\n   * @description Header indicating that a Lighthouse timespan is starting. \"Timespan\" is a Lighthouse mode that analyzes user interactions over a period of time.\n   */\n  timespanStarting: 'Timespan startingâ€¦',\n  /**\n   * @description Header indicating that a Lighthouse timespan has started. \"Timespan\" is a Lighthouse mode that analyzes user interactions over a period of time. \"interact with the page\" is a call to action for the user to interact with the web page.\n   */\n  timespanStarted: 'Timespan started, interact with the page',\n  /**\n   * @description Label for a button that ends a Lighthouse timespan. \"timespan\" is a Lighthouse mode that analyzes user interactions over a period of time.\n   */\n  endTimespan: 'End timespan',\n  /**\n   * @description Label for a button that cancels a Lighthouse timespan.\n   */\n  cancel: 'Cancel',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/lighthouse/LighthouseTimespanView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class TimespanView extends UI.Dialog.Dialog {\n  private panel: LighthousePanel;\n  private statusHeader: Element|null;\n  private endButton: Buttons.Button.Button|null;\n\n  constructor(panel: LighthousePanel) {\n    super();\n    this.panel = panel;\n    this.statusHeader = null;\n    this.endButton = null;\n    this.setDimmed(true);\n    this.setCloseOnEscape(false);\n    this.setOutsideClickCallback(event => event.consume(true));\n    this.render();\n  }\n\n  override show(dialogRenderElement: Element): void {\n    this.reset();\n    super.show(dialogRenderElement);\n  }\n\n  reset(): void {\n    if (this.statusHeader && this.endButton) {\n      this.statusHeader.textContent = i18nString(UIStrings.timespanStarting);\n      this.endButton.disabled = true;\n    }\n  }\n\n  ready(): void {\n    if (this.statusHeader && this.endButton) {\n      this.statusHeader.textContent = i18nString(UIStrings.timespanStarted);\n      this.endButton.disabled = false;\n      this.endButton.focus();\n    }\n  }\n\n  render(): void {\n    const dialogRoot = UI.UIUtils.createShadowRootWithCoreStyles(\n        this.contentElement, {cssFile: [lighthouseDialogStyles], delegatesFocus: undefined});\n\n    this.endButton = UI.UIUtils.createTextButton(\n        i18nString(UIStrings.endTimespan),\n        this.endTimespan.bind(this),\n        {variant: Buttons.Button.Variant.PRIMARY, jslogContext: 'lighthouse.end-time-span'},\n    );\n    const cancelButton = UI.UIUtils.createTextButton(i18nString(UIStrings.cancel), this.cancel.bind(this), {\n      jslogContext: 'lighthouse.cancel',\n    });\n    const fragment = UI.Fragment.Fragment.build`\n  <div class=\"lighthouse-view vbox\">\n  <h2 $=\"status-header\"></h2>\n  <div class=\"lighthouse-action-buttons hbox\">\n  ${cancelButton}\n  ${this.endButton}\n  </div>\n  </div>\n  `;\n\n    this.statusHeader = fragment.$('status-header');\n    dialogRoot.appendChild(fragment.element());\n\n    this.setSizeBehavior(UI.GlassPane.SizeBehavior.SetExactWidthMaxHeight);\n    this.setMaxContentSize(new UI.Geometry.Size(500, 400));\n    this.reset();\n  }\n\n  private async endTimespan(): Promise<void> {\n    await this.panel.handleTimespanEnd();\n  }\n\n  private async cancel(): Promise<void> {\n    await this.panel.handleRunCancel();\n  }\n}\n"]}