{"version":3,"file":"LighthouseProtocolService.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/lighthouse/LighthouseProtocolService.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as ProtocolClient from '../../core/protocol_client/protocol_client.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\n\nimport type * as LighthouseModule from './lighthouse.js';\n\ndescribeWithMockConnection('LighthouseProtocolService', () => {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  let Lighthouse: typeof LighthouseModule;\n  let primaryTarget: SDK.Target.Target;\n  let rootTarget: SDK.Target.Target;\n  let suspendAllTargets: sinon.SinonStub;\n  let resumeAllTargets: sinon.SinonStub;\n  let createParallelConnection: sinon.SinonStub;\n\n  beforeEach(async () => {\n    Lighthouse = await import('./lighthouse.js');\n    rootTarget = createTarget({type: SDK.Target.Type.Tab});\n    createTarget({parentTarget: rootTarget, subtype: 'prerender'});\n    primaryTarget = createTarget({parentTarget: rootTarget});\n\n    const targetManager = SDK.TargetManager.TargetManager.instance();\n\n    suspendAllTargets = sinon.stub(targetManager, 'suspendAllTargets').resolves();\n    resumeAllTargets = sinon.stub(targetManager, 'resumeAllTargets').resolves();\n    SDK.ChildTargetManager.ChildTargetManager.install();\n    const childTargetManager = primaryTarget.model(SDK.ChildTargetManager.ChildTargetManager);\n    assert.exists(childTargetManager);\n\n    sinon.stub(childTargetManager, 'getParentTargetId').resolves(primaryTarget.targetInfo()?.targetId);\n    if (rootTarget === primaryTarget) {\n      createParallelConnection = sinon.stub(childTargetManager, 'createParallelConnection').resolves({\n        connection: {disconnect: () => {}} as ProtocolClient.InspectorBackend.Connection,\n        sessionId: 'foo',\n      });\n    } else {\n      const rootChildTargetManager = rootTarget.model(SDK.ChildTargetManager.ChildTargetManager);\n      assert.exists(rootChildTargetManager);\n      sinon.stub(rootChildTargetManager, 'getParentTargetId').resolves(rootTarget.targetInfo()?.targetId);\n      createParallelConnection = sinon.stub(rootChildTargetManager, 'createParallelConnection').resolves({\n        connection: {disconnect: () => {}} as ProtocolClient.InspectorBackend.Connection,\n        sessionId: 'foo',\n      });\n    }\n  });\n\n  it('suspends all targets', async () => {\n    const service = new Lighthouse.LighthouseProtocolService.ProtocolService();\n    await service.attach();\n    assert.isTrue(suspendAllTargets.calledOnce);\n  });\n\n  it('creates a parallel connection', async () => {\n    const service = new Lighthouse.LighthouseProtocolService.ProtocolService();\n    await service.attach();\n    assert.isTrue(createParallelConnection.calledOnce);\n  });\n\n  it('resumes all targets', async () => {\n    const service = new Lighthouse.LighthouseProtocolService.ProtocolService();\n    await service.attach();\n    await service.detach();\n    assert.isTrue(resumeAllTargets.calledOnce);\n  });\n});\n"]}