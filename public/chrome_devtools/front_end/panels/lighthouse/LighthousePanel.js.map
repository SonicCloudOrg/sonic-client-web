{"version":3,"file":"LighthousePanel.js","sourceRoot":"","sources":["../../../../../../front_end/panels/lighthouse/LighthousePanel.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport {\n  type AuditProgressChangedEvent,\n  Events,\n  LighthouseController,\n  type PageAuditabilityChangedEvent,\n  type PageWarningsChangedEvent,\n} from './LighthouseController.js';\nimport lighthousePanelStyles from './lighthousePanel.css.js';\nimport {ProtocolService} from './LighthouseProtocolService.js';\nimport {type ReportJSON, type RunnerResultArtifacts} from './LighthouseReporterTypes.js';\nimport {LighthouseReportRenderer} from './LighthouseReportRenderer.js';\nimport {Item, ReportSelector} from './LighthouseReportSelector.js';\nimport {StartView} from './LighthouseStartView.js';\nimport {StatusView} from './LighthouseStatusView.js';\nimport {TimespanView} from './LighthouseTimespanView.js';\n\nconst UIStrings = {\n  /**\n   *@description Text that appears when user drag and drop something (for example, a file) in Lighthouse Panel\n   */\n  dropLighthouseJsonHere: 'Drop `Lighthouse` JSON here',\n  /**\n   *@description Tooltip text that appears when hovering over the largeicon add button in the Lighthouse Panel\n   */\n  performAnAudit: 'Perform an audit…',\n  /**\n   *@description Text to clear everything\n   */\n  clearAll: 'Clear all',\n  /**\n   *@description Tooltip text that appears when hovering over the largeicon settings gear in show settings pane setting in start view of the audits panel\n   */\n  lighthouseSettings: '`Lighthouse` settings',\n  /**\n   *@description Status header in the Lighthouse panel\n   */\n  printing: 'Printing',\n  /**\n   *@description Status text in the Lighthouse panel\n   */\n  thePrintPopupWindowIsOpenPlease: 'The print popup window is open. Please close it to continue.',\n  /**\n   *@description Text in Lighthouse Panel\n   */\n  cancelling: 'Cancelling',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/lighthouse/LighthousePanel.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nlet lighthousePanelInstace: LighthousePanel;\ntype Nullable<T> = T|null;\n\nexport class LighthousePanel extends UI.Panel.Panel {\n  private readonly controller: LighthouseController;\n  private readonly startView: StartView;\n  private readonly statusView: StatusView;\n  private readonly timespanView: TimespanView;\n  private warningText: Nullable<string>;\n  private unauditableExplanation: Nullable<string>;\n  private readonly cachedRenderedReports: Map<ReportJSON, HTMLElement>;\n  private readonly dropTarget: UI.DropTarget.DropTarget;\n  private readonly auditResultsElement: HTMLElement;\n  private clearButton!: UI.Toolbar.ToolbarButton;\n  private newButton!: UI.Toolbar.ToolbarButton;\n  private reportSelector!: ReportSelector;\n  private settingsPane!: UI.Widget.Widget;\n  private rightToolbar!: UI.Toolbar.Toolbar;\n  private showSettingsPaneSetting!: Common.Settings.Setting<boolean>;\n\n  private constructor(\n      controller: LighthouseController,\n  ) {\n    super('lighthouse');\n\n    this.controller = controller;\n    this.startView = new StartView(this.controller, this);\n    this.timespanView = new TimespanView(this);\n    this.statusView = new StatusView(this);\n\n    this.warningText = null;\n    this.unauditableExplanation = null;\n    this.cachedRenderedReports = new Map();\n\n    this.dropTarget = new UI.DropTarget.DropTarget(\n        this.contentElement, [UI.DropTarget.Type.File], i18nString(UIStrings.dropLighthouseJsonHere),\n        this.handleDrop.bind(this));\n\n    this.controller.addEventListener(Events.PageAuditabilityChanged, this.refreshStartAuditUI.bind(this));\n    this.controller.addEventListener(Events.PageWarningsChanged, this.refreshWarningsUI.bind(this));\n    this.controller.addEventListener(Events.AuditProgressChanged, this.refreshStatusUI.bind(this));\n\n    this.renderToolbar();\n    this.auditResultsElement = this.contentElement.createChild('div', 'lighthouse-results-container');\n    this.renderStartView();\n\n    this.controller.recomputePageAuditability();\n  }\n\n  static instance(opts?: {forceNew: boolean, protocolService: ProtocolService, controller: LighthouseController}):\n      LighthousePanel {\n    if (!lighthousePanelInstace || opts?.forceNew) {\n      const protocolService = opts?.protocolService ?? new ProtocolService();\n      const controller = opts?.controller ?? new LighthouseController(protocolService);\n\n      lighthousePanelInstace = new LighthousePanel(controller);\n    }\n\n    return lighthousePanelInstace;\n  }\n\n  static getEvents(): typeof Events {\n    return Events;\n  }\n\n  async handleTimespanStart(): Promise<void> {\n    try {\n      this.timespanView.show(this.contentElement);\n      await this.controller.startLighthouse();\n      this.timespanView.ready();\n    } catch (err) {\n      this.handleError(err);\n    }\n  }\n\n  async handleTimespanEnd(): Promise<void> {\n    try {\n      this.timespanView.hide();\n      this.renderStatusView();\n      const {lhr, artifacts} = await this.controller.collectLighthouseResults();\n      this.buildReportUI(lhr, artifacts);\n    } catch (err) {\n      this.handleError(err);\n    }\n  }\n\n  async handleCompleteRun(): Promise<void> {\n    try {\n      await this.controller.startLighthouse();\n      this.renderStatusView();\n      const {lhr, artifacts} = await this.controller.collectLighthouseResults();\n      this.buildReportUI(lhr, artifacts);\n    } catch (err) {\n      this.handleError(err);\n    }\n  }\n\n  async handleRunCancel(): Promise<void> {\n    this.statusView.updateStatus(i18nString(UIStrings.cancelling));\n    this.timespanView.hide();\n    await this.controller.cancelLighthouse();\n    this.renderStartView();\n  }\n\n  private handleError(err: unknown): void {\n    if (err instanceof Error) {\n      this.statusView.renderBugReport(err);\n    }\n  }\n\n  private refreshWarningsUI(evt: Common.EventTarget.EventTargetEvent<PageWarningsChangedEvent>): void {\n    // PageWarningsChanged fires multiple times during an audit, which we want to ignore.\n    if (this.controller.getCurrentRun()) {\n      return;\n    }\n\n    this.warningText = evt.data.warning;\n    this.startView.setWarningText(evt.data.warning);\n  }\n\n  private refreshStartAuditUI(evt: Common.EventTarget.EventTargetEvent<PageAuditabilityChangedEvent>): void {\n    // PageAuditabilityChanged fires multiple times during an audit, which we want to ignore.\n    if (this.controller.getCurrentRun()) {\n      return;\n    }\n\n    this.startView.refresh();\n\n    this.unauditableExplanation = evt.data.helpText;\n    this.startView.setUnauditableExplanation(evt.data.helpText);\n    this.startView.setStartButtonEnabled(!evt.data.helpText);\n  }\n\n  private refreshStatusUI(evt: Common.EventTarget.EventTargetEvent<AuditProgressChangedEvent>): void {\n    this.statusView.updateStatus(evt.data.message);\n  }\n\n  private refreshToolbarUI(): void {\n    this.clearButton.setEnabled(this.reportSelector.hasItems());\n  }\n\n  private clearAll(): void {\n    this.reportSelector.clearAll();\n    this.renderStartView();\n    this.refreshToolbarUI();\n  }\n\n  private renderToolbar(): void {\n    const lighthouseToolbarContainer = this.element.createChild('div', 'lighthouse-toolbar-container');\n    lighthouseToolbarContainer.setAttribute('jslog', `${VisualLogging.toolbar()}`);\n\n    const toolbar = new UI.Toolbar.Toolbar('', lighthouseToolbarContainer);\n\n    this.newButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.performAnAudit), 'plus');\n    toolbar.appendToolbarItem(this.newButton);\n    this.newButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.renderStartView.bind(this));\n\n    toolbar.appendSeparator();\n\n    this.reportSelector = new ReportSelector(() => this.renderStartView());\n    toolbar.appendToolbarItem(this.reportSelector.comboBox());\n\n    this.clearButton = new UI.Toolbar.ToolbarButton(i18nString(UIStrings.clearAll), 'clear');\n    toolbar.appendToolbarItem(this.clearButton);\n    this.clearButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, this.clearAll.bind(this));\n\n    this.settingsPane = new UI.Widget.HBox();\n    this.settingsPane.show(this.contentElement);\n    this.settingsPane.element.classList.add('lighthouse-settings-pane');\n    this.settingsPane.element.appendChild(this.startView.settingsToolbar().element);\n    this.showSettingsPaneSetting = Common.Settings.Settings.instance().createSetting(\n        'lighthouse-show-settings-toolbar', false, Common.Settings.SettingStorageType.Synced);\n\n    this.rightToolbar = new UI.Toolbar.Toolbar('', lighthouseToolbarContainer);\n    this.rightToolbar.appendSeparator();\n    this.rightToolbar.appendToolbarItem(new UI.Toolbar.ToolbarSettingToggle(\n        this.showSettingsPaneSetting, 'gear', i18nString(UIStrings.lighthouseSettings), 'gear-filled'));\n    this.showSettingsPaneSetting.addChangeListener(this.updateSettingsPaneVisibility.bind(this));\n    this.updateSettingsPaneVisibility();\n\n    this.refreshToolbarUI();\n  }\n\n  private updateSettingsPaneVisibility(): void {\n    this.settingsPane.element.classList.toggle('hidden', !this.showSettingsPaneSetting.get());\n  }\n\n  private toggleSettingsDisplay(show: boolean): void {\n    this.rightToolbar.element.classList.toggle('hidden', !show);\n    this.settingsPane.element.classList.toggle('hidden', !show);\n    this.updateSettingsPaneVisibility();\n  }\n\n  private renderStartView(): void {\n    this.auditResultsElement.removeChildren();\n    this.statusView.hide();\n\n    this.reportSelector.selectNewReport();\n    this.contentElement.classList.toggle('in-progress', false);\n\n    this.startView.show(this.contentElement);\n    this.toggleSettingsDisplay(true);\n    this.startView.setUnauditableExplanation(this.unauditableExplanation);\n    this.startView.setStartButtonEnabled(!this.unauditableExplanation);\n    if (!this.unauditableExplanation) {\n      this.startView.focusStartButton();\n    }\n    this.startView.setWarningText(this.warningText);\n\n    this.newButton.setEnabled(false);\n    this.refreshToolbarUI();\n    this.setDefaultFocusedChild(this.startView);\n  }\n\n  private renderStatusView(): void {\n    const inspectedURL = this.controller.getCurrentRun()?.inspectedURL;\n    this.contentElement.classList.toggle('in-progress', true);\n    this.statusView.setInspectedURL(inspectedURL);\n    this.statusView.show(this.contentElement);\n  }\n\n  private beforePrint(): void {\n    this.statusView.show(this.contentElement);\n    this.statusView.toggleCancelButton(false);\n    this.statusView.renderText(i18nString(UIStrings.printing), i18nString(UIStrings.thePrintPopupWindowIsOpenPlease));\n  }\n\n  private afterPrint(): void {\n    this.statusView.hide();\n    this.statusView.toggleCancelButton(true);\n  }\n\n  private renderReport(lighthouseResult: ReportJSON, artifacts?: RunnerResultArtifacts): void {\n    this.toggleSettingsDisplay(false);\n    this.contentElement.classList.toggle('in-progress', false);\n    this.startView.hideWidget();\n    this.statusView.hide();\n    this.auditResultsElement.removeChildren();\n    this.newButton.setEnabled(true);\n    this.refreshToolbarUI();\n\n    const cachedRenderedReport = this.cachedRenderedReports.get(lighthouseResult);\n    if (cachedRenderedReport) {\n      this.auditResultsElement.appendChild(cachedRenderedReport);\n      return;\n    }\n\n    const reportContainer = LighthouseReportRenderer.renderLighthouseReport(lighthouseResult, artifacts, {\n      beforePrint: this.beforePrint.bind(this),\n      afterPrint: this.afterPrint.bind(this),\n    });\n\n    this.cachedRenderedReports.set(lighthouseResult, reportContainer);\n  }\n\n  private buildReportUI(lighthouseResult: ReportJSON, artifacts?: RunnerResultArtifacts): void {\n    if (lighthouseResult === null) {\n      return;\n    }\n\n    const optionElement = new Item(\n        lighthouseResult, () => this.renderReport(lighthouseResult, artifacts), this.renderStartView.bind(this));\n    this.reportSelector.prepend(optionElement);\n    this.refreshToolbarUI();\n    this.renderReport(lighthouseResult);\n    this.newButton.element.focus();\n  }\n\n  private handleDrop(dataTransfer: DataTransfer): void {\n    const items = dataTransfer.items;\n    if (!items.length) {\n      return;\n    }\n    const item = items[0];\n    if (item.kind === 'file') {\n      const file = items[0].getAsFile();\n      if (!file) {\n        return;\n      }\n\n      const reader = new FileReader();\n      reader.onload = () => this.loadedFromFile(reader.result as string);\n      reader.readAsText(file);\n    }\n  }\n\n  private loadedFromFile(report: string): void {\n    const data = JSON.parse(report);\n    if (!data['lighthouseVersion']) {\n      return;\n    }\n    this.buildReportUI(data as ReportJSON);\n  }\n\n  override elementsToRestoreScrollPositionsFor(): Element[] {\n    const els = super.elementsToRestoreScrollPositionsFor();\n    const lhContainerEl = this.auditResultsElement.querySelector('.lh-container');\n    if (lhContainerEl) {\n      els.push(lhContainerEl);\n    }\n    return els;\n  }\n\n  override wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([lighthousePanelStyles]);\n  }\n}\n"]}