{"version":3,"file":"ObjectEventListenersSidebarPane.js","sourceRoot":"","sources":["../../../../../../front_end/panels/browser_debugger/ObjectEventListenersSidebarPane.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\nimport * as EventListeners from '../event_listeners/event_listeners.js';\n\nexport class ObjectEventListenersSidebarPane extends UI.ThrottledWidget.ThrottledWidget implements\n    UI.Toolbar.ItemsProvider {\n  #lastRequestedContext?: SDK.RuntimeModel.ExecutionContext;\n\n  // TODO(bmeurer): This is only public for web tests.\n  readonly eventListenersView: EventListeners.EventListenersView.EventListenersView;\n\n  constructor() {\n    super();\n    this.contentElement.setAttribute('jslog', `${VisualLogging.section('sources.global-listeners')}`);\n\n    this.eventListenersView = new EventListeners.EventListenersView.EventListenersView(\n        this.update.bind(this), /* enableDefaultTreeFocus */ true);\n    this.eventListenersView.show(this.element);\n    this.setDefaultFocusedChild(this.eventListenersView);\n    this.update();\n  }\n\n  toolbarItems(): UI.Toolbar.ToolbarItem[] {\n    return [UI.Toolbar.Toolbar.createActionButtonForId('browser-debugger.refresh-global-event-listeners')];\n  }\n\n  protected override async doUpdate(): Promise<void> {\n    if (this.#lastRequestedContext) {\n      this.#lastRequestedContext.runtimeModel.releaseObjectGroup(objectGroupName);\n      this.#lastRequestedContext = undefined;\n    }\n\n    const windowObjects: Array<SDK.RemoteObject.RemoteObject> = [];\n    const executionContext = UI.Context.Context.instance().flavor(SDK.RuntimeModel.ExecutionContext);\n    if (executionContext) {\n      this.#lastRequestedContext = executionContext;\n      const result = await executionContext.evaluate(\n          {\n            expression: 'self',\n            objectGroup: objectGroupName,\n            includeCommandLineAPI: false,\n            silent: true,\n            returnByValue: false,\n            generatePreview: false,\n          },\n          /* userGesture */ false,\n          /* awaitPromise */ false);\n      if (!('error' in result) && !result.exceptionDetails) {\n        windowObjects.push(result.object);\n      }\n    }\n    await this.eventListenersView.addObjects(windowObjects);\n  }\n\n  override wasShown(): void {\n    super.wasShown();\n    UI.Context.Context.instance().addFlavorChangeListener(SDK.RuntimeModel.ExecutionContext, this.update, this);\n    UI.Context.Context.instance().setFlavor(ObjectEventListenersSidebarPane, this);\n  }\n\n  override willHide(): void {\n    UI.Context.Context.instance().setFlavor(ObjectEventListenersSidebarPane, null);\n    UI.Context.Context.instance().removeFlavorChangeListener(SDK.RuntimeModel.ExecutionContext, this.update, this);\n    super.willHide();\n    if (this.#lastRequestedContext) {\n      this.#lastRequestedContext.runtimeModel.releaseObjectGroup(objectGroupName);\n      this.#lastRequestedContext = undefined;\n    }\n  }\n}\n\nexport class ActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  handleAction(context: UI.Context.Context, actionId: string): boolean {\n    switch (actionId) {\n      case 'browser-debugger.refresh-global-event-listeners': {\n        const eventListenersSidebarPane = context.flavor(ObjectEventListenersSidebarPane);\n        if (eventListenersSidebarPane) {\n          eventListenersSidebarPane.update();\n          return true;\n        }\n        return false;\n      }\n    }\n    return false;\n  }\n}\n\nexport const objectGroupName = 'object-event-listeners-sidebar-pane';\n"]}