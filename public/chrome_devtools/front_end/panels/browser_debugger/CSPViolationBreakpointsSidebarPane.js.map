{"version":3,"file":"CSPViolationBreakpointsSidebarPane.js","sourceRoot":"","sources":["../../../../../../front_end/panels/browser_debugger/CSPViolationBreakpointsSidebarPane.ts"],"names":[],"mappings":"AAAA,gEAAgE;AAChE,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,GAAG,MAAM,uBAAuB,CAAC;AAE7C,OAAO,KAAK,aAAa,MAAM,2CAA2C,CAAC;AAE3E,OAAO,EAAC,iCAAiC,EAAC,MAAM,wCAAwC,CAAC;AAEzF,MAAM,OAAO,kCAAmC,SAAQ,iCAAiC;IACvF;QACE,MAAM,WAAW,GACb,GAAG,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAC,uBAAuB,EAAE,CAAC;QACjF,KAAK,CAAC,WAAW,EAAE,mCAAmC,wEAAmD,CAAC;QAC1G,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,OAAO,EAAE,GAAG,aAAa,CAAC,OAAO,CAAC,mCAAmC,CAAC,EAAE,CAAC,CAAC;IAC7G,CAAC;IAEkB,8BAA8B,CAAC,OAAgD;QAEhG,MAAM,cAAc,GAAG,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACnH,MAAM,WAAW,GAAG,GAAG,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAC,uBAAuB,EAAE,CAAC;QACjG,MAAM,UAAU,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,cAAc,CAAC,CAAC;QACtE,OAAO,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC;IACxC,CAAC;IAEkB,gBAAgB,CAAC,UAA2D,EAAE,OAAgB;QAE/G,UAAU,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAC/B,GAAG,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAC,6BAA6B,EAAE,CAAC;IACrF,CAAC;CACF","sourcesContent":["// Copyright (c) 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport {CategorizedBreakpointsSidebarPane} from './CategorizedBreakpointsSidebarPane.js';\n\nexport class CSPViolationBreakpointsSidebarPane extends CategorizedBreakpointsSidebarPane {\n  constructor() {\n    const breakpoints: SDK.DOMDebuggerModel.CSPViolationBreakpoint[] =\n        SDK.DOMDebuggerModel.DOMDebuggerManager.instance().cspViolationBreakpoints();\n    super(breakpoints, 'sources.csp-violation-breakpoints', Protocol.Debugger.PausedEventReason.CSPViolation);\n    this.contentElement.setAttribute('jslog', `${VisualLogging.section('sources.csp-violation-breakpoints')}`);\n  }\n\n  protected override getBreakpointFromPausedDetails(details: SDK.DebuggerModel.DebuggerPausedDetails):\n      SDK.CategorizedBreakpoint.CategorizedBreakpoint|null {\n    const breakpointType = details.auxData && details.auxData['violationType'] ? details.auxData['violationType'] : '';\n    const breakpoints = SDK.DOMDebuggerModel.DOMDebuggerManager.instance().cspViolationBreakpoints();\n    const breakpoint = breakpoints.find(x => x.type() === breakpointType);\n    return breakpoint ? breakpoint : null;\n  }\n\n  protected override toggleBreakpoint(breakpoint: SDK.CategorizedBreakpoint.CategorizedBreakpoint, enabled: boolean):\n      void {\n    breakpoint.setEnabled(enabled);\n    SDK.DOMDebuggerModel.DOMDebuggerManager.instance().updateCSPViolationBreakpoints();\n  }\n}\n"]}