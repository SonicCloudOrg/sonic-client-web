{"version":3,"file":"CSSOverviewPanel.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/css_overview/CSSOverviewPanel.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,GAAG,MAAM,uBAAuB,CAAC;AAE7C,OAAO,EAAC,YAAY,EAAC,MAAM,qCAAqC,CAAC;AACjE,OAAO,EACL,0BAA0B,GAC3B,MAAM,iCAAiC,CAAC;AAEzC,OAAO,KAAK,WAAW,MAAM,mBAAmB,CAAC;AAEjD,0BAA0B,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAClD,IAAI,MAAyB,CAAC;IAE9B,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,QAAQ,GAAG,YAAY,CAAC,EAAC,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAC,CAAC,CAAC;QAC3D,YAAY,CAAC,EAAC,YAAY,EAAE,QAAQ,EAAE,OAAO,EAAE,WAAW,EAAC,CAAC,CAAC;QAC7D,MAAM,GAAG,YAAY,CAAC,EAAC,YAAY,EAAE,QAAQ,EAAC,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;QAChE,MAAM,UAAU,GAAG,IAAI,WAAW,CAAC,qBAAqB,CAAC,kBAAkB,EAAE,CAAC;QAC9E,IAAI,WAAW,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QAC9D,MAAM,iBAAiB,GAAG,UAAU,CAAC,IAAI,sFAA4D,CAAC;QACtG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,EAAE,iBAAiB,CAAC,CAAC,QAAQ,CAAC;YAC5D,MAAM,EAAE,EAAE;SACqC,CAAC,CAAC;QACnD,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE,EAAE,wBAAwB,CAAC,CAAC,QAAQ,CAAC;YACvE,SAAS,EAAE,EAAE;SAC6C,CAAC,CAAC;QAC9D,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,wBAAwB,CAAC,CAAC,QAAQ,CAAC;YAC/D,MAAM,EAAE,EAAE;SACwC,CAAC,CAAC;QAEtD,UAAU,CAAC,wBAAwB,4FAA+D,CAAC;QACnG,MAAM,iBAAiB,CAAC;IAC1B,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {\n  describeWithMockConnection,\n} from '../../testing/MockConnection.js';\n\nimport * as CSSOverview from './css_overview.js';\n\ndescribeWithMockConnection('CSSOverviewPanel', () => {\n  let target: SDK.Target.Target;\n\n  beforeEach(async () => {\n    const tabTaget = createTarget({type: SDK.Target.Type.Tab});\n    createTarget({parentTarget: tabTaget, subtype: 'prerender'});\n    target = createTarget({parentTarget: tabTaget});\n  });\n\n  it('reacts to start event and sends completion event', async () => {\n    const controller = new CSSOverview.CSSOverviewController.OverviewController();\n    new CSSOverview.CSSOverviewPanel.CSSOverviewPanel(controller);\n    const overviewCompleted = controller.once(CSSOverview.CSSOverviewController.Events.OverviewCompleted);\n    sinon.stub(target.runtimeAgent(), 'invoke_evaluate').resolves({\n      result: {},\n    } as unknown as Protocol.Runtime.EvaluateResponse);\n    sinon.stub(target.domsnapshotAgent(), 'invoke_captureSnapshot').resolves({\n      documents: [],\n    } as unknown as Protocol.DOMSnapshot.CaptureSnapshotResponse);\n    sinon.stub(target.cssAgent(), 'invoke_getMediaQueries').resolves({\n      medias: [],\n    } as unknown as Protocol.CSS.GetMediaQueriesResponse);\n\n    controller.dispatchEventToListeners(CSSOverview.CSSOverviewController.Events.RequestOverviewStart);\n    await overviewCompleted;\n  });\n});\n"]}