{"version":3,"file":"CreateRecordingView.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/recorder/components/CreateRecordingView.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/inject_checkbox_styles */\n\nimport '../../../ui/legacy/legacy.js';\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as Buttons from '../../../ui/components/buttons/buttons.js';\nimport * as IconButton from '../../../ui/components/icon_button/icon_button.js';\nimport * as Input from '../../../ui/components/input/input.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\nimport * as VisualLogging from '../../../ui/visual_logging/visual_logging.js';\nimport * as Models from '../models/models.js';\nimport * as Actions from '../recorder-actions/recorder-actions.js';\n\nimport createRecordingViewStyles from './createRecordingView.css.js';\n\nconst UIStrings = {\n  /**\n   * @description The label for the input where the user enters a name for the new recording.\n   */\n  recordingName: 'Recording name',\n  /**\n   * @description The button that start the recording with selected options.\n   */\n  startRecording: 'Start recording',\n  /**\n   * @description The title of the page that contains the form for creating a new recording.\n   */\n  createRecording: 'Create a new recording',\n  /**\n   * @description The error message that is shown if the user tries to create a recording without a name.\n   */\n  recordingNameIsRequired: 'Recording name is required',\n  /**\n   * @description The label for the input where the user enters an attribute to be used for selector generation.\n   */\n  selectorAttribute: 'Selector attribute',\n  /**\n   * @description The title for the close button where the user cancels a recording and returns back to previous view.\n   */\n  cancelRecording: 'Cancel recording',\n  /**\n   * @description Label indicating a CSS (Cascading Style Sheets) selector type\n   * (https://developer.mozilla.org/en-US/docs/Web/CSS). The label is used on a\n   * checkbox which users can tick if they are interesting in recording CSS\n   * selectors.\n   */\n  selectorTypeCSS: 'CSS',\n  /**\n   * @description Label indicating a piercing CSS (Cascading Style Sheets)\n   * selector type\n   * (https://pptr.dev/guides/query-selectors#pierce-selectors-pierce). These\n   * type of selectors behave like CSS selectors, but can pierce through\n   * ShadowDOM. The label is used on a checkbox which users can tick if they are\n   * interesting in recording CSS selectors.\n   */\n  selectorTypePierce: 'Pierce',\n  /**\n   * @description Label indicating a ARIA (Accessible Rich Internet\n   * Applications) selector type\n   * (https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA). The\n   * label is used on a checkbox which users can tick if they are interesting in\n   * recording ARIA selectors.\n   */\n  selectorTypeARIA: 'ARIA',\n  /**\n   * @description Label indicating a text selector type. The label is used on a\n   * checkbox which users can tick if they are interesting in recording text\n   * selectors.\n   */\n  selectorTypeText: 'Text',\n  /**\n   * @description Label indicating a XPath (XML Path Language) selector type\n   * (https://en.wikipedia.org/wiki/XPath). The label is used on a checkbox\n   * which users can tick if they are interesting in recording text selectors.\n   */\n  selectorTypeXPath: 'XPath',\n  /**\n   * @description The label for the input that allows specifying selector types\n   * that should be used during the recordering.\n   */\n  selectorTypes: 'Selector types to record',\n  /**\n   * @description The error message that shows up if the user turns off\n   * necessary selectors.\n   */\n  includeNecessarySelectors:\n      'You must choose CSS, Pierce, or XPath as one of your options. Only these selectors are guaranteed to be recorded since ARIA and text selectors may not be unique.',\n  /**\n   * @description Title of a link to the developer documentation.\n   */\n  learnMore: 'Learn more',\n};\nconst str_ = i18n.i18n.registerUIStrings(\n    'panels/recorder/components/CreateRecordingView.ts',\n    UIStrings,\n);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-create-recording-view': CreateRecordingView;\n  }\n  interface HTMLElementEventMap {\n    recordingstarted: RecordingStartedEvent;\n    recordingcancelled: RecordingCancelledEvent;\n  }\n}\n\nexport class RecordingStartedEvent extends Event {\n  static readonly eventName = 'recordingstarted';\n  name: string;\n  selectorAttribute?: string;\n  selectorTypesToRecord: Models.Schema.SelectorType[];\n\n  constructor(\n      name: string,\n      selectorTypesToRecord: Models.Schema.SelectorType[],\n      selectorAttribute?: string,\n  ) {\n    super(RecordingStartedEvent.eventName, {});\n    this.name = name;\n    this.selectorAttribute = selectorAttribute || undefined;\n    this.selectorTypesToRecord = selectorTypesToRecord;\n  }\n}\n\nexport class RecordingCancelledEvent extends Event {\n  static readonly eventName = 'recordingcancelled';\n  constructor() {\n    super(RecordingCancelledEvent.eventName);\n  }\n}\n\nexport interface CreateRecordingViewData {\n  recorderSettings: Models.RecorderSettings.RecorderSettings;\n}\n\nexport class CreateRecordingView extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-create-recording-view`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #defaultRecordingName: string = '';\n  #error?: Error;\n  #recorderSettings?: Models.RecorderSettings.RecorderSettings;\n\n  constructor() {\n    super();\n    this.setAttribute('jslog', `${VisualLogging.section('create-recording-view')}`);\n  }\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [\n      createRecordingViewStyles,\n      Input.textInputStyles,\n      Input.checkboxStyles,\n    ];\n    this.#render();\n    this.#shadow.querySelector('input')?.focus();\n  }\n\n  set data(data: CreateRecordingViewData) {\n    this.#recorderSettings = data.recorderSettings;\n    this.#defaultRecordingName = this.#recorderSettings.defaultTitle;\n  }\n\n  #onKeyDown(event: Event): void {\n    if (this.#error) {\n      this.#error = undefined;\n      this.#render();\n    }\n\n    const keyboardEvent = event as KeyboardEvent;\n    if (keyboardEvent.key === 'Enter') {\n      this.startRecording();\n      event.stopPropagation();\n      event.preventDefault();\n    }\n  }\n\n  startRecording(): void {\n    const nameInput = this.#shadow.querySelector(\n                          '#user-flow-name',\n                          ) as HTMLInputElement;\n    if (!nameInput) {\n      throw new Error('input#user-flow-name not found');\n    }\n    if (!this.#recorderSettings) {\n      throw new Error('settings not set');\n    }\n\n    if (!nameInput.value.trim()) {\n      this.#error = new Error(i18nString(UIStrings.recordingNameIsRequired));\n      this.#render();\n      return;\n    }\n\n    const selectorTypeElements = this.#shadow.querySelectorAll(\n        '.selector-type input[type=checkbox]',\n    );\n    const selectorTypesToRecord: Models.Schema.SelectorType[] = [];\n    for (const selectorType of selectorTypeElements) {\n      const checkbox = selectorType as HTMLInputElement;\n      const checkboxValue = checkbox.value as Models.Schema.SelectorType;\n      if (checkbox.checked) {\n        selectorTypesToRecord.push(checkboxValue);\n      }\n    }\n\n    if (!selectorTypesToRecord.includes(Models.Schema.SelectorType.CSS) &&\n        !selectorTypesToRecord.includes(Models.Schema.SelectorType.XPath) &&\n        !selectorTypesToRecord.includes(Models.Schema.SelectorType.Pierce)) {\n      this.#error = new Error(i18nString(UIStrings.includeNecessarySelectors));\n      this.#render();\n      return;\n    }\n\n    for (const selectorType of Object.values(Models.Schema.SelectorType)) {\n      this.#recorderSettings.setSelectorByType(\n          selectorType,\n          selectorTypesToRecord.includes(selectorType),\n      );\n    }\n\n    const selectorAttributeEl = this.#shadow.querySelector(\n                                    '#selector-attribute',\n                                    ) as HTMLInputElement;\n    const selectorAttribute = selectorAttributeEl.value.trim();\n    this.#recorderSettings.selectorAttribute = selectorAttribute;\n\n    this.dispatchEvent(\n        new RecordingStartedEvent(\n            nameInput.value.trim(),\n            selectorTypesToRecord,\n            selectorAttribute,\n            ),\n    );\n  }\n\n  #dispatchRecordingCancelled(): void {\n    this.dispatchEvent(new RecordingCancelledEvent());\n  }\n\n  #onInputFocus = (): void => {\n    (this.#shadow.querySelector('#user-flow-name') as HTMLInputElement)?.select();\n  };\n\n  #render(): void {\n    const selectorTypeToLabel = new Map([\n      [Models.Schema.SelectorType.ARIA, i18nString(UIStrings.selectorTypeARIA)],\n      [Models.Schema.SelectorType.CSS, i18nString(UIStrings.selectorTypeCSS)],\n      [Models.Schema.SelectorType.Text, i18nString(UIStrings.selectorTypeText)],\n      [\n        Models.Schema.SelectorType.XPath,\n        i18nString(UIStrings.selectorTypeXPath),\n      ],\n      [\n        Models.Schema.SelectorType.Pierce,\n        i18nString(UIStrings.selectorTypePierce),\n      ],\n    ]);\n    // clang-format off\n    LitHtml.render(\n      LitHtml.html`\n        <div class=\"wrapper\">\n          <div class=\"header-wrapper\">\n            <h1>${i18nString(UIStrings.createRecording)}</h1>\n            <${Buttons.Button.Button.litTagName}\n              title=${i18nString(UIStrings.cancelRecording)}\n              jslog=${VisualLogging.close().track({click: true})}\n              .data=${\n                {\n                  variant: Buttons.Button.Variant.ICON,\n                  size: Buttons.Button.Size.SMALL,\n                  iconName: 'cross',\n                } as Buttons.Button.ButtonData\n              }\n              @click=${this.#dispatchRecordingCancelled}\n            ></${Buttons.Button.Button.litTagName}>\n          </div>\n          <label class=\"row-label\" for=\"user-flow-name\">${i18nString(\n            UIStrings.recordingName,\n          )}</label>\n          <input\n            value=${this.#defaultRecordingName}\n            @focus=${this.#onInputFocus}\n            @keydown=${this.#onKeyDown}\n            jslog=${VisualLogging.textField('user-flow-name').track({change: true})}\n            class=\"devtools-text-input\"\n            id=\"user-flow-name\"\n          />\n          <label class=\"row-label\" for=\"selector-attribute\">\n            <span>${i18nString(UIStrings.selectorAttribute)}</span>\n            <x-link\n              class=\"link\" href=\"https://g.co/devtools/recorder#selector\"\n              title=${i18nString(UIStrings.learnMore)}\n              jslog=${VisualLogging.link('recorder-selector-help').track({click: true})}>\n              <${IconButton.Icon.Icon.litTagName} name=\"help\">\n              </${IconButton.Icon.Icon.litTagName}>\n            </x-link>\n          </label>\n          <input\n            value=${this.#recorderSettings?.selectorAttribute}\n            placeholder=\"data-testid\"\n            @keydown=${this.#onKeyDown}\n            jslog=${VisualLogging.textField('selector-attribute').track({change: true})}\n            class=\"devtools-text-input\"\n            id=\"selector-attribute\"\n          />\n          <label class=\"row-label\">\n            <span>${i18nString(UIStrings.selectorTypes)}</span>\n            <x-link\n              class=\"link\" href=\"https://g.co/devtools/recorder#selector\"\n              title=${i18nString(UIStrings.learnMore)}\n              jslog=${VisualLogging.link('recorder-selector-help').track({click: true})}>\n              <${IconButton.Icon.Icon.litTagName} name=\"help\">\n              </${IconButton.Icon.Icon.litTagName}>\n            </x-link>\n          </label>\n          <div class=\"checkbox-container\">\n            ${Object.values(Models.Schema.SelectorType).map(selectorType => {\n              const checked =\n                this.#recorderSettings?.getSelectorByType(selectorType);\n              return LitHtml.html`\n                  <label class=\"checkbox-label selector-type\">\n                    <input\n                      @keydown=${this.#onKeyDown}\n                      .value=${selectorType}\n                      jslog=${VisualLogging.toggle().track({click: true}).context(`selector-${selectorType}`)}\n                      checked=${LitHtml.Directives.ifDefined(\n                        checked ? checked : undefined,\n                      )}\n                      type=\"checkbox\"\n                    />\n                    ${selectorTypeToLabel.get(selectorType) || selectorType}\n                  </label>\n                `;\n            })}\n          </div>\n\n          ${\n            this.#error &&\n            LitHtml.html`\n          <div class=\"error\" role=\"alert\">\n            ${this.#error.message}\n          </div>\n        `\n          }\n        </div>\n        <div class=\"footer\">\n          <div class=\"controls\">\n            <devtools-control-button\n              @click=${this.startRecording}\n              .label=${i18nString(UIStrings.startRecording)}\n              .shape=${'circle'}\n              jslog=${VisualLogging.action(Actions.RecorderActions.StartRecording).track({click: true})}\n              title=${Models.Tooltip.getTooltipForActions(\n                i18nString(UIStrings.startRecording),\n                Actions.RecorderActions.StartRecording,\n              )}\n            ></devtools-control-button>\n          </div>\n        </div>\n      `,\n      this.#shadow,\n      { host: this },\n    );\n    // clang-format on\n  }\n}\n\ncustomElements.define(\n    'devtools-create-recording-view',\n    CreateRecordingView,\n);\n"]}