{"version":3,"file":"CreateRecordingView.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/recorder/components/CreateRecordingView.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {renderElementIntoDOM} from '../../../testing/DOMHelpers.js';\nimport {\n  describeWithEnvironment,\n  setupActionRegistry,\n} from '../../../testing/EnvironmentHelpers.js';\nimport * as Models from '../models/models.js';\n\nimport * as Components from './components.js';\n\ndescribeWithEnvironment('CreateRecordingView', () => {\n  setupActionRegistry();\n\n  function createView() {\n    const view = new Components.CreateRecordingView.CreateRecordingView();\n    view.data = {\n      recorderSettings: new Models.RecorderSettings.RecorderSettings(),\n    };\n    renderElementIntoDOM(view, {\n      allowMultipleChildren: true,\n    });\n    return view;\n  }\n\n  it('should render create recording view', async () => {\n    const view = createView();\n    const input = view.shadowRoot?.querySelector(\n                      '#user-flow-name',\n                      ) as HTMLInputElement;\n    assert.ok(input);\n    const button = view.shadowRoot?.querySelector(\n                       'devtools-control-button',\n                       ) as Components.ControlButton.ControlButton;\n    assert.ok(button);\n    const onceClicked = new Promise<Components.CreateRecordingView.RecordingStartedEvent>(\n        resolve => {\n          view.addEventListener('recordingstarted', resolve, {once: true});\n        },\n    );\n    input.value = 'Test';\n    button.dispatchEvent(new Event('click'));\n    const event = await onceClicked;\n    assert.deepEqual(event.name, 'Test');\n  });\n\n  it('should dispatch recordingcancelled event on the close button click', async () => {\n    const view = createView();\n    const onceClicked = new Promise<Components.CreateRecordingView.RecordingCancelledEvent>(\n        resolve => {\n          view.addEventListener('recordingcancelled', resolve, {once: true});\n        },\n    );\n    const closeButton = view.shadowRoot?.querySelector(\n                            '[title=\"Cancel recording\"]',\n                            ) as HTMLButtonElement;\n\n    closeButton.dispatchEvent(new Event('click'));\n    const event = await onceClicked;\n    assert.instanceOf(\n        event,\n        Components.CreateRecordingView.RecordingCancelledEvent,\n    );\n  });\n\n  it('should generate a default name', async () => {\n    const view = createView();\n    const input = view.shadowRoot?.querySelector(\n                      '#user-flow-name',\n                      ) as HTMLInputElement;\n    assert.isAtLeast(input.value.length, 'Recording'.length);\n  });\n\n  it('should remember the most recent selector attribute', async () => {\n    let view = createView();\n    let input = view.shadowRoot?.querySelector(\n                    '#selector-attribute',\n                    ) as HTMLInputElement;\n    assert.ok(input);\n    const button = view.shadowRoot?.querySelector(\n                       'devtools-control-button',\n                       ) as Components.ControlButton.ControlButton;\n    assert.ok(button);\n    const onceClicked = new Promise<Components.CreateRecordingView.RecordingStartedEvent>(\n        resolve => {\n          view.addEventListener('recordingstarted', resolve, {once: true});\n        },\n    );\n    input.value = 'data-custom-attribute';\n    button.dispatchEvent(new Event('click'));\n    await onceClicked;\n\n    view = createView();\n    input = view.shadowRoot?.querySelector(\n                '#selector-attribute',\n                ) as HTMLInputElement;\n    assert.ok(input);\n    assert.strictEqual(input.value, 'data-custom-attribute');\n  });\n\n  it('should remember recorded selector types', async () => {\n    let view = createView();\n\n    let checkboxes = view.shadowRoot?.querySelectorAll(\n                         '.selector-type input[type=checkbox]',\n                         ) as NodeListOf<HTMLInputElement>;\n    assert.strictEqual(checkboxes.length, 5);\n    const button = view.shadowRoot?.querySelector(\n                       'devtools-control-button',\n                       ) as Components.ControlButton.ControlButton;\n    assert.ok(button);\n    const onceClicked = new Promise<Components.CreateRecordingView.RecordingStartedEvent>(\n        resolve => {\n          view.addEventListener('recordingstarted', resolve, {once: true});\n        },\n    );\n    checkboxes[0].checked = false;\n    button.dispatchEvent(new Event('click'));\n    const event = await onceClicked;\n\n    assert.deepStrictEqual(event.selectorTypesToRecord, [\n      'aria',\n      'text',\n      'xpath',\n      'pierce',\n    ]);\n\n    view = createView();\n    checkboxes = view.shadowRoot?.querySelectorAll(\n                     '.selector-type input[type=checkbox]',\n                     ) as NodeListOf<HTMLInputElement>;\n    assert.strictEqual(checkboxes.length, 5);\n    assert.isFalse(checkboxes[0].checked);\n    assert.isTrue(checkboxes[1].checked);\n    assert.isTrue(checkboxes[2].checked);\n    assert.isTrue(checkboxes[3].checked);\n    assert.isTrue(checkboxes[4].checked);\n  });\n});\n"]}