{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/recorder/components/util.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nexport const mod = (a: number, n: number): number => {\n  return ((a % n) + n) % n;\n};\n\nexport function assert<T>(\n    predicate: T,\n    message = 'Assertion failed!',\n    ): asserts predicate {\n  if (!predicate) {\n    throw new Error(message);\n  }\n}\n\nexport type Keys<T> = T extends T ? keyof T : never;\n\nexport type RequiredKeys<T> = {\n  [K in keyof T] -?: {} extends Pick<T, K>? never : K;\n}[keyof T];\n\nexport type OptionalKeys<T> = {\n  [K in keyof T] -?: {} extends Pick<T, K>? K : never;\n}[keyof T];\n\nexport type DeepImmutable<T> = {\n  readonly[K in keyof T]: DeepImmutable<T[K]>;\n};\n\nexport type DeepMutable<T> = {\n  -readonly[K in keyof T]: DeepMutable<T[K]>;\n};\n\nexport type DeepPartial<T> = {\n  [K in keyof T]?: DeepPartial<Exclude<T[K], undefined>>;\n};\n\nexport type Mutable<T> = {\n  -readonly[K in keyof T]: T[K];\n};\n\nexport const deepFreeze = <T extends object>(object: T): DeepImmutable<T> => {\n  for (const name of Reflect.ownKeys(object)) {\n    const value = object[name as keyof T];\n    if ((value && typeof value === 'object') || typeof value === 'function') {\n      deepFreeze(value);\n    }\n  }\n  return Object.freeze(object);\n};\n\nexport class InsertAssignment<T> {\n  value: T;\n  constructor(value: T) {\n    this.value = value;\n  }\n}\n\nexport class ArrayAssignments<T> {\n  value: {[n: number]: T};\n  constructor(value: {[n: number]: T}) {\n    this.value = value;\n  }\n}\n\nexport type Assignments<T> = T extends Readonly<Array<infer R>>?\n    R[]|ArrayAssignments<Assignments<R>|InsertAssignment<R>>:\n    {[K in keyof T]: Assignments<T[K]>};\n\nexport const immutableDeepAssign = <T>(\n    object: DeepImmutable<T>,\n    assignments: DeepImmutable<DeepPartial<Assignments<T>>>,\n    ): DeepImmutable<T> => {\n  if (assignments instanceof ArrayAssignments) {\n    assert(Array.isArray(object), `Expected an array. Got ${typeof object}.`);\n    const updatedObject = [...object] as Mutable<typeof object>;\n    const keys = Object.keys(assignments.value)\n                     .sort(\n                         (a, b) => Number(b) - Number(a),\n                         ) as (keyof typeof updatedObject)[];\n    for (const key of keys) {\n      const update = assignments.value[Number(key)];\n      if (update === undefined) {\n        updatedObject.splice(Number(key), 1);\n      } else if (update instanceof InsertAssignment) {\n        updatedObject.splice(Number(key), 0, update.value);\n      } else {\n        updatedObject[Number(key)] = immutableDeepAssign(\n            updatedObject[key],\n            update,\n        );\n      }\n    }\n    return Object.freeze(updatedObject);\n  }\n  if (typeof assignments === 'object' && !Array.isArray(assignments)) {\n    assert(!Array.isArray(object), 'Expected an object. Got an array.');\n    const updatedObject = {...object} as Mutable<typeof object>;\n    const keys = Object.keys(assignments) as (keyof typeof assignments&keyof typeof updatedObject)[];\n    for (const key of keys) {\n      const update = assignments[key];\n      if (update === undefined) {\n        delete updatedObject[key];\n      } else {\n        updatedObject[key] = immutableDeepAssign(\n            updatedObject[key],\n            update as typeof updatedObject[typeof key],\n        );\n      }\n    }\n    return Object.freeze(updatedObject);\n  }\n  return assignments as DeepImmutable<T>;\n};\n"]}