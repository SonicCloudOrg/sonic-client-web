{"version":3,"file":"RecorderSettings.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/recorder/models/RecorderSettings.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,MAAM,MAAM,gCAAgC,CAAC;AACzD,OAAO,EACL,uBAAuB,GACxB,MAAM,wCAAwC,CAAC;AAEhD,OAAO,KAAK,MAAM,MAAM,aAAa,CAAC;AAEtC,uBAAuB,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAC/C,IAAI,gBAA0D,CAAC;IAE/D,UAAU,CAAC,GAAG,EAAE;QACd,gBAAgB,GAAG,IAAI,MAAM,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,CAAC;IACpE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;QAClD,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,iBAAiB,KAAK,EAAE,CAAC,CAAC;QACzD,MAAM,CAAC,MAAM,CACT,gBAAgB,CAAC,KAAK,oEAAqD,CAC9E,CAAC;QACF,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACvD,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE;QACxC,MAAM,GAAG,GAAG,IAAI,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACzC,MAAM,KAAK,GAAG,KAAK,CAAC,aAAa,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;QAEjD,MAAM,CAAC,WAAW,CACd,gBAAgB,CAAC,YAAY,EAC7B,aAAa,GAAG,CAAC,kBAAkB,EAAE,OAAO,GAAG,CAAC,kBAAkB,EAAE,EAAE,CACzE,CAAC;QACF,KAAK,CAAC,OAAO,EAAE,CAAC;IAClB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;QAC/C,MAAM,KAAK,GAAG,iBAAiB,CAAC;QAChC,gBAAgB,CAAC,iBAAiB,GAAG,KAAK,CAAC;QAC3C,MAAM,CAAC,WAAW,CACd,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,cAAc,CAAC,6BAA6B,CAAC,CAAC,GAAG,EAAE,EACvF,KAAK,CACR,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oCAAoC,EAAE,GAAG,EAAE;QAC5C,gBAAgB,CAAC,KAAK,iFAA0D,CAAC;QACjF,MAAM,CAAC,WAAW,CACd,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,cAAc,CAAC,6BAA6B,CAAC,CAAC,GAAG,EAAE,iFAE1F,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;QAC1C,MAAM,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC;QACpD,gBAAgB,CAAC,iBAAiB,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QACxD,MAAM,CAAC,OAAO,CACV,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,cAAc,CAAC,YAAY,YAAY,mBAAmB,CAAC,CAAC,GAAG,EAAE,CACxG,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\nimport {\n  describeWithEnvironment,\n} from '../../../testing/EnvironmentHelpers.js';\n\nimport * as Models from './models.js';\n\ndescribeWithEnvironment('RecorderSettings', () => {\n  let recorderSettings: Models.RecorderSettings.RecorderSettings;\n\n  beforeEach(() => {\n    recorderSettings = new Models.RecorderSettings.RecorderSettings();\n  });\n\n  it('should have correct default values', async () => {\n    assert.isTrue(recorderSettings.selectorAttribute === '');\n    assert.isTrue(\n        recorderSettings.speed === Models.RecordingPlayer.PlayRecordingSpeed.Normal,\n    );\n    Object.values(Models.Schema.SelectorType).forEach(type => {\n      assert.isTrue(recorderSettings.getSelectorByType(type));\n    });\n  });\n\n  it('should get default Title', async () => {\n    const now = new Date('2022-12-01 15:30');\n    const clock = sinon.useFakeTimers(now.getTime());\n\n    assert.strictEqual(\n        recorderSettings.defaultTitle,\n        `Recording ${now.toLocaleDateString()} at ${now.toLocaleTimeString()}`,\n    );\n    clock.restore();\n  });\n\n  it('should save selector attribute change', () => {\n    const value = 'custom-selector';\n    recorderSettings.selectorAttribute = value;\n    assert.strictEqual(\n        Common.Settings.Settings.instance().settingForTest('recorder-selector-attribute').get(),\n        value,\n    );\n  });\n\n  it('should save speed attribute change', () => {\n    recorderSettings.speed = Models.RecordingPlayer.PlayRecordingSpeed.ExtremelySlow;\n    assert.strictEqual(\n        Common.Settings.Settings.instance().settingForTest('recorder-panel-replay-speed').get(),\n        Models.RecordingPlayer.PlayRecordingSpeed.ExtremelySlow,\n    );\n  });\n\n  it('should save selector type change', () => {\n    const selectorType = Models.Schema.SelectorType.CSS;\n    recorderSettings.setSelectorByType(selectorType, false);\n    assert.isFalse(\n        Common.Settings.Settings.instance().settingForTest(`recorder-${selectorType}-selector-enabled`).get(),\n    );\n  });\n});\n"]}