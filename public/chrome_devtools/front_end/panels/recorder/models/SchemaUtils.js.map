{"version":3,"file":"SchemaUtils.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/recorder/models/SchemaUtils.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EAIL,QAAQ,GACT,MAAM,aAAa,CAAC;AACrB,OAAO,KAAK,eAAe,MAAM,2DAA2D,CAAC;AAE7F,MAAM,UAAU,kBAAkB,CAAC,QAGlC;IACC,OAAO;QACL,IAAI,EAAE,QAAQ,CAAC,WAAW;QAC1B,KAAK,EAAE,QAAQ,CAAC,WAAW;QAC3B,MAAM,EAAE,QAAQ,CAAC,YAAY;QAC7B,iCAAiC;QACjC,iBAAiB,EAAE,CAAC;QACpB,QAAQ,EAAE,KAAK;QACf,QAAQ,EAAE,KAAK;QACf,WAAW,EAAE,KAAK;KACnB,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,kCAAkC,CAAC,UAIlD;IACC,OAAO,EAAC,IAAI,EAAE,QAAQ,CAAC,wBAAwB,EAAE,GAAG,UAAU,EAAC,CAAC;AAClE,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,KAAW,EAAE,KAAW;IACxD,IAAI,WAAW,IAAI,KAAK,IAAI,WAAW,IAAI,KAAK,EAAE,CAAC;QACjD,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IAC7E,CAAC;IACD,OAAO,CAAC,CAAC,WAAW,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,WAAW,IAAI,KAAK,CAAC,CAAC;AAC5D,CAAC;AAED,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,CAAC;AAC5B,MAAM,CAAC,MAAM,UAAU,GAAG,KAAK,CAAC;AAChC,MAAM,CAAC,MAAM,KAAK,GAAG,eAAe,CAAC,KAAK,CAAC;AAC3C,MAAM,CAAC,MAAM,SAAS,GAAG,eAAe,CAAC,SAAS,CAAC","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {\n  type Step,\n  type SetViewportStep,\n  type EmulateNetworkConditionsStep,\n  StepType,\n} from './Schema.js';\nimport * as PuppeteerReplay from '../../../third_party/puppeteer-replay/puppeteer-replay.js';\n\nexport function createViewportStep(viewport: {\n  clientWidth: number,\n  clientHeight: number,\n}): SetViewportStep {\n  return {\n    type: StepType.SetViewport,\n    width: viewport.clientWidth,\n    height: viewport.clientHeight,\n    // TODO read real parameters here\n    deviceScaleFactor: 1,\n    isMobile: false,\n    hasTouch: false,\n    isLandscape: false,\n  };\n}\n\nexport function createEmulateNetworkConditionsStep(conditions: {\n  download: number,\n  upload: number,\n  latency: number,\n}): EmulateNetworkConditionsStep {\n  return {type: StepType.EmulateNetworkConditions, ...conditions};\n}\n\nexport function areSelectorsEqual(stepA: Step, stepB: Step): boolean {\n  if ('selectors' in stepA && 'selectors' in stepB) {\n    return JSON.stringify(stepA.selectors) === JSON.stringify(stepB.selectors);\n  }\n  return !('selectors' in stepA) && !('selectors' in stepB);\n}\n\nexport const minTimeout = 1;\nexport const maxTimeout = 30000;\nexport const parse = PuppeteerReplay.parse;\nexport const parseStep = PuppeteerReplay.parseStep;\n"]}