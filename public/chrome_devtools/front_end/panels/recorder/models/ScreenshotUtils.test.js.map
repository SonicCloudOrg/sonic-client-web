{"version":3,"file":"ScreenshotUtils.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/recorder/models/ScreenshotUtils.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,MAAM,MAAM,aAAa,CAAC;AAEtC,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,KAAK,UAAU,aAAa,CACxB,KAAa,EACb,MAAc;QAEhB,MAAM,GAAG,GAAG,IAAI,KAAK,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QACrC,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE;YACpC,GAAG,CAAC,MAAM,GAAG,OAAO,CAAC;QACvB,CAAC,CAAC,CAAC;QACH,GAAG,CAAC,GAAG,GAAG,0CAA0C,KAAK,IACrD,MAAM,uFAAuF,CAAC;QAClG,MAAM,OAAO,CAAC;QACd,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAChD,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;QACrB,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC;QACvB,MAAM,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACxC,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;QAC/C,CAAC;QACD,MAAM,MAAM,GAAG,MAAM,iBAAiB,CAAC,GAAG,EAAE;YAC1C,YAAY,EAAE,MAAM;YACpB,WAAW,EAAE,KAAK;SACnB,CAAC,CAAC;QACH,OAAO,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAEhC,OAAO,MAAM,CAAC,SAAS,CAAC,WAAW,CAAwC,CAAC;IAC9E,CAAC;IAED,KAAK,UAAU,uBAAuB,CAClC,UAA+C;QAEjD,MAAM,GAAG,GAAG,IAAI,KAAK,EAAE,CAAC;QACxB,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE;YACpC,GAAG,CAAC,MAAM,GAAG,OAAO,CAAC;QACvB,CAAC,CAAC,CAAC;QACH,GAAG,CAAC,GAAG,GAAG,UAAU,CAAC;QACrB,MAAM,OAAO,CAAC;QACd,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;IACjC,CAAC;IAED,EAAE,CAAC,2DAA2D,EAAE,KAAK,IAAI,EAAE;QACzE,MAAM,EAAC,gBAAgB,EAAC,GAAG,MAAM,CAAC,eAAe,CAAC;QAClD,MAAM,CAAC,eAAe,CAClB,MAAM,uBAAuB,CACzB,MAAM,gBAAgB,CAAC,MAAM,aAAa,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CACpD,EACL,CAAC,GAAG,EAAE,GAAG,CAAC,CACb,CAAC;QACF,MAAM,CAAC,eAAe,CAClB,MAAM,uBAAuB,CACzB,MAAM,gBAAgB,CAAC,MAAM,aAAa,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CACpD,EACL,CAAC,GAAG,EAAE,EAAE,CAAC,CACZ,CAAC;QACF,MAAM,CAAC,eAAe,CAClB,MAAM,uBAAuB,CACzB,MAAM,gBAAgB,CAAC,MAAM,aAAa,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAClD,EACL,CAAC,GAAG,EAAE,GAAG,CAAC,CACb,CAAC;QACF,MAAM,CAAC,eAAe,CAClB,MAAM,uBAAuB,CACzB,MAAM,gBAAgB,CAAC,MAAM,aAAa,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CACnD,EACL,CAAC,GAAG,EAAE,GAAG,CAAC,CACb,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Models from './models.js';\n\ndescribe('ScreenshotUtils', () => {\n  async function generateImage(\n      width: number,\n      height: number,\n      ): Promise<Models.ScreenshotStorage.Screenshot> {\n    const img = new Image(width, height);\n    const promise = new Promise(resolve => {\n      img.onload = resolve;\n    });\n    img.src = `data:image/svg+xml,%3Csvg viewBox='0 0 ${width} ${\n        height}' xmlns='http://www.w3.org/2000/svg'%3E%3Ccircle cx='50' cy='50' r='50'/%3E%3C/svg%3E`;\n    await promise;\n    const canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    const context = canvas.getContext('2d');\n    if (!context) {\n      throw new Error('Could not create context.');\n    }\n    const bitmap = await createImageBitmap(img, {\n      resizeHeight: height,\n      resizeWidth: width,\n    });\n    context.drawImage(bitmap, 0, 0);\n\n    return canvas.toDataURL('image/png') as Models.ScreenshotStorage.Screenshot;\n  }\n\n  async function getScreenshotDimensions(\n      screenshot: Models.ScreenshotStorage.Screenshot,\n      ): Promise<number[]> {\n    const tmp = new Image();\n    const promise = new Promise(resolve => {\n      tmp.onload = resolve;\n    });\n    tmp.src = screenshot;\n    await promise;\n    return [tmp.width, tmp.height];\n  }\n\n  it('can resize screenshots to be 160px wide and <= 240px high', async () => {\n    const {resizeScreenshot} = Models.ScreenshotUtils;\n    assert.deepStrictEqual(\n        await getScreenshotDimensions(\n            await resizeScreenshot(await generateImage(400, 800)),\n            ),\n        [160, 240],\n    );\n    assert.deepStrictEqual(\n        await getScreenshotDimensions(\n            await resizeScreenshot(await generateImage(800, 400)),\n            ),\n        [160, 80],\n    );\n    assert.deepStrictEqual(\n        await getScreenshotDimensions(\n            await resizeScreenshot(await generateImage(80, 80)),\n            ),\n        [160, 160],\n    );\n    assert.deepStrictEqual(\n        await getScreenshotDimensions(\n            await resizeScreenshot(await generateImage(80, 320)),\n            ),\n        [160, 240],\n    );\n  });\n});\n"]}