{"version":3,"file":"RecorderSettings.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/recorder/models/RecorderSettings.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\nimport * as i18n from '../../../core/i18n/i18n.js';\n\nimport {ConverterIds} from './ConverterIds.js';\nimport {PlayRecordingSpeed} from './RecordingPlayer.js';\nimport {SelectorType} from './Schema.js';\n\nconst UIStrings = {\n  /**\n   * @description This string is used to generate the default name for the create recording form in the Recording panel.\n   * The format is similar to the one used by MacOS to generate names for screenshots. Both {DATE} and {TIME} are localized\n   * using the current locale.\n   *\n   * @example {2022-08-04} DATE\n   * @example {10:32:48} TIME\n   */\n  defaultRecordingName: 'Recording {DATE} at {TIME}',\n};\n\nconst str_ = i18n.i18n.registerUIStrings(\n    'panels/recorder/models/RecorderSettings.ts',\n    UIStrings,\n);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class RecorderSettings {\n  #selectorAttribute = Common.Settings.Settings.instance().createSetting(\n      'recorder-selector-attribute',\n      '',\n  );\n  #speed = Common.Settings.Settings.instance().createSetting(\n      'recorder-panel-replay-speed',\n      PlayRecordingSpeed.Normal,\n  );\n  #replayExtension = Common.Settings.Settings.instance().createSetting(\n      'recorder-panel-replay-extension',\n      '',\n  );\n  #selectorTypes = new Map<SelectorType, Common.Settings.Setting<boolean>>();\n  #preferredCopyFormat = Common.Settings.Settings.instance().createSetting<string>(\n      'recorder-preferred-copy-format',\n      ConverterIds.JSON,\n  );\n\n  constructor() {\n    for (const selectorType of Object.values(SelectorType)) {\n      this.#selectorTypes.set(\n          selectorType,\n          Common.Settings.Settings.instance().createSetting(\n              `recorder-${selectorType}-selector-enabled`,\n              true,\n              ),\n      );\n    }\n  }\n\n  get selectorAttribute(): string {\n    return this.#selectorAttribute.get();\n  }\n\n  set selectorAttribute(value: string) {\n    this.#selectorAttribute.set(value);\n  }\n\n  get speed(): PlayRecordingSpeed {\n    return this.#speed.get();\n  }\n\n  set speed(speed: PlayRecordingSpeed) {\n    this.#speed.set(speed);\n  }\n\n  get replayExtension(): string {\n    return this.#replayExtension.get();\n  }\n\n  set replayExtension(replayExtension: string) {\n    this.#replayExtension.set(replayExtension);\n  }\n\n  get defaultTitle(): Common.UIString.LocalizedString {\n    const now = new Date();\n\n    return i18nString(UIStrings.defaultRecordingName, {\n      DATE: now.toLocaleDateString(),\n      TIME: now.toLocaleTimeString(),\n    });\n  }\n\n  get defaultSelectors(): SelectorType[] {\n    return Object.values(SelectorType)\n        .filter(\n            type => this.getSelectorByType(type),\n        );\n  }\n\n  getSelectorByType(type: SelectorType): boolean|undefined {\n    return this.#selectorTypes.get(type)?.get();\n  }\n\n  setSelectorByType(type: SelectorType, value: boolean): void {\n    this.#selectorTypes.get(type)?.set(value);\n  }\n\n  get preferredCopyFormat(): string {\n    return this.#preferredCopyFormat.get();\n  }\n\n  set preferredCopyFormat(value: string) {\n    this.#preferredCopyFormat.set(value);\n  }\n}\n"]}