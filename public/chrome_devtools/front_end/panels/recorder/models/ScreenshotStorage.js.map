{"version":3,"file":"ScreenshotStorage.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/recorder/models/ScreenshotStorage.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\n\nexport type Screenshot = string&{_brand: 'ImageData'};\n\nexport interface ScreenshotMetaData {\n  recordingName: string;\n  index: number;\n  data: Screenshot;\n}\n\nlet instance: ScreenshotStorage|null = null;\n\n// Default size of storage\nconst DEFAULT_MAX_STORAGE_SIZE = 50 * 1024 * 1024;\n\n/**\n * This class stores the screenshots taken for a specific recording\n * in a settings object. The total storage size is limited to 50 MB\n * by default and the least recently accessed screenshots will be\n * deleted first.\n */\nexport class ScreenshotStorage {\n  #screenshotSettings: Common.Settings.Setting<ScreenshotMetaData[]>;\n  #screenshots: Map<string, ScreenshotMetaData>;\n  #maxStorageSize: number;\n\n  constructor(maxStorageSize = DEFAULT_MAX_STORAGE_SIZE) {\n    this.#screenshotSettings = Common.Settings.Settings.instance().createSetting(\n        'recorder-screenshots',\n        [],\n    );\n    this.#screenshots = this.#loadFromSettings();\n    this.#maxStorageSize = maxStorageSize;\n  }\n\n  clear(): void {\n    this.#screenshotSettings.set([]);\n    this.#screenshots = new Map();\n  }\n\n  getScreenshotForSection(\n      recordingName: string,\n      index: number,\n      ): Screenshot|null {\n    const screenshot = this.#screenshots.get(\n        this.#calculateKey(recordingName, index),\n    );\n    if (!screenshot) {\n      return null;\n    }\n\n    this.#syncWithSettings(screenshot);\n    return screenshot.data;\n  }\n\n  storeScreenshotForSection(\n      recordingName: string,\n      index: number,\n      data: Screenshot,\n      ): void {\n    const screenshot = {recordingName, index, data};\n    this.#screenshots.set(this.#calculateKey(recordingName, index), screenshot);\n    this.#syncWithSettings(screenshot);\n  }\n\n  deleteScreenshotsForRecording(recordingName: string): void {\n    for (const [key, entry] of this.#screenshots) {\n      if (entry.recordingName === recordingName) {\n        this.#screenshots.delete(key);\n      }\n    }\n\n    this.#syncWithSettings();\n  }\n\n  #calculateKey(recordingName: string, index: number): string {\n    return `${recordingName}:${index}`;\n  }\n\n  #loadFromSettings(): Map<string, ScreenshotMetaData> {\n    const screenshots = new Map<string, ScreenshotMetaData>();\n    const data = this.#screenshotSettings.get();\n    for (const item of data) {\n      screenshots.set(this.#calculateKey(item.recordingName, item.index), item);\n    }\n\n    return screenshots;\n  }\n\n  #syncWithSettings(modifiedScreenshot?: ScreenshotMetaData): void {\n    if (modifiedScreenshot) {\n      const key = this.#calculateKey(\n          modifiedScreenshot.recordingName,\n          modifiedScreenshot.index,\n      );\n\n      // Make sure that the modified screenshot is moved to the end of the map\n      // as the JS Map remembers the original insertion order of the keys.\n      this.#screenshots.delete(key);\n      this.#screenshots.set(key, modifiedScreenshot);\n    }\n\n    const screenshots = [];\n    let currentStorageSize = 0;\n\n    // Take screenshots from the end of the list until the size constraint is met.\n    for (const [key, screenshot] of Array\n             .from(\n                 this.#screenshots.entries(),\n                 )\n             .reverse()) {\n      if (currentStorageSize < this.#maxStorageSize) {\n        currentStorageSize += screenshot.data.length;\n        screenshots.push(screenshot);\n      } else {\n        // Delete all screenshots that exceed the storage limit.\n        this.#screenshots.delete(key);\n      }\n    }\n\n    this.#screenshotSettings.set(screenshots.reverse());\n  }\n\n  static instance(\n      opts: {\n        forceNew?: boolean|null,\n        maxStorageSize?: number,\n      } = {forceNew: null, maxStorageSize: DEFAULT_MAX_STORAGE_SIZE},\n      ): ScreenshotStorage {\n    const {forceNew, maxStorageSize} = opts;\n    if (!instance || forceNew) {\n      instance = new ScreenshotStorage(maxStorageSize);\n    }\n    return instance;\n  }\n}\n"]}