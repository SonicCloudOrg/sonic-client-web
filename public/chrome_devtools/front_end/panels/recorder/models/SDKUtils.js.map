{"version":3,"file":"SDKUtils.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/recorder/models/SDKUtils.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Protocol from '../../../generated/protocol.js';\nimport * as SDK from '../../../core/sdk/sdk.js';\nimport {type Target, type FrameSelector} from './Schema.js';\n\ninterface Context {\n  target: Target;\n  frame: FrameSelector;\n}\n\nexport function getTargetName(target: SDK.Target.Target): string {\n  if (SDK.TargetManager.TargetManager.instance().primaryPageTarget() === target) {\n    return 'main';\n  }\n  return target.id() === 'main' ? 'main' : target.inspectedURL();\n}\n\n/**\n * Returns the context for an SDK target and frame.\n * The frame is identified by the path in the resource tree model.\n * And the target is identified by `getTargetName`.\n */\nexport function getTargetFrameContext(\n    target: SDK.Target.Target,\n    frame: SDK.ResourceTreeModel.ResourceTreeFrame,\n    ): Context {\n  const path = [];\n  while (frame) {\n    const parentFrame = frame.sameTargetParentFrame();\n    if (!parentFrame) {\n      break;\n    }\n    const childFrames = parentFrame.childFrames;\n    const index = childFrames.indexOf(frame);\n    path.unshift(index);\n    frame = parentFrame;\n  }\n\n  return {target: getTargetName(target), frame: path};\n}\n\nexport async function evaluateInAllFrames(\n    worldName: string,\n    target: SDK.Target.Target,\n    expression: string,\n    ): Promise<void> {\n  const runtimeModel = target.model(\n                           SDK.RuntimeModel.RuntimeModel,\n                           ) as SDK.RuntimeModel.RuntimeModel;\n  const executionContexts = runtimeModel.executionContexts();\n\n  const resourceTreeModel = target.model(\n                                SDK.ResourceTreeModel.ResourceTreeModel,\n                                ) as SDK.ResourceTreeModel.ResourceTreeModel;\n  for (const frame of resourceTreeModel.frames()) {\n    const executionContext = executionContexts.find(\n        context => context.frameId === frame.id,\n    );\n    if (!executionContext) {\n      continue;\n    }\n\n    // Note: it would return previously created world if it exists for the frame.\n    const {executionContextId} = await target.pageAgent().invoke_createIsolatedWorld({frameId: frame.id, worldName});\n    await target.runtimeAgent().invoke_evaluate({\n      expression,\n      includeCommandLineAPI: true,\n      contextId: executionContextId,\n    });\n  }\n}\n\nexport function findTargetByExecutionContext(\n    targets: Iterable<SDK.Target.Target>,\n    executionContextId: number,\n    ): SDK.Target.Target|undefined {\n  for (const target of targets) {\n    const runtimeModel = target.model(SDK.RuntimeModel.RuntimeModel);\n    if (!runtimeModel) {\n      continue;\n    }\n    for (const context of runtimeModel.executionContexts()) {\n      if (context.id === executionContextId) {\n        return target;\n      }\n    }\n  }\n  return;\n}\n\nexport function findFrameIdByExecutionContext(\n    targets: Iterable<SDK.Target.Target>,\n    executionContextId: number,\n    ): Protocol.Page.FrameId|undefined {\n  for (const target of targets) {\n    const runtimeModel = target.model(SDK.RuntimeModel.RuntimeModel);\n    if (!runtimeModel) {\n      continue;\n    }\n    for (const context of runtimeModel.executionContexts()) {\n      if (context.id === executionContextId && context.frameId !== undefined) {\n        return context.frameId;\n      }\n    }\n  }\n  return;\n}\n\nexport const isFrameTargetInfo = (\n    target: Protocol.Target.TargetInfo,\n    ): boolean => {\n  return target.type === 'page' || target.type === 'iframe';\n};\n"]}