{"version":3,"file":"RecordingPlayer.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/recorder/models/RecordingPlayer.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {\n  createCustomStep,\n  installMocksForRecordingPlayer,\n  installMocksForTargetManager,\n} from '../testing/RecorderHelpers.js';\n\nimport * as Models from './models.js';\n\ndescribe('RecordingPlayer', () => {\n  let recordingPlayer: Models.RecordingPlayer.RecordingPlayer;\n\n  beforeEach(() => {\n    installMocksForTargetManager();\n    installMocksForRecordingPlayer();\n  });\n\n  afterEach(() => {\n    recordingPlayer.disposeForTesting();\n  });\n\n  it('should emit `Step` event before executing in every step', async () => {\n    recordingPlayer = new Models.RecordingPlayer.RecordingPlayer(\n        {\n          title: 'test',\n          steps: [\n            createCustomStep(),\n            createCustomStep(),\n            createCustomStep(),\n          ],\n        },\n        {\n          speed: Models.RecordingPlayer.PlayRecordingSpeed.Normal,\n          breakpointIndexes: new Set(),\n        },\n    );\n    const stepEventHandlerStub = sinon.stub().callsFake(async ({data: {resolve}}) => {\n      resolve();\n    });\n    recordingPlayer.addEventListener(\n        Models.RecordingPlayer.Events.Step,\n        stepEventHandlerStub,\n    );\n\n    await recordingPlayer.play();\n\n    assert.isTrue(stepEventHandlerStub.getCalls().length === 3);\n  });\n\n  describe('Step by step execution', () => {\n    it('should stop execution before executing a step that has a breakpoint', async () => {\n      recordingPlayer = new Models.RecordingPlayer.RecordingPlayer(\n          {\n            title: 'test',\n            steps: [\n              createCustomStep(),\n              createCustomStep(),\n              createCustomStep(),\n            ],\n          },\n          {\n            speed: Models.RecordingPlayer.PlayRecordingSpeed.Normal,\n            breakpointIndexes: new Set([1]),\n          },\n      );\n      const stepEventHandlerStub = sinon.stub().callsFake(async ({data: {resolve}}) => {\n        resolve();\n      });\n      const stopEventPromise = new Promise<void>(resolve => {\n        recordingPlayer.addEventListener(\n            Models.RecordingPlayer.Events.Stop,\n            () => {\n              resolve();\n            },\n        );\n      });\n      recordingPlayer.addEventListener(\n          Models.RecordingPlayer.Events.Step,\n          stepEventHandlerStub,\n      );\n\n      void recordingPlayer.play();\n      await stopEventPromise;\n\n      assert.strictEqual(stepEventHandlerStub.getCalls().length, 2);\n    });\n\n    it('should `stepOver` execute only the next step after breakpoint and stop', async () => {\n      recordingPlayer = new Models.RecordingPlayer.RecordingPlayer(\n          {\n            title: 'test',\n            steps: [\n              createCustomStep(),\n              createCustomStep(),\n              createCustomStep(),\n              createCustomStep(),\n            ],\n          },\n          {\n            speed: Models.RecordingPlayer.PlayRecordingSpeed.Normal,\n            breakpointIndexes: new Set([1]),\n          },\n      );\n      const stepEventHandlerStub = sinon.stub().callsFake(async ({data: {resolve}}) => {\n        resolve();\n      });\n      let stopEventPromise = new Promise<void>(resolve => {\n        recordingPlayer.addEventListener(\n            Models.RecordingPlayer.Events.Stop,\n            () => {\n              resolve();\n              stopEventPromise = new Promise<void>(nextResolve => {\n                recordingPlayer.addEventListener(\n                    Models.RecordingPlayer.Events.Stop,\n                    () => {\n                      nextResolve();\n                    },\n                    {once: true},\n                );\n              });\n            },\n            {once: true},\n        );\n      });\n      recordingPlayer.addEventListener(\n          Models.RecordingPlayer.Events.Step,\n          stepEventHandlerStub,\n      );\n\n      void recordingPlayer.play();\n      await stopEventPromise;\n      assert.strictEqual(stepEventHandlerStub.getCalls().length, 2);\n      recordingPlayer.stepOver();\n      await stopEventPromise;\n\n      assert.strictEqual(stepEventHandlerStub.getCalls().length, 3);\n    });\n\n    it('should `continue` execute until the next breakpoint', async () => {\n      recordingPlayer = new Models.RecordingPlayer.RecordingPlayer(\n          {\n            title: 'test',\n            steps: [\n              createCustomStep(),\n              createCustomStep(),\n              createCustomStep(),\n              createCustomStep(),\n              createCustomStep(),\n            ],\n          },\n          {\n            speed: Models.RecordingPlayer.PlayRecordingSpeed.Normal,\n            breakpointIndexes: new Set([1, 3]),\n          },\n      );\n      const stepEventHandlerStub = sinon.stub().callsFake(async ({data: {resolve}}) => {\n        resolve();\n      });\n      let stopEventPromise = new Promise<void>(resolve => {\n        recordingPlayer.addEventListener(\n            Models.RecordingPlayer.Events.Stop,\n            () => {\n              resolve();\n              stopEventPromise = new Promise<void>(nextResolve => {\n                recordingPlayer.addEventListener(\n                    Models.RecordingPlayer.Events.Stop,\n                    () => {\n                      nextResolve();\n                    },\n                    {once: true},\n                );\n              });\n            },\n            {once: true},\n        );\n      });\n      recordingPlayer.addEventListener(\n          Models.RecordingPlayer.Events.Step,\n          stepEventHandlerStub,\n      );\n\n      void recordingPlayer.play();\n      await stopEventPromise;\n      assert.strictEqual(stepEventHandlerStub.getCalls().length, 2);\n      recordingPlayer.continue();\n      await stopEventPromise;\n\n      assert.strictEqual(stepEventHandlerStub.getCalls().length, 4);\n    });\n\n    it('should `continue` execute until the end if there is no later breakpoints', async () => {\n      recordingPlayer = new Models.RecordingPlayer.RecordingPlayer(\n          {\n            title: 'test',\n            steps: [\n              createCustomStep(),\n              createCustomStep(),\n              createCustomStep(),\n              createCustomStep(),\n              createCustomStep(),\n            ],\n          },\n          {\n            speed: Models.RecordingPlayer.PlayRecordingSpeed.Normal,\n            breakpointIndexes: new Set([1]),\n          },\n      );\n      const stepEventHandlerStub = sinon.stub().callsFake(async ({data: {resolve}}) => {\n        resolve();\n      });\n      let stopEventPromise = new Promise<void>(resolve => {\n        recordingPlayer.addEventListener(\n            Models.RecordingPlayer.Events.Stop,\n            () => {\n              resolve();\n              stopEventPromise = new Promise<void>(nextResolve => {\n                recordingPlayer.addEventListener(\n                    Models.RecordingPlayer.Events.Stop,\n                    () => {\n                      nextResolve();\n                    },\n                    {once: true},\n                );\n              });\n            },\n            {once: true},\n        );\n      });\n      const doneEventPromise = new Promise<void>(resolve => {\n        recordingPlayer.addEventListener(\n            Models.RecordingPlayer.Events.Done,\n            () => {\n              resolve();\n            },\n            {once: true},\n        );\n      });\n      recordingPlayer.addEventListener(\n          Models.RecordingPlayer.Events.Step,\n          stepEventHandlerStub,\n      );\n\n      void recordingPlayer.play();\n      await stopEventPromise;\n      assert.strictEqual(stepEventHandlerStub.getCalls().length, 2);\n      recordingPlayer.continue();\n      await doneEventPromise;\n\n      assert.strictEqual(stepEventHandlerStub.getCalls().length, 5);\n    });\n  });\n});\n"]}