{"version":3,"file":"screenshot-storage.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/recorder/models/screenshot-storage.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\nimport {\n  describeWithEnvironment,\n} from '../../../testing/EnvironmentHelpers.js';\n\nimport * as Recorder from './models.js';\n\nlet instance: Recorder.ScreenshotStorage.ScreenshotStorage;\n\ndescribeWithEnvironment('ScreenshotStorage', () => {\n  beforeEach(() => {\n    instance = Recorder.ScreenshotStorage.ScreenshotStorage.instance();\n    instance.clear();\n  });\n\n  it('should return null if no screenshot has been stored for the given index', () => {\n    const imageData = instance.getScreenshotForSection('recording-1', 1);\n    assert.isNull(imageData);\n  });\n\n  it('should return the stored image data when a screenshot has been stored for the given index', () => {\n    const imageData = 'data:image/jpeg;base64,...' as Recorder.ScreenshotStorage.Screenshot;\n    instance.storeScreenshotForSection('recording-1', 1, imageData);\n    const retrievedImageData = instance.getScreenshotForSection(\n        'recording-1',\n        1,\n    );\n    assert.strictEqual(retrievedImageData, imageData);\n  });\n\n  it('should load previous screenshots from settings', () => {\n    const imageData = 'data:image/jpeg;base64,...' as Recorder.ScreenshotStorage.Screenshot;\n    const setting = Common.Settings.Settings.instance().createSetting<Recorder.ScreenshotStorage.ScreenshotMetaData[]>(\n        'recorder-screenshots', []);\n    setting.set([{recordingName: 'recording-1', index: 1, data: imageData}]);\n\n    const screenshotStorage = Recorder.ScreenshotStorage.ScreenshotStorage.instance({forceNew: true});\n    const retrievedImageData = screenshotStorage.getScreenshotForSection(\n        'recording-1',\n        1,\n    );\n    assert.strictEqual(retrievedImageData, imageData);\n  });\n\n  it('should sync screenshots to settings', () => {\n    const imageData = 'data:image/jpeg;base64,...' as Recorder.ScreenshotStorage.Screenshot;\n    instance.storeScreenshotForSection('recording-1', 1, imageData);\n\n    const setting = Common.Settings.Settings.instance().createSetting<Recorder.ScreenshotStorage.ScreenshotMetaData[]>(\n        'recorder-screenshots', []);\n    const value = setting.get();\n    assert.strictEqual(value.length, 1);\n    assert.strictEqual(value[0].index, 1);\n    assert.strictEqual(value[0].data, imageData);\n  });\n\n  it('should limit the amount of stored screenshots', () => {\n    const screenshotStorage = Recorder.ScreenshotStorage.ScreenshotStorage.instance({\n      forceNew: true,\n      maxStorageSize: 2,\n    });\n\n    screenshotStorage.storeScreenshotForSection(\n        'recording-1',\n        1,\n        '1' as Recorder.ScreenshotStorage.Screenshot,\n    );\n    screenshotStorage.storeScreenshotForSection(\n        'recording-1',\n        2,\n        '2' as Recorder.ScreenshotStorage.Screenshot,\n    );\n    screenshotStorage.storeScreenshotForSection(\n        'recording-1',\n        3,\n        '3' as Recorder.ScreenshotStorage.Screenshot,\n    );\n\n    const imageData1 = screenshotStorage.getScreenshotForSection(\n        'recording-1',\n        1,\n    );\n    const imageData2 = screenshotStorage.getScreenshotForSection(\n        'recording-1',\n        2,\n    );\n    const imageData3 = screenshotStorage.getScreenshotForSection(\n        'recording-1',\n        3,\n    );\n\n    assert.isNull(imageData1);\n    assert.isNotNull(imageData2);\n    assert.isNotNull(imageData3);\n  });\n\n  it('should drop the oldest screenshots first', () => {\n    const screenshotStorage = Recorder.ScreenshotStorage.ScreenshotStorage.instance({\n      forceNew: true,\n      maxStorageSize: 2,\n    });\n\n    screenshotStorage.storeScreenshotForSection(\n        'recording-1',\n        1,\n        '1' as Recorder.ScreenshotStorage.Screenshot,\n    );\n    screenshotStorage.storeScreenshotForSection(\n        'recording-1',\n        2,\n        '2' as Recorder.ScreenshotStorage.Screenshot,\n    );\n    screenshotStorage.getScreenshotForSection('recording-1', 1);\n    screenshotStorage.storeScreenshotForSection(\n        'recording-1',\n        3,\n        '3' as Recorder.ScreenshotStorage.Screenshot,\n    );\n\n    const imageData1 = screenshotStorage.getScreenshotForSection(\n        'recording-1',\n        1,\n    );\n    const imageData2 = screenshotStorage.getScreenshotForSection(\n        'recording-1',\n        2,\n    );\n    const imageData3 = screenshotStorage.getScreenshotForSection(\n        'recording-1',\n        3,\n    );\n\n    assert.isNotNull(imageData1);\n    assert.isNull(imageData2);\n    assert.isNotNull(imageData3);\n  });\n\n  it('should namespace the screenshots by recording name', () => {\n    const imageData = 'data:image/jpeg;base64,...' as Recorder.ScreenshotStorage.Screenshot;\n\n    instance.storeScreenshotForSection('recording-1', 1, imageData);\n    const storedImageData = instance.getScreenshotForSection('recording-2', 1);\n\n    assert.isNull(storedImageData);\n  });\n\n  it('should delete screenshots by recording name', () => {\n    const imageData = 'data:image/jpeg;base64,...' as Recorder.ScreenshotStorage.Screenshot;\n\n    instance.storeScreenshotForSection('recording-1', 1, imageData);\n    const storedImageData = instance.getScreenshotForSection('recording-2', 1);\n\n    assert.isNull(storedImageData);\n  });\n});\n"]}