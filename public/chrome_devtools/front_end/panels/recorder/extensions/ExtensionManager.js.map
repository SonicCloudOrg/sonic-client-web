{"version":3,"file":"ExtensionManager.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/recorder/extensions/ExtensionManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\nimport * as Extensions from '../../../models/extensions/extensions.js';\n\nlet instance: ExtensionManager|null = null;\n\nexport interface Extension {\n  getName(): string;\n  getMediaType(): string|undefined;\n  stringify(recording: Object): Promise<string>;\n  stringifyStep(step: Object): Promise<string>;\n  getCapabilities(): Array<'replay'|'export'>;\n  replay(recording: Object): void;\n}\n\nexport class ExtensionManager extends Common.ObjectWrapper.ObjectWrapper<EventTypes> {\n  static instance(): ExtensionManager {\n    if (!instance) {\n      instance = new ExtensionManager();\n    }\n    return instance;\n  }\n\n  #views = new Map<string, ExtensionIframe>();\n\n  constructor() {\n    super();\n    this.attach();\n  }\n\n  attach(): void {\n    const pluginManager = Extensions.RecorderPluginManager.RecorderPluginManager.instance();\n    pluginManager.addEventListener(Extensions.RecorderPluginManager.Events.PluginAdded, this.#handlePlugin);\n    pluginManager.addEventListener(Extensions.RecorderPluginManager.Events.PluginRemoved, this.#handlePlugin);\n    pluginManager.addEventListener(Extensions.RecorderPluginManager.Events.ViewRegistered, this.#handleView);\n    for (const descriptor of pluginManager.views()) {\n      this.#handleView({data: descriptor});\n    }\n  }\n\n  detach(): void {\n    const pluginManager = Extensions.RecorderPluginManager.RecorderPluginManager.instance();\n    pluginManager.removeEventListener(Extensions.RecorderPluginManager.Events.PluginAdded, this.#handlePlugin);\n    pluginManager.removeEventListener(Extensions.RecorderPluginManager.Events.PluginRemoved, this.#handlePlugin);\n    pluginManager.removeEventListener(Extensions.RecorderPluginManager.Events.ViewRegistered, this.#handleView);\n    this.#views.clear();\n  }\n\n  extensions(): Extension[] {\n    return Extensions.RecorderPluginManager.RecorderPluginManager.instance().plugins();\n  }\n\n  getView(descriptorId: string): ExtensionIframe {\n    const view = this.#views.get(descriptorId);\n    if (!view) {\n      throw new Error('View not found');\n    }\n    return view;\n  }\n\n  #handlePlugin = (): void => {\n    this.dispatchEventToListeners(Events.ExtensionsUpdated, this.extensions());\n  };\n\n  #handleView = (event: {data: Extensions.RecorderPluginManager.ViewDescriptor}): void => {\n    const descriptor = event.data;\n    if (!this.#views.has(descriptor.id)) {\n      this.#views.set(descriptor.id, new ExtensionIframe(descriptor));\n    }\n  };\n}\n\nclass ExtensionIframe {\n  #descriptor: Extensions.RecorderPluginManager.ViewDescriptor;\n  #iframe: HTMLIFrameElement;\n  #isShowing = false;\n  #isLoaded = false;\n\n  constructor(descriptor: Extensions.RecorderPluginManager.ViewDescriptor) {\n    this.#descriptor = descriptor;\n    this.#iframe = document.createElement('iframe');\n    this.#iframe.src = descriptor.pagePath;\n    this.#iframe.onload = this.#onIframeLoad;\n  }\n\n  #onIframeLoad = (): void => {\n    this.#isLoaded = true;\n    if (this.#isShowing) {\n      this.#descriptor.onShown();\n    }\n  };\n\n  show(): void {\n    if (this.#isShowing) {\n      return;\n    }\n    this.#isShowing = true;\n    if (this.#isLoaded) {\n      this.#descriptor.onShown();\n    }\n  }\n\n  hide(): void {\n    if (!this.#isShowing) {\n      return;\n    }\n    this.#isShowing = false;\n    this.#isLoaded = false;\n    this.#descriptor.onHidden();\n  }\n\n  frame(): HTMLIFrameElement {\n    return this.#iframe;\n  }\n}\n\nexport const enum Events {\n  ExtensionsUpdated = 'extensionsUpdated',\n}\n\nexport type EventTypes = {\n  [Events.ExtensionsUpdated]: Extension[],\n};\n"]}