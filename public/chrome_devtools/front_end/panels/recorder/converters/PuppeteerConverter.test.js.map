{"version":3,"file":"PuppeteerConverter.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/recorder/converters/PuppeteerConverter.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,MAAM,MAAM,qBAAqB,CAAC;AAE9C,OAAO,KAAK,UAAU,MAAM,iBAAiB,CAAC;AAE9C,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,EAAE,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;QACvC,MAAM,SAAS,GAAG,IAAI,UAAU,CAAC,kBAAkB,CAAC,kBAAkB,CAClE,IAAI,CACP,CAAC;QACF,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,MAAM,SAAS,CAAC,SAAS,CAAC;YACpD,KAAK,EAAE,MAAM;YACb,KAAK,EAAE,CAAC,EAAC,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,SAAS,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAC,CAAC;SACtE,CAAC,CAAC;QACH,MAAM,QAAQ,GAAG;;;;;;;;;;;;;;;;;yBAiBI,CAAC;QACtB,MAAM,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;QACpD,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,EAAE,0CAA0C,MAAM,EAAE,CAAC,CAAC;QACzF,MAAM,CAAC,eAAe,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;QACvC,MAAM,SAAS,GAAG,IAAI,UAAU,CAAC,kBAAkB,CAAC,kBAAkB,CAClE,IAAI,CACP,CAAC;QACF,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,aAAa,CAAC;YAC3C,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM;SACpC,CAAC,CAAC;QACH,MAAM,CAAC,WAAW,CACd,MAAM,EACN;;;;CAIP,CACI,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Models from '../models/models.js';\n\nimport * as Converters from './converters.js';\n\ndescribe('PuppeteerConverter', () => {\n  it('should stringify a flow', async () => {\n    const converter = new Converters.PuppeteerConverter.PuppeteerConverter(\n        '  ',\n    );\n    const [result, sourceMap] = await converter.stringify({\n      title: 'test',\n      steps: [{type: Models.Schema.StepType.Scroll, selectors: [['.cls']]}],\n    });\n    const expected = `const puppeteer = require('puppeteer'); // v22.0.0 or later\n\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  const timeout = 5000;\n  page.setDefaultTimeout(timeout);\n\n  {\n    const targetPage = page;\n    await puppeteer.Locator.race([\n      targetPage.locator('.cls')\n    ])\n      .setTimeout(timeout)\n      .scroll({ scrollTop: undefined, scrollLeft: undefined});\n  }\n\n  await browser.close();`;\n    const actual = result.substring(0, expected.length);\n    assert.strictEqual(actual, expected, `Unexpected start of generated result:\\n${actual}`);\n    assert.deepStrictEqual(sourceMap, [1, 8, 8]);\n  });\n\n  it('should stringify a step', async () => {\n    const converter = new Converters.PuppeteerConverter.PuppeteerConverter(\n        '  ',\n    );\n    const result = await converter.stringifyStep({\n      type: Models.Schema.StepType.Scroll,\n    });\n    assert.strictEqual(\n        result,\n        `{\n  const targetPage = page;\n  await targetPage.evaluate((x, y) => { window.scroll(x, y); }, undefined, undefined)\n}\n`,\n    );\n  });\n});\n"]}