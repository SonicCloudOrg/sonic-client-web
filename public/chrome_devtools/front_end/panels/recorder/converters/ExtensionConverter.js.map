{"version":3,"file":"ExtensionConverter.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/recorder/converters/ExtensionConverter.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAI7B,OAAO,KAAK,eAAe,MAAM,2DAA2D,CAAC;AAI7F,MAAM,CAAC,MAAM,gBAAgB,GAAG,YAAY,CAAC;AAE7C,MAAM,OAAO,kBAAkB;IAC7B,IAAI,CAAS;IACb,UAAU,CAAuC;IAEjD,YAAY,GAAW,EAAE,SAA+C;QACtE,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QAChB,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IAC9B,CAAC;IAED,KAAK;QACH,OAAO,gBAAgB,GAAG,IAAI,CAAC,IAAI,CAAC;IACtC,CAAC;IAED,aAAa;QACX,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;IACnC,CAAC;IAED,YAAY;QACV,OAAO,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,CAAC;IACxC,CAAC;IAED,WAAW,CAAC,IAA4B;QACtC,MAAM,aAAa,GAAG,IAAI,CAAC,qBAAqB,CAC5C,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,CACjC,CAAC;QACF,OAAO,GAAG,IAAI,CAAC,KAAK,GAAG,aAAa,EAAE,CAAC;IACzC,CAAC;IAED,KAAK,CAAC,SAAS,CACX,IAA4B;QAE9B,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACnD,MAAM,SAAS,GAAG,eAAe,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QACvD,OAAO,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,SAAS,CAAC,CAAC;IAC3D,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,IAAwB;QAC1C,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IACnD,CAAC;IAED,qBAAqB,CAAC,SAA2B;QAC/C,qEAAqE;QACrE,QAAQ,SAAS,EAAE,CAAC;YAClB,KAAK,kBAAkB;gBACrB,OAAO,OAAO,CAAC;YACjB,KAAK,wBAAwB,CAAC;YAC9B,KAAK,iBAAiB;gBACpB,OAAO,KAAK,CAAC;YACf,KAAK,wBAAwB,CAAC;YAC9B,KAAK,iBAAiB;gBACpB,OAAO,KAAK,CAAC;YACf;gBACE,oEAAoE;gBACpE,OAAO,EAAE,CAAC;QACd,CAAC;IACH,CAAC;CACF","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Extension from '../extensions/extensions.js';\nimport type * as Models from '../models/models.js';\nimport * as PuppeteerReplay from '../../../third_party/puppeteer-replay/puppeteer-replay.js';\n\nimport {type Converter} from './Converter.js';\n\nexport const EXTENSION_PREFIX = 'extension_';\n\nexport class ExtensionConverter implements Converter {\n  #idx: number;\n  #extension: Extension.ExtensionManager.Extension;\n\n  constructor(idx: number, extension: Extension.ExtensionManager.Extension) {\n    this.#idx = idx;\n    this.#extension = extension;\n  }\n\n  getId(): string {\n    return EXTENSION_PREFIX + this.#idx;\n  }\n\n  getFormatName(): string {\n    return this.#extension.getName();\n  }\n\n  getMediaType(): string|undefined {\n    return this.#extension.getMediaType();\n  }\n\n  getFilename(flow: Models.Schema.UserFlow): string {\n    const fileExtension = this.#mediaTypeToExtension(\n        this.#extension.getMediaType(),\n    );\n    return `${flow.title}${fileExtension}`;\n  }\n\n  async stringify(\n      flow: Models.Schema.UserFlow,\n      ): Promise<[string, PuppeteerReplay.SourceMap|undefined]> {\n    const text = await this.#extension.stringify(flow);\n    const sourceMap = PuppeteerReplay.parseSourceMap(text);\n    return [PuppeteerReplay.stripSourceMap(text), sourceMap];\n  }\n\n  async stringifyStep(step: Models.Schema.Step): Promise<string> {\n    return await this.#extension.stringifyStep(step);\n  }\n\n  #mediaTypeToExtension(mediaType: string|undefined): string {\n    // See https://www.iana.org/assignments/media-types/media-types.xhtml\n    switch (mediaType) {\n      case 'application/json':\n        return '.json';\n      case 'application/javascript':\n      case 'text/javascript':\n        return '.js';\n      case 'application/typescript':\n      case 'text/typescript':\n        return '.ts';\n      default:\n        // TODO: think of exhaustive mapping once the feature gets traction.\n        return '';\n    }\n  }\n}\n"]}