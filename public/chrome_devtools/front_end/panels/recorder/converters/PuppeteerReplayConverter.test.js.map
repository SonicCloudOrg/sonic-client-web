{"version":3,"file":"PuppeteerReplayConverter.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/recorder/converters/PuppeteerReplayConverter.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,MAAM,MAAM,qBAAqB,CAAC;AAE9C,OAAO,KAAK,UAAU,MAAM,iBAAiB,CAAC;AAE9C,QAAQ,CAAC,0BAA0B,EAAE,GAAG,EAAE;IACxC,EAAE,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;QACvC,MAAM,SAAS,GAAG,IAAI,UAAU,CAAC,wBAAwB,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC;QACzF,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,MAAM,SAAS,CAAC,SAAS,CAAC;YACpD,KAAK,EAAE,MAAM;YACb,KAAK,EAAE,CAAC,EAAC,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,SAAS,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAC,CAAC;SACtE,CAAC,CAAC;QACH,MAAM,CAAC,WAAW,CACd,MAAM,EACN;;;;;;;;;;;;;;;;;;;;;;;CAuBP,CACI,CAAC;QACF,MAAM,CAAC,eAAe,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;QACvC,MAAM,SAAS,GAAG,IAAI,UAAU,CAAC,wBAAwB,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC;QACzF,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,aAAa,CAAC;YAC3C,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM;SACpC,CAAC,CAAC;QACH,MAAM,CAAC,WAAW,CACd,MAAM,EACN;;;CAGP,CACI,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Models from '../models/models.js';\n\nimport * as Converters from './converters.js';\n\ndescribe('PuppeteerReplayConverter', () => {\n  it('should stringify a flow', async () => {\n    const converter = new Converters.PuppeteerReplayConverter.PuppeteerReplayConverter('  ');\n    const [result, sourceMap] = await converter.stringify({\n      title: 'test',\n      steps: [{type: Models.Schema.StepType.Scroll, selectors: [['.cls']]}],\n    });\n    assert.strictEqual(\n        result,\n        `import url from 'url';\nimport { createRunner } from '@puppeteer/replay';\n\nexport async function run(extension) {\n  const runner = await createRunner(extension);\n\n  await runner.runBeforeAllSteps();\n\n  await runner.runStep({\n    type: 'scroll',\n    selectors: [\n      [\n        '.cls'\n      ]\n    ]\n  });\n\n  await runner.runAfterAllSteps();\n}\n\nif (process && import.meta.url === url.pathToFileURL(process.argv[1]).href) {\n  run()\n}\n`,\n    );\n    assert.deepStrictEqual(sourceMap, [1, 8, 8]);\n  });\n\n  it('should stringify a step', async () => {\n    const converter = new Converters.PuppeteerReplayConverter.PuppeteerReplayConverter('  ');\n    const result = await converter.stringifyStep({\n      type: Models.Schema.StepType.Scroll,\n    });\n    assert.strictEqual(\n        result,\n        `await runner.runStep({\n  type: 'scroll'\n});\n`,\n    );\n  });\n});\n"]}