{"version":3,"file":"recorder-meta.js","sourceRoot":"","sources":["../../../../../../front_end/panels/recorder/recorder-meta.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport * as Actions from './recorder-actions/recorder-actions.js';\nimport type * as Recorder from './recorder.js';\n\nconst UIStrings = {\n  /**\n   *@description Title of the Recorder Panel\n   */\n  recorder: 'Recorder',\n  /**\n   *@description Title of the Recorder Panel\n   */\n  showRecorder: 'Show Recorder',\n  /**\n   *@description Title of start/stop recording action in command menu\n   */\n  startStopRecording: 'Start/Stop recording',\n  /**\n   *@description Title of create a new recording action in command menu\n   */\n  createRecording: 'Create a new recording',\n  /**\n   *@description Title of start a new recording action in command menu\n   */\n  replayRecording: 'Replay recording',\n  /**\n   * @description Title for toggling code action in command menu\n   */\n  toggleCode: 'Toggle code view',\n};\n\nconst str_ = i18n.i18n.registerUIStrings(\n    'panels/recorder/recorder-meta.ts',\n    UIStrings,\n);\nconst i18nLazyString = i18n.i18n.getLazilyComputedLocalizedString.bind(\n    undefined,\n    str_,\n);\n\nlet loadedRecorderModule: typeof Recorder|undefined;\n\nasync function loadRecorderModule(): Promise<typeof Recorder> {\n  if (!loadedRecorderModule) {\n    loadedRecorderModule = await import('./recorder.js');\n  }\n  return loadedRecorderModule;\n}\n\nfunction maybeRetrieveContextTypes<T = unknown>(\n    getClassCallBack: (loadedRecorderModule: typeof Recorder) => T[],\n    actionId: string,\n    ): T[] {\n  if (loadedRecorderModule === undefined) {\n    return [];\n  }\n  if (actionId &&\n      loadedRecorderModule.RecorderPanel.RecorderPanel.instance().isActionPossible(\n          actionId as Actions.RecorderActions,\n          )) {\n    return getClassCallBack(loadedRecorderModule);\n  }\n  return [];\n}\n\nconst viewId = 'chrome-recorder';\n(UI.ViewManager.defaultOptionsForTabs as {[key: string]: boolean})[viewId] = true;\nUI.ViewManager.registerViewExtension({\n  location: UI.ViewManager.ViewLocationValues.PANEL,\n  id: viewId,\n  commandPrompt: i18nLazyString(UIStrings.showRecorder),\n  title: i18nLazyString(UIStrings.recorder),\n  order: 90,\n  persistence: UI.ViewManager.ViewPersistence.CLOSEABLE,\n  async loadView() {\n    const Recorder = await loadRecorderModule();\n    return Recorder.RecorderPanel.RecorderPanel.instance();\n  },\n});\n\nUI.ActionRegistration.registerActionExtension({\n  category: UI.ActionRegistration.ActionCategory.RECORDER,\n  actionId: Actions.RecorderActions.CreateRecording,\n  title: i18nLazyString(UIStrings.createRecording),\n  async loadActionDelegate() {\n    const Recorder = await loadRecorderModule();\n    return new Recorder.RecorderPanel.ActionDelegate();\n  },\n});\n\nUI.ActionRegistration.registerActionExtension({\n  category: UI.ActionRegistration.ActionCategory.RECORDER,\n  actionId: Actions.RecorderActions.StartRecording,\n  title: i18nLazyString(UIStrings.startStopRecording),\n  contextTypes() {\n    return maybeRetrieveContextTypes(\n        Recorder => [Recorder.RecorderPanel.RecorderPanel],\n        Actions.RecorderActions.StartRecording,\n    );\n  },\n  async loadActionDelegate() {\n    const Recorder = await loadRecorderModule();\n    return new Recorder.RecorderPanel.ActionDelegate();\n  },\n  bindings: [\n    {\n      shortcut: 'Ctrl+E',\n      platform: UI.ActionRegistration.Platforms.WindowsLinux,\n    },\n    {shortcut: 'Meta+E', platform: UI.ActionRegistration.Platforms.Mac},\n  ],\n});\n\nUI.ActionRegistration.registerActionExtension({\n  category: UI.ActionRegistration.ActionCategory.RECORDER,\n  actionId: Actions.RecorderActions.ReplayRecording,\n  title: i18nLazyString(UIStrings.replayRecording),\n  contextTypes() {\n    return maybeRetrieveContextTypes(\n        Recorder => [Recorder.RecorderPanel.RecorderPanel],\n        Actions.RecorderActions.ReplayRecording,\n    );\n  },\n  async loadActionDelegate() {\n    const Recorder = await loadRecorderModule();\n    return new Recorder.RecorderPanel.ActionDelegate();\n  },\n  bindings: [\n    {\n      shortcut: 'Ctrl+Enter',\n      platform: UI.ActionRegistration.Platforms.WindowsLinux,\n    },\n    {shortcut: 'Meta+Enter', platform: UI.ActionRegistration.Platforms.Mac},\n  ],\n});\n\nUI.ActionRegistration.registerActionExtension({\n  category: UI.ActionRegistration.ActionCategory.RECORDER,\n  actionId: Actions.RecorderActions.ToggleCodeView,\n  title: i18nLazyString(UIStrings.toggleCode),\n  contextTypes() {\n    return maybeRetrieveContextTypes(\n        Recorder => [Recorder.RecorderPanel.RecorderPanel],\n        Actions.RecorderActions.ToggleCodeView,\n    );\n  },\n  async loadActionDelegate() {\n    const Recorder = await loadRecorderModule();\n    return new Recorder.RecorderPanel.ActionDelegate();\n  },\n  bindings: [\n    {\n      shortcut: 'Ctrl+B',\n      platform: UI.ActionRegistration.Platforms.WindowsLinux,\n    },\n    {shortcut: 'Meta+B', platform: UI.ActionRegistration.Platforms.Mac},\n  ],\n});\n"]}