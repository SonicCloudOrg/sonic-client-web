{"version":3,"file":"TextSelector.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/recorder/injected/selectors/TextSelector.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EACL,iBAAiB,GAClB,MACG,qFAAqF,CAAC;AAC1F,OAAO,EACL,oBAAoB,GACrB,MACG,2FAA2F,CAAC;AAIhG,MAAM,mBAAmB,GAAG,EAAE,CAAC;AAC/B,MAAM,mBAAmB,GAAG,EAAE,CAAC;AAE/B,MAAM,OAAO,GAAG,CAAI,IAAiB,EAAE,GAAG,GAAG,QAAQ,EAAO,EAAE;IAC5D,MAAM,OAAO,GAAG,EAAE,CAAC;IACnB,KAAK,MAAM,KAAK,IAAI,IAAI,EAAE,CAAC;QACzB,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC;YACb,MAAM;QACR,CAAC;QACD,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACpB,EAAE,GAAG,CAAC;IACR,CAAC;IACD,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAEF;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAAC,IAAU,EAAsB,EAAE;IACpE,MAAM,OAAO,GAAG,iBAAiB,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;IACpD,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,OAAO;IACT,CAAC;IAED,iCAAiC;IACjC,IAAI,OAAO,CAAC,MAAM,IAAI,mBAAmB,EAAE,CAAC;QAC1C,MAAM,QAAQ,GAAG,OAAO,CAAC,oBAAoB,CAAC,QAAQ,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;QACrE,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC;YAClD,OAAO;QACT,CAAC;QACD,OAAO,CAAC,OAAO,CAAC,CAAC;IACnB,CAAC;IAED,8CAA8C;IAC9C,IAAI,OAAO,CAAC,MAAM,GAAG,mBAAmB,EAAE,CAAC;QACzC,OAAO;IACT,CAAC;IAED,6EAA6E;IAC7E,IAAI,IAAI,GAAG,mBAAmB,CAAC;IAC/B,IAAI,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC;IAC3B,OAAO,IAAI,IAAI,KAAK,EAAE,CAAC;QACrB,MAAM,MAAM,GAAG,IAAI,GAAG,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC5C,MAAM,QAAQ,GAAG,OAAO,CACpB,oBAAoB,CAAC,QAAQ,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,EACxD,CAAC,CACJ,CAAC;QACF,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC;YAClD,IAAI,GAAG,MAAM,GAAG,CAAC,CAAC;QACpB,CAAC;aAAM,CAAC;YACN,KAAK,GAAG,MAAM,GAAG,CAAC,CAAC;QACrB,CAAC;IACH,CAAC;IAED,iBAAiB;IACjB,IAAI,KAAK,KAAK,OAAO,CAAC,MAAM,EAAE,CAAC;QAC7B,OAAO;IACT,CAAC;IAED,4EAA4E;IAC5E,MAAM,MAAM,GAAG,KAAK,GAAG,CAAC,CAAC;IACzB,MAAM,SAAS,GAAG,OAAO,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,GAAG,mBAAmB,CAAC,CAAC;IACtE,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AAC9D,CAAC,CAAC","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {\n  createTextContent,\n} from\n    '../../../../third_party/puppeteer/package/lib/esm/puppeteer/injected/TextContent.js';\nimport {\n  textQuerySelectorAll,\n} from\n    '../../../../third_party/puppeteer/package/lib/esm/puppeteer/injected/TextQuerySelector.js';\n\nimport {type Selector} from './Selector.js';\n\nconst MINIMUM_TEXT_LENGTH = 12;\nconst MAXIMUM_TEXT_LENGTH = 64;\n\nconst collect = <T>(iter: Iterable<T>, max = Infinity): T[] => {\n  const results = [];\n  for (const value of iter) {\n    if (max <= 0) {\n      break;\n    }\n    results.push(value);\n    --max;\n  }\n  return results;\n};\n\n/**\n * Computes the text selector for a node.\n *\n * @param node - The node to compute.\n * @returns The computed text selector.\n *\n * @internal\n */\nexport const computeTextSelector = (node: Node): Selector|undefined => {\n  const content = createTextContent(node).full.trim();\n  if (!content) {\n    return;\n  }\n\n  // If it's short, just return it.\n  if (content.length <= MINIMUM_TEXT_LENGTH) {\n    const elements = collect(textQuerySelectorAll(document, content), 2);\n    if (elements.length !== 1 || elements[0] !== node) {\n      return;\n    }\n    return [content];\n  }\n\n  // If it's too long, it's probably irrelevant.\n  if (content.length > MAXIMUM_TEXT_LENGTH) {\n    return;\n  }\n\n  // We do a binary search for the optimal length of a substring starting at 0.\n  let left = MINIMUM_TEXT_LENGTH;\n  let right = content.length;\n  while (left <= right) {\n    const center = left + ((right - left) >> 2);\n    const elements = collect(\n        textQuerySelectorAll(document, content.slice(0, center)),\n        2,\n    );\n    if (elements.length !== 1 || elements[0] !== node) {\n      left = center + 1;\n    } else {\n      right = center - 1;\n    }\n  }\n\n  // Never matched.\n  if (right === content.length) {\n    return;\n  }\n\n  // We attempt to round the word in the event we are in the middle of a word.\n  const length = right + 1;\n  const remainder = content.slice(length, length + MAXIMUM_TEXT_LENGTH);\n  return [content.slice(0, length + remainder.search(/ |$/))];\n};\n"]}