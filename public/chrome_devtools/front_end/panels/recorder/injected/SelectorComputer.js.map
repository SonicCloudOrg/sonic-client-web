{"version":3,"file":"SelectorComputer.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/recorder/injected/SelectorComputer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {type SelectorType} from '../../../third_party/puppeteer-replay/puppeteer-replay.js';\nimport {type Logger} from './Logger.js';\nimport {MonotonicArray} from './MonotonicArray.js';\n\nimport {\n  computeARIASelector,\n  type AccessibilityBindings,\n} from './selectors/ARIASelector.js';\nimport {computeCSSSelector} from './selectors/CSSSelector.js';\nimport {computePierceSelector} from './selectors/PierceSelector.js';\nimport {type Selector} from './selectors/Selector.js';\nimport {computeTextSelector} from './selectors/TextSelector.js';\nimport {computeXPath} from './selectors/XPath.js';\n\nconst prefixSelector = (\n    selector: Selector|undefined,\n    prefix: string,\n    ): Selector|undefined => {\n  if (selector === undefined) {\n    return;\n  }\n  if (typeof selector === 'string') {\n    return `${prefix}/${selector}`;\n  }\n  return selector.map(selector => `${prefix}/${selector}`);\n};\n\nexport class SelectorComputer {\n  #customAttributes = [\n    // Most common attributes first.\n    'data-testid',\n    'data-test',\n    'data-qa',\n    'data-cy',\n    'data-test-id',\n    'data-qa-id',\n    'data-testing',\n  ];\n\n  #bindings: AccessibilityBindings;\n  #logger: Logger;\n  #nodes = new MonotonicArray<Node>();\n  #selectorFunctionsInOrder: Array<(node: Node) => Selector | undefined>;\n\n  constructor(\n      bindings: AccessibilityBindings,\n      logger: Logger,\n      customAttribute = '',\n      selectorTypesToRecord?: SelectorType[],\n  ) {\n    this.#bindings = bindings;\n    this.#logger = logger;\n\n    let selectorOrder = [\n      'aria',\n      'css',\n      'xpath',\n      'pierce',\n      'text',\n    ] as SelectorType[];\n    if (customAttribute) {\n      // Custom DOM attributes indicate a preference for CSS/XPath selectors.\n      this.#customAttributes.unshift(customAttribute);\n      selectorOrder = [\n        'css',\n        'xpath',\n        'pierce',\n        'aria',\n        'text',\n      ] as SelectorType[];\n    }\n\n    this.#selectorFunctionsInOrder = selectorOrder\n                                         .filter(type => {\n                                           if (selectorTypesToRecord) {\n                                             return selectorTypesToRecord.includes(type);\n                                           }\n                                           return true;\n                                         })\n                                         .map(selectorType => {\n                                           switch (selectorType) {\n                                             case 'css':\n                                               return this.getCSSSelector.bind(this);\n                                             case 'xpath':\n                                               return this.getXPathSelector.bind(this);\n                                             case 'pierce':\n                                               return this.getPierceSelector.bind(this);\n                                             case 'aria':\n                                               return this.getARIASelector.bind(this);\n                                             case 'text':\n                                               return this.getTextSelector.bind(this);\n                                             default:\n                                               throw new Error('Unknown selector type: ' + selectorType);\n                                           }\n                                         });\n  }\n\n  getSelectors(node: Node): Selector[] {\n    const selectors: Selector[] = [];\n    for (const getSelector of this.#selectorFunctionsInOrder) {\n      const selector = getSelector(node);\n      if (selector) {\n        selectors.push(selector);\n      }\n    }\n    return selectors;\n  }\n\n  getCSSSelector(node: Node): Selector|undefined {\n    return this.#logger.timed(`getCSSSelector: ${this.#nodes.getOrInsert(node)} ${node.nodeName}`, () => {\n      return computeCSSSelector(node, this.#customAttributes);\n    });\n  }\n\n  getTextSelector(node: Node): Selector|undefined {\n    return this.#logger.timed(`getTextSelector: ${this.#nodes.getOrInsert(node)} ${node.nodeName}`, () => {\n      return prefixSelector(computeTextSelector(node), 'text');\n    });\n  }\n\n  getXPathSelector(node: Node): Selector|undefined {\n    return this.#logger.timed(`getXPathSelector: ${this.#nodes.getOrInsert(node)} ${node.nodeName}`, () => {\n      return prefixSelector(\n          computeXPath(node, true, this.#customAttributes),\n          'xpath',\n      );\n    });\n  }\n\n  getPierceSelector(node: Node): Selector|undefined {\n    return this.#logger.timed(`getPierceSelector: ${this.#nodes.getOrInsert(node)} ${node.nodeName}`, () => {\n      return prefixSelector(\n          computePierceSelector(node, this.#customAttributes),\n          'pierce',\n      );\n    });\n  }\n\n  getARIASelector(node: Node): Selector|undefined {\n    return this.#logger.timed(`getARIASelector: ${this.#nodes.getOrInsert(node)} ${node.nodeName}`, () => {\n      return prefixSelector(computeARIASelector(node, this.#bindings), 'aria');\n    });\n  }\n}\n"]}