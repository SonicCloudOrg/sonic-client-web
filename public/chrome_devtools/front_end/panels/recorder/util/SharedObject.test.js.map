{"version":3,"file":"SharedObject.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/recorder/util/SharedObject.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Util from './util.js';\n\ndescribe('SharedObject', () => {\n  it('should work', async () => {\n    // The test object\n    const testObject = {value: false};\n\n    const object = new Util.SharedObject.SharedObject(\n        () => {\n          testObject.value = true;\n          return {...testObject};\n        },\n        object => {\n          object.value = false;\n        });\n\n    // No one acquired.\n    assert.isFalse(testObject.value);\n\n    // First acquire.\n    const [object1, release1] = await object.acquire();\n    // Should be created.\n    assert.notStrictEqual(object1, testObject);\n    // Acquired actually occured.\n    assert.isTrue(testObject.value);\n\n    // The second object should be the same.\n    const [object2, release2] = await object.acquire();\n    // Should equal the first acquired object.\n    assert.strictEqual(object2, object1);\n    // Should still be true.\n    assert.isTrue(object1.value);\n\n    // First release (can be in any order).\n    await release1();\n    // Should still be true.\n    assert.isTrue(object1.value);\n\n    // Second release.\n    await release2();\n    assert.isFalse(object1.value);\n  });\n  it('should work with run', async () => {\n    // The test object\n    const testObject = {value: false};\n\n    const object = new Util.SharedObject.SharedObject(\n        () => {\n          testObject.value = true;\n          return {...testObject};\n        },\n        object => {\n          object.value = false;\n        });\n\n    // No one acquired.\n    assert.isFalse(testObject.value);\n\n    let finalObject: {value: boolean}|undefined;\n    const promises = [];\n\n    // First acquire.\n    promises.push(object.run(async object1 => {\n      // Should be created.\n      assert.notStrictEqual(object1, testObject);\n      // Acquired actually occured.\n      assert.isTrue(testObject.value);\n\n      promises.push(object.run(async object2 => {\n        // Should equal the first acquired object.\n        assert.strictEqual(object2, object1);\n        // Should still be true.\n        assert.isTrue(object1.value);\n\n        finalObject = object1;\n      }));\n    }));\n\n    await Promise.all(promises);\n\n    assert.exists(finalObject);\n    assert.isFalse(finalObject?.value);\n  });\n});\n"]}