{"version":3,"file":"RecorderController.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/recorder/RecorderController.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/es_modules_import */\n\nimport {\n  describeWithEnvironment,\n  setupActionRegistry,\n} from '../../testing/EnvironmentHelpers.js';\nimport * as Coordinator from '../../ui/components/render_coordinator/render_coordinator.js';\n\nimport * as Components from './components/components.js';\nimport * as Models from './models/models.js';\nimport {RecorderActions} from './recorder-actions/recorder-actions.js';\nimport {RecorderController} from './recorder.js';\n\nconst coordinator = Coordinator.RenderCoordinator.RenderCoordinator.instance();\n\ndescribeWithEnvironment('RecorderController', () => {\n  setupActionRegistry();\n\n  function makeRecording(): Models.RecordingStorage.StoredRecording {\n    const step = {\n      type: Models.Schema.StepType.Navigate as const,\n      url: 'https://example.com',\n    };\n    const recording = {\n      storageName: 'test',\n      flow: {title: 'test', steps: [step]},\n    };\n    return recording;\n  }\n\n  async function setupController(\n      recording: Models.RecordingStorage.StoredRecording,\n      ): Promise<RecorderController.RecorderController> {\n    const controller = new RecorderController.RecorderController();\n    controller.setCurrentPageForTesting(RecorderController.Pages.RecordingPage);\n    controller.setCurrentRecordingForTesting(recording);\n    controller.connectedCallback();\n    await coordinator.done();\n    return controller;\n  }\n\n  describe('Navigation', () => {\n    it('should return back to the previous page on recordingcancelled event', async () => {\n      const previousPage = RecorderController.Pages.AllRecordingsPage;\n      const controller = new RecorderController.RecorderController();\n      controller.setCurrentPageForTesting(previousPage);\n      controller.setCurrentPageForTesting(\n          RecorderController.Pages.CreateRecordingPage,\n      );\n      controller.connectedCallback();\n      await coordinator.done();\n\n      const createRecordingView = controller.shadowRoot?.querySelector(\n          'devtools-create-recording-view',\n      );\n      assert.ok(createRecordingView);\n      createRecordingView?.dispatchEvent(\n          new Components.CreateRecordingView.RecordingCancelledEvent(),\n      );\n\n      assert.strictEqual(controller.getCurrentPageForTesting(), previousPage);\n    });\n  });\n\n  describe('StepView', () => {\n    async function dispatchRecordingViewEvent(\n        controller: RecorderController.RecorderController,\n        event: Event,\n        ): Promise<void> {\n      const recordingView = controller.shadowRoot?.querySelector(\n          'devtools-recording-view',\n      );\n      assert.ok(recordingView);\n      recordingView?.dispatchEvent(event);\n      await coordinator.done();\n    }\n\n    beforeEach(() => {\n      Models.RecordingStorage.RecordingStorage.instance().clearForTest();\n    });\n\n    after(() => {\n      Models.RecordingStorage.RecordingStorage.instance().clearForTest();\n    });\n\n    it('should add a new step after a step', async () => {\n      const recording = makeRecording();\n      const controller = await setupController(recording);\n\n      await dispatchRecordingViewEvent(\n          controller,\n          new Components.StepView.AddStep(\n              recording.flow.steps[0],\n              Components.StepView.AddStepPosition.AFTER,\n              ),\n      );\n\n      const flow = controller.getUserFlow();\n      assert.deepStrictEqual(flow, {\n        title: 'test',\n        steps: [\n          {\n            type: Models.Schema.StepType.Navigate as const,\n            url: 'https://example.com',\n          },\n          {\n            type: Models.Schema.StepType.WaitForElement as const,\n            selectors: ['body'],\n          },\n        ],\n      });\n    });\n\n    it('should add a new step after a section', async () => {\n      const recording = makeRecording();\n      const controller = await setupController(recording);\n\n      const sections = controller.getSectionsForTesting();\n      if (!sections) {\n        throw new Error('Controller is missing sections');\n      }\n      assert.lengthOf(sections, 1);\n      await dispatchRecordingViewEvent(\n          controller,\n          new Components.StepView.AddStep(\n              sections[0],\n              Components.StepView.AddStepPosition.AFTER,\n              ),\n      );\n\n      const flow = controller.getUserFlow();\n      assert.deepStrictEqual(flow, {\n        title: 'test',\n        steps: [\n          {\n            type: Models.Schema.StepType.Navigate as const,\n            url: 'https://example.com',\n          },\n          {\n            type: Models.Schema.StepType.WaitForElement as const,\n            selectors: ['body'],\n          },\n        ],\n      });\n    });\n\n    it('should add a new step before a step', async () => {\n      const recording = makeRecording();\n      const controller = await setupController(recording);\n\n      await dispatchRecordingViewEvent(\n          controller,\n          new Components.StepView.AddStep(\n              recording.flow.steps[0],\n              Components.StepView.AddStepPosition.BEFORE,\n              ),\n      );\n\n      const flow = controller.getUserFlow();\n      assert.deepStrictEqual(flow, {\n        title: 'test',\n        steps: [\n          {\n            type: Models.Schema.StepType.WaitForElement as const,\n            selectors: ['body'],\n          },\n          {\n            type: Models.Schema.StepType.Navigate as const,\n            url: 'https://example.com',\n          },\n        ],\n      });\n    });\n\n    it('should delete a step', async () => {\n      const recording = makeRecording();\n      const controller = await setupController(recording);\n\n      await dispatchRecordingViewEvent(\n          controller,\n          new Components.StepView.RemoveStep(recording.flow.steps[0]),\n      );\n\n      const flow = controller.getUserFlow();\n      assert.deepStrictEqual(flow, {title: 'test', steps: []});\n    });\n\n    it('should adding a new step before a step with a breakpoint update the breakpoint indexes correctly', async () => {\n      const recording = makeRecording();\n      const controller = await setupController(recording);\n      const stepIndex = 3;\n\n      await dispatchRecordingViewEvent(\n          controller,\n          new Components.StepView.AddBreakpointEvent(stepIndex),\n      );\n      assert.deepEqual(controller.getStepBreakpointIndexesForTesting(), [\n        stepIndex,\n      ]);\n      await dispatchRecordingViewEvent(\n          controller,\n          new Components.StepView.AddStep(\n              recording.flow.steps[0],\n              Components.StepView.AddStepPosition.BEFORE,\n              ),\n      );\n\n      // Breakpoint index moves to the next index\n      assert.deepEqual(controller.getStepBreakpointIndexesForTesting(), [\n        stepIndex + 1,\n      ]);\n    });\n\n    it('should removing a step before a step with a breakpoint update the breakpoint indexes correctly', async () => {\n      const recording = makeRecording();\n      const controller = await setupController(recording);\n      const stepIndex = 3;\n\n      await dispatchRecordingViewEvent(\n          controller,\n          new Components.StepView.AddBreakpointEvent(stepIndex),\n      );\n      assert.deepEqual(controller.getStepBreakpointIndexesForTesting(), [\n        stepIndex,\n      ]);\n      await dispatchRecordingViewEvent(\n          controller,\n          new Components.StepView.RemoveStep(recording.flow.steps[0]),\n      );\n\n      // Breakpoint index moves to the previous index\n      assert.deepEqual(controller.getStepBreakpointIndexesForTesting(), [\n        stepIndex - 1,\n      ]);\n    });\n\n    it('should removing a step with a breakpoint remove the breakpoint index as well', async () => {\n      const recording = makeRecording();\n      const controller = await setupController(recording);\n      const stepIndex = 0;\n\n      await dispatchRecordingViewEvent(\n          controller,\n          new Components.StepView.AddBreakpointEvent(stepIndex),\n      );\n      assert.deepEqual(controller.getStepBreakpointIndexesForTesting(), [\n        stepIndex,\n      ]);\n      await dispatchRecordingViewEvent(\n          controller,\n          new Components.StepView.RemoveStep(recording.flow.steps[stepIndex]),\n      );\n\n      // Breakpoint index is removed\n      assert.deepEqual(controller.getStepBreakpointIndexesForTesting(), []);\n    });\n\n    it('should \"add breakpoint\" event add a breakpoint', async () => {\n      const recording = makeRecording();\n      const controller = await setupController(recording);\n      const stepIndex = 1;\n\n      assert.deepEqual(controller.getStepBreakpointIndexesForTesting(), []);\n      await dispatchRecordingViewEvent(\n          controller,\n          new Components.StepView.AddBreakpointEvent(stepIndex),\n      );\n\n      assert.deepEqual(controller.getStepBreakpointIndexesForTesting(), [\n        stepIndex,\n      ]);\n    });\n\n    it('should \"remove breakpoint\" event remove a breakpoint', async () => {\n      const recording = makeRecording();\n      const controller = await setupController(recording);\n      const stepIndex = 1;\n\n      await dispatchRecordingViewEvent(\n          controller,\n          new Components.StepView.AddBreakpointEvent(stepIndex),\n      );\n      assert.deepEqual(controller.getStepBreakpointIndexesForTesting(), [\n        stepIndex,\n      ]);\n      await dispatchRecordingViewEvent(\n          controller,\n          new Components.StepView.RemoveBreakpointEvent(stepIndex),\n      );\n\n      assert.deepEqual(controller.getStepBreakpointIndexesForTesting(), []);\n    });\n  });\n\n  describe('Create new recording action', () => {\n    it('should execute action', async () => {\n      const recording = makeRecording();\n      const controller = await setupController(recording);\n\n      await controller.handleActions(RecorderActions.CreateRecording);\n\n      assert.strictEqual(\n          controller.getCurrentPageForTesting(),\n          RecorderController.Pages.CreateRecordingPage,\n      );\n    });\n\n    it('should not execute action while recording', async () => {\n      const recording = makeRecording();\n      const controller = await setupController(recording);\n\n      controller.setIsRecordingStateForTesting(true);\n\n      await controller.handleActions(RecorderActions.CreateRecording);\n\n      assert.strictEqual(\n          controller.getCurrentPageForTesting(),\n          RecorderController.Pages.RecordingPage,\n      );\n    });\n\n    it('should not execute action while replaying', async () => {\n      const recording = makeRecording();\n      const controller = await setupController(recording);\n\n      controller.setRecordingStateForTesting({\n        isPlaying: true,\n        isPausedOnBreakpoint: false,\n      });\n\n      await controller.handleActions(RecorderActions.CreateRecording);\n\n      assert.strictEqual(\n          controller.getCurrentPageForTesting(),\n          RecorderController.Pages.RecordingPage,\n      );\n    });\n  });\n\n  describe('Action is possible', () => {\n    it('should return true for create action when not replaying or recording', async () => {\n      const recording = makeRecording();\n      const controller = await setupController(recording);\n\n      assert.isTrue(\n          controller.isActionPossible(RecorderActions.CreateRecording),\n      );\n    });\n\n    it('should return false for create action when recording', async () => {\n      const recording = makeRecording();\n      const controller = await setupController(recording);\n\n      controller.setRecordingStateForTesting({\n        isPlaying: true,\n        isPausedOnBreakpoint: false,\n      });\n\n      assert.isFalse(\n          controller.isActionPossible(RecorderActions.CreateRecording),\n      );\n    });\n\n    it('should return false for create action when replaying', async () => {\n      const recording = makeRecording();\n      const controller = await setupController(recording);\n\n      controller.setIsRecordingStateForTesting(true);\n\n      assert.isFalse(\n          controller.isActionPossible(RecorderActions.CreateRecording),\n      );\n    });\n\n    it('should return correct value for start/stop action', async () => {\n      const recording = makeRecording();\n      const controller = await setupController(recording);\n\n      assert.isTrue(\n          controller.isActionPossible(RecorderActions.StartRecording),\n      );\n\n      controller.setRecordingStateForTesting({\n        isPlaying: true,\n        isPausedOnBreakpoint: false,\n      });\n      assert.isFalse(\n          controller.isActionPossible(RecorderActions.StartRecording),\n      );\n    });\n\n    it('should return true for replay action when on the recording page', async () => {\n      const recording = makeRecording();\n      const controller = await setupController(recording);\n\n      controller.setCurrentPageForTesting(\n          RecorderController.Pages.RecordingPage,\n      );\n\n      assert.isTrue(\n          controller.isActionPossible(RecorderActions.ReplayRecording),\n      );\n    });\n\n    it('should return false for replay action when not on the recording page', async () => {\n      const recording = makeRecording();\n      const controller = await setupController(recording);\n\n      controller.setCurrentPageForTesting(\n          RecorderController.Pages.AllRecordingsPage,\n      );\n      assert.isFalse(\n          controller.isActionPossible(RecorderActions.ReplayRecording),\n      );\n\n      controller.setCurrentPageForTesting(\n          RecorderController.Pages.CreateRecordingPage,\n      );\n      assert.isFalse(\n          controller.isActionPossible(RecorderActions.ReplayRecording),\n      );\n\n      controller.setCurrentPageForTesting(RecorderController.Pages.StartPage);\n      assert.isFalse(\n          controller.isActionPossible(RecorderActions.ReplayRecording),\n      );\n\n      controller.setRecordingStateForTesting({\n        isPlaying: true,\n        isPausedOnBreakpoint: false,\n      });\n      controller.setCurrentPageForTesting(\n          RecorderController.Pages.RecordingPage,\n      );\n      assert.isFalse(\n          controller.isActionPossible(RecorderActions.ReplayRecording),\n      );\n    });\n\n    it('should true for toggle when on the recording page', async () => {\n      const recording = makeRecording();\n      const controller = await setupController(recording);\n\n      controller.setCurrentPageForTesting(\n          RecorderController.Pages.RecordingPage,\n      );\n      assert.isTrue(\n          controller.isActionPossible(RecorderActions.ToggleCodeView),\n      );\n    });\n\n    it('should false for toggle when on the recording page', async () => {\n      const recording = makeRecording();\n      const controller = await setupController(recording);\n\n      controller.setCurrentPageForTesting(\n          RecorderController.Pages.AllRecordingsPage,\n      );\n      assert.isFalse(\n          controller.isActionPossible(RecorderActions.ToggleCodeView),\n      );\n\n      controller.setCurrentPageForTesting(RecorderController.Pages.StartPage);\n      assert.isFalse(\n          controller.isActionPossible(RecorderActions.ToggleCodeView),\n      );\n\n      controller.setCurrentPageForTesting(\n          RecorderController.Pages.AllRecordingsPage,\n      );\n      assert.isFalse(\n          controller.isActionPossible(RecorderActions.ToggleCodeView),\n      );\n    });\n  });\n});\n"]}