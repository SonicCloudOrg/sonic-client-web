{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../../../front_end/panels/utils/utils.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Formatter from '../../models/formatter/formatter.js';\nimport type * as Diff from '../../third_party/diff/diff.js';\nimport * as DiffView from '../../ui/components/diff_view/diff_view.js';\n\n// These utilities are packaged in a class to allow unittests to stub or spy the implementation.\nexport class PanelUtils {\n  static iconDataForResourceType(resourceType: Common.ResourceType.ResourceType): {iconName: string, color: string} {\n    if (resourceType.isDocument()) {\n      return {iconName: 'file-document', color: 'var(--icon-file-document)'};\n    }\n    if (resourceType.isImage()) {\n      return {iconName: 'file-image', color: 'var(--icon-file-image)'};\n    }\n    if (resourceType.isFont()) {\n      return {iconName: 'file-font', color: 'var(--icon-file-font)'};\n    }\n    if (resourceType.isScript()) {\n      return {iconName: 'file-script', color: 'var(--icon-file-script)'};\n    }\n    if (resourceType.isStyleSheet()) {\n      return {iconName: 'file-stylesheet', color: 'var(--icon-file-styles)'};\n    }\n    if (resourceType.name() === Common.ResourceType.resourceTypes.Manifest.name()) {\n      return {iconName: 'file-manifest', color: 'var(--icon-default)'};\n    }\n    if (resourceType.name() === Common.ResourceType.resourceTypes.Wasm.name()) {\n      return {iconName: 'file-wasm', color: 'var(--icon-default)'};\n    }\n    if (resourceType.name() === Common.ResourceType.resourceTypes.WebSocket.name()) {\n      return {iconName: 'file-websocket', color: 'var(--icon-default)'};\n    }\n    if (resourceType.name() === Common.ResourceType.resourceTypes.Media.name()) {\n      return {iconName: 'file-media', color: 'var(--icon-file-media)'};\n    }\n    if (resourceType.isWebbundle()) {\n      return {iconName: 'bundle', color: 'var(--icon-default)'};\n    }\n\n    if (resourceType.name() === Common.ResourceType.resourceTypes.Fetch.name() ||\n        resourceType.name() === Common.ResourceType.resourceTypes.XHR.name()) {\n      return {iconName: 'file-fetch-xhr', color: 'var(--icon-default)'};\n    }\n\n    return {iconName: 'file-generic', color: 'var(--icon-default)'};\n  }\n\n  static async formatCSSChangesFromDiff(diff: Diff.Diff.DiffArray): Promise<string> {\n    const indent = '  ';\n    const {originalLines, currentLines, rows} = DiffView.DiffView.buildDiffRows(diff);\n    const originalRuleMaps = await buildStyleRuleMaps(originalLines.join('\\n'));\n    const currentRuleMaps = await buildStyleRuleMaps(currentLines.join('\\n'));\n\n    let changes = '';\n    let recordedOriginalSelector, recordedCurrentSelector;\n    let hasOpenDeclarationBlock = false;\n    for (const {currentLineNumber, originalLineNumber, type} of rows) {\n      if (type !== DiffView.DiffView.RowType.Deletion && type !== DiffView.DiffView.RowType.Addition) {\n        continue;\n      }\n\n      const isDeletion = type === DiffView.DiffView.RowType.Deletion;\n      const lines = isDeletion ? originalLines : currentLines;\n      // Diff line arrays starts at 0, but line numbers start at 1.\n      const lineIndex = isDeletion ? originalLineNumber - 1 : currentLineNumber - 1;\n      const line = lines[lineIndex].trim();\n      const {declarationIDToStyleRule, styleRuleIDToStyleRule} = isDeletion ? originalRuleMaps : currentRuleMaps;\n      let styleRule;\n      let prefix = '';\n      if (declarationIDToStyleRule.has(lineIndex)) {\n        styleRule = declarationIDToStyleRule.get(lineIndex) as FormattableStyleRule;\n        const selector = styleRule.selector;\n        // Use the equality of selector strings as a best-effort check for the equality of style rules.\n        if (selector !== recordedOriginalSelector && selector !== recordedCurrentSelector) {\n          prefix += `${selector} {\\n`;\n        }\n        prefix += indent;\n        hasOpenDeclarationBlock = true;\n      } else {\n        if (hasOpenDeclarationBlock) {\n          prefix = '}\\n\\n';\n          hasOpenDeclarationBlock = false;\n        }\n        if (styleRuleIDToStyleRule.has(lineIndex)) {\n          styleRule = styleRuleIDToStyleRule.get(lineIndex);\n        }\n      }\n\n      const processedLine = isDeletion ? `/* ${line} */` : line;\n      changes += prefix + processedLine + '\\n';\n      if (isDeletion) {\n        recordedOriginalSelector = styleRule?.selector;\n      } else {\n        recordedCurrentSelector = styleRule?.selector;\n      }\n    }\n\n    if (changes.length > 0) {\n      changes += '}';\n    }\n    return changes;\n  }\n\n  static highlightElement(element: HTMLElement): void {\n    element.scrollIntoViewIfNeeded();\n    element.animate(\n        [\n          {offset: 0, backgroundColor: 'rgba(255, 255, 0, 0.2)'},\n          {offset: 0.1, backgroundColor: 'rgba(255, 255, 0, 0.7)'},\n          {offset: 1, backgroundColor: 'transparent'},\n        ],\n        {duration: 2000, easing: 'cubic-bezier(0, 0, 0.2, 1)'});\n  }\n}\n\ninterface FormattableStyleRule {\n  rule: Formatter.FormatterWorkerPool.CSSRule;\n  selector: string;\n}\n\nasync function buildStyleRuleMaps(content: string): Promise<{\n  declarationIDToStyleRule: Map<number, FormattableStyleRule>,\n  styleRuleIDToStyleRule: Map<number, FormattableStyleRule>,\n}> {\n  const rules = await new Promise<Formatter.FormatterWorkerPool.CSSRule[]>(res => {\n    const rules: Formatter.FormatterWorkerPool.CSSRule[] = [];\n    Formatter.FormatterWorkerPool.formatterWorkerPool().parseCSS(content, (isLastChunk, currentRules) => {\n      rules.push(...currentRules);\n      if (isLastChunk) {\n        res(rules);\n      }\n    });\n  });\n\n  // We use line numbers as unique IDs for rules and declarations\n  const declarationIDToStyleRule = new Map<number, FormattableStyleRule>();\n  const styleRuleIDToStyleRule = new Map<number, FormattableStyleRule>();\n  for (const rule of rules) {\n    if ('styleRange' in rule) {\n      const selector = rule.selectorText.split('\\n').pop()?.trim();\n      if (!selector) {\n        continue;\n      }\n      const styleRule = {rule, selector};\n      styleRuleIDToStyleRule.set(rule.styleRange.startLine, styleRule);\n      for (const property of rule.properties) {\n        declarationIDToStyleRule.set(property.range.startLine, styleRule);\n      }\n    }\n  }\n  return {declarationIDToStyleRule, styleRuleIDToStyleRule};\n}\n"]}