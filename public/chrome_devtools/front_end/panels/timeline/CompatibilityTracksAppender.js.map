{"version":3,"file":"CompatibilityTracksAppender.js","sourceRoot":"","sources":["../../../../../../front_end/panels/timeline/CompatibilityTracksAppender.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as Root from '../../core/root/root.js';\nimport * as TraceEngine from '../../models/trace/trace.js';\nimport type * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\nimport * as ThemeSupport from '../../ui/legacy/theme_support/theme_support.js';\n\nimport {AnimationsTrackAppender} from './AnimationsTrackAppender.js';\nimport {getEventLevel} from './AppenderUtils.js';\nimport * as TimelineComponents from './components/components.js';\nimport {getEventStyle} from './EventUICategory.js';\nimport {ExtensionDataGatherer} from './ExtensionDataGatherer.js';\nimport {ExtensionTrackAppender} from './ExtensionTrackAppender.js';\nimport {GPUTrackAppender} from './GPUTrackAppender.js';\nimport {InteractionsTrackAppender} from './InteractionsTrackAppender.js';\nimport {LayoutShiftsTrackAppender} from './LayoutShiftsTrackAppender.js';\nimport {ThreadAppender} from './ThreadAppender.js';\nimport {\n  EntryType,\n  InstantEventVisibleDurationMs,\n  type TimelineFlameChartEntry,\n} from './TimelineFlameChartDataProvider.js';\nimport {TimingsTrackAppender} from './TimingsTrackAppender.js';\n\nexport type HighlightedEntryInfo = {\n  title: string,\n  formattedTime: string,\n  warningElements?: HTMLSpanElement[],\n};\n\n/**\n * Track appenders add the data of each track into the timeline flame\n * chart. Each track appender also implements functions tha allow the\n * canvas renderer to gather more information about an event in a track,\n * like its display name or color.\n *\n * At the moment, tracks in the timeline flame chart are appended in\n * two locations: in the TimelineFlameChartDataProvider and in the track\n * appenders exported by this module. As part of the work to use a new\n * trace parsing engine, a track appender will be defined with this API\n * for each of the tracks in the timeline. With this implementation in\n * place its counterpart in the TimelineFlameChartDataProvider can be\n * removed. This processes of doing this for a track is referred to as\n * \"migrating the track\" to the new system.\n *\n * The migration implementation will result beneficial among other\n * things because the complexity of rendering the details of each track\n * is distributed among multiple standalone modules.\n * Read more at go/rpp-flamechart-arch\n */\n\nexport interface TrackAppender {\n  /**\n   * The unique name given to the track appender.\n   */\n  appenderName: TrackAppenderName;\n\n  /**\n   * Appends into the flame chart data the data corresponding to a track.\n   * @param level the horizontal level of the flame chart events where the\n   * track's events will start being appended.\n   * @param expanded wether the track should be rendered expanded.\n   * @returns the first available level to append more data after having\n   * appended the track's events.\n   */\n  appendTrackAtLevel(level: number, expanded?: boolean): number;\n  /**\n   * Returns the color an event is shown with in the timeline.\n   */\n  colorForEvent(event: TraceEngine.Types.TraceEvents.TraceEventData): string;\n  /**\n   * Returns the title an event is shown with in the timeline.\n   */\n  titleForEvent(event: TraceEngine.Types.TraceEvents.TraceEventData): string;\n  /**\n   * Returns the info shown when an event in the timeline is hovered.\n   */\n  highlightedEntryInfo(event: TraceEngine.Types.TraceEvents.TraceEventData): HighlightedEntryInfo;\n}\n\nexport const TrackNames =\n    ['Animations', 'Timings', 'Interactions', 'GPU', 'LayoutShifts', 'Thread', 'Thread_AuctionWorklet', 'Extension'] as\n    const;\n// Network track will use TrackAppender interface, but it won't be shown in Main flamechart.\n// So manually add it to TrackAppenderName.\nexport type TrackAppenderName = typeof TrackNames[number]|'Network';\n\nexport class CompatibilityTracksAppender {\n  #trackForLevel = new Map<number, TrackAppender>();\n  #trackForGroup = new Map<PerfUI.FlameChart.Group, TrackAppender>();\n  #eventsForTrack = new Map<TrackAppender, TraceEngine.Types.TraceEvents.TraceEventData[]>();\n  #trackEventsForTreeview = new Map<TrackAppender, TraceEngine.Types.TraceEvents.TraceEventData[]>();\n  #flameChartData: PerfUI.FlameChart.FlameChartTimelineData;\n  #traceParsedData: TraceEngine.Handlers.Types.TraceParseData;\n  #entryData: TimelineFlameChartEntry[];\n  #colorGenerator: Common.Color.Generator;\n  #allTrackAppenders: TrackAppender[] = [];\n  #visibleTrackNames: Set<TrackAppenderName> = new Set([...TrackNames]);\n\n  #legacyEntryTypeByLevel: EntryType[];\n  #timingsTrackAppender: TimingsTrackAppender;\n  #animationsTrackAppender: AnimationsTrackAppender;\n  #interactionsTrackAppender: InteractionsTrackAppender;\n  #gpuTrackAppender: GPUTrackAppender;\n  #layoutShiftsTrackAppender: LayoutShiftsTrackAppender;\n  #threadAppenders: ThreadAppender[] = [];\n\n  /**\n   * @param flameChartData the data used by the flame chart renderer on\n   * which the track data will be appended.\n   * @param traceParsedData the trace parsing engines output.\n   * @param entryData the array containing all event to be rendered in\n   * the flamechart.\n   * @param legacyEntryTypeByLevel an array containing the type of\n   * each entry in the entryData array. Indexed by the position the\n   * corresponding entry occupies in the entryData array. This reference\n   * is needed only for compatibility with the legacy flamechart\n   * architecture and should be removed once all tracks use the new\n   * system.\n   */\n  constructor(\n      flameChartData: PerfUI.FlameChart.FlameChartTimelineData,\n      traceParsedData: TraceEngine.Handlers.Types.TraceParseData, entryData: TimelineFlameChartEntry[],\n      legacyEntryTypeByLevel: EntryType[]) {\n    this.#flameChartData = flameChartData;\n    this.#traceParsedData = traceParsedData;\n    this.#entryData = entryData;\n    this.#colorGenerator = new Common.Color.Generator(\n        /* hueSpace= */ {min: 30, max: 55, count: undefined},\n        /* satSpace= */ {min: 70, max: 100, count: 6},\n        /* lightnessSpace= */ 50,\n        /* alphaSpace= */ 0.7);\n    this.#legacyEntryTypeByLevel = legacyEntryTypeByLevel;\n    this.#timingsTrackAppender = new TimingsTrackAppender(this, this.#traceParsedData, this.#colorGenerator);\n    this.#allTrackAppenders.push(this.#timingsTrackAppender);\n\n    this.#interactionsTrackAppender = new InteractionsTrackAppender(this, this.#traceParsedData, this.#colorGenerator);\n    this.#allTrackAppenders.push(this.#interactionsTrackAppender);\n\n    this.#animationsTrackAppender = new AnimationsTrackAppender(this, this.#traceParsedData);\n    this.#allTrackAppenders.push(this.#animationsTrackAppender);\n\n    this.#gpuTrackAppender = new GPUTrackAppender(this, this.#traceParsedData);\n    this.#allTrackAppenders.push(this.#gpuTrackAppender);\n\n    // Layout Shifts track in OPP was called the \"Experience\" track even though\n    // all it shows are layout shifts.\n    this.#layoutShiftsTrackAppender = new LayoutShiftsTrackAppender(this, this.#traceParsedData);\n    this.#allTrackAppenders.push(this.#layoutShiftsTrackAppender);\n\n    this.#addThreadAppenders();\n    if (Root.Runtime.experiments.isEnabled(Root.Runtime.ExperimentName.TIMELINE_EXTENSIONS)) {\n      this.#addExtensionAppenders();\n    }\n    ThemeSupport.ThemeSupport.instance().addEventListener(ThemeSupport.ThemeChangeEvent.eventName, () => {\n      for (const group of this.#flameChartData.groups) {\n        // We only need to update the color here, because FlameChart will call `scheduleUpdate()` when theme is changed.\n        group.style.color = ThemeSupport.ThemeSupport.instance().getComputedValue('--sys-color-on-surface');\n        group.style.backgroundColor =\n            ThemeSupport.ThemeSupport.instance().getComputedValue('--sys-color-cdt-base-container');\n      }\n    });\n  }\n\n  setFlameChartDataAndEntryData(\n      flameChartData: PerfUI.FlameChart.FlameChartTimelineData, entryData: TimelineFlameChartEntry[],\n      legacyEntryTypeByLevel: EntryType[]): void {\n    this.#trackForGroup.clear();\n    this.#flameChartData = flameChartData;\n    this.#entryData = entryData;\n    this.#legacyEntryTypeByLevel = legacyEntryTypeByLevel;\n  }\n\n  getFlameChartTimelineData(): PerfUI.FlameChart.FlameChartTimelineData {\n    return this.#flameChartData;\n  }\n\n  #addExtensionAppenders(): void {\n    const tracks = ExtensionDataGatherer.instance().getExtensionData();\n    for (const trackData of tracks) {\n      this.#allTrackAppenders.push(new ExtensionTrackAppender(this, trackData));\n    }\n  }\n\n  #addThreadAppenders(): void {\n    const weight = (appender: ThreadAppender): number => {\n      switch (appender.threadType) {\n        case TraceEngine.Handlers.Threads.ThreadType.MAIN_THREAD: {\n          // Within tracks of the main thread, those with data\n          // from about:blank are treated with the lowest priority,\n          // since there's a chance they have only noise from the\n          // navigation to about:blank done on record and reload.\n          if (!appender.getUrl()) {\n            // We expect each appender to have a URL as we filter out empty URL\n            // processes, but in the event that we do not have a URL (can\n            // happen for a generic trace), return 2, to ensure these are put\n            // below any that do have value URLs.\n            return 2;\n          }\n          const asUrl = new URL(appender.getUrl());\n          if (asUrl.protocol === 'about:') {\n            return 2;\n          }\n          return (appender.isOnMainFrame && appender.getUrl() !== '') ? 0 : 1;\n        }\n        case TraceEngine.Handlers.Threads.ThreadType.WORKER:\n          return 3;\n        case TraceEngine.Handlers.Threads.ThreadType.RASTERIZER:\n          return 4;\n        case TraceEngine.Handlers.Threads.ThreadType.THREAD_POOL:\n          return 5;\n        case TraceEngine.Handlers.Threads.ThreadType.AUCTION_WORKLET:\n          return 6;\n        case TraceEngine.Handlers.Threads.ThreadType.OTHER:\n          return 7;\n        default:\n          return 8;\n      }\n    };\n    const threads = TraceEngine.Handlers.Threads.threadsInTrace(this.#traceParsedData);\n    const processedAuctionWorkletsIds = new Set<TraceEngine.Types.TraceEvents.ProcessID>();\n    const showAllEvents = Root.Runtime.experiments.isEnabled('timeline-show-all-events');\n\n    for (const {pid, tid, name, type} of threads) {\n      if (this.#traceParsedData.Meta.traceIsGeneric) {\n        // If the trace is generic, we just push all of the threads with no\n        // effort to differentiate them, hence overriding the thread type to be\n        // OTHER for all threads.\n        this.#threadAppenders.push(new ThreadAppender(\n            this, this.#traceParsedData, pid, tid, name, TraceEngine.Handlers.Threads.ThreadType.OTHER));\n        continue;\n      }\n      // These threads have no useful information. Omit them\n      if ((name === 'Chrome_ChildIOThread' || name === 'Compositor' || name === 'GpuMemoryThread') && !showAllEvents) {\n        continue;\n      }\n\n      const maybeWorklet = this.#traceParsedData.AuctionWorklets.worklets.get(pid);\n      if (processedAuctionWorkletsIds.has(pid)) {\n        // Keep track of this process to ensure we only add the following\n        // tracks once per process and not once per thread.\n        continue;\n      }\n      if (maybeWorklet) {\n        processedAuctionWorkletsIds.add(pid);\n        // Each AuctionWorklet event represents two threads:\n        // 1. the Utility Thread\n        // 2. the V8 Helper Thread\n        // Note that the names passed here are not used visually. TODO: remove this name?\n        this.#threadAppenders.push(new ThreadAppender(\n            this, this.#traceParsedData, pid, maybeWorklet.args.data.utilityThread.tid, 'auction-worket-utility',\n            TraceEngine.Handlers.Threads.ThreadType.AUCTION_WORKLET));\n        this.#threadAppenders.push(new ThreadAppender(\n            this, this.#traceParsedData, pid, maybeWorklet.args.data.v8HelperThread.tid, 'auction-worklet-v8helper',\n            TraceEngine.Handlers.Threads.ThreadType.AUCTION_WORKLET));\n        continue;\n      }\n\n      this.#threadAppenders.push(new ThreadAppender(this, this.#traceParsedData, pid, tid, name, type));\n    }\n\n    this.#threadAppenders.sort((a, b) => weight(a) - weight(b));\n    this.#allTrackAppenders.push(...this.#threadAppenders);\n  }\n\n  timingsTrackAppender(): TimingsTrackAppender {\n    return this.#timingsTrackAppender;\n  }\n\n  animationsTrackAppender(): AnimationsTrackAppender {\n    return this.#animationsTrackAppender;\n  }\n\n  interactionsTrackAppender(): InteractionsTrackAppender {\n    return this.#interactionsTrackAppender;\n  }\n\n  gpuTrackAppender(): GPUTrackAppender {\n    return this.#gpuTrackAppender;\n  }\n\n  layoutShiftsTrackAppender(): LayoutShiftsTrackAppender {\n    return this.#layoutShiftsTrackAppender;\n  }\n\n  threadAppenders(): ThreadAppender[] {\n    return this.#threadAppenders;\n  }\n\n  eventsInTrack(trackAppender: TrackAppender): TraceEngine.Types.TraceEvents.TraceEventData[] {\n    const cachedData = this.#eventsForTrack.get(trackAppender);\n    if (cachedData) {\n      return cachedData;\n    }\n\n    // Calculate the levels occupied by a track.\n    let trackStartLevel = null;\n    let trackEndLevel = null;\n    for (const [level, track] of this.#trackForLevel) {\n      if (track !== trackAppender) {\n        continue;\n      }\n      if (trackStartLevel === null) {\n        trackStartLevel = level;\n      }\n      trackEndLevel = level;\n    }\n\n    if (trackStartLevel === null || trackEndLevel === null) {\n      throw new Error(`Could not find events for track: ${trackAppender}`);\n    }\n    const entryLevels = this.#flameChartData.entryLevels;\n    const events = [];\n    for (let i = 0; i < entryLevels.length; i++) {\n      if (trackStartLevel <= entryLevels[i] && entryLevels[i] <= trackEndLevel) {\n        events.push(this.#entryData[i] as TraceEngine.Types.TraceEvents.TraceEventData);\n      }\n    }\n    events.sort((a, b) => a.ts - b.ts);\n    this.#eventsForTrack.set(trackAppender, events);\n    return events;\n  }\n\n  /**\n   * Gets the events to be shown in the tree views of the details pane\n   * (Bottom-up, Call tree, etc.). These are the events from the track\n   * that can be arranged in a tree shape.\n   */\n  eventsForTreeView(trackAppender: TrackAppender): TraceEngine.Types.TraceEvents.TraceEventData[] {\n    const cachedData = this.#trackEventsForTreeview.get(trackAppender);\n    if (cachedData) {\n      return cachedData;\n    }\n\n    let trackEvents = this.eventsInTrack(trackAppender);\n    if (!TraceEngine.Helpers.TreeHelpers.canBuildTreesFromEvents(trackEvents)) {\n      // Some tracks can include both async and sync events. When this\n      // happens, we use all events for the tree views if a trees can be\n      // built from both sync and async events. If this is not possible,\n      // async events are filtered out and only sync events are used\n      // (it's assumed a tree can always be built using a tracks sync\n      // events).\n      trackEvents = trackEvents.filter(e => !TraceEngine.Types.TraceEvents.isAsyncPhase(e.ph));\n    }\n    this.#trackEventsForTreeview.set(trackAppender, trackEvents);\n    return trackEvents;\n  }\n\n  /**\n   * Caches the track appender that owns a flame chart group. FlameChart\n   * groups are created for each track in the timeline. When an user\n   * selects a track in the UI, the track's group is passed to the model\n   * layer to inform about the selection.\n   */\n  registerTrackForGroup(group: PerfUI.FlameChart.Group, appender: TrackAppender): void {\n    this.#flameChartData.groups.push(group);\n    this.#trackForGroup.set(group, appender);\n  }\n\n  /**\n   * Returns number of tracks of given type already appended.\n   * Used to name the \"Raster Thread 6\" tracks, etc\n   */\n  getCurrentTrackCountForThreadType(threadType: TraceEngine.Handlers.Threads.ThreadType.RASTERIZER|\n                                    TraceEngine.Handlers.Threads.ThreadType.THREAD_POOL): number {\n    return this.#threadAppenders.filter(appender => appender.threadType === threadType && appender.headerAppended())\n        .length;\n  }\n\n  /**\n   * Looks up a FlameChart group for a given appender.\n   */\n  groupForAppender(targetAppender: TrackAppender): PerfUI.FlameChart.Group|null {\n    let foundGroup: PerfUI.FlameChart.Group|null = null;\n    for (const [group, appender] of this.#trackForGroup) {\n      if (appender === targetAppender) {\n        foundGroup = group;\n        break;\n      }\n    }\n    return foundGroup;\n  }\n\n  /**\n   * Given a FlameChart group, gets the events to be shown in the tree\n   * views if that group was registered by the appender system.\n   */\n  groupEventsForTreeView(group: PerfUI.FlameChart.Group): TraceEngine.Types.TraceEvents.TraceEventData[]|null {\n    const track = this.#trackForGroup.get(group);\n    if (!track) {\n      return null;\n    }\n    return this.eventsForTreeView(track);\n  }\n\n  /**\n   * Caches the track appender that owns a level. An appender takes\n   * ownership of a level when it appends data to it.\n   * The cache is useful to determine what appender should handle a\n   * query from the flame chart renderer when an event's feature (like\n   * style, title, etc.) is needed.\n   */\n  registerTrackForLevel(level: number, appender: TrackAppender): void {\n    // TODO(crbug.com/1442454) Figure out how to avoid the circular calls.\n    this.#trackForLevel.set(level, appender);\n  }\n\n  /**\n   * Adds an event to the flame chart data at a defined level.\n   * @param event the event to be appended,\n   * @param level the level to append the event,\n   * @param appender the track which the event belongs to.\n   * @returns the index of the event in all events to be rendered in the flamechart.\n   */\n  appendEventAtLevel(event: TraceEngine.Types.TraceEvents.TraceEventData, level: number, appender: TrackAppender):\n      number {\n    // TODO(crbug.com/1442454) Figure out how to avoid the circular calls.\n    this.#trackForLevel.set(level, appender);\n    const index = this.#entryData.length;\n    this.#entryData.push(event);\n    this.#legacyEntryTypeByLevel[level] = EntryType.TrackAppender;\n    this.#flameChartData.entryLevels[index] = level;\n    this.#flameChartData.entryStartTimes[index] = TraceEngine.Helpers.Timing.microSecondsToMilliseconds(event.ts);\n    const msDuration = event.dur ||\n        TraceEngine.Helpers.Timing.millisecondsToMicroseconds(\n            InstantEventVisibleDurationMs as TraceEngine.Types.Timing.MilliSeconds);\n    this.#flameChartData.entryTotalTimes[index] = TraceEngine.Helpers.Timing.microSecondsToMilliseconds(msDuration);\n    return index;\n  }\n\n  /**\n   * Adds into the flame chart data a list of trace events.\n   * @param events the trace events that will be appended to the flame chart.\n   * The events should be taken straight from the trace handlers. The handlers\n   * should sort the events by start time, and the parent event is before the\n   * child.\n   * @param trackStartLevel the flame chart level from which the events will\n   * be appended.\n   * @param appender the track that the trace events belong to.\n   * @param eventAppendedCallback an optional function called after the\n   * event has been added to the timeline data. This allows the caller\n   * to know f.e. the position of the event in the entry data. Use this\n   * hook to customize the data after it has been appended, f.e. to add\n   * decorations to a set of the entries.\n   * @returns the next level after the last occupied by the appended these\n   * trace events (the first available level to append next track).\n   */\n  appendEventsAtLevel<T extends TraceEngine.Types.TraceEvents.TraceEventData>(\n      events: readonly T[], trackStartLevel: number, appender: TrackAppender,\n      eventAppendedCallback?: (event: T, index: number) => void): number {\n    const lastUsedTimeByLevel: number[] = [];\n    for (let i = 0; i < events.length; ++i) {\n      const event = events[i];\n      if (!this.entryIsVisibleInTimeline(event)) {\n        continue;\n      }\n\n      const level = getEventLevel(event, lastUsedTimeByLevel);\n      const index = this.appendEventAtLevel(event, trackStartLevel + level, appender);\n      eventAppendedCallback?.(event, index);\n    }\n\n    this.#legacyEntryTypeByLevel.length = trackStartLevel + lastUsedTimeByLevel.length;\n    this.#legacyEntryTypeByLevel.fill(EntryType.TrackAppender, trackStartLevel);\n    return trackStartLevel + lastUsedTimeByLevel.length;\n  }\n\n  entryIsVisibleInTimeline(entry: TraceEngine.Types.TraceEvents.TraceEventData): boolean {\n    if (this.#traceParsedData.Meta.traceIsGeneric) {\n      return true;\n    }\n\n    if (TraceEngine.Types.TraceEvents.isTraceEventUpdateCounters(entry)) {\n      // These events are not \"visible\" on the timeline because they are instant events with 0 duration.\n      // However, the Memory view (CountersGraph in the codebase) relies on\n      // finding the UpdateCounters events within the user's active trace\n      // selection in order to show the memory usage for the selected time\n      // period.\n      // Therefore we mark them as visible so they are appended onto the Thread\n      // track, and hence accessible by the CountersGraph view.\n      return true;\n    }\n\n    // Gate the visibility of post message events behind the experiement flag\n    if (TraceEngine.Types.TraceEvents.isTraceEventSchedulePostMessage(entry) ||\n        TraceEngine.Types.TraceEvents.isTraceEventHandlePostMessage(entry)) {\n      return Root.Runtime.experiments.isEnabled(Root.Runtime.ExperimentName.TIMELINE_SHOW_POST_MESSAGE_EVENTS);\n    }\n\n    if (TraceEngine.Types.Extensions.isSyntheticExtensionEntry(entry)) {\n      return true;\n    }\n\n    // Default styles are globally defined for each event name. Some\n    // events are hidden by default.\n    const eventStyle = getEventStyle(entry.name as TraceEngine.Types.TraceEvents.KnownEventName);\n    const eventIsTiming = TraceEngine.Types.TraceEvents.isTraceEventConsoleTime(entry) ||\n        TraceEngine.Types.TraceEvents.isTraceEventPerformanceMeasure(entry) ||\n        TraceEngine.Types.TraceEvents.isTraceEventPerformanceMark(entry);\n\n    return (eventStyle && !eventStyle.hidden) || eventIsTiming;\n  }\n\n  /**\n   * Gets the all track appenders that have been set to be visible.\n   */\n  allVisibleTrackAppenders(): TrackAppender[] {\n    return this.#allTrackAppenders.filter(track => this.#visibleTrackNames.has(track.appenderName));\n  }\n\n  allThreadAppendersByProcess(): Map<TraceEngine.Types.TraceEvents.ProcessID, ThreadAppender[]> {\n    const appenders = this.allVisibleTrackAppenders();\n    const result = new Map<TraceEngine.Types.TraceEvents.ProcessID, ThreadAppender[]>();\n    for (const appender of appenders) {\n      if (!(appender instanceof ThreadAppender)) {\n        continue;\n      }\n      const existing = result.get(appender.processId()) ?? [];\n      existing.push(appender);\n      result.set(appender.processId(), existing);\n    }\n    return result;\n  }\n\n  /**\n   * Sets the visible tracks internally\n   * @param visibleTracks set with the names of the visible track\n   * appenders. If undefined, all tracks are set to be visible.\n   */\n  setVisibleTracks(visibleTracks?: Set<TrackAppenderName>): void {\n    if (!visibleTracks) {\n      this.#visibleTrackNames = new Set([...TrackNames]);\n      return;\n    }\n    this.#visibleTrackNames = visibleTracks;\n  }\n\n  /**\n   * Returns the color an event is shown with in the timeline.\n   */\n  colorForEvent(event: TraceEngine.Types.TraceEvents.TraceEventData, level: number): string {\n    const track = this.#trackForLevel.get(level);\n    if (!track) {\n      throw new Error('Track not found for level');\n    }\n    return track.colorForEvent(event);\n  }\n  /**\n   * Returns the title an event is shown with in the timeline.\n   */\n  titleForEvent(event: TraceEngine.Types.TraceEvents.TraceEventData, level: number): string {\n    const track = this.#trackForLevel.get(level);\n    if (!track) {\n      throw new Error('Track not found for level');\n    }\n    return track.titleForEvent(event);\n  }\n  /**\n   * Returns the info shown when an event in the timeline is hovered.\n   */\n  highlightedEntryInfo(event: TraceEngine.Types.TraceEvents.TraceEventData, level: number): HighlightedEntryInfo {\n    const track = this.#trackForLevel.get(level);\n    if (!track) {\n      throw new Error('Track not found for level');\n    }\n\n    // Add any warnings information to the tooltip. Done here to avoid duplicating this call in every appender.\n    // By doing this here, we ensure that any warnings that are\n    // added to the WarningsHandler are automatically used and added\n    // to the tooltip.\n    const warningElements: HTMLSpanElement[] =\n        TimelineComponents.DetailsView.buildWarningElementsForEvent(event, this.#traceParsedData);\n\n    const {title, formattedTime, warningElements: extraWarningElements} = track.highlightedEntryInfo(event);\n    return {\n      title,\n      formattedTime,\n      warningElements: warningElements.concat(extraWarningElements || []),\n    };\n  }\n}\n"]}