{"version":3,"file":"Initiators.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/timeline/Initiators.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as TraceEngine from '../../models/trace/trace.js';\nimport {TraceLoader} from '../../testing/TraceLoader.js';\n\nimport * as Timeline from './timeline.js';\n\ndescribe('Initiators', () => {\n  it('returns the initiator data', async function() {\n    const traceData = await TraceLoader.traceEngine(this, 'set-timeout-long-task.json.gz');\n\n    const timerFireEvent = Array.from(traceData.Initiators.eventToInitiator.keys())\n                               .find(TraceEngine.Types.TraceEvents.isTraceEventTimerFire);\n    assert.exists(timerFireEvent);\n    const timerInstallEvent = traceData.Initiators.eventToInitiator.get(timerFireEvent);\n    assert.exists(timerInstallEvent);\n    const initiatorData = Timeline.Initiators.initiatorsDataToDraw(traceData, timerFireEvent, [], []);\n\n    assert.deepEqual(initiatorData, [{\n                       event: timerFireEvent,\n                       initiator: timerInstallEvent,\n                     }]);\n  });\n\n  it('can walk up the tree to find the first parent with an initiator', async function() {\n    const traceData = await TraceLoader.traceEngine(this, 'set-timeout-long-task.json.gz');\n\n    // Find any of the fibonnaci() calls; they have a parent\n    // event (TimerFire) that has an initiator.\n    const fibonacciCall = traceData.Renderer.allTraceEntries.find(entry => {\n      return TraceEngine.Types.TraceEvents.isProfileCall(entry) && entry.callFrame.functionName === 'fibonacci';\n    });\n    assert.exists(fibonacciCall);\n\n    const timerFireEvent = Array.from(traceData.Initiators.eventToInitiator.keys())\n                               .find(TraceEngine.Types.TraceEvents.isTraceEventTimerFire);\n    assert.exists(timerFireEvent);\n    const timerInstallEvent = traceData.Initiators.eventToInitiator.get(timerFireEvent);\n    assert.exists(timerInstallEvent);\n\n    // Find the initator data but starting at the fibonacci()\n    // call.\n    const initiatorsData = Timeline.Initiators.initiatorsDataToDraw(traceData, fibonacciCall, [], []);\n\n    assert.deepEqual(initiatorsData, [{\n                       event: timerFireEvent,\n                       initiator: timerInstallEvent,\n                     }]);\n  });\n\n  it('will walk back through the initiators to find the entire chain', async function() {\n    const traceData = await TraceLoader.traceEngine(this, 'nested-initiators.json.gz');\n\n    // Find any of the fibonnaci() calls; they have a parent\n    // event (TimerFire) that has an initiator.\n    const fibonacciCall = traceData.Renderer.allTraceEntries.find(entry => {\n      return TraceEngine.Types.TraceEvents.isProfileCall(entry) && entry.callFrame.functionName === 'fibonacci';\n    });\n    assert.exists(fibonacciCall);\n\n    // Find the initators data but starting at the fibonacci()\n    // call. We expect to find two initiatorData objects here:\n    // 1. fibonacci() ===> TimerFire caused by TimerInstall\n    // 2. The TimerInstall from (1), caused by a prior TimerInstall.\n    const initiatorsData = Timeline.Initiators.initiatorsDataToDraw(traceData, fibonacciCall, [], []);\n\n    assert.lengthOf(initiatorsData, 2);\n    for (const initiatorData of initiatorsData) {\n      // Ensure each initiatorData object has TimerInstall>TimerFire event to initiator.\n      assert.strictEqual(initiatorData.event.name, TraceEngine.Types.TraceEvents.KnownEventName.TimerFire);\n      assert.strictEqual(initiatorData.initiator.name, TraceEngine.Types.TraceEvents.KnownEventName.TimerInstall);\n    }\n  });\n\n  it('will walk forward to find the events initiated by the selected entry', async function() {\n    const traceData = await TraceLoader.traceEngine(this, 'nested-initiators.json.gz');\n\n    // Find any of the InstallTimer calls; they initiate other events.\n    const timerInstall = traceData.Renderer.allTraceEntries.find(entry => {\n      return entry.name === TraceEngine.Types.TraceEvents.KnownEventName.TimerInstall;\n    });\n    assert.exists(timerInstall);\n\n    // Find the initatorData objects starting at the TimerInstall\n    // call. We expect to find one initatorData here:\n    // TimerFire that was initiated by the entry we found - TimerInstall\n\n    const initatorsData = Timeline.Initiators.initiatorsDataToDraw(traceData, timerInstall, [], []);\n\n    assert.lengthOf(initatorsData, 1);\n    for (const initatorData of initatorsData) {\n      // Ensure each initiatorData object has TimerInstall>TimerFire event to initiator.\n      assert.strictEqual(initatorData.event.name, TraceEngine.Types.TraceEvents.KnownEventName.TimerFire);\n      assert.strictEqual(initatorData.initiator.name, TraceEngine.Types.TraceEvents.KnownEventName.TimerInstall);\n    }\n  });\n\n  it('will return the closest expandable ancestor as an initiator in a pair if the initiator itself is hidden',\n     async function() {\n       const traceData = await TraceLoader.traceEngine(this, 'nested-initiators.json.gz');\n\n       // Find any of the InstallTimer calls; they initiate other events.\n       const timerInstall = traceData.Renderer.allTraceEntries.find(entry => {\n         return entry.name === TraceEngine.Types.TraceEvents.KnownEventName.TimerInstall;\n       });\n       assert.exists(timerInstall);\n       // Get the parent of InstallTimer to add to the expandable events array.\n       // When we add TimerInstall to hidden entries list, it will be the closest expandable parent and the initiator should point to it.\n       const timerInstallParent = traceData.Renderer.entryToNode.get(timerInstall)?.parent;\n       assert.exists(timerInstallParent);\n\n       // Find the initatorData objects starting at the TimerInstall\n       // call. We expect to find one initatorData here:\n       // TimerFire that was initiated by the entry we found - Parent of TimerInstall because TimerInstall is hidden\n       const initiatorsData = Timeline.Initiators.initiatorsDataToDraw(\n           traceData, timerInstall, [timerInstall], [timerInstallParent?.entry]);\n\n       assert.lengthOf(initiatorsData, 1);\n       // Ensure each initiatorData object has TimerInstall>TimerFire event to initiator.\n       for (const initiatorData of initiatorsData) {\n         assert.strictEqual(initiatorData.event.name, TraceEngine.Types.TraceEvents.KnownEventName.TimerFire);\n         assert.strictEqual(initiatorData.initiator, timerInstallParent.entry);\n         // Ensure the expandable entry is marked as hidden\n         assert.strictEqual(initiatorData.isInitiatorHidden, true);\n       }\n     });\n\n  it('will return the closest expandable ancestor as an initiated event in a pair if the event itself is hidden',\n     async function() {\n       const traceData = await TraceLoader.traceEngine(this, 'nested-initiators.json.gz');\n\n       // Find any of the fibonnaci() calls; they have a parent\n       // event (TimerFire) that has an initiator.\n       const fibonacciCall = traceData.Renderer.allTraceEntries.find(entry => {\n         return TraceEngine.Types.TraceEvents.isProfileCall(entry) && entry.callFrame.functionName === 'fibonacci';\n       });\n       assert.exists(fibonacciCall);\n\n       // Find the initatorData objects but starting at the fibonacci()\n       // call. We expect to find two initiatorData objects here:\n       // 1. fibonacci() ===> TimerFire caused by TimerInstall\n       // 2. The TimerInstall from (1), caused by a prior TimerInstall.\n       let initiatorsData = Timeline.Initiators.initiatorsDataToDraw(traceData, fibonacciCall, [], []);\n\n       assert.lengthOf(initiatorsData, 2);\n       // Save the parents of initiated events and the events themselves to get initiators again with those as expandable and hidden\n       const timerFireParents: TraceEngine.Types.TraceEvents.TraceEventData[] = [];\n       const initiatedEvents: TraceEngine.Types.TraceEvents.TraceEventData[] = [];\n\n       for (const initiatorData of initiatorsData) {\n         // Ensure each initiatorData object has TimerInstall>TimerFire event to initiator.\n         assert.strictEqual(initiatorData.event.name, TraceEngine.Types.TraceEvents.KnownEventName.TimerFire);\n         assert.strictEqual(initiatorData.initiator.name, TraceEngine.Types.TraceEvents.KnownEventName.TimerInstall);\n         const parentEvent = traceData.Renderer.entryToNode.get(initiatorData.event)?.parent?.entry;\n         if (parentEvent) {\n           timerFireParents.push(parentEvent);\n           initiatedEvents.push(initiatorData.event);\n         }\n       }\n\n       // Get initiatorData object again, now with the previously initiated events hidden and parents marked as expandable\n       initiatorsData =\n           Timeline.Initiators.initiatorsDataToDraw(traceData, fibonacciCall, initiatedEvents, timerFireParents);\n       // The length should not change, just the inititated events.\n       assert.lengthOf(initiatorsData, 2);\n       for (let i = 0; i < initiatorsData.length; i++) {\n         const initiatorData = initiatorsData[i];\n         // Ensure each initiatorData object has TimerInstall>TimerFire event to initiator.\n         assert.strictEqual(initiatorData.event, timerFireParents[i]);\n         assert.strictEqual(initiatorData.initiator.name, TraceEngine.Types.TraceEvents.KnownEventName.TimerInstall);\n         // Ensure the expandable entry is marked as hidden\n         assert.strictEqual(initiatorData.isEntryHidden, true);\n       }\n     });\n});\n"]}