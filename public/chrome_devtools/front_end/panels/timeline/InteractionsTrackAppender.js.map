{"version":3,"file":"InteractionsTrackAppender.js","sourceRoot":"","sources":["../../../../../../front_end/panels/timeline/InteractionsTrackAppender.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport type * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as TraceEngine from '../../models/trace/trace.js';\nimport * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\n\nimport {buildGroupStyle, buildTrackHeader, getFormattedTime} from './AppenderUtils.js';\nimport {\n  type CompatibilityTracksAppender,\n  type HighlightedEntryInfo,\n  type TrackAppender,\n  type TrackAppenderName,\n} from './CompatibilityTracksAppender.js';\n\nconst UIStrings = {\n  /**\n   *@description Text in Timeline Flame Chart Data Provider of the Performance panel\n   */\n  interactions: 'Interactions',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/InteractionsTrackAppender.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class InteractionsTrackAppender implements TrackAppender {\n  readonly appenderName: TrackAppenderName = 'Interactions';\n\n  #colorGenerator: Common.Color.Generator;\n  #compatibilityBuilder: CompatibilityTracksAppender;\n  #traceParsedData: Readonly<TraceEngine.Handlers.Types.TraceParseData>;\n\n  constructor(\n      compatibilityBuilder: CompatibilityTracksAppender, traceParsedData: TraceEngine.Handlers.Types.TraceParseData,\n      colorGenerator: Common.Color.Generator) {\n    this.#compatibilityBuilder = compatibilityBuilder;\n    this.#colorGenerator = colorGenerator;\n    this.#traceParsedData = traceParsedData;\n  }\n\n  /**\n   * Appends into the flame chart data the data corresponding to the\n   * interactions track.\n   * @param trackStartLevel the horizontal level of the flame chart events where\n   * the track's events will start being appended.\n   * @param expanded wether the track should be rendered expanded.\n   * @returns the first available level to append more data after having\n   * appended the track's events.\n   */\n  appendTrackAtLevel(trackStartLevel: number, expanded?: boolean): number {\n    if (this.#traceParsedData.UserInteractions.interactionEvents.length === 0) {\n      return trackStartLevel;\n    }\n    this.#appendTrackHeaderAtLevel(trackStartLevel, expanded);\n    return this.#appendInteractionsAtLevel(trackStartLevel);\n  }\n\n  /**\n   * Adds into the flame chart data the header corresponding to the\n   * interactions track. A header is added in the shape of a group in the\n   * flame chart data. A group has a predefined style and a reference\n   * to the definition of the legacy track (which should be removed\n   * in the future).\n   * @param currentLevel the flame chart level at which the header is\n   * appended.\n   */\n  #appendTrackHeaderAtLevel(currentLevel: number, expanded?: boolean): void {\n    const trackIsCollapsible = this.#traceParsedData.UserInteractions.interactionEvents.length > 0;\n    const style = buildGroupStyle({collapsible: trackIsCollapsible, useDecoratorsForOverview: true});\n    const group =\n        buildTrackHeader(currentLevel, i18nString(UIStrings.interactions), style, /* selectable= */ true, expanded);\n    this.#compatibilityBuilder.registerTrackForGroup(group, this);\n  }\n\n  /**\n   * Adds into the flame chart data the trace events dispatched by the\n   * performance.measure API. These events are taken from the UserInteractions\n   * handler.\n   * @param currentLevel the flame chart level from which interactions will\n   * be appended.\n   * @returns the next level after the last occupied by the appended\n   * interactions (the first available level to append more data).\n   */\n  #appendInteractionsAtLevel(trackStartLevel: number): number {\n    const {interactionEventsWithNoNesting, interactionsOverThreshold} = this.#traceParsedData.UserInteractions;\n\n    const addCandyStripeToLongInteraction =\n        (event: TraceEngine.Types.TraceEvents.SyntheticInteractionPair, index: number): void => {\n          // Each interaction that we drew that is over the INP threshold needs to be\n          // candy-striped.\n          const overThreshold = interactionsOverThreshold.has(event);\n          if (!overThreshold) {\n            return;\n          }\n          if (index !== undefined) {\n            this.#addCandyStripeAndWarningForLongInteraction(event, index);\n          }\n        };\n    // Render all top level interactions (see UserInteractionsHandler for an explanation on the nesting) onto the track.\n    const newLevel = this.#compatibilityBuilder.appendEventsAtLevel(\n        interactionEventsWithNoNesting, trackStartLevel, this, addCandyStripeToLongInteraction);\n\n    return newLevel;\n  }\n\n  #addCandyStripeAndWarningForLongInteraction(\n      entry: TraceEngine.Types.TraceEvents.SyntheticInteractionPair, eventIndex: number): void {\n    const decorationsForEvent =\n        this.#compatibilityBuilder.getFlameChartTimelineData().entryDecorations[eventIndex] || [];\n    decorationsForEvent.push(\n        {\n          type: PerfUI.FlameChart.FlameChartDecorationType.CANDY,\n          startAtTime: TraceEngine.Handlers.ModelHandlers.UserInteractions.LONG_INTERACTION_THRESHOLD,\n          // Interaction events have whiskers, so we do not want to candy stripe\n          // the entire duration. The box represents processing duration, so we only\n          // candystripe up to the end of processing.\n          endAtTime: entry.processingEnd,\n        },\n        {\n          type: PerfUI.FlameChart.FlameChartDecorationType.WARNING_TRIANGLE,\n          customEndTime: entry.processingEnd,\n        });\n    this.#compatibilityBuilder.getFlameChartTimelineData().entryDecorations[eventIndex] = decorationsForEvent;\n  }\n\n  /*\n    ------------------------------------------------------------------------------------\n     The following methods  are invoked by the flame chart renderer to query features about\n     events on rendering.\n    ------------------------------------------------------------------------------------\n  */\n\n  /**\n   * Gets the color an event added by this appender should be rendered with.\n   */\n  colorForEvent(event: TraceEngine.Types.TraceEvents.TraceEventData): string {\n    let idForColorGeneration = this.titleForEvent(event);\n    if (TraceEngine.Types.TraceEvents.isSyntheticInteractionEvent(event)) {\n      // Append the ID so that we vary the colours, ensuring that two events of\n      // the same type are coloured differently.\n      idForColorGeneration += event.interactionId;\n    }\n    return this.#colorGenerator.colorForID(idForColorGeneration);\n  }\n\n  /**\n   * Gets the title an event added by this appender should be rendered with.\n   */\n  titleForEvent(event: TraceEngine.Types.TraceEvents.TraceEventData): string {\n    if (TraceEngine.Types.TraceEvents.isSyntheticInteractionEvent(event)) {\n      return titleForInteractionEvent(event);\n    }\n    return event.name;\n  }\n\n  /**\n   * Returns the info shown when an event added by this appender\n   * is hovered in the timeline.\n   */\n  highlightedEntryInfo(event: TraceEngine.Types.TraceEvents.TraceEventData): HighlightedEntryInfo {\n    const title = this.titleForEvent(event);\n    return {title, formattedTime: getFormattedTime(event.dur)};\n  }\n}\n\n/**\n * Return the title to use for a given interaction event.\n * Exported so the title in the DetailsView can re-use the same logic\n **/\nexport function titleForInteractionEvent(event: TraceEngine.Types.TraceEvents.SyntheticInteractionPair): string {\n  const category = TraceEngine.Handlers.ModelHandlers.UserInteractions.categoryOfInteraction(event);\n  // Because we hide nested interactions, we do not want to show the\n  // specific type of the interaction that was not hidden, so instead we\n  // show just the category of that interaction.\n  if (category === 'OTHER') {\n    return 'Other';\n  }\n  if (category === 'KEYBOARD') {\n    return 'Keyboard';\n  }\n  if (category === 'POINTER') {\n    return 'Pointer';\n  }\n  return event.type;\n}\n"]}