{"version":3,"file":"TimelineFlameChartNetworkDataProvider.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/timeline/TimelineFlameChartNetworkDataProvider.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as TraceEngine from '../../models/trace/trace.js';\nimport {describeWithEnvironment} from '../../testing/EnvironmentHelpers.js';\nimport {TraceLoader} from '../../testing/TraceLoader.js';\n\nimport * as Timeline from './timeline.js';\n\ndescribeWithEnvironment('TimelineFlameChartNetworkDataProvider', function() {\n  it('renders the network track correctly', async function() {\n    const dataProvider = new Timeline.TimelineFlameChartNetworkDataProvider.TimelineFlameChartNetworkDataProvider();\n    const traceParsedData = await TraceLoader.traceEngine(this, 'load-simple.json.gz');\n\n    const minTime = TraceEngine.Helpers.Timing.microSecondsToMilliseconds(traceParsedData.Meta.traceBounds.min);\n    const maxTime = TraceEngine.Helpers.Timing.microSecondsToMilliseconds(traceParsedData.Meta.traceBounds.max);\n\n    dataProvider.setModel(traceParsedData);\n    dataProvider.setWindowTimes(minTime, maxTime);\n\n    // TimelineFlameChartNetworkDataProvider only has network track, so should always be one track group.\n    assert.strictEqual(dataProvider.timelineData().groups.length, 1);\n    const networkTrackGroup = dataProvider.timelineData().groups[0];\n\n    assert.deepEqual(dataProvider.minimumBoundary(), minTime);\n    assert.deepEqual(dataProvider.totalTime(), maxTime - minTime);\n\n    const networkEvents = traceParsedData.NetworkRequests.byTime;\n    const networkEventsStartTimes =\n        networkEvents.map(request => TraceEngine.Helpers.Timing.microSecondsToMilliseconds(request.ts));\n    const networkEventsTotalTimes = networkEvents.map(request => {\n      const {startTime, endTime} = TraceEngine.Helpers.Timing.eventTimingsMilliSeconds(request);\n      return endTime - startTime;\n    });\n    assert.deepEqual(dataProvider.timelineData().entryLevels.length, 6);\n    assert.deepEqual(dataProvider.timelineData().entryLevels, [0, 1, 1, 1, 1, 2]);\n    assertTimestampsEqual(dataProvider.timelineData().entryStartTimes, networkEventsStartTimes);\n    assertTimestampsEqual(dataProvider.timelineData().entryTotalTimes, networkEventsTotalTimes);\n\n    assert.deepEqual(dataProvider.maxStackDepth(), 3);\n\n    // The decorateEntry() will be handled in the TimelineFlameChartNetworkDataProvider, so this function always returns true.\n    assert.isTrue(dataProvider.forceDecoration(0));\n\n    assert.isFalse(dataProvider.isEmpty());\n\n    // The network track is default to collapsed.\n    assert.isFalse(dataProvider.isExpanded());\n    // The height of collapsed network track style is 17.\n    assert.strictEqual(dataProvider.preferredHeight(), 17);\n    networkTrackGroup.expanded = true;\n    assert.isTrue(dataProvider.isExpanded());\n    // The max level here is 3, so `clamp(this.#maxLevel + 1, 4, 8.5)` = 4\n    assert.strictEqual(dataProvider.preferredHeight(), 17 * 4);\n  });\n\n  it('filters navigations to only return those that happen on the main frame', async function() {\n    const dataProvider = new Timeline.TimelineFlameChartNetworkDataProvider.TimelineFlameChartNetworkDataProvider();\n    const traceParsedData = await TraceLoader.traceEngine(this, 'multiple-navigations-with-iframes.json.gz');\n\n    const minTime = TraceEngine.Helpers.Timing.microSecondsToMilliseconds(traceParsedData.Meta.traceBounds.min);\n    const maxTime = TraceEngine.Helpers.Timing.microSecondsToMilliseconds(traceParsedData.Meta.traceBounds.max);\n\n    dataProvider.setModel(traceParsedData);\n    dataProvider.setWindowTimes(minTime, maxTime);\n\n    const mainFrameID = traceParsedData.Meta.mainFrameId;\n    const navigationEvents = dataProvider.mainFrameNavigationStartEvents();\n    // Ensure that every navigation event that we return is for the main frame.\n    assert.isTrue(navigationEvents.every(navEvent => {\n      return navEvent.args.frame === mainFrameID;\n    }));\n  });\n\n  it('can provide the index for an event and the event for a given index', async function() {\n    const dataProvider = new Timeline.TimelineFlameChartNetworkDataProvider.TimelineFlameChartNetworkDataProvider();\n    const traceParsedData = await TraceLoader.traceEngine(this, 'web-dev.json.gz');\n    dataProvider.setModel(traceParsedData);\n\n    const event = dataProvider.eventByIndex(0);\n    assert.isOk(event);\n    assert.strictEqual(dataProvider.indexForEvent(event), 0);\n  });\n\n  it('does not render the network track if there is no network requests', async function() {\n    const dataProvider = new Timeline.TimelineFlameChartNetworkDataProvider.TimelineFlameChartNetworkDataProvider();\n    const traceParsedData = await TraceLoader.traceEngine(this, 'basic.json.gz');\n\n    const minTime = TraceEngine.Helpers.Timing.microSecondsToMilliseconds(traceParsedData.Meta.traceBounds.min);\n    const maxTime = TraceEngine.Helpers.Timing.microSecondsToMilliseconds(traceParsedData.Meta.traceBounds.max);\n\n    dataProvider.setModel(traceParsedData);\n    dataProvider.setWindowTimes(minTime, maxTime);\n\n    // Network track appender won't append the network track if there is no network requests.\n    assert.strictEqual(dataProvider.timelineData().groups.length, 0);\n\n    assert.deepEqual(dataProvider.minimumBoundary(), minTime);\n    assert.deepEqual(dataProvider.totalTime(), maxTime - minTime);\n\n    assert.deepEqual(dataProvider.timelineData().entryLevels, []);\n    assert.deepEqual(dataProvider.timelineData().entryStartTimes, []);\n    assert.deepEqual(dataProvider.timelineData().entryTotalTimes, []);\n\n    assert.deepEqual(dataProvider.maxStackDepth(), 0);\n\n    // The decorateEntry() will be handled in the TimelineFlameChartNetworkDataProvider, so this function always returns true.\n    assert.isTrue(dataProvider.forceDecoration(0));\n\n    // The network track won't show if it is empty.\n    assert.isTrue(dataProvider.isEmpty());\n\n    assert.strictEqual(dataProvider.preferredHeight(), 0);\n  });\n\n  it('decorate a event correctly', async function() {\n    const dataProvider = new Timeline.TimelineFlameChartNetworkDataProvider.TimelineFlameChartNetworkDataProvider();\n    const traceParsedData = await TraceLoader.traceEngine(this, 'cls-cluster-max-timeout.json.gz');\n    // The field that is important of this test:\n    // {\n    // \"ts\": 183752441.977,\n    // \"dur\": 183752670.454,\n    // \"finishTime\": 183752669.23299998,\n    // ...\n    // \"timing\": {\n    //     \"pushStart\": 0,\n    //     \"receiveHeadersEnd\": 218.084,\n    //     \"requestTime\": 183752.449687,\n    //     \"sendEnd\": 13.01,\n    //     \"sendStart\": 12.792,\n    //     ...\n    //   },\n    //   \"priority\": \"VeryHigh\",\n    //   \"responseTime\": 1634222299.776\n    // ...\n    // }\n    const event = traceParsedData.NetworkRequests.byTime[1];\n    // So for this request:\n    // The earliest event belonging to this request starts at 183752441.977.\n    // This is used in flamechart to calculate unclippedBarX.\n    // Start time is 183752441.977\n    // End time is 183752670.454\n    // Finish time is 183752669.23299998\n    // request time is 183752.449687, but it is in second, so 183752449.687\n    // in milliseconds.\n    // sendStartTime is requestTime + sendStart = 183752462.479\n    // headersEndTime is requestTime + receiveHeadersEnd = 183752667.771\n    //\n    // To calculate the pixel of a timestamp, we substrate the begin time  from\n    // it, then multiple the timeToPixelRatio and then add the unclippedBarX.\n    // Then get the floor of the pixel.\n    // So the pixel of sendStart is 30.\n    // So the pixel of headersEnd is 235.\n    // So the pixel of finish is 237.\n    // So the pixel of start is 10.\n    // So the pixel of end is 238.\n    assert.deepEqual(\n        dataProvider.getDecorationPixels(event, /* unclippedBarX= */ 10, /* timeToPixelRatio= */ 1),\n        {sendStart: 30, headersEnd: 235, finish: 237, start: 10, end: 238});\n  });\n});\n\nfunction assertTimestampEqual(actual: number, expected: number): void {\n  assert.strictEqual(actual.toFixed(2), expected.toFixed(2));\n}\n\nfunction assertTimestampsEqual(actual: number[]|Float32Array|Float64Array, expected: number[]): void {\n  assert.strictEqual(actual.length, expected.length);\n\n  for (let i = 0; i < actual.length; i++) {\n    assertTimestampEqual(actual[i], expected[i]);\n  }\n}\n"]}