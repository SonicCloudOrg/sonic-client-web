{"version":3,"file":"ThreadAppender.js","sourceRoot":"","sources":["../../../../../../front_end/panels/timeline/ThreadAppender.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as TraceEngine from '../../models/trace/trace.js';\nimport * as ModificationsManager from '../../services/modifications_manager/modifications_manager.js';\nimport * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\n\nimport {\n  addDecorationToEvent,\n  buildGroupStyle,\n  buildTrackHeader,\n  getFormattedTime,\n} from './AppenderUtils.js';\nimport {\n  type CompatibilityTracksAppender,\n  type HighlightedEntryInfo,\n  type TrackAppender,\n  type TrackAppenderName,\n} from './CompatibilityTracksAppender.js';\nimport {getCategoryStyles, getEventStyle} from './EventUICategory.js';\n\nconst UIStrings = {\n  /**\n   *@description Text shown for an entry in the flame chart that is ignored because it matches\n   * a predefined ignore list.\n   */\n  onIgnoreList: 'On ignore list',\n  /**\n   * @description Refers to the \"Main frame\", meaning the top level frame. See https://www.w3.org/TR/html401/present/frames.html\n   * @example{example.com} PH1\n   */\n  mainS: 'Main — {PH1}',\n  /**\n   * @description Refers to the main thread of execution of a program. See https://developer.mozilla.org/en-US/docs/Glossary/Main_thread\n   */\n  main: 'Main',\n  /**\n   * @description Refers to any frame in the page. See https://www.w3.org/TR/html401/present/frames.html\n   * @example {https://example.com} PH1\n   */\n  frameS: 'Frame — {PH1}',\n  /**\n   *@description A web worker in the page. See https://developer.mozilla.org/en-US/docs/Web/API/Worker\n   *@example {https://google.com} PH1\n   */\n  workerS: '`Worker` — {PH1}',\n  /**\n   *@description A web worker in the page. See https://developer.mozilla.org/en-US/docs/Web/API/Worker\n   *@example {FormatterWorker} PH1\n   *@example {https://google.com} PH2\n   */\n  workerSS: '`Worker`: {PH1} — {PH2}',\n  /**\n   *@description Label for a web worker exclusively allocated for a purpose.\n   */\n  dedicatedWorker: 'Dedicated `Worker`',\n  /**\n   *@description Text for the name of anonymous functions\n   */\n  anonymous: '(anonymous)',\n  /**\n   *@description A generic name given for a thread running in the browser (sequence of programmed instructions).\n   * The placeholder is an enumeration given to the thread.\n   *@example {1} PH1\n   */\n  threadS: 'Thread {PH1}',\n  /**\n   *@description Rasterization in computer graphics.\n   */\n  raster: 'Raster',\n  /**\n   *@description Threads used for background tasks.\n   */\n  threadPool: 'Thread Pool',\n  /**\n   *@description Name for a thread that rasterizes graphics in a website.\n   *@example {2} PH1\n   */\n  rasterizerThreadS: 'Rasterizer Thread {PH1}',\n  /**\n   *@description Text in Timeline Flame Chart Data Provider of the Performance panel\n   *@example {2} PH1\n   */\n  threadPoolThreadS: 'Thread Pool Worker {PH1}',\n  /**\n   *@description Title of a bidder auction worklet with known URL in the timeline flame chart of the Performance panel\n   *@example {https://google.com} PH1\n   */\n  bidderWorkletS: 'Bidder Worklet — {PH1}',\n  /**\n   *@description Title of a bidder auction worklet in the timeline flame chart of the Performance panel with an unknown URL\n   */\n  bidderWorklet: 'Bidder Worklet',\n\n  /**\n   *@description Title of a seller auction worklet in the timeline flame chart of the Performance panel with an unknown URL\n   */\n  sellerWorklet: 'Seller Worklet',\n\n  /**\n   *@description Title of an auction worklet in the timeline flame chart of the Performance panel with an unknown URL\n   */\n  unknownWorklet: 'Auction Worklet',\n\n  /**\n   *@description Title of control thread of a service process for an auction worklet in the timeline flame chart of the Performance panel with an unknown URL\n   */\n  workletService: 'Auction Worklet Service',\n\n  /**\n   *@description Title of a seller auction worklet with known URL in the timeline flame chart of the Performance panel\n   *@example {https://google.com} PH1\n   */\n  sellerWorkletS: 'Seller Worklet — {PH1}',\n\n  /**\n   *@description Title of an auction worklet with known URL in the timeline flame chart of the Performance panel\n   *@example {https://google.com} PH1\n   */\n  unknownWorkletS: 'Auction Worklet — {PH1}',\n\n  /**\n   *@description Title of control thread of a service process for an auction worklet with known URL in the timeline flame chart of the Performance panel\n   * @example {https://google.com} PH1\n   */\n  workletServiceS: 'Auction Worklet Service — {PH1}',\n  /**\n   *@description Text used to show an EventDispatch event which has a type associated with it\n   *@example {click} PH1\n   */\n  eventDispatchS: 'Event: {PH1}',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/ThreadAppender.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\n// This appender is only triggered when the Renderer handler is run. At\n// the moment this only happens in the basic component server example.\n// In the future, once this appender fully supports the behaviour of the\n// old engine's thread/sync tracks we can always run it by enabling the\n// Renderer and Samples handler by default.\nexport class ThreadAppender implements TrackAppender {\n  readonly appenderName: TrackAppenderName = 'Thread';\n\n  #colorGenerator: Common.Color.Generator;\n  #compatibilityBuilder: CompatibilityTracksAppender;\n  #traceParsedData: TraceEngine.Handlers.Types.TraceParseData;\n\n  #entries: TraceEngine.Types.TraceEvents.TraceEventData[] = [];\n  #tree: TraceEngine.Helpers.TreeHelpers.TraceEntryTree;\n  #processId: TraceEngine.Types.TraceEvents.ProcessID;\n  #threadId: TraceEngine.Types.TraceEvents.ThreadID;\n  #threadDefaultName: string;\n  #expanded = false;\n  #headerAppended: boolean = false;\n  readonly threadType: TraceEngine.Handlers.Threads.ThreadType = TraceEngine.Handlers.Threads.ThreadType.MAIN_THREAD;\n  readonly isOnMainFrame: boolean;\n  #showAllEventsEnabled = Root.Runtime.experiments.isEnabled('timeline-show-all-events');\n  #url: string = '';\n  #headerNestingLevel: number|null = null;\n  constructor(\n      compatibilityBuilder: CompatibilityTracksAppender, traceParsedData: TraceEngine.Handlers.Types.TraceParseData,\n      processId: TraceEngine.Types.TraceEvents.ProcessID, threadId: TraceEngine.Types.TraceEvents.ThreadID,\n      threadName: string|null, type: TraceEngine.Handlers.Threads.ThreadType) {\n    this.#compatibilityBuilder = compatibilityBuilder;\n    // TODO(crbug.com/1456706):\n    // The values for this color generator have been taken from the old\n    // engine to keep the colors the same after the migration. This\n    // generator is used here to create colors for js frames (profile\n    // calls) in the flamechart by hashing the script's url. We might\n    // need to reconsider this generator when migrating to GM3 colors.\n    this.#colorGenerator =\n        new Common.Color.Generator({min: 30, max: 330, count: undefined}, {min: 50, max: 80, count: 3}, 85);\n    // Add a default color for call frames with no url.\n    this.#colorGenerator.setColorForID('', '#f2ecdc');\n    this.#traceParsedData = traceParsedData;\n    this.#processId = processId;\n    this.#threadId = threadId;\n\n    // When loading a CPU profile, only CPU data will be available, thus\n    // we get the data from the SamplesHandler.\n    const entries = type === TraceEngine.Handlers.Threads.ThreadType.CPU_PROFILE ?\n        this.#traceParsedData.Samples?.profilesInProcess.get(processId)?.get(threadId)?.profileCalls :\n        this.#traceParsedData.Renderer?.processes.get(processId)?.threads?.get(threadId)?.entries;\n    const tree = type === TraceEngine.Handlers.Threads.ThreadType.CPU_PROFILE ?\n        this.#traceParsedData.Samples?.profilesInProcess.get(processId)?.get(threadId)?.profileTree :\n        this.#traceParsedData.Renderer?.processes.get(processId)?.threads?.get(threadId)?.tree;\n    if (!entries || !tree) {\n      throw new Error(`Could not find data for thread with id ${threadId} in process with id ${processId}`);\n    }\n    this.#entries = entries;\n    this.#tree = tree;\n    this.#threadDefaultName = threadName || i18nString(UIStrings.threadS, {PH1: threadId});\n    this.isOnMainFrame = Boolean(this.#traceParsedData.Renderer?.processes.get(processId)?.isOnMainFrame);\n    this.threadType = type;\n    // AuctionWorklets are threads, so we re-use this appender rather than\n    // duplicate it, but we change the name because we want to render these\n    // lower down than other threads.\n    if (this.#traceParsedData.AuctionWorklets.worklets.has(processId)) {\n      this.appenderName = 'Thread_AuctionWorklet';\n    }\n    this.#url = this.#traceParsedData.Renderer?.processes.get(this.#processId)?.url || '';\n  }\n\n  processId(): TraceEngine.Types.TraceEvents.ProcessID {\n    return this.#processId;\n  }\n\n  threadId(): TraceEngine.Types.TraceEvents.ThreadID {\n    return this.#threadId;\n  }\n\n  /**\n   * Appends into the flame chart data the data corresponding to the\n   * this thread.\n   * @param trackStartLevel the horizontal level of the flame chart events where\n   * the track's events will start being appended.\n   * @param expanded wether the track should be rendered expanded.\n   * @returns the first available level to append more data after having\n   * appended the track's events.\n   */\n  appendTrackAtLevel(trackStartLevel: number, expanded: boolean = false): number {\n    if (this.#entries.length === 0) {\n      return trackStartLevel;\n    }\n    this.#expanded = expanded;\n    return this.#appendTreeAtLevel(trackStartLevel);\n  }\n\n  setHeaderNestingLevel(level: number): void {\n    this.#headerNestingLevel = level;\n  }\n  /**\n   * Track header is appended only if there are events visible on it.\n   * Otherwise we don't append any track. So, instead of preemptively\n   * appending a track before appending its events, we only do so once\n   * we have detected that the track contains an event that is visible.\n   */\n  #ensureTrackHeaderAppended(trackStartLevel: number): void {\n    if (this.#headerAppended) {\n      return;\n    }\n    if (this.threadType === TraceEngine.Handlers.Threads.ThreadType.RASTERIZER ||\n        this.threadType === TraceEngine.Handlers.Threads.ThreadType.THREAD_POOL) {\n      this.#appendGroupedTrackHeaderAndTitle(trackStartLevel, this.threadType);\n    } else {\n      this.#appendTrackHeaderAtLevel(trackStartLevel);\n    }\n    this.#headerAppended = true;\n  }\n\n  setHeaderAppended(headerAppended: boolean): void {\n    this.#headerAppended = headerAppended;\n  }\n\n  headerAppended(): boolean {\n    return this.#headerAppended;\n  }\n\n  /**\n   * Adds into the flame chart data the header corresponding to this\n   * thread. A header is added in the shape of a group in the flame\n   * chart data. A group has a predefined style and a reference to the\n   * definition of the legacy track (which should be removed in the\n   * future).\n   * @param currentLevel the flame chart level at which the header is\n   * appended.\n   */\n  #appendTrackHeaderAtLevel(currentLevel: number): void {\n    const trackIsCollapsible = this.#entries.length > 0;\n    const style = buildGroupStyle({shareHeaderLine: false, collapsible: trackIsCollapsible});\n    if (this.#headerNestingLevel !== null) {\n      style.nestingLevel = this.#headerNestingLevel;\n    }\n    const group = buildTrackHeader(\n        currentLevel, this.trackName(), style, /* selectable= */ true, this.#expanded,\n        /* showStackContextMenu= */ true);\n    this.#compatibilityBuilder.registerTrackForGroup(group, this);\n  }\n  /**\n   * Raster threads are rendered under a single header in the\n   * flamechart. However, each thread has a unique title which needs to\n   * be added to the flamechart data.\n   */\n  #appendGroupedTrackHeaderAndTitle(\n      trackStartLevel: number,\n      threadType: TraceEngine.Handlers.Threads.ThreadType.RASTERIZER|\n      TraceEngine.Handlers.Threads.ThreadType.THREAD_POOL): void {\n    const currentTrackCount = this.#compatibilityBuilder.getCurrentTrackCountForThreadType(threadType);\n    if (currentTrackCount === 0) {\n      const trackIsCollapsible = this.#entries.length > 0;\n      const headerStyle = buildGroupStyle({shareHeaderLine: false, collapsible: trackIsCollapsible});\n      const headerGroup =\n          buildTrackHeader(trackStartLevel, this.trackName(), headerStyle, /* selectable= */ false, this.#expanded);\n      this.#compatibilityBuilder.getFlameChartTimelineData().groups.push(headerGroup);\n    }\n\n    // Nesting is set to 1 because the track is appended inside the\n    // header for all raster threads.\n    const titleStyle = buildGroupStyle({padding: 2, nestingLevel: 1, collapsible: false});\n    const rasterizerTitle = this.threadType === TraceEngine.Handlers.Threads.ThreadType.RASTERIZER ?\n        i18nString(UIStrings.rasterizerThreadS, {PH1: currentTrackCount + 1}) :\n        i18nString(UIStrings.threadPoolThreadS, {PH1: currentTrackCount + 1});\n    const titleGroup =\n        buildTrackHeader(trackStartLevel, rasterizerTitle, titleStyle, /* selectable= */ true, this.#expanded);\n    this.#compatibilityBuilder.registerTrackForGroup(titleGroup, this);\n  }\n\n  trackName(): string {\n    let threadTypeLabel: string|null = null;\n    switch (this.threadType) {\n      case TraceEngine.Handlers.Threads.ThreadType.MAIN_THREAD:\n        threadTypeLabel = this.isOnMainFrame ? i18nString(UIStrings.mainS, {PH1: this.#url}) :\n                                               i18nString(UIStrings.frameS, {PH1: this.#url});\n        break;\n      case TraceEngine.Handlers.Threads.ThreadType.CPU_PROFILE:\n        threadTypeLabel = i18nString(UIStrings.main);\n        break;\n      case TraceEngine.Handlers.Threads.ThreadType.WORKER:\n        threadTypeLabel = this.#buildNameForWorker();\n        break;\n      case TraceEngine.Handlers.Threads.ThreadType.RASTERIZER:\n        threadTypeLabel = i18nString(UIStrings.raster);\n        break;\n      case TraceEngine.Handlers.Threads.ThreadType.THREAD_POOL:\n        threadTypeLabel = i18nString(UIStrings.threadPool);\n        break;\n      case TraceEngine.Handlers.Threads.ThreadType.OTHER:\n        break;\n      case TraceEngine.Handlers.Threads.ThreadType.AUCTION_WORKLET:\n        threadTypeLabel = this.#buildNameForAuctionWorklet();\n        break;\n      default:\n        return Platform.assertNever(this.threadType, `Unknown thread type: ${this.threadType}`);\n    }\n    let suffix = '';\n    if (this.#traceParsedData.Meta.traceIsGeneric) {\n      suffix = suffix + ` (${this.threadId()})`;\n    }\n    return (threadTypeLabel || this.#threadDefaultName) + suffix;\n  }\n\n  getUrl(): string {\n    return this.#url;\n  }\n\n  #buildNameForAuctionWorklet(): string {\n    const workletMetadataEvent = this.#traceParsedData.AuctionWorklets.worklets.get(this.#processId);\n    // We should always have this event - if we do not, we were instantiated with invalid data.\n    if (!workletMetadataEvent) {\n      return i18nString(UIStrings.unknownWorklet);\n    }\n\n    // Host could be empty - in which case we do not want to add it.\n    const host = workletMetadataEvent.host ? `https://${workletMetadataEvent.host}` : '';\n    const shouldAddHost = host.length > 0;\n\n    // For each Auction Worklet in a page there are two threads we care about on the same process.\n    // 1. The \"Worklet Service\" which is a generic helper service. This thread\n    // is always named \"auction_worklet.CrUtilityMain\".\n    //\n    // 2. The \"Seller/Bidder\" service. This thread is always named\n    // \"AuctionV8HelperThread\". The AuctionWorkets handler does the job of\n    // figuring this out for us - the metadata event it provides for each\n    // worklet process will have a `type` already set.\n    //\n    // Therefore, for this given thread, which we know is part of\n    // an AuctionWorklet process, we need to figure out if this thread is the\n    // generic service, or a seller/bidder worklet.\n    //\n    // Note that the worklet could also have the \"unknown\" type - this is not\n    // expected but implemented to prevent trace event changes causing DevTools\n    // to break with unknown worklet types.\n    const isUtilityThread = workletMetadataEvent.args.data.utilityThread.tid === this.#threadId;\n    const isBidderOrSeller = workletMetadataEvent.args.data.v8HelperThread.tid === this.#threadId;\n\n    if (isUtilityThread) {\n      return shouldAddHost ? i18nString(UIStrings.workletServiceS, {PH1: host}) : i18nString(UIStrings.workletService);\n    }\n\n    if (isBidderOrSeller) {\n      switch (workletMetadataEvent.type) {\n        case TraceEngine.Types.TraceEvents.AuctionWorkletType.SELLER:\n          return shouldAddHost ? i18nString(UIStrings.sellerWorkletS, {PH1: host}) :\n                                 i18nString(UIStrings.sellerWorklet);\n        case TraceEngine.Types.TraceEvents.AuctionWorkletType.BIDDER:\n          return shouldAddHost ? i18nString(UIStrings.bidderWorkletS, {PH1: host}) :\n                                 i18nString(UIStrings.bidderWorklet);\n        case TraceEngine.Types.TraceEvents.AuctionWorkletType.UNKNOWN:\n          return shouldAddHost ? i18nString(UIStrings.unknownWorkletS, {PH1: host}) :\n                                 i18nString(UIStrings.unknownWorklet);\n        default:\n          Platform.assertNever(\n              workletMetadataEvent.type, `Unexpected Auction Worklet Type ${workletMetadataEvent.type}`);\n      }\n    }\n    // We should never reach here, but just in case!\n    return shouldAddHost ? i18nString(UIStrings.unknownWorkletS, {PH1: host}) : i18nString(UIStrings.unknownWorklet);\n  }\n\n  #buildNameForWorker(): string {\n    const url = this.#traceParsedData.Renderer?.processes.get(this.#processId)?.url || '';\n    const workerId = this.#traceParsedData.Workers.workerIdByThread.get(this.#threadId);\n    const workerURL = workerId ? this.#traceParsedData.Workers.workerURLById.get(workerId) : url;\n    // Try to create a name using the worker url if present. If not, use a generic label.\n    let workerName =\n        workerURL ? i18nString(UIStrings.workerS, {PH1: workerURL}) : i18nString(UIStrings.dedicatedWorker);\n    const workerTarget = workerId !== undefined && SDK.TargetManager.TargetManager.instance().targetById(workerId);\n    if (workerTarget) {\n      // Get the worker name from the target, which corresponds to the name\n      // assigned to the worker when it was constructed.\n      workerName = i18nString(UIStrings.workerSS, {PH1: workerTarget.name(), PH2: url});\n    }\n    return workerName;\n  }\n\n  /**\n   * Adds into the flame chart data the entries of this thread, which\n   * includes trace events and JS calls.\n   * @param currentLevel the flame chart level from which entries will\n   * be appended.\n   * @returns the next level after the last occupied by the appended\n   * entries (the first available level to append more data).\n   */\n  #appendTreeAtLevel(trackStartLevel: number): number {\n    // We can not used the tree maxDepth in the tree from the\n    // RendererHandler because ignore listing and visibility of events\n    // alter the final depth of the flame chart.\n    return this.#appendNodesAtLevel(this.#tree.roots, trackStartLevel);\n  }\n\n  /**\n   * Traverses the trees formed by the provided nodes in breadth first\n   * fashion and appends each node's entry on each iteration. As each\n   * entry is handled, a check for the its visibility or if it's ignore\n   * listed is done before appending.\n   */\n  #appendNodesAtLevel(\n      nodes: Iterable<TraceEngine.Helpers.TreeHelpers.TraceEntryNode>, startingLevel: number,\n      parentIsIgnoredListed: boolean = false): number {\n    const invisibleEntries = ModificationsManager.ModificationsManager.ModificationsManager.activeManager()\n                                 ?.getEntriesFilter()\n                                 .invisibleEntries() ??\n        [];\n    let maxDepthInTree = startingLevel;\n    for (const node of nodes) {\n      let nextLevel = startingLevel;\n      const entry = node.entry;\n      const entryIsIgnoreListed = this.isIgnoreListedEntry(entry);\n      // Events' visibility is determined from their predefined styles,\n      // which is something that's not available in the engine data.\n      // Thus it needs to be checked in the appenders, but preemptively\n      // checking if there are visible events and returning early if not\n      // is potentially expensive since, in theory, we would be adding\n      // another traversal to the entries array (which could grow\n      // large). To avoid the extra cost we  add the check in the\n      // traversal we already need to append events.\n      const entryIsVisible = !invisibleEntries.includes(entry) &&\n          (this.#compatibilityBuilder.entryIsVisibleInTimeline(entry) || this.#showAllEventsEnabled);\n      // For ignore listing support, these two conditions need to be met\n      // to not append a profile call to the flame chart:\n      // 1. It is ignore listed\n      // 2. It is NOT the bottom-most call in an ignore listed stack (a\n      //    set of chained profile calls that belong to ignore listed\n      //    URLs).\n      // This means that all of the ignore listed calls are ignored (not\n      // appended), except if it is the bottom call of an ignored stack.\n      // This is becaue to represent ignore listed stack frames, we add\n      // a flame chart entry with the length and position of the bottom\n      // frame, which is distictively marked to denote an ignored listed\n      // stack.\n      const skipEventDueToIgnoreListing = entryIsIgnoreListed && parentIsIgnoredListed;\n      if (entryIsVisible && !skipEventDueToIgnoreListing) {\n        this.#appendEntryAtLevel(entry, startingLevel);\n        nextLevel++;\n      }\n\n      const depthInChildTree = this.#appendNodesAtLevel(node.children, nextLevel, entryIsIgnoreListed);\n      maxDepthInTree = Math.max(depthInChildTree, maxDepthInTree);\n    }\n    return maxDepthInTree;\n  }\n\n  #appendEntryAtLevel(entry: TraceEngine.Types.TraceEvents.TraceEventData, level: number): void {\n    this.#ensureTrackHeaderAppended(level);\n    const index = this.#compatibilityBuilder.appendEventAtLevel(entry, level, this);\n    this.#addDecorationsToEntry(entry, index);\n  }\n\n  #addDecorationsToEntry(entry: TraceEngine.Types.TraceEvents.TraceEventData, index: number): void {\n    const flameChartData = this.#compatibilityBuilder.getFlameChartTimelineData();\n    if (ModificationsManager.ModificationsManager.ModificationsManager.activeManager()\n            ?.getEntriesFilter()\n            .isEntryExpandable(entry)) {\n      addDecorationToEvent(\n          flameChartData, index, {type: PerfUI.FlameChart.FlameChartDecorationType.HIDDEN_DESCENDANTS_ARROW});\n    }\n    const warnings = this.#traceParsedData.Warnings.perEvent.get(entry);\n    if (!warnings) {\n      return;\n    }\n    addDecorationToEvent(flameChartData, index, {type: PerfUI.FlameChart.FlameChartDecorationType.WARNING_TRIANGLE});\n    if (!warnings.includes('LONG_TASK')) {\n      return;\n    }\n    addDecorationToEvent(flameChartData, index, {\n      type: PerfUI.FlameChart.FlameChartDecorationType.CANDY,\n      startAtTime: TraceEngine.Handlers.ModelHandlers.Warnings.LONG_MAIN_THREAD_TASK_THRESHOLD,\n    });\n  }\n\n  isIgnoreListedEntry(entry: TraceEngine.Types.TraceEvents.TraceEventData): boolean {\n    if (!TraceEngine.Types.TraceEvents.isProfileCall(entry)) {\n      return false;\n    }\n    const url = entry.callFrame.url as Platform.DevToolsPath.UrlString;\n    return url && this.isIgnoreListedURL(url);\n  }\n\n  private isIgnoreListedURL(url: Platform.DevToolsPath.UrlString): boolean {\n    return Bindings.IgnoreListManager.IgnoreListManager.instance().isUserIgnoreListedURL(url);\n  }\n\n  /*\n    ------------------------------------------------------------------------------------\n     The following methods  are invoked by the flame chart renderer to query features about\n     events on rendering.\n    ------------------------------------------------------------------------------------\n  */\n\n  /**\n   * Gets the color an event added by this appender should be rendered with.\n   */\n  colorForEvent(event: TraceEngine.Types.TraceEvents.TraceEventData): string {\n    if (this.#traceParsedData.Meta.traceIsGeneric) {\n      return event.name ? `hsl(${Platform.StringUtilities.hashCode(event.name) % 300 + 30}, 40%, 70%)` : '#ccc';\n    }\n\n    if (TraceEngine.Types.TraceEvents.isProfileCall(event)) {\n      if (event.callFrame.functionName === '(idle)') {\n        return getCategoryStyles().idle.getComputedColorValue();\n      }\n      if (event.callFrame.scriptId === '0') {\n        // If we can not match this frame to a script, return the\n        // generic \"scripting\" color.\n        return getCategoryStyles().scripting.getComputedColorValue();\n      }\n      // Otherwise, return a color created based on its URL.\n      return this.#colorGenerator.colorForID(event.callFrame.url);\n    }\n    const defaultColor =\n        getEventStyle(event.name as TraceEngine.Types.TraceEvents.KnownEventName)?.category.getComputedColorValue();\n    return defaultColor || getCategoryStyles().other.getComputedColorValue();\n  }\n\n  /**\n   * Gets the title an event added by this appender should be rendered with.\n   */\n  titleForEvent(entry: TraceEngine.Types.TraceEvents.TraceEventData): string {\n    if (this.isIgnoreListedEntry(entry)) {\n      return i18nString(UIStrings.onIgnoreList);\n    }\n\n    // If the event is a profile call, we need to look up its name based on its\n    // ProfileNode in the CPUProfile for the trace we are working with.\n    if (TraceEngine.Types.TraceEvents.isProfileCall(entry)) {\n      // In the future traceParsedData.Samples will always be defined, but this\n      // is not the case until the sync tracks migration is fully shipped,\n      // hence this extra check.\n      if (this.#traceParsedData.Samples) {\n        const potentialCallName =\n            TraceEngine.Handlers.ModelHandlers.Samples.getProfileCallFunctionName(this.#traceParsedData.Samples, entry);\n        // We need this extra check because the call name could be the empty\n        // string. If it is, we want to fallback to the \"(anonymous)\" text.\n        if (potentialCallName) {\n          return potentialCallName;\n        }\n      }\n\n      return entry.callFrame.functionName || i18nString(UIStrings.anonymous);\n    }\n\n    if (TraceEngine.Types.TraceEvents.isTraceEventDispatch(entry)) {\n      // EventDispatch represent user actions such as clicks, so in this case\n      // rather than show the event title (which is always just \"Event\"), we\n      // add the type (\"click\") to help the user understand the event.\n      return i18nString(UIStrings.eventDispatchS, {PH1: entry.args.data.type});\n    }\n\n    const defaultName = getEventStyle(entry.name as TraceEngine.Types.TraceEvents.KnownEventName)?.title;\n    return defaultName || entry.name;\n  }\n\n  /**\n   * Returns the info shown when an event added by this appender\n   * is hovered in the timeline.\n   */\n  highlightedEntryInfo(event: TraceEngine.Types.TraceEvents.SyntheticTraceEntry): HighlightedEntryInfo {\n    let title = this.titleForEvent(event);\n    if (TraceEngine.Types.TraceEvents.isTraceEventParseHTML(event)) {\n      const startLine = event.args['beginData']['startLine'];\n      const endLine = event.args['endData'] && event.args['endData']['endLine'];\n      const eventURL = event.args['beginData']['url'] as Platform.DevToolsPath.UrlString;\n      const url = Bindings.ResourceUtils.displayNameForURL(eventURL);\n      const range = (endLine !== -1 || endLine === startLine) ? `${startLine}...${endLine}` : startLine;\n      title += ` - ${url} [${range}]`;\n    }\n    return {title, formattedTime: getFormattedTime(event.dur, event.selfTime)};\n  }\n}\n"]}