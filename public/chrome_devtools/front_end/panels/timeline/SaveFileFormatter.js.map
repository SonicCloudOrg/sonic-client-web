{"version":3,"file":"SaveFileFormatter.js","sourceRoot":"","sources":["../../../../../../front_end/panels/timeline/SaveFileFormatter.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAI7B;;;GAGG;AACH,MAAM,SAAS,CAAC,CACZ,2BAA2B,CAAC,cAAuE;IAErG,MAAM,mBAAmB,GAAG,MAAM,CAAC;IAEnC,yEAAyE;IACzE,MAAM,KAAK,CAAC;IACZ,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QAC9B,MAAM,aAAa,GAAG,cAAc,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC;QACxD,sDAAsD;QACtD,MAAM,SAAS,GAAG,aAAa,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC;QAC7C,MAAM,KAAK,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,CAAC;QAEvC,IAAI,cAAc,GAAG,mBAAmB,CAAC;QACzC,IAAI,SAAS,GAAG,EAAE,CAAC;QACnB,KAAK,MAAM,IAAI,IAAI,aAAa,EAAE,CAAC;YACjC,SAAS,IAAI,QAAQ,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC;YAC5C,cAAc,EAAE,CAAC;YACjB,IAAI,cAAc,KAAK,CAAC,EAAE,CAAC;gBACzB,MAAM,SAAS,CAAC;gBAChB,cAAc,GAAG,mBAAmB,CAAC;gBACrC,SAAS,GAAG,EAAE,CAAC;YACjB,CAAC;QACH,CAAC;QACD,MAAM,SAAS,CAAC;IAClB,CAAC;IACD,MAAM,KAAK,CAAC;AACd,CAAC;AACD;;;GAGG;AACH,MAAM,SAAS,CAAC,CACZ,kBAAkB,CACd,WAAoE,EACpE,QAAwD;IAE9D,MAAM,gBAAgB,IAAI,CAAC,SAAS,CAAC,QAAQ,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;IAChE,MAAM,oBAAoB,CAAC;IAC3B,KAAK,CAAC,CAAC,2BAA2B,CAAC,WAAW,CAAC,CAAC;IAChD,MAAM,KAAK,CAAC;AACd,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,uBAAuB,CAAC,UAAqC;IAC3E,OAAO,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;AACpC,CAAC","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Protocol from '../../generated/protocol.js';\nimport type * as TraceEngine from '../../models/trace/trace.js';\n/**\n * Generates a JSON representation of an array of objects with the objects\n * printed one per line for improved readability (but not *too* verbose).\n */\nexport function*\n    arrayOfObjectsJsonGenerator(arrayOfObjects: readonly TraceEngine.Types.TraceEvents.TraceEventData[]):\n        IterableIterator<string> {\n  const ITEMS_PER_ITERATION = 10_000;\n\n  // Stringify and emit items separately to avoid a giant string in memory.\n  yield '[\\n';\n  if (arrayOfObjects.length > 0) {\n    const itemsIterator = arrayOfObjects[Symbol.iterator]();\n    // Emit first item manually to avoid a trailing comma.\n    const firstItem = itemsIterator.next().value;\n    yield `  ${JSON.stringify(firstItem)}`;\n\n    let itemsRemaining = ITEMS_PER_ITERATION;\n    let itemsJSON = '';\n    for (const item of itemsIterator) {\n      itemsJSON += `,\\n  ${JSON.stringify(item)}`;\n      itemsRemaining--;\n      if (itemsRemaining === 0) {\n        yield itemsJSON;\n        itemsRemaining = ITEMS_PER_ITERATION;\n        itemsJSON = '';\n      }\n    }\n    yield itemsJSON;\n  }\n  yield '\\n]';\n}\n/**\n * Generates a JSON representation of traceData line-by-line for a nicer printed\n * version with one trace event per line.\n */\nexport function*\n    traceJsonGenerator(\n        traceEvents: readonly TraceEngine.Types.TraceEvents.TraceEventData[],\n        metadata: Readonly<TraceEngine.Types.File.MetaData>|null,\n        ): IterableIterator<string> {\n  yield `{\"metadata\": ${JSON.stringify(metadata || {}, null, 2)}`;\n  yield ',\\n\"traceEvents\": ';\n  yield* arrayOfObjectsJsonGenerator(traceEvents);\n  yield '}\\n';\n}\n\n/**\n * Generates a JSON representation of CPU profile.\n */\nexport function cpuprofileJsonGenerator(cpuprofile: Protocol.Profiler.Profile): string {\n  return JSON.stringify(cpuprofile);\n}\n"]}