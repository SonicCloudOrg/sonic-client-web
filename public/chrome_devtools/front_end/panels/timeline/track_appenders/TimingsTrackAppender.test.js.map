{"version":3,"file":"TimingsTrackAppender.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/timeline/track_appenders/TimingsTrackAppender.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Root from '../../../core/root/root.js';\nimport * as TraceModel from '../../../models/trace/trace.js';\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport {TraceLoader} from '../../../testing/TraceLoader.js';\nimport * as PerfUI from '../../../ui/legacy/components/perf_ui/perf_ui.js';\nimport * as ThemeSupport from '../../../ui/legacy/theme_support/theme_support.js';\nimport * as Timeline from '../timeline.js';\n\nfunction initTrackAppender(\n    flameChartData: PerfUI.FlameChart.FlameChartTimelineData,\n    traceParsedData: TraceModel.Handlers.Types.TraceParseData,\n    entryData: Timeline.TimelineFlameChartDataProvider.TimelineFlameChartEntry[],\n    entryTypeByLevel: Timeline.TimelineFlameChartDataProvider.EntryType[],\n    ): Timeline.TimingsTrackAppender.TimingsTrackAppender {\n  const compatibilityTracksAppender = new Timeline.CompatibilityTracksAppender.CompatibilityTracksAppender(\n      flameChartData, traceParsedData, entryData, entryTypeByLevel);\n  return compatibilityTracksAppender.timingsTrackAppender();\n}\n\ndescribeWithEnvironment('TimingTrackAppender', function() {\n  let traceParsedData: TraceModel.Handlers.Types.TraceParseData;\n  let timingsTrackAppender: Timeline.TimingsTrackAppender.TimingsTrackAppender;\n  let entryData: Timeline.TimelineFlameChartDataProvider.TimelineFlameChartEntry[] = [];\n  let flameChartData = PerfUI.FlameChart.FlameChartTimelineData.createEmpty();\n  let entryTypeByLevel: Timeline.TimelineFlameChartDataProvider.EntryType[] = [];\n  beforeEach(async function() {\n    traceParsedData = await TraceLoader.traceEngine(this, 'timings-track.json.gz');\n    timingsTrackAppender = initTrackAppender(flameChartData, traceParsedData, entryData, entryTypeByLevel);\n    timingsTrackAppender.appendTrackAtLevel(0);\n  });\n  afterEach(() => {\n    entryData = [];\n    flameChartData = PerfUI.FlameChart.FlameChartTimelineData.createEmpty();\n    entryTypeByLevel = [];\n  });\n\n  describe('appendTrackAtLevel', () => {\n    it('marks all levels used by the track with the `TrackAppender` type', () => {\n      // 8 levels should be taken:\n      //   * 1 for page load marks.\n      //   * 1 performance.marks.\n      //   * 3 used by performance.measures.\n      //   * 1 used by console timestamps.\n      //   * 1 used by console.time calls.\n      const levelCount = 7;\n      assert.strictEqual(entryTypeByLevel.length, levelCount);\n      const allEntriesAreTrackAppender =\n          entryTypeByLevel.every(type => type === Timeline.TimelineFlameChartDataProvider.EntryType.TrackAppender);\n      assert.isTrue(allEntriesAreTrackAppender);\n    });\n    it('creates a flamechart group for the timings track', () => {\n      assert.strictEqual(flameChartData.groups.length, 1);\n      assert.strictEqual(flameChartData.groups[0].name, 'Timings');\n    });\n    it('populates the markers array in ascendent order', () => {\n      const traceMarkers = traceParsedData.PageLoadMetrics.allMarkerEvents;\n      assert.strictEqual(flameChartData.markers.length, traceMarkers.length);\n      for (let i = 1; i < flameChartData.markers.length; i++) {\n        assert.isAtLeast(flameChartData.markers[i].startTime(), flameChartData.markers[i - 1].startTime());\n      }\n    });\n    it('creates a TimelineFlameChartMarker for each page load marker event in a trace', () => {\n      const traceMarkers = traceParsedData.PageLoadMetrics.allMarkerEvents;\n      assert.strictEqual(flameChartData.markers.length, traceMarkers.length);\n      for (const traceMarker of traceMarkers) {\n        const markerTimeMs = TraceModel.Helpers.Timing.microSecondsToMilliseconds(traceMarker.ts);\n        const flameChartMarker =\n            flameChartData.markers.find(flameChartMarker => flameChartMarker.startTime() === markerTimeMs);\n        assert.exists(flameChartMarker);\n      }\n      assert.strictEqual(flameChartData.markers.length, traceMarkers.length);\n    });\n    it('adds start times correctly', () => {\n      const traceMarkers = traceParsedData.PageLoadMetrics.allMarkerEvents;\n      const performanceMarks = traceParsedData.UserTimings.performanceMarks;\n      const performanceMeasures = traceParsedData.UserTimings.performanceMeasures;\n      const consoleTimings = traceParsedData.UserTimings.consoleTimings;\n      const consoleTimestamps = traceParsedData.UserTimings.timestampEvents;\n      for (const event\n               of [...traceMarkers, ...performanceMarks, ...performanceMeasures, ...consoleTimings,\n                   ...consoleTimestamps]) {\n        const markerIndex = entryData.indexOf(event);\n        assert.exists(markerIndex);\n        assert.strictEqual(\n            flameChartData.entryStartTimes[markerIndex],\n            TraceModel.Helpers.Timing.microSecondsToMilliseconds(event.ts));\n      }\n    });\n    it('adds total times correctly', () => {\n      const traceMarkers = traceParsedData.PageLoadMetrics.allMarkerEvents;\n      const performanceMarks = traceParsedData.UserTimings.performanceMarks;\n      const performanceMeasures = traceParsedData.UserTimings.performanceMeasures;\n      const consoleTimings = traceParsedData.UserTimings.consoleTimings;\n      const consoleTimestamps = traceParsedData.UserTimings.timestampEvents;\n      for (const event\n               of [...traceMarkers, ...performanceMarks, ...performanceMeasures, ...consoleTimings,\n                   ...consoleTimestamps]) {\n        const markerIndex = entryData.indexOf(event);\n        assert.exists(markerIndex);\n        if (TraceModel.Types.TraceEvents.isTraceEventMarkerEvent(event)) {\n          assert.isNaN(flameChartData.entryTotalTimes[markerIndex]);\n          continue;\n        }\n        const expectedTotalTimeForEvent = event.dur ?\n            TraceModel.Helpers.Timing.microSecondsToMilliseconds(event.dur as TraceModel.Types.Timing.MicroSeconds) :\n            Timeline.TimelineFlameChartDataProvider.InstantEventVisibleDurationMs;\n        assert.strictEqual(flameChartData.entryTotalTimes[markerIndex], expectedTotalTimeForEvent);\n      }\n    });\n  });\n\n  describe('colorForEvent and titleForEvent', () => {\n    it('returns the correct color and title for page load markers', () => {\n      const traceMarkers = traceParsedData.PageLoadMetrics.allMarkerEvents;\n      const firstContentfulPaint = traceMarkers.find(marker => marker.name === 'firstContentfulPaint');\n      const markLoad = traceMarkers.find(marker => marker.name === 'MarkLoad');\n      const markDOMContent = traceMarkers.find(marker => marker.name === 'MarkDOMContent');\n      const firstPaint = traceMarkers.find(marker => marker.name === 'firstPaint');\n      const largestContentfulPaint = traceMarkers.find(marker => marker.name === 'largestContentfulPaint::Candidate');\n\n      if (firstContentfulPaint === undefined || markLoad === undefined || markDOMContent === undefined ||\n          firstPaint === undefined || largestContentfulPaint === undefined) {\n        throw new Error('A metric was not found');\n      }\n\n      assert.strictEqual(timingsTrackAppender.colorForEvent(firstContentfulPaint), '#1A6937');\n      assert.strictEqual(\n          timingsTrackAppender.titleForEvent(firstContentfulPaint),\n          TraceModel.Handlers.ModelHandlers.PageLoadMetrics.MetricName.FCP);\n\n      assert.strictEqual(timingsTrackAppender.colorForEvent(markLoad), '#B31412');\n      assert.strictEqual(\n          timingsTrackAppender.titleForEvent(markLoad), TraceModel.Handlers.ModelHandlers.PageLoadMetrics.MetricName.L);\n\n      assert.strictEqual(timingsTrackAppender.colorForEvent(markDOMContent), '#0867CB');\n      assert.strictEqual(\n          timingsTrackAppender.titleForEvent(markDOMContent),\n          TraceModel.Handlers.ModelHandlers.PageLoadMetrics.MetricName.DCL);\n\n      assert.strictEqual(timingsTrackAppender.colorForEvent(firstPaint), '#228847');\n      assert.strictEqual(\n          timingsTrackAppender.titleForEvent(firstPaint),\n          TraceModel.Handlers.ModelHandlers.PageLoadMetrics.MetricName.FP);\n\n      assert.strictEqual(timingsTrackAppender.colorForEvent(largestContentfulPaint), '#1A3422');\n      assert.strictEqual(\n          timingsTrackAppender.titleForEvent(largestContentfulPaint),\n          TraceModel.Handlers.ModelHandlers.PageLoadMetrics.MetricName.LCP);\n    });\n\n    it('returns the correct title for performance measures', () => {\n      const performanceMeasures = traceParsedData.UserTimings.performanceMeasures;\n      for (const measure of performanceMeasures) {\n        assert.strictEqual(timingsTrackAppender.titleForEvent(measure), measure.name);\n      }\n    });\n\n    it('returns the correct title for console timings', () => {\n      const traceMarkers = traceParsedData.UserTimings.consoleTimings;\n      for (const mark of traceMarkers) {\n        assert.strictEqual(timingsTrackAppender.titleForEvent(mark), mark.name);\n      }\n    });\n\n    it('returns the correct title for performance marks', () => {\n      const traceMarkers = traceParsedData.UserTimings.performanceMarks;\n      for (const mark of traceMarkers) {\n        assert.strictEqual(timingsTrackAppender.titleForEvent(mark), `[mark]: ${mark.name}`);\n      }\n    });\n\n    it('returns the correct title for console timestamps', () => {\n      const traceMarkers = traceParsedData.UserTimings.timestampEvents;\n      for (const mark of traceMarkers) {\n        assert.strictEqual(timingsTrackAppender.titleForEvent(mark), `TimeStamp: ${mark.args.data.message}`);\n      }\n    });\n  });\n\n  describe('highlightedEntryInfo', () => {\n    it('shows the time of the mark, not the duration, if the event is a performance mark', () => {\n      const firstMark = traceParsedData.UserTimings.performanceMarks[0];\n      const highlightedEntryInfo = timingsTrackAppender.highlightedEntryInfo(firstMark);\n      assert.deepEqual(highlightedEntryInfo, {\n        title: '[mark]: myMark',\n        formattedTime: '1.12\\u00A0s',\n      });\n    });\n\n    it('shows the time of the mark for an LCP event', () => {\n      const largestContentfulPaint = traceParsedData.PageLoadMetrics.allMarkerEvents.find(\n          marker => marker.name === 'largestContentfulPaint::Candidate');\n      if (!largestContentfulPaint) {\n        throw new Error('Could not find LCP event');\n      }\n      const highlightedEntryInfo = timingsTrackAppender.highlightedEntryInfo(largestContentfulPaint);\n      assert.deepEqual(highlightedEntryInfo, {\n        title: 'LCP',\n        formattedTime: '2.42\\u00A0s',\n      });\n    });\n\n    it('shows the time of the mark for an FCP event', () => {\n      const firstContentfulPaint =\n          traceParsedData.PageLoadMetrics.allMarkerEvents.find(marker => marker.name === 'firstContentfulPaint');\n      if (!firstContentfulPaint) {\n        throw new Error('Could not find FCP event');\n      }\n      const highlightedEntryInfo = timingsTrackAppender.highlightedEntryInfo(firstContentfulPaint);\n      assert.deepEqual(highlightedEntryInfo, {\n        title: 'FCP',\n        formattedTime: '2.42\\u00A0s',\n      });\n    });\n\n    it('shows the time of the mark for a DCL event', () => {\n      const dclEvent = traceParsedData.PageLoadMetrics.allMarkerEvents.find(marker => marker.name === 'MarkDOMContent');\n      if (!dclEvent) {\n        throw new Error('Could not find DCL event');\n      }\n      const highlightedEntryInfo = timingsTrackAppender.highlightedEntryInfo(dclEvent);\n      assert.deepEqual(highlightedEntryInfo, {\n        title: 'DCL',\n        formattedTime: '2.42\\u00A0s',\n      });\n    });\n\n    it('shows the time of a console.timestamp event in the hover info', () => {\n      const timestampEvent = traceParsedData.UserTimings.timestampEvents[0];\n      const highlightedEntryInfo = timingsTrackAppender.highlightedEntryInfo(timestampEvent);\n\n      assert.deepEqual(highlightedEntryInfo, {\n        title: 'TimeStamp: a timestamp',\n        formattedTime: '615.25\\u00A0ms',\n      });\n    });\n\n    it('returns the info for a performance.measure calls correctly', () => {\n      const performanceMeasures = traceParsedData.UserTimings.performanceMeasures;\n      const highlightedEntryInfo = timingsTrackAppender.highlightedEntryInfo(performanceMeasures[0]);\n      // The i18n encodes spaces using the u00A0 unicode character.\n      assert.strictEqual(highlightedEntryInfo.formattedTime, ('500.07\\u00A0ms'));\n    });\n\n    it('returns the info for a console.time calls correctly', () => {\n      const consoleTimings = traceParsedData.UserTimings.consoleTimings;\n      const highlightedEntryInfo = timingsTrackAppender.highlightedEntryInfo(consoleTimings[0]);\n      // The i18n encodes spaces using the u00A0 unicode character.\n      assert.strictEqual(highlightedEntryInfo.formattedTime, ('1.60\\u00A0s'));\n    });\n  });\n\n  describe('extension markers', () => {\n    beforeEach(async function() {\n      Root.Runtime.experiments.enableForTest('timeline-extensions');\n\n      traceParsedData = await TraceLoader.traceEngine(this, 'extension-tracks-and-marks.json.gz');\n      timingsTrackAppender = initTrackAppender(flameChartData, traceParsedData, entryData, entryTypeByLevel);\n      timingsTrackAppender.appendTrackAtLevel(0);\n      // Rather than use the real colours here and burden the test with having to\n      // inject loads of CSS, we fake out the colours. this is fine for our tests as\n      // the exact value of the colours is not important; we just make sure that it\n      // parses them out correctly. Each variable is given a different rgb() value to\n      // ensure we know the code is working and using the right one.\n      const styleElement = document.createElement('style');\n      styleElement.id = 'fake-perf-panel-colors';\n      styleElement.textContent = `\n        :root {\n          --ref-palette-error40: rgb(10 10 10);\n        }\n      `;\n      document.documentElement.appendChild(styleElement);\n      ThemeSupport.ThemeSupport.clearThemeCache();\n    });\n    afterEach(() => {\n      Root.Runtime.experiments.disableForTest('timeline-extensions');\n      entryData = [];\n      flameChartData = PerfUI.FlameChart.FlameChartTimelineData.createEmpty();\n      entryTypeByLevel = [];\n      const styleElementToRemove = document.documentElement.querySelector('#fake-perf-panel-colors');\n      if (styleElementToRemove) {\n        document.documentElement.removeChild(styleElementToRemove);\n      }\n      ThemeSupport.ThemeSupport.clearThemeCache();\n    });\n\n    it('creates a TimelineFlameChartMarker for each extension marker event in a trace', () => {\n      const extensionMarkers = traceParsedData.ExtensionTraceData.extensionMarkers;\n      for (const traceMarker of extensionMarkers) {\n        const markerTimeMs = TraceModel.Helpers.Timing.microSecondsToMilliseconds(traceMarker.ts);\n        const flameChartMarker =\n            flameChartData.markers.find(flameChartMarker => flameChartMarker.startTime() === markerTimeMs);\n        assert.exists(flameChartMarker);\n      }\n    });\n\n    it('returns the correct color and title for extension markers', function() {\n      const extensionMarkers = traceParsedData.ExtensionTraceData.extensionMarkers;\n      for (const event of extensionMarkers) {\n        assert.strictEqual(timingsTrackAppender.titleForEvent(event), event.name);\n        // \"error\" color category is mapped to --ref-palette-error40\n        // which is faked out to 10, 10, 10\n        assert.strictEqual(timingsTrackAppender.colorForEvent(event), 'rgb(10 10 10)');\n      }\n    });\n    it('returns the correct color and title for extension markers', function() {\n      const extensionMarkers = traceParsedData.ExtensionTraceData.extensionMarkers;\n      for (const event of extensionMarkers) {\n        assert.strictEqual(timingsTrackAppender.titleForEvent(event), event.name);\n        // \"error\" color category is mapped to --ref-palette-error40\n        // which is faked out to 10, 10, 10\n        assert.strictEqual(timingsTrackAppender.colorForEvent(event), 'rgb(10 10 10)');\n      }\n    });\n    it('returns the tool tip info for an entry correctly', function() {\n      const extensionMarker = traceParsedData.ExtensionTraceData.extensionMarkers.at(0);\n      assert.isOk(extensionMarker, 'did not find any extension markers');\n\n      const highlightedEntryInfo = timingsTrackAppender.highlightedEntryInfo(extensionMarker);\n      assert.strictEqual(highlightedEntryInfo.title, 'A mark');\n    });\n  });\n});\n"]}