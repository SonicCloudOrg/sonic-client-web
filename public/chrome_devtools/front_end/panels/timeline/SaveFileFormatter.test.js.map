{"version":3,"file":"SaveFileFormatter.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/timeline/SaveFileFormatter.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAG7B,OAAO,EAAC,iBAAiB,EAAC,MAAM,+BAA+B,CAAC;AAEhE,OAAO,KAAK,QAAQ,MAAM,eAAe,CAAC;AAE1C,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;IACjC,SAAS,eAAe,CAAC,KAAa;QACpC,IAAI,CAAC;YACH,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACpB,CAAC;QAAC,MAAM,CAAC;YACP,MAAM,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAC;QAC9C,CAAC;IACH,CAAC;IACD,QAAQ,CAAC,6BAA6B,EAAE,GAAG,EAAE;QAC3C,EAAE,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;YAClE,MAAM,QAAQ,GAAG,EAAC,GAAG,iBAAiB,EAAE,IAAI,EAAE,WAAW,EAAC,CAAC;YAC3D,MAAM,QAAQ,GAAG,EAAC,GAAG,iBAAiB,EAAE,IAAI,EAAE,WAAW,EAAC,CAAC;YAE3D,MAAM,SAAS,GACX,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,2BAA2B,CAAC,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACtG,eAAe,CAAC,SAAS,CAAC,CAAC;YAC3B,MAAM,CAAC,WAAW,CAAC,SAAS,EAAE;;;EAGlC,CAAC,CAAC;QACA,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAClC,EAAE,CAAC,6DAA6D,EAAE,KAAK,IAAI,EAAE;YAC3E,MAAM,QAAQ,GAAG,EAAC,GAAG,iBAAiB,EAAE,IAAI,EAAE,WAAW,EAAC,CAAC;YAC3D,MAAM,QAAQ,GAAG,EAAC,GAAG,iBAAiB,EAAE,IAAI,EAAE,WAAW,EAAC,CAAC;YAC3D,MAAM,MAAM,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;YACpC,MAAM,QAAQ,GAAoC;gBAChD,MAAM,EAAE,UAAU;gBAClB,SAAS,EAAE,MAAM;gBACjB,iBAAiB,EAAE,GAAG;gBACtB,aAAa,EAAE,CAAC;gBAChB,mBAAmB,EAAE,CAAC;aACvB,CAAC;YACF,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACvG,eAAe,CAAC,SAAS,CAAC,CAAC;YAC3B,MAAM,CAAC,WAAW,CAAC,SAAS,EAAE;;;;;;;;;;KAU/B,CAAC,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;YACjE,MAAM,QAAQ,GAAG,EAAC,GAAG,iBAAiB,EAAE,IAAI,EAAE,WAAW,EAAC,CAAC;YAC3D,MAAM,QAAQ,GAAG,EAAC,GAAG,iBAAiB,EAAE,IAAI,EAAE,WAAW,EAAC,CAAC;YAC3D,MAAM,MAAM,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;YACpC,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACnG,eAAe,CAAC,SAAS,CAAC,CAAC;YAC3B,MAAM,CAAC,WAAW,CAAC,SAAS,EAAE;;;;KAI/B,CAAC,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as TraceEngine from '../../models/trace/trace.js';\nimport {defaultTraceEvent} from '../../testing/TraceHelpers.js';\n\nimport * as Timeline from './timeline.js';\n\ndescribe('SaveFileFormatter', () => {\n  function assertValidJSON(input: string) {\n    try {\n      JSON.parse(input);\n    } catch {\n      assert.fail('Parsing input as JSON failed');\n    }\n  }\n  describe('arrayOfObjectsJsonGenerator', () => {\n    it('generates JSON where each event is on its own line', async () => {\n      const eventOne = {...defaultTraceEvent, name: 'event_one'};\n      const eventTwo = {...defaultTraceEvent, name: 'event_two'};\n\n      const formatted =\n          Array.from(Timeline.SaveFileFormatter.arrayOfObjectsJsonGenerator([eventOne, eventTwo])).join('');\n      assertValidJSON(formatted);\n      assert.strictEqual(formatted, `[\n  {\"name\":\"event_one\",\"tid\":0,\"pid\":0,\"ts\":0,\"cat\":\"test\",\"ph\":\"M\"},\n  {\"name\":\"event_two\",\"tid\":0,\"pid\":0,\"ts\":0,\"cat\":\"test\",\"ph\":\"M\"}\n]`);\n    });\n  });\n\n  describe('traceJsonGenerator', () => {\n    it('contains top level keys for the events and for the metadata', async () => {\n      const eventOne = {...defaultTraceEvent, name: 'event_one'};\n      const eventTwo = {...defaultTraceEvent, name: 'event_two'};\n      const events = [eventOne, eventTwo];\n      const metadata: TraceEngine.Types.File.MetaData = {\n        source: 'DevTools',\n        startTime: '1234',\n        networkThrottling: '4',\n        cpuThrottling: 1,\n        hardwareConcurrency: 1,\n      };\n      const formatted = Array.from(Timeline.SaveFileFormatter.traceJsonGenerator(events, metadata)).join('');\n      assertValidJSON(formatted);\n      assert.strictEqual(formatted, `{\"metadata\": {\n  \"source\": \"DevTools\",\n  \"startTime\": \"1234\",\n  \"networkThrottling\": \"4\",\n  \"cpuThrottling\": 1,\n  \"hardwareConcurrency\": 1\n},\n\"traceEvents\": [\n  {\"name\":\"event_one\",\"tid\":0,\"pid\":0,\"ts\":0,\"cat\":\"test\",\"ph\":\"M\"},\n  {\"name\":\"event_two\",\"tid\":0,\"pid\":0,\"ts\":0,\"cat\":\"test\",\"ph\":\"M\"}\n]}\\n`);\n    });\n\n    it('will emit {} for the metadata if none is provided', async () => {\n      const eventOne = {...defaultTraceEvent, name: 'event_one'};\n      const eventTwo = {...defaultTraceEvent, name: 'event_two'};\n      const events = [eventOne, eventTwo];\n      const formatted = Array.from(Timeline.SaveFileFormatter.traceJsonGenerator(events, null)).join('');\n      assertValidJSON(formatted);\n      assert.strictEqual(formatted, `{\"metadata\": {},\n\"traceEvents\": [\n  {\"name\":\"event_one\",\"tid\":0,\"pid\":0,\"ts\":0,\"cat\":\"test\",\"ph\":\"M\"},\n  {\"name\":\"event_two\",\"tid\":0,\"pid\":0,\"ts\":0,\"cat\":\"test\",\"ph\":\"M\"}\n]}\\n`);\n    });\n  });\n});\n"]}