{"version":3,"file":"TimelineController.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/timeline/TimelineController.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as TraceEngine from '../../models/trace/trace.js';\nimport {renderElementIntoDOM} from '../../testing/DOMHelpers.js';\nimport {describeWithRealConnection} from '../../testing/RealConnection.js';\n\nimport * as Timeline from './timeline.js';\n\ndescribeWithRealConnection('TimelineController', () => {\n  it('calls the callback methods on the client in the expected order', async function() {\n    // The test needs at least 0.5s to have progress events be sent. Set a higher timeout to avoid flakiness.\n    if (this.timeout() !== 0) {\n      this.timeout(5_000);\n    }\n    const stubs = {\n      recordingProgress: sinon.stub(),\n      loadingStarted: sinon.stub(),\n      processingStarted: sinon.stub(),\n      loadingProgress: sinon.stub(),\n      loadingComplete: sinon.stub().callsFake(function(\n          _collectedEvents: TraceEngine.Types.TraceEvents.TraceEventData[],\n      ) {}),\n    };\n    const client: Timeline.TimelineController.Client = {\n      recordingProgress(usage) {\n        stubs.recordingProgress(usage);\n      },\n      loadingStarted() {\n        stubs.loadingStarted();\n      },\n      processingStarted() {\n        stubs.processingStarted();\n      },\n      loadingProgress() {\n        stubs.loadingProgress();\n      },\n      async loadingComplete(collectedEvents) {\n        stubs.loadingComplete(collectedEvents);\n      },\n      loadingCompleteForTest() {},\n    };\n\n    const primaryPage = SDK.TargetManager.TargetManager.instance().primaryPageTarget();\n    if (!primaryPage) {\n      throw new Error('Could not find primary page');\n    }\n    const root = SDK.TargetManager.TargetManager.instance().rootTarget();\n    if (!root) {\n      throw new Error('Could not find root target');\n    }\n\n    const controller = new Timeline.TimelineController.TimelineController(root, primaryPage, client);\n\n    class TestTracingComponent extends HTMLElement {\n      connectedCallback() {\n        const newDiv = document.createElement('div');\n        newDiv.innerHTML = 'testing';\n        this.appendChild(newDiv);\n      }\n    }\n    customElements.define('test-tracing-component', TestTracingComponent);\n    const component = new TestTracingComponent();\n\n    // Start a recording and inject the test component to trigger some trace events.\n    await controller.startRecording({});\n    renderElementIntoDOM(component);\n    // Run the test for at least 0.5s to have progress events be sent.\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    await controller.stopRecording();\n    assert.strictEqual(stubs.processingStarted.callCount, 1);\n    // Depending on the speed of the machine you might get more than 1 progress\n    // call, hence we assert that there is at least one.\n    assert.isAtLeast(stubs.recordingProgress.callCount, 1);\n    assert.strictEqual(stubs.loadingStarted.callCount, 1);\n    assert.isAtLeast(stubs.loadingProgress.callCount, 1);\n    assert.strictEqual(stubs.loadingComplete.callCount, 1);\n    const [collectedEvents] = stubs.loadingComplete.getCall(0).args as [TraceEngine.Types.TraceEvents.TraceEventData[]];\n    // Ensure we collected events during tracing.\n    assert.isTrue(collectedEvents.length > 0);\n  });\n});\n"]}