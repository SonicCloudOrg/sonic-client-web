{"version":3,"file":"BreakpointEditDialog.js","sourceRoot":"","sources":["../../../../../../front_end/panels/sources/BreakpointEditDialog.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as BreakpointManager from '../../models/breakpoints/breakpoints.js';\nimport * as CodeMirror from '../../third_party/codemirror.next/codemirror.next.js';\nimport * as IconButton from '../../ui/components/icon_button/icon_button.js';\nimport * as TextEditor from '../../ui/components/text_editor/text_editor.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport breakpointEditDialogStyles from './breakpointEditDialog.css.js';\n\nconst {Direction} = TextEditor.TextEditorHistory;\n\nconst UIStrings = {\n  /**\n   *@description Screen reader label for a select box that chooses the breakpoint type in the Sources panel when editing a breakpoint\n   */\n  breakpointType: 'Breakpoint type',\n  /**\n   *@description Text in Breakpoint Edit Dialog of the Sources panel\n   */\n  breakpoint: 'Breakpoint',\n  /**\n   *@description Tooltip text in Breakpoint Edit Dialog of the Sources panel that shows up when hovering over the close icon\n   */\n  closeDialog: 'Close edit dialog and save changes',\n  /**\n   *@description Text in Breakpoint Edit Dialog of the Sources panel\n   */\n  conditionalBreakpoint: 'Conditional breakpoint',\n  /**\n   *@description Text in Breakpoint Edit Dialog of the Sources panel\n   */\n  logpoint: 'Logpoint',\n  /**\n   *@description Text in Breakpoint Edit Dialog of the Sources panel\n   */\n  expressionToCheckBeforePausingEg: 'Expression to check before pausing, e.g. x > 5',\n  /**\n   *@description Type selector element title in Breakpoint Edit Dialog of the Sources panel\n   */\n  pauseOnlyWhenTheConditionIsTrue: 'Pause only when the condition is true',\n  /**\n   * @description Link text in the Breakpoint Edit Dialog of the Sources panel\n   */\n  learnMoreOnBreakpointTypes: 'Learn more: Breakpoint Types',\n  /**\n   *@description Text in Breakpoint Edit Dialog of the Sources panel. It is used as\n   *the placeholder for a text input field before the user enters text. Provides the user with\n   *an example on how to use Logpoints. 'Log' is a verb and 'message' is a noun.\n   *See: https://developer.chrome.com/blog/new-in-devtools-73/#logpoints\n   */\n  logMessageEgXIsX: 'Log message, e.g. `\\'x is\\', x`',\n  /**\n   *@description Type selector element title in Breakpoint Edit Dialog of the Sources panel\n   */\n  logAMessageToConsoleDoNotBreak: 'Log a message to Console, do not break',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/sources/BreakpointEditDialog.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport interface BreakpointEditDialogResult {\n  committed: boolean;\n  condition: BreakpointManager.BreakpointManager.UserCondition;\n  isLogpoint: boolean;\n}\n\nexport class BreakpointEditDialog extends UI.Widget.Widget {\n  private readonly onFinish: (result: BreakpointEditDialogResult) => void;\n  private finished: boolean;\n  private editor: TextEditor.TextEditor.TextEditor;\n  private readonly typeSelector: UI.Toolbar.ToolbarComboBox;\n  private placeholderCompartment: CodeMirror.Compartment;\n\n  #history: TextEditor.AutocompleteHistory.AutocompleteHistory;\n  #editorHistory: TextEditor.TextEditorHistory.TextEditorHistory;\n\n  constructor(\n      editorLineNumber: number, oldCondition: string, isLogpoint: boolean,\n      onFinish: (result: BreakpointEditDialogResult) => void) {\n    super(true);\n\n    const editorConfig = [\n      CodeMirror.javascript.javascriptLanguage,\n      TextEditor.Config.baseConfiguration(oldCondition || ''),\n      TextEditor.Config.closeBrackets.instance(),\n      TextEditor.Config.autocompletion.instance(),\n      CodeMirror.EditorView.lineWrapping,\n      TextEditor.Config.showCompletionHint,\n      TextEditor.Config.conservativeCompletion,\n      CodeMirror.javascript.javascriptLanguage.data.of({\n        autocomplete: (context: CodeMirror.CompletionContext) => this.#editorHistory.historyCompletions(context),\n      }),\n      CodeMirror.autocompletion(),\n      TextEditor.JavaScript.argumentHints(),\n    ];\n\n    this.onFinish = onFinish;\n    this.finished = false;\n    this.element.tabIndex = -1;\n\n    this.element.classList.add('sources-edit-breakpoint-dialog');\n    this.element.setAttribute('jslog', `${VisualLogging.dialog('edit-breakpoint')}`);\n    const header = this.contentElement.createChild('div', 'dialog-header');\n    const toolbar = new UI.Toolbar.Toolbar('source-frame-breakpoint-toolbar', header);\n    toolbar.appendText(`Line ${editorLineNumber + 1}:`);\n\n    this.typeSelector = new UI.Toolbar.ToolbarComboBox(\n        this.onTypeChanged.bind(this), i18nString(UIStrings.breakpointType), undefined, 'type');\n    this.typeSelector.createOption(\n        i18nString(UIStrings.breakpoint), SDK.DebuggerModel.BreakpointType.REGULAR_BREAKPOINT);\n    const conditionalOption = this.typeSelector.createOption(\n        i18nString(UIStrings.conditionalBreakpoint), SDK.DebuggerModel.BreakpointType.CONDITIONAL_BREAKPOINT);\n    const logpointOption =\n        this.typeSelector.createOption(i18nString(UIStrings.logpoint), SDK.DebuggerModel.BreakpointType.LOGPOINT);\n    this.typeSelector.select(isLogpoint ? logpointOption : conditionalOption);\n    toolbar.appendToolbarItem(this.typeSelector);\n\n    const content = oldCondition || '';\n    const finishIfComplete = (view: CodeMirror.EditorView): boolean => {\n      void TextEditor.JavaScript.isExpressionComplete(view.state.doc.toString()).then(complete => {\n        if (complete) {\n          this.finishEditing(true, this.editor.state.doc.toString());\n        } else {\n          CodeMirror.insertNewlineAndIndent(view);\n        }\n      });\n      return true;\n    };\n    const keymap = [\n      {key: 'ArrowUp', run: () => this.#editorHistory.moveHistory(Direction.BACKWARD)},\n      {key: 'ArrowDown', run: () => this.#editorHistory.moveHistory(Direction.FORWARD)},\n      {mac: 'Ctrl-p', run: () => this.#editorHistory.moveHistory(Direction.BACKWARD, true)},\n      {mac: 'Ctrl-n', run: () => this.#editorHistory.moveHistory(Direction.FORWARD, true)},\n      {\n        key: 'Mod-Enter',\n        run: finishIfComplete,\n      },\n      {\n        key: 'Enter',\n        run: finishIfComplete,\n      },\n      {\n        key: 'Shift-Enter',\n        run: CodeMirror.insertNewlineAndIndent,\n      },\n      {\n        key: 'Escape',\n        run: () => {\n          this.finishEditing(false, '');\n          return true;\n        },\n      },\n    ];\n\n    this.placeholderCompartment = new CodeMirror.Compartment();\n\n    const editorWrapper = this.contentElement.appendChild(document.createElement('div'));\n    editorWrapper.classList.add('condition-editor');\n    editorWrapper.setAttribute('jslog', `${VisualLogging.textField().track({change: true})}`);\n\n    this.editor = new TextEditor.TextEditor.TextEditor(CodeMirror.EditorState.create({\n      doc: content,\n      selection: {anchor: 0, head: content.length},\n      extensions: [\n        this.placeholderCompartment.of(this.getPlaceholder()),\n        CodeMirror.keymap.of(keymap),\n        editorConfig,\n      ],\n    }));\n    editorWrapper.appendChild(this.editor);\n\n    const closeIcon = new IconButton.Icon.Icon();\n    closeIcon.name = 'cross';\n    closeIcon.title = i18nString(UIStrings.closeDialog);\n    closeIcon.setAttribute('jslog', `${VisualLogging.close().track({click: true})}`);\n    closeIcon.onclick = () => this.finishEditing(true, this.editor.state.doc.toString());\n    header.appendChild(closeIcon);\n\n    this.#history = new TextEditor.AutocompleteHistory.AutocompleteHistory(\n        Common.Settings.Settings.instance().createLocalSetting('breakpoint-condition-history', []));\n    this.#editorHistory = new TextEditor.TextEditorHistory.TextEditorHistory(this.editor, this.#history);\n\n    const linkWrapper = this.contentElement.appendChild(document.createElement('div'));\n    linkWrapper.classList.add('link-wrapper');\n    const link = UI.Fragment.html`<x-link class=\"link devtools-link\" tabindex=\"0\" href=\"https://goo.gle/devtools-loc\"\n                                          jslog=\"${VisualLogging.link('learn-more')}\">${\n                     i18nString(UIStrings.learnMoreOnBreakpointTypes)}</x-link>` as UI.XLink.XLink;\n    const linkIcon = new IconButton.Icon.Icon();\n    linkIcon.name = 'open-externally';\n    linkIcon.classList.add('link-icon');\n    link.prepend(linkIcon);\n    linkWrapper.appendChild(link);\n\n    this.updateTooltip();\n  }\n\n  saveAndFinish(): void {\n    this.finishEditing(true, this.editor.state.doc.toString());\n  }\n\n  focusEditor(): void {\n    this.editor.editor.focus();\n  }\n\n  private onTypeChanged(): void {\n    if (this.breakpointType === SDK.DebuggerModel.BreakpointType.REGULAR_BREAKPOINT) {\n      this.finishEditing(true, '');\n      return;\n    }\n    this.focusEditor();\n    this.editor.dispatch({effects: this.placeholderCompartment.reconfigure(this.getPlaceholder())});\n    this.updateTooltip();\n  }\n\n  private get breakpointType(): string|null {\n    const option = this.typeSelector.selectedOption();\n    return option ? option.value : null;\n  }\n\n  private getPlaceholder(): CodeMirror.Extension {\n    const type = this.breakpointType;\n    if (type === SDK.DebuggerModel.BreakpointType.CONDITIONAL_BREAKPOINT) {\n      return CodeMirror.placeholder(i18nString(UIStrings.expressionToCheckBeforePausingEg));\n    }\n    if (type === SDK.DebuggerModel.BreakpointType.LOGPOINT) {\n      return CodeMirror.placeholder(i18nString(UIStrings.logMessageEgXIsX));\n    }\n    return [];\n  }\n\n  private updateTooltip(): void {\n    const type = this.breakpointType;\n    if (type === SDK.DebuggerModel.BreakpointType.CONDITIONAL_BREAKPOINT) {\n      UI.Tooltip.Tooltip.install((this.typeSelector.element), i18nString(UIStrings.pauseOnlyWhenTheConditionIsTrue));\n    } else if (type === SDK.DebuggerModel.BreakpointType.LOGPOINT) {\n      UI.Tooltip.Tooltip.install((this.typeSelector.element), i18nString(UIStrings.logAMessageToConsoleDoNotBreak));\n    }\n  }\n\n  finishEditing(committed: boolean, condition: string): void {\n    if (this.finished) {\n      return;\n    }\n    this.finished = true;\n    this.editor.remove();\n    this.#history.pushHistoryItem(condition);\n    const isLogpoint = this.breakpointType === SDK.DebuggerModel.BreakpointType.LOGPOINT;\n    this.onFinish({committed, condition: condition as BreakpointManager.BreakpointManager.UserCondition, isLogpoint});\n  }\n\n  override wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([breakpointEditDialogStyles]);\n  }\n\n  get editorForTest(): TextEditor.TextEditor.TextEditor {\n    return this.editor;\n  }\n}\n"]}