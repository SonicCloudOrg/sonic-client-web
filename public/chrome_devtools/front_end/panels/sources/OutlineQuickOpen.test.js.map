{"version":3,"file":"OutlineQuickOpen.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/sources/OutlineQuickOpen.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as CodeMirror from '../../third_party/codemirror.next/codemirror.next.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport * as Sources from './sources.js';\n\ndescribe('OutlineQuickOpen', () => {\n  describe('generates a correct JavaScript outline', () => {\n    function javaScriptOutline(doc: string) {\n      const extensions = [CodeMirror.javascript.javascript()];\n      const state = CodeMirror.EditorState.create({doc, extensions});\n      return Sources.OutlineQuickOpen.outline(state);\n    }\n\n    it('for empty scripts', () => {\n      assert.isEmpty(javaScriptOutline(''));\n    });\n\n    it('for simple function statements', () => {\n      assert.deepEqual(\n          javaScriptOutline('function f() {}'),\n          [\n            {title: 'f', subtitle: '()', lineNumber: 0, columnNumber: 9},\n          ],\n      );\n      assert.deepEqual(\n          javaScriptOutline('function func(param) { return param; }'),\n          [\n            {title: 'func', subtitle: '(param)', lineNumber: 0, columnNumber: 9},\n          ],\n      );\n      assert.deepEqual(\n          javaScriptOutline('function foo(a, b, c) {}'),\n          [\n            {title: 'foo', subtitle: '(a, b, c)', lineNumber: 0, columnNumber: 9},\n          ],\n      );\n    });\n\n    it('for function statements with rest arguments', () => {\n      assert.deepEqual(\n          javaScriptOutline('function func(...rest) {}'),\n          [\n            {title: 'func', subtitle: '(...rest)', lineNumber: 0, columnNumber: 9},\n          ],\n      );\n      assert.deepEqual(\n          javaScriptOutline('function foo(a, b, ...c) {}'),\n          [\n            {title: 'foo', subtitle: '(a, b, ...c)', lineNumber: 0, columnNumber: 9},\n          ],\n      );\n    });\n\n    it('for function statements with pattern parameters', () => {\n      assert.deepEqual(\n          javaScriptOutline(\n              'function foo({a, b}, c) { return a + b; }\\n' +\n              'function bar(a, [b, [c]]) { return a+b; }'),\n          [\n            {title: 'foo', subtitle: '({‥}, c)', lineNumber: 0, columnNumber: 9},\n            {title: 'bar', subtitle: '(a, [‥])', lineNumber: 1, columnNumber: 9},\n          ],\n      );\n    });\n\n    it('for nested function statements', () => {\n      assert.deepEqual(\n          javaScriptOutline('function foo(){ function bar() {} function baz(a,b ,c) { }}'),\n          [\n            {title: 'foo', subtitle: '()', lineNumber: 0, columnNumber: 9},\n            {title: 'bar', subtitle: '()', lineNumber: 0, columnNumber: 25},\n            {title: 'baz', subtitle: '(a, b, c)', lineNumber: 0, columnNumber: 43},\n          ],\n      );\n    });\n\n    it('for async function statements', () => {\n      assert.deepEqual(\n          javaScriptOutline(\n              'async function foo() { };\\n' +\n              'async function sum(x, y) { return x + y; }'),\n          [\n            {title: 'async foo', subtitle: '()', lineNumber: 0, columnNumber: 15},\n            {title: 'async sum', subtitle: '(x, y)', lineNumber: 1, columnNumber: 15},\n          ],\n      );\n    });\n\n    it('for generator function statements', () => {\n      assert.deepEqual(\n          javaScriptOutline(\n              'function* foo() { }\\n' +\n              'async function* bar(a,b){}'),\n          [\n            {title: '*foo', subtitle: '()', lineNumber: 0, columnNumber: 10},\n            {title: 'async *bar', subtitle: '(a, b)', lineNumber: 1, columnNumber: 16},\n          ],\n      );\n    });\n\n    it('for function expressions in variable declarations', () => {\n      assert.deepEqual(\n          javaScriptOutline('const a = function(a,b) { }, b = function bar(c,d) { }'),\n          [\n            {title: 'a', subtitle: '(a, b)', lineNumber: 0, columnNumber: 6},\n            {title: 'b', subtitle: '(c, d)', lineNumber: 0, columnNumber: 29},\n          ],\n      );\n      assert.deepEqual(\n          javaScriptOutline('let a = function(a,b) { }, b = function bar(c,d) { }'),\n          [\n            {title: 'a', subtitle: '(a, b)', lineNumber: 0, columnNumber: 4},\n            {title: 'b', subtitle: '(c, d)', lineNumber: 0, columnNumber: 27},\n          ],\n      );\n      assert.deepEqual(\n          javaScriptOutline('var a = function(a,b) { }, b = function bar(c,d) { }'),\n          [\n            {title: 'a', subtitle: '(a, b)', lineNumber: 0, columnNumber: 4},\n            {title: 'b', subtitle: '(c, d)', lineNumber: 0, columnNumber: 27},\n          ],\n      );\n    });\n\n    it('for function expressions in property assignments', () => {\n      assert.deepEqual(\n          javaScriptOutline(\n              'a.b.c = function(d, e) { };\\n' +\n              'a.b[c] = function() { };\\n' +\n              'a.b[c].d = function() { };\\n' +\n              '(a || b).c = function() { };\\n'),\n          [\n            {title: 'c', subtitle: '(d, e)', lineNumber: 0, columnNumber: 4},\n            {title: 'd', subtitle: '()', lineNumber: 2, columnNumber: 7},\n            {title: 'c', subtitle: '()', lineNumber: 3, columnNumber: 9},\n          ],\n      );\n    });\n\n    it('for function expressions in object literals', () => {\n      assert.deepEqual(\n          javaScriptOutline(\n              'x = { run: function() { }, get count() { }, set count(value) { }};\\n' +\n              'var foo = { \"bar\": function() { }};\\n' +\n              'var foo = { 42: function() { }}\\n'),\n          [\n            {title: 'run', subtitle: '()', lineNumber: 0, columnNumber: 6},\n            {title: 'get count', subtitle: '()', lineNumber: 0, columnNumber: 31},\n            {title: 'set count', subtitle: '(value)', lineNumber: 0, columnNumber: 48},\n          ],\n      );\n    });\n\n    it('for arrow functions in variable declarations', () => {\n      assert.deepEqual(\n          javaScriptOutline(\n              'var a = x => x + 2;\\n' +\n              'var b = (x, y) => x + y'),\n          [\n            {title: 'a', subtitle: '(x)', lineNumber: 0, columnNumber: 4},\n            {title: 'b', subtitle: '(x, y)', lineNumber: 1, columnNumber: 4},\n          ],\n      );\n      assert.deepEqual(\n          javaScriptOutline(\n              'let x = (a,b) => a + b, y = a => { return a; };\\n' +\n              'const z = x => x'),\n          [\n            {title: 'x', subtitle: '(a, b)', lineNumber: 0, columnNumber: 4},\n            {title: 'y', subtitle: '(a)', lineNumber: 0, columnNumber: 24},\n            {title: 'z', subtitle: '(x)', lineNumber: 1, columnNumber: 6},\n          ],\n      );\n    });\n\n    it('for arrow functions in property assignments', () => {\n      assert.deepEqual(\n          javaScriptOutline(\n              'a.b.c = (d, e) => d + e;\\n' +\n              'a.b[c] = () => { };\\n' +\n              'a.b[c].d = () => { };\\n' +\n              '(a || b).c = () => { };\\n'),\n          [\n            {title: 'c', subtitle: '(d, e)', lineNumber: 0, columnNumber: 4},\n            {title: 'd', subtitle: '()', lineNumber: 2, columnNumber: 7},\n            {title: 'c', subtitle: '()', lineNumber: 3, columnNumber: 9},\n          ],\n      );\n    });\n\n    it('for arrow functions in object literals', () => {\n      assert.deepEqual(\n          javaScriptOutline(\n              'const object = {\\n' +\n              '  foo: x => x,\\n' +\n              '  bar: (a, b) => { return a + b };\\n' +\n              '};'),\n          [\n            {title: 'foo', subtitle: '(x)', lineNumber: 1, columnNumber: 2},\n            {title: 'bar', subtitle: '(a, b)', lineNumber: 2, columnNumber: 2},\n          ],\n      );\n    });\n\n    it('for async function expressions', () => {\n      assert.deepEqual(\n          javaScriptOutline(\n              'const foo = async function() { };\\n' +\n              'var sum = async (x, y) => x + y;'),\n          [\n            {title: 'async foo', subtitle: '()', lineNumber: 0, columnNumber: 6},\n            {title: 'async sum', subtitle: '(x, y)', lineNumber: 1, columnNumber: 4},\n          ],\n      );\n      assert.deepEqual(\n          javaScriptOutline('obj.foo = async function() { return this; }'),\n          [\n            {title: 'async foo', subtitle: '()', lineNumber: 0, columnNumber: 4},\n          ],\n      );\n      assert.deepEqual(\n          javaScriptOutline(\n              '({\\n' +\n              '  async foo(x) { },\\n' +\n              '  async get x() { },\\n' +\n              '  async set x(x) { },\\n' +\n              '  bar: async function() {},\\n' +\n              ' })'),\n          [\n            {title: 'async foo', subtitle: '(x)', lineNumber: 1, columnNumber: 8},\n            {title: 'async get x', subtitle: '()', lineNumber: 2, columnNumber: 12},\n            {title: 'async set x', subtitle: '(x)', lineNumber: 3, columnNumber: 12},\n            {title: 'async bar', subtitle: '()', lineNumber: 4, columnNumber: 2},\n          ],\n      );\n    });\n\n    it('for generator function expressions', () => {\n      assert.deepEqual(\n          javaScriptOutline(\n              'const foo = function*(x) { }\\n' +\n              'var bar = async function*() {}'),\n          [\n            {title: '*foo', subtitle: '(x)', lineNumber: 0, columnNumber: 6},\n            {title: 'async *bar', subtitle: '()', lineNumber: 1, columnNumber: 4},\n          ],\n      );\n      assert.deepEqual(\n          javaScriptOutline(\n              'const object = { foo: function*(x) { } };\\n' +\n              '({ *bar() {}, async *baz() {} })'),\n          [\n            {title: '*foo', subtitle: '(x)', lineNumber: 0, columnNumber: 17},\n            {title: '*bar', subtitle: '()', lineNumber: 1, columnNumber: 4},\n            {title: 'async *baz', subtitle: '()', lineNumber: 1, columnNumber: 21},\n          ],\n      );\n    });\n\n    it('for class statements', () => {\n      assert.deepEqual(\n          javaScriptOutline('class C {}'),\n          [\n            {title: 'class C', lineNumber: 0, columnNumber: 6},\n          ],\n      );\n      assert.deepEqual(\n          javaScriptOutline('class MyAwesomeClass extends C {}'),\n          [\n            {title: 'class MyAwesomeClass', lineNumber: 0, columnNumber: 6},\n          ],\n      );\n    });\n\n    it('for class expressions in variable declarations', () => {\n      assert.deepEqual(\n          javaScriptOutline(\n              'const C = class C {};\\n' +\n              'let A = class extends C {};'),\n          [\n            {title: 'class C', lineNumber: 0, columnNumber: 6},\n            {title: 'class A', lineNumber: 1, columnNumber: 4},\n          ],\n      );\n    });\n\n    it('for class expressions in property assignments', () => {\n      assert.deepEqual(\n          javaScriptOutline('a.b.c = class klass { };'),\n          [{title: 'class c', lineNumber: 0, columnNumber: 4}],\n      );\n    });\n\n    it('for class expressions in object literals', () => {\n      assert.deepEqual(\n          javaScriptOutline('const object = { klass: class { } }'),\n          [{title: 'class klass', lineNumber: 0, columnNumber: 17}],\n      );\n    });\n\n    it('for class constructors', () => {\n      assert.deepEqual(\n          javaScriptOutline('class Test { constructor(foo, bar) { }}'),\n          [\n            {title: 'class Test', lineNumber: 0, columnNumber: 6},\n            {title: 'constructor', subtitle: '(foo, bar)', lineNumber: 0, columnNumber: 13},\n          ],\n      );\n    });\n\n    it('for class methods', () => {\n      assert.deepEqual(\n          javaScriptOutline(\n              'class Test { foo() {} static bar() { }};\\n' +\n              '(class { baz() {} });'),\n          [\n            {title: 'class Test', lineNumber: 0, columnNumber: 6},\n            {title: 'foo', subtitle: '()', lineNumber: 0, columnNumber: 13},\n            {title: 'static bar', subtitle: '()', lineNumber: 0, columnNumber: 29},\n            {title: 'baz', subtitle: '()', lineNumber: 1, columnNumber: 9},\n          ],\n      );\n      assert.deepEqual(\n          javaScriptOutline(\n              'class A {\\n' +\n              '  get x() { return 1; }\\n' +\n              '  set x(x) {}\\n' +\n              '  async foo(){}\\n' +\n              '  *bar() {}\\n' +\n              '  async*baz() {}\\n' +\n              '  static async foo(){}\\n' +\n              '}'),\n          [\n            {title: 'class A', lineNumber: 0, columnNumber: 6},\n            {title: 'get x', subtitle: '()', lineNumber: 1, columnNumber: 6},\n            {title: 'set x', subtitle: '(x)', lineNumber: 2, columnNumber: 6},\n            {title: 'async foo', subtitle: '()', lineNumber: 3, columnNumber: 8},\n            {title: '*bar', subtitle: '()', lineNumber: 4, columnNumber: 3},\n            {title: 'async *baz', subtitle: '()', lineNumber: 5, columnNumber: 8},\n            {title: 'static async foo', subtitle: '()', lineNumber: 6, columnNumber: 15},\n          ],\n      );\n    });\n\n    it('for private methods', () => {\n      assert.deepEqual(\n          javaScriptOutline(\n              'class A {\\n' +\n              '  private #foo() {}\\n' +\n              '  public static #bar(x) {}\\n' +\n              '  protected async #baz(){}\\n' +\n              '}'),\n          [\n            {title: 'class A', lineNumber: 0, columnNumber: 6},\n            {title: '#foo', subtitle: '()', lineNumber: 1, columnNumber: 10},\n            {title: 'static #bar', subtitle: '(x)', lineNumber: 2, columnNumber: 16},\n            {title: 'async #baz', subtitle: '()', lineNumber: 3, columnNumber: 18},\n          ],\n      );\n    });\n\n    it('even in the presence of syntax errors', () => {\n      assert.deepEqual(\n          javaScriptOutline(`\nfunction foo(a, b) {\n  if (a > b) {\n    return a;\n}\n\nfunction bar(eee) {\n  yield foo(eee, 2 * eee);\n}`),\n          [\n            {title: 'foo', subtitle: '(a, b)', lineNumber: 1, columnNumber: 9},\n            {title: 'bar', subtitle: '(eee)', lineNumber: 6, columnNumber: 9},\n          ],\n      );\n    });\n\n    it('for ES5-style class definitions', () => {\n      assert.deepEqual(\n          javaScriptOutline(`var Klass = (function(_super) {\n  function Klass() {\n    _super.apply(this, arguments);\n  }\n\n  Klass.prototype.initialize = function(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  return Klass;\n})(BaseKlass);\n`),\n          [\n            {title: 'Klass', subtitle: '()', lineNumber: 1, columnNumber: 11},\n            {title: 'initialize', subtitle: '(x, y)', lineNumber: 5, columnNumber: 18},\n          ],\n      );\n    });\n  });\n\n  describe('generates a correct JSX outline', () => {\n    function jsxOutline(doc: string) {\n      const extensions = [CodeMirror.javascript.javascript({jsx: true})];\n      const state = CodeMirror.EditorState.create({doc, extensions});\n      return Sources.OutlineQuickOpen.outline(state);\n    }\n\n    it('for an empty script', () => {\n      assert.deepEqual(jsxOutline(''), []);\n    });\n\n    it('for a simple hello world template', () => {\n      assert.deepEqual(\n          jsxOutline(`\nfunction getGreeting(user) {\n  if (user) {\n    return <h1>Hello, {formatName(user)}!</h1>;\n  }\n  return <h1>Hello, Stranger.</h1>;\n}\n\nconst formatName = (name) => {\n  return <blink>{name}</blink>;\n}`),\n          [\n            {title: 'getGreeting', subtitle: '(user)', lineNumber: 1, columnNumber: 9},\n            {title: 'formatName', subtitle: '(name)', lineNumber: 8, columnNumber: 6},\n          ],\n      );\n    });\n  });\n\n  describe('generates a correct TypeScript outline', () => {\n    function typeScriptOutline(doc: string) {\n      const extensions = [CodeMirror.javascript.javascript({typescript: true})];\n      const state = CodeMirror.EditorState.create({doc, extensions});\n      return Sources.OutlineQuickOpen.outline(state);\n    }\n\n    it('for an empty script', () => {\n      assert.deepEqual(typeScriptOutline(''), []);\n    });\n\n    it('for function definitions with types', () => {\n      assert.deepEqual(\n          typeScriptOutline(\n              'function foo(x: T): T { return x; }\\n' +\n              'async function func(param: Klass): Promise<Klass> { return param; }'),\n          [\n            {title: 'foo', subtitle: '(x)', lineNumber: 0, columnNumber: 9},\n            {title: 'async func', subtitle: '(param)', lineNumber: 1, columnNumber: 15},\n          ],\n      );\n      assert.deepEqual(\n          typeScriptOutline(\n              'const sum = (o: {a: number; b: number, c: number}) => o.a + o.b + o.c;',\n              ),\n          [\n            {title: 'sum', subtitle: '(o)', lineNumber: 0, columnNumber: 6},\n          ],\n      );\n    });\n\n    it('for variable declarations with types', () => {\n      assert.deepEqual(\n          typeScriptOutline(\n              'let foo: (a: string) => string = a => a;\\n' +\n              'const bar:(x:number,y:number)=>number = function(x:number, y:number) { return x + y; }'),\n          [\n            {title: 'foo', subtitle: '(a)', lineNumber: 0, columnNumber: 4},\n            {title: 'bar', subtitle: '(x, y)', lineNumber: 1, columnNumber: 6},\n          ],\n      );\n    });\n\n    it('for classes, functions, and methods that use type parameters', () => {\n      assert.deepEqual(\n          typeScriptOutline('class Foo<Bar> {}'),\n          [{title: 'class Foo', lineNumber: 0, columnNumber: 6}],\n      );\n      assert.deepEqual(\n          typeScriptOutline(\n              'function foo<Bar>(bar: Bar): Bar { return new Bar(); }\\n' +\n              'function bar<A, B, C>(): A { return a; }'),\n          [\n            {title: 'foo', subtitle: '(bar)', lineNumber: 0, columnNumber: 9},\n            {title: 'bar', subtitle: '()', lineNumber: 1, columnNumber: 9},\n          ],\n      );\n      assert.deepEqual(\n          typeScriptOutline('class A { foo<D>(d: D): D { return d; } }'),\n          [\n            {title: 'class A', lineNumber: 0, columnNumber: 6},\n            {title: 'foo', subtitle: '(d)', lineNumber: 0, columnNumber: 10},\n          ],\n      );\n    });\n\n    it('for abstract classes', () => {\n      assert.deepEqual(\n          typeScriptOutline('abstract class Foo {};'),\n          [\n            {title: 'class Foo', lineNumber: 0, columnNumber: 15},\n          ],\n      );\n    });\n\n    it('for abstract methods', () => {\n      assert.deepEqual(\n          typeScriptOutline('class Foo { abstract foo() {} abstract async bar() {} };'),\n          [\n            {title: 'class Foo', lineNumber: 0, columnNumber: 6},\n            {title: 'abstract foo', subtitle: '()', lineNumber: 0, columnNumber: 21},\n            {title: 'abstract async bar', subtitle: '()', lineNumber: 0, columnNumber: 45},\n          ],\n      );\n    });\n\n    it('for overriden methods', () => {\n      assert.deepEqual(\n          typeScriptOutline(\n              'class Foo extends Bar {\\n' +\n              ' override foo() {}\\n' +\n              ' override *bar() {}\\n' +\n              '};'),\n          [\n            {title: 'class Foo', lineNumber: 0, columnNumber: 6},\n            {title: 'foo', subtitle: '()', lineNumber: 1, columnNumber: 10},\n            {title: '*bar', subtitle: '()', lineNumber: 2, columnNumber: 11},\n          ],\n      );\n    });\n\n    it('for private methods', () => {\n      assert.deepEqual(\n          typeScriptOutline(\n              'class A {\\n' +\n              '  private #foo() {}\\n' +\n              '  public static #bar(x) {}\\n' +\n              '  protected async #baz(){}\\n' +\n              '}'),\n          [\n            {title: 'class A', lineNumber: 0, columnNumber: 6},\n            {title: '#foo', subtitle: '()', lineNumber: 1, columnNumber: 10},\n            {title: 'static #bar', subtitle: '(x)', lineNumber: 2, columnNumber: 16},\n            {title: 'async #baz', subtitle: '()', lineNumber: 3, columnNumber: 18},\n          ],\n      );\n    });\n\n    it('for classes and methods with privacy modifiers', () => {\n      assert.deepEqual(\n          typeScriptOutline(\n              'class A {\\n' +\n              '  private foo() {}\\n' +\n              '  public static bar(x) {}\\n' +\n              '  protected async baz(){}\\n' +\n              '}'),\n          [\n            {title: 'class A', lineNumber: 0, columnNumber: 6},\n            {title: 'foo', subtitle: '()', lineNumber: 1, columnNumber: 10},\n            {title: 'static bar', subtitle: '(x)', lineNumber: 2, columnNumber: 16},\n            {title: 'async baz', subtitle: '()', lineNumber: 3, columnNumber: 18},\n          ],\n      );\n    });\n\n    it('for functions and methods that use null types', () => {\n      assert.deepEqual(\n          typeScriptOutline('function foo():null { return null; }'),\n          [{title: 'foo', subtitle: '()', lineNumber: 0, columnNumber: 9}],\n      );\n      assert.deepEqual(\n          typeScriptOutline(\n              'class Klass {\\n' +\n              '  foo(x:null):null { return x ?? null; }\\n' +\n              '    bar():null { return null; }\\n' +\n              '      baz():Klass|null { return this; }\\n' +\n              '}\\n'),\n          [\n            {title: 'class Klass', lineNumber: 0, columnNumber: 6},\n            {title: 'foo', subtitle: '(x)', lineNumber: 1, columnNumber: 2},\n            {title: 'bar', subtitle: '()', lineNumber: 2, columnNumber: 4},\n            {title: 'baz', subtitle: '()', lineNumber: 3, columnNumber: 6},\n          ],\n      );\n    });\n\n    it('ignoring interface declarations', () => {\n      assert.deepEqual(typeScriptOutline('interface IFoo { name(): string; }'), []);\n    });\n\n    it('for class expressions after extends', () => {\n      const outline = typeScriptOutline('class A extends class { foo() } { bar() }');\n      assert.lengthOf(outline, 3);\n      assert.strictEqual(outline[0].title, 'class A');\n      assert.strictEqual(outline[1].title, 'foo');\n      assert.strictEqual(outline[2].title, 'bar');\n    });\n\n    describe('when using decorators', () => {\n      it('on classes', () => {\n        assert.deepEqual(\n            typeScriptOutline(\n                '@Simple @Something.Complex({x: 1}) class A {\\n' +\n                '  constructor() {}\\n' +\n                '}\\n'),\n            [\n              {title: 'class A', lineNumber: 0, columnNumber: 41},\n              {title: 'constructor', subtitle: '()', lineNumber: 1, columnNumber: 2},\n            ],\n        );\n      });\n\n      it('on methods', () => {\n        assert.deepEqual(\n            typeScriptOutline(\n                'new (class {\\n' +\n                '  @Simple @Something.Complex({x: 1}) onInit(x, y) {}\\n' +\n                '})\\n'),\n            [\n              {title: 'onInit', subtitle: '(x, y)', lineNumber: 1, columnNumber: 37},\n            ],\n        );\n      });\n\n      it('on function parameters', () => {\n        assert.deepEqual(\n            typeScriptOutline('function foo(@Simple xyz, @Something.Complex({x: 1}) abc) {}'),\n            [\n              {title: 'foo', subtitle: '(xyz, abc)', lineNumber: 0, columnNumber: 9},\n            ],\n        );\n      });\n\n      it('on method parameters', () => {\n        assert.deepEqual(\n            typeScriptOutline(\n                'new (class {\\n' +\n                '  onInit(@Simple y, @Something.Complex({x: 1}) x) {}\\n' +\n                '})\\n'),\n            [\n              {title: 'onInit', subtitle: '(y, x)', lineNumber: 1, columnNumber: 2},\n            ],\n        );\n      });\n    });\n  });\n\n  describe('generates a correct CSS outline', () => {\n    function cssOutline(doc: string) {\n      const extensions = [CodeMirror.css.css()];\n      const state = CodeMirror.EditorState.create({doc, extensions});\n      return Sources.OutlineQuickOpen.outline(state);\n    }\n\n    it('for an empty style sheet', () => {\n      assert.deepEqual(cssOutline(''), []);\n    });\n\n    it('for universal selectors', () => {\n      assert.deepEqual(\n          cssOutline(\n              '* { color: green; }\\n' +\n              '  *{\\n' +\n              '    background-color: red;\\n' +\n              '}'),\n          [\n            {title: '*', lineNumber: 0, columnNumber: 0},\n            {title: '*', lineNumber: 1, columnNumber: 2},\n          ],\n      );\n    });\n\n    it('for type selectors', () => {\n      assert.deepEqual(\n          cssOutline(\n              'input {\\n' +\n              '  --custom-color: blue;\\n' +\n              '  color: var(--custom-color);\\n' +\n              '}\\n' +\n              'a { font-size: 12px; };\\n'),\n          [\n            {title: 'input', lineNumber: 0, columnNumber: 0},\n            {title: 'a', lineNumber: 4, columnNumber: 0},\n          ],\n      );\n    });\n\n    it('for class selectors', () => {\n      assert.deepEqual(\n          cssOutline(\n              '  .large {\\n' +\n              '    font-size: 20px;\\n' +\n              '   }\\n' +\n              ' a.small { font-size: 12px; };\\n'),\n          [\n            {title: '.large', lineNumber: 0, columnNumber: 2},\n            {title: 'a.small', lineNumber: 3, columnNumber: 1},\n          ],\n      );\n    });\n\n    it('for ID selectors', () => {\n      assert.deepEqual(\n          cssOutline('#large {font-size: 20px;} button#small { font-size: 12px; };'),\n          [\n            {title: '#large', lineNumber: 0, columnNumber: 0},\n            {title: 'button#small', lineNumber: 0, columnNumber: 26},\n          ],\n      );\n    });\n\n    it('for attribute selectors', () => {\n      assert.deepEqual(\n          cssOutline(\n              '[aria-label=\"Exit button\"] {}\\n' +\n              'details[open]{}\\n' +\n              'a[href*=\"example\"]\\n'),\n          [\n            {title: '[aria-label=\"Exit button\"]', lineNumber: 0, columnNumber: 0},\n            {title: 'details[open]', lineNumber: 1, columnNumber: 0},\n            {title: 'a[href*=\"example\"]', lineNumber: 2, columnNumber: 0},\n          ],\n      );\n    });\n\n    it('for selector lists', () => {\n      assert.deepEqual(\n          cssOutline('a#id1, a.cls1, hr { content: \"\"}'),\n          [\n            {title: 'a#id1', lineNumber: 0, columnNumber: 0},\n            {title: 'a.cls1', lineNumber: 0, columnNumber: 7},\n            {title: 'hr', lineNumber: 0, columnNumber: 15},\n          ],\n      );\n    });\n\n    it('for combinators', () => {\n      assert.deepEqual(\n          cssOutline(\n              'div a {}\\n' +\n              '.dark > div {}\\n' +\n              '.light ~ div {}\\n' +\n              ' head + body{}\\n'),\n          [\n            {title: 'div a', lineNumber: 0, columnNumber: 0},\n            {title: '.dark > div', lineNumber: 1, columnNumber: 0},\n            {title: '.light ~ div', lineNumber: 2, columnNumber: 0},\n            {title: 'head + body', lineNumber: 3, columnNumber: 1},\n          ],\n      );\n    });\n\n    it('for pseudo-classes', () => {\n      assert.deepEqual(\n          cssOutline(\n              'a:visited{}button:hover{}\\n' +\n              ':host {}\\n'),\n          [\n            {title: 'a:visited', lineNumber: 0, columnNumber: 0},\n            {title: 'button:hover', lineNumber: 0, columnNumber: 11},\n            {title: ':host', lineNumber: 1, columnNumber: 0},\n          ],\n      );\n    });\n  });\n\n  describe('generates a correct HTML outline', () => {\n    function htmlOutline(doc: string) {\n      const extensions = [CodeMirror.html.html()];\n      const state = CodeMirror.EditorState.create({doc, extensions});\n      return Sources.OutlineQuickOpen.outline(state);\n    }\n\n    it('for an empty document', () => {\n      assert.deepEqual(htmlOutline('<!DOCTYPE html><html></html>'), []);\n    });\n\n    it('for a document with a single inline <script>', () => {\n      assert.deepEqual(\n          htmlOutline('<!DOCTYPE html><script>function foo(){}</script>'),\n          [\n            {title: 'foo', subtitle: '()', lineNumber: 0, columnNumber: 32},\n          ],\n      );\n      assert.deepEqual(\n          htmlOutline(\n              '<!DOCTYPE html>\\n' +\n              '<html>\\n' +\n              '  <head>\\n' +\n              '    <script type=\"text/javascript\">\\n' +\n              '      async function bar(x) { return x; }\\n' +\n              '      function baz(a,b, ...rest) { return rest; };\\n' +\n              '    </script>\\n' +\n              '  </head>\\n' +\n              '</html>'),\n          [\n            {title: 'async bar', subtitle: '(x)', lineNumber: 4, columnNumber: 21},\n            {title: 'baz', subtitle: '(a, b, ...rest)', lineNumber: 5, columnNumber: 15},\n          ],\n      );\n      assert.deepEqual(\n          htmlOutline(`<script>\n  function first() {}\n  function IrrelevantFunctionSeekOrMissEKGFreqUnderflow() {}\n  function someFunction1() {}\n  function someFunction2() {}\n  debugger;\n</script>`),\n          [\n            {title: 'first', subtitle: '()', lineNumber: 1, columnNumber: 11},\n            {title: 'IrrelevantFunctionSeekOrMissEKGFreqUnderflow', subtitle: '()', lineNumber: 2, columnNumber: 11},\n            {title: 'someFunction1', subtitle: '()', lineNumber: 3, columnNumber: 11},\n            {title: 'someFunction2', subtitle: '()', lineNumber: 4, columnNumber: 11},\n          ],\n      );\n    });\n\n    it('for a document with multiple inline <script>s', () => {\n      assert.deepEqual(\n          htmlOutline(`<!DOCTYPE html>\n<html>\n  <head>\n    <script type=\"text/javascript\">function add(x, y) { return x + y; }</script>\n  </head>\n  <body>\n    <script>\n      const sub = (a, b) => {\n        return x + y;\n      }\n    </script>\n  </body>\n</html>`),\n          [\n            {title: 'add', subtitle: '(x, y)', lineNumber: 3, columnNumber: 44},\n            {title: 'sub', subtitle: '(a, b)', lineNumber: 7, columnNumber: 12},\n          ],\n      );\n    });\n\n    it('for a document with inline <script>s and <style>s', () => {\n      assert.deepEqual(\n          htmlOutline(`<!DOCTYPE html>\n<html>\n<head>\n  <script>function add(x, y) { return x + y; }</script>\n  <style>\n    body { background-color: green; }\n  </style>\n</head>\n<body>\n<script defer>\nconst sub = (x, y) => x - y;\n</script>\n<style>\n:host {\n  --custom-variable: 5px;\n}\n</style>\n</body>\n</html>`),\n          [\n            {title: 'add', subtitle: '(x, y)', lineNumber: 3, columnNumber: 19},\n            {title: 'body', lineNumber: 5, columnNumber: 4},\n            {title: 'sub', subtitle: '(x, y)', lineNumber: 10, columnNumber: 6},\n            {title: ':host', lineNumber: 13, columnNumber: 0},\n          ],\n      );\n    });\n\n    it('for a document with <script type=\"text/jsx\">', () => {\n      assert.deepEqual(\n          htmlOutline(\n              '<!DOCTYPE html>\\n' +\n              '<html>\\n' +\n              '  <head>\\n' +\n              '    <script type=\"text/jsx\">\\n' +\n              '      function hello(name) { return (<h1>Hello {name}</h1>); }\\n' +\n              '      function goodbye(name) { return (<h1>Goodbye, {name}, until next time!</h1>); };\\n' +\n              '    </script>\\n' +\n              '  </head>\\n' +\n              '</html>'),\n          [\n            {title: 'hello', subtitle: '(name)', lineNumber: 4, columnNumber: 15},\n            {title: 'goodbye', subtitle: '(name)', lineNumber: 5, columnNumber: 15},\n          ],\n      );\n    });\n  });\n\n  describe('generates a reasonable C++ outline', () => {\n    let extensions: CodeMirror.Extension|undefined;\n\n    before(async () => {\n      const cpp = await CodeMirror.cpp();\n      extensions = [cpp.cpp()];\n    });\n\n    function cppOutline(doc: string) {\n      const state = CodeMirror.EditorState.create({doc, extensions});\n      return Sources.OutlineQuickOpen.outline(state);\n    }\n\n    it('for an empty program', () => {\n      assert.deepEqual(cppOutline(''), []);\n    });\n\n    it('for a hello world program', () => {\n      assert.deepEqual(\n          cppOutline(\n              '#include <stdio.h>\\n' +\n              '\\n' +\n              'int main(int argc, char** argv){\\n' +\n              '  printf(\"Hello world!\\n\");\\n' +\n              '  return 0;\\n' +\n              '}\\n'),\n          [\n            {title: 'main', lineNumber: 2, columnNumber: 4},\n          ],\n      );\n    });\n\n    it('for classes, structs, and methods', () => {\n      assert.deepEqual(\n          cppOutline(\n              'struct S {\\n' +\n              '  int foo(int x) { return x; }\\n' +\n              '};\\n' +\n              '\\n' +\n              'class K {\\n' +\n              ' public:\\n' +\n              '  K& bar() { return *this; }\\n' +\n              '  static K*baz() { return nullptr; }\\n' +\n              '};\\n'),\n          [\n            {title: 'struct S', lineNumber: 0, columnNumber: 7},\n            {title: 'foo', lineNumber: 1, columnNumber: 6},\n            {title: 'class K', lineNumber: 4, columnNumber: 6},\n            {title: 'bar', lineNumber: 6, columnNumber: 5},\n            {title: 'baz', lineNumber: 7, columnNumber: 11},\n          ],\n      );\n    });\n  });\n\n  describe('generates a correct WebAssembly outline', () => {\n    let extensions: CodeMirror.Extension|undefined;\n\n    before(async () => {\n      const wast = await CodeMirror.wast();\n      extensions = [wast.wast()];\n    });\n\n    function wastOutline(doc: string) {\n      const state = CodeMirror.EditorState.create({doc, extensions});\n      return Sources.OutlineQuickOpen.outline(state);\n    }\n\n    it('for empty modules', () => {\n      assert.deepEqual(wastOutline('(module)'), []);\n      assert.deepEqual(wastOutline('(module $foo)'), [{title: '$foo', lineNumber: 0, columnNumber: 8}]);\n    });\n\n    it('for named functions', () => {\n      assert.deepEqual(\n          wastOutline(`(module\n  (func $add (param $lhs i32) (param $rhs i32) (result i32)\n    local.get $lhs\n    local.get $rhs\n    i32.add)\n  (func (param $x i32) (param $y) (result i32)\n    i32.const 1)\n  (func $id (param $x i32) (result i32))\n    local.get $x)\n)`),\n          [\n            {title: '$add', subtitle: '($lhs, $rhs)', lineNumber: 1, columnNumber: 8},\n            {title: '$id', subtitle: '($x)', lineNumber: 7, columnNumber: 8},\n          ],\n      );\n    });\n\n    it('for functions with unnamed parameters', () => {\n      assert.deepEqual(\n          wastOutline(`(module\n  (func $foo (param $x i32) (param i32) (param i64) (param $y f32) (result i32)\n    i32.const 42)\n  (func $bar (param i32) (result i32))\n    i32.const 21)\n)`),\n          [\n            {title: '$foo', subtitle: '($x, $1, $2, $y)', lineNumber: 1, columnNumber: 8},\n            {title: '$bar', subtitle: '($0)', lineNumber: 3, columnNumber: 8},\n          ],\n      );\n    });\n  });\n});\n\ndescribe('OutlineQuickOpen', () => {\n  const {OutlineQuickOpen} = Sources.OutlineQuickOpen;\n\n  it('reports no items before attached', () => {\n    const provider = new OutlineQuickOpen();\n    assert.strictEqual(provider.itemCount(), 0);\n  });\n\n  it('reports no items when attached while no SourcesView is active', () => {\n    const provider = new OutlineQuickOpen();\n    provider.attach();\n    assert.strictEqual(provider.itemCount(), 0);\n  });\n\n  it('correctly scores items within a JavaScript file', () => {\n    function scoredKeys(query: string): string[] {\n      const result = [];\n      for (let i = 0; i < provider.itemCount(); ++i) {\n        result.push({\n          key: provider.itemKeyAt(i),\n          score: provider.itemScoreAt(i, query),\n        });\n      }\n      result.sort((a, b) => b.score - a.score);\n      return result.map(({key}) => key);\n    }\n\n    const doc = `\nfunction testFoo(arg2) { }\nfunction test(arg1) { }\nfunction testBar(arg3) { }`;\n    const extensions = [CodeMirror.javascript.javascript()];\n    const textEditor = {state: CodeMirror.EditorState.create({doc, extensions})};\n    const sourceFrame = sinon.createStubInstance(Sources.UISourceCodeFrame.UISourceCodeFrame);\n    sourceFrame.editorLocationToUILocation.callThrough();\n    sinon.stub(sourceFrame, 'textEditor').value(textEditor);\n    const sourcesView = sinon.createStubInstance(Sources.SourcesView.SourcesView);\n    sourcesView.currentSourceFrame.returns(sourceFrame);\n    UI.Context.Context.instance().setFlavor(Sources.SourcesView.SourcesView, sourcesView);\n\n    const provider = new OutlineQuickOpen();\n    provider.attach();\n\n    assert.deepEqual(scoredKeys('te'), ['testFoo(arg2)', 'test(arg1)', 'testBar(arg3)']);\n    assert.deepEqual(scoredKeys('test'), ['test(arg1)', 'testFoo(arg2)', 'testBar(arg3)']);\n    assert.deepEqual(scoredKeys('test('), ['test(arg1)', 'testFoo(arg2)', 'testBar(arg3)']);\n    assert.deepEqual(scoredKeys('test(arg'), ['test(arg1)', 'testFoo(arg2)', 'testBar(arg3)']);\n  });\n});\n"]}