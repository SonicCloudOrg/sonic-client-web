{"version":3,"file":"DebuggerPausedMessage.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/sources/DebuggerPausedMessage.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as Breakpoints from '../../models/breakpoints/breakpoints.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\nimport {describeWithEnvironment} from '../../testing/EnvironmentHelpers.js';\n\nimport * as Sources from './sources.js';\n\ndescribeWithEnvironment('DebuggerPausedMessage', () => {\n  let debuggerWorkspaceBinding: Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding;\n  let breakpointManager: Breakpoints.BreakpointManager.BreakpointManager;\n  let pausedMessage: Sources.DebuggerPausedMessage.DebuggerPausedMessage;\n\n  beforeEach(() => {\n    const workspace = Workspace.Workspace.WorkspaceImpl.instance();\n    const targetManager = SDK.TargetManager.TargetManager.instance();\n    const resourceMapping = new Bindings.ResourceMapping.ResourceMapping(targetManager, workspace);\n    debuggerWorkspaceBinding = Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance({\n      forceNew: true,\n      resourceMapping,\n      targetManager,\n    });\n    breakpointManager = Breakpoints.BreakpointManager.BreakpointManager.instance({\n      forceNew: true,\n      targetManager,\n      workspace,\n      debuggerWorkspaceBinding,\n    });\n    pausedMessage = new Sources.DebuggerPausedMessage.DebuggerPausedMessage();\n  });\n\n  function getPausedMessageFromDOM(): {main: string, sub?: string} {\n    const mainElement = pausedMessage.element().shadowRoot?.querySelector('.status-main') ?? null;\n    assert.instanceOf(mainElement, HTMLDivElement);\n    const main = mainElement.textContent;\n    assert.exists(main);\n    const sub = pausedMessage.element().shadowRoot?.querySelector('.status-sub')?.textContent ?? undefined;\n    return {main, sub};\n  }\n\n  describe('EventDetails pause', () => {\n    const testCases = [\n      {\n        title: 'shows no sub message if aux data is missing',\n        auxData: undefined,\n        expectedSub: undefined,\n      },\n      {\n        title: 'shows no sub message for unknown instrumentation breakpoints',\n        auxData: {\n          eventName: 'instrumentation:somethingrandom123',\n        },\n        expectedSub: undefined,\n      },\n      {\n        title: 'shows the fixed string for untranslated instrumentation breakpoints',\n        auxData: {\n          eventName: 'instrumentation:setTimeout',\n        },\n        expectedSub: 'setTimeout',\n      },\n      {\n        title: 'shows the translated string for translated instrumentation breakpoints',\n        auxData: {\n          eventName: 'instrumentation:requestAnimationFrame',\n        },\n        expectedSub: 'Request Animation Frame',\n      },\n      {\n        title: 'shows no sub message for unknown listener breakpoints',\n        auxData: {\n          eventName: 'listener:somethingrandom123',\n        },\n        expectedSub: undefined,\n      },\n      {\n        title: 'shows the \"targetName\" as a prefix for listener breakpoints',\n        auxData: {\n          eventName: 'listener:loadstart',\n          targetName: 'xmlhttprequest',\n        },\n        expectedSub: 'xmlhttprequest.loadstart',\n      },\n      {\n        title: 'shows the \"targetName\" as a prefix for \"*\" listener breakpoints',\n        auxData: {\n          eventName: 'listener:pointerover',\n          targetName: 'something-random-123',\n        },\n        expectedSub: 'something-random-123.pointerover',\n      },\n      {\n        title: 'extracts the hex code for WebGL errors',\n        auxData: {\n          eventName: 'instrumentation:webglErrorFired',\n          webglErrorName: 'something 0x42 something',\n        },\n        expectedSub: 'WebGL Error Fired (0x42)',\n      },\n      {\n        title: 'shows the WebGL error name',\n        auxData: {\n          eventName: 'instrumentation:webglErrorFired',\n          webglErrorName: 'something went wrong',\n        },\n        expectedSub: 'WebGL Error Fired (something went wrong)',\n      },\n      {\n        title: 'shows the CSP directive text for script blocked errors',\n        auxData: {\n          eventName: 'instrumentation:scriptBlockedByCSP',\n          directiveText: 'script-src \"self\"',\n        },\n        expectedSub: 'Script blocked due to Content Security Policy directive: script-src \"self\"',\n      },\n    ];\n\n    for (const {title, auxData, expectedSub} of testCases) {\n      it(title, async () => {\n        const details = new SDK.DebuggerModel.DebuggerPausedDetails(\n            sinon.createStubInstance(SDK.DebuggerModel.DebuggerModel),\n            /* callFrames */[], Protocol.Debugger.PausedEventReason.EventListener, auxData, /* breakpointIds */[]);\n        await pausedMessage.render(details, debuggerWorkspaceBinding, breakpointManager);\n\n        const {main, sub} = getPausedMessageFromDOM();\n        assert.strictEqual(main, 'Paused on event listener');\n        assert.strictEqual(sub, expectedSub);\n      });\n    }\n  });\n});\n"]}