{"version":3,"file":"NavigatorView.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/sources/NavigatorView.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as Root from '../../core/root/root.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as Breakpoints from '../../models/breakpoints/breakpoints.js';\nimport * as Persistence from '../../models/persistence/persistence.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {\n  describeWithMockConnection,\n  setMockConnectionResponseHandler,\n} from '../../testing/MockConnection.js';\nimport {addChildFrame, createResource, setMockResourceTree} from '../../testing/ResourceTreeHelpers.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport * as Sources from './sources.js';\n\ndescribeWithMockConnection('NavigatorView', () => {\n  let target: SDK.Target.Target;\n  let workspace: Workspace.Workspace.WorkspaceImpl;\n\n  beforeEach(() => {\n    Root.Runtime.experiments.register(Root.Runtime.ExperimentName.AUTHORED_DEPLOYED_GROUPING, '');\n    Root.Runtime.experiments.register(Root.Runtime.ExperimentName.JUST_MY_CODE, '');\n\n    setMockResourceTree(false);\n    setMockConnectionResponseHandler('Page.getResourceTree', async () => {\n      return {\n        frameTree: null,\n      };\n    });\n\n    const actionRegistryInstance = UI.ActionRegistry.ActionRegistry.instance({forceNew: true});\n    UI.ShortcutRegistry.ShortcutRegistry.instance({forceNew: true, actionRegistry: actionRegistryInstance});\n    target = createTarget();\n    const targetManager = target.targetManager();\n    targetManager.setScopeTarget(target);\n    workspace = Workspace.Workspace.WorkspaceImpl.instance();\n    const resourceMapping = new Bindings.ResourceMapping.ResourceMapping(targetManager, workspace);\n    Bindings.CSSWorkspaceBinding.CSSWorkspaceBinding.instance({forceNew: true, resourceMapping, targetManager});\n    const debuggerWorkspaceBinding = Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance({\n      forceNew: true,\n      resourceMapping,\n      targetManager,\n    });\n    Bindings.IgnoreListManager.IgnoreListManager.instance({forceNew: true, debuggerWorkspaceBinding});\n    const breakpointManager = Breakpoints.BreakpointManager.BreakpointManager.instance(\n        {forceNew: true, targetManager, workspace, debuggerWorkspaceBinding});\n    Persistence.Persistence.PersistenceImpl.instance({forceNew: true, workspace, breakpointManager});\n    Persistence.NetworkPersistenceManager.NetworkPersistenceManager.instance({forceNew: true, workspace});\n  });\n\n  function addResourceAndUISourceCode(\n      url: Platform.DevToolsPath.UrlString, frame: SDK.ResourceTreeModel.ResourceTreeFrame, content: string,\n      mimeType: string) {\n    createResource(frame, url, 'text/html', content);\n    const uiSourceCode = workspace.uiSourceCodeForURL(url) as Workspace.UISourceCode.UISourceCode;\n\n    const projectType = Workspace.Workspace.projectTypes.Network;\n    const project = new Bindings.ContentProviderBasedProject.ContentProviderBasedProject(\n        workspace, 'PROJECT_ID', projectType, 'Test project', false /* isServiceProject*/);\n    Bindings.NetworkProject.NetworkProject.setTargetForProject(project, target);\n    const contentProvider = TextUtils.StaticContentProvider.StaticContentProvider.fromString(\n        url, Common.ResourceType.ResourceType.fromMimeType(mimeType), content);\n    const metadata = new Workspace.UISourceCode.UISourceCodeMetadata(null, null);\n    project.addUISourceCodeWithProvider(uiSourceCode, contentProvider, metadata, mimeType);\n    return {project};\n  }\n\n  it('can discard multiple childless frames', async () => {\n    const url = 'http://example.com/index.html' as Platform.DevToolsPath.UrlString;\n\n    const childFrame = await addChildFrame(target);\n    const {project} = addResourceAndUISourceCode(url, childFrame, '', 'text/html');\n\n    const navigatorView = Sources.SourcesNavigator.NetworkNavigatorView.instance({forceNew: true});\n    const children = navigatorView.scriptsTree.rootElement().children();\n    assert.strictEqual(children.length, 1, 'The NavigatorView root node should have 1 child before node removal');\n    assert.strictEqual(children[0].title, 'top');\n\n    // Remove leaf node and assert that node removal propagates up to the root node.\n    project.removeUISourceCode(url);\n    assert.strictEqual(\n        navigatorView.scriptsTree.rootElement().children().length, 0,\n        'The NavigarorView root node should not have any children after node removal');\n  });\n});\n"]}