{"version":3,"file":"BreakpointEditDialog.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/sources/BreakpointEditDialog.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport {dispatchKeyDownEvent, renderElementIntoDOM} from '../../testing/DOMHelpers.js';\nimport {describeWithEnvironment} from '../../testing/EnvironmentHelpers.js';\nimport type * as CodeMirror from '../../third_party/codemirror.next/codemirror.next.js';\n\nimport * as Sources from './sources.js';\n\nfunction setCodeMirrorContent(editor: CodeMirror.EditorView, content: string) {\n  editor.dispatch({\n    changes: {from: 0, to: editor.state.doc.length, insert: content},\n  });\n}\n\nfunction setBreakpointType(\n    dialog: Sources.BreakpointEditDialog.BreakpointEditDialog, newType: SDK.DebuggerModel.BreakpointType) {\n  const toolbar = dialog.contentElement.querySelector('.toolbar');\n  const selectElement = toolbar!.shadowRoot!.querySelector('select');\n  selectElement!.value = newType;\n  selectElement!.dispatchEvent(new Event('change'));\n}\n\n// Note that we currently don't install a fake RuntimeModel + ExecutionContext for these tests.\n// This means the 'BreakpointEditDialog' won't be able to check whether the\n// condition is a complete JavaScript expression or not and simply assume it is.\ndescribeWithEnvironment('BreakpointEditDialog', () => {\n  it('reports a committed condition when the Enter key is pressed', async () => {\n    const resultPromise = new Promise<Sources.BreakpointEditDialog.BreakpointEditDialogResult>(resolve => {\n      const dialog = new Sources.BreakpointEditDialog.BreakpointEditDialog(0, '', false, resolve);\n      const {editorForTest: {editor}} = dialog;\n      setCodeMirrorContent(editor, 'x === 5');\n\n      dispatchKeyDownEvent(editor.contentDOM, {key: 'Enter'});\n    });\n\n    const {committed, condition} = await resultPromise;\n    assert.isTrue(committed);\n    assert.strictEqual(condition, 'x === 5');\n  });\n\n  it('does not report a commited condition when the ESC key is pressed', async () => {\n    const resultPromise = new Promise<Sources.BreakpointEditDialog.BreakpointEditDialogResult>(resolve => {\n      const dialog = new Sources.BreakpointEditDialog.BreakpointEditDialog(0, '', false, resolve);\n      const {editorForTest: {editor}} = dialog;\n      setCodeMirrorContent(editor, 'hello');\n\n      dispatchKeyDownEvent(editor.contentDOM, {key: 'Escape'});\n    });\n\n    const {committed} = await resultPromise;\n    assert.isFalse(committed);\n  });\n\n  it('commits condition when close button is clicked', async () => {\n    const resultPromise = new Promise<Sources.BreakpointEditDialog.BreakpointEditDialogResult>(resolve => {\n      const dialog = new Sources.BreakpointEditDialog.BreakpointEditDialog(0, '', false, resolve);\n      const {editorForTest: {editor}} = dialog;\n      setCodeMirrorContent(editor, 'x === 5');\n\n      dialog.contentElement.querySelector('devtools-icon')!.click();\n    });\n\n    const {committed, condition} = await resultPromise;\n    assert.isTrue(committed);\n    assert.strictEqual(condition, 'x === 5');\n  });\n\n  it('leaves the condition as-is for logpoints', async () => {\n    const resultPromise = new Promise<Sources.BreakpointEditDialog.BreakpointEditDialogResult>(resolve => {\n      const dialog = new Sources.BreakpointEditDialog.BreakpointEditDialog(0, '', true, resolve);\n      const {editorForTest: {editor}} = dialog;\n      setCodeMirrorContent(editor, 'x');\n\n      dispatchKeyDownEvent(editor.contentDOM, {key: 'Enter'});\n    });\n\n    const {condition} = await resultPromise;\n    assert.strictEqual(condition, 'x');\n  });\n\n  it('result includes isLogpoint for logpoints', async () => {\n    const resultPromise = new Promise<Sources.BreakpointEditDialog.BreakpointEditDialogResult>(resolve => {\n      const dialog = new Sources.BreakpointEditDialog.BreakpointEditDialog(0, '', true, resolve);\n      const {editorForTest: {editor}} = dialog;\n      setCodeMirrorContent(editor, 'x');\n\n      dispatchKeyDownEvent(editor.contentDOM, {key: 'Enter'});\n    });\n\n    const {isLogpoint} = await resultPromise;\n    assert.isTrue(isLogpoint);\n  });\n\n  it('result includes isLogpoint for conditional breakpoints', async () => {\n    const resultPromise = new Promise<Sources.BreakpointEditDialog.BreakpointEditDialogResult>(resolve => {\n      const dialog = new Sources.BreakpointEditDialog.BreakpointEditDialog(0, '', false, resolve);\n      const {editorForTest: {editor}} = dialog;\n      setCodeMirrorContent(editor, 'x === 5');\n\n      dispatchKeyDownEvent(editor.contentDOM, {key: 'Enter'});\n    });\n\n    const {isLogpoint} = await resultPromise;\n    assert.isFalse(isLogpoint);\n  });\n\n  it('prefills the input with the old condition', async () => {\n    const dialog = new Sources.BreakpointEditDialog.BreakpointEditDialog(0, 'x === 42', false, () => {});\n    const {editorForTest: {editor}} = dialog;\n\n    assert.strictEqual(editor.state.doc.sliceString(0), 'x === 42');\n  });\n\n  it('focuses the editor input field after changing the breakpoint type', async () => {\n    const dialog = new Sources.BreakpointEditDialog.BreakpointEditDialog(0, '', false, () => {});\n    renderElementIntoDOM(dialog.contentElement);\n\n    setBreakpointType(dialog, SDK.DebuggerModel.BreakpointType.LOGPOINT);\n\n    const {editorForTest: {editor}} = dialog;\n    assert.isTrue(editor.hasFocus);\n\n    dialog.contentElement.remove();  // Cleanup.\n  });\n});\n"]}