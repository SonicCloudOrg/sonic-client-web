{"version":3,"file":"BreakpointsViewUtils.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/sources/components/BreakpointsViewUtils.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\nimport * as Platform from '../../../core/platform/platform.js';\nimport {assertNotNullOrUndefined} from '../../../core/platform/platform.js';\n\nconst SUMMARY_ELEMENT_SELECTOR = 'summary';\n\nconst domNodeIsTree = (domNode: HTMLElement): boolean => {\n  return domNode.getAttribute('role') === 'tree';\n};\n\nconst domNodeIsBreakpointItemNode = (domNode: HTMLElement): boolean => {\n  return domNode.getAttribute('role') === 'treeitem';\n};\n\nconst domNodeIsPauseOnExceptionsNode = (domNode: HTMLElement): boolean => {\n  return domNode.getAttribute('data-first-pause') !== null || domNode.getAttribute('data-last-pause') !== null;\n};\n\nconst domNodeIsSummaryNode = (domNode: HTMLElement): boolean => {\n  return !domNodeIsBreakpointItemNode(domNode);\n};\n\nconst groupIsExpanded = (detailsElement: HTMLDetailsElement): boolean => {\n  return detailsElement.getAttribute('open') !== null;\n};\n\nconst getFirstBreakpointItemInGroup = (detailsElement: HTMLDetailsElement): HTMLElement|null => {\n  return detailsElement.querySelector<HTMLElement>('[data-first-breakpoint]');\n};\n\nconst getLastBreakpointItemInGroup = (detailsElement: HTMLDetailsElement): HTMLElement|null => {\n  return detailsElement.querySelector<HTMLDivElement>('[data-last-breakpoint]');\n};\n\nconst getNextGroupsSummaryNode = (detailsElement: HTMLDetailsElement): HTMLElement|null => {\n  const nextDetailsElement = getNextDetailsElement(detailsElement);\n  if (nextDetailsElement && nextDetailsElement instanceof HTMLDetailsElement) {\n    return nextDetailsElement?.querySelector<HTMLElement>('summary');\n  }\n  return null;\n};\n\nconst getCurrentSummaryNode = (detailsElement: HTMLDetailsElement): HTMLElement|null => {\n  return detailsElement.querySelector<HTMLElement>(SUMMARY_ELEMENT_SELECTOR);\n};\n\nconst getNextDetailsElement = (detailsElement: HTMLDetailsElement): HTMLDetailsElement|null => {\n  const nextDetailsElement = detailsElement.nextElementSibling;\n  if (nextDetailsElement && nextDetailsElement instanceof HTMLDetailsElement) {\n    return nextDetailsElement;\n  }\n  return null;\n};\n\nconst getPreviousDetailsElement = (detailsElement: HTMLDetailsElement): HTMLDetailsElement|null => {\n  const previousDetailsElement = detailsElement.previousElementSibling;\n  if (previousDetailsElement && previousDetailsElement instanceof HTMLDetailsElement) {\n    return previousDetailsElement;\n  }\n  return null;\n};\n\nfunction findNextNodeForPauseOnExceptions(target: HTMLElement, key: Platform.KeyboardUtilities.ArrowKey): HTMLElement|\n    null {\n  // Handle keyboard navigation on one of the pause on exceptions checkboxes.\n  console.assert(domNodeIsPauseOnExceptionsNode(target));\n  let nextNode: HTMLElement|null = null;\n  switch (key) {\n    case Platform.KeyboardUtilities.ArrowKey.UP: {\n      const previousElementSibling = target.previousElementSibling;\n      if (previousElementSibling instanceof HTMLElement) {\n        nextNode = previousElementSibling;\n        console.assert(domNodeIsPauseOnExceptionsNode(nextNode));\n      }\n      break;\n    }\n    case Platform.KeyboardUtilities.ArrowKey.DOWN: {\n      const nextElementSibling = target.nextElementSibling;\n      if (nextElementSibling instanceof HTMLElement) {\n        if (domNodeIsTree(nextElementSibling)) {\n          const detailsElement = nextElementSibling.querySelector<HTMLDetailsElement>('[data-first-group]');\n          if (detailsElement) {\n            nextNode = getCurrentSummaryNode(detailsElement);\n          }\n        } else {\n          nextNode = nextElementSibling;\n          console.assert(domNodeIsPauseOnExceptionsNode(nextNode));\n        }\n      }\n      break;\n    }\n    default:\n      break;\n  }\n\n  return nextNode;\n}\n\nexport async function findNextNodeForKeyboardNavigation(\n    target: HTMLElement, key: Platform.KeyboardUtilities.ArrowKey,\n    setGroupExpandedStateCallback: (detailsElement: HTMLDetailsElement, expanded: boolean) =>\n        Promise<unknown>): Promise<HTMLElement|null> {\n  if (domNodeIsPauseOnExceptionsNode(target)) {\n    return findNextNodeForPauseOnExceptions(target, key);\n  }\n\n  // Handle keyboard navigation in the breakpoint tree.\n  const detailsElement = target.parentElement;\n  if (!detailsElement || !(detailsElement instanceof HTMLDetailsElement)) {\n    throw new Error('The selected nodes should be direct children of an HTMLDetails element.');\n  }\n\n  let nextNode: HTMLElement|null = null;\n  switch (key) {\n    case Platform.KeyboardUtilities.ArrowKey.LEFT: {\n      if (domNodeIsSummaryNode(target)) {\n        // On a summary node, collapse if group is expanded.\n        if (groupIsExpanded(detailsElement)) {\n          await setGroupExpandedStateCallback(detailsElement, false);\n        }\n      } else {\n        // On a breakpoint item node, navigate up to the summary node.\n        return getCurrentSummaryNode(detailsElement);\n      }\n      break;\n    }\n    case Platform.KeyboardUtilities.ArrowKey.RIGHT: {\n      if (domNodeIsSummaryNode(target)) {\n        // On a summary node, expand if group is collapsed, and otherwise navigate\n        // to the first breakpoint item in this group.\n        if (groupIsExpanded(detailsElement)) {\n          return getFirstBreakpointItemInGroup(detailsElement);\n        }\n        await setGroupExpandedStateCallback(detailsElement, true);\n      }\n      break;\n    }\n    case Platform.KeyboardUtilities.ArrowKey.DOWN: {\n      if (domNodeIsSummaryNode(target)) {\n        if (groupIsExpanded(detailsElement)) {\n          // If the current node is a summary node of an expanded group, navigating down\n          // should lead to the first breakpoint item within the group.\n          nextNode = getFirstBreakpointItemInGroup(detailsElement);\n        } else {\n          // If the current node is a summary node of a collapsed group, go to the next\n          // group's summary node if existent.\n          nextNode = getNextGroupsSummaryNode(detailsElement);\n        }\n      } else {\n        // If the current node is a breakpoint item, try to get the next\n        // breakpoint item if available, otherwise the next group's summary\n        // node.\n        const nextSibling = target.nextElementSibling;\n        if (nextSibling && nextSibling instanceof HTMLDivElement) {\n          nextNode = nextSibling;\n        } else {\n          nextNode = getNextGroupsSummaryNode(detailsElement);\n        }\n      }\n      break;\n    }\n    case Platform.KeyboardUtilities.ArrowKey.UP: {\n      // If the current node is a summary node, navigating upwards will either\n      // navigate to the last breakpoint item of the previous group (if expanded),\n      // and otherwise navigate to the previous group's summary node.\n      if (domNodeIsSummaryNode(target)) {\n        const previousDetailsElement = getPreviousDetailsElement(detailsElement);\n        if (previousDetailsElement) {\n          if (groupIsExpanded(previousDetailsElement)) {\n            nextNode = getLastBreakpointItemInGroup(previousDetailsElement);\n          } else {\n            nextNode = getCurrentSummaryNode(previousDetailsElement);\n          }\n        } else {\n          const pauseOnExceptions = detailsElement.parentElement?.previousElementSibling;\n          if (pauseOnExceptions instanceof HTMLElement) {\n            nextNode = pauseOnExceptions;\n          }\n        }\n      } else {\n        // If the current node is a breakpoint item, going up should get\n        // the previous sibling, which can be both a summary node or a\n        // a breakpoint item.\n        const previousSibling = target.previousElementSibling;\n        if (previousSibling instanceof HTMLElement) {\n          nextNode = previousSibling;\n        }\n      }\n      break;\n    }\n  }\n  return nextNode;\n}\n\nexport interface TitleInfo {\n  name: string;\n  url: Platform.DevToolsPath.UrlString;\n}\n\nfunction findFirstDifferingSegmentIndex(splitUrls: string[][]): number {\n  const firstUrl = splitUrls[0];\n  let firstDifferingIndex = -1;\n  for (let segmentIndex = 0; segmentIndex < firstUrl.length && firstDifferingIndex === -1; ++segmentIndex) {\n    const segment = firstUrl[segmentIndex];\n    for (let urlIndex = 1; urlIndex < splitUrls.length; ++urlIndex) {\n      const url = splitUrls[urlIndex];\n      if (url.length <= segmentIndex || url[segmentIndex] !== segment) {\n        firstDifferingIndex = segmentIndex;\n        break;\n      }\n    }\n  }\n\n  return firstDifferingIndex === -1 ? firstUrl.length : firstDifferingIndex;\n}\n\nfunction findDifferentiatingPath(url: string[], allUrls: string[][], startIndex: number): string[] {\n  const differentiatingPath = [];\n  let remainingUrlsToDifferentiate = allUrls.filter(other => other !== url);\n\n  for (let segmentIndex = startIndex; segmentIndex < url.length; ++segmentIndex) {\n    const segment = url[segmentIndex];\n    differentiatingPath.push(segment);\n    remainingUrlsToDifferentiate =\n        remainingUrlsToDifferentiate.filter(url => url.length > segmentIndex && url[segmentIndex] === segment);\n    if (remainingUrlsToDifferentiate.length === 0) {\n      break;\n    }\n  }\n  return differentiatingPath;\n}\n\n// This function tries to find a subpath (if available) that we can use to differentiate\n// urls that have the same file name.\n// It does so by 1. removing common suffixes, 2. taking segments of the path (from right to left) until the path is\n// unique.\n//\n// Example:\n//\n//     Paths:  'http://www.google.com/src/a/index.js', 'http://www.google.com/src2/a/index.js'\n//     Output: 'src/…/', 'src2/…/'\nfunction populateDifferentiatingPathMap(\n    urls: Platform.DevToolsPath.UrlString[], urlToDifferentiator: Map<Platform.DevToolsPath.UrlString, string>): void {\n  const splitReversedUrls = urls.map(url => {\n    // Get the folder path components without the first '/'.\n    const paths = Common.ParsedURL.ParsedURL.fromString(url)?.folderPathComponents.slice(1);\n    assertNotNullOrUndefined(paths);\n    return paths.split('/').reverse();\n  });\n\n  const startIndex = findFirstDifferingSegmentIndex(splitReversedUrls);\n\n  for (let i = 0; i < splitReversedUrls.length; ++i) {\n    const splitUrl = splitReversedUrls[i];\n    const differentiator = findDifferentiatingPath(splitUrl, splitReversedUrls, startIndex);\n    const reversed = differentiator.reverse().join('/');\n    // If we start to collect the differentiator from the last segment (startIndex === 0),\n    // only append a '/', otherwise' …/'.\n    if (startIndex === 0) {\n      urlToDifferentiator.set(urls[i], reversed + '/');\n    } else {\n      urlToDifferentiator.set(urls[i], reversed + '/\\u2026/');\n    }\n  }\n  console.assert(new Set(urlToDifferentiator.values()).size === urls.length, 'Differentiators should be unique.');\n}\n\nexport function getDifferentiatingPathMap(titleInfos: TitleInfo[]): Map<Platform.DevToolsPath.UrlString, string> {\n  const nameToUrl = new Map<string, Platform.DevToolsPath.UrlString[]>();\n  const urlToDifferentiatingPath = new Map<Platform.DevToolsPath.UrlString, Platform.DevToolsPath.UrlString>();\n\n  for (const {name, url} of titleInfos) {\n    if (!nameToUrl.has(name)) {\n      nameToUrl.set(name, []);\n    }\n    nameToUrl.get(name)?.push(url);\n  }\n\n  for (const urlsGroupedByName of nameToUrl.values()) {\n    if (urlsGroupedByName.length > 1) {\n      populateDifferentiatingPathMap(urlsGroupedByName, urlToDifferentiatingPath);\n    }\n  }\n  return urlToDifferentiatingPath;\n}\n"]}