{"version":3,"file":"BreakpointsViewUtils.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/sources/components/BreakpointsViewUtils.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Platform from '../../../core/platform/platform.js';\n\nimport * as SourcesComponents from './components.js';\n\ndescribe('getDifferentiatingPathMap', () => {\n  const AMBIGUOUS_FILE_NAME = 'index.js';\n  const OTHER_FILE_NAME = 'a.js';\n\n  it('can extract the differentiating segment if it is the parent folder', () => {\n    const titleInfos: SourcesComponents.BreakpointsViewUtils.TitleInfo[] = createTitleInfos({\n      ambiguous: ['http://www.google.com/src/a', 'http://www.google.com/src/b', 'http://www.google.com/src/c'],\n      nonAmbiguous: [],\n    });\n    const differentiatingPathMap = SourcesComponents.BreakpointsViewUtils.getDifferentiatingPathMap(titleInfos);\n    assert.strictEqual(differentiatingPathMap.get(titleInfos[0].url), 'a/' as Platform.DevToolsPath.UrlString);\n    assert.strictEqual(differentiatingPathMap.get(titleInfos[1].url), 'b/' as Platform.DevToolsPath.UrlString);\n    assert.strictEqual(differentiatingPathMap.get(titleInfos[2].url), 'c/' as Platform.DevToolsPath.UrlString);\n  });\n\n  it('can extract the differentiating segment if it is the direct parent folder', () => {\n    const titleInfos: SourcesComponents.BreakpointsViewUtils.TitleInfo[] = createTitleInfos({\n      ambiguous: ['http://www.google.com/src/a', 'http://www.google.com/src2/b'],\n      nonAmbiguous: [],\n    });\n\n    const differentiatingPathMap = SourcesComponents.BreakpointsViewUtils.getDifferentiatingPathMap(titleInfos);\n    assert.strictEqual(differentiatingPathMap.get(titleInfos[0].url), 'a/' as Platform.DevToolsPath.UrlString);\n    assert.strictEqual(differentiatingPathMap.get(titleInfos[1].url), 'b/' as Platform.DevToolsPath.UrlString);\n  });\n\n  it('can extract the differentiating segment if it is the parent folder, but has overlapping path prefixes', () => {\n    const titleInfos: SourcesComponents.BreakpointsViewUtils.TitleInfo[] = createTitleInfos({\n      ambiguous: ['http://www.google.com/src/a', 'http://www.google.com/src2/b', 'http://www.google.com/src2/c'],\n      nonAmbiguous: [],\n    });\n\n    const differentiatingPathMap = SourcesComponents.BreakpointsViewUtils.getDifferentiatingPathMap(titleInfos);\n    assert.strictEqual(differentiatingPathMap.get(titleInfos[0].url), 'a/' as Platform.DevToolsPath.UrlString);\n    assert.strictEqual(differentiatingPathMap.get(titleInfos[1].url), 'b/' as Platform.DevToolsPath.UrlString);\n    assert.strictEqual(differentiatingPathMap.get(titleInfos[2].url), 'c/' as Platform.DevToolsPath.UrlString);\n  });\n\n  it('does not output any differentiating segment if the name is unique', () => {\n    const titleInfos: SourcesComponents.BreakpointsViewUtils.TitleInfo[] = createTitleInfos({\n      ambiguous: ['http://www.google.com/src/a', 'http://www.google.com/src/b'],\n      nonAmbiguous: ['http://www.google.com/src/c'],\n    });\n    const differentiatingPathMap = SourcesComponents.BreakpointsViewUtils.getDifferentiatingPathMap(titleInfos);\n    assert.strictEqual(differentiatingPathMap.get(titleInfos[0].url), 'a/' as Platform.DevToolsPath.UrlString);\n    assert.strictEqual(differentiatingPathMap.get(titleInfos[1].url), 'b/' as Platform.DevToolsPath.UrlString);\n    assert.isUndefined(differentiatingPathMap.get(titleInfos[2].url));\n  });\n\n  it('can extract the differentiating segment if paths have overlapping prefixes and suffixes', () => {\n    const titleInfos: SourcesComponents.BreakpointsViewUtils.TitleInfo[] = createTitleInfos({\n      ambiguous: [\n        'http://www.google.com/src/a',\n        'http://www.google.com/src/b',\n        'http://www.google.com/src2/a',\n        'http://www.google.com/src2/b',\n      ],\n      nonAmbiguous: [],\n    });\n\n    const differentiatingPathMap = SourcesComponents.BreakpointsViewUtils.getDifferentiatingPathMap(titleInfos);\n    assert.strictEqual(differentiatingPathMap.get(titleInfos[0].url), 'src/a/' as Platform.DevToolsPath.UrlString);\n    assert.strictEqual(differentiatingPathMap.get(titleInfos[1].url), 'src/b/' as Platform.DevToolsPath.UrlString);\n    assert.strictEqual(differentiatingPathMap.get(titleInfos[2].url), 'src2/a/' as Platform.DevToolsPath.UrlString);\n    assert.strictEqual(differentiatingPathMap.get(titleInfos[3].url), 'src2/b/' as Platform.DevToolsPath.UrlString);\n  });\n\n  it('can extract the differentiating segment if paths have overlapping prefixes and suffixes', () => {\n    const titleInfos: SourcesComponents.BreakpointsViewUtils.TitleInfo[] = createTitleInfos({\n      ambiguous: [\n        'http://www.google.com/src/a/d',\n        'http://www.google.com/src/a/e',\n        'http://www.google.com/src2/a/d',\n        'http://www.google.com/src2/a/e',\n      ],\n      nonAmbiguous: [],\n    });\n    const differentiatingPathMap = SourcesComponents.BreakpointsViewUtils.getDifferentiatingPathMap(titleInfos);\n    assert.strictEqual(differentiatingPathMap.get(titleInfos[0].url), 'src/a/d/' as Platform.DevToolsPath.UrlString);\n    assert.strictEqual(differentiatingPathMap.get(titleInfos[1].url), 'src/a/e/' as Platform.DevToolsPath.UrlString);\n    assert.strictEqual(differentiatingPathMap.get(titleInfos[2].url), 'src2/a/d/' as Platform.DevToolsPath.UrlString);\n    assert.strictEqual(differentiatingPathMap.get(titleInfos[3].url), 'src2/a/e/' as Platform.DevToolsPath.UrlString);\n  });\n\n  it('can extract the differentiating segment if it is not the direct parent folder', () => {\n    const titleInfos: SourcesComponents.BreakpointsViewUtils.TitleInfo[] = createTitleInfos({\n      ambiguous: [\n        'http://www.google.com/src/a/e',\n        'http://www.google.com/src/b/e',\n        'http://www.google.com/src2/c/e',\n        'http://www.google.com/src2/d/e',\n      ],\n      nonAmbiguous: [],\n    });\n\n    const differentiatingPathMap = SourcesComponents.BreakpointsViewUtils.getDifferentiatingPathMap(titleInfos);\n    assert.strictEqual(differentiatingPathMap.get(titleInfos[0].url), 'a/…/' as Platform.DevToolsPath.UrlString);\n    assert.strictEqual(differentiatingPathMap.get(titleInfos[1].url), 'b/…/' as Platform.DevToolsPath.UrlString);\n    assert.strictEqual(differentiatingPathMap.get(titleInfos[2].url), 'c/…/' as Platform.DevToolsPath.UrlString);\n    assert.strictEqual(differentiatingPathMap.get(titleInfos[3].url), 'd/…/' as Platform.DevToolsPath.UrlString);\n  });\n\n  it('can extract the differentiating segment if one path is completely overlapping', () => {\n    const titleInfos: SourcesComponents.BreakpointsViewUtils.TitleInfo[] = createTitleInfos({\n      ambiguous: ['http://www.google.com/src/a/e', 'http://www.google.com/src/a'],\n      nonAmbiguous: [],\n    });\n\n    const differentiatingPathMap = SourcesComponents.BreakpointsViewUtils.getDifferentiatingPathMap(titleInfos);\n    assert.strictEqual(differentiatingPathMap.get(titleInfos[0].url), 'e/' as Platform.DevToolsPath.UrlString);\n    assert.strictEqual(differentiatingPathMap.get(titleInfos[1].url), 'a/' as Platform.DevToolsPath.UrlString);\n  });\n\n  it('can extract the differentiating segment if parts of the differentiating foldername is overlapping', () => {\n    const titleInfos: SourcesComponents.BreakpointsViewUtils.TitleInfo[] = createTitleInfos({\n      ambiguous: ['http://www.google.com/src/a/b/cfile', 'http://www.google.com/src/c/d/c'],\n      nonAmbiguous: [],\n    });\n\n    const differentiatingPathMap = SourcesComponents.BreakpointsViewUtils.getDifferentiatingPathMap(titleInfos);\n    assert.strictEqual(differentiatingPathMap.get(titleInfos[0].url), 'cfile/' as Platform.DevToolsPath.UrlString);\n    assert.strictEqual(differentiatingPathMap.get(titleInfos[1].url), 'c/' as Platform.DevToolsPath.UrlString);\n  });\n\n  it('can extract the differentiating segment if part of suffix is unique', () => {\n    const titleInfos: SourcesComponents.BreakpointsViewUtils.TitleInfo[] = createTitleInfos({\n      ambiguous: [\n        'http://www.google.com/src/a/y',\n        'http://www.google.com/src2/a/x',\n        'http://www.google.com/src/b/y',\n        'http://www.google.com/src2/b/x',\n      ],\n      nonAmbiguous: [],\n    });\n    const differentiatingPathMap = SourcesComponents.BreakpointsViewUtils.getDifferentiatingPathMap(titleInfos);\n    assert.strictEqual(differentiatingPathMap.get(titleInfos[0].url), 'a/y/' as Platform.DevToolsPath.UrlString);\n    assert.strictEqual(differentiatingPathMap.get(titleInfos[1].url), 'a/x/' as Platform.DevToolsPath.UrlString);\n    assert.strictEqual(differentiatingPathMap.get(titleInfos[2].url), 'b/y/' as Platform.DevToolsPath.UrlString);\n    assert.strictEqual(differentiatingPathMap.get(titleInfos[3].url), 'b/x/' as Platform.DevToolsPath.UrlString);\n  });\n\n  it('can extract the differentiating segment if separate paths of urls are unique', () => {\n    const titleInfos: SourcesComponents.BreakpointsViewUtils.TitleInfo[] = createTitleInfos({\n      ambiguous: ['http://www.google.com/src/d/y', 'http://www.google.com/src2/c/y', 'http://www.google.com/src3/c/y'],\n      nonAmbiguous: [],\n    });\n    const differentiatingPathMap = SourcesComponents.BreakpointsViewUtils.getDifferentiatingPathMap(titleInfos);\n    assert.strictEqual(differentiatingPathMap.get(titleInfos[0].url), 'd/…/' as Platform.DevToolsPath.UrlString);\n    assert.strictEqual(differentiatingPathMap.get(titleInfos[1].url), 'src2/c/…/' as Platform.DevToolsPath.UrlString);\n    assert.strictEqual(differentiatingPathMap.get(titleInfos[2].url), 'src3/c/…/' as Platform.DevToolsPath.UrlString);\n  });\n\n  it('can extract the differentiating segment if paths have different length', () => {\n    const titleInfos: SourcesComponents.BreakpointsViewUtils.TitleInfo[] = createTitleInfos({\n      ambiguous: [\n        'http://www.google.com/src/d',\n        'http://www.google.com/src/c/y/d',\n        'http://www.google.com/src2/c/y/d',\n        'http://www.google.com/src3/c/y/d',\n      ],\n      nonAmbiguous: [],\n    });\n    const differentiatingPathMap = SourcesComponents.BreakpointsViewUtils.getDifferentiatingPathMap(titleInfos);\n    assert.strictEqual(differentiatingPathMap.get(titleInfos[0].url), 'src/…/' as Platform.DevToolsPath.UrlString);\n    assert.strictEqual(differentiatingPathMap.get(titleInfos[1].url), 'src/c/y/…/' as Platform.DevToolsPath.UrlString);\n    assert.strictEqual(differentiatingPathMap.get(titleInfos[2].url), 'src2/c/y/…/' as Platform.DevToolsPath.UrlString);\n    assert.strictEqual(differentiatingPathMap.get(titleInfos[3].url), 'src3/c/y/…/' as Platform.DevToolsPath.UrlString);\n  });\n\n  it('can extract the differentiating segment if paths have different length and are completely overlapping otherwise',\n     () => {\n       const titleInfos: SourcesComponents.BreakpointsViewUtils.TitleInfo[] = createTitleInfos({\n         ambiguous: ['http://www.google.com/src/d', 'http://www.google.com/x/src/d'],\n         nonAmbiguous: [],\n       });\n       const differentiatingPathMap = SourcesComponents.BreakpointsViewUtils.getDifferentiatingPathMap(titleInfos);\n       assert.strictEqual(differentiatingPathMap.get(titleInfos[0].url), '/…/' as Platform.DevToolsPath.UrlString);\n       assert.strictEqual(differentiatingPathMap.get(titleInfos[1].url), 'x/…/' as Platform.DevToolsPath.UrlString);\n     });\n\n  function createTitleInfos(data: {ambiguous: string[], nonAmbiguous: string[]}):\n      SourcesComponents.BreakpointsViewUtils.TitleInfo[] {\n    const infos = [];\n    for (const path of data.ambiguous) {\n      infos.push({\n        name: AMBIGUOUS_FILE_NAME,\n        url: `${path}/${AMBIGUOUS_FILE_NAME}` as Platform.DevToolsPath.UrlString,\n      });\n    }\n    for (const path of data.nonAmbiguous) {\n      infos.push({\n        name: OTHER_FILE_NAME,\n        url: `${path}/${OTHER_FILE_NAME}` as Platform.DevToolsPath.UrlString,\n      });\n    }\n\n    return infos;\n  }\n});\n"]}