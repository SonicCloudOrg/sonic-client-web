{"version":3,"file":"AutofillView.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/autofill/AutofillView.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as AutofillManager from '../../models/autofill_manager/autofill_manager.js';\nimport {assertGridContents, getBodyRowByAriaIndex, getDataGrid} from '../../testing/DataGridHelpers.js';\nimport {renderElementIntoDOM} from '../../testing/DOMHelpers.js';\nimport {createTarget, stubNoopSettings} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\nimport {getMainFrame, navigate} from '../../testing/ResourceTreeHelpers.js';\nimport * as Coordinator from '../../ui/components/render_coordinator/render_coordinator.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport * as Autofill from './autofill.js';\n\nconst coordinator = Coordinator.RenderCoordinator.RenderCoordinator.instance();\n\nconst addressFormFilledEvent = {\n  addressUi: {\n    addressFields: [\n      {\n        fields: [\n          {name: 'NAME_FULL', value: 'Crocodile Middle Dundee'},\n        ],\n      },\n      {\n        fields: [\n          {name: 'COMPANY_NAME', value: 'Uluru Tours'},\n        ],\n      },\n      {\n        fields: [\n          {name: 'ADDRESS_HOME_STREET_ADDRESS', value: 'Outback Road 1'},\n        ],\n      },\n      {\n        fields: [\n          {name: 'ADDRESS_HOME_CITY', value: 'Bundaberg'},\n          {name: 'ADDRESS_HOME_STATE', value: 'Queensland'},\n          {name: 'ADDRESS_HOME_ZIP', value: '12345'},\n        ],\n      },\n    ],\n  },\n  filledFields: [\n    {\n      htmlType: 'text',\n      id: 'input1',\n      name: '',\n      value: 'Crocodile',\n      autofillType: 'First name',\n      fillingStrategy: Protocol.Autofill.FillingStrategy.AutofillInferred,\n      fieldId: 1 as Protocol.DOM.BackendNodeId,\n      frameId: '1' as Protocol.Page.FrameId,\n    },\n    {\n      htmlType: 'text',\n      id: '',\n      name: 'input2',\n      value: 'Dundee',\n      autofillType: 'Last name',\n      fillingStrategy: Protocol.Autofill.FillingStrategy.AutofillInferred,\n      fieldId: 2 as Protocol.DOM.BackendNodeId,\n      frameId: '1' as Protocol.Page.FrameId,\n    },\n    {\n      htmlType: 'text',\n      id: 'input3',\n      name: '',\n      value: 'Australia',\n      autofillType: 'Country',\n      fillingStrategy: Protocol.Autofill.FillingStrategy.AutofillInferred,\n      fieldId: 3 as Protocol.DOM.BackendNodeId,\n      frameId: '1' as Protocol.Page.FrameId,\n    },\n    {\n      htmlType: 'text',\n      id: 'input4',\n      name: '',\n      value: '12345',\n      autofillType: 'Zip code',\n      fillingStrategy: Protocol.Autofill.FillingStrategy.AutocompleteAttribute,\n      fieldId: 4 as Protocol.DOM.BackendNodeId,\n      frameId: '1' as Protocol.Page.FrameId,\n    },\n  ],\n};\n\ndescribeWithMockConnection('AutofillView', () => {\n  let target: SDK.Target.Target;\n  let autofillModel: SDK.AutofillModel.AutofillModel;\n  let showViewStub: sinon.SinonStub;\n\n  beforeEach(() => {\n    Root.Runtime.experiments.register('apca', '');\n    target = createTarget();\n    SDK.TargetManager.TargetManager.instance().setScopeTarget(target);\n    const maybeAutofillModel = target.model(SDK.AutofillModel.AutofillModel);\n    assert.exists(maybeAutofillModel);\n    autofillModel = maybeAutofillModel;\n    Root.Runtime.experiments.enableForTest(Root.Runtime.ExperimentName.AUTOFILL_VIEW);\n    showViewStub = sinon.stub(UI.ViewManager.ViewManager.instance(), 'showView').resolves();\n    AutofillManager.AutofillManager.AutofillManager.instance({forceNew: true});\n  });\n\n  afterEach(() => {\n    showViewStub.restore();\n  });\n\n  const renderAutofillView = async () => {\n    const view = new Autofill.AutofillView.AutofillView();\n    renderElementIntoDOM(view);\n    await view.render();\n    await coordinator.done();\n    return view;\n  };\n\n  const assertViewShowsEventData = (view: Autofill.AutofillView.AutofillView) => {\n    const addressSpans = view.shadowRoot!.querySelectorAll('.address span');\n    const addressText = [...addressSpans].map(div => div.textContent);\n    assert.deepStrictEqual(\n        addressText, ['Crocodile', ' Middle ', 'Dundee', 'Uluru ToursOutback Road 1Bundaberg Queensland ', '12345']);\n    const expectedHeaders = ['Form field', 'Predicted autofill value', 'Value', 'filledFieldIndex'];\n    const expectedRows = [\n      ['#input1 (text)', 'First name \\nheur', '\"Crocodile\"', ''],\n      ['input2 (text)', 'Last name \\nheur', '\"Dundee\"', ''],\n      ['#input3 (text)', 'Country \\nheur', '\"Australia\"', ''],\n      ['#input4 (text)', 'Zip code \\nattr', '\"12345\"', ''],\n    ];\n    assertGridContents(view, expectedHeaders, expectedRows);\n  };\n\n  it('renders autofilled address and filled fields and clears content on navigation', async () => {\n    const expectedPlaceholder = 'To start debugging autofill, use Chrome\\'s autofill menu to fill an address form.';\n    const view = await renderAutofillView();\n    let placeholderText = view.shadowRoot!.querySelector('.placeholder div')!.textContent!.trim();\n    assert.strictEqual(placeholderText, expectedPlaceholder);\n\n    autofillModel.addressFormFilled(addressFormFilledEvent);\n    await coordinator.done({waitForWork: true});\n    assertViewShowsEventData(view);\n\n    navigate(getMainFrame(target));\n\n    await coordinator.done();\n    placeholderText = view.shadowRoot!.querySelector('.placeholder div')!.textContent!.trim();\n    assert.strictEqual(placeholderText, expectedPlaceholder);\n  });\n\n  it('shows content if the view is created after the event was received', async () => {\n    autofillModel.addressFormFilled(addressFormFilledEvent);\n    assert.isTrue(showViewStub.calledOnceWithExactly('autofill-view'));\n    const view = await renderAutofillView();\n    assert.isNotNull(view.shadowRoot);\n    assertViewShowsEventData(view);\n    await coordinator.done();\n  });\n\n  it('auto-open can be turned off/on', async () => {\n    const view = await renderAutofillView();\n\n    autofillModel.addressFormFilled(addressFormFilledEvent);\n    assert.isTrue(showViewStub.calledOnceWithExactly('autofill-view'));\n    showViewStub.reset();\n\n    const checkbox = view.shadowRoot!.querySelector('input');\n    assert.isNotNull(checkbox);\n    assert.isTrue(checkbox.checked);\n    checkbox.checked = false;\n    let event = new Event('change');\n    checkbox.dispatchEvent(event);\n\n    autofillModel.addressFormFilled(addressFormFilledEvent);\n    assert.isTrue(showViewStub.notCalled);\n\n    checkbox.checked = true;\n    event = new Event('change');\n    checkbox.dispatchEvent(event);\n\n    autofillModel.addressFormFilled(addressFormFilledEvent);\n    assert.isTrue(showViewStub.calledOnceWithExactly('autofill-view'));\n    await coordinator.done();\n  });\n\n  it('highlights corresponding grid row when hovering over address span', async () => {\n    const monospaceStyles = 'font-family:var(--monospace-font-family);font-size:var(--monospace-font-size);';\n\n    autofillModel.addressFormFilled(addressFormFilledEvent);\n    assert.isTrue(showViewStub.calledOnceWithExactly('autofill-view'));\n    const view = await renderAutofillView();\n    assertViewShowsEventData(view);\n\n    const addressSpans = view.shadowRoot!.querySelectorAll('.address span');\n    const crocodileSpan = addressSpans[0];\n    assert.strictEqual(crocodileSpan.textContent, 'Crocodile');\n    assert.isFalse(crocodileSpan.classList.contains('highlighted'));\n    const grid = getDataGrid(view);\n    assert.isNotNull(grid.shadowRoot);\n    const firstGridRow = getBodyRowByAriaIndex(grid.shadowRoot, 1);\n    let styles = firstGridRow.getAttribute('style') || '';\n    assert.strictEqual(styles.replace(/\\s/g, ''), monospaceStyles);\n\n    crocodileSpan.dispatchEvent(new MouseEvent('mouseenter'));\n    await coordinator.done({waitForWork: true});\n    assert.isTrue(crocodileSpan.classList.contains('highlighted'));\n    styles = firstGridRow.getAttribute('style') || '';\n    assert.strictEqual(\n        styles.replace(/\\s/g, ''), monospaceStyles + 'background-color:var(--sys-color-state-hover-on-subtle);');\n\n    crocodileSpan.dispatchEvent(new MouseEvent('mouseleave'));\n    await coordinator.done({waitForWork: true});\n    assert.isFalse(crocodileSpan.classList.contains('highlighted'));\n    styles = firstGridRow.getAttribute('style') || '';\n    assert.strictEqual(styles.replace(/\\s/g, ''), monospaceStyles);\n  });\n\n  it('highlights corresponding address span and DOM node when hovering over grid row', async () => {\n    stubNoopSettings();\n    const mockFrame = {\n      resourceTreeModel: () => ({\n        target: () => target,\n      }),\n    } as SDK.ResourceTreeModel.ResourceTreeFrame;\n    const getFrameStub = sinon.stub(SDK.FrameManager.FrameManager.instance(), 'getFrame').callsFake(frameId => {\n      return frameId === addressFormFilledEvent.filledFields[3].frameId ? mockFrame : null;\n    });\n\n    autofillModel.addressFormFilled(addressFormFilledEvent);\n    assert.isTrue(showViewStub.calledOnceWithExactly('autofill-view'));\n    const view = await renderAutofillView();\n    assertViewShowsEventData(view);\n\n    const domModel = target.model(SDK.DOMModel.DOMModel);\n    const overlayModel = domModel?.overlayModel();\n    assert.exists(overlayModel);\n    const overlaySpy = sinon.spy(overlayModel, 'highlightInOverlay');\n    const hideOverlaySpy = sinon.spy(SDK.OverlayModel.OverlayModel, 'hideDOMNodeHighlight');\n\n    const addressSpans = view.shadowRoot!.querySelectorAll('.address span');\n    const zipCodeSpan = addressSpans[4];\n    assert.strictEqual(zipCodeSpan.textContent, '12345');\n    assert.isFalse(zipCodeSpan.classList.contains('highlighted'));\n    const grid = getDataGrid(view);\n    assert.isNotNull(grid.shadowRoot);\n    const fourthGridRow = getBodyRowByAriaIndex(grid.shadowRoot, 4);\n    fourthGridRow.dispatchEvent(new MouseEvent('mouseenter'));\n    await coordinator.done({waitForWork: true});\n    assert.isTrue(zipCodeSpan.classList.contains('highlighted'));\n    assert.isTrue(overlaySpy.calledOnce);\n    const deferredNode =\n        (overlaySpy.getCall(0).args[0] as unknown as SDK.OverlayModel.HighlightDeferredNode).deferredNode;\n    assert.strictEqual(deferredNode.backendNodeId(), 4);\n    assert.isTrue(hideOverlaySpy.notCalled);\n\n    fourthGridRow.dispatchEvent(new MouseEvent('mouseleave'));\n    await coordinator.done({waitForWork: true});\n    assert.isFalse(zipCodeSpan.classList.contains('highlighted'));\n    assert.isTrue(hideOverlaySpy.calledOnce);\n    getFrameStub.restore();\n  });\n});\n"]}