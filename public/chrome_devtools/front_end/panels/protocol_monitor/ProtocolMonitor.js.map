{"version":3,"file":"ProtocolMonitor.js","sourceRoot":"","sources":["../../../../../../front_end/panels/protocol_monitor/ProtocolMonitor.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2018 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as Common from '../../core/common/common.js';\nimport * as Host from '../../core/host/host.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as ProtocolClient from '../../core/protocol_client/protocol_client.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as DataGrid from '../../ui/components/data_grid/data_grid.js';\nimport * as IconButton from '../../ui/components/icon_button/icon_button.js';\nimport * as SourceFrame from '../../ui/legacy/components/source_frame/source_frame.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as LitHtml from '../../ui/lit-html/lit-html.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport * as Components from './components/components.js';\nimport protocolMonitorStyles from './protocolMonitor.css.js';\n\nconst UIStrings = {\n  /**\n   *@description Text for one or a group of functions\n   */\n  method: 'Method',\n  /**\n   * @description Text in Protocol Monitor. Title for a table column which shows in which direction\n   * the particular protocol message was travelling. Values in this column will either be 'sent' or\n   * 'received'.\n   */\n  type: 'Type',\n  /**\n   * @description Text in Protocol Monitor of the Protocol Monitor tab. Noun relating to a network request.\n   */\n  request: 'Request',\n  /**\n   *@description Title of a cell content in protocol monitor. A Network response refers to the act of acknowledging a\n  network request. Should not be confused with answer.\n   */\n  response: 'Response',\n  /**\n   *@description Text for timestamps of items\n   */\n  timestamp: 'Timestamp',\n  /**\n   *@description Title of a cell content in protocol monitor. It describes the time between sending a request and receiving a response.\n   */\n  elapsedTime: 'Elapsed time',\n  /**\n   *@description Text in Protocol Monitor of the Protocol Monitor tab\n   */\n  target: 'Target',\n  /**\n   *@description Text to record a series of actions for analysis\n   */\n  record: 'Record',\n  /**\n   *@description Text to clear everything\n   */\n  clearAll: 'Clear all',\n  /**\n   *@description Text to filter result items\n   */\n  filter: 'Filter',\n  /**\n   *@description Text for the documentation of something\n   */\n  documentation: 'Documentation',\n  /**\n   *@description Text to open the CDP editor with the selected command\n   */\n  editAndResend: 'Edit and resend',\n  /**\n   *@description Cell text content in Protocol Monitor of the Protocol Monitor tab\n   *@example {30} PH1\n   */\n  sMs: '{PH1} ms',\n  /**\n   *@description Text in Protocol Monitor of the Protocol Monitor tab\n   */\n  noMessageSelected: 'No message selected',\n  /**\n   *@description Text in Protocol Monitor for the save button\n   */\n  save: 'Save',\n  /**\n   *@description Text in Protocol Monitor to describe the sessions column\n   */\n  session: 'Session',\n  /**\n   *@description A placeholder for an input in Protocol Monitor. The input accepts commands that are sent to the backend on Enter. CDP stands for Chrome DevTools Protocol.\n   */\n  sendRawCDPCommand: 'Send a raw `CDP` command',\n  /**\n   * @description A tooltip text for the input in the Protocol Monitor panel. The tooltip describes what format is expected.\n   */\n  sendRawCDPCommandExplanation:\n      'Format: `\\'Domain.commandName\\'` for a command without parameters, or `\\'{\"command\":\"Domain.commandName\", \"parameters\": {...}}\\'` as a JSON object for a command with parameters. `\\'cmd\\'`/`\\'method\\'` and `\\'args\\'`/`\\'params\\'`/`\\'arguments\\'` are also supported as alternative keys for the `JSON` object.',\n\n  /**\n   * @description A label for a select input that allows selecting a CDP target to send the commands to.\n   */\n  selectTarget: 'Select a target',\n  /**\n   * @description Tooltip for the the console sidebar toggle in the Console panel. Command to\n   * open/show the sidebar.\n   */\n  showCDPCommandEditor: 'Show CDP command editor',\n  /**\n   * @description Tooltip for the the console sidebar toggle in the Console panel. Command to\n   * open/show the sidebar.\n   */\n  hideCDPCommandEditor: 'Hide  CDP command editor',\n  /**\n   * @description Screen reader announcement when the sidebar is shown in the Console panel.\n   */\n  CDPCommandEditorShown: 'CDP command editor shown',\n  /**\n   * @description Screen reader announcement when the sidebar is hidden in the Console panel.\n   */\n  CDPCommandEditorHidden: 'CDP command editor hidden',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/protocol_monitor/ProtocolMonitor.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nconst timeRenderer = (value: DataGrid.DataGridUtils.CellValue): LitHtml.TemplateResult => {\n  return LitHtml.html`${i18nString(UIStrings.sMs, {PH1: String(value)})}`;\n};\n\nexport const buildProtocolMetadata = (domains: Iterable<ProtocolDomain>):\n    Map<string, {parameters: Components.JSONEditor.Parameter[], description: string, replyArgs: string[]}> => {\n      const metadataByCommand:\n          Map<string, {parameters: Components.JSONEditor.Parameter[], description: string, replyArgs: string[]}> =\n              new Map();\n      for (const domain of domains) {\n        for (const command of Object.keys(domain.metadata)) {\n          metadataByCommand.set(command, domain.metadata[command]);\n        }\n      }\n      return metadataByCommand;\n    };\n\nconst metadataByCommand = buildProtocolMetadata(\n    ProtocolClient.InspectorBackend.inspectorBackend.agentPrototypes.values() as Iterable<ProtocolDomain>);\nconst typesByName = ProtocolClient.InspectorBackend.inspectorBackend.typeMap;\nconst enumsByName = ProtocolClient.InspectorBackend.inspectorBackend.enumMap;\nexport interface Message {\n  id?: number;\n  method: string;\n  error: Object;\n  result: Object;\n  params: Object;\n  sessionId?: string;\n}\nexport interface LogMessage {\n  id?: number;\n  domain: string;\n  method: string;\n  params: Object;\n  type: 'send'|'recv';\n}\n\nexport interface ProtocolDomain {\n  readonly domain: string;\n  readonly metadata: {\n    [commandName: string]: {parameters: Components.JSONEditor.Parameter[], description: string, replyArgs: string[]},\n  };\n}\n\nexport class ProtocolMonitorDataGrid extends Common.ObjectWrapper.eventMixin<EventTypes, typeof UI.Widget.VBox>(\n    UI.Widget.VBox) {\n  private started: boolean;\n  private startTime: number;\n  private readonly requestTimeForId: Map<number, number>;\n  private readonly dataGridRowForId: Map<number, DataGrid.DataGridUtils.Row>;\n  private readonly infoWidget: InfoWidget;\n  private readonly dataGridIntegrator: DataGrid.DataGridControllerIntegrator.DataGridControllerIntegrator;\n  private readonly filterParser: TextUtils.TextUtils.FilterParser;\n  private readonly suggestionBuilder: UI.FilterSuggestionBuilder.FilterSuggestionBuilder;\n  private readonly textFilterUI: UI.Toolbar.ToolbarInput;\n  readonly selector: UI.Toolbar.ToolbarComboBox;\n  #commandAutocompleteSuggestionProvider = new CommandAutocompleteSuggestionProvider();\n  #selectedTargetId?: string;\n  #commandInput: UI.Toolbar.ToolbarInput;\n  constructor(splitWidget: UI.SplitWidget.SplitWidget) {\n    super(true);\n    this.started = false;\n    this.startTime = 0;\n    this.dataGridRowForId = new Map();\n    this.requestTimeForId = new Map();\n    const topToolbar = new UI.Toolbar.Toolbar('protocol-monitor-toolbar', this.contentElement);\n    topToolbar.element.setAttribute('jslog', `${VisualLogging.toolbar('top')}`);\n    this.contentElement.classList.add('protocol-monitor');\n    const recordButton = new UI.Toolbar.ToolbarToggle(\n        i18nString(UIStrings.record), 'record-start', 'record-stop', 'protocol-monitor.toggle-recording');\n    recordButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, () => {\n      recordButton.setToggled(!recordButton.toggled());\n      this.setRecording(recordButton.toggled());\n    });\n    recordButton.setToggleWithRedColor(true);\n    topToolbar.appendToolbarItem(recordButton);\n    recordButton.setToggled(true);\n\n    const clearButton =\n        new UI.Toolbar.ToolbarButton(i18nString(UIStrings.clearAll), 'clear', undefined, 'protocol-monitor.clear-all');\n    clearButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, () => {\n      this.dataGridIntegrator.update({...this.dataGridIntegrator.data(), rows: []});\n      this.infoWidget.render(null);\n    });\n    topToolbar.appendToolbarItem(clearButton);\n\n    const saveButton =\n        new UI.Toolbar.ToolbarButton(i18nString(UIStrings.save), 'download', undefined, 'protocol-monitor.save');\n    saveButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, () => {\n      void this.saveAsFile();\n    });\n    topToolbar.appendToolbarItem(saveButton);\n    this.selector = this.#createTargetSelector();\n    this.infoWidget = new InfoWidget();\n    const dataGridInitialData: DataGrid.DataGridController.DataGridControllerData = {\n      paddingRowsCount: 100,\n      showScrollbar: true,\n      columns: [\n        {\n          id: 'type',\n          title: i18nString(UIStrings.type),\n          sortable: true,\n          widthWeighting: 1,\n          visible: true,\n          hideable: true,\n          styles: {\n            'text-align': 'center',\n          },\n        },\n        {\n          id: 'method',\n          title: i18nString(UIStrings.method),\n          sortable: false,\n          widthWeighting: 5,\n          visible: true,\n          hideable: false,\n        },\n        {\n          id: 'request',\n          title: i18nString(UIStrings.request),\n          sortable: false,\n          widthWeighting: 5,\n          visible: true,\n          hideable: true,\n        },\n        {\n          id: 'response',\n          title: i18nString(UIStrings.response),\n          sortable: false,\n          widthWeighting: 5,\n          visible: true,\n          hideable: true,\n        },\n        {\n          id: 'elapsed-time',\n          title: i18nString(UIStrings.elapsedTime),\n          sortable: true,\n          widthWeighting: 2,\n          visible: false,\n          hideable: true,\n        },\n        {\n          id: 'timestamp',\n          title: i18nString(UIStrings.timestamp),\n          sortable: true,\n          widthWeighting: 5,\n          visible: false,\n          hideable: true,\n        },\n        {\n          id: 'target',\n          title: i18nString(UIStrings.target),\n          sortable: true,\n          widthWeighting: 5,\n          visible: false,\n          hideable: true,\n        },\n        {\n          id: 'session',\n          title: i18nString(UIStrings.session),\n          sortable: true,\n          widthWeighting: 5,\n          visible: false,\n          hideable: true,\n        },\n      ],\n      rows: [],\n      contextMenus: {\n        bodyRow:\n            (menu: UI.ContextMenu.ContextMenu, columns: readonly DataGrid.DataGridUtils.Column[],\n             row: Readonly<DataGrid.DataGridUtils.Row>) => {\n              const methodColumn = DataGrid.DataGridUtils.getRowEntryForColumnId(row, 'method');\n              const typeColumn = DataGrid.DataGridUtils.getRowEntryForColumnId(row, 'type');\n              /**\n               * You can click the \"Edit and resend\" item in the context menu to be\n               * taken to the CDP editor with the filled with the selected command.\n               */\n              menu.editSection().appendItem(i18nString(UIStrings.editAndResend), () => {\n                if (!methodColumn.value) {\n                  return;\n                }\n                const parameters = this.infoWidget.request;\n                const targetId = this.infoWidget.targetId;\n                const command = String(methodColumn.value);\n                if (splitWidget.showMode() === UI.SplitWidget.ShowMode.OnlyMain) {\n                  splitWidget.toggleSidebar();\n                }\n                this.dispatchEventToListeners(Events.CommandChange, {command, parameters, targetId});\n              }, {jslogContext: 'edit-and-resend', disabled: typeColumn.title !== 'sent'});\n\n              /**\n               * You can click the \"Filter\" item in the context menu to filter the\n               * protocol monitor entries to those that match the method of the\n               * current row.\n               */\n              menu.editSection().appendItem(i18nString(UIStrings.filter), () => {\n                const methodColumn = DataGrid.DataGridUtils.getRowEntryForColumnId(row, 'method');\n                this.textFilterUI.setValue(`method:${methodColumn.value}`, true);\n              }, {jslogContext: 'filter'});\n\n              /**\n               * You can click the \"Documentation\" item in the context menu to be\n               * taken to the CDP Documentation site entry for the given method.\n               */\n              menu.footerSection().appendItem(i18nString(UIStrings.documentation), () => {\n                if (!methodColumn.value) {\n                  return;\n                }\n                const [domain, method] = String(methodColumn.value).split('.');\n                const type = typeColumn.title === 'sent' ? 'method' : 'event';\n                Host.InspectorFrontendHost.InspectorFrontendHostInstance.openInNewTab(\n                    `https://chromedevtools.github.io/devtools-protocol/tot/${domain}#${type}-${method}` as\n                    Platform.DevToolsPath.UrlString);\n              }, {jslogContext: 'documentation'});\n            },\n      },\n    };\n\n    this.dataGridIntegrator =\n        new DataGrid.DataGridControllerIntegrator.DataGridControllerIntegrator(dataGridInitialData);\n\n    this.dataGridIntegrator.dataGrid.addEventListener('cellfocused', event => {\n      const focusedRow = event.data.row;\n      const infoWidgetData = {\n        request: DataGrid.DataGridUtils.getRowEntryForColumnId(focusedRow, 'request'),\n        response: DataGrid.DataGridUtils.getRowEntryForColumnId(focusedRow, 'response'),\n        target: DataGrid.DataGridUtils.getRowEntryForColumnId(focusedRow, 'target'),\n        type:\n            DataGrid.DataGridUtils.getRowEntryForColumnId(focusedRow, 'type').title as 'sent' | 'received' | undefined,\n        selectedTab: event.data.cell.columnId === 'request' ? 'request' as const:\n            event.data.cell.columnId === 'response'         ? 'response' as const:\n                                                              undefined,\n      };\n      this.infoWidget.render(infoWidgetData);\n    });\n\n    this.dataGridIntegrator.dataGrid.addEventListener('newuserfiltertext', event => {\n      this.textFilterUI.setValue(event.data.filterText, /* notify listeners */ true);\n    });\n    const split = new UI.SplitWidget.SplitWidget(true, true, 'protocol-monitor-panel-split', 250);\n    split.show(this.contentElement);\n    split.setMainWidget(this.dataGridIntegrator);\n    split.setSidebarWidget(this.infoWidget);\n    const keys = ['method', 'request', 'response', 'type', 'target', 'session'];\n    this.filterParser = new TextUtils.TextUtils.FilterParser(keys);\n    this.suggestionBuilder = new UI.FilterSuggestionBuilder.FilterSuggestionBuilder(keys);\n\n    this.textFilterUI = new UI.Toolbar.ToolbarFilter(\n        undefined, 1, .2, '', this.suggestionBuilder.completions.bind(this.suggestionBuilder), true, 'filter');\n    this.textFilterUI.addEventListener(UI.Toolbar.ToolbarInput.Event.TextChanged, event => {\n      const query = event.data as string;\n      const filters = this.filterParser.parse(query);\n      this.dataGridIntegrator.update({...this.dataGridIntegrator.data(), filters});\n    });\n    const bottomToolbar = new UI.Toolbar.Toolbar('protocol-monitor-bottom-toolbar', this.contentElement);\n    bottomToolbar.element.setAttribute('jslog', `${VisualLogging.toolbar('bottom')}`);\n    bottomToolbar.appendToolbarItem(splitWidget.createShowHideSidebarButton(\n        i18nString(UIStrings.showCDPCommandEditor), i18nString(UIStrings.hideCDPCommandEditor),\n        i18nString(UIStrings.CDPCommandEditorShown), i18nString(UIStrings.CDPCommandEditorHidden),\n        'protocol-monitor.toggle-command-editor'));\n    this.#commandInput = this.#createCommandInput();\n    bottomToolbar.appendToolbarItem(this.#commandInput);\n    bottomToolbar.appendToolbarItem(this.selector);\n    const shadowRoot = bottomToolbar.element?.shadowRoot;\n    const inputBar = shadowRoot?.querySelector('.toolbar-input');\n    const tabSelector = shadowRoot?.querySelector('.toolbar-select-container');\n\n    const populateToolbarInput = (): void => {\n      const editorWidget = splitWidget.sidebarWidget();\n      if (!(editorWidget instanceof EditorWidget)) {\n        return;\n      }\n      const commandJson = editorWidget.jsonEditor.getCommandJson();\n      const targetId = editorWidget.jsonEditor.targetId;\n      if (targetId) {\n        const selectedIndex = this.selector.options().findIndex(option => option.value === targetId);\n        if (selectedIndex !== -1) {\n          this.selector.setSelectedIndex(selectedIndex);\n          this.#selectedTargetId = targetId;\n        }\n      }\n      if (commandJson) {\n        this.#commandInput.setValue(commandJson);\n      }\n    };\n\n    splitWidget.addEventListener(UI.SplitWidget.Events.ShowModeChanged, (event => {\n                                   if (event.data === 'OnlyMain') {\n                                     populateToolbarInput();\n\n                                     inputBar?.setAttribute('style', 'display:flex; flex-grow: 1');\n                                     tabSelector?.setAttribute('style', 'display:flex');\n                                   } else {\n                                     const {command, parameters} = parseCommandInput(this.#commandInput.value());\n                                     this.dispatchEventToListeners(\n                                         Events.CommandChange, {command, parameters, targetId: this.#selectedTargetId});\n                                     inputBar?.setAttribute('style', 'display:none');\n                                     tabSelector?.setAttribute('style', 'display:none');\n                                   }\n                                 }));\n    topToolbar.appendToolbarItem(this.textFilterUI);\n  }\n\n  #createCommandInput(): UI.Toolbar.ToolbarInput {\n    const placeholder = i18nString(UIStrings.sendRawCDPCommand);\n    const accessiblePlaceholder = placeholder;\n    const growFactor = 1;\n    const shrinkFactor = 0.2;\n    const tooltip = i18nString(UIStrings.sendRawCDPCommandExplanation);\n    const input = new UI.Toolbar.ToolbarInput(\n        placeholder,\n        accessiblePlaceholder,\n        growFactor,\n        shrinkFactor,\n        tooltip,\n        this.#commandAutocompleteSuggestionProvider.buildTextPromptCompletions,\n        false,\n        'command-input',\n    );\n    input.addEventListener(UI.Toolbar.ToolbarInput.Event.EnterPressed, () => {\n      this.#commandAutocompleteSuggestionProvider.addEntry(input.value());\n      const {command, parameters} = parseCommandInput(input.value());\n      this.onCommandSend(command, parameters, this.#selectedTargetId);\n    });\n    return input;\n  }\n\n  #createTargetSelector(): UI.Toolbar.ToolbarComboBox {\n    const selector = new UI.Toolbar.ToolbarComboBox(() => {\n      this.#selectedTargetId = selector.selectedOption()?.value;\n    }, i18nString(UIStrings.selectTarget), undefined, 'target-selector');\n    selector.setMaxWidth(120);\n    const targetManager = SDK.TargetManager.TargetManager.instance();\n    const syncTargets = (): void => {\n      selector.removeOptions();\n      for (const target of targetManager.targets()) {\n        selector.createOption(`${target.name()} (${target.inspectedURL()})`, target.id());\n      }\n    };\n    targetManager.addEventListener(SDK.TargetManager.Events.AvailableTargetsChanged, syncTargets);\n    syncTargets();\n    return selector;\n  }\n\n  onCommandSend(command: string, parameters: object, target?: string): void {\n    const test = ProtocolClient.InspectorBackend.test;\n    const targetManager = SDK.TargetManager.TargetManager.instance();\n    const selectedTarget = target ? targetManager.targetById(target) : null;\n    const sessionId = selectedTarget ? selectedTarget.sessionId : '';\n    // TS thinks that properties are read-only because\n    // in TS test is defined as a namespace.\n    // @ts-ignore\n    test.sendRawMessage(command, parameters, () => {}, sessionId);\n  }\n\n  override wasShown(): void {\n    if (this.started) {\n      return;\n    }\n    this.registerCSSFiles([protocolMonitorStyles]);\n    this.started = true;\n    this.startTime = Date.now();\n    this.setRecording(true);\n  }\n\n  private setRecording(recording: boolean): void {\n    const test = ProtocolClient.InspectorBackend.test;\n    if (recording) {\n      // TODO: TS thinks that properties are read-only because\n      // in TS test is defined as a namespace.\n      // @ts-ignore\n      test.onMessageSent = this.messageSent.bind(this);\n      // @ts-ignore\n      test.onMessageReceived = this.messageReceived.bind(this);\n    } else {\n      // @ts-ignore\n      test.onMessageSent = null;\n      // @ts-ignore\n      test.onMessageReceived = null;\n    }\n  }\n\n  private targetToString(target: SDK.Target.Target|null): string {\n    if (!target) {\n      return '';\n    }\n    return target.decorateLabel(\n        `${target.name()} ${target === SDK.TargetManager.TargetManager.instance().rootTarget() ? '' : target.id()}`);\n  }\n\n  private messageReceived(message: Message, target: ProtocolClient.InspectorBackend.TargetBase|null): void {\n    if ('id' in message && message.id) {\n      const existingRow = this.dataGridRowForId.get(message.id);\n      if (!existingRow) {\n        return;\n      }\n      const allExistingRows = this.dataGridIntegrator.data().rows;\n      const matchingExistingRowIndex = allExistingRows.findIndex(r => existingRow === r);\n      const newRowWithUpdate = {\n        ...existingRow,\n        cells: existingRow.cells.map(cell => {\n          if (cell.columnId === 'response') {\n            return {\n              ...cell,\n              value: JSON.stringify(message.result || message.error),\n\n            };\n          }\n\n          if (cell.columnId === 'elapsed-time') {\n            const requestTime = this.requestTimeForId.get(message.id as number);\n            if (requestTime) {\n              return {\n                ...cell,\n                value: Date.now() - requestTime,\n                renderer: timeRenderer,\n              };\n            }\n          }\n\n          return cell;\n        }),\n      };\n\n      const newRowsArray = [...this.dataGridIntegrator.data().rows];\n      newRowsArray[matchingExistingRowIndex] = newRowWithUpdate;\n\n      // Now we've updated the message, it won't be updated again, so we can delete it from the tracking map.\n      this.dataGridRowForId.delete(message.id);\n      this.dataGridIntegrator.update({\n        ...this.dataGridIntegrator.data(),\n        rows: newRowsArray,\n      });\n      return;\n    }\n\n    const sdkTarget = target as SDK.Target.Target | null;\n    const responseIcon = new IconButton.Icon.Icon();\n    responseIcon.data = {iconName: 'arrow-down', color: 'var(--icon-request)', width: '16px', height: '16px'};\n    const newRow: DataGrid.DataGridUtils.Row = {\n      cells: [\n        {columnId: 'method', value: message.method, title: message.method},\n        {columnId: 'request', value: '', renderer: DataGrid.DataGridRenderers.codeBlockRenderer},\n        {\n          columnId: 'response',\n          value: JSON.stringify(message.params),\n          renderer: DataGrid.DataGridRenderers.codeBlockRenderer,\n        },\n        {\n          columnId: 'timestamp',\n          value: Date.now() - this.startTime,\n          renderer: timeRenderer,\n        },\n        {columnId: 'elapsed-time', value: ''},\n        {columnId: 'type', value: responseIcon, title: 'received', renderer: DataGrid.DataGridRenderers.iconRenderer},\n        {columnId: 'target', value: this.targetToString(sdkTarget)},\n        {columnId: 'session', value: message.sessionId || ''},\n      ],\n      hidden: false,\n    };\n\n    this.dataGridIntegrator.update({\n      ...this.dataGridIntegrator.data(),\n      rows: this.dataGridIntegrator.data().rows.concat([newRow]),\n    });\n  }\n\n  private messageSent(\n      message: {domain: string, method: string, params: Object, id: number, sessionId?: string},\n      target: ProtocolClient.InspectorBackend.TargetBase|null): void {\n    const sdkTarget = target as SDK.Target.Target | null;\n    const requestResponseIcon = new IconButton.Icon.Icon();\n    requestResponseIcon\n        .data = {iconName: 'arrow-up-down', color: 'var(--icon-request-response)', width: '16px', height: '16px'};\n    const newRow: DataGrid.DataGridUtils.Row = {\n      styles: {\n        '--override-data-grid-row-background-color': 'var(--sys-color-surface3)',\n      },\n      cells: [\n        {columnId: 'method', value: message.method, title: message.method},\n        {\n          columnId: 'request',\n          value: JSON.stringify(message.params),\n          renderer: DataGrid.DataGridRenderers.codeBlockRenderer,\n        },\n        {columnId: 'response', value: '(pending)', renderer: DataGrid.DataGridRenderers.codeBlockRenderer},\n        {\n          columnId: 'timestamp',\n          value: Date.now() - this.startTime,\n          renderer: timeRenderer,\n        },\n        {columnId: 'elapsed-time', value: '(pending)'},\n        {\n          columnId: 'type',\n          value: requestResponseIcon,\n          title: 'sent',\n          renderer: DataGrid.DataGridRenderers.iconRenderer,\n        },\n        {columnId: 'target', value: String(sdkTarget?.id())},\n        {columnId: 'session', value: message.sessionId || ''},\n      ],\n      hidden: false,\n    };\n    this.requestTimeForId.set(message.id, Date.now());\n    this.dataGridRowForId.set(message.id, newRow);\n    this.dataGridIntegrator.update({\n      ...this.dataGridIntegrator.data(),\n      rows: this.dataGridIntegrator.data().rows.concat([newRow]),\n    });\n  }\n\n  private async saveAsFile(): Promise<void> {\n    const now = new Date();\n    const fileName = 'ProtocolMonitor-' + Platform.DateUtilities.toISO8601Compact(now) + '.json' as\n        Platform.DevToolsPath.RawPathString;\n    const stream = new Bindings.FileUtils.FileOutputStream();\n\n    const accepted = await stream.open(fileName);\n    if (!accepted) {\n      return;\n    }\n\n    const rowEntries = [];\n    for (const row of this.dataGridIntegrator.data().rows) {\n      const rowEntry = Object.fromEntries(row.cells.map(cell => ([cell.columnId, cell.value])));\n      rowEntries.push(rowEntry);\n    }\n\n    void stream.write(JSON.stringify(rowEntries, null, '  '));\n    void stream.close();\n  }\n}\n\nexport class ProtocolMonitorImpl extends UI.Widget.VBox {\n  #split: UI.SplitWidget.SplitWidget;\n  #editorWidget = new EditorWidget();\n  #protocolMonitorDataGrid: ProtocolMonitorDataGrid;\n  // This width corresponds to the optimal width to use the editor properly\n  // It is randomly chosen\n  #sideBarMinWidth = 400;\n  constructor() {\n    super(true);\n    this.element.setAttribute('jslog', `${VisualLogging.panel('protocol-monitor').track({resize: true})}`);\n    this.#split =\n        new UI.SplitWidget.SplitWidget(true, false, 'protocol-monitor-split-container', this.#sideBarMinWidth);\n    this.#split.show(this.contentElement);\n    this.#protocolMonitorDataGrid = new ProtocolMonitorDataGrid(this.#split);\n    this.#protocolMonitorDataGrid.addEventListener(Events.CommandChange, event => {\n      this.#editorWidget.jsonEditor.displayCommand(event.data.command, event.data.parameters, event.data.targetId);\n    });\n\n    this.#editorWidget.element.style.overflow = 'hidden';\n    this.#split.setMainWidget(this.#protocolMonitorDataGrid);\n    this.#split.setSidebarWidget(this.#editorWidget);\n    this.#split.hideSidebar(true);\n    this.#editorWidget.addEventListener(Events.CommandSent, event => {\n      this.#protocolMonitorDataGrid.onCommandSend(event.data.command, event.data.parameters, event.data.targetId);\n    });\n  }\n}\n\nexport class CommandAutocompleteSuggestionProvider {\n  #maxHistorySize = 200;\n  #commandHistory = new Set<string>();\n\n  constructor(maxHistorySize?: number) {\n    if (maxHistorySize !== undefined) {\n      this.#maxHistorySize = maxHistorySize;\n    }\n  }\n\n  buildTextPromptCompletions =\n      async(expression: string, prefix: string, force?: boolean): Promise<UI.SuggestBox.Suggestions> => {\n    if (!prefix && !force && expression) {\n      return [];\n    }\n\n    const newestToOldest = [...this.#commandHistory].reverse();\n    newestToOldest.push(...metadataByCommand.keys());\n    return newestToOldest.filter(cmd => cmd.startsWith(prefix)).map(text => ({\n                                                                      text,\n                                                                    }));\n  };\n\n  addEntry(value: string): void {\n    if (this.#commandHistory.has(value)) {\n      this.#commandHistory.delete(value);\n    }\n    this.#commandHistory.add(value);\n    if (this.#commandHistory.size > this.#maxHistorySize) {\n      const earliestEntry = this.#commandHistory.values().next().value;\n      this.#commandHistory.delete(earliestEntry);\n    }\n  }\n}\n\nexport class InfoWidget extends UI.Widget.VBox {\n  private readonly tabbedPane: UI.TabbedPane.TabbedPane;\n  request: {[x: string]: unknown};\n  targetId = '';\n  constructor() {\n    super();\n    this.tabbedPane = new UI.TabbedPane.TabbedPane();\n    this.tabbedPane.appendTab('request', i18nString(UIStrings.request), new UI.Widget.Widget());\n    this.tabbedPane.appendTab('response', i18nString(UIStrings.response), new UI.Widget.Widget());\n    this.tabbedPane.show(this.contentElement);\n    this.tabbedPane.selectTab('response');\n    this.request = {};\n    this.render(null);\n  }\n\n  render(data: {\n    request: DataGrid.DataGridUtils.Cell|undefined,\n    response: DataGrid.DataGridUtils.Cell|undefined,\n    target: DataGrid.DataGridUtils.Cell|undefined,\n    type: 'sent'|'received'|undefined,\n    selectedTab: 'request'|'response'|undefined,\n  }|null): void {\n    if (!data || !data.request || !data.response || !data.target) {\n      this.tabbedPane.changeTabView('request', new UI.EmptyWidget.EmptyWidget(i18nString(UIStrings.noMessageSelected)));\n      this.tabbedPane.changeTabView(\n          'response', new UI.EmptyWidget.EmptyWidget(i18nString(UIStrings.noMessageSelected)));\n      return;\n    }\n\n    const requestEnabled = data && data.type && data.type === 'sent';\n    this.tabbedPane.setTabEnabled('request', Boolean(requestEnabled));\n    if (!requestEnabled) {\n      this.tabbedPane.selectTab('response');\n    }\n\n    const requestParsed = JSON.parse(String(data.request.value) || 'null');\n    this.request = requestParsed;\n    this.targetId = String(data.target.value);\n    this.tabbedPane.changeTabView('request', SourceFrame.JSONView.JSONView.createViewSync(requestParsed));\n    const responseParsed =\n        data.response.value === '(pending)' ? null : JSON.parse(String(data.response.value) || 'null');\n    this.tabbedPane.changeTabView('response', SourceFrame.JSONView.JSONView.createViewSync(responseParsed));\n    if (data.selectedTab) {\n      this.tabbedPane.selectTab(data.selectedTab);\n    }\n  }\n}\n\nexport const enum Events {\n  CommandSent = 'CommandSent',\n  CommandChange = 'CommandChange',\n}\n\nexport type EventTypes = {\n  [Events.CommandSent]: Components.JSONEditor.Command,\n  [Events.CommandChange]: Components.JSONEditor.Command,\n};\n\nexport class EditorWidget extends Common.ObjectWrapper.eventMixin<EventTypes, typeof UI.Widget.VBox>(UI.Widget.VBox) {\n  readonly jsonEditor: Components.JSONEditor.JSONEditor;\n  constructor() {\n    super();\n    this.element.setAttribute('jslog', `${VisualLogging.pane('command-editor').track({resize: true})}`);\n    this.jsonEditor = new Components.JSONEditor.JSONEditor();\n    this.jsonEditor.metadataByCommand = metadataByCommand;\n    this.jsonEditor.typesByName = typesByName as Map<string, Components.JSONEditor.Parameter[]>;\n    this.jsonEditor.enumsByName = enumsByName;\n    this.element.append(this.jsonEditor);\n    this.jsonEditor.addEventListener(Components.JSONEditor.SubmitEditorEvent.eventName, (event: Event) => {\n      this.dispatchEventToListeners(Events.CommandSent, (event as Components.JSONEditor.SubmitEditorEvent).data);\n    });\n  }\n}\n\nexport function parseCommandInput(input: string): {command: string, parameters: {[paramName: string]: unknown}} {\n  // If input cannot be parsed as json, we assume it's the command name\n  // for a command without parameters. Otherwise, we expect an object\n  // with \"command\"/\"method\"/\"cmd\" and \"parameters\"/\"params\"/\"args\"/\"arguments\" attributes.\n  let json = null;\n  try {\n    json = JSON.parse(input);\n  } catch (err) {\n  }\n\n  const command = json ? json.command || json.method || json.cmd || '' : input;\n  const parameters = json?.parameters || json?.params || json?.args || json?.arguments || {};\n\n  return {command, parameters};\n}\n"]}