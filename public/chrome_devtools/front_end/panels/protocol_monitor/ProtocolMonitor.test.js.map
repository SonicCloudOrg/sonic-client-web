{"version":3,"file":"ProtocolMonitor.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/protocol_monitor/ProtocolMonitor.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as ProtocolMonitor from './protocol_monitor.js';\n\ndescribe('ProtocolMonitor', () => {\n  describe('parseCommandInput', () => {\n    it('parses various JSON formats', async () => {\n      const input = {\n        command: 'Input.dispatchMouseEvent',\n        parameters: {parameter1: 'value1'},\n      };\n      // \"command\" variations.\n      assert.deepStrictEqual(\n          ProtocolMonitor.ProtocolMonitor.parseCommandInput(JSON.stringify({\n            command: input.command,\n            parameters: input.parameters,\n          })),\n          input);\n      assert.deepStrictEqual(\n          ProtocolMonitor.ProtocolMonitor.parseCommandInput(JSON.stringify({\n            cmd: input.command,\n            parameters: input.parameters,\n          })),\n          input);\n      assert.deepStrictEqual(\n          ProtocolMonitor.ProtocolMonitor.parseCommandInput(JSON.stringify({\n            method: input.command,\n            parameters: input.parameters,\n          })),\n          input);\n\n      // \"parameters\" variations.\n      assert.deepStrictEqual(\n          ProtocolMonitor.ProtocolMonitor.parseCommandInput(JSON.stringify({\n            command: input.command,\n            params: input.parameters,\n          })),\n          input);\n      assert.deepStrictEqual(\n          ProtocolMonitor.ProtocolMonitor.parseCommandInput(JSON.stringify({\n            cmd: input.command,\n            args: input.parameters,\n          })),\n          input);\n      assert.deepStrictEqual(\n          ProtocolMonitor.ProtocolMonitor.parseCommandInput(JSON.stringify({\n            method: input.command,\n            arguments: input.parameters,\n          })),\n          input);\n    });\n\n    it('parses non-JSON data as a command name', async () => {\n      assert.deepStrictEqual(ProtocolMonitor.ProtocolMonitor.parseCommandInput('Input.dispatchMouseEvent'), {\n        command: 'Input.dispatchMouseEvent',\n        parameters: {},\n      });\n    });\n\n    it('should correctly creates a map of CDP commands with their corresponding metadata', async () => {\n      const domains = [\n        {\n          domain: 'Test',\n          metadata: {\n            'Test.test': {\n              parameters: [{\n                name: 'test',\n                type: 'test',\n                optional: true,\n              }],\n              description: 'Description1',\n              replyArgs: ['Test1'],\n            },\n          },\n        },\n        {\n          domain: 'Test2',\n          metadata: {\n            'Test2.test2': {\n              parameters: [{\n                name: 'test2',\n                type: 'test2',\n                optional: true,\n              }],\n              description: 'Description2',\n              replyArgs: ['Test2'],\n            },\n            'Test2.test3': {\n              parameters: [{\n                name: 'test3',\n                type: 'test3',\n                optional: true,\n              }],\n              description: 'Description3',\n              replyArgs: ['Test3'],\n            },\n          },\n        },\n      ] as Iterable<ProtocolMonitor.ProtocolMonitor.ProtocolDomain>;\n\n      const expectedCommands = new Map();\n      expectedCommands.set('Test.test', {\n        parameters: [{\n          name: 'test',\n          type: 'test',\n          optional: true,\n        }],\n        description: 'Description1',\n        replyArgs: ['Test1'],\n      });\n      expectedCommands.set('Test2.test2', {\n        parameters: [{\n          name: 'test2',\n          type: 'test2',\n          optional: true,\n        }],\n        description: 'Description2',\n        replyArgs: ['Test2'],\n      });\n      expectedCommands.set('Test2.test3', {\n        parameters: [{\n          name: 'test3',\n          type: 'test3',\n          optional: true,\n        }],\n        description: 'Description3',\n        replyArgs: ['Test3'],\n      });\n\n      const metadataByCommand = ProtocolMonitor.ProtocolMonitor.buildProtocolMetadata(domains);\n      assert.deepStrictEqual(metadataByCommand, expectedCommands);\n    });\n  });\n\n  describe('HistoryAutocompleteDataProvider', () => {\n    it('should create completions with no history', async () => {\n      const provider = new ProtocolMonitor.ProtocolMonitor.CommandAutocompleteSuggestionProvider();\n      assert.deepStrictEqual(await provider.buildTextPromptCompletions('test', 'test'), []);\n    });\n\n    it('should build completions in the reverse insertion order', async () => {\n      const provider = new ProtocolMonitor.ProtocolMonitor.CommandAutocompleteSuggestionProvider();\n\n      provider.addEntry('test1');\n      provider.addEntry('test2');\n      provider.addEntry('test3');\n      assert.deepStrictEqual(await provider.buildTextPromptCompletions('test', 'test'), [\n        {text: 'test3'},\n        {text: 'test2'},\n        {text: 'test1'},\n      ]);\n\n      provider.addEntry('test1');\n      assert.deepStrictEqual(await provider.buildTextPromptCompletions('test', 'test'), [\n        {text: 'test1'},\n        {text: 'test3'},\n        {text: 'test2'},\n      ]);\n    });\n\n    it('should limit the number of completions', async () => {\n      const provider = new ProtocolMonitor.ProtocolMonitor.CommandAutocompleteSuggestionProvider(2);\n\n      provider.addEntry('test1');\n      provider.addEntry('test2');\n      provider.addEntry('test3');\n\n      assert.deepStrictEqual(await provider.buildTextPromptCompletions('test', 'test'), [\n        {text: 'test3'},\n        {text: 'test2'},\n      ]);\n    });\n  });\n});\n"]}