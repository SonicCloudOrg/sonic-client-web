{"version":3,"file":"ScreencastApp.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/screencast/ScreencastApp.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,GAAG,MAAM,uBAAuB,CAAC;AAC7C,OAAO,EAAC,YAAY,EAAC,MAAM,qCAAqC,CAAC;AACjE,OAAO,EAAC,UAAU,EAAC,MAAM,iCAAiC,CAAC;AAC3D,OAAO,EAAC,0BAA0B,EAAC,MAAM,iCAAiC,CAAC;AAE3E,OAAO,KAAK,UAAU,MAAM,iBAAiB,CAAC;AAE9C,0BAA0B,CAAC,eAAe,EAAE,GAAG,EAAE;IAC/C,EAAE,CAAC,mBAAmB,EAAE,KAAK,IAAI,EAAE;QACjC,MAAM,aAAa,GAAG,IAAI,UAAU,CAAC,aAAa,CAAC,aAAa,EAAE,CAAC;QACnE,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAClC,MAAM,SAAS,GAAG,YAAY,CAAC,EAAC,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAC,CAAC,CAAC;QAC5D,YAAY,CAAC,EAAC,YAAY,EAAE,SAAS,EAAE,OAAO,EAAE,WAAW,EAAC,CAAC,CAAC;QAC9D,MAAM,MAAM,GAAG,YAAY,CAAC,EAAC,YAAY,EAAE,SAAS,EAAC,CAAC,CAAC;QACvD,MAAM,kBAAkB,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,CAAC;QACnF,MAAM,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;QAClC,MAAM,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,kBAAkB,EAAE,iBAAiB,CAAC,CAAC,CAAC;QACpE,aAAa,CAAC,QAAQ,EAAE,MAAM,EAAE,CAAC;IACnC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {expectCall} from '../../testing/ExpectStubCall.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\n\nimport * as Screencast from './screencast.js';\n\ndescribeWithMockConnection('ScreencastApp', () => {\n  it('can start casting', async () => {\n    const screencastApp = new Screencast.ScreencastApp.ScreencastApp();\n    screencastApp.presentUI(document);\n    const tabTarget = createTarget({type: SDK.Target.Type.Tab});\n    createTarget({parentTarget: tabTarget, subtype: 'prerender'});\n    const target = createTarget({parentTarget: tabTarget});\n    const screenCaptureModel = target.model(SDK.ScreenCaptureModel.ScreenCaptureModel);\n    assert.exists(screenCaptureModel);\n    await expectCall(sinon.stub(screenCaptureModel, 'startScreencast'));\n    screencastApp.rootView?.detach();\n  });\n});\n"]}