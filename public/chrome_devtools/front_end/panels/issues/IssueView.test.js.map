{"version":3,"file":"IssueView.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/issues/IssueView.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../core/host/host.js';\nimport {describeWithEnvironment} from '../../testing/EnvironmentHelpers.js';\nimport {StubIssue} from '../../testing/StubIssue.js';\nimport {recordedMetricsContain} from '../../testing/UserMetricsHelpers.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport * as Issues from './issues.js';\n\ndescribeWithEnvironment('IssueView', () => {\n  it('records metrics when an issue is expanded', () => {\n    const aggregationKey = 'key' as unknown as Issues.IssueAggregator.AggregationKey;\n    const issue = StubIssue.createFromRequestIds(['id1', 'id2']);\n    const aggregatedIssue = new Issues.IssueAggregator.AggregatedIssue('code', aggregationKey);\n    aggregatedIssue.addInstance(issue);\n    const view = new Issues.IssueView.IssueView(aggregatedIssue, {title: 'Mock issue', links: [], markdown: []});\n    const treeOutline =\n        new UI.TreeOutline.TreeOutline();  // TreeElements need to be part of a TreeOutline to be expandable.\n    treeOutline.appendChild(view);\n\n    view.expand();\n\n    assert.isTrue(recordedMetricsContain(\n        Host.InspectorFrontendHostAPI.EnumeratedHistogram.IssuesPanelIssueExpanded,\n        Host.UserMetrics.IssueExpanded.Other));\n    view.clear();\n  });\n\n  it('records metrics when a SameSite Cookie issue is expanded', () => {\n    const aggregationKey = 'key' as unknown as Issues.IssueAggregator.AggregationKey;\n    const issue = StubIssue.createCookieIssue('CookieIssue::WarnSameSiteUnspecifiedLaxAllowUnsafe::ReadCookie');\n    const aggregatedIssue = new Issues.IssueAggregator.AggregatedIssue(\n        'CookieIssue::WarnSameSiteUnspecifiedLaxAllowUnsafe::ReadCookie', aggregationKey);\n    aggregatedIssue.addInstance(issue);\n    const view = new Issues.IssueView.IssueView(aggregatedIssue, {title: 'Mock Cookie Issue', links: [], markdown: []});\n    const treeOutline =\n        new UI.TreeOutline.TreeOutline();  // TreeElements need to be part of a TreeOutline to be expandable.\n    treeOutline.appendChild(view);\n\n    view.expand();\n\n    assert.isTrue(recordedMetricsContain(\n        Host.InspectorFrontendHostAPI.EnumeratedHistogram.IssuesPanelIssueExpanded,\n        Host.UserMetrics.IssueExpanded.SameSiteCookie));\n    assert.isFalse(recordedMetricsContain(\n        Host.InspectorFrontendHostAPI.EnumeratedHistogram.IssuesPanelIssueExpanded,\n        Host.UserMetrics.IssueExpanded.GenericCookie));\n    view.clear();\n  });\n\n  it('records metrics when a ThirdPartyPhaseout Cookie issue is expanded', () => {\n    const aggregationKey = 'key' as unknown as Issues.IssueAggregator.AggregationKey;\n    const issue = StubIssue.createCookieIssue('CookieIssue::WarnThirdPartyPhaseout::ReadCookie');\n    const aggregatedIssue =\n        new Issues.IssueAggregator.AggregatedIssue('CookieIssue::WarnThirdPartyPhaseout::ReadCookie', aggregationKey);\n    aggregatedIssue.addInstance(issue);\n    const view = new Issues.IssueView.IssueView(aggregatedIssue, {title: 'Mock Cookie Issue', links: [], markdown: []});\n    const treeOutline =\n        new UI.TreeOutline.TreeOutline();  // TreeElements need to be part of a TreeOutline to be expandable.\n    treeOutline.appendChild(view);\n\n    view.expand();\n\n    assert.isTrue(recordedMetricsContain(\n        Host.InspectorFrontendHostAPI.EnumeratedHistogram.IssuesPanelIssueExpanded,\n        Host.UserMetrics.IssueExpanded.ThirdPartyPhaseoutCookie));\n    assert.isFalse(recordedMetricsContain(\n        Host.InspectorFrontendHostAPI.EnumeratedHistogram.IssuesPanelIssueExpanded,\n        Host.UserMetrics.IssueExpanded.GenericCookie));\n    view.clear();\n  });\n});\n"]}