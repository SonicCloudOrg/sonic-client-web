{"version":3,"file":"ConsoleInsight.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/explain/components/ConsoleInsight.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\nimport * as Host from '../../../core/host/host.js';\nimport type * as Root from '../../../core/root/root.js';\nimport {dispatchClickEvent, renderElementIntoDOM} from '../../../testing/DOMHelpers.js';\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\nimport * as Explain from '../explain.js';\n\ndescribeWithEnvironment('ConsoleInsight', () => {\n  function getTestAidaClient() {\n    return {\n      async *\n          fetch() {\n            yield {explanation: 'test', metadata: {}};\n          },\n    };\n  }\n\n  function getTestPromptBuilder() {\n    return {\n      async buildPrompt() {\n        return {\n          prompt: '',\n          sources: [\n            {\n              type: Explain.SourceType.MESSAGE,\n              value: 'error message',\n            },\n          ],\n          isPageReloadRecommended: true,\n        };\n      },\n      getSearchQuery() {\n        return '';\n      },\n    };\n  }\n\n  async function drainMicroTasks() {\n    await new Promise(resolve => setTimeout(resolve, 0));\n  }\n\n  function skipConsentOnboarding() {\n    beforeEach(() => {\n      Common.Settings.settingForTest('console-insights-onboarding-finished').set(true);\n    });\n\n    afterEach(() => {\n      Common.Settings.settingForTest('console-insights-onboarding-finished').set(false);\n    });\n  }\n\n  describe('consent onboarding', () => {\n    afterEach(() => {\n      Common.Settings.settingForTest('console-insights-onboarding-finished').set(false);\n    });\n\n    it('should show privacy notice first', async () => {\n      const component = new Explain.ConsoleInsight(getTestPromptBuilder(), getTestAidaClient(), {\n        isSyncActive: true,\n        accountEmail: 'some-email',\n      });\n      renderElementIntoDOM(component);\n      await drainMicroTasks();\n      assert.strictEqual(component.shadowRoot!.querySelector('h2')?.innerText, 'Privacy notice');\n    });\n\n    it('should show legal notice second', async () => {\n      const component = new Explain.ConsoleInsight(getTestPromptBuilder(), getTestAidaClient(), {\n        isSyncActive: true,\n        accountEmail: 'some-email',\n      });\n      renderElementIntoDOM(component);\n      await drainMicroTasks();\n      dispatchClickEvent(component.shadowRoot!.querySelector('.next-button')!);\n      await drainMicroTasks();\n      assert.strictEqual(component.shadowRoot!.querySelector('h2')?.innerText, 'Legal notice');\n    });\n\n    it('should not confirm legal notice without checkbox', async () => {\n      const component = new Explain.ConsoleInsight(getTestPromptBuilder(), getTestAidaClient(), {\n        isSyncActive: true,\n        accountEmail: 'some-email',\n      });\n      renderElementIntoDOM(component);\n      await drainMicroTasks();\n      dispatchClickEvent(component.shadowRoot!.querySelector('.next-button')!);\n      await drainMicroTasks();\n      dispatchClickEvent(component.shadowRoot!.querySelector('.continue-button')!);\n      await drainMicroTasks();\n      assert.strictEqual(component.shadowRoot!.querySelector('h2')?.innerText, 'Legal notice');\n    });\n\n    it('should confirm legal notice if checkbox is pressed', async () => {\n      const component = new Explain.ConsoleInsight(getTestPromptBuilder(), getTestAidaClient(), {\n        isSyncActive: true,\n        accountEmail: 'some-email',\n      });\n      renderElementIntoDOM(component);\n      await drainMicroTasks();\n      dispatchClickEvent(component.shadowRoot!.querySelector('.next-button')!);\n      await drainMicroTasks();\n      dispatchClickEvent(component.shadowRoot!.querySelector('input')!);\n      await drainMicroTasks();\n      dispatchClickEvent(component.shadowRoot!.querySelector('.continue-button')!);\n      await drainMicroTasks();\n      assert.strictEqual(component.shadowRoot!.querySelector('h2')?.innerText, 'Data used to understand this message');\n      await drainMicroTasks();\n      assert.strictEqual(Common.Settings.settingForTest('console-insights-onboarding-finished').get(), true);\n    });\n\n    it('can cancel the onboarding flow', async () => {\n      const component = new Explain.ConsoleInsight(getTestPromptBuilder(), getTestAidaClient(), {\n        isSyncActive: true,\n        accountEmail: 'some-email',\n      });\n      renderElementIntoDOM(component);\n      await drainMicroTasks();\n      dispatchClickEvent(component.shadowRoot!.querySelector('.cancel-button')!);\n      await drainMicroTasks();\n      assert(component.getAttribute('class')?.includes('closing'));\n    });\n\n    it('can disable the feature', async () => {\n      Common.Settings.settingForTest('console-insights-enabled').set(true);\n      const component = new Explain.ConsoleInsight(getTestPromptBuilder(), getTestAidaClient(), {\n        isSyncActive: true,\n        accountEmail: 'some-email',\n      });\n      renderElementIntoDOM(component);\n      await drainMicroTasks();\n      dispatchClickEvent(component.shadowRoot!.querySelector('.disable-button')!);\n      await drainMicroTasks();\n      assert.strictEqual(Common.Settings.settingForTest('console-insights-enabled').get(), false);\n    });\n  });\n\n  describe('with consent onboarding finished', () => {\n    skipConsentOnboarding();\n\n    it('shows the consent reminder flow for signed-in users', async () => {\n      const component = new Explain.ConsoleInsight(getTestPromptBuilder(), getTestAidaClient(), {\n        isSyncActive: true,\n        accountEmail: 'some-email',\n      });\n      renderElementIntoDOM(component);\n      await drainMicroTasks();\n      assert.strictEqual(component.shadowRoot!.querySelector('h2')?.innerText, 'Data used to understand this message');\n      // Continue button is present.\n      assert(component.shadowRoot!.querySelector('.continue-button'));\n    });\n\n    it('consent reminder can be accepted', async () => {\n      const component = new Explain.ConsoleInsight(getTestPromptBuilder(), getTestAidaClient(), {\n        isSyncActive: true,\n        accountEmail: 'some-email',\n      });\n      renderElementIntoDOM(component);\n      await drainMicroTasks();\n      dispatchClickEvent(component.shadowRoot!.querySelector('.continue-button')!, {\n        bubbles: true,\n        composed: true,\n      });\n      // Expected to be rendered in the next task.\n      await new Promise(resolve => setTimeout(resolve, 0));\n      // Rating buttons are shown.\n      assert(component.shadowRoot!.querySelector('.rating'));\n    });\n\n    const renderInsight = async(): Promise<Explain.ConsoleInsight> => {\n      const component = new Explain.ConsoleInsight(getTestPromptBuilder(), getTestAidaClient(), {\n        isSyncActive: true,\n        accountEmail: 'some-email',\n      });\n      renderElementIntoDOM(component);\n      await drainMicroTasks();\n      dispatchClickEvent(component.shadowRoot!.querySelector('.continue-button')!, {\n        bubbles: true,\n        composed: true,\n      });\n      // Expected to be rendered in the next task.\n      await new Promise(resolve => setTimeout(resolve, 0));\n      return component;\n    };\n\n    const reportsRating = (positive: boolean) => async () => {\n      const actionTaken = sinon.stub(Host.userMetrics, 'actionTaken');\n      const registerAidaClientEvent =\n          sinon.stub(Host.InspectorFrontendHost.InspectorFrontendHostInstance, 'registerAidaClientEvent');\n\n      const component = await renderInsight();\n      dispatchClickEvent(component.shadowRoot!.querySelector(`.rating [data-rating=${positive}]`)!, {\n        bubbles: true,\n        composed: true,\n      });\n\n      assert(registerAidaClientEvent.calledOnce);\n      assert.include(registerAidaClientEvent.firstCall.firstArg, positive ? 'POSITIVE' : 'NEGATIVE');\n      assert(actionTaken.calledWith(\n          positive ? Host.UserMetrics.Action.InsightRatedPositive : Host.UserMetrics.Action.InsightRatedNegative));\n\n      dispatchClickEvent(component.shadowRoot!.querySelector(`.rating [data-rating=${positive}]`)!, {\n        bubbles: true,\n        composed: true,\n      });\n      // Can only rate once.\n      assert(registerAidaClientEvent.calledOnce);\n      assert.include(registerAidaClientEvent.firstCall.firstArg, positive ? 'POSITIVE' : 'NEGATIVE');\n    };\n\n    it('reports positive rating', reportsRating(true));\n    it('reports negative rating', reportsRating(false));\n\n    it('has no thumbs up/down buttons if logging is disabled', async () => {\n      const settings = Common.Settings.Settings.instance();\n      const stub = sinon.stub(settings, 'getHostConfig').returns({\n        devToolsConsoleInsights: {\n          enabled: true,\n          disallowLogging: true,\n        } as Root.Runtime.HostConfigConsoleInsights,\n        devToolsConsoleInsightsDogfood: {\n          enabled: false,\n        } as Root.Runtime.HostConfigConsoleInsightsDogfood,\n      });\n\n      const component = await renderInsight();\n      const thumbsUpButton = component.shadowRoot!.querySelector('.rating [data-rating=\"true\"]');\n      assert.isNull(thumbsUpButton);\n      const thumbsDownButton = component.shadowRoot!.querySelector('.rating [data-rating=\"false\"]');\n      assert.isNull(thumbsDownButton);\n\n      stub.restore();\n    });\n  });\n\n  it('report if the user is not logged in', async () => {\n    const component = new Explain.ConsoleInsight(getTestPromptBuilder(), getTestAidaClient(), {\n      isSyncActive: false,\n    });\n    renderElementIntoDOM(component);\n    await drainMicroTasks();\n    const content = component.shadowRoot!.querySelector('main')!.innerText.trim();\n    assert.strictEqual(content, 'This feature is only available when you sign into Chrome with your Google account.');\n  });\n\n  it('report if the sync is not enabled', async () => {\n    const component = new Explain.ConsoleInsight(getTestPromptBuilder(), getTestAidaClient(), {\n      isSyncActive: false,\n      accountEmail: 'some-email',\n    });\n    renderElementIntoDOM(component);\n    await drainMicroTasks();\n    const content = component.shadowRoot!.querySelector('main')!.innerText.trim();\n    assert.strictEqual(content, 'This feature requires you to turn on Chrome sync.');\n  });\n\n  it('report if the navigator is offline', async () => {\n    const navigatorDescriptor = Object.getOwnPropertyDescriptor(globalThis, 'navigator')!;\n    Object.defineProperty(globalThis, 'navigator', {\n      get() {\n        return {onLine: false};\n      },\n    });\n\n    try {\n      const component = new Explain.ConsoleInsight(getTestPromptBuilder(), getTestAidaClient(), {\n        isSyncActive: false,\n        accountEmail: 'some-email',\n      });\n      renderElementIntoDOM(component);\n      await drainMicroTasks();\n      const content = component.shadowRoot!.querySelector('main')!.innerText.trim();\n      assert.strictEqual(content, 'Check your internet connection and try again.');\n    } finally {\n      Object.defineProperty(globalThis, 'navigator', navigatorDescriptor);\n    }\n  });\n});\n"]}