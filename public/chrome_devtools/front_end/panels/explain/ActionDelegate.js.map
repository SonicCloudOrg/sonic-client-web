{"version":3,"file":"ActionDelegate.js","sourceRoot":"","sources":["../../../../../../front_end/panels/explain/ActionDelegate.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,IAAI,MAAM,yBAAyB,CAAC;AAEhD,OAAO,KAAK,OAAO,MAAM,uBAAuB,CAAC;AAEjD,OAAO,EAAC,cAAc,EAAC,MAAM,gCAAgC,CAAC;AAC9D,OAAO,EAAC,aAAa,EAAC,MAAM,oBAAoB,CAAC;AAEjD,MAAM,OAAO,cAAc;IACzB,YAAY,CAAC,OAA2B,EAAE,QAAgB;QACxD,QAAQ,QAAQ,EAAE,CAAC;YACjB,KAAK,iCAAiC,CAAC;YACvC,KAAK,uCAAuC,CAAC;YAC7C,KAAK,yCAAyC,CAAC;YAC/C,KAAK,uCAAuC,CAAC;YAC7C,KAAK,+BAA+B,CAAC,CAAC,CAAC;gBACrC,MAAM,kBAAkB,GAAG,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,CAAC;gBACzF,IAAI,kBAAkB,EAAE,CAAC;oBACvB,IAAI,QAAQ,CAAC,UAAU,CAAC,iCAAiC,CAAC,EAAE,CAAC;wBAC3D,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,8BAA8B,CAAC,CAAC;oBACvF,CAAC;yBAAM,IAAI,QAAQ,KAAK,+BAA+B,EAAE,CAAC;wBACxD,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,8BAA8B,CAAC,CAAC;oBACvF,CAAC;oBACD,MAAM,aAAa,GAAG,IAAI,aAAa,CAAC,kBAAkB,CAAC,CAAC;oBAC5D,MAAM,UAAU,GAAG,IAAI,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;oBACpD,KAAK,cAAc,CAAC,MAAM,CAAC,aAAa,EAAE,UAAU,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;wBACnE,kBAAkB,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;oBACzC,CAAC,CAAC,CAAC;oBACH,OAAO,IAAI,CAAC;gBACd,CAAC;gBACD,OAAO,KAAK,CAAC;YACf,CAAC;QACH,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;CACF","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Host from '../../core/host/host.js';\nimport type * as UI from '../../ui/legacy/legacy.js';\nimport * as Console from '../console/console.js';\n\nimport {ConsoleInsight} from './components/ConsoleInsight.js';\nimport {PromptBuilder} from './PromptBuilder.js';\n\nexport class ActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  handleAction(context: UI.Context.Context, actionId: string): boolean {\n    switch (actionId) {\n      case 'explain.console-message.context':\n      case 'explain.console-message.context.error':\n      case 'explain.console-message.context.warning':\n      case 'explain.console-message.context.other':\n      case 'explain.console-message.hover': {\n        const consoleViewMessage = context.flavor(Console.ConsoleViewMessage.ConsoleViewMessage);\n        if (consoleViewMessage) {\n          if (actionId.startsWith('explain.console-message.context')) {\n            Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightRequestedViaContextMenu);\n          } else if (actionId === 'explain.console-message.hover') {\n            Host.userMetrics.actionTaken(Host.UserMetrics.Action.InsightRequestedViaHoverButton);\n          }\n          const promptBuilder = new PromptBuilder(consoleViewMessage);\n          const aidaClient = new Host.AidaClient.AidaClient();\n          void ConsoleInsight.create(promptBuilder, aidaClient).then(insight => {\n            consoleViewMessage.setInsight(insight);\n          });\n          return true;\n        }\n        return false;\n      }\n    }\n    return false;\n  }\n}\n"]}