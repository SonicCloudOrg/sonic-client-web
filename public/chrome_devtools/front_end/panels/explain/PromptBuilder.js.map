{"version":3,"file":"PromptBuilder.js","sourceRoot":"","sources":["../../../../../../front_end/panels/explain/PromptBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as Formatter from '../../models/formatter/formatter.js';\nimport * as Logs from '../../models/logs/logs.js';\nimport * as Components from '../../ui/legacy/components/utils/utils.js';\nimport type * as Console from '../console/console.js';\n\nconst MAX_MESSAGE_SIZE = 1000;\nconst MAX_STACK_TRACE_SIZE = 1000;\nconst MAX_CODE_SIZE = 1000;\nconst MAX_HEADERS_SIZE = 1000;\n\nexport enum SourceType {\n  MESSAGE = 'message',\n  STACKTRACE = 'stacktrace',\n  NETWORK_REQUEST = 'networkRequest',\n  RELATED_CODE = 'relatedCode',\n}\n\nexport interface Source {\n  type: SourceType;\n  value: string;\n}\n\nexport class PromptBuilder {\n  #consoleMessage: Console.ConsoleViewMessage.ConsoleViewMessage;\n\n  constructor(consoleMessage: Console.ConsoleViewMessage.ConsoleViewMessage) {\n    this.#consoleMessage = consoleMessage;\n  }\n\n  async getNetworkRequest(): Promise<SDK.NetworkRequest.NetworkRequest|undefined> {\n    const requestId = this.#consoleMessage.consoleMessage().getAffectedResources()?.requestId;\n    if (!requestId) {\n      return;\n    }\n    const log = Logs.NetworkLog.NetworkLog.instance();\n    // TODO: we might try handling redirect requests too later.\n    return log.requestsForId(requestId)[0];\n  }\n\n  /**\n   * Gets the source file associated with the top of the message's stacktrace.\n   * Returns an empty string if the source is not available for any reasons.\n   */\n  async getMessageSourceCode(): Promise<{text: string, columnNumber: number, lineNumber: number}> {\n    const callframe = this.#consoleMessage.consoleMessage().stackTrace?.callFrames[0];\n    const runtimeModel = this.#consoleMessage.consoleMessage().runtimeModel();\n    const debuggerModel = runtimeModel?.debuggerModel();\n    if (!debuggerModel || !runtimeModel || !callframe) {\n      return {text: '', columnNumber: 0, lineNumber: 0};\n    }\n    const rawLocation =\n        new SDK.DebuggerModel.Location(debuggerModel, callframe.scriptId, callframe.lineNumber, callframe.columnNumber);\n    const mappedLocation =\n        await Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance().rawLocationToUILocation(\n            rawLocation);\n    const content = await mappedLocation?.uiSourceCode.requestContent();\n    const text = !content?.isEncoded && content?.content ? content.content : '';\n    const firstNewline = text.indexOf('\\n');\n    if (text.length > MAX_CODE_SIZE && (firstNewline < 0 || firstNewline > MAX_CODE_SIZE)) {\n      // Use formatter\n      const {formattedContent, formattedMapping} = await Formatter.ScriptFormatter.formatScriptContent(\n          mappedLocation?.uiSourceCode.mimeType() ?? 'text/javascript', text);\n      const [lineNumber, columnNumber] =\n          formattedMapping.originalToFormatted(mappedLocation?.lineNumber ?? 0, mappedLocation?.columnNumber ?? 0);\n      return {text: formattedContent, columnNumber, lineNumber};\n    }\n    return {text, columnNumber: mappedLocation?.columnNumber ?? 0, lineNumber: mappedLocation?.lineNumber ?? 0};\n  }\n\n  async buildPrompt(sourcesTypes: SourceType[] = Object.values(SourceType)):\n      Promise<{prompt: string, sources: Source[], isPageReloadRecommended: boolean}> {\n    const [sourceCode, request] = await Promise.all([\n      sourcesTypes.includes(SourceType.RELATED_CODE) ? this.getMessageSourceCode() : undefined,\n      sourcesTypes.includes(SourceType.NETWORK_REQUEST) ? this.getNetworkRequest() : undefined,\n    ]);\n\n    const relatedCode = sourceCode?.text ? formatRelatedCode(sourceCode) : '';\n    const relatedRequest = request ? formatNetworkRequest(request) : '';\n    const stacktrace = sourcesTypes.includes(SourceType.STACKTRACE) ? formatStackTrace(this.#consoleMessage) : '';\n\n    const message = formatConsoleMessage(this.#consoleMessage);\n\n    const prompt = this.formatPrompt({\n      message: [message, stacktrace].join('\\n').trim(),\n      relatedCode,\n      relatedRequest,\n    });\n\n    const sources = [\n      {\n        type: SourceType.MESSAGE,\n        value: message,\n      },\n    ];\n\n    if (stacktrace) {\n      sources.push({\n        type: SourceType.STACKTRACE,\n        value: stacktrace,\n      });\n    }\n\n    if (relatedCode) {\n      sources.push({\n        type: SourceType.RELATED_CODE,\n        value: relatedCode,\n      });\n    }\n\n    if (relatedRequest) {\n      sources.push({\n        type: SourceType.NETWORK_REQUEST,\n        value: relatedRequest,\n      });\n    }\n\n    return {\n      prompt,\n      sources,\n      isPageReloadRecommended: sourcesTypes.includes(SourceType.NETWORK_REQUEST) &&\n          Boolean(this.#consoleMessage.consoleMessage().getAffectedResources()?.requestId) && !relatedRequest,\n    };\n  }\n\n  formatPrompt({message, relatedCode, relatedRequest}: {message: string, relatedCode: string, relatedRequest: string}):\n      string {\n    let prompt = `Why does browser show an error\n${message}`;\n\n    if (relatedCode) {\n      prompt += `\nFor the following code in my web app\n\n\\`\\`\\`\n${relatedCode}\n\\`\\`\\``;\n    }\n\n    if (relatedRequest) {\n      prompt += `\nFor the following network request in my web app\n\n\\`\\`\\`\n${relatedRequest}\n\\`\\`\\``;\n    }\n    return prompt;\n  }\n\n  getSearchQuery(): string {\n    let message = this.#consoleMessage.toMessageTextString();\n    if (message) {\n      // If there are multiple lines, it is likely the rest of the message\n      // is a stack trace, which we don't want.\n      message = message.split('\\n')[0];\n    }\n    return message;\n  }\n}\n\nexport function allowHeader(header: SDK.NetworkRequest.NameValue): boolean {\n  const normalizedName = header.name.toLowerCase().trim();\n  // Skip custom headers.\n  if (normalizedName.startsWith('x-')) {\n    return false;\n  }\n  // Skip cookies as they might contain auth.\n  if (normalizedName === 'cookie' || normalizedName === 'set-cookie') {\n    return false;\n  }\n  if (normalizedName === 'authorization') {\n    return false;\n  }\n  return true;\n}\n\nexport function lineWhitespace(line: string): string|null {\n  const matches = /^\\s*/.exec(line);\n  if (!matches || !matches.length) {\n    // This should not happen\n    return null;\n  }\n  const whitespace = matches[0];\n  if (whitespace === line) {\n    return null;\n  }\n  return whitespace;\n}\n\nexport function formatRelatedCode(\n    {text, columnNumber, lineNumber}: {text: string, columnNumber: number, lineNumber: number},\n    maxCodeSize = MAX_CODE_SIZE): string {\n  const lines = text.split('\\n');\n  if (lines[lineNumber].length >= maxCodeSize / 2) {\n    const start = Math.max(columnNumber - maxCodeSize / 2, 0);\n    const end = Math.min(columnNumber + maxCodeSize / 2, lines[lineNumber].length);\n    return lines[lineNumber].substring(start, end);\n  }\n  let relatedCodeSize = 0;\n  let currentLineNumber = lineNumber;\n  let currentWhitespace = lineWhitespace(lines[lineNumber]);\n  const startByPrefix: Map<string, number> = new Map();\n  while (lines[currentLineNumber] !== undefined &&\n         (relatedCodeSize + lines[currentLineNumber].length <= maxCodeSize / 2)) {\n    const whitespace = lineWhitespace(lines[currentLineNumber]);\n    if (whitespace !== null && currentWhitespace !== null &&\n        (whitespace === currentWhitespace || !whitespace.startsWith(currentWhitespace))) {\n      // Don't start on a line that begins with a closing character\n      if (!/^\\s*[\\}\\)\\]]/.exec(lines[currentLineNumber])) {\n        // Update map of where code should start based on its indentation\n        startByPrefix.set(whitespace, currentLineNumber);\n      }\n      currentWhitespace = whitespace;\n    }\n    relatedCodeSize += lines[currentLineNumber].length + 1;\n    currentLineNumber--;\n  }\n  currentLineNumber = lineNumber + 1;\n  let startLine = lineNumber;\n  let endLine = lineNumber;\n  currentWhitespace = lineWhitespace(lines[lineNumber]);\n  while (lines[currentLineNumber] !== undefined && (relatedCodeSize + lines[currentLineNumber].length <= maxCodeSize)) {\n    relatedCodeSize += lines[currentLineNumber].length;\n    const whitespace = lineWhitespace(lines[currentLineNumber]);\n    if (whitespace !== null && currentWhitespace !== null &&\n        (whitespace === currentWhitespace || !whitespace.startsWith(currentWhitespace))) {\n      // We shouldn't end on a line if it is followed by an indented line\n      const nextLine = lines[currentLineNumber + 1];\n      const nextWhitespace = nextLine ? lineWhitespace(nextLine) : null;\n      if (!nextWhitespace || nextWhitespace === whitespace || !nextWhitespace.startsWith(whitespace)) {\n        // Look up where code should start based on its indentation\n        if (startByPrefix.has(whitespace)) {\n          startLine = startByPrefix.get(whitespace) ?? 0;\n          endLine = currentLineNumber;\n        }\n      }\n      currentWhitespace = whitespace;\n    }\n    currentLineNumber++;\n  }\n  return lines.slice(startLine, endLine + 1).join('\\n');\n}\n\nfunction formatLines(title: string, lines: string[], maxLength: number): string {\n  let result = '';\n  for (const line of lines) {\n    if (result.length + line.length > maxLength) {\n      break;\n    }\n    result += line;\n  }\n  result = result.trim();\n  return result && title ? title + '\\n' + result : result;\n}\n\nexport function formatNetworkRequest(\n    request:\n        Pick<SDK.NetworkRequest.NetworkRequest, 'url'|'requestHeaders'|'responseHeaders'|'statusCode'|'statusText'>):\n    string {\n  const formatHeaders = (title: string, headers: SDK.NetworkRequest.NameValue[]): string => formatLines(\n      title, headers.filter(allowHeader).map(header => header.name + ': ' + header.value + '\\n'), MAX_HEADERS_SIZE);\n  // TODO: anything else that might be relavant?\n  // TODO: handle missing headers\n  return `Request: ${request.url()}\n\n${formatHeaders('Request headers:', request.requestHeaders())}\n\n${formatHeaders('Response headers:', request.responseHeaders)}\n\nResponse status: ${request.statusCode} ${request.statusText}`;\n}\n\nexport function formatConsoleMessage(message: Console.ConsoleViewMessage.ConsoleViewMessage): string {\n  return message.toMessageTextString().substr(0, MAX_MESSAGE_SIZE);\n}\n\n/**\n * This formats the stacktrace from the console message which might or might not\n * match the content of stacktrace(s) in the console message arguments.\n */\nexport function formatStackTrace(message: Console.ConsoleViewMessage.ConsoleViewMessage): string {\n  const previewContainer = message.contentElement().querySelector('.stack-preview-container');\n\n  if (!previewContainer) {\n    return '';\n  }\n\n  const preview = previewContainer.shadowRoot?.querySelector('.stack-preview-container') as HTMLElement;\n\n  const nodes = preview.childTextNodes();\n  // Gets application-level source mapped stack trace taking the ignore list\n  // into account.\n  const messageContent = nodes\n                             .filter(n => {\n                               return !n.parentElement?.closest('.show-all-link,.show-less-link,.hidden-row');\n                             })\n                             .map(Components.Linkifier.Linkifier.untruncatedNodeText);\n  return formatLines('', messageContent, MAX_STACK_TRACE_SIZE);\n}\n"]}