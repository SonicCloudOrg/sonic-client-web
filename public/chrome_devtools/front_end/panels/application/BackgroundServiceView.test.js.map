{"version":3,"file":"BackgroundServiceView.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/application/BackgroundServiceView.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport * as Resources from './application.js';\n\ndescribeWithMockConnection('BackgroundServiceView', () => {\n  const testKey = 'test-storage-key';\n  const serviceName = Protocol.BackgroundService.ServiceName.BackgroundFetch;\n  let target: SDK.Target.Target;\n  let backgroundServiceModel: Resources.BackgroundServiceModel.BackgroundServiceModel|null;\n  let manager: SDK.StorageKeyManager.StorageKeyManager|null|undefined;\n  let view: Resources.BackgroundServiceView.BackgroundServiceView;\n\n  beforeEach(() => {\n    target = createTarget();\n    backgroundServiceModel = target.model(Resources.BackgroundServiceModel.BackgroundServiceModel);\n    manager = target.model(SDK.StorageKeyManager.StorageKeyManager);\n    UI.ActionRegistration.maybeRemoveActionExtension('background-service.toggle-recording');\n    UI.ActionRegistration.registerActionExtension({\n      actionId: 'background-service.toggle-recording',\n      category: UI.ActionRegistration.ActionCategory.BACKGROUND_SERVICES,\n      title: () => 'mock' as Platform.UIString.LocalizedString,\n      toggleable: true,\n    });\n    sinon.stub(UI.ShortcutRegistry.ShortcutRegistry, 'instance').returns({\n      shortcutTitleForAction: () => {},\n      shortcutsForAction: () => [new UI.KeyboardShortcut.KeyboardShortcut(\n          [{key: 0, name: ''}], '', UI.KeyboardShortcut.Type.DefaultShortcut)],\n    } as unknown as UI.ShortcutRegistry.ShortcutRegistry);\n    assert.exists(backgroundServiceModel);\n    view = new Resources.BackgroundServiceView.BackgroundServiceView(serviceName, backgroundServiceModel);\n  });\n\n  afterEach(() => {\n    UI.ActionRegistration.maybeRemoveActionExtension('background-service.toggle-recording');\n  });\n\n  it('updates event list when main storage key changes', () => {\n    assert.exists(backgroundServiceModel);\n    assert.exists(manager);\n    backgroundServiceModel.backgroundServiceEventReceived({\n      backgroundServiceEvent: {\n        timestamp: 1556889085,  // 2019-05-03 14:11:25.000.\n        origin: '',\n        storageKey: testKey,\n        serviceWorkerRegistrationId: 42 as unknown as Protocol.ServiceWorker.RegistrationID,  // invalid.\n        service: serviceName,\n        eventName: 'Event1',\n        instanceId: 'Instance1',\n        eventMetadata: [],\n      },\n    });\n    manager.updateStorageKeys(new Set([testKey]));\n\n    manager.setMainStorageKey(testKey);\n\n    const dataRow = view.getDataGrid().dataTableBody.getElementsByClassName('data-grid-data-grid-node')[0];\n    const expectedData = ['Event1', testKey, 'Instance1'];\n    const actualData = [\n      dataRow.getElementsByClassName('event-name-column')[0].textContent,\n      dataRow.getElementsByClassName('storage-key-column')[0].textContent,\n      dataRow.getElementsByClassName('instance-id-column')[0].textContent,\n    ];\n    assert.deepEqual(actualData, expectedData);\n  });\n});\n"]}