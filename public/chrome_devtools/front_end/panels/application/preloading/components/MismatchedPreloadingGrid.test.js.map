{"version":3,"file":"MismatchedPreloadingGrid.test.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/application/preloading/components/MismatchedPreloadingGrid.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Platform from '../../../../core/platform/platform.js';\nimport * as SDK from '../../../../core/sdk/sdk.js';\nimport * as Protocol from '../../../../generated/protocol.js';\nimport {\n  assertGridContents,\n  getCellByIndexes,\n} from '../../../../testing/DataGridHelpers.js';\nimport {\n  getElementWithinComponent,\n  renderElementIntoDOM,\n} from '../../../../testing/DOMHelpers.js';\nimport {describeWithEnvironment} from '../../../../testing/EnvironmentHelpers.js';\nimport * as DataGrid from '../../../../ui/components/data_grid/data_grid.js';\nimport * as Coordinator from '../../../../ui/components/render_coordinator/render_coordinator.js';\n\nimport * as PreloadingComponents from './components.js';\n\nconst coordinator = Coordinator.RenderCoordinator.RenderCoordinator.instance();\n\nconst zip2 = <T, S>(xs: T[], ys: S[]): [T, S][] => {\n  assert.strictEqual(xs.length, ys.length);\n\n  return Array.from(xs.map((_, i) => [xs[i], ys[i]]));\n};\n\nasync function renderMismatchedPreloadingGrid(\n    data: PreloadingComponents.MismatchedPreloadingGrid.MismatchedPreloadingGridData): Promise<HTMLElement> {\n  const component = new PreloadingComponents.MismatchedPreloadingGrid.MismatchedPreloadingGrid();\n  component.data = data;\n  renderElementIntoDOM(component);\n  assert.isNotNull(component.shadowRoot);\n  await coordinator.done();\n\n  return component;\n}\n\nfunction assertDiff(\n    gridComponent: HTMLElement, cellIndex: {row: number, column: number},\n    spansExpected: {textContent: string, partOfStyle: string}[]) {\n  const controller = getElementWithinComponent(\n      gridComponent, 'devtools-data-grid-controller', DataGrid.DataGridController.DataGridController);\n  const grid = getElementWithinComponent(controller, 'devtools-data-grid', DataGrid.DataGrid.DataGrid);\n  assert.isNotNull(grid.shadowRoot);\n  const cell = getCellByIndexes(grid.shadowRoot, cellIndex);\n  const spans = cell.querySelectorAll('div span');\n\n  for (const [got, expected] of zip2(Array.from(spans), spansExpected)) {\n    assert.strictEqual(got.textContent, expected.textContent);\n    assert.include(got.getAttribute('style'), expected.partOfStyle);\n  }\n}\n\nconst FG_GREEN = 'color: var(--sys-color-green); text-decoration: line-through';\nconst FG_RED = 'color: var(--sys-color-error);';\n\ndescribeWithEnvironment('MismatchedPreloadingGrid', () => {\n  // Disabled due to flakiness\n  it.skip('[crbug.com/1473557]: renderes no diff in URL', async function() {\n    if (this.timeout() > 0) {\n      this.timeout(10000);\n    }\n\n    const data: PreloadingComponents.MismatchedPreloadingGrid.MismatchedPreloadingGridData = {\n      pageURL: 'https://example.com/prefetched.html' as Platform.DevToolsPath.UrlString,\n      rows: [{\n        url: 'https://example.com/prefetched.html',\n        action: Protocol.Preload.SpeculationAction.Prefetch,\n        status: SDK.PreloadingModel.PreloadingStatus.Failure,\n      }],\n    };\n\n    const component = await renderMismatchedPreloadingGrid(data);\n    assert.isNotNull(component.shadowRoot);\n\n    assertGridContents(\n        component,\n        ['URL', 'Action', 'Status'],\n        [\n          ['https://example.com/prefetched.html', 'Prefetch', 'Failure'],\n        ],\n    );\n  });\n\n  it('renderes edit diff', async () => {\n    const data: PreloadingComponents.MismatchedPreloadingGrid.MismatchedPreloadingGridData = {\n      pageURL: 'https://example.com/prefetched.html?q=1' as Platform.DevToolsPath.UrlString,\n      rows: [{\n        url: 'https://example.com/prefetched.html?q=2',\n        action: Protocol.Preload.SpeculationAction.Prefetch,\n        status: SDK.PreloadingModel.PreloadingStatus.Ready,\n      }],\n    };\n\n    const component = await renderMismatchedPreloadingGrid(data);\n    assert.isNotNull(component.shadowRoot);\n\n    assertGridContents(\n        component,\n        ['URL', 'Action', 'Status'],\n        [\n          ['https://example.com/prefetched.html?q=21', 'Prefetch', 'Ready'],\n        ],\n    );\n\n    assertDiff(component, {row: 1, column: 0}, [\n      {textContent: 'https://example.com/prefetched.html?q=', partOfStyle: ''},\n      {textContent: '2', partOfStyle: FG_RED},\n      {textContent: '1', partOfStyle: FG_GREEN},\n    ]);\n  });\n\n  it('renderes add diff', async () => {\n    const data: PreloadingComponents.MismatchedPreloadingGrid.MismatchedPreloadingGridData = {\n      pageURL: 'https://example.com/prefetched.html?q=1' as Platform.DevToolsPath.UrlString,\n      rows: [{\n        url: 'https://example.com/prefetched.html',\n        action: Protocol.Preload.SpeculationAction.Prefetch,\n        status: SDK.PreloadingModel.PreloadingStatus.Ready,\n      }],\n    };\n\n    const component = await renderMismatchedPreloadingGrid(data);\n    assert.isNotNull(component.shadowRoot);\n\n    assertGridContents(\n        component,\n        ['URL', 'Action', 'Status'],\n        [\n          ['https://example.com/prefetched.html?q=1', 'Prefetch', 'Ready'],\n        ],\n    );\n\n    assertDiff(component, {row: 1, column: 0}, [\n      {textContent: 'https://example.com/prefetched.html', partOfStyle: ''},\n      {textContent: '?q=1', partOfStyle: FG_GREEN},\n    ]);\n  });\n\n  it('renderes delete diff', async () => {\n    const data: PreloadingComponents.MismatchedPreloadingGrid.MismatchedPreloadingGridData = {\n      pageURL: 'https://example.com/prefetched.html' as Platform.DevToolsPath.UrlString,\n      rows: [{\n        url: 'https://example.com/prefetched.html?q=1',\n        action: Protocol.Preload.SpeculationAction.Prefetch,\n        status: SDK.PreloadingModel.PreloadingStatus.Ready,\n      }],\n    };\n\n    const component = await renderMismatchedPreloadingGrid(data);\n    assert.isNotNull(component.shadowRoot);\n\n    assertGridContents(\n        component,\n        ['URL', 'Action', 'Status'],\n        [\n          ['https://example.com/prefetched.html?q=1', 'Prefetch', 'Ready'],\n        ],\n    );\n\n    assertDiff(component, {row: 1, column: 0}, [\n      {textContent: 'https://example.com/prefetched.html', partOfStyle: ''},\n      {textContent: '?q=1', partOfStyle: FG_RED},\n    ]);\n  });\n\n  it('renderes complex diff', async () => {\n    const data: PreloadingComponents.MismatchedPreloadingGrid.MismatchedPreloadingGridData = {\n      pageURL: 'https://example.com/prefetched.html?q=1' as Platform.DevToolsPath.UrlString,\n      rows: [{\n        url: 'https://example.com/prerendered.html?x=1',\n        action: Protocol.Preload.SpeculationAction.Prerender,\n        status: SDK.PreloadingModel.PreloadingStatus.Ready,\n      }],\n    };\n\n    const component = await renderMismatchedPreloadingGrid(data);\n    assert.isNotNull(component.shadowRoot);\n\n    assertGridContents(\n        component,\n        ['URL', 'Action', 'Status'],\n        [\n          ['https://example.com/prerfendertched.html?xq=1', 'Prerender', 'Ready'],\n        ],\n    );\n\n    assertDiff(component, {row: 1, column: 0}, [\n      {textContent: 'https://example.com/pre', partOfStyle: ''},\n      {textContent: 'r', partOfStyle: FG_RED},\n      {textContent: 'f', partOfStyle: FG_GREEN},\n      {textContent: 'e', partOfStyle: ''},\n      {textContent: 'nder', partOfStyle: FG_RED},\n      {textContent: 'tch', partOfStyle: FG_GREEN},\n      {textContent: 'ed.html?', partOfStyle: ''},\n      {textContent: 'x', partOfStyle: FG_RED},\n      {textContent: 'q', partOfStyle: FG_GREEN},\n      {textContent: '=1', partOfStyle: ''},\n    ]);\n  });\n});\n"]}