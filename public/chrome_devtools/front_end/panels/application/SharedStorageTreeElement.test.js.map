{"version":3,"file":"SharedStorageTreeElement.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/application/SharedStorageTreeElement.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as Root from '../../core/root/root.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport {\n  createTarget,\n  stubNoopSettings,\n} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\nimport {SECURITY_ORIGIN} from '../../testing/ResourceTreeHelpers.js';\nimport * as Coordinator from '../../ui/components/render_coordinator/render_coordinator.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport * as Application from './application.js';\n\nclass SharedStorageItemsListener {\n  #dispatcher:\n      Common.ObjectWrapper.ObjectWrapper<Application.SharedStorageItemsView.SharedStorageItemsDispatcher.EventTypes>;\n  #refreshed: boolean = false;\n\n  constructor(dispatcher: Common.ObjectWrapper\n                  .ObjectWrapper<Application.SharedStorageItemsView.SharedStorageItemsDispatcher.EventTypes>) {\n    this.#dispatcher = dispatcher;\n    this.#dispatcher.addEventListener(\n        Application.SharedStorageItemsView.SharedStorageItemsDispatcher.Events.ItemsRefreshed, this.#itemsRefreshed,\n        this);\n  }\n\n  dispose(): void {\n    this.#dispatcher.removeEventListener(\n        Application.SharedStorageItemsView.SharedStorageItemsDispatcher.Events.ItemsRefreshed, this.#itemsRefreshed,\n        this);\n  }\n\n  #itemsRefreshed(): void {\n    this.#refreshed = true;\n  }\n\n  async waitForItemsRefreshed(): Promise<void> {\n    if (!this.#refreshed) {\n      await this.#dispatcher.once(\n          Application.SharedStorageItemsView.SharedStorageItemsDispatcher.Events.ItemsRefreshed);\n    }\n    this.#refreshed = false;\n  }\n}\n\nconst coordinator = Coordinator.RenderCoordinator.RenderCoordinator.instance();\n\ndescribeWithMockConnection('SharedStorageTreeElement', function() {\n  let target: SDK.Target.Target;\n  let sharedStorageModel: Application.SharedStorageModel.SharedStorageModel;\n  let sharedStorage: Application.SharedStorageModel.SharedStorageForOrigin;\n  let treeElement: Application.SharedStorageTreeElement.SharedStorageTreeElement;\n\n  const METADATA = {\n    creationTime: 100 as Protocol.Network.TimeSinceEpoch,\n    length: 3,\n    remainingBudget: 2.5,\n    bytesUsed: 30,\n  } as unknown as Protocol.Storage.SharedStorageMetadata;\n\n  const ENTRIES = [\n    {\n      key: 'key1',\n      value: 'a',\n    } as unknown as Protocol.Storage.SharedStorageEntry,\n    {\n      key: 'key2',\n      value: 'b',\n    } as unknown as Protocol.Storage.SharedStorageEntry,\n    {\n      key: 'key3',\n      value: 'c',\n    } as unknown as Protocol.Storage.SharedStorageEntry,\n  ];\n\n  beforeEach(async () => {\n    stubNoopSettings();\n    SDK.ChildTargetManager.ChildTargetManager.install();\n    const tabTarget = createTarget({type: SDK.Target.Type.Tab});\n    createTarget({parentTarget: tabTarget, subtype: 'prerender'});\n    target = createTarget({parentTarget: tabTarget});\n    Root.Runtime.experiments.register(Root.Runtime.ExperimentName.PRELOADING_STATUS_PANEL, '', false);\n\n    sharedStorageModel = target.model(Application.SharedStorageModel.SharedStorageModel) as\n        Application.SharedStorageModel.SharedStorageModel;\n    sharedStorage = new Application.SharedStorageModel.SharedStorageForOrigin(sharedStorageModel, SECURITY_ORIGIN);\n    assert.strictEqual(sharedStorage.securityOrigin, SECURITY_ORIGIN);\n  });\n\n  it('shows view on select', async () => {\n    sinon.stub(sharedStorageModel.storageAgent, 'invoke_setSharedStorageTracking').resolves({\n      getError: () => undefined,\n    });\n    const getMetadataSpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_getSharedStorageMetadata').resolves({\n      metadata: METADATA,\n      getError: () => undefined,\n    });\n    const getEntriesSpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_getSharedStorageEntries').resolves({\n      entries: ENTRIES,\n      getError: () => undefined,\n    });\n\n    const panel = Application.ResourcesPanel.ResourcesPanel.instance({forceNew: true});\n    panel.markAsRoot();\n    panel.show(document.body);\n\n    treeElement =\n        await Application.SharedStorageTreeElement.SharedStorageTreeElement.createElement(panel, sharedStorage);\n\n    await coordinator.done({waitForWork: true});\n    assert.isTrue(getMetadataSpy.calledOnceWithExactly({ownerOrigin: SECURITY_ORIGIN}));\n\n    const {view} = treeElement;\n\n    const itemsListener = new SharedStorageItemsListener(view.sharedStorageItemsDispatcher);\n    const refreshedPromise = itemsListener.waitForItemsRefreshed();\n\n    document.body.appendChild(treeElement.listItemNode);\n    treeElement.treeOutline = new UI.TreeOutline.TreeOutlineInShadow();\n    treeElement.selectable = true;\n    treeElement.select();\n    await refreshedPromise;\n\n    assert.isTrue(getMetadataSpy.calledTwice);\n    assert.isTrue(getMetadataSpy.alwaysCalledWithExactly({ownerOrigin: SECURITY_ORIGIN}));\n    assert.isTrue(getEntriesSpy.calledOnceWithExactly({ownerOrigin: SECURITY_ORIGIN}));\n\n    assert.deepEqual(view.getEntriesForTesting(), ENTRIES);\n\n    panel.detach();\n  });\n});\n"]}