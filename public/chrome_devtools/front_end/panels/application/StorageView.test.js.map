{"version":3,"file":"StorageView.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/application/StorageView.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,GAAG,MAAM,uBAAuB,CAAC;AAE7C,OAAO,EAAC,qBAAqB,EAAC,MAAM,6BAA6B,CAAC;AAClE,OAAO,EAAC,YAAY,EAAC,MAAM,qCAAqC,CAAC;AACjE,OAAO,EAAC,0BAA0B,EAAC,MAAM,iCAAiC,CAAC;AAC3E,OAAO,EAAC,eAAe,EAAC,MAAM,sCAAsC,CAAC;AACrE,OAAO,KAAK,WAAW,MAAM,8DAA8D,CAAC;AAE5F,OAAO,KAAK,SAAS,MAAM,kBAAkB,CAAC;AAE9C,MAAM,WAAW,GAAG,WAAW,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC;AAE/E,0BAA0B,CAAC,aAAa,EAAE,GAAG,EAAE;IAC7C,MAAM,OAAO,GAAG,kBAAkB,CAAC;IACnC,IAAI,MAAyB,CAAC;IAC9B,IAAI,eAA+D,CAAC;IACpE,IAAI,iBAA+D,CAAC;IAEpE,UAAU,CAAC,GAAG,EAAE;QACd,MAAM,SAAS,GAAG,YAAY,CAAC,EAAC,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAC,CAAC,CAAC;QAC5D,YAAY,CAAC,EAAC,YAAY,EAAE,SAAS,EAAE,OAAO,EAAE,WAAW,EAAC,CAAC,CAAC;QAC9D,MAAM,GAAG,YAAY,CAAC,EAAC,YAAY,EAAE,SAAS,EAAC,CAAC,CAAC;QACjD,eAAe,GAAG,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC;QAC1E,eAAe,EAAE,MAAM,EAAE,CAAC;QAC1B,iBAAiB,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;IAC5E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE,GAAG,EAAE;QACvC,MAAM,MAAM,GAAG,EAAC,UAAU,EAAE,OAAO,EAAE,cAAc,EAAE,IAAI,EAAkC,CAAC;QAE5F,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;QAC/B,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC3C,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;QACjC,iBAAiB,CAAC,wBAAwB,uEAA+C,OAAO,CAAC,CAAC;QAClG,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;QAEpD,MAAM,aAAa,GAAG,KAAK,CAAC,GAAG,CAAC,eAAe,EAAE,0BAA0B,CAAC,CAAC;QAC7E,MAAM,yBAAyB,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,EAAE,+BAA+B,CAAC,CAAC;QACrG,SAAS,CAAC,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,8CAAkC,EAAE,KAAK,CAAC,CAAC;QAC1G,sHAAsH;QACtH,MAAM,CAAC,MAAM,CAAC,yBAAyB,CAAC,UAAU,CAAC,CAAC;QACpD,MAAM,CAAC,WAAW,CAAC,aAAa,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;QAC/C,KAAK,CAAC,MAAM,CAAC,UAAU,CACnB,aAAa,EAAE,4EAAmF,CAAC,CAAC;QACxG,KAAK,CAAC,MAAM,CAAC,UAAU,CACnB,aAAa,EAAE,wEAAiF,CAAC,CAAC;IACxG,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;QACzD,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;QAC/B,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;QACjC,MAAM,IAAI,GAAG,IAAI,SAAS,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC;QAErD,iBAAiB,CAAC,wBAAwB,mFACc,EAAC,cAAc,EAAE,OAAO,EAAC,CAAC,CAAC;QACnF,MAAM,QAAQ,GACV,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,aAAa,CAAC,eAAe,CAAC,EAAE,UAAU,EAAE,aAAa,CAAC,qBAAqB,CAAC,CAAC;QAC9G,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8DAA8D,EAAE,KAAK,IAAI,EAAE;QAC5E,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;QAC/B,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;QACjC,MAAM,qBAAqB,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,qBAAqB,CAAC,qBAAqB,CAAC,CAAC;QAC5F,MAAM,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC;QACrC,KAAK,CAAC,IAAI,CAAC,qBAAqB,EAAE,oBAAoB,CAAC,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;QAEjF,MAAM,IAAI,GAAG,IAAI,SAAS,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC;QACrD,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,aAAa,CAAC,uBAAuB,CAAC,IAAI,IAAI,CAAC;QAC1F,MAAM,CAAC,UAAU,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;QAC7C,MAAM,mBAAmB,GACrB,SAAS,CAAC,UAAW,CAAC,aAAa,CAAC,0BAA0B,CAAE,CAAC,UAAW,CAAC,aAAa,CACtF,yCAAyC,CAAC,CAAC;QACnD,MAAM,CAAC,UAAU,CAAC,mBAAmB,EAAE,gBAAgB,CAAC,CAAC;QACzD,mBAAmB,CAAC,OAAO,GAAG,IAAI,CAAC;QACnC,MAAM,QAAQ,GAAG,SAAS,CAAC,UAAW,CAAC,aAAa,CAAC,uBAAuB,CAAC,CAAC;QAC9E,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;QAC5C,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;QAE7C,MAAM,MAAM,GAAG,SAAS,CAAC,UAAW,CAAC,aAAa,CAAC,qCAAqC,CAAC,CAAC;QAC1F,MAAM,CAAC,UAAU,CAAC,MAAM,EAAE,gBAAgB,CAAC,CAAC;QAC5C,MAAM,CAAC,KAAK,GAAG,eAAe,CAAC;QAC/B,qBAAqB,CAAC,MAAM,CAAC,CAAC;QAC9B,MAAM,WAAW,CAAC,IAAI,EAAE,CAAC;QACzB,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,WAAW,EAAE,+CAA+C,CAAC,CAAC;IAC5F,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8BAA8B,EAAE,GAAG,EAAE;QACtC,MAAM,WAAW,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,WAAW,CAAE,CAAC;QAC/D,MAAM,gBAAgB,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,YAAY,EAAE,EAAE,2BAA2B,CAAC,CAAC;QACvF,MAAM,cAAc,GAAG,KAAK,CAAC,GAAG,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;QAEvD,SAAS,CAAC,WAAW,CAAC,WAAW,CAAC,KAAK,CACnC,MAAM,EAAE,OAAO,EAAE,eAAe,EAAE,8CAAkC,EAAE,KAAK,CAAC,CAAC;QAEjF,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,qBAAqB,CAAC,EAAC,MAAM,EAAE,eAAe,EAAE,YAAY,EAAE,SAAS,EAAC,CAAC,CAAC,CAAC;QAC1G,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,qBAAqB,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC,CAAC;IAClF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uBAAuB,EAAE,KAAK,IAAI,EAAE;QACrC,MAAM,iBAAiB,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,uBAAuB,CAAC,uBAAuB,CAAC,CAAC;QAC5F,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;QAEjC,MAAM,kBAAkB,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,CAAC;QACrF,MAAM,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;QAElC,MAAM,iBAAiB,GAAG;YACxB,UAAU,EAAE,OAAO;YACnB,IAAI,EAAE,OAAO;SACd,CAAC;QACF,MAAM,qBAAqB,GAAG;YAC5B,MAAM,EAAE,iBAAiB;YACzB,EAAE,EAAE,GAAG;YACP,UAAU,EAAE,CAAC;YACb,KAAK,EAAE,CAAC;YACR,UAAU,EAAE,KAAK;YACjB,UAAU,iEAAkD;SAC7D,CAAC;QACF,IAAI,MAAM,GAAG;YACX;gBACE,OAAO,EAAE,KAAsC;gBAC/C,cAAc,EAAE,EAAE;gBAClB,UAAU,EAAE,iBAAiB,CAAC,UAAU;gBACxC,aAAa,EAAE,iBAAiB;gBAChC,SAAS,EAAE,cAAc;aAC1B;YACD;gBACE,OAAO,EAAE,KAAsC;gBAC/C,cAAc,EAAE,EAAE;gBAClB,UAAU,EAAE,iBAAiB,CAAC,UAAU;gBACxC,aAAa,EAAE,iBAAiB;gBAChC,SAAS,EAAE,cAAc;aAC1B;SACF,CAAC;QACF,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,EAAE,0BAA0B,CAAC,CAAC,QAAQ,CAAC,EAAC,MAAM,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC,SAAS,EAAC,CAAC,CAAC;QACjH,iBAAiB,CAAC,MAAM,EAAE,CAAC;QAC3B,MAAM,iBAAiB,GAAG,IAAI,OAAO,CAAO,OAAO,CAAC,EAAE;YACpD,iBAAiB,CAAC,gBAAgB,mEAAgD,GAAG,EAAE;gBACrF,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,kBAAkB,EAAE,6BAA6B,CAAC,EAAC,UAAU,EAAE,qBAAqB,EAAC,CAAC,CAAC;QACvF,MAAM,iBAAiB,CAAC;QACxB,MAAM,GAAG,EAAE,CAAC;QAEZ,SAAS,CAAC,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,OAAO,EAAE,EAAE,EAAE,kEAA4C,EAAE,KAAK,CAAC,CAAC;QAElH,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport {dispatchFocusOutEvent} from '../../testing/DOMHelpers.js';\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\nimport {SECURITY_ORIGIN} from '../../testing/ResourceTreeHelpers.js';\nimport * as Coordinator from '../../ui/components/render_coordinator/render_coordinator.js';\n\nimport * as Resources from './application.js';\n\nconst coordinator = Coordinator.RenderCoordinator.RenderCoordinator.instance();\n\ndescribeWithMockConnection('StorageView', () => {\n  const testKey = 'test-storage-key';\n  let target: SDK.Target.Target;\n  let domStorageModel: Resources.DOMStorageModel.DOMStorageModel|null;\n  let storageKeyManager: SDK.StorageKeyManager.StorageKeyManager|null;\n\n  beforeEach(() => {\n    const tabTarget = createTarget({type: SDK.Target.Type.Tab});\n    createTarget({parentTarget: tabTarget, subtype: 'prerender'});\n    target = createTarget({parentTarget: tabTarget});\n    domStorageModel = target.model(Resources.DOMStorageModel.DOMStorageModel);\n    domStorageModel?.enable();\n    storageKeyManager = target.model(SDK.StorageKeyManager.StorageKeyManager);\n  });\n\n  it('emits correct events on clear', () => {\n    const testId = {storageKey: testKey, isLocalStorage: true} as Protocol.DOMStorage.StorageId;\n\n    assert.exists(domStorageModel);\n    assert.isEmpty(domStorageModel.storages());\n    assert.exists(storageKeyManager);\n    storageKeyManager.dispatchEventToListeners(SDK.StorageKeyManager.Events.StorageKeyAdded, testKey);\n    assert.exists(domStorageModel.storageForId(testId));\n\n    const dispatcherSpy = sinon.spy(domStorageModel, 'dispatchEventToListeners');\n    const spyClearDataForStorageKey = sinon.stub(target.storageAgent(), 'invoke_clearDataForStorageKey');\n    Resources.StorageView.StorageView.clear(target, testKey, null, [Protocol.Storage.StorageType.All], false);\n    // must be called 4 times, twice with DOMStorageRemoved for local and non-local storage and twice with DOMStorageAdded\n    assert.isTrue(spyClearDataForStorageKey.calledOnce);\n    assert.strictEqual(dispatcherSpy.callCount, 4);\n    sinon.assert.calledWith(\n        dispatcherSpy, Resources.DOMStorageModel.Events.DOMStorageRemoved as unknown as sinon.SinonMatcher);\n    sinon.assert.calledWith(\n        dispatcherSpy, Resources.DOMStorageModel.Events.DOMStorageAdded as unknown as sinon.SinonMatcher);\n  });\n\n  it('changes subtitle on MainStorageKeyChanged event', () => {\n    assert.exists(domStorageModel);\n    assert.exists(storageKeyManager);\n    const view = new Resources.StorageView.StorageView();\n\n    storageKeyManager.dispatchEventToListeners(\n        SDK.StorageKeyManager.Events.MainStorageKeyChanged, {mainStorageKey: testKey});\n    const subtitle =\n        view.element.shadowRoot?.querySelector('div.flex-auto')?.shadowRoot?.querySelector('div.report-subtitle');\n    assert.strictEqual(subtitle?.textContent, testKey);\n  });\n\n  it('shows a warning message when entering a too big custom quota', async () => {\n    assert.exists(domStorageModel);\n    assert.exists(storageKeyManager);\n    const securityOriginManager = target.model(SDK.SecurityOriginManager.SecurityOriginManager);\n    assert.exists(securityOriginManager);\n    sinon.stub(securityOriginManager, 'mainSecurityOrigin').returns(SECURITY_ORIGIN);\n\n    const view = new Resources.StorageView.StorageView();\n    const container = view.element.shadowRoot?.querySelector('.clear-storage-header') || null;\n    assert.instanceOf(container, HTMLDivElement);\n    const customQuotaCheckbox =\n        container.shadowRoot!.querySelector('.quota-override-row span')!.shadowRoot!.querySelector(\n            '[title=\"Simulate custom storage quota\"]');\n    assert.instanceOf(customQuotaCheckbox, HTMLInputElement);\n    customQuotaCheckbox.checked = true;\n    const errorDiv = container.shadowRoot!.querySelector('.quota-override-error');\n    assert.instanceOf(errorDiv, HTMLDivElement);\n    assert.strictEqual(errorDiv.textContent, '');\n\n    const editor = container.shadowRoot!.querySelector('.quota-override-notification-editor');\n    assert.instanceOf(editor, HTMLInputElement);\n    editor.value = '9999999999999';\n    dispatchFocusOutEvent(editor);\n    await coordinator.done();\n    assert.strictEqual(errorDiv.textContent, 'Number must be smaller than 9,000,000,000,000');\n  });\n\n  it('also clears cookies on clear', () => {\n    const cookieModel = target.model(SDK.CookieModel.CookieModel)!;\n    const clearByOriginSpy = sinon.spy(target.storageAgent(), 'invoke_clearDataForOrigin');\n    const cookieClearSpy = sinon.spy(cookieModel, 'clear');\n\n    Resources.StorageView.StorageView.clear(\n        target, testKey, SECURITY_ORIGIN, [Protocol.Storage.StorageType.All], false);\n\n    assert.isTrue(clearByOriginSpy.calledOnceWithExactly({origin: SECURITY_ORIGIN, storageTypes: 'cookies'}));\n    assert.isTrue(cookieClearSpy.calledOnceWithExactly(undefined, SECURITY_ORIGIN));\n  });\n\n  it('clears cache on clear', async () => {\n    const cacheStorageModel = target.model(SDK.ServiceWorkerCacheModel.ServiceWorkerCacheModel);\n    assert.exists(cacheStorageModel);\n\n    const storageBucketModel = target.model(SDK.StorageBucketsModel.StorageBucketsModel);\n    assert.exists(storageBucketModel);\n\n    const testStorageBucket = {\n      storageKey: testKey,\n      name: 'inbox',\n    };\n    const testStorageBucketInfo = {\n      bucket: testStorageBucket,\n      id: '0',\n      expiration: 0,\n      quota: 0,\n      persistent: false,\n      durability: Protocol.Storage.StorageBucketsDurability.Strict,\n    };\n    let caches = [\n      {\n        cacheId: 'id1' as Protocol.CacheStorage.CacheId,\n        securityOrigin: '',\n        storageKey: testStorageBucket.storageKey,\n        storageBucket: testStorageBucket,\n        cacheName: 'test-cache-1',\n      },\n      {\n        cacheId: 'id2' as Protocol.CacheStorage.CacheId,\n        securityOrigin: '',\n        storageKey: testStorageBucket.storageKey,\n        storageBucket: testStorageBucket,\n        cacheName: 'test-cache-2',\n      },\n    ];\n    sinon.stub(target.cacheStorageAgent(), 'invoke_requestCacheNames').resolves({caches, getError: () => undefined});\n    cacheStorageModel.enable();\n    const cacheAddedPromise = new Promise<void>(resolve => {\n      cacheStorageModel.addEventListener(SDK.ServiceWorkerCacheModel.Events.CacheAdded, () => {\n        resolve();\n      });\n    });\n    storageBucketModel?.storageBucketCreatedOrUpdated({bucketInfo: testStorageBucketInfo});\n    await cacheAddedPromise;\n    caches = [];\n\n    Resources.StorageView.StorageView.clear(target, testKey, '', [Protocol.Storage.StorageType.Cache_storage], false);\n\n    assert.isEmpty(cacheStorageModel.caches());\n  });\n});\n"]}