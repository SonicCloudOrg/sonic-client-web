{"version":3,"file":"SharedStorageModel.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/application/SharedStorageModel.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\nimport {\n  getInitializedResourceTreeModel,\n  getMainFrame,\n  MAIN_FRAME_ID,\n  navigate,\n} from '../../testing/ResourceTreeHelpers.js';\n\nimport * as Resources from './application.js';\n\nclass SharedStorageListener {\n  #model: Resources.SharedStorageModel.SharedStorageModel;\n  #storagesWatched: Array<Resources.SharedStorageModel.SharedStorageForOrigin>;\n  #accessEvents: Array<Protocol.Storage.SharedStorageAccessedEvent>;\n  #changeEvents:\n      Map<Resources.SharedStorageModel.SharedStorageForOrigin,\n          Array<Resources.SharedStorageModel.SharedStorageForOrigin.SharedStorageChangedEvent>>;\n\n  constructor(model: Resources.SharedStorageModel.SharedStorageModel) {\n    this.#model = model;\n    this.#storagesWatched = new Array<Resources.SharedStorageModel.SharedStorageForOrigin>();\n    this.#accessEvents = new Array<Protocol.Storage.SharedStorageAccessedEvent>();\n    this.#changeEvents = new Map<\n        Resources.SharedStorageModel.SharedStorageForOrigin,\n        Array<Resources.SharedStorageModel.SharedStorageForOrigin.SharedStorageChangedEvent>>();\n\n    this.#model.addEventListener(\n        Resources.SharedStorageModel.Events.SharedStorageAdded, this.#sharedStorageAdded, this);\n    this.#model.addEventListener(\n        Resources.SharedStorageModel.Events.SharedStorageRemoved, this.#sharedStorageRemoved, this);\n    this.#model.addEventListener(\n        Resources.SharedStorageModel.Events.SharedStorageAccess, this.#sharedStorageAccess, this);\n  }\n\n  dispose(): void {\n    this.#model.removeEventListener(\n        Resources.SharedStorageModel.Events.SharedStorageAdded, this.#sharedStorageAdded, this);\n    this.#model.removeEventListener(\n        Resources.SharedStorageModel.Events.SharedStorageRemoved, this.#sharedStorageRemoved, this);\n    this.#model.removeEventListener(\n        Resources.SharedStorageModel.Events.SharedStorageAccess, this.#sharedStorageAccess, this);\n\n    for (const storage of this.#storagesWatched) {\n      storage.removeEventListener(\n          Resources.SharedStorageModel.SharedStorageForOrigin.Events.SharedStorageChanged,\n          this.#sharedStorageChanged.bind(this, storage), this);\n    }\n  }\n\n  get accessEvents(): Array<Protocol.Storage.SharedStorageAccessedEvent> {\n    return this.#accessEvents;\n  }\n\n  changeEventsForStorage(storage: Resources.SharedStorageModel.SharedStorageForOrigin):\n      Array<Resources.SharedStorageModel.SharedStorageForOrigin.SharedStorageChangedEvent>|null {\n    return this.#changeEvents.get(storage) || null;\n  }\n\n  changeEventsEmpty(): boolean {\n    return this.#changeEvents.size === 0;\n  }\n\n  #sharedStorageAdded(event: Common.EventTarget.EventTargetEvent<Resources.SharedStorageModel.SharedStorageForOrigin>):\n      void {\n    const storage = (event.data as Resources.SharedStorageModel.SharedStorageForOrigin);\n    this.#storagesWatched.push(storage);\n    storage.addEventListener(\n        Resources.SharedStorageModel.SharedStorageForOrigin.Events.SharedStorageChanged,\n        this.#sharedStorageChanged.bind(this, storage), this);\n  }\n\n  #sharedStorageRemoved(\n      event: Common.EventTarget.EventTargetEvent<Resources.SharedStorageModel.SharedStorageForOrigin>): void {\n    const storage = (event.data as Resources.SharedStorageModel.SharedStorageForOrigin);\n    storage.removeEventListener(\n        Resources.SharedStorageModel.SharedStorageForOrigin.Events.SharedStorageChanged,\n        this.#sharedStorageChanged.bind(this, storage), this);\n    const index = this.#storagesWatched.indexOf(storage);\n    if (index === -1) {\n      return;\n    }\n    this.#storagesWatched = this.#storagesWatched.splice(index, 1);\n  }\n\n  #sharedStorageAccess(event: Common.EventTarget.EventTargetEvent<Protocol.Storage.SharedStorageAccessedEvent>): void {\n    this.#accessEvents.push(event.data as Protocol.Storage.SharedStorageAccessedEvent);\n  }\n\n  #sharedStorageChanged(\n      storage: Resources.SharedStorageModel.SharedStorageForOrigin,\n      event: Common.EventTarget\n          .EventTargetEvent<Resources.SharedStorageModel.SharedStorageForOrigin.SharedStorageChangedEvent>): void {\n    if (!this.#changeEvents.has(storage)) {\n      this.#changeEvents.set(\n          storage, new Array<Resources.SharedStorageModel.SharedStorageForOrigin.SharedStorageChangedEvent>());\n    }\n    this.#changeEvents.get(storage)?.push(\n        event.data as Resources.SharedStorageModel.SharedStorageForOrigin.SharedStorageChangedEvent);\n  }\n\n  async waitForStoragesAdded(expectedCount: number): Promise<void> {\n    while (this.#storagesWatched.length < expectedCount) {\n      await this.#model.once(Resources.SharedStorageModel.Events.SharedStorageAdded);\n    }\n  }\n}\n\ndescribeWithMockConnection('SharedStorageModel', () => {\n  let sharedStorageModel: Resources.SharedStorageModel.SharedStorageModel;\n  let target: SDK.Target.Target;\n  let listener: SharedStorageListener;\n\n  const TEST_ORIGIN_A = 'http://a.test';\n  const TEST_ORIGIN_B = 'http://b.test';\n  const TEST_ORIGIN_C = 'http://c.test';\n\n  const METADATA = {\n    creationTime: 100 as Protocol.Network.TimeSinceEpoch,\n    length: 3,\n    remainingBudget: 2.5,\n    bytesUsed: 30,\n  } as unknown as Protocol.Storage.SharedStorageMetadata;\n\n  const ENTRIES = [\n    {\n      key: 'key1',\n      value: 'a',\n    } as unknown as Protocol.Storage.SharedStorageEntry,\n    {\n      key: 'key2',\n      value: 'b',\n    } as unknown as Protocol.Storage.SharedStorageEntry,\n    {\n      key: 'key3',\n      value: 'c',\n    } as unknown as Protocol.Storage.SharedStorageEntry,\n  ];\n\n  const EVENTS = [\n    {\n      accessTime: 0,\n      type: Protocol.Storage.SharedStorageAccessType.DocumentAppend,\n      mainFrameId: MAIN_FRAME_ID,\n      ownerOrigin: TEST_ORIGIN_A,\n      params: {key: 'key0', value: 'value0'} as Protocol.Storage.SharedStorageAccessParams,\n    },\n    {\n      accessTime: 10,\n      type: Protocol.Storage.SharedStorageAccessType.WorkletGet,\n      mainFrameId: MAIN_FRAME_ID,\n      ownerOrigin: TEST_ORIGIN_A,\n      params: {key: 'key0'} as Protocol.Storage.SharedStorageAccessParams,\n    },\n    {\n      accessTime: 15,\n      type: Protocol.Storage.SharedStorageAccessType.WorkletLength,\n      mainFrameId: MAIN_FRAME_ID,\n      ownerOrigin: TEST_ORIGIN_B,\n      params: {} as Protocol.Storage.SharedStorageAccessParams,\n    },\n    {\n      accessTime: 20,\n      type: Protocol.Storage.SharedStorageAccessType.DocumentClear,\n      mainFrameId: MAIN_FRAME_ID,\n      ownerOrigin: TEST_ORIGIN_B,\n      params: {} as Protocol.Storage.SharedStorageAccessParams,\n    },\n    {\n      accessTime: 100,\n      type: Protocol.Storage.SharedStorageAccessType.WorkletSet,\n      mainFrameId: MAIN_FRAME_ID,\n      ownerOrigin: TEST_ORIGIN_C,\n      params: {key: 'key0', value: 'value1', ignoreIfPresent: true} as Protocol.Storage.SharedStorageAccessParams,\n    },\n    {\n      accessTime: 150,\n      type: Protocol.Storage.SharedStorageAccessType.WorkletRemainingBudget,\n      mainFrameId: MAIN_FRAME_ID,\n      ownerOrigin: TEST_ORIGIN_C,\n      params: {} as Protocol.Storage.SharedStorageAccessParams,\n    },\n  ];\n\n  beforeEach(async () => {\n    target = createTarget();\n    await getInitializedResourceTreeModel(target);\n    sharedStorageModel = target.model(Resources.SharedStorageModel.SharedStorageModel) as\n        Resources.SharedStorageModel.SharedStorageModel;\n    listener = new SharedStorageListener(sharedStorageModel);\n  });\n\n  it('invokes storageAgent via SharedStorageForOrigin', async () => {\n    const getMetadataSpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_getSharedStorageMetadata').resolves({\n      metadata: METADATA,\n      getError: () => undefined,\n    });\n    const getEntriesSpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_getSharedStorageEntries').resolves({\n      entries: ENTRIES,\n      getError: () => undefined,\n    });\n    const setEntrySpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_setSharedStorageEntry').resolves({\n      getError: () => undefined,\n    });\n    const deleteEntrySpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_deleteSharedStorageEntry').resolves({\n      getError: () => undefined,\n    });\n    const clearSpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_clearSharedStorageEntries').resolves({\n      getError: () => undefined,\n    });\n\n    const sharedStorage = new Resources.SharedStorageModel.SharedStorageForOrigin(sharedStorageModel, TEST_ORIGIN_A);\n    assert.strictEqual(sharedStorage.securityOrigin, TEST_ORIGIN_A);\n\n    const metadata = await sharedStorage.getMetadata();\n    assert.isTrue(getMetadataSpy.calledOnceWithExactly({ownerOrigin: TEST_ORIGIN_A}));\n    assert.deepEqual(METADATA, metadata);\n\n    const entries = await sharedStorage.getEntries();\n    assert.isTrue(getEntriesSpy.calledOnceWithExactly({ownerOrigin: TEST_ORIGIN_A}));\n    assert.deepEqual(ENTRIES, entries);\n\n    await sharedStorage.setEntry('new-key1', 'new-value1', true);\n    assert.isTrue(setEntrySpy.calledOnceWithExactly(\n        {ownerOrigin: TEST_ORIGIN_A, key: 'new-key1', value: 'new-value1', ignoreIfPresent: true}));\n\n    await sharedStorage.deleteEntry('new-key1');\n    assert.isTrue(deleteEntrySpy.calledOnceWithExactly({ownerOrigin: TEST_ORIGIN_A, key: 'new-key1'}));\n\n    await sharedStorage.clear();\n    assert.isTrue(clearSpy.calledOnceWithExactly({ownerOrigin: TEST_ORIGIN_A}));\n  });\n\n  it('adds/removes SharedStorageForOrigin on SecurityOrigin events', async () => {\n    const setTrackingSpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_setSharedStorageTracking').resolves({\n      getError: () => undefined,\n    });\n\n    await sharedStorageModel.enable();\n    assert.isTrue(setTrackingSpy.calledOnceWithExactly({enable: true}));\n\n    assert.isEmpty(sharedStorageModel.storages());\n\n    const manager = target.model(SDK.SecurityOriginManager.SecurityOriginManager);\n    assert.exists(manager);\n\n    const addedPromise = listener.waitForStoragesAdded(1);\n\n    manager.dispatchEventToListeners(SDK.SecurityOriginManager.Events.SecurityOriginAdded, TEST_ORIGIN_A);\n    await addedPromise;\n\n    assert.exists(sharedStorageModel.storageForOrigin(TEST_ORIGIN_A));\n\n    manager.dispatchEventToListeners(SDK.SecurityOriginManager.Events.SecurityOriginRemoved, TEST_ORIGIN_A);\n    assert.isEmpty(sharedStorageModel.storages());\n  });\n\n  it('does not add SharedStorageForOrigin if origin invalid', async () => {\n    const setTrackingSpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_setSharedStorageTracking').resolves({\n      getError: () => undefined,\n    });\n\n    await sharedStorageModel.enable();\n    assert.isTrue(setTrackingSpy.calledOnceWithExactly({enable: true}));\n\n    assert.isEmpty(sharedStorageModel.storages());\n\n    const manager = target.model(SDK.SecurityOriginManager.SecurityOriginManager);\n    assert.exists(manager);\n\n    manager.dispatchEventToListeners(SDK.SecurityOriginManager.Events.SecurityOriginAdded, 'invalid');\n    assert.isEmpty(sharedStorageModel.storages());\n  });\n\n  it('does not add SharedStorageForOrigin if origin already added', async () => {\n    const setTrackingSpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_setSharedStorageTracking').resolves({\n      getError: () => undefined,\n    });\n\n    await sharedStorageModel.enable();\n    assert.isTrue(setTrackingSpy.calledOnceWithExactly({enable: true}));\n\n    assert.isEmpty(sharedStorageModel.storages());\n\n    const addedPromise = listener.waitForStoragesAdded(1);\n\n    navigate(getMainFrame(target), {url: TEST_ORIGIN_A});\n    await addedPromise;\n\n    assert.exists(sharedStorageModel.storageForOrigin(TEST_ORIGIN_A));\n    assert.strictEqual(1, sharedStorageModel.numStoragesForTesting());\n\n    navigate(getMainFrame(target), {url: TEST_ORIGIN_A});\n    assert.strictEqual(1, sharedStorageModel.numStoragesForTesting());\n  });\n\n  it('adds/removes SecurityOrigins when model is enabled/disabled', async () => {\n    const setTrackingSpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_setSharedStorageTracking').resolves({\n      getError: () => undefined,\n    });\n\n    const manager = target.model(SDK.SecurityOriginManager.SecurityOriginManager);\n    assert.exists(manager);\n\n    const originSet = new Set([TEST_ORIGIN_A, TEST_ORIGIN_B, TEST_ORIGIN_C]);\n    manager.updateSecurityOrigins(originSet);\n    assert.strictEqual(3, manager.securityOrigins().length);\n\n    const addedPromise = listener.waitForStoragesAdded(3);\n\n    await sharedStorageModel.enable();\n    assert.isTrue(setTrackingSpy.calledOnceWithExactly({enable: true}));\n\n    await addedPromise;\n    assert.strictEqual(3, sharedStorageModel.numStoragesForTesting());\n\n    assert.exists(sharedStorageModel.storageForOrigin(TEST_ORIGIN_A));\n    assert.exists(sharedStorageModel.storageForOrigin(TEST_ORIGIN_B));\n    assert.exists(sharedStorageModel.storageForOrigin(TEST_ORIGIN_C));\n\n    sharedStorageModel.disable();\n    assert.isEmpty(sharedStorageModel.storages());\n  });\n\n  it('dispatches SharedStorageAccess events to listeners', async () => {\n    const setTrackingSpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_setSharedStorageTracking').resolves({\n      getError: () => undefined,\n    });\n\n    const manager = target.model(SDK.SecurityOriginManager.SecurityOriginManager);\n    assert.exists(manager);\n\n    await sharedStorageModel.enable();\n    assert.isTrue(setTrackingSpy.calledOnceWithExactly({enable: true}));\n\n    for (const event of EVENTS) {\n      sharedStorageModel.sharedStorageAccessed(event);\n    }\n\n    assert.deepEqual(EVENTS, listener.accessEvents);\n  });\n\n  it('dispatches SharedStorageChanged events to listeners', async () => {\n    const setTrackingSpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_setSharedStorageTracking').resolves({\n      getError: () => undefined,\n    });\n\n    const manager = target.model(SDK.SecurityOriginManager.SecurityOriginManager);\n    assert.exists(manager);\n\n    await sharedStorageModel.enable();\n    assert.isTrue(setTrackingSpy.calledOnceWithExactly({enable: true}));\n\n    // For change events whose origins aren't yet in the model, the origin is added\n    // to the model, with the `SharedStorageAdded` event being subsequently dispatched\n    // instead of the `SharedStorageChanged` event.\n    const addedPromise = listener.waitForStoragesAdded(3);\n    for (const event of EVENTS) {\n      sharedStorageModel.sharedStorageAccessed(event);\n    }\n    await addedPromise;\n\n    assert.strictEqual(4, sharedStorageModel.numStoragesForTesting());\n    assert.deepEqual(EVENTS, listener.accessEvents);\n    assert.isTrue(listener.changeEventsEmpty());\n\n    // All events will be dispatched as `SharedStorageAccess` events, but only change\n    // events for existing origins will be forwarded as `SharedStorageChanged` events.\n    for (const event of EVENTS) {\n      sharedStorageModel.sharedStorageAccessed(event);\n    }\n\n    assert.deepEqual(EVENTS.concat(EVENTS), listener.accessEvents);\n\n    const storageA = sharedStorageModel.storageForOrigin(TEST_ORIGIN_A);\n    assert.exists(storageA);\n    assert.deepEqual(listener.changeEventsForStorage(storageA), [\n      {\n        accessTime: 0,\n        type: Protocol.Storage.SharedStorageAccessType.DocumentAppend,\n        mainFrameId: MAIN_FRAME_ID,\n        params: {key: 'key0', value: 'value0'} as Protocol.Storage.SharedStorageAccessParams,\n      },\n    ]);\n\n    const storageB = sharedStorageModel.storageForOrigin(TEST_ORIGIN_B);\n    assert.exists(storageB);\n    assert.deepEqual(listener.changeEventsForStorage(storageB), [\n      {\n        accessTime: 20,\n        type: Protocol.Storage.SharedStorageAccessType.DocumentClear,\n        mainFrameId: MAIN_FRAME_ID,\n        params: {} as Protocol.Storage.SharedStorageAccessParams,\n      },\n    ]);\n\n    const storageC = sharedStorageModel.storageForOrigin(TEST_ORIGIN_C);\n    assert.exists(storageC);\n    assert.deepEqual(listener.changeEventsForStorage(storageC), [\n      {\n        accessTime: 100,\n        type: Protocol.Storage.SharedStorageAccessType.WorkletSet,\n        mainFrameId: MAIN_FRAME_ID,\n        params: {key: 'key0', value: 'value1', ignoreIfPresent: true} as Protocol.Storage.SharedStorageAccessParams,\n      },\n    ]);\n  });\n});\n"]}