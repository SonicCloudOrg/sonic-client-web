{"version":3,"file":"BackgroundServiceView.js","sourceRoot":"","sources":["../../../../../../front_end/panels/application/BackgroundServiceView.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\n// eslint-disable-next-line rulesdir/es_modules_import\nimport emptyWidgetStyles from '../../ui/legacy/emptyWidget.css.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport * as VisualLogging from '../../ui/visual_logging/visual_logging.js';\n\nimport {type BackgroundServiceModel, Events} from './BackgroundServiceModel.js';\nimport backgroundServiceViewStyles from './backgroundServiceView.css.js';\n\nconst UIStrings = {\n  /**\n   *@description Text in Background Service View of the Application panel\n   */\n  backgroundFetch: 'Background fetch',\n  /**\n   *@description Text in Background Service View of the Application panel\n   */\n  backgroundSync: 'Background sync',\n  /**\n   *@description Text in Background Service View of the Application panel\n   */\n  pushMessaging: 'Push messaging',\n  /**\n   *@description Text in Background Service View of the Application panel\n   */\n  notifications: 'Notifications',\n  /**\n   *@description Text in Background Service View of the Application panel\n   */\n  paymentHandler: 'Payment handler',\n  /**\n   *@description Text in the Periodic Background Service View of the Application panel\n   */\n  periodicBackgroundSync: 'Periodic background sync',\n  /**\n   *@description Text to clear content\n   */\n  clear: 'Clear',\n  /**\n   *@description Tooltip text that appears when hovering over the largeicon download button in the Background Service View of the Application panel\n   */\n  saveEvents: 'Save events',\n  /**\n   *@description Text in Background Service View of the Application panel\n   */\n  showEventsFromOtherDomains: 'Show events from other domains',\n  /**\n   *@description Text of a checkbox to show events for other dtorage keys\n   */\n  showEventsForOtherStorageKeys: 'Show events from other storage partitions',\n  /**\n   *@description Title of an action under the Background Services category that can be invoked through the Command Menu\n   */\n  stopRecordingEvents: 'Stop recording events',\n  /**\n   *@description Title of an action under the Background Services category that can be invoked through the Command Menu\n   */\n  startRecordingEvents: 'Start recording events',\n  /**\n   *@description Text for timestamps of items\n   */\n  timestamp: 'Timestamp',\n  /**\n   *@description Text that refers to some events\n   */\n  event: 'Event',\n  /**\n   *@description Text for the origin of something\n   */\n  origin: 'Origin',\n  /**\n   *@description Text for the storage key of something\n   */\n  storageKey: 'Storage Key',\n  /**\n   *@description Text in Background Service View of the Application panel. The Scope is a URL associated with the Service Worker, which limits which pages/sites the Service Worker operates on.\n   */\n  swScope: 'Service Worker Scope',\n  /**\n   *@description Text in Background Service View of the Application panel\n   */\n  instanceId: 'Instance ID',\n  /**\n   *@description Text in Application Panel Sidebar of the Application panel\n   */\n  backgroundServices: 'Background services',\n  /**\n   *@description Text that is usually a hyperlink to more documentation\n   */\n  learnMore: 'Learn more',\n  /**\n   *@description Text in Background Service View of the Application panel\n   */\n  selectAnEntryToViewMetadata: 'Select an entry to view metadata',\n  /**\n   *@description Text in Background Service View of the Application panel\n   *@example {Background Fetch} PH1\n   */\n  recordingSActivity: 'Recording {PH1} activity...',\n  /**\n   *@description Inform users that DevTools are recording/waiting for events in the Periodic Background Sync tool of the Application panel\n   *@example {Background Fetch} PH1\n   */\n  devtoolsWillRecordAllSActivity: 'DevTools will record all {PH1} activity for up to 3 days, even when closed.',\n  /**\n   *@description Text in Background Service View of the Application panel\n   *@example {record} PH1\n   *@example {Ctrl + R} PH2\n   */\n  clickTheRecordButtonSOrHitSTo: 'Click the record button {PH1} or hit {PH2} to start recording.',\n  /**\n   *@description Text to show an item is empty\n   */\n  empty: 'empty',\n  /**\n   *@description Text in Background Service View of the Application panel\n   */\n  noMetadataForThisEvent: 'No metadata for this event',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/application/BackgroundServiceView.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class BackgroundServiceView extends UI.Widget.VBox {\n  private readonly serviceName: Protocol.BackgroundService.ServiceName;\n  private readonly model: BackgroundServiceModel;\n  private readonly serviceWorkerManager: SDK.ServiceWorkerManager.ServiceWorkerManager|null;\n  private readonly securityOriginManager: SDK.SecurityOriginManager.SecurityOriginManager;\n  private readonly storageKeyManager: SDK.StorageKeyManager.StorageKeyManager;\n  private recordAction: UI.ActionRegistration.Action;\n  private recordButton!: UI.Toolbar.ToolbarToggle;\n  private originCheckbox!: UI.Toolbar.ToolbarCheckbox;\n  private storageKeyCheckbox!: UI.Toolbar.ToolbarCheckbox;\n  private saveButton!: UI.Toolbar.ToolbarButton;\n  private readonly toolbar: UI.Toolbar.Toolbar;\n  private readonly splitWidget: UI.SplitWidget.SplitWidget;\n  private readonly dataGrid: DataGrid.DataGrid.DataGridImpl<EventData>;\n  private readonly previewPanel: UI.Widget.VBox;\n  private selectedEventNode: EventDataNode|null;\n  private preview: UI.Widget.Widget|null;\n\n  static getUIString(serviceName: string): string {\n    switch (serviceName) {\n      case Protocol.BackgroundService.ServiceName.BackgroundFetch:\n        return i18nString(UIStrings.backgroundFetch);\n      case Protocol.BackgroundService.ServiceName.BackgroundSync:\n        return i18nString(UIStrings.backgroundSync);\n      case Protocol.BackgroundService.ServiceName.PushMessaging:\n        return i18nString(UIStrings.pushMessaging);\n      case Protocol.BackgroundService.ServiceName.Notifications:\n        return i18nString(UIStrings.notifications);\n      case Protocol.BackgroundService.ServiceName.PaymentHandler:\n        return i18nString(UIStrings.paymentHandler);\n      case Protocol.BackgroundService.ServiceName.PeriodicBackgroundSync:\n        return i18nString(UIStrings.periodicBackgroundSync);\n      default:\n        return '';\n    }\n  }\n\n  constructor(serviceName: Protocol.BackgroundService.ServiceName, model: BackgroundServiceModel) {\n    super(true);\n\n    this.serviceName = serviceName;\n    const kebabName = Platform.StringUtilities.toKebabCase(serviceName);\n    this.element.setAttribute('jslog', `${VisualLogging.pane().context(kebabName)}`);\n\n    this.model = model;\n    this.model.addEventListener(Events.RecordingStateChanged, this.onRecordingStateChanged, this);\n    this.model.addEventListener(Events.BackgroundServiceEventReceived, this.onEventReceived, this);\n    this.model.enable(this.serviceName);\n\n    this.serviceWorkerManager = this.model.target().model(SDK.ServiceWorkerManager.ServiceWorkerManager);\n\n    this.securityOriginManager = this.model.target().model(SDK.SecurityOriginManager.SecurityOriginManager) as\n        SDK.SecurityOriginManager.SecurityOriginManager;\n    if (!this.securityOriginManager) {\n      throw new Error('SecurityOriginManager instance is missing');\n    }\n    this.securityOriginManager.addEventListener(\n        SDK.SecurityOriginManager.Events.MainSecurityOriginChanged, () => this.onOriginChanged());\n\n    this.storageKeyManager =\n        this.model.target().model(SDK.StorageKeyManager.StorageKeyManager) as SDK.StorageKeyManager.StorageKeyManager;\n    if (!this.storageKeyManager) {\n      throw new Error('StorageKeyManager instance is missing');\n    }\n    this.storageKeyManager.addEventListener(\n        SDK.StorageKeyManager.Events.MainStorageKeyChanged, () => this.onStorageKeyChanged());\n\n    this.recordAction = UI.ActionRegistry.ActionRegistry.instance().getAction('background-service.toggle-recording');\n\n    this.toolbar = new UI.Toolbar.Toolbar('background-service-toolbar', this.contentElement);\n    this.toolbar.element.setAttribute('jslog', `${VisualLogging.toolbar()}`);\n    void this.setupToolbar();\n\n    /**\n     * This will contain the DataGrid for displaying events, and a panel at the bottom for showing\n     * extra metadata related to the selected event.\n     */\n    this.splitWidget = new UI.SplitWidget.SplitWidget(/* isVertical= */ false, /* secondIsSidebar= */ true);\n    this.splitWidget.show(this.contentElement);\n\n    this.dataGrid = this.createDataGrid();\n\n    this.previewPanel = new UI.Widget.VBox();\n    this.previewPanel.element.setAttribute('jslog', `${VisualLogging.pane('preview').track({resize: true})}`);\n\n    this.selectedEventNode = null;\n\n    this.preview = null;\n\n    this.splitWidget.setMainWidget(this.dataGrid.asWidget());\n    this.splitWidget.setSidebarWidget(this.previewPanel);\n\n    this.showPreview(null);\n  }\n\n  getDataGrid(): DataGrid.DataGrid.DataGridImpl<EventData> {\n    return this.dataGrid;\n  }\n\n  /**\n   * Creates the toolbar UI element.\n   */\n  private async setupToolbar(): Promise<void> {\n    this.toolbar.makeWrappable(true);\n    this.recordButton = (UI.Toolbar.Toolbar.createActionButton(this.recordAction) as UI.Toolbar.ToolbarToggle);\n    this.toolbar.appendToolbarItem(this.recordButton);\n\n    const clearButton =\n        new UI.Toolbar.ToolbarButton(i18nString(UIStrings.clear), 'clear', undefined, 'background-service.clear');\n    clearButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, () => this.clearEvents());\n    this.toolbar.appendToolbarItem(clearButton);\n\n    this.toolbar.appendSeparator();\n\n    this.saveButton = new UI.Toolbar.ToolbarButton(\n        i18nString(UIStrings.saveEvents), 'download', undefined, 'background-service.save-events');\n    this.saveButton.addEventListener(UI.Toolbar.ToolbarButton.Events.Click, _event => {\n      void this.saveToFile();\n    });\n    this.saveButton.setEnabled(false);\n    this.toolbar.appendToolbarItem(this.saveButton);\n\n    this.toolbar.appendSeparator();\n\n    this.originCheckbox = new UI.Toolbar.ToolbarCheckbox(\n        i18nString(UIStrings.showEventsFromOtherDomains), i18nString(UIStrings.showEventsFromOtherDomains),\n        () => this.refreshView(), 'show-events-from-other-domains');\n    this.toolbar.appendToolbarItem(this.originCheckbox);\n\n    this.storageKeyCheckbox = new UI.Toolbar.ToolbarCheckbox(\n        i18nString(UIStrings.showEventsForOtherStorageKeys), i18nString(UIStrings.showEventsForOtherStorageKeys),\n        () => this.refreshView(), 'show-events-from-other-partitions');\n    this.toolbar.appendToolbarItem(this.storageKeyCheckbox);\n  }\n\n  /**\n   * Displays all available events in the grid.\n   */\n  private refreshView(): void {\n    this.clearView();\n    const events = this.model.getEvents(this.serviceName).filter(event => this.acceptEvent(event));\n    for (const event of events) {\n      this.addEvent(event);\n    }\n  }\n\n  /**\n   * Clears the grid and panel.\n   */\n  private clearView(): void {\n    this.selectedEventNode = null;\n    this.dataGrid.rootNode().removeChildren();\n    this.saveButton.setEnabled(false);\n    this.showPreview(null);\n  }\n\n  /**\n   * Called when the `Toggle Record` button is clicked.\n   */\n  toggleRecording(): void {\n    this.model.setRecording(!this.recordButton.toggled(), this.serviceName);\n  }\n\n  /**\n   * Called when the `Clear` button is clicked.\n   */\n  private clearEvents(): void {\n    this.model.clearEvents(this.serviceName);\n    this.clearView();\n  }\n\n  private onRecordingStateChanged({data: state}: Common.EventTarget.EventTargetEvent<RecordingState>): void {\n    if (state.serviceName !== this.serviceName) {\n      return;\n    }\n\n    if (state.isRecording === this.recordButton.toggled()) {\n      return;\n    }\n\n    this.recordButton.setToggled(state.isRecording);\n    this.updateRecordButtonTooltip();\n    this.showPreview(this.selectedEventNode);\n  }\n\n  private updateRecordButtonTooltip(): void {\n    const buttonTooltip = this.recordButton.toggled() ? i18nString(UIStrings.stopRecordingEvents) :\n                                                        i18nString(UIStrings.startRecordingEvents);\n    this.recordButton.setTitle(buttonTooltip, 'background-service.toggle-recording');\n  }\n\n  private onEventReceived({\n    data: serviceEvent,\n  }: Common.EventTarget.EventTargetEvent<Protocol.BackgroundService.BackgroundServiceEvent>): void {\n    if (!this.acceptEvent(serviceEvent)) {\n      return;\n    }\n    this.addEvent(serviceEvent);\n  }\n\n  private onOriginChanged(): void {\n    // No need to refresh the view if we are already showing all events.\n    if (this.originCheckbox.checked()) {\n      return;\n    }\n    this.refreshView();\n  }\n\n  private onStorageKeyChanged(): void {\n    if (this.storageKeyCheckbox.checked()) {\n      return;\n    }\n    this.refreshView();\n  }\n\n  private addEvent(serviceEvent: Protocol.BackgroundService.BackgroundServiceEvent): void {\n    const data = this.createEventData(serviceEvent);\n    const dataNode = new EventDataNode(data, serviceEvent.eventMetadata);\n    this.dataGrid.rootNode().appendChild(dataNode);\n\n    if (this.dataGrid.rootNode().children.length === 1) {\n      this.saveButton.setEnabled(true);\n      this.showPreview(this.selectedEventNode);\n    }\n  }\n\n  private createDataGrid(): DataGrid.DataGrid.DataGridImpl<EventData> {\n    const columns = ([\n      {id: 'id', title: '#', weight: 1},\n      {id: 'timestamp', title: i18nString(UIStrings.timestamp), weight: 7},\n      {id: 'event-name', title: i18nString(UIStrings.event), weight: 8},\n      {id: 'origin', title: i18nString(UIStrings.origin), weight: 8},\n      {id: 'storage-key', title: i18nString(UIStrings.storageKey), weight: 8},\n      {id: 'sw-scope', title: i18nString(UIStrings.swScope), weight: 4},\n      {id: 'instance-id', title: i18nString(UIStrings.instanceId), weight: 8},\n    ] as DataGrid.DataGrid.ColumnDescriptor[]);\n    const dataGrid = new DataGrid.DataGrid.DataGridImpl({\n      displayName: i18nString(UIStrings.backgroundServices),\n      columns,\n      editCallback: undefined,\n      refreshCallback: undefined,\n      deleteCallback: undefined,\n    });\n    dataGrid.setStriped(true);\n\n    dataGrid.addEventListener(\n        DataGrid.DataGrid.Events.SelectedNode, event => this.showPreview((event.data as EventDataNode)));\n\n    return dataGrid;\n  }\n\n  /**\n   * Creates the data object to pass to the DataGrid Node.\n   */\n  private createEventData(serviceEvent: Protocol.BackgroundService.BackgroundServiceEvent): EventData {\n    let swScope = '';\n\n    // Try to get the scope of the Service Worker registration to be more user-friendly.\n    const registration = this.serviceWorkerManager ?\n        this.serviceWorkerManager.registrations().get(serviceEvent.serviceWorkerRegistrationId) :\n        undefined;\n    if (registration) {\n      swScope = registration.scopeURL.substr(registration.securityOrigin.length);\n    }\n\n    return {\n      id: this.dataGrid.rootNode().children.length + 1,\n      timestamp: UI.UIUtils.formatTimestamp(serviceEvent.timestamp * 1000, /* full= */ true),\n      origin: serviceEvent.origin,\n      'storage-key': serviceEvent.storageKey,\n      'sw-scope': swScope,\n      'event-name': serviceEvent.eventName,\n      'instance-id': serviceEvent.instanceId,\n    };\n  }\n\n  /**\n   * Filtration function to know whether event should be shown or not.\n   */\n  private acceptEvent(event: Protocol.BackgroundService.BackgroundServiceEvent): boolean {\n    if (event.service !== this.serviceName) {\n      return false;\n    }\n\n    if (this.originCheckbox.checked() || this.storageKeyCheckbox.checked()) {\n      return true;\n    }\n\n    // Trim the trailing '/'.\n    const origin = event.origin.substr(0, event.origin.length - 1);\n    const storageKey = event.storageKey;\n\n    return this.securityOriginManager.securityOrigins().includes(origin) ||\n        this.storageKeyManager.storageKeys().includes(storageKey);\n  }\n\n  private createLearnMoreLink(): Element {\n    let url = 'https://developer.chrome.com/docs/devtools/javascript/background-services/?utm_source=devtools';\n\n    switch (this.serviceName) {\n      case Protocol.BackgroundService.ServiceName.BackgroundFetch:\n        url += '#fetch';\n        break;\n      case Protocol.BackgroundService.ServiceName.BackgroundSync:\n        url += '#sync';\n        break;\n      case Protocol.BackgroundService.ServiceName.PushMessaging:\n        url += '#push';\n        break;\n      case Protocol.BackgroundService.ServiceName.Notifications:\n        url += '#notifications';\n        break;\n      default:\n        break;\n    }\n\n    return UI.XLink.XLink.create(url, i18nString(UIStrings.learnMore), undefined, undefined, 'learn-more');\n  }\n\n  private showPreview(dataNode: EventDataNode|null): void {\n    if (this.selectedEventNode && this.selectedEventNode === dataNode) {\n      return;\n    }\n\n    this.selectedEventNode = dataNode;\n\n    if (this.preview) {\n      this.preview.detach();\n    }\n\n    if (this.selectedEventNode) {\n      this.preview = this.selectedEventNode.createPreview();\n      this.preview.show(this.previewPanel.contentElement);\n      return;\n    }\n\n    this.preview = new UI.Widget.VBox();\n    this.preview.contentElement.classList.add('background-service-preview', 'fill');\n    const centered = this.preview.contentElement.createChild('div');\n\n    if (this.dataGrid.rootNode().children.length) {\n      // Inform users that grid entries are clickable.\n      centered.createChild('p').textContent = i18nString(UIStrings.selectAnEntryToViewMetadata);\n    } else if (this.recordButton.toggled()) {\n      // Inform users that we are recording/waiting for events.\n      const featureName = BackgroundServiceView.getUIString(this.serviceName).toLowerCase();\n      centered.createChild('p').textContent = i18nString(UIStrings.recordingSActivity, {PH1: featureName});\n      centered.createChild('p').textContent = i18nString(UIStrings.devtoolsWillRecordAllSActivity, {PH1: featureName});\n    } else {\n      const landingRecordButton = UI.Toolbar.Toolbar.createActionButton(this.recordAction);\n\n      const recordKey = document.createElement('b');\n      recordKey.classList.add('background-service-shortcut');\n      recordKey.textContent = UI.ShortcutRegistry.ShortcutRegistry.instance()\n                                  .shortcutsForAction('background-service.toggle-recording')[0]\n                                  .title();\n\n      const inlineButton = UI.UIUtils.createInlineButton(landingRecordButton);\n      inlineButton.classList.add('background-service-record-inline-button');\n      centered.createChild('p').appendChild(i18n.i18n.getFormatLocalizedString(\n          str_, UIStrings.clickTheRecordButtonSOrHitSTo, {PH1: inlineButton, PH2: recordKey}));\n\n      centered.appendChild(this.createLearnMoreLink());\n    }\n\n    this.preview.show(this.previewPanel.contentElement);\n  }\n\n  /**\n   * Saves all currently displayed events in a file (JSON format).\n   */\n  private async saveToFile(): Promise<void> {\n    const fileName = `${this.serviceName}-${Platform.DateUtilities.toISO8601Compact(new Date())}.json` as\n        Platform.DevToolsPath.RawPathString;\n    const stream = new Bindings.FileUtils.FileOutputStream();\n\n    const accepted = await stream.open(fileName);\n    if (!accepted) {\n      return;\n    }\n\n    const events = this.model.getEvents(this.serviceName).filter(event => this.acceptEvent(event));\n    await stream.write(JSON.stringify(events, undefined, 2));\n    void stream.close();\n  }\n  override wasShown(): void {\n    super.wasShown();\n    this.registerCSSFiles([emptyWidgetStyles, backgroundServiceViewStyles]);\n  }\n}\n\nexport class EventDataNode extends DataGrid.DataGrid.DataGridNode<EventData> {\n  private readonly eventMetadata: Protocol.BackgroundService.EventMetadata[];\n\n  constructor(data: EventData, eventMetadata: Protocol.BackgroundService.EventMetadata[]) {\n    super(data);\n\n    this.eventMetadata = eventMetadata.sort((m1, m2) => Platform.StringUtilities.compare(m1.key, m2.key));\n  }\n\n  createPreview(): UI.Widget.VBox {\n    const preview = new UI.Widget.VBox();\n    preview.element.classList.add('background-service-metadata');\n    preview.element.setAttribute('jslog', `${VisualLogging.section('metadata')}`);\n\n    for (const entry of this.eventMetadata) {\n      const div = document.createElement('div');\n      div.classList.add('background-service-metadata-entry');\n      div.createChild('div', 'background-service-metadata-name').textContent = entry.key + ': ';\n      if (entry.value) {\n        div.createChild('div', 'background-service-metadata-value source-code').textContent = entry.value;\n      } else {\n        div.createChild('div', 'background-service-metadata-value background-service-empty-value').textContent =\n            i18nString(UIStrings.empty);\n      }\n      preview.element.appendChild(div);\n    }\n\n    if (!preview.element.children.length) {\n      const div = document.createElement('div');\n      div.classList.add('background-service-metadata-entry');\n      div.createChild('div', 'background-service-metadata-name background-service-empty-value').textContent =\n          i18nString(UIStrings.noMetadataForThisEvent);\n      preview.element.appendChild(div);\n    }\n\n    return preview;\n  }\n}\n\nexport class ActionDelegate implements UI.ActionRegistration.ActionDelegate {\n  handleAction(context: UI.Context.Context, actionId: string): boolean {\n    const view = context.flavor(BackgroundServiceView);\n    switch (actionId) {\n      case 'background-service.toggle-recording': {\n        if (!view) {\n          throw new Error('BackgroundServiceView instance is missing');\n        }\n        view.toggleRecording();\n        return true;\n      }\n    }\n    return false;\n  }\n}\nexport interface RecordingState {\n  isRecording: boolean;\n  serviceName: Protocol.BackgroundService.ServiceName;\n}\nexport interface EventData {\n  id: number;\n  timestamp: string;\n  origin: string;\n  'storage-key': string;\n  'sw-scope': string;\n  'event-name': string;\n  'instance-id': string;\n}\n"]}