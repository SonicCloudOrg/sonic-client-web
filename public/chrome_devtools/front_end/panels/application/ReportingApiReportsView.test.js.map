{"version":3,"file":"ReportingApiReportsView.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/application/ReportingApiReportsView.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport {raf} from '../../testing/DOMHelpers.js';\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\nimport * as DataGrid from '../../ui/components/data_grid/data_grid.js';\n\nimport * as Resources from './application.js';\n\nimport View = Resources.ReportingApiReportsView;\n\nconst reports = [\n  {\n    id: 'some_id' as Protocol.Network.ReportId,\n    initiatorUrl: 'https://example.com/script.js',\n    destination: 'main-endpoint',\n    type: 'deprecation',\n    timestamp: 1632747042.12696,\n    depth: 1,\n    completedAttempts: 0,\n    body: {\n      columnNumber: 8,\n      id: 'PrefixedStorageInfo',\n      lineNumber: 15,\n      message:\n          '\\'window.webkitStorageInfo\\' is deprecated. Please use \\'navigator.webkitTemporaryStorage\\' or \\'navigator.webkitPersistentStorage\\' instead.',\n      sourceFile: 'https://example.com/script.js',\n    },\n    status: Protocol.Network.ReportStatus.Queued,\n  },\n  {\n    id: 'another_id' as Protocol.Network.ReportId,\n    initiatorUrl: 'https://www.google.com/script.js',\n    destination: 'default',\n    type: 'csp-violation',\n    timestamp: 1632747045.39856,\n    depth: 1,\n    completedAttempts: 0,\n    body: {\n      blockedURL: 'https://www.google.com/script.js',\n      disposition: 'enforce',\n      documentURL: 'https://www.google.com/document',\n      effectiveDirective: 'script-src-elem',\n      originalPolicy: 'script-src \\'self\\'; object-src \\'none\\'; report-to main-endpoint;',\n      statusCode: 200,\n    },\n    status: Protocol.Network.ReportStatus.Queued,\n  },\n];\n\ndescribeWithMockConnection('ReportingApiReportsView', () => {\n  let networkManager: SDK.NetworkManager.NetworkManager|null;\n\n  beforeEach(() => {\n    const target = createTarget();\n    networkManager = target.model(SDK.NetworkManager.NetworkManager);\n  });\n\n  it('listens to and stores added reports', () => {\n    if (!networkManager) {\n      throw new Error('No networkManager');\n    }\n    const view = new View.ReportingApiReportsView(networkManager);\n\n    networkManager.dispatchEventToListeners(SDK.NetworkManager.Events.ReportingApiReportAdded, reports[0]);\n    networkManager.dispatchEventToListeners(SDK.NetworkManager.Events.ReportingApiReportAdded, reports[1]);\n    assert.deepEqual(view.getReports(), reports);\n  });\n\n  it('can handle report updates', () => {\n    if (!networkManager) {\n      throw new Error('No networkManager');\n    }\n    const view = new View.ReportingApiReportsView(networkManager);\n\n    const successReport = {\n      id: 'some_id' as Protocol.Network.ReportId,\n      initiatorUrl: 'https://example.com/script.js',\n      destination: 'main-endpoint',\n      type: 'deprecation',\n      timestamp: 1632747042.12696,\n      depth: 1,\n      completedAttempts: 1,\n      body: {\n        columnNumber: 8,\n        id: 'PrefixedStorageInfo',\n        lineNumber: 15,\n        message:\n            '\\'window.webkitStorageInfo\\' is deprecated. Please use \\'navigator.webkitTemporaryStorage\\' or \\'navigator.webkitPersistentStorage\\' instead.',\n        sourceFile: 'https://example.com/script.js',\n      },\n      status: Protocol.Network.ReportStatus.Success,\n    };\n    networkManager.dispatchEventToListeners(SDK.NetworkManager.Events.ReportingApiReportAdded, reports[0]);\n    networkManager.dispatchEventToListeners(SDK.NetworkManager.Events.ReportingApiReportUpdated, successReport);\n    assert.deepEqual(view.getReports(), [successReport]);\n  });\n\n  it('updates sidebarWidget upon receiving cellFocusedEvent', async () => {\n    if (!networkManager) {\n      throw new Error('No networkManager');\n    }\n    const view = new View.ReportingApiReportsView(networkManager);\n\n    networkManager.dispatchEventToListeners(SDK.NetworkManager.Events.ReportingApiReportAdded, reports[0]);\n    networkManager.dispatchEventToListeners(SDK.NetworkManager.Events.ReportingApiReportAdded, reports[1]);\n    const grid = view.getReportsGrid();\n    const cells = [\n      {\n        columnId: 'id',\n        value: 'some_id',\n      },\n      {\n        columnId: 'status',\n        value: 'Queued',\n      },\n    ];\n    const stub = sinon.stub(view, 'setSidebarWidget');\n    assert.isTrue(stub.notCalled);\n    grid.dispatchEvent(\n        new DataGrid.DataGridEvents.BodyCellFocusedEvent({columnId: 'status', value: 'Queued'}, {cells}));\n    await raf();\n    assert.isTrue(stub.calledOnce);\n  });\n});\n"]}