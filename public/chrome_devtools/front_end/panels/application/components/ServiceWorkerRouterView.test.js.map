{"version":3,"file":"ServiceWorkerRouterView.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/application/components/ServiceWorkerRouterView.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EACL,oBAAoB,GACrB,MAAM,gCAAgC,CAAC;AACxC,OAAO,EAAC,kBAAkB,EAAC,MAAM,wCAAwC,CAAC;AAC1E,OAAO,KAAK,WAAW,MAAM,iEAAiE,CAAC;AAE/F,OAAO,KAAK,qBAAqB,MAAM,iBAAiB,CAAC;AAEzD,MAAM,WAAW,GAAG,WAAW,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC;AAE/E,KAAK,UAAU,6BAA6B;IAE1C,MAAM,SAAS,GAAG,IAAI,qBAAqB,CAAC,uBAAuB,CAAC,uBAAuB,EAAE,CAAC;IAC9F,oBAAoB,CAAC,SAAS,CAAC,CAAC;IAChC,MAAM,WAAW,CAAC,IAAI,EAAE,CAAC;IAEzB,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,kBAAkB,CAAC,yBAAyB,EAAE,GAAG,EAAE;IACjD,MAAM,WAAW,GAAG;QAClB;YACE,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,EAAC,UAAU,EAAE,UAAU,EAAC,CAAC;YACnD,MAAM,EAAE,CAAC,SAAS,CAAC,CAAC,QAAQ,EAAE;YAC9B,EAAE,EAAE,CAAC;SACN;QACD;YACE,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,EAAC,UAAU,EAAE,MAAM,EAAC,CAAC;YAC/C,MAAM,EAAE,CAAC,aAAa,CAAC,CAAC,QAAQ,EAAE;YAClC,EAAE,EAAE,CAAC;SACN;KACF,CAAC;IAEF,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;QAC9C,MAAM,SAAS,GAAG,MAAM,6BAA6B,EAAE,CAAC;QACxD,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QACrB,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,UAAW,CAAC,aAAa,EAAE,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;QACvC,MAAM,SAAS,GAAG,MAAM,6BAA6B,EAAE,CAAC;QACxD,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QAC9B,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,UAAW,CAAC,aAAa,EAAE,CAAC,CAAC;QAErD,MAAM,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,UAAW,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC,CAAC;QACjF,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAEpC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE;YACtB,MAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;YACnD,MAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;YAC7C,MAAM,CAAC,WAAW,CAAC,SAAS,EAAE,aAAa,CAAC,aAAa,CAAC,EAAE,WAAW,EAAE,WAAW,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC;YACrG,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,aAAa,CAAC,aAAa,CAAC,EAAE,WAAW,EAAE,WAAW,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC;QACjG,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {\n  renderElementIntoDOM,\n} from '../../../testing/DOMHelpers.js';\nimport {describeWithLocale} from '../../../testing/EnvironmentHelpers.js';\nimport * as Coordinator from '../../../ui/components/render_coordinator/render_coordinator.js';\n\nimport * as ApplicationComponents from './components.js';\n\nconst coordinator = Coordinator.RenderCoordinator.RenderCoordinator.instance();\n\nasync function renderServiceWorkerRouterView():\n    Promise<ApplicationComponents.ServiceWorkerRouterView.ServiceWorkerRouterView> {\n  const component = new ApplicationComponents.ServiceWorkerRouterView.ServiceWorkerRouterView();\n  renderElementIntoDOM(component);\n  await coordinator.done();\n\n  return component;\n}\n\ndescribeWithLocale('ServiceWorkerRouterView', () => {\n  const routerRules = [\n    {\n      condition: JSON.stringify({urlPattern: '/foo/bar'}),\n      source: ['network'].toString(),\n      id: 1,\n    },\n    {\n      condition: JSON.stringify({urlPattern: '/baz'}),\n      source: ['fetch-event'].toString(),\n      id: 2,\n    },\n  ];\n\n  it('shows nothing with empty rules', async () => {\n    const component = await renderServiceWorkerRouterView();\n    component.update([]);\n    assert.isFalse(component.shadowRoot!.hasChildNodes());\n  });\n\n  it('shows the list of rules', async () => {\n    const component = await renderServiceWorkerRouterView();\n    component.update(routerRules);\n    assert.isTrue(component.shadowRoot!.hasChildNodes());\n\n    const rules = Array.from(component.shadowRoot!.querySelectorAll('.router-rule'));\n    assert.strictEqual(rules.length, 2);\n\n    rules.map((rule, idx) => {\n      const condition = rule.querySelector('.condition');\n      const source = rule.querySelector('.source');\n      assert.strictEqual(condition?.querySelector('.rule-value')?.textContent, routerRules[idx].condition);\n      assert.strictEqual(source?.querySelector('.rule-value')?.textContent, routerRules[idx].source);\n    });\n  });\n});\n"]}