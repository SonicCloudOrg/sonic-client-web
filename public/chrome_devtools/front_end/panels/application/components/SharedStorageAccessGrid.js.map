{"version":3,"file":"SharedStorageAccessGrid.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/application/components/SharedStorageAccessGrid.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport type * as Protocol from '../../../generated/protocol.js';\nimport * as DataGrid from '../../../ui/components/data_grid/data_grid.js';\nimport * as IconButton from '../../../ui/components/icon_button/icon_button.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\n\nimport sharedStorageAccessGridStyles from './sharedStorageAccessGrid.css.js';\n\nconst UIStrings = {\n  /**\n   *@description Text in Shared Storage Events View of the Application panel\n   */\n  sharedStorage: 'Shared storage',\n  /**\n   *@description Hover text for an info icon in the Shared Storage Events panel\n   */\n  allSharedStorageEvents: 'All shared storage events for this page.',\n  /**\n   *@description Text in Shared Storage Events View of the Application panel\n   * Date and time of an Shared Storage event in a locale-\n   * dependent format.\n   */\n  eventTime: 'Event Time',\n  /**\n   *@description Text in Shared Storage Events View of the Application panel\n   * Type of shared storage event such as 'documentAddModule', 'documentRun',\n   * 'documentSet', 'workletDelete', or 'workletGet'.\n   */\n  eventType: 'Access Type',\n  /**\n   *@description Text in Shared Storage Events View of the Application panel\n   * Id of the page's main frame for this access event.\n   */\n  mainFrameId: 'Main Frame ID',\n  /**\n   *@description Text in Shared Storage Events View of the Application panel\n   * Owner origin of the shared storage for this access event.\n   */\n  ownerOrigin: 'Owner Origin',\n  /**\n   *@description Text in Shared Storage Events View of the Application panel\n   * Event parameters whose presence/absence depend on the access type.\n   */\n  eventParams: 'Optional Event Params',\n  /**\n   *@description Text shown instead of a table when the table would be empty.\n   */\n  noEvents: 'No shared storage events recorded.',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/application/components/SharedStorageAccessGrid.ts', UIStrings);\nexport const i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class SharedStorageAccessGrid extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-shared-storage-access-grid`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  #datastores: Array<Protocol.Storage.SharedStorageAccessedEvent> = [];\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [sharedStorageAccessGridStyles];\n    this.#render();\n  }\n\n  set data(data: Array<Protocol.Storage.SharedStorageAccessedEvent>) {\n    this.#datastores = data;\n    this.#render();\n  }\n\n  #render(): void {\n    // clang-format off\n    LitHtml.render(LitHtml.html`\n      <div>\n        <span class=\"heading\">${i18nString(UIStrings.sharedStorage)}</span>\n        <${IconButton.Icon.Icon.litTagName} class=\"info-icon\" title=${\n            i18nString(UIStrings.allSharedStorageEvents)}\n          .data=${\n            {iconName: 'info',\n              color: 'var(--icon-default)', width: '16px'} as\n            IconButton.Icon.IconWithName}>\n        </${IconButton.Icon.Icon.litTagName}>\n        ${this.#renderGridOrNoDataMessage()}\n      </div>\n    `, this.#shadow, {host: this});\n    // clang-format on\n  }\n\n  #renderGridOrNoDataMessage(): LitHtml.TemplateResult {\n    if (this.#datastores.length === 0) {\n      return LitHtml.html`<div\n        class=\"no-events-message\">${i18nString(UIStrings.noEvents)}</div>`;\n    }\n\n    const gridData: DataGrid.DataGridController.DataGridControllerData = {\n      columns: [\n        {\n          id: 'event-main-frame-id',\n          title: i18nString(UIStrings.mainFrameId),\n          widthWeighting: 10,\n          hideable: false,\n          visible: false,\n          sortable: false,\n        },\n        {\n          id: 'event-time',\n          title: i18nString(UIStrings.eventTime),\n          widthWeighting: 10,\n          hideable: false,\n          visible: true,\n          sortable: true,\n        },\n        {\n          id: 'event-type',\n          title: i18nString(UIStrings.eventType),\n          widthWeighting: 10,\n          hideable: false,\n          visible: true,\n          sortable: true,\n        },\n        {\n          id: 'event-owner-origin',\n          title: i18nString(UIStrings.ownerOrigin),\n          widthWeighting: 10,\n          hideable: false,\n          visible: true,\n          sortable: true,\n        },\n        {\n          id: 'event-params',\n          title: i18nString(UIStrings.eventParams),\n          widthWeighting: 10,\n          hideable: false,\n          visible: true,\n          sortable: true,\n        },\n      ],\n      rows: this.#buildRows(),\n      initialSort: {\n        columnId: 'event-time',\n        direction: DataGrid.DataGridUtils.SortDirection.ASC,\n      },\n    };\n\n    return LitHtml.html`\n      <${DataGrid.DataGridController.DataGridController.litTagName} .data=${\n        gridData as DataGrid.DataGridController.DataGridControllerData}></${\n        DataGrid.DataGridController.DataGridController.litTagName}>\n    `;\n  }\n\n  #buildRows(): DataGrid.DataGridUtils.Row[] {\n    return this.#datastores.map(event => ({\n                                  cells: [\n                                    {columnId: 'event-main-frame-id', value: event.mainFrameId},\n                                    {\n                                      columnId: 'event-time',\n                                      value: event.accessTime,\n                                      renderer: this.#renderDateForDataGridCell.bind(this),\n                                    },\n                                    {columnId: 'event-type', value: event.type},\n                                    {columnId: 'event-owner-origin', value: event.ownerOrigin},\n                                    {columnId: 'event-params', value: JSON.stringify(event.params)},\n                                  ],\n                                }));\n  }\n\n  #renderDateForDataGridCell(value: DataGrid.DataGridUtils.CellValue): LitHtml.TemplateResult {\n    const date = new Date(1e3 * (value as number));\n    return LitHtml.html`${date.toLocaleString()}`;\n  }\n}\n\ncustomElements.define('devtools-shared-storage-access-grid', SharedStorageAccessGrid);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-shared-storage-access-grid': SharedStorageAccessGrid;\n  }\n}\n"]}