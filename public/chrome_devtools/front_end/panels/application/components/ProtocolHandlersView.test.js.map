{"version":3,"file":"ProtocolHandlersView.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/application/components/ProtocolHandlersView.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAG7B,OAAO,EACL,+BAA+B,EAC/B,yBAAyB,EACzB,oBAAoB,GACrB,MAAM,gCAAgC,CAAC;AACxC,OAAO,EAAC,uBAAuB,EAAC,MAAM,wCAAwC,CAAC;AAE/E,OAAO,KAAK,qBAAqB,MAAM,iBAAiB,CAAC;AAEzD,KAAK,UAAU,+BAA+B,CAC1C,YAA6C,EAC7C,gBAA8E;IAChF,MAAM,SAAS,GAAG,IAAI,qBAAqB,CAAC,oBAAoB,CAAC,oBAAoB,EAAE,CAAC;IACxF,oBAAoB,CAAC,SAAS,CAAC,CAAC;IAChC,SAAS,CAAC,IAAI,GAAG,EAAC,YAAY,EAAE,gBAAgB,EAAC,CAAC;IAClD,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,uBAAuB,CAAC,sBAAsB,EAAE,GAAG,EAAE;IACnD,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;QACxD,MAAM,SAAS,GAAG;YAChB;gBACE,UAAU,EAAE,YAAY;gBACxB,KAAK,EAAE,cAAc;aACtB;YACD;gBACE,UAAU,EAAE,aAAa;gBACzB,KAAK,EAAE,sBAAsB;aAC9B;YACD;gBACE,kBAAkB,EAAE,wDAAwD;aAC7E;SACF,CAAC;QACF,MAAM,WAAW,GAAG,2DAA8F,CAAC;QACnH,MAAM,SAAS,GAAG,MAAM,+BAA+B,CACnD,WAAW,EAAE,SAAyE,CAAC,CAAC;QAE5F,MAAM,aAAa,GAAG,SAAS,CAAC,UAAW,CAAC,aAAa,CAAC,+BAA+B,CAAC,CAAC;QAC3F,MAAM,CAAC,UAAU,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;QAE9C,uFAAuF;QACvF,MAAM,wBAAwB,GAAG,+BAA+B,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;QACxF,MAAM,qBAAqB,GACvB,mHAAmH,CAAC;QACxH,MAAM,CAAC,SAAS,CAAC,wBAAwB,CAAC,CAAC,CAAC,EAAE,qBAAqB,CAAC,CAAC;QAErE,wDAAwD;QACxD,MAAM,aAAa,GAAG,yBAAyB,CAAC,SAAS,EAAE,kBAAkB,EAAE,iBAAiB,CAAC,CAAC;QAClG,MAAM,MAAM,GAAG,+BAA+B,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;QACxE,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,eAAe,EAAE,gBAAgB,CAAC,CAAC,CAAC;IAChE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;QAC7D,MAAM,SAAS,GAAiE,EAAE,CAAC;QACnF,MAAM,WAAW,GAAG,2DAA8F,CAAC;QACnH,MAAM,SAAS,GAAG,MAAM,+BAA+B,CACnD,WAAW,EAAE,SAAyE,CAAC,CAAC;QAE5F,MAAM,eAAe,GAAG,SAAS,CAAC,UAAW,CAAC,aAAa,CAAC,+BAA+B,CAAC,CAAC;QAC7F,MAAM,CAAC,UAAU,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC;QAEhD,MAAM,2BAA2B,GAAG,+BAA+B,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC;QAC7F,MAAM,qBAAqB,GACvB,6HAA6H,CAAC;QAClI,MAAM,CAAC,SAAS,CAAC,2BAA2B,CAAC,CAAC,CAAC,EAAE,qBAAqB,CAAC,CAAC;IAC1E,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Platform from '../../../core/platform/platform.js';\nimport {\n  getCleanTextContentFromElements,\n  getElementWithinComponent,\n  renderElementIntoDOM,\n} from '../../../testing/DOMHelpers.js';\nimport {describeWithEnvironment} from '../../../testing/EnvironmentHelpers.js';\n\nimport * as ApplicationComponents from './components.js';\n\nasync function renderProtocolHandlersComponent(\n    manifestLink: Platform.DevToolsPath.UrlString,\n    protocolHandlers: ApplicationComponents.ProtocolHandlersView.ProtocolHandler[]) {\n  const component = new ApplicationComponents.ProtocolHandlersView.ProtocolHandlersView();\n  renderElementIntoDOM(component);\n  component.data = {manifestLink, protocolHandlers};\n  return component;\n}\n\ndescribeWithEnvironment('ProtocolHandlersView', () => {\n  it('renders view when protocols are detected', async () => {\n    const protocols = [\n      {\n        'protocol': 'web+coffee',\n        'url': './?coffee=%s',\n      },\n      {\n        'protocol': 'web+pwinter',\n        'url': 'index.html?colors=%s',\n      },\n      {\n        'invalid-protocol': 'this is an invalid protocol entry for testing purposes',\n      },\n    ];\n    const manifestURL = 'https://www.example.com/index.html/manifest-protocol.json' as Platform.DevToolsPath.UrlString;\n    const component = await renderProtocolHandlersComponent(\n        manifestURL, protocols as ApplicationComponents.ProtocolHandlersView.ProtocolHandler[]);\n\n    const statusElement = component.shadowRoot!.querySelector('.protocol-handlers-row.status');\n    assert.instanceOf(statusElement, HTMLElement);\n\n    // Tests if status message for when protocols are detected in the manifest is rendering\n    const protocolsDetectedMessage = getCleanTextContentFromElements(statusElement, 'span');\n    const expectedStatusMessage =\n        'Found valid protocol handler registration in the manifest. With the app installed, test the registered protocols.';\n    assert.deepEqual(protocolsDetectedMessage[0], expectedStatusMessage);\n\n    // Tests if protocols are rendering properly in dropdown\n    const selectElement = getElementWithinComponent(component, '.protocol-select', HTMLSelectElement);\n    const values = getCleanTextContentFromElements(selectElement, 'option');\n    assert.deepEqual(values, ['web+coffee://', 'web+pwinter://']);\n  });\n\n  it('renders protocols not detected status message', async () => {\n    const protocols: ApplicationComponents.ProtocolHandlersView.ProtocolHandler[] = [];\n    const manifestURL = 'https://www.example.com/index.html/manifest-protocol.json' as Platform.DevToolsPath.UrlString;\n    const component = await renderProtocolHandlersComponent(\n        manifestURL, protocols as ApplicationComponents.ProtocolHandlersView.ProtocolHandler[]);\n\n    const noStatusElement = component.shadowRoot!.querySelector('.protocol-handlers-row.status');\n    assert.instanceOf(noStatusElement, HTMLElement);\n\n    const protocolsNotDetectedMessage = getCleanTextContentFromElements(noStatusElement, 'span');\n    const expectedStatusMessage =\n        'Define protocol handlers in the manifest to register your app as a handler for custom protocols when your app is installed.';\n    assert.deepEqual(protocolsNotDetectedMessage[0], expectedStatusMessage);\n  });\n});\n"]}