{"version":3,"file":"OriginTrialTreeView.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/application/components/OriginTrialTreeView.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Protocol from '../../../generated/protocol.js';\nimport {\n  getElementWithinComponent,\n  renderElementIntoDOM,\n  stripLitHtmlCommentNodes,\n} from '../../../testing/DOMHelpers.js';\nimport {describeWithLocale} from '../../../testing/EnvironmentHelpers.js';\nimport * as Coordinator from '../../../ui/components/render_coordinator/render_coordinator.js';\nimport * as TreeOutline from '../../../ui/components/tree_outline/tree_outline.js';\n\nimport * as ApplicationComponents from './components.js';\n\nconst coordinator = Coordinator.RenderCoordinator.RenderCoordinator.instance();\n\nasync function renderOriginTrialTreeView(\n    data: ApplicationComponents.OriginTrialTreeView.OriginTrialTreeViewData,\n    ): Promise<{\n  component: ApplicationComponents.OriginTrialTreeView.OriginTrialTreeView,\n  shadowRoot: ShadowRoot,\n}> {\n  const component = new ApplicationComponents.OriginTrialTreeView.OriginTrialTreeView();\n  component.data = data;\n  renderElementIntoDOM(component);\n  assert.isNotNull(component.shadowRoot);\n  await coordinator.done();\n  return {\n    component,\n    shadowRoot: component.shadowRoot,\n  };\n}\n\ntype OriginTrialTreeOutline =\n    TreeOutline.TreeOutline.TreeOutline<ApplicationComponents.OriginTrialTreeView.OriginTrialTreeNodeData>;\n\n/**\n * Extract `TreeOutline` component from `OriginTrialTreeView` for inspection.\n */\nasync function renderOriginTrialTreeViewTreeOutline(\n    data: ApplicationComponents.OriginTrialTreeView.OriginTrialTreeViewData,\n    ): Promise<{\n  component: OriginTrialTreeOutline,\n  shadowRoot: ShadowRoot,\n}> {\n  const {component} = await renderOriginTrialTreeView(data);\n  const treeOutline: OriginTrialTreeOutline =\n      getElementWithinComponent<ApplicationComponents.OriginTrialTreeView.OriginTrialTreeView, OriginTrialTreeOutline>(\n          component, 'devtools-tree-outline', TreeOutline.TreeOutline.TreeOutline);\n  assert.isNotNull(treeOutline.shadowRoot);\n  return {\n    component: treeOutline,\n    shadowRoot: treeOutline.shadowRoot,\n  };\n}\n\nconst tokenPlaceHolder = 'Origin Trial Token Placeholder';\nconst trialWithMultipleTokens: Protocol.Page.OriginTrial = {\n  trialName: 'AppCache',\n  status: Protocol.Page.OriginTrialStatus.Enabled,\n  tokensWithStatus: [\n    {\n      status: Protocol.Page.OriginTrialTokenStatus.Success,\n      rawTokenText: tokenPlaceHolder,\n      parsedToken: {\n        trialName: 'AppCache',\n        origin: 'https://foo.com',\n        expiryTime: 1000,\n        usageRestriction: Protocol.Page.OriginTrialUsageRestriction.None,\n        isThirdParty: false,\n        matchSubDomains: false,\n      },\n    },\n    {\n      status: Protocol.Page.OriginTrialTokenStatus.Expired,\n      rawTokenText: tokenPlaceHolder,\n      parsedToken: {\n        trialName: 'AppCache',\n        origin: 'https://foo.com',\n        expiryTime: 1000,\n        usageRestriction: Protocol.Page.OriginTrialUsageRestriction.None,\n        isThirdParty: false,\n        matchSubDomains: false,\n      },\n    },\n    {\n      status: Protocol.Page.OriginTrialTokenStatus.WrongOrigin,\n      rawTokenText: tokenPlaceHolder,\n      parsedToken: {\n        trialName: 'AppCache',\n        origin: 'https://bar.com',\n        expiryTime: 1000,\n        usageRestriction: Protocol.Page.OriginTrialUsageRestriction.None,\n        isThirdParty: false,\n        matchSubDomains: false,\n      },\n    },\n  ],\n};\n\nconst trialWithSingleToken: Protocol.Page.OriginTrial = {\n  trialName: 'AutoPictureInPicture',\n  status: Protocol.Page.OriginTrialStatus.ValidTokenNotProvided,\n  tokensWithStatus: [\n    {\n      status: Protocol.Page.OriginTrialTokenStatus.NotSupported,\n      rawTokenText: tokenPlaceHolder,\n      parsedToken: {\n        trialName: 'AutoPictureInPicture',\n        origin: 'https://foo.com',\n        expiryTime: 1000,\n        usageRestriction: Protocol.Page.OriginTrialUsageRestriction.None,\n        isThirdParty: false,\n        matchSubDomains: false,\n      },\n    },\n  ],\n};\n\nconst trialWithUnparsableToken: Protocol.Page.OriginTrial = {\n  trialName: 'UNKNOWN',\n  status: Protocol.Page.OriginTrialStatus.ValidTokenNotProvided,\n  tokensWithStatus: [\n    {\n      status: Protocol.Page.OriginTrialTokenStatus.InvalidSignature,\n      rawTokenText: tokenPlaceHolder,\n    },\n  ],\n};\n\nfunction extractBadgeTextFromTreeNode(node: HTMLLIElement): string[] {\n  return [...node.querySelectorAll('devtools-resources-origin-trial-tree-view-badge')].map(badgeElement => {\n    const adornerElement = badgeElement.shadowRoot!.querySelector('devtools-adorner');\n    assert.isNotNull(adornerElement);\n    if (adornerElement === null) {\n      return '';\n    }\n    const contentElement = adornerElement.querySelector('[slot=\"content\"]');\n    assert.isNotNull(contentElement);\n    if (contentElement === null) {\n      return '';\n    }\n    return contentElement.innerHTML;\n  });\n}\n\nfunction nodeKeyInnerHTML(node: HTMLLIElement|ShadowRoot) {\n  const keyNode = node.querySelector('[data-node-key]');\n  if (!keyNode) {\n    throw new Error('Found tree node without a key within it.');\n  }\n  return stripLitHtmlCommentNodes(keyNode.innerHTML);\n}\n\ninterface VisibleTreeNodeFromDOM {\n  nodeElement: HTMLLIElement;\n  children?: VisibleTreeNodeFromDOM[];\n}\n\n/**\n * Converts the nodes into a tree structure that we can assert against.\n */\nfunction visibleNodesToTree(shadowRoot: ShadowRoot): VisibleTreeNodeFromDOM[] {\n  const tree: VisibleTreeNodeFromDOM[] = [];\n\n  function buildTreeNode(node: HTMLLIElement): VisibleTreeNodeFromDOM {\n    const item: VisibleTreeNodeFromDOM = {\n      nodeElement: node,\n    };\n\n    if (node.getAttribute('aria-expanded') && node.getAttribute('aria-expanded') === 'true') {\n      item.children = [];\n      const childNodes = node.querySelectorAll<HTMLLIElement>(':scope > ul[role=\"group\"]>li');\n      for (const child of childNodes) {\n        item.children.push(buildTreeNode(child));\n      }\n    }\n\n    return item;\n  }\n  const rootNodes = shadowRoot.querySelectorAll<HTMLLIElement>('ul[role=\"tree\"]>li');\n  for (const root of rootNodes) {\n    tree.push(buildTreeNode(root));\n  }\n  return tree;\n}\n\n/**\n * Wait until a certain number of children are rendered. We need this as the\n * component uses LitHtml's until directive, which is async and not within the\n * render coordinator's control.\n */\nasync function waitForRenderedTreeNodeCount(shadowRoot: ShadowRoot, expectedNodeCount: number): Promise<void> {\n  const actualNodeCount = shadowRoot.querySelectorAll('li[role=\"treeitem\"]').length;\n  if (actualNodeCount === expectedNodeCount) {\n    return;\n  }\n\n  await new Promise<void>(resolve => {\n    requestAnimationFrame(async () => {\n      await waitForRenderedTreeNodeCount(shadowRoot, expectedNodeCount);\n      resolve();\n    });\n  });\n}\n\ndescribeWithLocale('OriginTrialTreeView', () => {\n  it('renders trial names as root tree nodes', async () => {\n    const {shadowRoot} = await renderOriginTrialTreeViewTreeOutline({\n      trials: [\n        trialWithMultipleTokens,\n        trialWithSingleToken,\n        trialWithUnparsableToken,\n      ],\n    });\n    const visibleItems = shadowRoot.querySelectorAll<HTMLLIElement>('li[role=\"treeitem\"]');\n    assert.lengthOf(visibleItems, 3);\n    assert.include(nodeKeyInnerHTML(visibleItems[0]), trialWithMultipleTokens.trialName);\n    assert.include(nodeKeyInnerHTML(visibleItems[1]), trialWithSingleToken.trialName);\n    assert.include(nodeKeyInnerHTML(visibleItems[2]), trialWithUnparsableToken.trialName);\n  });\n\n  it('renders token with status when there are more than 1 tokens', async () => {\n    const {component, shadowRoot} = await renderOriginTrialTreeViewTreeOutline({\n      trials: [\n        trialWithMultipleTokens,  // Node counts by level: 1/3/6/3\n      ],\n    });\n\n    await component.expandRecursively(/* maxDepth= */ 0);\n    await waitForRenderedTreeNodeCount(shadowRoot, 4);\n    const visibleTree = visibleNodesToTree(shadowRoot);\n\n    // When there are more than 1 tokens in a trial, second level nodes\n    // should show token status.\n    const tokenWithStatusNodes = visibleTree[0].children;\n    assert.exists(tokenWithStatusNodes);\n    if (tokenWithStatusNodes === undefined) {\n      return;\n    }\n    assert.lengthOf(tokenWithStatusNodes, 3);\n    for (let i = 0; i < tokenWithStatusNodes.length; i++) {\n      assert.include(\n          extractBadgeTextFromTreeNode(tokenWithStatusNodes[i].nodeElement),\n          trialWithMultipleTokens.tokensWithStatus[i].status,\n      );\n    }\n  });\n\n  it('skips token with status when there is only 1 token', async () => {\n    const {component, shadowRoot} = await renderOriginTrialTreeViewTreeOutline({\n      trials: [\n        trialWithSingleToken,  // Node counts by level: 1/2/1\n      ],\n    });\n    await component.expandRecursively(/* maxDepth= */ 1);\n    await waitForRenderedTreeNodeCount(shadowRoot, 3);\n    const visibleTree = visibleNodesToTree(shadowRoot);\n\n    // When there is only 1 token, token with status level should be skipped.\n    const tokenDetailNodes = visibleTree[0].children;\n    assert.exists(tokenDetailNodes);\n    if (tokenDetailNodes === undefined) {\n      return;\n    }\n    assert.lengthOf(tokenDetailNodes, 2);\n  });\n\n  it('renders token fields', async () => {\n    const {component, shadowRoot} = await renderOriginTrialTreeViewTreeOutline({\n      trials: [\n        trialWithSingleToken,  // Node counts by level: 1/2/1\n      ],\n    });\n    await component.expandRecursively(/* maxDepth= */ 1);\n    await waitForRenderedTreeNodeCount(shadowRoot, 3);\n    const visibleTree = visibleNodesToTree(shadowRoot);\n\n    const tokenDetailNodes = visibleTree[0].children;\n    assert.exists(tokenDetailNodes);\n    if (tokenDetailNodes === undefined) {\n      return;\n    }\n    assert.lengthOf(tokenDetailNodes, 2);\n    const tokenFieldsNode = tokenDetailNodes[0];\n    const rowsComponent = tokenFieldsNode.nodeElement.querySelector('devtools-resources-origin-trial-token-rows');\n    const {innerHTML} = rowsComponent!.shadowRoot!;\n    const parsedToken = trialWithSingleToken.tokensWithStatus[0].parsedToken;\n    assert.exists(parsedToken);\n    if (parsedToken === undefined) {\n      return;\n    }\n\n    // Note: only origin and usageRestriction field are tested, as other fields\n    // are not directly rendered:\n    // - expiryTime: rendered as time format\n    // - isThirdParty, MatchesSubDomain: boolean flags\n    assert.include(innerHTML, parsedToken.origin);\n    assert.include(innerHTML, parsedToken.usageRestriction);\n  });\n\n  it('renders raw token text', async () => {\n    const {component, shadowRoot} = await renderOriginTrialTreeViewTreeOutline({\n      trials: [\n        trialWithSingleToken,  // Node counts by level: 1/2/1\n      ],\n    });\n    await component.expandRecursively(/* maxDepth= */ 2);\n    await waitForRenderedTreeNodeCount(shadowRoot, 4);\n    const visibleTree = visibleNodesToTree(shadowRoot);\n\n    const tokenDetailNodes = visibleTree[0].children;\n    assert.exists(tokenDetailNodes);\n    if (tokenDetailNodes === undefined) {\n      return;\n    }\n    assert.lengthOf(tokenDetailNodes, 2);\n    const rawTokenNode = tokenDetailNodes[1];\n    assert.exists(rawTokenNode.children);\n    if (rawTokenNode.children === undefined) {\n      return;\n    }\n    assert.lengthOf(rawTokenNode.children, 1);\n    const innerHTML = nodeKeyInnerHTML(rawTokenNode.children[0].nodeElement);\n    assert.include(innerHTML, trialWithSingleToken.tokensWithStatus[0].rawTokenText);\n  });\n\n  it('shows token count when there are more than 1 tokens in a trial', async () => {\n    const {shadowRoot} = await renderOriginTrialTreeViewTreeOutline({\n      trials: [\n        trialWithMultipleTokens,\n      ],\n    });\n    await waitForRenderedTreeNodeCount(shadowRoot, 1);\n    const visibleTree = visibleNodesToTree(shadowRoot);\n\n    const trialNameNode = visibleTree[0];\n    const badges = extractBadgeTextFromTreeNode(trialNameNode.nodeElement);\n    assert.lengthOf(badges, 2);\n    assert.include(badges, `${trialWithMultipleTokens.tokensWithStatus.length} tokens`);\n  });\n\n  it('shows trial status', async () => {\n    const {shadowRoot} = await renderOriginTrialTreeViewTreeOutline({\n      trials: [\n        trialWithMultipleTokens,\n      ],\n    });\n    await waitForRenderedTreeNodeCount(shadowRoot, 1);\n    const visibleTree = visibleNodesToTree(shadowRoot);\n\n    const trialNameNode = visibleTree[0];\n    const badges = extractBadgeTextFromTreeNode(trialNameNode.nodeElement);\n    assert.lengthOf(badges, 2);\n    assert.include(badges, trialWithMultipleTokens.status);\n  });\n\n  it('shows token status, when token with status node not expanded', async () => {\n    const {component, shadowRoot} = await renderOriginTrialTreeViewTreeOutline({\n      trials: [\n        trialWithMultipleTokens,  // Node counts by level: 1/3/6/3\n      ],\n    });\n    await component.expandRecursively(/* maxDepth= */ 0);\n    await waitForRenderedTreeNodeCount(shadowRoot, 4);\n\n    const visibleTree = visibleNodesToTree(shadowRoot);\n    const trialNameNode = visibleTree[0];\n    assert.exists(trialNameNode.children);\n    if (trialNameNode.children === undefined) {\n      return;\n    }\n    assert.lengthOf(trialNameNode.children, 3);\n    for (let i = 0; i < trialNameNode.children.length; i++) {\n      const tokenWithStatusNode = trialNameNode.children[i];\n      assert.isUndefined(tokenWithStatusNode.children);\n      const badges = extractBadgeTextFromTreeNode(tokenWithStatusNode.nodeElement);\n      assert.lengthOf(badges, 1);\n      assert.strictEqual(badges[0], trialWithMultipleTokens.tokensWithStatus[i].status);\n    }\n  });\n  it('hide token status, when token with status node is expanded', async () => {\n    const {component, shadowRoot} = await renderOriginTrialTreeViewTreeOutline({\n      trials: [\n        trialWithMultipleTokens,  // Node counts by level: 1/3/6/3\n      ],\n    });\n    await component.expandRecursively(/* maxDepth= */ 1);\n    await waitForRenderedTreeNodeCount(shadowRoot, 4);\n\n    const visibleTree = visibleNodesToTree(shadowRoot);\n    const trialNameNode = visibleTree[0];\n    assert.exists(trialNameNode.children);\n    for (const tokenWithStatusNode of trialNameNode.children) {\n      assert.exists(tokenWithStatusNode.children);\n      const badges = extractBadgeTextFromTreeNode(tokenWithStatusNode.nodeElement);\n      assert.lengthOf(badges, 0);\n    }\n  });\n\n  it('shows trial name for token with status UnknownTrial', async () => {\n    const unknownTrialName = 'UnkownTrialName';\n    const {component, shadowRoot} = await renderOriginTrialTreeViewTreeOutline({\n      trials: [\n        {\n          trialName: 'UNKNOWN',\n          status: Protocol.Page.OriginTrialStatus.ValidTokenNotProvided,\n          tokensWithStatus: [\n            {\n              status: Protocol.Page.OriginTrialTokenStatus.UnknownTrial,\n              parsedToken: {\n                trialName: unknownTrialName,\n                origin: 'https://foo.com',\n                expiryTime: 1000,\n                usageRestriction: Protocol.Page.OriginTrialUsageRestriction.None,\n                isThirdParty: false,\n                matchSubDomains: false,\n              },\n              rawTokenText: tokenPlaceHolder,\n            },\n          ],\n        },\n      ],\n    });  // Node counts by level: 1/2/1\n\n    await component.expandRecursively(/* maxDepth= */ 1);\n    await waitForRenderedTreeNodeCount(shadowRoot, 3);\n    const visibleTree = visibleNodesToTree(shadowRoot);\n\n    const tokenDetailNodes = visibleTree[0].children;\n    assert.exists(tokenDetailNodes);\n    if (tokenDetailNodes === undefined) {\n      return;\n    }\n    assert.lengthOf(tokenDetailNodes, 2);\n    const tokenFieldsNode = tokenDetailNodes[0];\n    const rowsComponent = tokenFieldsNode.nodeElement.querySelector('devtools-resources-origin-trial-token-rows');\n    const {innerHTML} = rowsComponent!.shadowRoot!;\n\n    assert.include(innerHTML, unknownTrialName);\n  });\n});\n"]}