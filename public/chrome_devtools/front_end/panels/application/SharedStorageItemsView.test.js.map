{"version":3,"file":"SharedStorageItemsView.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/application/SharedStorageItemsView.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport {\n  dispatchClickEvent,\n  dispatchKeyDownEvent,\n  getCleanTextContentFromElements,\n  raf,\n} from '../../testing/DOMHelpers.js';\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {\n  describeWithMockConnection,\n} from '../../testing/MockConnection.js';\nimport * as Coordinator from '../../ui/components/render_coordinator/render_coordinator.js';\nimport type * as DataGrid from '../../ui/legacy/components/data_grid/data_grid.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport * as Resources from './application.js';\nimport type * as ApplicationComponents from './components/components.js';\n\nimport View = Resources.SharedStorageItemsView;\n\nconst coordinator = Coordinator.RenderCoordinator.RenderCoordinator.instance();\n\nclass SharedStorageItemsListener {\n  #dispatcher: Common.ObjectWrapper.ObjectWrapper<View.SharedStorageItemsDispatcher.EventTypes>;\n  #cleared: boolean = false;\n  #filteredCleared: boolean = false;\n  #refreshed: boolean = false;\n  #deletedKeys: Array<String> = [];\n  #editedEvents: Array<View.SharedStorageItemsDispatcher.ItemEditedEvent> = [];\n\n  constructor(dispatcher: Common.ObjectWrapper.ObjectWrapper<View.SharedStorageItemsDispatcher.EventTypes>) {\n    this.#dispatcher = dispatcher;\n    this.#dispatcher.addEventListener(View.SharedStorageItemsDispatcher.Events.ItemsCleared, this.#itemsCleared, this);\n    this.#dispatcher.addEventListener(\n        View.SharedStorageItemsDispatcher.Events.FilteredItemsCleared, this.#filteredItemsCleared, this);\n    this.#dispatcher.addEventListener(\n        View.SharedStorageItemsDispatcher.Events.ItemsRefreshed, this.#itemsRefreshed, this);\n    this.#dispatcher.addEventListener(View.SharedStorageItemsDispatcher.Events.ItemDeleted, this.#itemDeleted, this);\n    this.#dispatcher.addEventListener(View.SharedStorageItemsDispatcher.Events.ItemEdited, this.#itemEdited, this);\n  }\n\n  dispose(): void {\n    this.#dispatcher.removeEventListener(\n        View.SharedStorageItemsDispatcher.Events.ItemsCleared, this.#itemsCleared, this);\n    this.#dispatcher.removeEventListener(\n        View.SharedStorageItemsDispatcher.Events.FilteredItemsCleared, this.#filteredItemsCleared, this);\n    this.#dispatcher.removeEventListener(\n        View.SharedStorageItemsDispatcher.Events.ItemsRefreshed, this.#itemsRefreshed, this);\n    this.#dispatcher.removeEventListener(View.SharedStorageItemsDispatcher.Events.ItemDeleted, this.#itemDeleted, this);\n    this.#dispatcher.removeEventListener(View.SharedStorageItemsDispatcher.Events.ItemEdited, this.#itemEdited, this);\n  }\n\n  get deletedKeys(): Array<String> {\n    return this.#deletedKeys;\n  }\n\n  get editedEvents(): Array<View.SharedStorageItemsDispatcher.ItemEditedEvent> {\n    return this.#editedEvents;\n  }\n\n  resetRefreshed(): void {\n    this.#refreshed = false;\n  }\n\n  #itemsCleared(): void {\n    this.#cleared = true;\n  }\n\n  #filteredItemsCleared(): void {\n    this.#filteredCleared = true;\n  }\n\n  #itemsRefreshed(): void {\n    this.#refreshed = true;\n  }\n\n  #itemDeleted(event: Common.EventTarget.EventTargetEvent<View.SharedStorageItemsDispatcher.ItemDeletedEvent>): void {\n    this.#deletedKeys.push(event.data.key);\n  }\n\n  #itemEdited(event: Common.EventTarget.EventTargetEvent<View.SharedStorageItemsDispatcher.ItemEditedEvent>): void {\n    this.#editedEvents.push(event.data);\n  }\n\n  async waitForItemsCleared(): Promise<void> {\n    if (!this.#cleared) {\n      await this.#dispatcher.once(View.SharedStorageItemsDispatcher.Events.ItemsCleared);\n    }\n    this.#cleared = true;\n  }\n\n  async waitForFilteredItemsCleared(): Promise<void> {\n    if (!this.#filteredCleared) {\n      await this.#dispatcher.once(View.SharedStorageItemsDispatcher.Events.FilteredItemsCleared);\n    }\n    this.#filteredCleared = true;\n  }\n\n  async waitForItemsRefreshed(): Promise<void> {\n    if (!this.#refreshed) {\n      await this.#dispatcher.once(View.SharedStorageItemsDispatcher.Events.ItemsRefreshed);\n    }\n    this.#refreshed = true;\n  }\n\n  async waitForItemsDeletedTotal(total: number): Promise<void> {\n    while (this.#deletedKeys.length < total) {\n      await this.#dispatcher.once(View.SharedStorageItemsDispatcher.Events.ItemDeleted);\n    }\n  }\n\n  async waitForItemsEditedTotal(total: number): Promise<void> {\n    while (this.#editedEvents.length < total) {\n      await this.#dispatcher.once(View.SharedStorageItemsDispatcher.Events.ItemEdited);\n    }\n  }\n}\n\nfunction selectNodeByKey(\n    dataGrid: DataGrid.DataGrid.DataGridImpl<Protocol.Storage.SharedStorageEntry>,\n    key: string|null): DataGrid.DataGrid.DataGridNode<Protocol.Storage.SharedStorageEntry>|null {\n  for (const node of dataGrid.rootNode().children) {\n    if (node?.data?.key === key) {\n      node.select();\n      return node;\n    }\n  }\n  return null;\n}\n\nfunction getCellElementFromNodeAndColumnId(\n    dataGrid: DataGrid.DataGrid.DataGridImpl<Protocol.Storage.SharedStorageEntry>,\n    node: DataGrid.DataGrid.DataGridNode<Protocol.Storage.SharedStorageEntry>, columnId: string): Element|null {\n  const column = dataGrid.columns[columnId];\n  const cellIndex = dataGrid.visibleColumnsArray.indexOf(column);\n  return node.element()?.children[cellIndex] || null;\n}\n\ndescribeWithMockConnection('SharedStorageItemsView', function() {\n  let target: SDK.Target.Target;\n  let sharedStorageModel: Resources.SharedStorageModel.SharedStorageModel|null;\n  let sharedStorage: Resources.SharedStorageModel.SharedStorageForOrigin;\n\n  const TEST_ORIGIN = 'http://a.test';\n\n  const METADATA = {\n    creationTime: 100 as Protocol.Network.TimeSinceEpoch,\n    length: 3,\n    remainingBudget: 2.5,\n    bytesUsed: 30,\n  } as Protocol.Storage.SharedStorageMetadata;\n\n  const METADATA_NO_ENTRIES = {\n    creationTime: 100 as Protocol.Network.TimeSinceEpoch,\n    length: 0,\n    remainingBudget: 2.5,\n    bytesUsed: 0,\n  } as Protocol.Storage.SharedStorageMetadata;\n\n  const METADATA_2_ENTRIES = {\n    creationTime: 100 as Protocol.Network.TimeSinceEpoch,\n    length: 2,\n    remainingBudget: 2.5,\n    bytesUsed: 20,\n  } as Protocol.Storage.SharedStorageMetadata;\n\n  const METADATA_4_ENTRIES = {\n    creationTime: 100 as Protocol.Network.TimeSinceEpoch,\n    length: 4,\n    remainingBudget: 2.5,\n    bytesUsed: 38,\n  } as Protocol.Storage.SharedStorageMetadata;\n\n  const ENTRIES = [\n    {\n      key: 'key1',\n      value: 'a',\n    } as Protocol.Storage.SharedStorageEntry,\n    {\n      key: 'key2',\n      value: 'b',\n    } as Protocol.Storage.SharedStorageEntry,\n    {\n      key: 'key3',\n      value: 'c',\n    } as Protocol.Storage.SharedStorageEntry,\n  ];\n\n  const ENTRIES_1 = [\n    {\n      key: 'key2',\n      value: 'b',\n    } as Protocol.Storage.SharedStorageEntry,\n  ];\n\n  const ENTRIES_2 = [\n    {\n      key: 'key1',\n      value: 'a',\n    } as Protocol.Storage.SharedStorageEntry,\n    {\n      key: 'key3',\n      value: 'c',\n    } as Protocol.Storage.SharedStorageEntry,\n  ];\n\n  const ENTRIES_KEY_EDITED_1 = [\n    {\n      key: 'key1',\n      value: 'a',\n    } as Protocol.Storage.SharedStorageEntry,\n    {\n      key: 'key0',\n      value: 'b',\n    } as Protocol.Storage.SharedStorageEntry,\n    {\n      key: 'key3',\n      value: 'c',\n    } as Protocol.Storage.SharedStorageEntry,\n  ];\n\n  const ENTRIES_KEY_EDITED_2 = [\n    {\n      key: 'key1',\n      value: 'b',\n    } as Protocol.Storage.SharedStorageEntry,\n    {\n      key: 'key3',\n      value: 'c',\n    } as Protocol.Storage.SharedStorageEntry,\n  ];\n\n  const ENTRIES_VALUE_EDITED = [\n    {\n      key: 'key1',\n      value: 'a',\n    } as Protocol.Storage.SharedStorageEntry,\n    {\n      key: 'key2',\n      value: 'd',\n    } as Protocol.Storage.SharedStorageEntry,\n    {\n      key: 'key3',\n      value: 'c',\n    } as Protocol.Storage.SharedStorageEntry,\n  ];\n\n  const ENTRIES_NEW_KEY = [\n    {\n      key: 'key1',\n      value: 'a',\n    } as Protocol.Storage.SharedStorageEntry,\n    {\n      key: 'key2',\n      value: 'b',\n    } as Protocol.Storage.SharedStorageEntry,\n    {\n      key: 'key3',\n      value: 'c',\n    } as Protocol.Storage.SharedStorageEntry,\n    {\n      key: 'key4',\n      value: '',\n    } as Protocol.Storage.SharedStorageEntry,\n  ];\n\n  beforeEach(() => {\n    target = createTarget();\n    sharedStorageModel = target.model(Resources.SharedStorageModel.SharedStorageModel);\n    assert.exists(sharedStorageModel);\n    sharedStorage = new Resources.SharedStorageModel.SharedStorageForOrigin(sharedStorageModel, TEST_ORIGIN);\n    assert.strictEqual(sharedStorage.securityOrigin, TEST_ORIGIN);\n  });\n\n  it('displays metadata and entries', async () => {\n    assert.exists(sharedStorageModel);\n    sinon.stub(sharedStorageModel.storageAgent, 'invoke_getSharedStorageMetadata')\n        .withArgs({ownerOrigin: TEST_ORIGIN})\n        .resolves({\n          metadata: METADATA,\n          getError: () => undefined,\n        });\n    sinon.stub(sharedStorageModel.storageAgent, 'invoke_getSharedStorageEntries')\n        .withArgs({ownerOrigin: TEST_ORIGIN})\n        .resolves({\n          entries: ENTRIES,\n          getError: () => undefined,\n        });\n\n    const view = await View.SharedStorageItemsView.createView(sharedStorage);\n\n    const itemsListener = new SharedStorageItemsListener(view.sharedStorageItemsDispatcher);\n    const refreshedPromise = itemsListener.waitForItemsRefreshed();\n\n    view.markAsRoot();\n    view.show(document.body);\n    await refreshedPromise;\n\n    assert.deepEqual(view.getEntriesForTesting(), ENTRIES);\n\n    const metadataView = view.innerSplitWidget.sidebarWidget()?.contentElement.firstChild as\n        ApplicationComponents.SharedStorageMetadataView.SharedStorageMetadataView;\n    assert.exists(metadataView);\n\n    assert.isNotNull(metadataView.shadowRoot);\n    await coordinator.done();\n\n    const keys = getCleanTextContentFromElements(metadataView.shadowRoot, 'devtools-report-key');\n    assert.deepEqual(keys, [\n      'Origin',\n      'Creation Time',\n      'Number of Entries',\n      'Number of Bytes Used',\n      'Entropy Budget for Fenced Frames',\n    ]);\n\n    const values = getCleanTextContentFromElements(metadataView.shadowRoot, 'devtools-report-value');\n    assert.deepEqual(values, [\n      TEST_ORIGIN,\n      (new Date(100 * 1e3)).toLocaleString(),\n      '3',\n      '30',\n      '2.5',\n    ]);\n\n    view.detach();\n  });\n\n  it('displays metadata with placeholder message if origin is not using API', async () => {\n    assert.exists(sharedStorageModel);\n    sinon.stub(sharedStorage, 'getMetadata').resolves(null);\n    sinon.stub(sharedStorageModel.storageAgent, 'invoke_getSharedStorageEntries')\n        .withArgs({ownerOrigin: TEST_ORIGIN})\n        .resolves({\n          entries: [],\n          getError: () => undefined,\n        });\n\n    const view = await View.SharedStorageItemsView.createView(sharedStorage);\n\n    const itemsListener = new SharedStorageItemsListener(view.sharedStorageItemsDispatcher);\n    const refreshedPromise = itemsListener.waitForItemsRefreshed();\n\n    view.markAsRoot();\n    view.show(document.body);\n    await refreshedPromise;\n\n    assert.strictEqual(view.getEntriesForTesting().length, 0);\n\n    const metadataView = view.innerSplitWidget.sidebarWidget()?.contentElement.firstChild as\n        ApplicationComponents.SharedStorageMetadataView.SharedStorageMetadataView;\n    assert.exists(metadataView);\n\n    assert.isNotNull(metadataView.shadowRoot);\n    await coordinator.done();\n\n    const keys = getCleanTextContentFromElements(metadataView.shadowRoot, 'devtools-report-key');\n    assert.deepEqual(keys, [\n      'Origin',\n      'Creation Time',\n      'Number of Entries',\n      'Number of Bytes Used',\n      'Entropy Budget for Fenced Frames',\n    ]);\n\n    const values = getCleanTextContentFromElements(metadataView.shadowRoot, 'devtools-report-value');\n    assert.deepEqual(values, [\n      TEST_ORIGIN,\n      'Not yet created',\n      '0',\n      '0',\n      '0',\n    ]);\n\n    view.detach();\n  });\n\n  it('has placeholder sidebar when there are no entries', async () => {\n    assert.exists(sharedStorageModel);\n    sinon.stub(sharedStorageModel.storageAgent, 'invoke_getSharedStorageMetadata')\n        .withArgs({ownerOrigin: TEST_ORIGIN})\n        .resolves({\n          metadata: METADATA_NO_ENTRIES,\n          getError: () => undefined,\n        });\n    sinon.stub(sharedStorageModel.storageAgent, 'invoke_getSharedStorageEntries')\n        .withArgs({ownerOrigin: TEST_ORIGIN})\n        .resolves({\n          entries: [],\n          getError: () => undefined,\n        });\n\n    const view = await View.SharedStorageItemsView.createView(sharedStorage);\n\n    const itemsListener = new SharedStorageItemsListener(view.sharedStorageItemsDispatcher);\n    const refreshedPromise = itemsListener.waitForItemsRefreshed();\n\n    view.markAsRoot();\n    view.show(document.body);\n    await refreshedPromise;\n\n    assert.notInstanceOf(view.outerSplitWidget.sidebarWidget(), UI.SearchableView.SearchableView);\n    assert.exists(view.contentElement.querySelector('.placeholder'));\n\n    view.detach();\n  });\n\n  it('updates sidebarWidget upon receiving SelectedNode Event', async () => {\n    assert.exists(sharedStorageModel);\n    sinon.stub(sharedStorageModel.storageAgent, 'invoke_getSharedStorageMetadata')\n        .withArgs({ownerOrigin: TEST_ORIGIN})\n        .resolves({\n          metadata: METADATA,\n          getError: () => undefined,\n        });\n    sinon.stub(sharedStorageModel.storageAgent, 'invoke_getSharedStorageEntries')\n        .withArgs({ownerOrigin: TEST_ORIGIN})\n        .resolves({\n          entries: ENTRIES,\n          getError: () => undefined,\n        });\n\n    const view = await View.SharedStorageItemsView.createView(sharedStorage);\n\n    const itemsListener = new SharedStorageItemsListener(view.sharedStorageItemsDispatcher);\n    const refreshedPromise = itemsListener.waitForItemsRefreshed();\n\n    view.markAsRoot();\n    view.show(document.body);\n    await refreshedPromise;\n\n    // Select the second row.\n    assert.exists(selectNodeByKey(view.dataGrid, 'key2'));\n    await raf();\n\n    assert.instanceOf(view.outerSplitWidget.sidebarWidget(), UI.SearchableView.SearchableView);\n\n    view.detach();\n  });\n\n  it('refreshes when \"Refresh\" is clicked', async () => {\n    assert.exists(sharedStorageModel);\n    const getMetadataSpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_getSharedStorageMetadata').resolves({\n      metadata: METADATA,\n      getError: () => undefined,\n    });\n    const getEntriesSpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_getSharedStorageEntries').resolves({\n      entries: ENTRIES,\n      getError: () => undefined,\n    });\n\n    // Creating will cause `getMetadata()` to be called.\n    const view = await View.SharedStorageItemsView.createView(sharedStorage);\n    await coordinator.done({waitForWork: true});\n    assert.isTrue(getMetadataSpy.calledOnceWithExactly({ownerOrigin: TEST_ORIGIN}));\n\n    const itemsListener = new SharedStorageItemsListener(view.sharedStorageItemsDispatcher);\n    const refreshedPromise1 = itemsListener.waitForItemsRefreshed();\n\n    // Showing will cause `getMetadata()` and `getEntries()` to be called.\n    view.markAsRoot();\n    view.show(document.body);\n    await refreshedPromise1;\n\n    assert.isTrue(getMetadataSpy.calledTwice);\n    assert.isTrue(getMetadataSpy.alwaysCalledWithExactly({ownerOrigin: TEST_ORIGIN}));\n    assert.isTrue(getEntriesSpy.calledOnceWithExactly({ownerOrigin: TEST_ORIGIN}));\n\n    assert.deepEqual(view.getEntriesForTesting(), ENTRIES);\n\n    // Clicking \"Refresh\" will cause `getMetadata()` and `getEntries()` to be called.\n    itemsListener.resetRefreshed();\n    const refreshedPromise2 = itemsListener.waitForItemsRefreshed();\n    dispatchClickEvent(view.refreshButton.element);\n    await raf();\n    await refreshedPromise2;\n\n    assert.isTrue(getMetadataSpy.calledThrice);\n    assert.isTrue(getMetadataSpy.alwaysCalledWithExactly({ownerOrigin: TEST_ORIGIN}));\n    assert.isTrue(getEntriesSpy.calledTwice);\n    assert.isTrue(getEntriesSpy.alwaysCalledWithExactly({ownerOrigin: TEST_ORIGIN}));\n\n    assert.deepEqual(view.getEntriesForTesting(), ENTRIES);\n\n    view.detach();\n  });\n\n  it('clears entries when \"Delete All\" is clicked', async () => {\n    assert.exists(sharedStorageModel);\n    const getMetadataSpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_getSharedStorageMetadata');\n    getMetadataSpy.onCall(0).resolves({\n      metadata: METADATA,\n      getError: () => undefined,\n    });\n    getMetadataSpy.onCall(1).resolves({\n      metadata: METADATA,\n      getError: () => undefined,\n    });\n    getMetadataSpy.onCall(2).resolves({\n      metadata: METADATA_NO_ENTRIES,\n      getError: () => undefined,\n    });\n    const getEntriesSpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_getSharedStorageEntries');\n    getEntriesSpy.onCall(0).resolves({\n      entries: ENTRIES,\n      getError: () => undefined,\n    });\n    getEntriesSpy.onCall(1).resolves({\n      entries: [],\n      getError: () => undefined,\n    });\n    const clearSpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_clearSharedStorageEntries').resolves({\n      getError: () => undefined,\n    });\n\n    // Creating will cause `getMetadata()` to be called.\n    const view = await View.SharedStorageItemsView.createView(sharedStorage);\n    await coordinator.done({waitForWork: true});\n    assert.isTrue(getMetadataSpy.calledOnceWithExactly({ownerOrigin: TEST_ORIGIN}));\n\n    const itemsListener = new SharedStorageItemsListener(view.sharedStorageItemsDispatcher);\n    const refreshedPromise = itemsListener.waitForItemsRefreshed();\n\n    // Showing will cause `getMetadata()` and `getEntries()` to be called.\n    view.markAsRoot();\n    view.show(document.body);\n    await refreshedPromise;\n\n    assert.isTrue(getMetadataSpy.calledTwice);\n    assert.isTrue(getMetadataSpy.alwaysCalledWithExactly({ownerOrigin: TEST_ORIGIN}));\n    assert.isTrue(getEntriesSpy.calledOnceWithExactly({ownerOrigin: TEST_ORIGIN}));\n\n    assert.deepEqual(view.getEntriesForTesting(), ENTRIES);\n\n    // Clicking \"Delete All\" will cause `clear()`, `getMetadata()`, and `getEntries()` to be called.\n    const clearedPromise = itemsListener.waitForItemsCleared();\n    dispatchClickEvent(view.deleteAllButton.element);\n    await raf();\n    await clearedPromise;\n\n    assert.isTrue(clearSpy.calledOnceWithExactly({ownerOrigin: TEST_ORIGIN}));\n    assert.isTrue(getMetadataSpy.calledThrice);\n    assert.isTrue(getMetadataSpy.alwaysCalledWithExactly({ownerOrigin: TEST_ORIGIN}));\n    assert.isTrue(getEntriesSpy.calledTwice);\n    assert.isTrue(getEntriesSpy.alwaysCalledWithExactly({ownerOrigin: TEST_ORIGIN}));\n\n    assert.deepEqual(view.getEntriesForTesting(), []);\n\n    view.detach();\n  });\n\n  it('clears filtered entries when \"Delete All\" is clicked with a filter set', async () => {\n    assert.exists(sharedStorageModel);\n    const getMetadataSpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_getSharedStorageMetadata');\n    getMetadataSpy.onCall(0).resolves({\n      metadata: METADATA,\n      getError: () => undefined,\n    });\n    getMetadataSpy.onCall(1).resolves({\n      metadata: METADATA,\n      getError: () => undefined,\n    });\n    getMetadataSpy.onCall(2).resolves({\n      metadata: METADATA,\n      getError: () => undefined,\n    });\n    getMetadataSpy.onCall(3).resolves({\n      metadata: METADATA_2_ENTRIES,\n      getError: () => undefined,\n    });\n    getMetadataSpy.onCall(4).resolves({\n      metadata: METADATA_2_ENTRIES,\n      getError: () => undefined,\n    });\n    const getEntriesSpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_getSharedStorageEntries');\n    getEntriesSpy.onCall(0).resolves({\n      entries: ENTRIES,\n      getError: () => undefined,\n    });\n    getEntriesSpy.onCall(1).resolves({\n      entries: ENTRIES,\n      getError: () => undefined,\n    });\n    getEntriesSpy.onCall(2).resolves({\n      entries: ENTRIES_2,\n      getError: () => undefined,\n    });\n    getEntriesSpy.onCall(3).resolves({\n      entries: ENTRIES_2,\n      getError: () => undefined,\n    });\n    const deleteEntrySpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_deleteSharedStorageEntry').resolves({\n      getError: () => undefined,\n    });\n\n    // Creating will cause `getMetadata()` to be called.\n    const view = await View.SharedStorageItemsView.createView(sharedStorage);\n    await coordinator.done({waitForWork: true});\n    assert.isTrue(getMetadataSpy.calledOnceWithExactly({ownerOrigin: TEST_ORIGIN}));\n\n    const itemsListener = new SharedStorageItemsListener(view.sharedStorageItemsDispatcher);\n    const refreshedPromise1 = itemsListener.waitForItemsRefreshed();\n\n    // Showing will cause `getMetadata()` and `getEntries()` to be called.\n    view.markAsRoot();\n    view.show(document.body);\n    await refreshedPromise1;\n\n    assert.isTrue(getMetadataSpy.calledTwice);\n    assert.isTrue(getMetadataSpy.alwaysCalledWithExactly({ownerOrigin: TEST_ORIGIN}));\n    assert.isTrue(getEntriesSpy.calledOnceWithExactly({ownerOrigin: TEST_ORIGIN}));\n\n    assert.deepEqual(view.getEntriesForTesting(), ENTRIES);\n\n    // Adding a filter to the text box will cause `getMetadata()`, and `getEntries()` to be called.\n    itemsListener.resetRefreshed();\n    const refreshedPromise2 = itemsListener.waitForItemsRefreshed();\n    view.filterItem.dispatchEventToListeners(UI.Toolbar.ToolbarInput.Event.TextChanged, 'b');\n    await raf();\n    await refreshedPromise2;\n\n    assert.isTrue(getMetadataSpy.calledThrice);\n    assert.isTrue(getMetadataSpy.alwaysCalledWithExactly({ownerOrigin: TEST_ORIGIN}));\n    assert.isTrue(getEntriesSpy.calledTwice);\n    assert.isTrue(getEntriesSpy.alwaysCalledWithExactly({ownerOrigin: TEST_ORIGIN}));\n\n    // Only the filtered entries are displayed.\n    assert.deepEqual(view.getEntriesForTesting(), ENTRIES_1);\n\n    // Clicking \"Delete All\" will cause `deleteEntry()`, `getMetadata()`, and `getEntries()` to be called.\n    const clearedPromise = itemsListener.waitForFilteredItemsCleared();\n    dispatchClickEvent(view.deleteAllButton.element);\n    await raf();\n    await clearedPromise;\n\n    assert.isTrue(deleteEntrySpy.calledOnceWithExactly({ownerOrigin: TEST_ORIGIN, key: 'key2'}));\n    assert.strictEqual(getMetadataSpy.callCount, 4);\n    assert.isTrue(getMetadataSpy.alwaysCalledWithExactly({ownerOrigin: TEST_ORIGIN}));\n    assert.isTrue(getEntriesSpy.calledThrice);\n    assert.isTrue(getEntriesSpy.alwaysCalledWithExactly({ownerOrigin: TEST_ORIGIN}));\n\n    // The filtered entries are cleared.\n    assert.deepEqual(view.getEntriesForTesting(), []);\n\n    // Changing the filter in the text box will cause `getMetadata()`, and `getEntries()` to be called.\n    itemsListener.resetRefreshed();\n    const refreshedPromise3 = itemsListener.waitForItemsRefreshed();\n    view.filterItem.dispatchEventToListeners(UI.Toolbar.ToolbarInput.Event.TextChanged, '');\n    await raf();\n    await refreshedPromise3;\n\n    assert.strictEqual(getMetadataSpy.callCount, 5);\n    assert.isTrue(getMetadataSpy.alwaysCalledWithExactly({ownerOrigin: TEST_ORIGIN}));\n    assert.strictEqual(getEntriesSpy.callCount, 4);\n    assert.isTrue(getEntriesSpy.alwaysCalledWithExactly({ownerOrigin: TEST_ORIGIN}));\n\n    assert.deepEqual(view.getEntriesForTesting(), ENTRIES_2);\n\n    view.detach();\n  });\n\n  it('deletes selected entry when \"Delete Selected\" is clicked', async () => {\n    assert.exists(sharedStorageModel);\n    const getMetadataSpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_getSharedStorageMetadata');\n    getMetadataSpy.onCall(0).resolves({\n      metadata: METADATA,\n      getError: () => undefined,\n    });\n    getMetadataSpy.onCall(1).resolves({\n      metadata: METADATA,\n      getError: () => undefined,\n    });\n    getMetadataSpy.onCall(2).resolves({\n      metadata: METADATA_2_ENTRIES,\n      getError: () => undefined,\n    });\n    const getEntriesSpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_getSharedStorageEntries');\n    getEntriesSpy.onCall(0).resolves({\n      entries: ENTRIES,\n      getError: () => undefined,\n    });\n    getEntriesSpy.onCall(1).resolves({\n      entries: [],\n      getError: () => undefined,\n    });\n    const deleteEntrySpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_deleteSharedStorageEntry').resolves({\n      getError: () => undefined,\n    });\n\n    // Creating will cause `getMetadata()` to be called.\n    const view = await View.SharedStorageItemsView.createView(sharedStorage);\n    await coordinator.done({waitForWork: true});\n    assert.isTrue(getMetadataSpy.calledOnceWithExactly({ownerOrigin: TEST_ORIGIN}));\n\n    const itemsListener = new SharedStorageItemsListener(view.sharedStorageItemsDispatcher);\n    const refreshedPromise = itemsListener.waitForItemsRefreshed();\n\n    // Showing will cause `getMetadata()` and `getEntries()` to be called.\n    view.markAsRoot();\n    view.show(document.body);\n    await refreshedPromise;\n\n    assert.isTrue(getMetadataSpy.calledTwice);\n    assert.isTrue(getMetadataSpy.alwaysCalledWithExactly({ownerOrigin: TEST_ORIGIN}));\n    assert.isTrue(getEntriesSpy.calledOnceWithExactly({ownerOrigin: TEST_ORIGIN}));\n\n    assert.deepEqual(view.getEntriesForTesting(), ENTRIES);\n\n    // Select the second row.\n    assert.exists(selectNodeByKey(view.dataGrid, 'key2'));\n    await raf();\n\n    // Clicking \"Delete Selected\" will cause `deleteEntry()`, `getMetadata()`, and `getEntries()` to be called.\n    const deletedPromise = itemsListener.waitForItemsDeletedTotal(1);\n    dispatchClickEvent(view.deleteSelectedButton.element);\n    await raf();\n    await deletedPromise;\n\n    assert.isTrue(deleteEntrySpy.calledOnceWithExactly({ownerOrigin: TEST_ORIGIN, key: 'key2'}));\n    assert.isTrue(getMetadataSpy.calledThrice);\n    assert.isTrue(getMetadataSpy.alwaysCalledWithExactly({ownerOrigin: TEST_ORIGIN}));\n    assert.isTrue(getEntriesSpy.calledTwice);\n    assert.isTrue(getEntriesSpy.alwaysCalledWithExactly({ownerOrigin: TEST_ORIGIN}));\n\n    assert.deepEqual(view.getEntriesForTesting(), []);\n    assert.deepEqual(itemsListener.deletedKeys, ['key2']);\n\n    view.detach();\n  });\n\n  it('edits key of selected entry to a non-preexisting key', async () => {\n    assert.exists(sharedStorageModel);\n    const getMetadataSpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_getSharedStorageMetadata');\n    getMetadataSpy.onCall(0).resolves({\n      metadata: METADATA,\n      getError: () => undefined,\n    });\n    getMetadataSpy.onCall(1).resolves({\n      metadata: METADATA,\n      getError: () => undefined,\n    });\n    getMetadataSpy.onCall(2).resolves({\n      metadata: METADATA,\n      getError: () => undefined,\n    });\n    const getEntriesSpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_getSharedStorageEntries');\n    getEntriesSpy.onCall(0).resolves({\n      entries: ENTRIES,\n      getError: () => undefined,\n    });\n    getEntriesSpy.onCall(1).resolves({\n      entries: ENTRIES_KEY_EDITED_1,\n      getError: () => undefined,\n    });\n    const deleteEntrySpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_deleteSharedStorageEntry').resolves({\n      getError: () => undefined,\n    });\n    const setEntrySpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_setSharedStorageEntry').resolves({\n      getError: () => undefined,\n    });\n\n    // Creating will cause `getMetadata()` to be called.\n    const view = await View.SharedStorageItemsView.createView(sharedStorage);\n    await coordinator.done({waitForWork: true});\n    assert.isTrue(getMetadataSpy.calledOnceWithExactly({ownerOrigin: TEST_ORIGIN}));\n\n    const itemsListener = new SharedStorageItemsListener(view.sharedStorageItemsDispatcher);\n    const refreshedPromise = itemsListener.waitForItemsRefreshed();\n\n    // Showing will cause `getMetadata()` and `getEntries()` to be called.\n    view.markAsRoot();\n    view.show(document.body);\n    await refreshedPromise;\n\n    assert.isTrue(getMetadataSpy.calledTwice);\n    assert.isTrue(getMetadataSpy.alwaysCalledWithExactly({ownerOrigin: TEST_ORIGIN}));\n    assert.isTrue(getEntriesSpy.calledOnceWithExactly({ownerOrigin: TEST_ORIGIN}));\n\n    assert.deepEqual(view.getEntriesForTesting(), ENTRIES);\n\n    // Select the second row.\n    const node = selectNodeByKey(view.dataGrid, 'key2');\n    assert.exists(node);\n    await raf();\n\n    const selectedNode = node as DataGrid.DataGrid.DataGridNode<Protocol.Storage.SharedStorageEntry>;\n    view.dataGrid.startEditingNextEditableColumnOfDataGridNode(selectedNode, 'key', true);\n\n    const cellElement = getCellElementFromNodeAndColumnId(view.dataGrid, selectedNode, 'key');\n    assert.exists(cellElement);\n\n    //  Editing a key will cause `deleteEntry()`, `setEntry()`, `getMetadata()`, and `getEntries()` to be called.\n    const editedPromise = itemsListener.waitForItemsEditedTotal(1);\n    cellElement.textContent = 'key0';\n    dispatchKeyDownEvent(cellElement, {key: 'Enter'});\n    await raf();\n    await editedPromise;\n\n    assert.isTrue(deleteEntrySpy.calledOnceWithExactly({ownerOrigin: TEST_ORIGIN, key: 'key2'}));\n    assert.isTrue(\n        setEntrySpy.calledOnceWithExactly({ownerOrigin: TEST_ORIGIN, key: 'key0', value: 'b', ignoreIfPresent: false}));\n    assert.isTrue(getMetadataSpy.calledThrice);\n    assert.isTrue(getMetadataSpy.alwaysCalledWithExactly({ownerOrigin: TEST_ORIGIN}));\n    assert.isTrue(getEntriesSpy.calledTwice);\n    assert.isTrue(getEntriesSpy.alwaysCalledWithExactly({ownerOrigin: TEST_ORIGIN}));\n\n    assert.deepEqual(view.getEntriesForTesting(), ENTRIES_KEY_EDITED_1);\n    assert.deepEqual(itemsListener.editedEvents, [\n      {columnIdentifier: 'key', oldText: 'key2', newText: 'key0'} as View.SharedStorageItemsDispatcher.ItemEditedEvent,\n    ]);\n\n    view.detach();\n  });\n\n  it('edits key of selected entry to a preexisting key', async () => {\n    assert.exists(sharedStorageModel);\n    const getMetadataSpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_getSharedStorageMetadata');\n    getMetadataSpy.onCall(0).resolves({\n      metadata: METADATA,\n      getError: () => undefined,\n    });\n    getMetadataSpy.onCall(1).resolves({\n      metadata: METADATA,\n      getError: () => undefined,\n    });\n    getMetadataSpy.onCall(2).resolves({\n      metadata: METADATA_2_ENTRIES,\n      getError: () => undefined,\n    });\n    const getEntriesSpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_getSharedStorageEntries');\n    getEntriesSpy.onCall(0).resolves({\n      entries: ENTRIES,\n      getError: () => undefined,\n    });\n    getEntriesSpy.onCall(1).resolves({\n      entries: ENTRIES_KEY_EDITED_2,\n      getError: () => undefined,\n    });\n    const deleteEntrySpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_deleteSharedStorageEntry').resolves({\n      getError: () => undefined,\n    });\n    const setEntrySpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_setSharedStorageEntry').resolves({\n      getError: () => undefined,\n    });\n\n    // Creating will cause `getMetadata()` to be called.\n    const view = await View.SharedStorageItemsView.createView(sharedStorage);\n    await coordinator.done({waitForWork: true});\n    assert.isTrue(getMetadataSpy.calledOnceWithExactly({ownerOrigin: TEST_ORIGIN}));\n\n    const itemsListener = new SharedStorageItemsListener(view.sharedStorageItemsDispatcher);\n    const refreshedPromise = itemsListener.waitForItemsRefreshed();\n\n    // Showing will cause `getMetadata()` and `getEntries()` to be called.\n    view.markAsRoot();\n    view.show(document.body);\n    await refreshedPromise;\n\n    assert.isTrue(getMetadataSpy.calledTwice);\n    assert.isTrue(getMetadataSpy.alwaysCalledWithExactly({ownerOrigin: TEST_ORIGIN}));\n    assert.isTrue(getEntriesSpy.calledOnceWithExactly({ownerOrigin: TEST_ORIGIN}));\n\n    assert.deepEqual(view.getEntriesForTesting(), ENTRIES);\n\n    // Select the second row.\n    const node = selectNodeByKey(view.dataGrid, 'key2');\n    assert.exists(node);\n    await raf();\n\n    const selectedNode = node as DataGrid.DataGrid.DataGridNode<Protocol.Storage.SharedStorageEntry>;\n    view.dataGrid.startEditingNextEditableColumnOfDataGridNode(selectedNode, 'key', true);\n\n    const cellElement = getCellElementFromNodeAndColumnId(view.dataGrid, selectedNode, 'key');\n    assert.exists(cellElement);\n\n    // Editing a key will cause `deleteEntry()`, `setEntry()`, `getMetadata()`, and `getEntries()` to be called.\n    const editedPromise = itemsListener.waitForItemsEditedTotal(1);\n    cellElement.textContent = 'key1';\n    dispatchKeyDownEvent(cellElement, {key: 'Enter'});\n    await raf();\n    await editedPromise;\n\n    assert.isTrue(deleteEntrySpy.calledOnceWithExactly({ownerOrigin: TEST_ORIGIN, key: 'key2'}));\n    assert.isTrue(\n        setEntrySpy.calledOnceWithExactly({ownerOrigin: TEST_ORIGIN, key: 'key1', value: 'b', ignoreIfPresent: false}));\n    assert.isTrue(getMetadataSpy.calledThrice);\n    assert.isTrue(getMetadataSpy.alwaysCalledWithExactly({ownerOrigin: TEST_ORIGIN}));\n    assert.isTrue(getEntriesSpy.calledTwice);\n    assert.isTrue(getEntriesSpy.alwaysCalledWithExactly({ownerOrigin: TEST_ORIGIN}));\n\n    assert.deepEqual(view.getEntriesForTesting(), ENTRIES_KEY_EDITED_2);\n    assert.deepEqual(itemsListener.editedEvents, [\n      {columnIdentifier: 'key', oldText: 'key2', newText: 'key1'} as View.SharedStorageItemsDispatcher.ItemEditedEvent,\n    ]);\n\n    // Verify that the preview loads.\n    assert.instanceOf(view.outerSplitWidget.sidebarWidget(), UI.SearchableView.SearchableView);\n\n    view.detach();\n  });\n\n  it('edits value of selected entry to a new value', async () => {\n    assert.exists(sharedStorageModel);\n    const getMetadataSpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_getSharedStorageMetadata');\n    getMetadataSpy.onCall(0).resolves({\n      metadata: METADATA,\n      getError: () => undefined,\n    });\n    getMetadataSpy.onCall(1).resolves({\n      metadata: METADATA,\n      getError: () => undefined,\n    });\n    getMetadataSpy.onCall(2).resolves({\n      metadata: METADATA,\n      getError: () => undefined,\n    });\n    const getEntriesSpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_getSharedStorageEntries');\n    getEntriesSpy.onCall(0).resolves({\n      entries: ENTRIES,\n      getError: () => undefined,\n    });\n    getEntriesSpy.onCall(1).resolves({\n      entries: ENTRIES_VALUE_EDITED,\n      getError: () => undefined,\n    });\n    const deleteEntrySpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_deleteSharedStorageEntry').resolves({\n      getError: () => undefined,\n    });\n    const setEntrySpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_setSharedStorageEntry').resolves({\n      getError: () => undefined,\n    });\n\n    // Creating will cause `getMetadata()` to be called.\n    const view = await View.SharedStorageItemsView.createView(sharedStorage);\n    await coordinator.done({waitForWork: true});\n    assert.isTrue(getMetadataSpy.calledOnceWithExactly({ownerOrigin: TEST_ORIGIN}));\n\n    const itemsListener = new SharedStorageItemsListener(view.sharedStorageItemsDispatcher);\n    const refreshedPromise = itemsListener.waitForItemsRefreshed();\n\n    // Showing will cause `getMetadata()` and `getEntries()` to be called.\n    view.markAsRoot();\n    view.show(document.body);\n    await refreshedPromise;\n\n    assert.isTrue(getMetadataSpy.calledTwice);\n    assert.isTrue(getMetadataSpy.alwaysCalledWithExactly({ownerOrigin: TEST_ORIGIN}));\n    assert.isTrue(getEntriesSpy.calledOnceWithExactly({ownerOrigin: TEST_ORIGIN}));\n\n    assert.deepEqual(view.getEntriesForTesting(), ENTRIES);\n\n    // Select the second row.\n    const node = selectNodeByKey(view.dataGrid, 'key2');\n    assert.exists(node);\n    await raf();\n\n    const selectedNode = node as DataGrid.DataGrid.DataGridNode<Protocol.Storage.SharedStorageEntry>;\n    view.dataGrid.startEditingNextEditableColumnOfDataGridNode(selectedNode, 'value', true);\n\n    const cellElement = getCellElementFromNodeAndColumnId(view.dataGrid, selectedNode, 'value');\n    assert.exists(cellElement);\n\n    // Editing a value will cause `setEntry()`, `getMetadata()`, and `getEntries()` to be called.\n    const editedPromise = itemsListener.waitForItemsEditedTotal(1);\n    cellElement.textContent = 'd';\n    dispatchKeyDownEvent(cellElement, {key: 'Enter'});\n    await raf();\n    await editedPromise;\n\n    assert.isTrue(deleteEntrySpy.notCalled);\n    assert.isTrue(\n        setEntrySpy.calledOnceWithExactly({ownerOrigin: TEST_ORIGIN, key: 'key2', value: 'd', ignoreIfPresent: false}));\n    assert.isTrue(getMetadataSpy.calledThrice);\n    assert.isTrue(getMetadataSpy.alwaysCalledWithExactly({ownerOrigin: TEST_ORIGIN}));\n    assert.isTrue(getEntriesSpy.calledTwice);\n    assert.isTrue(getEntriesSpy.alwaysCalledWithExactly({ownerOrigin: TEST_ORIGIN}));\n\n    assert.deepEqual(view.getEntriesForTesting(), ENTRIES_VALUE_EDITED);\n    assert.deepEqual(itemsListener.editedEvents, [\n      {columnIdentifier: 'value', oldText: 'b', newText: 'd'} as View.SharedStorageItemsDispatcher.ItemEditedEvent,\n    ]);\n\n    // Verify that the preview loads.\n    assert.instanceOf(view.outerSplitWidget.sidebarWidget(), UI.SearchableView.SearchableView);\n\n    view.detach();\n  });\n\n  it('adds an entry when the key cell of the empty data row is edited', async () => {\n    assert.exists(sharedStorageModel);\n    const getMetadataSpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_getSharedStorageMetadata');\n    getMetadataSpy.onCall(0).resolves({\n      metadata: METADATA,\n      getError: () => undefined,\n    });\n    getMetadataSpy.onCall(1).resolves({\n      metadata: METADATA,\n      getError: () => undefined,\n    });\n    getMetadataSpy.onCall(2).resolves({\n      metadata: METADATA_4_ENTRIES,\n      getError: () => undefined,\n    });\n    const getEntriesSpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_getSharedStorageEntries');\n    getEntriesSpy.onCall(0).resolves({\n      entries: ENTRIES,\n      getError: () => undefined,\n    });\n    getEntriesSpy.onCall(1).resolves({\n      entries: ENTRIES_NEW_KEY,\n      getError: () => undefined,\n    });\n    const deleteEntrySpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_deleteSharedStorageEntry').resolves({\n      getError: () => undefined,\n    });\n    const setEntrySpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_setSharedStorageEntry').resolves({\n      getError: () => undefined,\n    });\n\n    // Creating will cause `getMetadata()` to be called.\n    const view = await View.SharedStorageItemsView.createView(sharedStorage);\n    await coordinator.done({waitForWork: true});\n    assert.isTrue(getMetadataSpy.calledOnceWithExactly({ownerOrigin: TEST_ORIGIN}));\n\n    const itemsListener = new SharedStorageItemsListener(view.sharedStorageItemsDispatcher);\n    const refreshedPromise = itemsListener.waitForItemsRefreshed();\n\n    // Showing will cause `getMetadata()` and `getEntries()` to be called.\n    view.markAsRoot();\n    view.show(document.body);\n    await refreshedPromise;\n\n    assert.isTrue(getMetadataSpy.calledTwice);\n    assert.isTrue(getMetadataSpy.alwaysCalledWithExactly({ownerOrigin: TEST_ORIGIN}));\n    assert.isTrue(getEntriesSpy.calledOnceWithExactly({ownerOrigin: TEST_ORIGIN}));\n\n    assert.deepEqual(view.getEntriesForTesting(), ENTRIES);\n\n    // Select the empty (null) row.\n    const node = selectNodeByKey(view.dataGrid, null);\n    assert.exists(node);\n    await raf();\n\n    const selectedNode = node as DataGrid.DataGrid.DataGridNode<Protocol.Storage.SharedStorageEntry>;\n    view.dataGrid.startEditingNextEditableColumnOfDataGridNode(selectedNode, 'key', true);\n\n    const cellElement = getCellElementFromNodeAndColumnId(view.dataGrid, selectedNode, 'key');\n    assert.exists(cellElement);\n\n    // Editing a key will cause `deleteEntry()`, `setEntry()`, `getMetadata()`, and `getEntries()` to be called.\n    const editedPromise = itemsListener.waitForItemsEditedTotal(1);\n    cellElement.textContent = 'key4';\n    dispatchKeyDownEvent(cellElement, {key: 'Enter'});\n    await raf();\n    await editedPromise;\n\n    assert.isTrue(deleteEntrySpy.calledOnceWithExactly({ownerOrigin: TEST_ORIGIN, key: ''}));\n    assert.isTrue(\n        setEntrySpy.calledOnceWithExactly({ownerOrigin: TEST_ORIGIN, key: 'key4', value: '', ignoreIfPresent: false}));\n    assert.isTrue(getMetadataSpy.calledThrice);\n    assert.isTrue(getMetadataSpy.alwaysCalledWithExactly({ownerOrigin: TEST_ORIGIN}));\n    assert.isTrue(getEntriesSpy.calledTwice);\n    assert.isTrue(getEntriesSpy.alwaysCalledWithExactly({ownerOrigin: TEST_ORIGIN}));\n\n    assert.deepEqual(view.getEntriesForTesting(), ENTRIES_NEW_KEY);\n    assert.deepEqual(itemsListener.editedEvents, [\n      {columnIdentifier: 'key', oldText: '', newText: 'key4'} as View.SharedStorageItemsDispatcher.ItemEditedEvent,\n    ]);\n\n    // Verify that the preview loads.\n    assert.instanceOf(view.outerSplitWidget.sidebarWidget(), UI.SearchableView.SearchableView);\n\n    view.detach();\n  });\n\n  it('attempting to edit key of selected entry to an empty key cancels the edit', async () => {\n    assert.exists(sharedStorageModel);\n    const getMetadataSpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_getSharedStorageMetadata').resolves({\n      metadata: METADATA,\n      getError: () => undefined,\n    });\n    const getEntriesSpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_getSharedStorageEntries').resolves({\n      entries: ENTRIES,\n      getError: () => undefined,\n    });\n    const deleteEntrySpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_deleteSharedStorageEntry').resolves({\n      getError: () => undefined,\n    });\n    const setEntrySpy = sinon.stub(sharedStorageModel.storageAgent, 'invoke_setSharedStorageEntry').resolves({\n      getError: () => undefined,\n    });\n\n    // Creating will cause `getMetadata()` to be called.\n    const view = await View.SharedStorageItemsView.createView(sharedStorage);\n    await coordinator.done({waitForWork: true});\n    assert.isTrue(getMetadataSpy.calledOnceWithExactly({ownerOrigin: TEST_ORIGIN}));\n\n    const itemsListener = new SharedStorageItemsListener(view.sharedStorageItemsDispatcher);\n    const refreshedPromise1 = itemsListener.waitForItemsRefreshed();\n\n    // Showing will cause `getMetadata()` and `getEntries()` to be called.\n    view.markAsRoot();\n    view.show(document.body);\n    await refreshedPromise1;\n\n    assert.isTrue(getMetadataSpy.calledTwice);\n    assert.isTrue(getMetadataSpy.alwaysCalledWithExactly({ownerOrigin: TEST_ORIGIN}));\n    assert.isTrue(getEntriesSpy.calledOnceWithExactly({ownerOrigin: TEST_ORIGIN}));\n\n    assert.deepEqual(view.getEntriesForTesting(), ENTRIES);\n\n    // Select the second row.\n    const node = selectNodeByKey(view.dataGrid, 'key2');\n    assert.exists(node);\n    await raf();\n\n    const selectedNode = node as DataGrid.DataGrid.DataGridNode<Protocol.Storage.SharedStorageEntry>;\n    view.dataGrid.startEditingNextEditableColumnOfDataGridNode(selectedNode, 'key', true);\n\n    const cellElement = getCellElementFromNodeAndColumnId(view.dataGrid, selectedNode, 'key');\n    assert.exists(cellElement);\n\n    // Editing a key with the edit canceled will cause `getMetadata()` and `getEntries()` to be called.\n    itemsListener.resetRefreshed();\n    const refreshedPromise2 = itemsListener.waitForItemsRefreshed();\n    cellElement.textContent = '';\n    dispatchKeyDownEvent(cellElement, {key: 'Enter'});\n    await raf();\n    await refreshedPromise2;\n\n    assert.isTrue(deleteEntrySpy.notCalled);\n    assert.isTrue(setEntrySpy.notCalled);\n    assert.isTrue(getMetadataSpy.calledThrice);\n    assert.isTrue(getMetadataSpy.alwaysCalledWithExactly({ownerOrigin: TEST_ORIGIN}));\n    assert.isTrue(getEntriesSpy.calledTwice);\n    assert.isTrue(getEntriesSpy.alwaysCalledWithExactly({ownerOrigin: TEST_ORIGIN}));\n\n    assert.deepEqual(view.getEntriesForTesting(), ENTRIES);\n\n    // Verify that the preview loads.\n    assert.instanceOf(view.outerSplitWidget.sidebarWidget(), UI.SearchableView.SearchableView);\n\n    view.detach();\n  });\n});\n"]}