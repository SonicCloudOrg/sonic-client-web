{"version":3,"file":"ServiceWorkersView.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/application/ServiceWorkersView.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\n\nimport * as Application from './application.js';\n\ndescribeWithMockConnection('ServiceWorkersView', () => {\n  let target: SDK.Target.Target;\n  let view: Application.ServiceWorkersView.ServiceWorkersView;\n\n  beforeEach(() => {\n    const tabTarget = createTarget({type: SDK.Target.Type.Tab});\n    createTarget({parentTarget: tabTarget, subtype: 'prerender'});\n    target = createTarget({parentTarget: tabTarget});\n  });\n\n  afterEach(() => {\n    view.detach();\n  });\n\n  it('shows service worker registrations', async () => {\n    view = new Application.ServiceWorkersView.ServiceWorkersView();\n    view.markAsRoot();\n    view.show(document.body);\n    const serviceWorkersManager = target.model(SDK.ServiceWorkerManager.ServiceWorkerManager);\n    assert.exists(serviceWorkersManager);\n    const securityOriginManager = target.model(SDK.SecurityOriginManager.SecurityOriginManager);\n    assert.exists(securityOriginManager);\n    const ORIGIN = 'example.com';\n    sinon.stub(securityOriginManager, 'securityOrigins').returns([ORIGIN]);\n    const SCOPE_URL = 'SCOPE_URL';\n    serviceWorkersManager.dispatchEventToListeners(SDK.ServiceWorkerManager.Events.RegistrationUpdated, {\n      scopeURL: SCOPE_URL,\n      securityOrigin: ORIGIN,\n      versionsByMode: () => new Map(),\n      fingerprint: () => {},\n    } as SDK.ServiceWorkerManager.ServiceWorkerRegistration);\n\n    const sectionTitle = view.currentWorkersView.contentElement.querySelector('.report-section-title');\n    assert.exists(sectionTitle);\n    assert.strictEqual(sectionTitle.textContent, SCOPE_URL);\n  });\n\n  describe('router info', () => {\n    const registrationId = 'fake-sw-id' as Protocol.ServiceWorker.RegistrationID;\n    const origin = 'https://example.com';\n    const routerRules = [\n      {\n        condition: {urlPattern: '/foo/bar'},\n        source: ['network'],\n        id: 1,\n      },\n      {\n        condition: {urlPattern: '/baz'},\n        source: ['fetch-event'],\n        id: 2,\n      },\n    ];\n    let serviceWorkersManager: SDK.ServiceWorkerManager.ServiceWorkerManager|null;\n\n    const hasRouterField = () => {\n      return Array.from(view.currentWorkersView.contentElement.querySelectorAll('.report-field')).some(field => {\n        return field.querySelector('.report-field-name')?.textContent === 'Routers';\n      });\n    };\n\n    beforeEach(() => {\n      Application.ServiceWorkersView.setThrottleDisabledForDebugging(true);\n      view = new Application.ServiceWorkersView.ServiceWorkersView();\n      view.markAsRoot();\n      view.show(document.body);\n\n      serviceWorkersManager = target.model(SDK.ServiceWorkerManager.ServiceWorkerManager);\n      assert.exists(serviceWorkersManager);\n\n      const securityOriginManager = target.model(SDK.SecurityOriginManager.SecurityOriginManager);\n      assert.exists(securityOriginManager);\n      sinon.stub(securityOriginManager, 'securityOrigins').returns([origin]);\n    });\n\n    it('shows the router field if active version has at least one router rule', async () => {\n      const payload:\n          Protocol.ServiceWorker.ServiceWorkerRegistration = {registrationId, scopeURL: origin, isDeleted: false};\n      const registration: SDK.ServiceWorkerManager.ServiceWorkerRegistration =\n          new SDK.ServiceWorkerManager.ServiceWorkerRegistration(payload);\n\n      const versionId = 1;\n      const versionPayload: Protocol.ServiceWorker.ServiceWorkerVersion = {\n        registrationId,\n        versionId: versionId.toString(),\n        scriptURL: '',\n        status: Protocol.ServiceWorker.ServiceWorkerVersionStatus.Activated,\n        runningStatus: Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Running,\n        routerRules: JSON.stringify(routerRules),\n      };\n      registration.updateVersion(versionPayload);\n      serviceWorkersManager?.dispatchEventToListeners(\n          SDK.ServiceWorkerManager.Events.RegistrationUpdated, registration);\n      assert.isTrue(hasRouterField());\n    });\n\n    it('does not show the router field if active version does not have router rules', async () => {\n      const payload:\n          Protocol.ServiceWorker.ServiceWorkerRegistration = {registrationId, scopeURL: origin, isDeleted: false};\n      const registration: SDK.ServiceWorkerManager.ServiceWorkerRegistration =\n          new SDK.ServiceWorkerManager.ServiceWorkerRegistration(payload);\n\n      let versionId = 1;\n      const versionPayload: Protocol.ServiceWorker.ServiceWorkerVersion = {\n        registrationId,\n        versionId: versionId.toString(),\n        scriptURL: '',\n        status: Protocol.ServiceWorker.ServiceWorkerVersionStatus.Activated,\n        runningStatus: Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Running,\n      };\n      registration.updateVersion(versionPayload);\n      serviceWorkersManager?.dispatchEventToListeners(\n          SDK.ServiceWorkerManager.Events.RegistrationUpdated, registration);\n      assert.isFalse(hasRouterField());\n\n      // Update the version with the empty router rules.\n      versionId++;\n      registration.updateVersion(Object.assign({}, versionPayload, {\n        versionId: versionId.toString(),\n        routerRules: JSON.stringify([]),\n      }));\n      registration.updateVersion(versionPayload);\n      serviceWorkersManager?.dispatchEventToListeners(\n          SDK.ServiceWorkerManager.Events.RegistrationUpdated, registration);\n      assert.isFalse(hasRouterField());\n    });\n\n    it('does not show the router field if there is no active version', async () => {\n      const payload:\n          Protocol.ServiceWorker.ServiceWorkerRegistration = {registrationId, scopeURL: origin, isDeleted: false};\n      const registration: SDK.ServiceWorkerManager.ServiceWorkerRegistration =\n          new SDK.ServiceWorkerManager.ServiceWorkerRegistration(payload);\n\n      let versionId = 0;\n      const versionPayload: Protocol.ServiceWorker.ServiceWorkerVersion = {\n        registrationId,\n        versionId: versionId.toString(),\n        scriptURL: '',\n        status: Protocol.ServiceWorker.ServiceWorkerVersionStatus.New,\n        runningStatus: Protocol.ServiceWorker.ServiceWorkerVersionRunningStatus.Starting,\n        routerRules: JSON.stringify(routerRules),\n      };\n\n      const updateAndDispatchEvent = (status: Protocol.ServiceWorker.ServiceWorkerVersionStatus) => {\n        versionId++;\n        registration.updateVersion(Object.assign({}, versionPayload, {versionId: versionId.toString(), status}));\n        serviceWorkersManager?.dispatchEventToListeners(\n            SDK.ServiceWorkerManager.Events.RegistrationUpdated, registration);\n      };\n\n      updateAndDispatchEvent(Protocol.ServiceWorker.ServiceWorkerVersionStatus.New);\n      assert.isFalse(hasRouterField());\n\n      updateAndDispatchEvent(Protocol.ServiceWorker.ServiceWorkerVersionStatus.Redundant);\n      assert.isFalse(hasRouterField());\n\n      updateAndDispatchEvent(Protocol.ServiceWorker.ServiceWorkerVersionStatus.Installing);\n      assert.isFalse(hasRouterField());\n\n      updateAndDispatchEvent(Protocol.ServiceWorker.ServiceWorkerVersionStatus.Installed);\n      assert.isFalse(hasRouterField());\n\n      updateAndDispatchEvent(Protocol.ServiceWorker.ServiceWorkerVersionStatus.Activating);\n      assert.isTrue(hasRouterField());\n\n      updateAndDispatchEvent(Protocol.ServiceWorker.ServiceWorkerVersionStatus.Activated);\n      assert.isTrue(hasRouterField());\n    });\n  });\n});\n"]}