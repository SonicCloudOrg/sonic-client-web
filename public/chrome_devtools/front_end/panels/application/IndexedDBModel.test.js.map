{"version":3,"file":"IndexedDBModel.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/application/IndexedDBModel.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as ProtocolProxyApi from '../../generated/protocol-proxy-api.js';\nimport * as Protocol from '../../generated/protocol.js';\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {\n  clearMockConnectionResponseHandler,\n  describeWithMockConnection,\n  setMockConnectionResponseHandler,\n} from '../../testing/MockConnection.js';\n\nimport * as Resources from './application.js';\n\ndescribeWithMockConnection('IndexedDBModel', () => {\n  let indexedDBModel: Resources.IndexedDBModel.IndexedDBModel;\n  let target: SDK.Target.Target;\n  let indexedDBAgent: ProtocolProxyApi.IndexedDBApi;\n  let manager: SDK.StorageBucketsModel.StorageBucketsModel|null;\n  const testKey = 'test-storage-key/';\n  const testStorageBucket = {\n    storageKey: testKey,\n    name: 'inbox',\n  };\n  const testStorageBucketInfo = {\n    id: '0',\n    bucket: testStorageBucket,\n    expiration: 0,\n    quota: 0,\n    persistent: false,\n    durability: Protocol.Storage.StorageBucketsDurability.Strict,\n  };\n  const testDBId = new Resources.IndexedDBModel.DatabaseId(testStorageBucket, 'test-database');\n\n  beforeEach(async () => {\n    target = createTarget();\n    indexedDBModel = new Resources.IndexedDBModel.IndexedDBModel(target);\n    indexedDBAgent = target.indexedDBAgent();\n    manager = target.model(SDK.StorageBucketsModel.StorageBucketsModel);\n  });\n\n  describe('StorageKeyAdded', () => {\n    it('registers database only when the model is enabled', async () => {\n      const databaseAdeddSpy = sinon.spy(indexedDBModel, 'dispatchEventToListeners');\n      const dbNamePromise = new Promise<string>(resolve => {\n        indexedDBModel.addEventListener(Resources.IndexedDBModel.Events.DatabaseAdded, event => {\n          resolve(event.data.databaseId.name);\n        });\n      });\n      setMockConnectionResponseHandler('IndexedDB.requestDatabaseNames', () => ({databaseNames: ['test-database']}));\n\n      manager?.storageBucketCreatedOrUpdated({bucketInfo: testStorageBucketInfo});\n      assert.isFalse(databaseAdeddSpy.calledWithExactly(\n          Resources.IndexedDBModel.Events.DatabaseAdded as unknown as sinon.SinonMatcher,\n          {model: indexedDBModel, databaseId: testDBId}));\n\n      indexedDBModel.enable();\n      manager?.storageBucketCreatedOrUpdated({bucketInfo: testStorageBucketInfo});\n      assert.strictEqual(await dbNamePromise, 'test-database');\n    });\n\n    it('starts tracking database', () => {\n      const trackIndexedDBSpy = sinon.spy(target.storageAgent(), 'invoke_trackIndexedDBForStorageKey' as never);\n\n      indexedDBModel.enable();\n      manager?.storageBucketCreatedOrUpdated({bucketInfo: testStorageBucketInfo});\n\n      assert.isTrue(trackIndexedDBSpy.calledOnceWithExactly({storageKey: testKey}));\n    });\n  });\n\n  describe('StorageKeyRemoved', () => {\n    it('stops tracking database', () => {\n      const untrackIndexedDBSpy = sinon.spy(target.storageAgent(), 'invoke_untrackIndexedDBForStorageKey' as never);\n\n      indexedDBModel.enable();\n      manager?.storageBucketCreatedOrUpdated({bucketInfo: testStorageBucketInfo});\n      manager?.storageBucketDeleted({bucketId: testStorageBucketInfo.id});\n\n      assert.isTrue(untrackIndexedDBSpy.calledOnceWithExactly({storageKey: testKey}));\n    });\n  });\n\n  it('calls protocol method on clearObjectStore', () => {\n    const clearObjectStoreSpy = sinon.spy(indexedDBAgent, 'invoke_clearObjectStore');\n\n    indexedDBModel.enable();\n    void indexedDBModel.clearObjectStore(testDBId, 'test-store');\n    assert.isTrue(clearObjectStoreSpy.calledOnceWithExactly(\n        {storageBucket: testStorageBucket, databaseName: 'test-database', objectStoreName: 'test-store'}));\n  });\n\n  it('calls protocol method on deleteEntries', () => {\n    const testKeyRange = {lower: undefined, lowerOpen: false, upper: undefined, upperOpen: true} as IDBKeyRange;\n    const deleteEntriesSpy = sinon.spy(indexedDBAgent, 'invoke_deleteObjectStoreEntries');\n\n    indexedDBModel.enable();\n    void indexedDBModel.deleteEntries(testDBId, 'test-store', testKeyRange);\n    assert.isTrue(deleteEntriesSpy.calledOnceWithExactly({\n      storageBucket: testStorageBucket,\n      databaseName: 'test-database',\n      objectStoreName: 'test-store',\n      keyRange: testKeyRange,\n    }));\n  });\n\n  it('calls protocol method on refreshDatabaseNames and dispatches event', async () => {\n    const requestDBNamesSpy = sinon.spy(indexedDBAgent, 'invoke_requestDatabaseNames');\n    const dbRefreshedPromise = new Promise<void>(resolve => {\n      indexedDBModel.addEventListener(Resources.IndexedDBModel.Events.DatabaseNamesRefreshed, () => {\n        resolve();\n      });\n    });\n    setMockConnectionResponseHandler('IndexedDB.requestDatabaseNames', () => ({databaseNames: ['test-database']}));\n    indexedDBModel.enable();\n    manager?.storageBucketCreatedOrUpdated({bucketInfo: testStorageBucketInfo});\n\n    void indexedDBModel.refreshDatabaseNames();\n\n    assert.isTrue(requestDBNamesSpy.calledWithExactly({storageBucket: testStorageBucket}));\n    await dbRefreshedPromise;\n  });\n\n  it('requests database with storage key on refreshDatabase', async () => {\n    const requestDatabaseSpy = sinon.spy(indexedDBAgent, 'invoke_requestDatabase');\n    indexedDBModel.enable();\n\n    void indexedDBModel.refreshDatabase(testDBId);\n\n    assert.isTrue(\n        requestDatabaseSpy.calledOnceWithExactly({storageBucket: testStorageBucket, databaseName: 'test-database'}));\n  });\n\n  it('requests data with storage key on loadObjectStoreData', () => {\n    const requestDataSpy = sinon.spy(indexedDBAgent, 'invoke_requestData');\n    indexedDBModel.enable();\n\n    indexedDBModel.loadObjectStoreData(testDBId, 'test-store', null, 0, 50, () => {});\n\n    assert.isTrue(requestDataSpy.calledOnceWithExactly({\n      storageBucket: testStorageBucket,\n      databaseName: 'test-database',\n      objectStoreName: 'test-store',\n      indexName: '',\n      skipCount: 0,\n      pageSize: 50,\n      keyRange: undefined,\n    }));\n  });\n\n  it('calls protocol method on getMetadata', async () => {\n    const getMetadataSpy = sinon.stub(indexedDBAgent, 'invoke_getMetadata')\n                               .resolves({entriesCount: 0, keyGeneratorValue: 0, getError: () => undefined});\n    indexedDBModel.enable();\n\n    await indexedDBModel.getMetadata(testDBId, new Resources.IndexedDBModel.ObjectStore('test-store', null, false));\n\n    assert.isTrue(getMetadataSpy.calledOnceWithExactly(\n        {storageBucket: testStorageBucket, databaseName: 'test-database', objectStoreName: 'test-store'}));\n  });\n\n  it('dispatches event on indexedDBContentUpdated', () => {\n    const dispatcherSpy = sinon.spy(indexedDBModel, 'dispatchEventToListeners');\n\n    manager?.storageBucketCreatedOrUpdated({bucketInfo: testStorageBucketInfo});\n\n    indexedDBModel.indexedDBContentUpdated(\n        {origin: '', storageKey: testKey, bucketId: '0', databaseName: 'test-database', objectStoreName: 'test-store'});\n\n    assert.isTrue(dispatcherSpy.calledOnceWithExactly(\n        Resources.IndexedDBModel.Events.IndexedDBContentUpdated as unknown as sinon.SinonMatcher,\n        {databaseId: testDBId, objectStoreName: 'test-store', model: indexedDBModel}));\n  });\n\n  it('requests database names and loads db on indexedDBListUpdated', async () => {\n    const requestDBNamesSpy = sinon.spy(indexedDBAgent, 'invoke_requestDatabaseNames');\n    const databaseLoadedPromise = new Promise<void>(resolve => {\n      indexedDBModel.addEventListener(Resources.IndexedDBModel.Events.DatabaseLoaded, () => {\n        resolve();\n      });\n    });\n    setMockConnectionResponseHandler('IndexedDB.requestDatabaseNames', () => ({databaseNames: ['test-database']}));\n    setMockConnectionResponseHandler(\n        'IndexedDB.requestDatabase',\n        () => ({databaseWithObjectStores: {name: 'test-database', version: '1', objectStores: []}}));\n    indexedDBModel.enable();\n    manager?.storageBucketCreatedOrUpdated({bucketInfo: testStorageBucketInfo});\n\n    indexedDBModel.indexedDBListUpdated({origin: '', storageKey: testKey, bucketId: '0'});\n\n    assert.isTrue(requestDBNamesSpy.calledWithExactly({storageBucket: testStorageBucket}));\n    await databaseLoadedPromise;\n  });\n\n  it('gets databases added for storage key', async () => {\n    const dbNames = ['test-database1', 'test-database2'];\n    setMockConnectionResponseHandler('IndexedDB.requestDatabaseNames', () => ({databaseNames: dbNames}));\n    indexedDBModel.enable();\n    manager?.storageBucketCreatedOrUpdated({bucketInfo: testStorageBucketInfo});\n    await indexedDBModel.refreshDatabaseNames();\n\n    const databases = indexedDBModel.databases();\n\n    assert.deepEqual(databases.map(db => db.name), dbNames);\n  });\n\n  it('calls protocol method on deleteDatabase', () => {\n    const deleteDBSpy = sinon.spy(indexedDBAgent, 'invoke_deleteDatabase');\n    setMockConnectionResponseHandler('IndexedDB.requestDatabaseNames', () => ({databaseNames: ['test-database']}));\n    indexedDBModel.enable();\n    manager?.storageBucketCreatedOrUpdated({bucketInfo: testStorageBucketInfo});\n\n    void indexedDBModel.deleteDatabase(testDBId);\n\n    assert.isTrue(deleteDBSpy.calledOnceWithExactly({storageBucket: testStorageBucket, databaseName: 'test-database'}));\n  });\n\n  it('removes databases for storage key on clearForStorageKey', async () => {\n    const dbNames = ['test-database1', 'test-database-2'];\n    setMockConnectionResponseHandler('IndexedDB.requestDatabaseNames', () => ({databaseNames: dbNames}));\n    indexedDBModel.enable();\n    manager?.storageBucketCreatedOrUpdated({bucketInfo: testStorageBucketInfo});\n    await indexedDBModel.refreshDatabaseNames();\n    clearMockConnectionResponseHandler('IndexedDB.requestDatabaseNames');\n\n    indexedDBModel.clearForStorageKey(testKey);\n\n    assert.isEmpty(indexedDBModel.databases());\n  });\n\n  it('dispatches event with storage key on indexedDBContentUpdated when both storage key and origin are set', () => {\n    const dispatcherSpy = sinon.spy(indexedDBModel, 'dispatchEventToListeners');\n\n    manager?.storageBucketCreatedOrUpdated({bucketInfo: testStorageBucketInfo});\n\n    indexedDBModel.indexedDBContentUpdated({\n      origin: 'test-origin',\n      storageKey: testKey,\n      bucketId: '0',\n      databaseName: 'test-database',\n      objectStoreName: 'test-store',\n    });\n\n    assert.isTrue(dispatcherSpy.calledOnceWithExactly(\n        Resources.IndexedDBModel.Events.IndexedDBContentUpdated as unknown as sinon.SinonMatcher,\n        {databaseId: testDBId, objectStoreName: 'test-store', model: indexedDBModel}));\n  });\n});\n"]}