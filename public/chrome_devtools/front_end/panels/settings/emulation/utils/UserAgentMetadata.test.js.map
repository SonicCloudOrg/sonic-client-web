{"version":3,"file":"UserAgentMetadata.test.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/settings/emulation/utils/UserAgentMetadata.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Protocol from '../../../../generated/protocol.js';\n\nimport * as EmulationUtils from './utils.js';\n\nconst UserAgentMetadata = EmulationUtils.UserAgentMetadata;\n\nconst errParse = 'syntax error';\nconst errStruct = 'data form error';\n\nfunction assertNotError(result: Protocol.Emulation.UserAgentBrandVersion[]|\n                        string): Protocol.Emulation.UserAgentBrandVersion[] {\n  if (typeof result === 'string') {\n    assert.fail('Unexpected error');\n    return [];\n  }\n  return result;\n}\n\nfunction assertError(result: Protocol.Emulation.UserAgentBrandVersion[]|string, expectedError: string): void {\n  if (typeof result !== 'string') {\n    assert.fail('Expected error, but got result');\n    return;\n  }\n  assert.strictEqual(result, expectedError);\n}\n\ndescribe('UserAgentMetadata', () => {\n  describe('parseBrandsList', () => {\n    it('Parses a good example', () => {\n      const result = UserAgentMetadata.parseBrandsList('\"Chromium\";v=\"42\", \"Ferrum\"; v=\"42.a\"', errParse, errStruct);\n      const items = assertNotError(result);\n      assert.lengthOf(items, 2);\n      assert.strictEqual(items[0].brand, 'Chromium');\n      assert.strictEqual(items[0].version, '42');\n      assert.strictEqual(items[1].brand, 'Ferrum');\n      assert.strictEqual(items[1].version, '42.a');\n    });\n    it('Parses empty list', () => {\n      const result = UserAgentMetadata.parseBrandsList('', errParse, errStruct);\n      const items = assertNotError(result);\n      assert.lengthOf(items, 0);\n    });\n    it('Handles parse errors', () => {\n      const result = UserAgentMetadata.parseBrandsList('\"Chro', errParse, errStruct);\n      assertError(result, errParse);\n    });\n    it('Handles data model errors', () => {\n      const r1 = UserAgentMetadata.parseBrandsList('\"Chromium\"', errParse, errStruct);\n      assertError(r1, errStruct);\n\n      const r2 = UserAgentMetadata.parseBrandsList('Chromium; v=\"42\"', errParse, errStruct);\n      assertError(r2, errStruct);\n\n      const r3 = UserAgentMetadata.parseBrandsList('\"Chromium\"; v=\"42\"; q=\"huh\"', errParse, errStruct);\n      assertError(r3, errStruct);\n\n      const r4 = UserAgentMetadata.parseBrandsList('\"Chromium\"; v=42', errParse, errStruct);\n      assertError(r4, errStruct);\n\n      const r5 = UserAgentMetadata.parseBrandsList('\"Chromium\"; q=\"42\"', errParse, errStruct);\n      assertError(r5, errStruct);\n\n      const r6 = UserAgentMetadata.parseBrandsList('(\"Chromium\" \"Ferrum\"); v=\"42\"', errParse, errStruct);\n      assertError(r6, errStruct);\n    });\n  });\n  describe('serializeBrandsList', () => {\n    it('Serializes a good example', () => {\n      const result = UserAgentMetadata.serializeBrandsList(\n          [{brand: 'Chromium', version: '42'}, {brand: 'Ferrum', version: '42.a'}]);\n      assert.strictEqual(result, '\"Chromium\";v=\"42\", \"Ferrum\";v=\"42.a\"');\n    });\n    it('Character restrictions apply', () => {\n      const result = UserAgentMetadata.serializeBrandsList(\n          [{brand: 'Chromium', version: '42'}, {brand: 'Феррум', version: '42.a'}]);\n      assert.strictEqual(result, '');\n    });\n  });\n  describe('validateAsStructuredHeadersString', () => {\n    it('Accepts valid value', () => {\n      const result = UserAgentMetadata.validateAsStructuredHeadersString('Android', errParse);\n      assert.isTrue(result.valid);\n    });\n    it('Rejects an invalid value', () => {\n      const result = UserAgentMetadata.validateAsStructuredHeadersString('не АСКІІ', errParse);\n      assert.isFalse(result.valid);\n      assert.strictEqual(result.errorMessage, errParse);\n    });\n  });\n});\n"]}