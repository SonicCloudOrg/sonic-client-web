{"version":3,"file":"StructuredHeaders.test.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/settings/emulation/utils/StructuredHeaders.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as EmulationUtils from './utils.js';\n\nimport StructuredHeaders = EmulationUtils.StructuredHeaders;\n\nfunction assertItemError(result: StructuredHeaders.Item|StructuredHeaders.Error): void {\n  assert.strictEqual(result.kind, StructuredHeaders.ResultKind.ERROR);\n}\n\nfunction assertItemValue(\n    result: StructuredHeaders.Item|StructuredHeaders.Error, expectedKind: StructuredHeaders.ResultKind,\n    expected: string|number|boolean): void {\n  if (result.kind === StructuredHeaders.ResultKind.ERROR) {\n    assert.fail('Got error instead of Item containing kind ' + expectedKind);\n    return;\n  }\n  const bareItem = result.value;\n  if (bareItem.kind !== expectedKind) {\n    assert.fail('Item type is ' + bareItem.kind + ' instead of ' + expectedKind);\n    return;\n  }\n\n  assert.strictEqual(bareItem.value, expected);\n}\n\nfunction assertItemInteger(result: StructuredHeaders.Item|StructuredHeaders.Error, expected: number): void {\n  assertItemValue(result, StructuredHeaders.ResultKind.INTEGER, expected);\n}\n\nfunction assertItemDecimal(result: StructuredHeaders.Item|StructuredHeaders.Error, expected: number): void {\n  assertItemValue(result, StructuredHeaders.ResultKind.DECIMAL, expected);\n}\n\nfunction assertItemString(result: StructuredHeaders.Item|StructuredHeaders.Error, expected: string): void {\n  assertItemValue(result, StructuredHeaders.ResultKind.STRING, expected);\n}\n\nfunction assertItemToken(result: StructuredHeaders.Item|StructuredHeaders.Error, expected: string): void {\n  assertItemValue(result, StructuredHeaders.ResultKind.TOKEN, expected);\n}\n\nfunction assertItemBinary(result: StructuredHeaders.Item|StructuredHeaders.Error, expected: string): void {\n  assertItemValue(result, StructuredHeaders.ResultKind.BINARY, expected);\n}\n\nfunction assertItemBoolean(result: StructuredHeaders.Item|StructuredHeaders.Error, expected: boolean): void {\n  assertItemValue(result, StructuredHeaders.ResultKind.BOOLEAN, expected);\n}\n\nfunction assertParams(\n    result: StructuredHeaders.Parameters, expectParams: [string, StructuredHeaders.BareItem][]): void {\n  assert.lengthOf(result.items, expectParams.length);\n  for (let i = 0; i < expectParams.length; ++i) {\n    assert.strictEqual(result.items[i].name.value, expectParams[i][0]);\n    assert.deepStrictEqual(result.items[i].value, expectParams[i][1], 'Param ' + i + ' value mismatch');\n  }\n}\n\nfunction assertItemParams(\n    result: StructuredHeaders.Item|StructuredHeaders.Error,\n    expectParams: [string, StructuredHeaders.BareItem][]): void {\n  if (result.kind === StructuredHeaders.ResultKind.ERROR) {\n    assert.fail('No params on parse error');\n    return;\n  }\n  assertParams(result.parameters, expectParams);\n}\n\nfunction assertListError(result: StructuredHeaders.List|StructuredHeaders.Error): void {\n  assert.strictEqual(result.kind, StructuredHeaders.ResultKind.ERROR);\n}\n\nfunction assertListAndGetItems(result: StructuredHeaders.List|StructuredHeaders.Error): StructuredHeaders.ListMember[] {\n  if (result.kind === StructuredHeaders.ResultKind.ERROR) {\n    assert.fail('Got error instead of List');\n    return [];\n  }\n  return result.items;\n}\n\nfunction assertListItem(\n    item: StructuredHeaders.ListMember, expectValue: StructuredHeaders.BareItem,\n    expectParams: [string, StructuredHeaders.BareItem][]): void {\n  if (item.kind === StructuredHeaders.ResultKind.INNER_LIST) {\n    assert.fail('Unexpected inner list when an item expected');\n    return;\n  }\n  assert.deepStrictEqual(\n      item.value, expectValue,\n      'List item bare value mismatch, ' + item.value.value + ' vs expected ' + expectValue.value);\n  assertItemParams(item, expectParams);\n}\n\nfunction assertInnerListAndGetItems(\n    item: StructuredHeaders.ListMember,\n    expectParams: [string, StructuredHeaders.BareItem][]): StructuredHeaders.Item[] {\n  if (item.kind !== StructuredHeaders.ResultKind.INNER_LIST) {\n    assert.fail('Expected inner list, got:' + item.kind);\n    return [];\n  }\n  assertParams(item.parameters, expectParams);\n  return item.items;\n}\n\nfunction assertSerializeResult(\n    result: StructuredHeaders.SerializationResult|StructuredHeaders.Error, expected: string): void {\n  if (result.kind === StructuredHeaders.ResultKind.ERROR) {\n    assert.fail('Got error instead of serialization result');\n    return;\n  }\n  assert.strictEqual(result.value, expected);\n}\n\nfunction assertSerializeError(result: StructuredHeaders.SerializationResult|StructuredHeaders.Error): void {\n  assert.strictEqual(result.kind, StructuredHeaders.ResultKind.ERROR);\n}\n\nfunction makeItem(bareItem: StructuredHeaders.BareItem): StructuredHeaders.Item {\n  return {\n    kind: StructuredHeaders.ResultKind.ITEM,\n    value: bareItem,\n    parameters: {kind: StructuredHeaders.ResultKind.PARAMETERS, items: []},\n  };\n}\n\nfunction makeParams(params: [string, StructuredHeaders.BareItem][]): StructuredHeaders.Parameters {\n  const typedParams: StructuredHeaders.Parameters = {kind: StructuredHeaders.ResultKind.PARAMETERS, items: []};\n  for (const param of params) {\n    typedParams.items.push({\n      kind: StructuredHeaders.ResultKind.PARAMETER,\n      name: {kind: StructuredHeaders.ResultKind.PARAM_NAME, value: param[0]},\n      value: param[1],\n    });\n  }\n  return typedParams;\n}\n\nfunction makeItemWithParams(\n    bareItem: StructuredHeaders.BareItem, params: [string, StructuredHeaders.BareItem][]): StructuredHeaders.Item {\n  return {kind: StructuredHeaders.ResultKind.ITEM, value: bareItem, parameters: makeParams(params)};\n}\n\nfunction makeList(items: StructuredHeaders.ListMember[]): StructuredHeaders.List {\n  return {kind: StructuredHeaders.ResultKind.LIST, items: items};\n}\n\nfunction makeInnerList(\n    items: StructuredHeaders.Item[], params: [string, StructuredHeaders.BareItem][]): StructuredHeaders.InnerList {\n  return {kind: StructuredHeaders.ResultKind.INNER_LIST, items: items, parameters: makeParams(params)};\n}\n\ndescribe('StructuredHeaders', () => {\n  describe('Parsing', () => {\n    it('Parses integers', () => {\n      assertItemInteger(StructuredHeaders.parseItem('23'), 23);\n      assertItemInteger(StructuredHeaders.parseItem('023'), 23);\n      assertItemInteger(StructuredHeaders.parseItem('-100'), -100);\n      assertItemInteger(StructuredHeaders.parseItem('-0'), 0);\n      assertItemInteger(StructuredHeaders.parseItem('-999999999999999'), -999999999999999);\n      assertItemInteger(StructuredHeaders.parseItem('999999999999999'), 999999999999999);\n      assertItemError(StructuredHeaders.parseItem('1999999999999999'));\n      assertItemError(StructuredHeaders.parseItem('-1999999999999999'));\n      assertItemError(StructuredHeaders.parseItem('-'));\n      assertItemError(StructuredHeaders.parseItem('--1'));\n    });\n    it('Parses decimals', () => {\n      assertItemDecimal(StructuredHeaders.parseItem('23.4'), 23.4);\n      assertItemDecimal(StructuredHeaders.parseItem('023.4'), 23.4);\n      assertItemDecimal(StructuredHeaders.parseItem('-100.3'), -100.3);\n      assertItemDecimal(StructuredHeaders.parseItem('-100.32'), -100.32);\n      assertItemDecimal(StructuredHeaders.parseItem('100.325'), 100.325);\n      assertItemDecimal(StructuredHeaders.parseItem('-0.0'), -0);\n      assertItemDecimal(StructuredHeaders.parseItem('-999999999999.999'), -999999999999.999);\n      assertItemDecimal(StructuredHeaders.parseItem('999999999999.999'), 999999999999.999);\n      assertItemError(StructuredHeaders.parseItem('.'));\n      assertItemError(StructuredHeaders.parseItem('1.'));\n      assertItemError(StructuredHeaders.parseItem('1.0000'));\n      assertItemError(StructuredHeaders.parseItem('--1.0'));\n      assertItemError(StructuredHeaders.parseItem('1999999999999.9'));\n    });\n    it('Parses strings', () => {\n      assertItemString(StructuredHeaders.parseItem('\"abcd\"'), 'abcd');\n      assertItemString(StructuredHeaders.parseItem('\"a\\\\\"\\\\\\\\\"'), 'a\"\\\\');\n      assertItemError(StructuredHeaders.parseItem('\"\\\\n\"'));\n      assertItemError(StructuredHeaders.parseItem('\"\\\\\"'));\n      assertItemError(StructuredHeaders.parseItem('\"foo'));\n      assertItemError(StructuredHeaders.parseItem('\"'));\n    });\n    it('Parses tokens', () => {\n      assertItemToken(StructuredHeaders.parseItem('abcd'), 'abcd');\n      assertItemToken(StructuredHeaders.parseItem('*'), '*');\n      assertItemToken(StructuredHeaders.parseItem('*z/foo:bar'), '*z/foo:bar');\n      assertItemError(StructuredHeaders.parseItem('/far'));\n    });\n    it('Parses binary', () => {\n      assertItemBinary(StructuredHeaders.parseItem(':aBcd+/ef0=:'), 'aBcd+/ef0=');\n      assertItemError(StructuredHeaders.parseItem(':foo'));\n      assertItemError(StructuredHeaders.parseItem(':'));\n    });\n    it('Parses booleans', () => {\n      assertItemBoolean(StructuredHeaders.parseItem('?0'), false);\n      assertItemBoolean(StructuredHeaders.parseItem('?1'), true);\n      assertItemError(StructuredHeaders.parseItem('?01'));\n      assertItemError(StructuredHeaders.parseItem('?2'));\n      assertItemError(StructuredHeaders.parseItem('?'));\n    });\n    it('Parses parameters', () => {\n      const r1 = StructuredHeaders.parseItem('token; a=1; b=?0');\n      assertItemToken(r1, 'token');\n      assertItemParams(r1, [\n        ['a', {kind: StructuredHeaders.ResultKind.INTEGER, value: 1}],\n        ['b', {kind: StructuredHeaders.ResultKind.BOOLEAN, value: false}],\n      ]);\n\n      const r2 = StructuredHeaders.parseItem('token; a; b=?0');\n      assertItemToken(r2, 'token');\n      assertItemParams(r2, [\n        ['a', {kind: StructuredHeaders.ResultKind.BOOLEAN, value: true}],\n        ['b', {kind: StructuredHeaders.ResultKind.BOOLEAN, value: false}],\n      ]);\n\n      const r3 = StructuredHeaders.parseItem('token; *a123-456.789_0*');\n      assertItemToken(r3, 'token');\n      assertItemParams(r3, [\n        ['*a123-456.789_0*', {kind: StructuredHeaders.ResultKind.BOOLEAN, value: true}],\n      ]);\n\n      assertItemError(StructuredHeaders.parseItem('token; A=1'));\n      assertItemError(StructuredHeaders.parseItem('token; aA=1'));\n      assertItemError(StructuredHeaders.parseItem('token ;a=1'));\n      assertItemError(StructuredHeaders.parseItem('token; a=1;'));\n    });\n    it('Handles duplicate parameter names per spec', () => {\n      const r = StructuredHeaders.parseItem('toooken; a=1; b=?0; a=2; c=4.2; b=?1; a=4; b=\"hi\"');\n      assertItemToken(r, 'toooken');\n      assertItemParams(r, [\n        ['c', {kind: StructuredHeaders.ResultKind.DECIMAL, value: 4.2}],\n        ['a', {kind: StructuredHeaders.ResultKind.INTEGER, value: 4}],\n        ['b', {kind: StructuredHeaders.ResultKind.STRING, value: 'hi'}],\n      ]);\n    });\n    it('Parses lists', () => {\n      const items = assertListAndGetItems(StructuredHeaders.parseList('a, \\t\"b\", ?0;d;e=42'));\n      assert.lengthOf(items, 3);\n      assertListItem(items[0], {kind: StructuredHeaders.ResultKind.TOKEN, value: 'a'}, []);\n      assertListItem(items[1], {kind: StructuredHeaders.ResultKind.STRING, value: 'b'}, []);\n      assertListItem(items[2], {kind: StructuredHeaders.ResultKind.BOOLEAN, value: false}, [\n        ['d', {kind: StructuredHeaders.ResultKind.BOOLEAN, value: true}],\n        ['e', {kind: StructuredHeaders.ResultKind.INTEGER, value: 42}],\n      ]);\n    });\n    it('Parses empty list', () => {\n      // Grammar seems to reject it, but the algorithm (which is normative) seems OK\n      // with it, and 0-length lists are OK per the data model.\n      const items = assertListAndGetItems(StructuredHeaders.parseList(''));\n      assert.lengthOf(items, 0);\n    });\n    it('Parses inner lists', () => {\n      const items = assertListAndGetItems(StructuredHeaders.parseList('a, (\"b\" \"c\"), (d e)'));\n      assert.lengthOf(items, 3);\n      assertListItem(items[0], {kind: StructuredHeaders.ResultKind.TOKEN, value: 'a'}, []);\n      const itemsL1 = assertInnerListAndGetItems(items[1], []);\n      assert.lengthOf(itemsL1, 2);\n      assertListItem(itemsL1[0], {kind: StructuredHeaders.ResultKind.STRING, value: 'b'}, []);\n      assertListItem(itemsL1[1], {kind: StructuredHeaders.ResultKind.STRING, value: 'c'}, []);\n      const itemsL2 = assertInnerListAndGetItems(items[2], []);\n      assert.lengthOf(itemsL2, 2);\n      assertListItem(itemsL2[0], {kind: StructuredHeaders.ResultKind.TOKEN, value: 'd'}, []);\n      assertListItem(itemsL2[1], {kind: StructuredHeaders.ResultKind.TOKEN, value: 'e'}, []);\n    });\n    it('Parses empty inner lists', () => {\n      // Empty inner lists are OK.\n      const items = assertListAndGetItems(StructuredHeaders.parseList(' (  )  '));\n      assert.lengthOf(items, 1);\n      const itemsL0 = assertInnerListAndGetItems(items[0], []);\n      assert.lengthOf(itemsL0, 0);\n    });\n    it('Parses inner list params', () => {\n      // Example from spec, with inner list params and item params.\n      const items = assertListAndGetItems(StructuredHeaders.parseList('(\"foo\"; a=1;b=2);lvl=5, (\"bar\" \"baz\");lvl=1'));\n      assert.lengthOf(items, 2);\n      const itemsL0 =\n          assertInnerListAndGetItems(items[0], [['lvl', {kind: StructuredHeaders.ResultKind.INTEGER, value: 5}]]);\n      assert.lengthOf(itemsL0, 1);\n      assertListItem(itemsL0[0], {kind: StructuredHeaders.ResultKind.STRING, value: 'foo'}, [\n        ['a', {kind: StructuredHeaders.ResultKind.INTEGER, value: 1}],\n        ['b', {kind: StructuredHeaders.ResultKind.INTEGER, value: 2}],\n      ]);\n      const itemsL1 =\n          assertInnerListAndGetItems(items[1], [['lvl', {kind: StructuredHeaders.ResultKind.INTEGER, value: 1}]]);\n      assert.lengthOf(itemsL1, 2);\n      assertListItem(itemsL1[0], {kind: StructuredHeaders.ResultKind.STRING, value: 'bar'}, []);\n      assertListItem(itemsL1[1], {kind: StructuredHeaders.ResultKind.STRING, value: 'baz'}, []);\n    });\n    it('Detects various list syntax errors', () => {\n      assertListError(StructuredHeaders.parseList('a,'));\n      assertListError(StructuredHeaders.parseList('a b'));\n      assertListError(StructuredHeaders.parseList('(a,'));\n      assertListError(StructuredHeaders.parseList('(a,b'));\n    });\n  });\n  describe('Serialization', () => {\n    it('Serializes integers', () => {\n      assertSerializeResult(\n          StructuredHeaders.serializeItem(makeItem({kind: StructuredHeaders.ResultKind.INTEGER, value: -45})), '-45');\n      assertSerializeResult(\n          StructuredHeaders.serializeItem(\n              makeItem({kind: StructuredHeaders.ResultKind.INTEGER, value: 999999999999999})),\n          '999999999999999');\n      assertSerializeResult(\n          StructuredHeaders.serializeItem(\n              makeItem({kind: StructuredHeaders.ResultKind.INTEGER, value: -999999999999999})),\n          '-999999999999999');\n\n      assertSerializeError(\n          StructuredHeaders.serializeItem(makeItem({kind: StructuredHeaders.ResultKind.INTEGER, value: 3.14})));\n      assertSerializeError(StructuredHeaders.serializeItem(\n          makeItem({kind: StructuredHeaders.ResultKind.INTEGER, value: -1000000000000000})));\n      assertSerializeError(StructuredHeaders.serializeItem(\n          makeItem({kind: StructuredHeaders.ResultKind.INTEGER, value: 1000000000000000})));\n    });\n    it('Serializes strings', () => {\n      assertSerializeResult(\n          StructuredHeaders.serializeItem(makeItem({kind: StructuredHeaders.ResultKind.STRING, value: 'str'})),\n          '\"str\"');\n      assertSerializeResult(\n          StructuredHeaders.serializeItem(makeItem({kind: StructuredHeaders.ResultKind.STRING, value: 'str\"\\\\'})),\n          '\"str\\\\\"\\\\\\\\\"');\n      assertSerializeResult(\n          StructuredHeaders.serializeItem(makeItem({kind: StructuredHeaders.ResultKind.STRING, value: ''})), '\"\"');\n\n      // Only printable ASCII....\n      assertSerializeError(\n          StructuredHeaders.serializeItem(makeItem({kind: StructuredHeaders.ResultKind.STRING, value: '\\u2124'})));\n      assertSerializeError(\n          StructuredHeaders.serializeItem(makeItem({kind: StructuredHeaders.ResultKind.STRING, value: '\\u007f'})));\n      assertSerializeError(\n          StructuredHeaders.serializeItem(makeItem({kind: StructuredHeaders.ResultKind.STRING, value: '\\u001f'})));\n    });\n    it('Serializes tokens', () => {\n      assertSerializeResult(\n          StructuredHeaders.serializeItem(makeItem({kind: StructuredHeaders.ResultKind.TOKEN, value: 'tok'})), 'tok');\n      assertSerializeResult(\n          StructuredHeaders.serializeItem(makeItem({kind: StructuredHeaders.ResultKind.TOKEN, value: '*foo:bar/baz'})),\n          '*foo:bar/baz');\n\n      assertSerializeError(\n          StructuredHeaders.serializeItem(makeItem({kind: StructuredHeaders.ResultKind.TOKEN, value: '/foo'})));\n      assertSerializeError(\n          StructuredHeaders.serializeItem(makeItem({kind: StructuredHeaders.ResultKind.TOKEN, value: '*,'})));\n      assertSerializeError(\n          StructuredHeaders.serializeItem(makeItem({kind: StructuredHeaders.ResultKind.TOKEN, value: ''})));\n    });\n    it('Serializes booleans', () => {\n      assertSerializeResult(\n          StructuredHeaders.serializeItem(makeItem({kind: StructuredHeaders.ResultKind.BOOLEAN, value: true})), '?1');\n      assertSerializeResult(\n          StructuredHeaders.serializeItem(makeItem({kind: StructuredHeaders.ResultKind.BOOLEAN, value: false})), '?0');\n    });\n    it('Serializes parameters', () => {\n      assertSerializeResult(\n          StructuredHeaders.serializeItem(makeItemWithParams(\n              {kind: StructuredHeaders.ResultKind.BOOLEAN, value: true},\n              [\n                ['arg1', {kind: StructuredHeaders.ResultKind.BOOLEAN, value: true}],\n                ['arg2', {kind: StructuredHeaders.ResultKind.BOOLEAN, value: false}],\n              ])),\n          '?1;arg1;arg2=?0');\n      assertSerializeResult(\n          StructuredHeaders.serializeItem(makeItemWithParams(\n              {kind: StructuredHeaders.ResultKind.BOOLEAN, value: true},\n              [\n                ['*1', {kind: StructuredHeaders.ResultKind.TOKEN, value: 'Yes'}],\n                ['*2', {kind: StructuredHeaders.ResultKind.INTEGER, value: 1}],\n              ])),\n          '?1;*1=Yes;*2=1');\n\n      assertSerializeError(StructuredHeaders.serializeItem(makeItemWithParams(\n          {kind: StructuredHeaders.ResultKind.BOOLEAN, value: true},\n          [['Arg1', {kind: StructuredHeaders.ResultKind.BOOLEAN, value: true}]])));\n      assertSerializeError(StructuredHeaders.serializeItem(makeItemWithParams(\n          {kind: StructuredHeaders.ResultKind.BOOLEAN, value: true},\n          [['*Arg1', {kind: StructuredHeaders.ResultKind.BOOLEAN, value: true}]])));\n    });\n  });\n  it('Serializes lists', () => {\n    assertSerializeResult(StructuredHeaders.serializeList(makeList([])), '');\n    assertSerializeResult(\n        StructuredHeaders.serializeList(makeList([\n          makeItem({kind: StructuredHeaders.ResultKind.BOOLEAN, value: false}),\n          makeItem({kind: StructuredHeaders.ResultKind.BOOLEAN, value: true}),\n        ])),\n        '?0, ?1');\n    assertSerializeResult(\n        StructuredHeaders.serializeList(makeList([\n          makeItemWithParams(\n              {kind: StructuredHeaders.ResultKind.STRING, value: 'hi'},\n              [\n                ['arg1', {kind: StructuredHeaders.ResultKind.BOOLEAN, value: true}],\n                ['arg2', {kind: StructuredHeaders.ResultKind.BOOLEAN, value: false}],\n              ]),\n          makeItem({kind: StructuredHeaders.ResultKind.BOOLEAN, value: true}),\n        ])),\n        '\"hi\";arg1;arg2=?0, ?1');\n\n    assertSerializeResult(\n        StructuredHeaders.serializeList(\n            makeList([makeItem({kind: StructuredHeaders.ResultKind.BOOLEAN, value: true}), makeInnerList([], [])])),\n        '?1, ()');\n\n    assertSerializeResult(\n        StructuredHeaders.serializeList(makeList([\n          makeItem({kind: StructuredHeaders.ResultKind.BOOLEAN, value: true}),\n          makeInnerList(\n              [\n                makeItem({kind: StructuredHeaders.ResultKind.INTEGER, value: 1}),\n                makeItem({kind: StructuredHeaders.ResultKind.INTEGER, value: 2}),\n              ],\n              []),\n          makeInnerList(\n              [\n                makeItem({kind: StructuredHeaders.ResultKind.INTEGER, value: 3}),\n                makeItemWithParams(\n                    {kind: StructuredHeaders.ResultKind.INTEGER, value: 4},\n                    [['p1', {kind: StructuredHeaders.ResultKind.BOOLEAN, value: true}]]),\n              ],\n              [['o1', {kind: StructuredHeaders.ResultKind.STRING, value: 'val'}]]),\n        ])),\n        '?1, (1 2), (3 4;p1);o1=\"val\"');\n\n    assertSerializeError(StructuredHeaders.serializeList(makeList([\n      makeItem({kind: StructuredHeaders.ResultKind.STRING, value: '\\u0000'}),\n      makeItem({kind: StructuredHeaders.ResultKind.BOOLEAN, value: true}),\n    ])));\n\n    assertSerializeError(StructuredHeaders.serializeList(makeList([\n      makeItemWithParams(\n          {kind: StructuredHeaders.ResultKind.STRING, value: 'hi'},\n          [\n            ['Arg1', {kind: StructuredHeaders.ResultKind.BOOLEAN, value: true}],\n            ['arg2', {kind: StructuredHeaders.ResultKind.BOOLEAN, value: false}],\n          ]),\n      makeItem({kind: StructuredHeaders.ResultKind.BOOLEAN, value: true}),\n    ])));\n\n    assertSerializeError(StructuredHeaders.serializeList(makeList([\n      makeItem({kind: StructuredHeaders.ResultKind.BOOLEAN, value: true}),\n      makeInnerList(\n          [\n            makeItem({kind: StructuredHeaders.ResultKind.INTEGER, value: 1.34}),\n            makeItem({kind: StructuredHeaders.ResultKind.INTEGER, value: 2}),\n          ],\n          []),\n    ])));\n\n    assertSerializeError(StructuredHeaders.serializeList(\n        makeList([makeInnerList([], [['+o1', {kind: StructuredHeaders.ResultKind.STRING, value: 'val'}]])])));\n  });\n});\n"]}