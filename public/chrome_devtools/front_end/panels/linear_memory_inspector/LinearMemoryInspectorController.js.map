{"version":3,"file":"LinearMemoryInspectorController.js","sourceRoot":"","sources":["../../../../../../front_end/panels/linear_memory_inspector/LinearMemoryInspectorController.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../core/common/common.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport type * as ObjectUI from '../../ui/legacy/components/object_ui/object_ui.js';\nimport * as UI from '../../ui/legacy/legacy.js';\n\nimport * as LinearMemoryInspectorComponents from './components/components.js';\nimport {Events as LmiEvents, LinearMemoryInspectorPane} from './LinearMemoryInspectorPane.js';\n\nconst UIStrings = {\n  /**\n   *@description Error message that shows up in the console if a buffer to be opened in the linear memory inspector cannot be found.\n   */\n  couldNotOpenLinearMemory: 'Could not open linear memory inspector: failed locating buffer.',\n  /**\n   *@description A context menu item in the Scope View of the Sources Panel\n   */\n  revealInMemoryInspectorPanel: 'Reveal in Memory inspector panel',\n};\nconst str_ =\n    i18n.i18n.registerUIStrings('panels/linear_memory_inspector/LinearMemoryInspectorController.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nconst LINEAR_MEMORY_INSPECTOR_OBJECT_GROUP = 'linear-memory-inspector';\nconst MEMORY_TRANSFER_MIN_CHUNK_SIZE = 1000;\n\nlet controllerInstance: LinearMemoryInspectorController;\n\nexport interface LazyUint8Array {\n  getRange(start: number, end: number): Promise<Uint8Array>;\n  length(): number;\n}\n\nexport class RemoteArrayBufferWrapper implements LazyUint8Array {\n  #remoteArrayBuffer: SDK.RemoteObject.RemoteArrayBuffer;\n\n  constructor(arrayBuffer: SDK.RemoteObject.RemoteArrayBuffer) {\n    this.#remoteArrayBuffer = arrayBuffer;\n  }\n\n  length(): number {\n    return this.#remoteArrayBuffer.byteLength();\n  }\n\n  async getRange(start: number, end: number): Promise<Uint8Array> {\n    const newEnd = Math.min(end, this.length());\n    if (start < 0 || start > newEnd) {\n      console.error(`Requesting invalid range of memory: (${start}, ${end})`);\n      return new Uint8Array(0);\n    }\n    const array = await this.#remoteArrayBuffer.bytes(start, newEnd);\n    return new Uint8Array(array);\n  }\n}\n\nasync function getBufferFromObject(obj: SDK.RemoteObject.RemoteObject): Promise<SDK.RemoteObject.RemoteArrayBuffer> {\n  const response = await obj.runtimeModel().agent.invoke_callFunctionOn({\n    objectId: obj.objectId,\n    functionDeclaration:\n        'function() { return this instanceof ArrayBuffer || (typeof SharedArrayBuffer !== \\'undefined\\' && this instanceof SharedArrayBuffer) ? this : this.buffer; }',\n    silent: true,\n    // Set object group in order to bind the object lifetime to the linear memory inspector.\n    objectGroup: LINEAR_MEMORY_INSPECTOR_OBJECT_GROUP,\n  });\n\n  const error = response.getError();\n  if (error) {\n    throw new Error(`Remote object representing ArrayBuffer could not be retrieved: ${error}`);\n  }\n  obj = obj.runtimeModel().createRemoteObject(response.result);\n  return new SDK.RemoteObject.RemoteArrayBuffer(obj);\n}\n\nexport function isDWARFMemoryObject(obj: SDK.RemoteObject.RemoteObject): boolean {\n  if (obj instanceof Bindings.DebuggerLanguagePlugins.ExtensionRemoteObject) {\n    return obj.linearMemoryAddress !== undefined;\n  }\n  return false;\n}\n\ntype SerializableSettings = {\n  valueTypes: LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType[],\n  valueTypeModes:\n      [\n        LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType,\n        LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueTypeMode,\n      ][],\n  endianness: LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.Endianness,\n};\n\nexport class LinearMemoryInspectorController extends SDK.TargetManager.SDKModelObserver<SDK.RuntimeModel.RuntimeModel>\n    implements Common.Revealer.Revealer<SDK.RemoteObject.LinearMemoryInspectable>,\n               UI.ContextMenu.Provider<ObjectUI.ObjectPropertiesSection.ObjectPropertyTreeElement> {\n  #paneInstance = LinearMemoryInspectorPane.instance();\n  #bufferIdToRemoteObject: Map<string, SDK.RemoteObject.RemoteObject> = new Map();\n  #bufferIdToHighlightInfo: Map<string, LinearMemoryInspectorComponents.LinearMemoryViewerUtils.HighlightInfo> =\n      new Map();\n  #settings: Common.Settings.Setting<SerializableSettings>;\n\n  private constructor() {\n    super();\n    SDK.TargetManager.TargetManager.instance().observeModels(SDK.RuntimeModel.RuntimeModel, this);\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.DebuggerModel.DebuggerModel, SDK.DebuggerModel.Events.GlobalObjectCleared, this.#onGlobalObjectClear, this);\n    this.#paneInstance.addEventListener(LmiEvents.ViewClosed, this.#viewClosed.bind(this));\n\n    SDK.TargetManager.TargetManager.instance().addModelListener(\n        SDK.DebuggerModel.DebuggerModel, SDK.DebuggerModel.Events.DebuggerPaused, this.#onDebuggerPause, this);\n\n    const defaultValueTypeModes =\n        LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.getDefaultValueTypeMapping();\n    const defaultSettings: SerializableSettings = {\n      valueTypes: Array.from(defaultValueTypeModes.keys()),\n      valueTypeModes: Array.from(defaultValueTypeModes),\n      endianness: LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.Endianness.Little,\n    };\n    this.#settings = Common.Settings.Settings.instance().createSetting('lmi-interpreter-settings', defaultSettings);\n  }\n\n  static instance(): LinearMemoryInspectorController {\n    if (controllerInstance) {\n      return controllerInstance;\n    }\n    controllerInstance = new LinearMemoryInspectorController();\n    return controllerInstance;\n  }\n\n  static async getMemoryForAddress(memoryWrapper: LazyUint8Array, address: number):\n      Promise<{memory: Uint8Array, offset: number}> {\n    // Provide a chunk of memory that covers the address to show and some before and after\n    // as 1. the address shown is not necessarily at the beginning of a page and\n    // 2. to allow for fewer memory requests.\n    const memoryChunkStart = Math.max(0, address - MEMORY_TRANSFER_MIN_CHUNK_SIZE / 2);\n    const memoryChunkEnd = memoryChunkStart + MEMORY_TRANSFER_MIN_CHUNK_SIZE;\n    const memory = await memoryWrapper.getRange(memoryChunkStart, memoryChunkEnd);\n    return {memory: memory, offset: memoryChunkStart};\n  }\n\n  static async getMemoryRange(memoryWrapper: LazyUint8Array, start: number, end: number): Promise<Uint8Array> {\n    // Check that the requested start is within bounds.\n    // If the requested end is larger than the actual\n    // memory, it will be automatically capped when\n    // requesting the range.\n    if (start < 0 || start > end || start >= memoryWrapper.length()) {\n      throw new Error('Requested range is out of bounds.');\n    }\n    const chunkEnd = Math.max(end, start + MEMORY_TRANSFER_MIN_CHUNK_SIZE);\n    return await memoryWrapper.getRange(start, chunkEnd);\n  }\n\n  async evaluateExpression(callFrame: SDK.DebuggerModel.CallFrame, expressionName: string):\n      Promise<SDK.RemoteObject.RemoteObject|undefined> {\n    const result = await callFrame.evaluate({expression: expressionName});\n    if ('error' in result) {\n      console.error(`Tried to evaluate the expression '${expressionName}' but got an error: ${result.error}`);\n      return undefined;\n    }\n    if ('exceptionDetails' in result && result?.exceptionDetails?.text) {\n      console.error(\n          `Tried to evaluate the expression '${expressionName}' but got an exception: ${result.exceptionDetails.text}`);\n      return undefined;\n    }\n    return result.object;\n  }\n\n  saveSettings(data: LinearMemoryInspectorComponents.LinearMemoryInspector.Settings): void {\n    const valueTypes = Array.from(data.valueTypes);\n    const modes = [...data.modes];\n    this.#settings.set({valueTypes, valueTypeModes: modes, endianness: data.endianness});\n  }\n\n  loadSettings(): LinearMemoryInspectorComponents.LinearMemoryInspector.Settings {\n    const settings = this.#settings.get();\n    return {\n      valueTypes: new Set(settings.valueTypes),\n      modes: new Map(settings.valueTypeModes),\n      endianness: settings.endianness,\n    };\n  }\n\n  getHighlightInfo(bufferId: string): LinearMemoryInspectorComponents.LinearMemoryViewerUtils.HighlightInfo|undefined {\n    return this.#bufferIdToHighlightInfo.get(bufferId);\n  }\n\n  removeHighlight(\n      bufferId: string, highlightInfo: LinearMemoryInspectorComponents.LinearMemoryViewerUtils.HighlightInfo): void {\n    const currentHighlight = this.getHighlightInfo(bufferId);\n    if (currentHighlight === highlightInfo) {\n      this.#bufferIdToHighlightInfo.delete(bufferId);\n    }\n  }\n\n  setHighlightInfo(\n      bufferId: string, highlightInfo: LinearMemoryInspectorComponents.LinearMemoryViewerUtils.HighlightInfo): void {\n    this.#bufferIdToHighlightInfo.set(bufferId, highlightInfo);\n  }\n\n  #resetHighlightInfo(bufferId: string): void {\n    this.#bufferIdToHighlightInfo.delete(bufferId);\n  }\n\n  static async retrieveDWARFMemoryObjectAndAddress(obj: SDK.RemoteObject.RemoteObject):\n      Promise<{obj: SDK.RemoteObject.RemoteObject, address: number}|undefined> {\n    if (!(obj instanceof Bindings.DebuggerLanguagePlugins.ExtensionRemoteObject)) {\n      return undefined;\n    }\n    const valueNode = obj;\n    const address = obj.linearMemoryAddress;\n    if (address === undefined) {\n      return undefined;\n    }\n    const callFrame = valueNode.callFrame;\n    const response = await obj.debuggerModel().agent.invoke_evaluateOnCallFrame({\n      callFrameId: callFrame.id,\n      expression: 'memories[0]',\n    });\n    const error = response.getError();\n    if (error) {\n      console.error(error);\n      Common.Console.Console.instance().error(i18nString(UIStrings.couldNotOpenLinearMemory));\n    }\n    const runtimeModel = obj.debuggerModel().runtimeModel();\n    return {obj: runtimeModel.createRemoteObject(response.result), address};\n  }\n\n  // This function returns the size of the source language value represented by the ValueNode or ExtensionRemoteObject.\n  // If the value is a pointer, the function returns the size of the pointed-to value. If the pointed-to value is also a\n  // pointer, it returns the size of the pointer (usually 4 bytes). This is the convention taken by the DWARF extension.\n  // > double x = 42.0;\n  // > double *ptr = &x;\n  // > double **dblptr = &ptr;\n  //\n  // retrieveObjectSize(ptr_ValueNode) -> 8, the size of a double\n  // retrieveObjectSize(dblptr_ValueNode) -> 4, the size of a pointer\n  static extractObjectSize(obj: Bindings.DebuggerLanguagePlugins.ExtensionRemoteObject): number {\n    return obj.linearMemorySize ?? 0;\n  }\n\n  // The object type description corresponds to the type of the highlighted memory\n  // that the user sees in the memory inspector. For pointers, we highlight the pointed to object.\n  //\n  // Example: The variable `x` has the type `int *`. Assume that `x` points to the value 3.\n  // -> The memory inspector will jump to the address where 3 is stored.\n  // -> The memory inspector will highlight the bytes that represent the 3.\n  // -> The object type description of what we show will thus be `int` and not `int *`.\n  static extractObjectTypeDescription(obj: SDK.RemoteObject.RemoteObject): string {\n    const objType = obj.description;\n    if (!objType) {\n      return '';\n    }\n    const lastChar = objType.charAt(objType.length - 1);\n    const secondToLastChar = objType.charAt(objType.length - 2);\n    const isPointerType = lastChar === '*' || lastChar === '&';\n    const isOneLevelPointer = secondToLastChar === ' ';\n    if (!isPointerType) {\n      return objType;\n    }\n    if (isOneLevelPointer) {\n      // For example, 'int *'and 'int &' become 'int'.\n      return objType.slice(0, objType.length - 2);\n    }\n    // For example, 'int **' becomes 'int *'.\n    return objType.slice(0, objType.length - 1);\n  }\n\n  // When inspecting a pointer variable, we indicate that we display the pointed-to object in the viewer\n  // by prepending an asterisk to the pointer expression's name (mimicking C++ dereferencing).\n  // If the object isn't a pointer, we return the expression unchanged.\n  //\n  // Examples:\n  // (int *) myNumber -> (int) *myNumber\n  // (int[]) numbers -> (int[]) numbers\n  static extractObjectName(obj: SDK.RemoteObject.RemoteObject, expression: string): string {\n    const lastChar = obj.description?.charAt(obj.description.length - 1);\n    const isPointerType = lastChar === '*';\n    if (isPointerType) {\n      return '*' + expression;\n    }\n    return expression;\n  }\n\n  async reveal({object, expression}: SDK.RemoteObject.LinearMemoryInspectable, omitFocus?: boolean|undefined):\n      Promise<void> {\n    const response = await LinearMemoryInspectorController.retrieveDWARFMemoryObjectAndAddress(object);\n    let memoryObject = object;\n    let memoryAddress = undefined;\n    if (response !== undefined) {\n      memoryAddress = response.address;\n      memoryObject = response.obj;\n    }\n\n    const buffer = await getBufferFromObject(memoryObject);\n    const {internalProperties} = await buffer.object().getOwnProperties(false);\n    const idProperty = internalProperties?.find(({name}) => name === '[[ArrayBufferData]]');\n    const id = idProperty?.value?.value;\n    if (!id) {\n      throw new Error('Unable to find backing store id for array buffer');\n    }\n    const memoryProperty = internalProperties?.find(({name}) => name === '[[WebAssemblyMemory]]');\n    const memory = memoryProperty?.value;\n    const highlightInfo = LinearMemoryInspectorController.extractHighlightInfo(object, expression);\n    if (highlightInfo) {\n      this.setHighlightInfo(id, highlightInfo);\n    } else {\n      this.#resetHighlightInfo(id);\n    }\n    if (this.#bufferIdToRemoteObject.has(id)) {\n      this.#paneInstance.reveal(id, memoryAddress);\n      void UI.ViewManager.ViewManager.instance().showView('linear-memory-inspector', omitFocus);\n      return;\n    }\n\n    const title = String(memory ? memory.description : buffer.object().description);\n    this.#bufferIdToRemoteObject.set(id, buffer.object());\n    const arrayBufferWrapper = new RemoteArrayBufferWrapper(buffer);\n\n    this.#paneInstance.create(id, title, arrayBufferWrapper, memoryAddress);\n    void UI.ViewManager.ViewManager.instance().showView('linear-memory-inspector', omitFocus);\n  }\n\n  appendApplicableItems(\n      _event: Event, contextMenu: UI.ContextMenu.ContextMenu,\n      target: ObjectUI.ObjectPropertiesSection.ObjectPropertyTreeElement): void {\n    if (target.property.value?.isLinearMemoryInspectable()) {\n      const expression = target.path();\n      const object = target.property.value;\n      contextMenu.debugSection().appendItem(\n          i18nString(UIStrings.revealInMemoryInspectorPanel),\n          this.reveal.bind(this, new SDK.RemoteObject.LinearMemoryInspectable(object, expression)),\n          {jslogContext: 'reveal-in-memory-inspector'});\n    }\n  }\n  static extractHighlightInfo(obj: SDK.RemoteObject.RemoteObject, expression?: string):\n      LinearMemoryInspectorComponents.LinearMemoryViewerUtils.HighlightInfo|undefined {\n    if (!(obj instanceof Bindings.DebuggerLanguagePlugins.ExtensionRemoteObject)) {\n      return undefined;\n    }\n\n    const startAddress = obj.linearMemoryAddress ?? 0;\n\n    let highlightInfo;\n    try {\n      highlightInfo = {\n        startAddress,\n        size: LinearMemoryInspectorController.extractObjectSize(obj),\n        name: expression ? LinearMemoryInspectorController.extractObjectName(obj, expression) : expression,\n        type: LinearMemoryInspectorController.extractObjectTypeDescription(obj),\n      };\n    } catch (err) {\n      highlightInfo = undefined;\n    }\n    return highlightInfo;\n  }\n\n  override modelRemoved(model: SDK.RuntimeModel.RuntimeModel): void {\n    for (const [bufferId, remoteObject] of this.#bufferIdToRemoteObject) {\n      if (model === remoteObject.runtimeModel()) {\n        this.#bufferIdToRemoteObject.delete(bufferId);\n        this.#resetHighlightInfo(bufferId);\n        this.#paneInstance.close(bufferId);\n      }\n    }\n  }\n\n  #onDebuggerPause(event: Common.EventTarget.EventTargetEvent<SDK.DebuggerModel.DebuggerModel>): void {\n    const debuggerModel = event.data;\n    for (const [bufferId, remoteObject] of this.#bufferIdToRemoteObject) {\n      if (debuggerModel.runtimeModel() === remoteObject.runtimeModel()) {\n        const topCallFrame = debuggerModel.debuggerPausedDetails()?.callFrames[0];\n        if (topCallFrame) {\n          void this\n              .updateHighlightedMemory(bufferId, topCallFrame)\n              // Need to call refreshView in the callback to trigger re-render.\n              .then(() => this.#paneInstance.refreshView(bufferId));\n        } else {\n          this.#resetHighlightInfo(bufferId);\n          this.#paneInstance.refreshView(bufferId);\n        }\n      }\n    }\n  }\n\n  #onGlobalObjectClear(event: Common.EventTarget.EventTargetEvent<SDK.DebuggerModel.DebuggerModel>): void {\n    this.modelRemoved(event.data.runtimeModel());\n  }\n\n  #viewClosed({data: bufferId}: Common.EventTarget.EventTargetEvent<string>): void {\n    const remoteObj = this.#bufferIdToRemoteObject.get(bufferId);\n    if (remoteObj) {\n      remoteObj.release();\n    }\n    this.#bufferIdToRemoteObject.delete(bufferId);\n    this.#resetHighlightInfo(bufferId);\n  }\n\n  async updateHighlightedMemory(bufferId: string, callFrame: SDK.DebuggerModel.CallFrame): Promise<void> {\n    const oldHighlightInfo = this.getHighlightInfo(bufferId);\n    const expressionName = oldHighlightInfo?.name;\n    if (!oldHighlightInfo || !expressionName) {\n      this.#resetHighlightInfo(bufferId);\n      return;\n    }\n    const obj = await this.evaluateExpression(callFrame, expressionName);\n    if (!obj) {\n      this.#resetHighlightInfo(bufferId);\n      return;\n    }\n\n    const newHighlightInfo = LinearMemoryInspectorController.extractHighlightInfo(obj, expressionName);\n    if (!newHighlightInfo || !this.#pointToSameMemoryObject(newHighlightInfo, oldHighlightInfo)) {\n      this.#resetHighlightInfo(bufferId);\n    } else {\n      this.setHighlightInfo(bufferId, newHighlightInfo);\n    }\n  }\n\n  #pointToSameMemoryObject(\n      highlightInfoA: LinearMemoryInspectorComponents.LinearMemoryViewerUtils.HighlightInfo,\n      highlightInfoB: LinearMemoryInspectorComponents.LinearMemoryViewerUtils.HighlightInfo): boolean {\n    return highlightInfoA.type === highlightInfoB.type && highlightInfoA.startAddress === highlightInfoB.startAddress;\n  }\n}\n"]}