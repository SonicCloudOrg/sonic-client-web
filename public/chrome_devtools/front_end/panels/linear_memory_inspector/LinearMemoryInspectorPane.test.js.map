{"version":3,"file":"LinearMemoryInspectorPane.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/linear_memory_inspector/LinearMemoryInspectorPane.test.ts"],"names":[],"mappings":"AAAA,gEAAgE;AAChE,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EAAC,uBAAuB,EAAC,MAAM,qCAAqC,CAAC;AAE5E,OAAO,KAAK,qBAAqB,MAAM,8BAA8B,CAAC;AAEtE,SAAS,WAAW;IAClB,MAAM,KAAK,GAAG,EAAE,CAAC;IACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC;QAC7B,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAChB,CAAC;IACD,OAAO,IAAI,UAAU,CAAC,KAAK,CAAC,CAAC;AAC/B,CAAC;AAED,uBAAuB,CAAC,2BAA2B,EAAE,GAAG,EAAE;IACxD,MAAM,YAAY;QACR,KAAK,CAAa;QAE1B,YAAY,KAAiB;YAC3B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACrB,CAAC;QAED,QAAQ,CAAC,KAAa,EAAE,GAAW;YACjC,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;QACvD,CAAC;QACD,MAAM;YACJ,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;QAC3B,CAAC;KACF;IAED,EAAE,CAAC,gBAAgB,EAAE,GAAG,EAAE;QACxB,MAAM,QAAQ,GAAG,qBAAqB,CAAC,yBAAyB,CAAC,yBAAyB,CAAC,QAAQ,EAAE,CAAC;QACtG,MAAM,YAAY,GAAG,IAAI,YAAY,CAAC,WAAW,EAAE,CAAC,CAAC;QACrD,MAAM,QAAQ,GAAG,WAAW,CAAC;QAC7B,MAAM,KAAK,GAAG,YAAY,CAAC;QAC3B,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE,KAAK,EAAE,YAAY,EAAE,EAAE,CAAC,CAAC;QAEnD,MAAM,UAAU,GAAG,QAAQ,CAAC,cAAc,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;QACzE,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QAC1B,MAAM,SAAS,GAAG,UAAU,CAAC,aAAa,CAAC,4CAA4C,CAAC,CAAC;QACzF,MAAM,CAAC,aAAa,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {describeWithEnvironment} from '../../testing/EnvironmentHelpers.js';\n\nimport * as LinearMemoryInspector from './linear_memory_inspector.js';\n\nfunction createArray() {\n  const array = [];\n  for (let i = 0; i < 100; ++i) {\n    array.push(i);\n  }\n  return new Uint8Array(array);\n}\n\ndescribeWithEnvironment('LinearMemoryInspectorPane', () => {\n  class Uint8Wrapper {\n    private array: Uint8Array;\n\n    constructor(array: Uint8Array) {\n      this.array = array;\n    }\n\n    getRange(start: number, end: number): Promise<Uint8Array> {\n      return Promise.resolve(this.array.slice(start, end));\n    }\n    length(): number {\n      return this.array.length;\n    }\n  }\n\n  it('can be created', () => {\n    const instance = LinearMemoryInspector.LinearMemoryInspectorPane.LinearMemoryInspectorPane.instance();\n    const arrayWrapper = new Uint8Wrapper(createArray());\n    const scriptId = 'script-id';\n    const title = 'Test Title';\n    instance.create(scriptId, title, arrayWrapper, 10);\n\n    const tabbedPane = instance.contentElement.querySelector('.tabbed-pane');\n    assert.exists(tabbedPane);\n    const inspector = tabbedPane.querySelector('devtools-linear-memory-inspector-inspector');\n    assert.notInstanceOf(inspector, HTMLSpanElement);\n  });\n});\n"]}