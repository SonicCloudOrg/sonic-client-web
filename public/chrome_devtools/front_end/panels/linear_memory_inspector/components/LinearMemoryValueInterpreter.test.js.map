{"version":3,"file":"LinearMemoryValueInterpreter.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/linear_memory_inspector/components/LinearMemoryValueInterpreter.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {\n  getElementWithinComponent,\n  getEventPromise,\n  renderElementIntoDOM,\n} from '../../../testing/DOMHelpers.js';\nimport {describeWithLocale} from '../../../testing/EnvironmentHelpers.js';\n\nimport * as LinearMemoryInspectorComponents from './components.js';\n\nconst DISPLAY_SELECTOR = 'devtools-linear-memory-inspector-interpreter-display';\nconst SETTINGS_SELECTOR = 'devtools-linear-memory-inspector-interpreter-settings';\nconst TOOLBAR_SELECTOR = '.settings-toolbar';\nexport const ENDIANNESS_SELECTOR = '[data-endianness]';\n\nfunction assertSettingsRenders(component: HTMLElement) {\n  const settings = getElementWithinComponent(\n      component, SETTINGS_SELECTOR, LinearMemoryInspectorComponents.ValueInterpreterSettings.ValueInterpreterSettings);\n  assert.isNotNull(settings);\n}\n\nfunction assertDisplayRenders(component: HTMLElement) {\n  const display = getElementWithinComponent(\n      component, DISPLAY_SELECTOR, LinearMemoryInspectorComponents.ValueInterpreterDisplay.ValueInterpreterDisplay);\n  assert.isNotNull(display);\n}\n\nfunction clickSettingsButton(\n    component: LinearMemoryInspectorComponents.LinearMemoryValueInterpreter.LinearMemoryValueInterpreter) {\n  const settingsButton = getElementWithinComponent(component, '[data-settings]', HTMLButtonElement);\n  settingsButton.click();\n}\n\ndescribeWithLocale('LinearMemoryValueInterpreter', () => {\n  function setUpComponent() {\n    const buffer = new Uint8Array([34, 234, 12, 3]).buffer;\n    const component = new LinearMemoryInspectorComponents.LinearMemoryValueInterpreter.LinearMemoryValueInterpreter();\n    component.data = {\n      value: buffer,\n      endianness: LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.Endianness.Little,\n      valueTypes: new Set([LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Int8]),\n      memoryLength: buffer.byteLength,\n    };\n    renderElementIntoDOM(component);\n    return component;\n  }\n\n  it('renders the settings toolbar', () => {\n    const component = setUpComponent();\n    const settingsToolbar = getElementWithinComponent(component, TOOLBAR_SELECTOR, HTMLDivElement);\n    assert.isNotNull(settingsToolbar);\n  });\n\n  it('renders value display as default', () => {\n    const component = setUpComponent();\n    assertDisplayRenders(component);\n  });\n\n  it('switches between value display and value settings', () => {\n    const component = setUpComponent();\n    assertDisplayRenders(component);\n\n    clickSettingsButton(component);\n\n    assertSettingsRenders(component);\n  });\n\n  it('listens on TypeToggleEvents', async () => {\n    const component = setUpComponent();\n    clickSettingsButton(component);\n\n    const settings = getElementWithinComponent(\n        component, SETTINGS_SELECTOR,\n        LinearMemoryInspectorComponents.ValueInterpreterSettings.ValueInterpreterSettings);\n    const eventPromise =\n        getEventPromise<LinearMemoryInspectorComponents.LinearMemoryValueInterpreter.ValueTypeToggledEvent>(\n            component, 'valuetypetoggled');\n    const expectedType = LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Float64;\n    const expectedChecked = true;\n    const typeToggleEvent =\n        new LinearMemoryInspectorComponents.ValueInterpreterSettings.TypeToggleEvent(expectedType, expectedChecked);\n    settings.dispatchEvent(typeToggleEvent);\n\n    const event = await eventPromise;\n    assert.strictEqual(event.data.type, expectedType);\n    assert.strictEqual(event.data.checked, expectedChecked);\n  });\n\n  it('renders the endianness options', () => {\n    const component = setUpComponent();\n    const input = getElementWithinComponent(component, ENDIANNESS_SELECTOR, HTMLSelectElement);\n    assert.deepEqual(input.value, LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.Endianness.Little);\n    const options = input.querySelectorAll('option');\n    const endiannessSettings = Array.from(options).map(option => option.value);\n    assert.deepEqual(endiannessSettings, [\n      LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.Endianness.Little,\n      LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.Endianness.Big,\n    ]);\n  });\n\n  it('triggers an event on changing endianness', async () => {\n    const component = setUpComponent();\n    const input = getElementWithinComponent(component, ENDIANNESS_SELECTOR, HTMLSelectElement);\n\n    const eventPromise =\n        getEventPromise<LinearMemoryInspectorComponents.LinearMemoryValueInterpreter.EndiannessChangedEvent>(\n            component, 'endiannesschanged');\n    const changeEvent = new Event('change');\n    input.dispatchEvent(changeEvent);\n\n    const event = await eventPromise;\n    assert.deepEqual(event.data, LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.Endianness.Little);\n  });\n});\n"]}