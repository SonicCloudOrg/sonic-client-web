{"version":3,"file":"LinearMemoryHighlightChipList.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/linear_memory_inspector/components/LinearMemoryHighlightChipList.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {\n  getElementWithinComponent,\n  getEventPromise,\n  renderElementIntoDOM,\n} from '../../../testing/DOMHelpers.js';\nimport {describeWithLocale} from '../../../testing/EnvironmentHelpers.js';\n\nimport * as LinearMemoryInspectorComponents from './components.js';\n\nexport const HIGHLIGHT_CHIP = '.highlight-chip';\nexport const HIGHLIGHT_PILL_JUMP_BUTTON_SELECTOR = '.jump-to-highlight-button';\nexport const HIGHLIGHT_PILL_VARIABLE_NAME = HIGHLIGHT_PILL_JUMP_BUTTON_SELECTOR + ' .value';\nexport const HIGHLIGHT_ROW_REMOVE_BUTTON_SELECTOR = '.delete-highlight-button';\n\ndescribeWithLocale('LinearMemoryInspectorHighlightChipList', () => {\n  let component: LinearMemoryInspectorComponents.LinearMemoryHighlightChipList.LinearMemoryHighlightChipList;\n\n  beforeEach(renderHighlightRow);\n\n  function renderHighlightRow() {\n    component = new LinearMemoryInspectorComponents.LinearMemoryHighlightChipList.LinearMemoryHighlightChipList();\n    renderElementIntoDOM(component);\n    const highlightInfo = {\n      startAddress: 10,\n      size: 8,\n      type: 'double',\n      name: 'myNumber',\n    };\n    component.data = {\n      highlightInfos: [\n        highlightInfo,\n      ],\n    };\n  }\n\n  it('renders a highlight chip button', () => {\n    const button = component.shadowRoot!.querySelector(HIGHLIGHT_PILL_JUMP_BUTTON_SELECTOR);\n    assert.instanceOf(button, HTMLButtonElement);\n    const expressionName = component.shadowRoot!.querySelector(HIGHLIGHT_PILL_VARIABLE_NAME);\n    assert.instanceOf(expressionName, HTMLSpanElement);\n    assert.strictEqual(expressionName.innerText, 'myNumber');\n  });\n\n  it('focuses a highlight chip button', async () => {\n    const chip = component.shadowRoot!.querySelector(HIGHLIGHT_CHIP);\n    assert.instanceOf(chip, HTMLDivElement);\n    assert.isTrue(!chip.classList.contains('focused'));\n\n    const highlightedMemory = {\n      startAddress: 10,\n      size: 8,\n      type: 'double',\n      name: 'myNumber',\n    };\n    const data = {\n      highlightInfos: [highlightedMemory],\n      focusedMemoryHighlight: highlightedMemory,\n    } as LinearMemoryInspectorComponents.LinearMemoryHighlightChipList.LinearMemoryHighlightChipListData;\n    component.data = data;\n    assert.isTrue(chip.classList.contains('focused'));\n  });\n\n  it('renders multiple chips', () => {\n    const highlightInfos = [\n      {\n        startAddress: 10,\n        size: 8,\n        type: 'double',\n        name: 'myNumber',\n      },\n      {\n        startAddress: 20,\n        size: 4,\n        type: 'int',\n        name: 'myInt',\n      },\n    ];\n    component.data = {\n      highlightInfos: highlightInfos,\n    };\n    const chips = component.shadowRoot!.querySelectorAll(HIGHLIGHT_CHIP);\n    assert.strictEqual(chips.length, highlightInfos.length);\n  });\n\n  it('sends event when clicking on jump to highlighted memory', async () => {\n    const eventPromise =\n        getEventPromise<LinearMemoryInspectorComponents.LinearMemoryHighlightChipList.JumpToHighlightedMemoryEvent>(\n            component,\n            LinearMemoryInspectorComponents.LinearMemoryHighlightChipList.JumpToHighlightedMemoryEvent.eventName);\n\n    const button = component.shadowRoot!.querySelector(HIGHLIGHT_PILL_JUMP_BUTTON_SELECTOR);\n    assert.instanceOf(button, HTMLButtonElement);\n    button.click();\n\n    assert.isNotNull(await eventPromise);\n  });\n\n  it('sends event when clicking on delete highlight chip', async () => {\n    const eventPromise =\n        getEventPromise<LinearMemoryInspectorComponents.LinearMemoryHighlightChipList.DeleteMemoryHighlightEvent>(\n            component,\n            LinearMemoryInspectorComponents.LinearMemoryHighlightChipList.DeleteMemoryHighlightEvent.eventName);\n\n    const button = component.shadowRoot!.querySelector(HIGHLIGHT_ROW_REMOVE_BUTTON_SELECTOR);\n    assert.instanceOf(button, HTMLButtonElement);\n    button.click();\n\n    assert.isNotNull(await eventPromise);\n  });\n\n  it('shows tooltip on jump to highlighted memory button', () => {\n    const button = getElementWithinComponent(component, HIGHLIGHT_PILL_JUMP_BUTTON_SELECTOR, HTMLButtonElement);\n    assert.strictEqual(button.title, 'Jump to this memory');\n  });\n\n  it('shows tooltip on delete highlight button', () => {\n    const button = getElementWithinComponent(component, HIGHLIGHT_ROW_REMOVE_BUTTON_SELECTOR, HTMLButtonElement);\n    assert.strictEqual(button.title, 'Stop highlighting this memory');\n  });\n});\n"]}