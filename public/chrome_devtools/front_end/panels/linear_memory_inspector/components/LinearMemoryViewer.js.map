{"version":3,"file":"LinearMemoryViewer.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/linear_memory_inspector/components/LinearMemoryViewer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\nimport * as VisualLogging from '../../../ui/visual_logging/visual_logging.js';\n\nimport {toHexString} from './LinearMemoryInspectorUtils.js';\nimport linearMemoryViewerStyles from './linearMemoryViewer.css.js';\nimport {type HighlightInfo} from './LinearMemoryViewerUtils.js';\n\nconst {render, html} = LitHtml;\n\nexport interface LinearMemoryViewerData {\n  memory: Uint8Array;\n  address: number;\n  memoryOffset: number;\n  focus: boolean;\n  highlightInfo?: HighlightInfo;\n  focusedMemoryHighlight?: HighlightInfo;\n}\n\nexport class ByteSelectedEvent extends Event {\n  static readonly eventName = 'byteselected';\n  data: number;\n\n  constructor(address: number) {\n    super(ByteSelectedEvent.eventName);\n    this.data = address;\n  }\n}\n\nexport class ResizeEvent extends Event {\n  static readonly eventName = 'resize';\n  data: number;\n\n  constructor(numBytesPerPage: number) {\n    super(ResizeEvent.eventName);\n    this.data = numBytesPerPage;\n  }\n}\n\nconst BYTE_GROUP_MARGIN = 8;\nconst BYTE_GROUP_SIZE = 4;\n\nexport class LinearMemoryViewer extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-linear-memory-inspector-viewer`;\n\n  readonly #shadow = this.attachShadow({mode: 'open'});\n\n  readonly #resizeObserver = new ResizeObserver(() => this.#resize());\n  #isObservingResize = false;\n\n  #memory = new Uint8Array();\n  #address = 0;\n  #memoryOffset = 0;\n  #highlightInfo?: HighlightInfo;\n  #focusedMemoryHighlight?: HighlightInfo;\n\n  #numRows = 1;\n  #numBytesInRow = BYTE_GROUP_SIZE;\n\n  #focusOnByte = true;\n\n  #lastKeyUpdateSent: number|undefined = undefined;\n\n  set data(data: LinearMemoryViewerData) {\n    if (data.address < data.memoryOffset || data.address > data.memoryOffset + data.memory.length || data.address < 0) {\n      throw new Error('Address is out of bounds.');\n    }\n\n    if (data.memoryOffset < 0) {\n      throw new Error('Memory offset has to be greater or equal to zero.');\n    }\n\n    this.#memory = data.memory;\n    this.#address = data.address;\n    this.#highlightInfo = data.highlightInfo;\n    this.#focusedMemoryHighlight = data.focusedMemoryHighlight;\n    this.#memoryOffset = data.memoryOffset;\n    this.#focusOnByte = data.focus;\n    this.#update();\n  }\n\n  connectedCallback(): void {\n    this.style.setProperty('--byte-group-margin', `${BYTE_GROUP_MARGIN}px`);\n    this.#shadow.adoptedStyleSheets = [linearMemoryViewerStyles];\n  }\n\n  disconnectedCallback(): void {\n    this.#isObservingResize = false;\n    this.#resizeObserver.disconnect();\n  }\n\n  #update(): void {\n    this.#updateDimensions();\n    this.#render();\n    this.#focusOnView();\n    this.#engageResizeObserver();\n  }\n\n  #focusOnView(): void {\n    if (this.#focusOnByte) {\n      const view = this.#shadow.querySelector<HTMLDivElement>('.view');\n      if (view) {\n        view.focus();\n      }\n    }\n  }\n\n  #resize(): void {\n    this.#update();\n    this.dispatchEvent(new ResizeEvent(this.#numBytesInRow * this.#numRows));\n  }\n\n  /** Recomputes the number of rows and (byte) columns that fit into the current view. */\n  #updateDimensions(): void {\n    if (this.clientWidth === 0 || this.clientHeight === 0 || !this.shadowRoot) {\n      this.#numBytesInRow = BYTE_GROUP_SIZE;\n      this.#numRows = 1;\n      return;\n    }\n\n    // We initially just plot one row with one byte group (here: byte group size of 4).\n    // Depending on that initially plotted row we can determine how many rows and\n    // bytes per row we can fit.\n    // >    0000000 | b0 b1 b2 b4 | a0 a1 a2 a3    <\n    //      ^-------^ ^-^           ^-^\n    //          |     byteCellWidth textCellWidth\n    //          |\n    //     addressTextAndDividerWidth\n    //  ^--^   +     ^----------------------------^\n    //      widthToFill\n\n    const firstByteCell = this.shadowRoot.querySelector('.byte-cell');\n    const textCell = this.shadowRoot.querySelector('.text-cell');\n    const divider = this.shadowRoot.querySelector('.divider');\n    const rowElement = this.shadowRoot.querySelector('.row');\n    const addressText = this.shadowRoot.querySelector('.address');\n\n    if (!firstByteCell || !textCell || !divider || !rowElement || !addressText) {\n      this.#numBytesInRow = BYTE_GROUP_SIZE;\n      this.#numRows = 1;\n      return;\n    }\n\n    // Calculate the width required for each (unsplittable) group of bytes.\n    const byteCellWidth = firstByteCell.getBoundingClientRect().width;\n    const textCellWidth = textCell.getBoundingClientRect().width;\n    const groupWidth = BYTE_GROUP_SIZE * (byteCellWidth + textCellWidth) + BYTE_GROUP_MARGIN;\n\n    // Calculate the width to fill.\n    const dividerWidth = divider.getBoundingClientRect().width;\n    const addressTextAndDividerWidth =\n        firstByteCell.getBoundingClientRect().left - addressText.getBoundingClientRect().left;\n\n    // this.clientWidth is rounded, while the other values are not. Subtract 1 to make\n    // sure that we correctly calculate the widths.\n    const widthToFill = this.clientWidth - 1 - addressTextAndDividerWidth - dividerWidth;\n\n    if (widthToFill < groupWidth) {\n      this.#numBytesInRow = BYTE_GROUP_SIZE;\n      this.#numRows = 1;\n      return;\n    }\n    this.#numBytesInRow = Math.floor(widthToFill / groupWidth) * BYTE_GROUP_SIZE;\n    this.#numRows = Math.floor(this.clientHeight / rowElement.clientHeight);\n  }\n\n  #engageResizeObserver(): void {\n    if (!this.#resizeObserver || this.#isObservingResize) {\n      return;\n    }\n\n    this.#resizeObserver.observe(this);\n    this.#isObservingResize = true;\n  }\n\n  #render(): void {\n    const jslog = VisualLogging.section()\n                      .track({keydown: 'ArrowUp|ArrowDown|ArrowLeft|ArrowRight|PageUp|PageDown'})\n                      .context('linear-memory-inspector.viewer');\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    render(html`\n      <div class=\"view\" tabindex=\"0\" @keydown=${this.#onKeyDown} jslog=${jslog}>\n        ${this.#renderView()}\n      </div>\n      `, this.#shadow, {host: this});\n  }\n\n  #onKeyDown(event: Event): void {\n    const keyboardEvent = event as KeyboardEvent;\n    let newAddress = undefined;\n    if (keyboardEvent.code === 'ArrowUp') {\n      newAddress = this.#address - this.#numBytesInRow;\n    } else if (keyboardEvent.code === 'ArrowDown') {\n      newAddress = this.#address + this.#numBytesInRow;\n    } else if (keyboardEvent.code === 'ArrowLeft') {\n      newAddress = this.#address - 1;\n    } else if (keyboardEvent.code === 'ArrowRight') {\n      newAddress = this.#address + 1;\n    } else if (keyboardEvent.code === 'PageUp') {\n      newAddress = this.#address - this.#numBytesInRow * this.#numRows;\n    } else if (keyboardEvent.code === 'PageDown') {\n      newAddress = this.#address + this.#numBytesInRow * this.#numRows;\n    }\n\n    if (newAddress !== undefined && newAddress !== this.#lastKeyUpdateSent) {\n      this.#lastKeyUpdateSent = newAddress;\n      this.dispatchEvent(new ByteSelectedEvent(newAddress));\n    }\n  }\n\n  #renderView(): LitHtml.TemplateResult {\n    const itemTemplates = [];\n    for (let i = 0; i < this.#numRows; ++i) {\n      itemTemplates.push(this.#renderRow(i));\n    }\n    return html`${itemTemplates}`;\n  }\n\n  #renderRow(row: number): LitHtml.TemplateResult {\n    const {startIndex, endIndex} = {startIndex: row * this.#numBytesInRow, endIndex: (row + 1) * this.#numBytesInRow};\n\n    const classMap = {\n      address: true,\n      selected: Math.floor((this.#address - this.#memoryOffset) / this.#numBytesInRow) === row,\n    };\n    return html`\n    <div class=\"row\">\n      <span class=${LitHtml.Directives.classMap(classMap)}>${toHexString({number: startIndex + this.#memoryOffset, pad: 8, prefix: false})}</span>\n      <span class=\"divider\"></span>\n      ${this.#renderByteValues(startIndex, endIndex)}\n      <span class=\"divider\"></span>\n      ${this.#renderCharacterValues(startIndex, endIndex)}\n    </div>\n    `;\n  }\n\n  #renderByteValues(startIndex: number, endIndex: number): LitHtml.TemplateResult {\n    const cells = [];\n    for (let i = startIndex; i < endIndex; ++i) {\n      const actualIndex = i + this.#memoryOffset;\n      // Add margin after each group of bytes of size byteGroupSize.\n      const addMargin = i !== startIndex && (i - startIndex) % BYTE_GROUP_SIZE === 0;\n      const selected = i === this.#address - this.#memoryOffset;\n      const shouldBeHighlighted = this.#shouldBeHighlighted(actualIndex);\n      const focusedMemoryArea = this.#isFocusedArea(actualIndex);\n      const classMap = {\n        'cell': true,\n        'byte-cell': true,\n        'byte-group-margin': addMargin,\n        selected,\n        'highlight-area': shouldBeHighlighted,\n        'focused-area': focusedMemoryArea,\n      };\n      const isSelectableCell = i < this.#memory.length;\n      const byteValue = isSelectableCell ? html`${toHexString({number: this.#memory[i], pad: 2, prefix: false})}` : '';\n      const onSelectedByte = isSelectableCell ? this.#onSelectedByte.bind(this, actualIndex) : '';\n      const jslog = VisualLogging.tableCell('linear-memory-inspector.byte-cell').track({click: true});\n      cells.push(html`<span class=${LitHtml.Directives.classMap(classMap)} @click=${onSelectedByte} jslog=${jslog}>${byteValue}</span>`);\n    }\n    return html`${cells}`;\n  }\n\n  #renderCharacterValues(startIndex: number, endIndex: number): LitHtml.TemplateResult {\n    const cells = [];\n    for (let i = startIndex; i < endIndex; ++i) {\n      const actualIndex = i + this.#memoryOffset;\n      const shouldBeHighlighted = this.#shouldBeHighlighted(actualIndex);\n      const focusedMemoryArea = this.#isFocusedArea(actualIndex);\n      const classMap = {\n        'cell': true,\n        'text-cell': true,\n        selected: this.#address - this.#memoryOffset === i,\n        'highlight-area': shouldBeHighlighted,\n        'focused-area': focusedMemoryArea,\n      };\n      const isSelectableCell = i < this.#memory.length;\n      const value = isSelectableCell ? html`${this.#toAscii(this.#memory[i])}` : '';\n      const onSelectedByte = isSelectableCell ? this.#onSelectedByte.bind(this, i + this.#memoryOffset) : '';\n      const jslog = VisualLogging.tableCell('linear-memory-inspector.text-cell').track({click: true});\n      cells.push(html`<span class=${LitHtml.Directives.classMap(classMap)} @click=${onSelectedByte} jslog=${jslog}>${value}</span>`);\n    }\n    return html`${cells}`;\n  }\n\n  #toAscii(byte: number): string {\n    if (byte >= 20 && byte <= 0x7F) {\n      return String.fromCharCode(byte);\n    }\n    return '.';\n  }\n\n  #onSelectedByte(index: number): void {\n    this.dispatchEvent(new ByteSelectedEvent(index));\n  }\n\n  #shouldBeHighlighted(index: number): boolean {\n    if (this.#highlightInfo === undefined) {\n      return false;\n    }\n    return this.#highlightInfo.startAddress <= index\n    && index < this.#highlightInfo.startAddress + this.#highlightInfo.size;\n  }\n\n  #isFocusedArea(index: number): boolean {\n    if (!this.#focusedMemoryHighlight) {\n      return false;\n    }\n    return this.#focusedMemoryHighlight.startAddress <= index\n    && index < this.#focusedMemoryHighlight.startAddress + this.#focusedMemoryHighlight.size;\n  }\n}\n\ncustomElements.define('devtools-linear-memory-inspector-viewer', LinearMemoryViewer);\n\ndeclare global {\n\ninterface HTMLElementTagNameMap {\n    'devtools-linear-memory-inspector-viewer': LinearMemoryViewer;\n  }\n}\n"]}