{"version":3,"file":"ValueInterpreterSettings.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/linear_memory_inspector/components/ValueInterpreterSettings.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {\n  getElementsWithinComponent,\n  getEventPromise,\n  renderElementIntoDOM,\n} from '../../../testing/DOMHelpers.js';\nimport {describeWithLocale} from '../../../testing/EnvironmentHelpers.js';\n\nimport * as LinearMemoryInspectorComponents from './components.js';\n\nconst SETTINGS_INPUT_SELECTOR = '[data-input]';\nconst SETTINGS_TITLE_SELECTOR = '[data-title]';\nconst SETTINGS_LABEL_SELECTOR = '.type-label';\n\ndescribeWithLocale('ValueInterpreterSettings', () => {\n  function setUpComponent() {\n    const component = new LinearMemoryInspectorComponents.ValueInterpreterSettings.ValueInterpreterSettings();\n    const data = {\n      valueTypes: new Set([\n        LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Int8,\n        LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Float64,\n        LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Pointer32,\n      ]),\n    };\n    component.data = data;\n    renderElementIntoDOM(component);\n    return {component, data};\n  }\n\n  it('renders all checkboxes', () => {\n    const {component} = setUpComponent();\n    const checkboxes = getElementsWithinComponent(component, SETTINGS_LABEL_SELECTOR, HTMLLabelElement);\n    const checkboxLabels = Array.from(checkboxes, checkbox => checkbox.getAttribute('title'));\n    assert.deepEqual(checkboxLabels, [\n      LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Int8,\n      LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Int16,\n      LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Int32,\n      LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Int64,\n      LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Float32,\n      LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Float64,\n      LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Pointer32,\n      LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Pointer64,\n    ]);\n  });\n\n  it('triggers an event on checkbox click', async () => {\n    const {component} = setUpComponent();\n    const labels = getElementsWithinComponent(component, SETTINGS_LABEL_SELECTOR, HTMLLabelElement);\n\n    for (const label of labels) {\n      const checkbox = label.querySelector(SETTINGS_INPUT_SELECTOR);\n      assert.instanceOf(checkbox, HTMLInputElement);\n      const title = label.querySelector(SETTINGS_TITLE_SELECTOR);\n      assert.instanceOf(title, HTMLSpanElement);\n\n      const checked = checkbox.checked;\n\n      const eventPromise = getEventPromise<LinearMemoryInspectorComponents.ValueInterpreterSettings.TypeToggleEvent>(\n          component, 'typetoggle');\n      checkbox.click();\n      const event = await eventPromise;\n\n      assert.strictEqual(`${event.data.type}`, title.innerText);\n      assert.strictEqual(checkbox.checked, !checked);\n    }\n  });\n\n  it('correctly shows checkboxes as checked/unchecked', () => {\n    const {component, data} = setUpComponent();\n    const labels = getElementsWithinComponent(component, SETTINGS_LABEL_SELECTOR, HTMLLabelElement);\n    const elements = Array.from(labels).map(label => {\n      const checkbox = label.querySelector<HTMLInputElement>(SETTINGS_INPUT_SELECTOR);\n      const title = label.querySelector<HTMLSpanElement>(SETTINGS_TITLE_SELECTOR);\n      assert.instanceOf(checkbox, HTMLInputElement);\n      assert.instanceOf(title, HTMLSpanElement);\n      return {title, checked: checkbox.checked};\n    });\n    assert.isAtLeast(data.valueTypes.size, 1);\n    const checkedTitles = new Set(elements.filter(n => n.checked).map(n => n.title.innerText));\n    const expectedTitles = new Set([...data.valueTypes].map(type => `${type}`));\n    assert.deepEqual(checkedTitles, expectedTitles);\n\n    const uncheckedTitles = new Set(elements.filter(n => !n.checked).map(n => n.title.innerText));\n    const allTypesTitle = [\n      LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Int8,\n      LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Int16,\n      LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Int32,\n      LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Int64,\n      LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Float32,\n      LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Float64,\n      LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Pointer32,\n      LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Pointer64,\n    ];\n    const expectedUncheckedTitles = new Set(allTypesTitle.filter(title => !expectedTitles.has(title)));\n    assert.deepEqual(uncheckedTitles, expectedUncheckedTitles);\n  });\n});\n"]}