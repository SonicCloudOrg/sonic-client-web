{"version":3,"file":"LinearMemoryNavigator.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/linear_memory_inspector/components/LinearMemoryNavigator.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {\n  assertElements,\n  getElementsWithinComponent,\n  getElementWithinComponent,\n  getEventPromise,\n  renderElementIntoDOM,\n} from '../../../testing/DOMHelpers.js';\nimport {describeWithLocale} from '../../../testing/EnvironmentHelpers.js';\n\nimport * as LinearMemoryInspectorComponents from './components.js';\n\nexport const NAVIGATOR_ADDRESS_SELECTOR = '[data-input]';\nexport const NAVIGATOR_PAGE_BUTTON_SELECTOR = '[data-button=pagenavigation]';\nexport const NAVIGATOR_HISTORY_BUTTON_SELECTOR = '[data-button=historynavigation]';\nexport const NAVIGATOR_REFRESH_BUTTON_SELECTOR = '[data-button=refreshrequested]';\n\ndescribeWithLocale('LinearMemoryNavigator', () => {\n  let component: LinearMemoryInspectorComponents.LinearMemoryNavigator.LinearMemoryNavigator;\n\n  beforeEach(renderNavigator);\n\n  function renderNavigator() {\n    component = new LinearMemoryInspectorComponents.LinearMemoryNavigator.LinearMemoryNavigator();\n    renderElementIntoDOM(component);\n\n    component.data = {\n      address: '20',\n      valid: true,\n      mode: LinearMemoryInspectorComponents.LinearMemoryNavigator.Mode.Submitted,\n      error: undefined,\n      canGoBackInHistory: true,\n      canGoForwardInHistory: true,\n    };\n  }\n\n  async function assertNavigationEvents(eventType: string) {\n    const shadowRoot = component.shadowRoot;\n    assert.isNotNull(shadowRoot);\n    const pageNavigationButtons = shadowRoot.querySelectorAll(`[data-button=${eventType}]`);\n    assertElements(pageNavigationButtons, HTMLButtonElement);\n    assert.lengthOf(pageNavigationButtons, 2);\n\n    const navigation = [];\n    for (const button of pageNavigationButtons) {\n      const eventPromise = getEventPromise<LinearMemoryInspectorComponents.LinearMemoryNavigator.PageNavigationEvent>(\n          component, eventType);\n      button.click();\n      const event = await eventPromise;\n      navigation.push(event.data);\n    }\n\n    assert.deepEqual(navigation, [\n      LinearMemoryInspectorComponents.LinearMemoryNavigator.Navigation.Backward,\n      LinearMemoryInspectorComponents.LinearMemoryNavigator.Navigation.Forward,\n    ]);\n  }\n\n  it('renders navigator address', () => {\n    const shadowRoot = component.shadowRoot;\n    assert.isNotNull(shadowRoot);\n    const input = shadowRoot.querySelector(NAVIGATOR_ADDRESS_SELECTOR);\n    assert.instanceOf(input, HTMLInputElement);\n    assert.strictEqual(input.value, '20');\n  });\n\n  it('re-renders address on address change', () => {\n    component.data = {\n      address: '16',\n      valid: true,\n      mode: LinearMemoryInspectorComponents.LinearMemoryNavigator.Mode.Submitted,\n      error: undefined,\n      canGoBackInHistory: false,\n      canGoForwardInHistory: false,\n    };\n\n    const shadowRoot = component.shadowRoot;\n    assert.isNotNull(shadowRoot);\n    const input = shadowRoot.querySelector(NAVIGATOR_ADDRESS_SELECTOR);\n    assert.instanceOf(input, HTMLInputElement);\n    assert.strictEqual(input.value, '16');\n  });\n\n  it('sends event when clicking on refresh', async () => {\n    const eventPromise = getEventPromise<LinearMemoryInspectorComponents.LinearMemoryNavigator.RefreshRequestedEvent>(\n        component, 'refreshrequested');\n\n    const shadowRoot = component.shadowRoot;\n    assert.isNotNull(shadowRoot);\n    const refreshButton = shadowRoot.querySelector(NAVIGATOR_REFRESH_BUTTON_SELECTOR);\n    assert.instanceOf(refreshButton, HTMLButtonElement);\n    refreshButton.click();\n\n    assert.isNotNull(await eventPromise);\n  });\n\n  it('sends events when clicking previous and next page', async () => {\n    await assertNavigationEvents('historynavigation');\n  });\n\n  it('sends events when clicking undo and redo', async () => {\n    await assertNavigationEvents('pagenavigation');\n  });\n\n  it('disables the previous and next page buttons if specified as not navigatable', () => {\n    component.data = {\n      address: '0',\n      valid: true,\n      mode: LinearMemoryInspectorComponents.LinearMemoryNavigator.Mode.Submitted,\n      error: undefined,\n      canGoBackInHistory: false,\n      canGoForwardInHistory: false,\n    };\n\n    const buttons = getElementsWithinComponent(component, NAVIGATOR_HISTORY_BUTTON_SELECTOR, HTMLButtonElement);\n    assert.lengthOf(buttons, 2);\n    const historyBack = buttons[0];\n    const historyForward = buttons[1];\n\n    assert.isTrue(historyBack.disabled);\n    assert.isTrue(historyForward.disabled);\n  });\n\n  it('shows tooltip on hovering over address', () => {\n    const input = getElementWithinComponent(component, NAVIGATOR_ADDRESS_SELECTOR, HTMLInputElement);\n    assert.strictEqual(input.title, 'Enter address');\n  });\n\n  it('shows tooltip with error and selects all text on submitting invalid address input', () => {\n    const error = 'Address is invalid';\n    const invalidAddress = '60';\n    component.data = {\n      address: invalidAddress,\n      valid: false,\n      mode: LinearMemoryInspectorComponents.LinearMemoryNavigator.Mode.InvalidSubmit,\n      error,\n      canGoBackInHistory: false,\n      canGoForwardInHistory: false,\n    };\n    const input = getElementWithinComponent(component, NAVIGATOR_ADDRESS_SELECTOR, HTMLInputElement);\n    assert.strictEqual(input.title, error);\n    assert.isNotNull(input.selectionStart);\n    assert.isNotNull(input.selectionEnd);\n    if (input.selectionEnd !== null && input.selectionStart !== null) {\n      const selectionLength = input.selectionEnd - input.selectionStart;\n      assert.strictEqual(selectionLength, invalidAddress.length);\n    }\n  });\n\n  it('shows tooltip with invalid address on hovering over address', () => {\n    const error = 'Address is invalid';\n    component.data = {\n      address: '60',\n      valid: false,\n      mode: LinearMemoryInspectorComponents.LinearMemoryNavigator.Mode.Edit,\n      error,\n      canGoBackInHistory: false,\n      canGoForwardInHistory: false,\n    };\n    const input = getElementWithinComponent(component, NAVIGATOR_ADDRESS_SELECTOR, HTMLInputElement);\n    assert.strictEqual(input.title, error);\n  });\n\n  it('shows tooltip on page navigation buttons', () => {\n    const buttons = getElementsWithinComponent(component, NAVIGATOR_PAGE_BUTTON_SELECTOR, HTMLButtonElement);\n    assert.lengthOf(buttons, 2);\n    const pageBack = buttons[0];\n    const pageForward = buttons[1];\n\n    assert.strictEqual(pageBack.title, 'Previous page');\n    assert.strictEqual(pageForward.title, 'Next page');\n  });\n\n  it('shows tooltip on history navigation buttons', () => {\n    const buttons = getElementsWithinComponent(component, NAVIGATOR_HISTORY_BUTTON_SELECTOR, HTMLButtonElement);\n    assert.lengthOf(buttons, 2);\n    const historyBack = buttons[0];\n    const historyForward = buttons[1];\n\n    assert.strictEqual(historyBack.title, 'Go back in address history');\n    assert.strictEqual(historyForward.title, 'Go forward in address history');\n  });\n\n  it('shows tooltip on refresh button', () => {\n    const refreshButton = getElementWithinComponent(component, NAVIGATOR_REFRESH_BUTTON_SELECTOR, HTMLButtonElement);\n\n    assert.strictEqual(refreshButton.title, 'Refresh');\n  });\n});\n"]}