{"version":3,"file":"LinearMemoryInspector.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/linear_memory_inspector/components/LinearMemoryInspector.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../../../core/common/common.js';\nimport * as i18n from '../../../core/i18n/i18n.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\n\nimport linearMemoryInspectorStyles from './linearMemoryInspector.css.js';\n\nconst {render, html} = LitHtml;\n\nimport {\n  LinearMemoryNavigator,\n  Mode,\n  Navigation,\n  type AddressInputChangedEvent,\n  type HistoryNavigationEvent,\n  type LinearMemoryNavigatorData,\n  type PageNavigationEvent,\n} from './LinearMemoryNavigator.js';\n\nimport {\n  LinearMemoryValueInterpreter,\n  type EndiannessChangedEvent,\n  type LinearMemoryValueInterpreterData,\n  type ValueTypeToggledEvent,\n} from './LinearMemoryValueInterpreter.js';\n\nimport {\n  LinearMemoryHighlightChipList,\n  type DeleteMemoryHighlightEvent,\n  type JumpToHighlightedMemoryEvent,\n  type LinearMemoryHighlightChipListData,\n} from './LinearMemoryHighlightChipList.js';\nimport {formatAddress, parseAddress} from './LinearMemoryInspectorUtils.js';\nimport {\n  LinearMemoryViewer,\n  type ByteSelectedEvent,\n  type LinearMemoryViewerData,\n  type ResizeEvent,\n} from './LinearMemoryViewer.js';\nimport {type HighlightInfo} from './LinearMemoryViewerUtils.js';\nimport {type JumpToPointerAddressEvent, type ValueTypeModeChangedEvent} from './ValueInterpreterDisplay.js';\nimport {\n  Endianness,\n  VALUE_INTEPRETER_MAX_NUM_BYTES,\n  getDefaultValueTypeMapping,\n  type ValueType,\n  type ValueTypeMode,\n} from './ValueInterpreterDisplayUtils.js';\n\nconst UIStrings = {\n  /**\n   *@description Tooltip text that appears when hovering over an invalid address in the address line in the Linear memory inspector\n   *@example {0x00000000} PH1\n   *@example {0x00400000} PH2\n   */\n  addressHasToBeANumberBetweenSAnd: 'Address has to be a number between {PH1} and {PH2}',\n};\nconst str_ =\n    i18n.i18n.registerUIStrings('panels/linear_memory_inspector/components/LinearMemoryInspector.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n// If the LinearMemoryInspector only receives a portion\n// of the original Uint8Array to show, it requires information\n// on the 1. memoryOffset (at which index this portion starts),\n// and on the 2. outerMemoryLength (length of the original Uint8Array).\nexport interface LinearMemoryInspectorData {\n  memory: Uint8Array;\n  address: number;\n  memoryOffset: number;\n  outerMemoryLength: number;\n  valueTypes?: Set<ValueType>;\n  valueTypeModes?: Map<ValueType, ValueTypeMode>;\n  endianness?: Endianness;\n  highlightInfo?: HighlightInfo;\n}\n\nexport type Settings = {\n  valueTypes: Set<ValueType>,\n  modes: Map<ValueType, ValueTypeMode>,\n  endianness: Endianness,\n};\n\nexport class MemoryRequestEvent extends Event {\n  static readonly eventName = 'memoryrequest';\n  data: {start: number, end: number, address: number};\n\n  constructor(start: number, end: number, address: number) {\n    super(MemoryRequestEvent.eventName);\n    this.data = {start, end, address};\n  }\n}\n\nexport class AddressChangedEvent extends Event {\n  static readonly eventName = 'addresschanged';\n  data: number;\n\n  constructor(address: number) {\n    super(AddressChangedEvent.eventName);\n    this.data = address;\n  }\n}\n\nexport class SettingsChangedEvent extends Event {\n  static readonly eventName = 'settingschanged';\n  data: Settings;\n\n  constructor(settings: Settings) {\n    super(SettingsChangedEvent.eventName);\n    this.data = settings;\n  }\n}\n\nclass AddressHistoryEntry implements Common.SimpleHistoryManager.HistoryEntry {\n  #address = 0;\n  #callback;\n\n  constructor(address: number, callback: (x: number) => void) {\n    if (address < 0) {\n      throw new Error('Address should be a greater or equal to zero');\n    }\n    this.#address = address;\n    this.#callback = callback;\n  }\n\n  valid(): boolean {\n    return true;\n  }\n\n  reveal(): void {\n    this.#callback(this.#address);\n  }\n}\n\nexport class LinearMemoryInspector extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-linear-memory-inspector-inspector`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  readonly #history = new Common.SimpleHistoryManager.SimpleHistoryManager(10);\n\n  #memory = new Uint8Array();\n  #memoryOffset = 0;\n  #outerMemoryLength = 0;\n\n  #address = -1;\n  #highlightInfo?: HighlightInfo;\n\n  #currentNavigatorMode = Mode.Submitted;\n  #currentNavigatorAddressLine = `${this.#address}`;\n\n  #numBytesPerPage = 4;\n\n  #valueTypeModes = getDefaultValueTypeMapping();\n  #valueTypes = new Set(this.#valueTypeModes.keys());\n  #endianness = Endianness.Little;\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [linearMemoryInspectorStyles];\n  }\n\n  set data(data: LinearMemoryInspectorData) {\n    if (data.address < data.memoryOffset || data.address > data.memoryOffset + data.memory.length || data.address < 0) {\n      throw new Error('Address is out of bounds.');\n    }\n\n    if (data.memoryOffset < 0) {\n      throw new Error('Memory offset has to be greater or equal to zero.');\n    }\n\n    if (data.highlightInfo) {\n      if (data.highlightInfo.size < 0) {\n        throw new Error('Object size has to be greater than or equal to zero');\n      }\n      if (data.highlightInfo.startAddress < 0 || data.highlightInfo.startAddress >= data.outerMemoryLength) {\n        throw new Error('Object start address is out of bounds.');\n      }\n    }\n\n    this.#memory = data.memory;\n    this.#memoryOffset = data.memoryOffset;\n    this.#outerMemoryLength = data.outerMemoryLength;\n    this.#valueTypeModes = data.valueTypeModes || this.#valueTypeModes;\n    this.#valueTypes = data.valueTypes || this.#valueTypes;\n    this.#endianness = data.endianness || this.#endianness;\n    this.#highlightInfo = data.highlightInfo;\n    this.#setAddress(data.address);\n    this.#render();\n  }\n\n  #render(): void {\n    const {start, end} = this.#getPageRangeForAddress(this.#address, this.#numBytesPerPage);\n\n    const navigatorAddressToShow = this.#currentNavigatorMode === Mode.Submitted ? formatAddress(this.#address) :\n                                                                                   this.#currentNavigatorAddressLine;\n    const navigatorAddressIsValid = this.#isValidAddress(navigatorAddressToShow);\n\n    const invalidAddressMsg = i18nString(\n        UIStrings.addressHasToBeANumberBetweenSAnd,\n        {PH1: formatAddress(0), PH2: formatAddress(this.#outerMemoryLength)});\n\n    const errorMsg = navigatorAddressIsValid ? undefined : invalidAddressMsg;\n\n    const canGoBackInHistory = this.#history.canRollback();\n    const canGoForwardInHistory = this.#history.canRollover();\n\n    const highlightedMemoryAreas = this.#highlightInfo ? [this.#highlightInfo] : [];\n    const focusedMemoryHighlight = this.#getSmallestEnclosingMemoryHighlight(highlightedMemoryAreas, this.#address);\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    render(html`\n      <div class=\"view\">\n        <${LinearMemoryNavigator.litTagName}\n          .data=${{address: navigatorAddressToShow, valid: navigatorAddressIsValid, mode: this.#currentNavigatorMode, error: errorMsg, canGoBackInHistory, canGoForwardInHistory} as LinearMemoryNavigatorData}\n          @refreshrequested=${this.#onRefreshRequest}\n          @addressinputchanged=${this.#onAddressChange}\n          @pagenavigation=${this.#navigatePage}\n          @historynavigation=${this.#navigateHistory}></${LinearMemoryNavigator.litTagName}>\n          <${LinearMemoryHighlightChipList.litTagName}\n          .data=${{highlightInfos: highlightedMemoryAreas, focusedMemoryHighlight: focusedMemoryHighlight } as LinearMemoryHighlightChipListData}\n          @jumptohighlightedmemory=${this.#onJumpToAddress}>\n          </${LinearMemoryHighlightChipList.litTagName}>\n        <${LinearMemoryViewer.litTagName}\n          .data=${{\n            memory: this.#memory.slice(start - this.#memoryOffset,\n            end - this.#memoryOffset),\n            address: this.#address, memoryOffset: start,\n            focus: this.#currentNavigatorMode === Mode.Submitted,\n            highlightInfo: this.#highlightInfo,\n            focusedMemoryHighlight: focusedMemoryHighlight } as LinearMemoryViewerData}\n          @byteselected=${this.#onByteSelected}\n          @resize=${this.#resize}>\n        </${LinearMemoryViewer.litTagName}>\n      </div>\n      <div class=\"value-interpreter\">\n        <${LinearMemoryValueInterpreter.litTagName}\n          .data=${{\n            value: this.#memory.slice(this.#address - this.#memoryOffset, this.#address + VALUE_INTEPRETER_MAX_NUM_BYTES).buffer,\n            valueTypes: this.#valueTypes,\n            valueTypeModes: this.#valueTypeModes,\n            endianness: this.#endianness,\n            memoryLength: this.#outerMemoryLength } as LinearMemoryValueInterpreterData}\n          @valuetypetoggled=${this.#onValueTypeToggled}\n          @valuetypemodechanged=${this.#onValueTypeModeChanged}\n          @endiannesschanged=${this.#onEndiannessChanged}\n          @jumptopointeraddress=${this.#onJumpToAddress}\n          >\n        </${LinearMemoryValueInterpreter.litTagName}/>\n      </div>\n      `, this.#shadow, {\n      host: this,\n    });\n    // clang-format on\n  }\n\n  #onJumpToAddress(e: JumpToPointerAddressEvent|JumpToHighlightedMemoryEvent): void {\n    // Stop event from bubbling up, since no element further up needs the event.\n    e.stopPropagation();\n    this.#currentNavigatorMode = Mode.Submitted;\n    const addressInRange = Math.max(0, Math.min(e.data, this.#outerMemoryLength - 1));\n    this.#jumpToAddress(addressInRange);\n  }\n\n  #onRefreshRequest(): void {\n    const {start, end} = this.#getPageRangeForAddress(this.#address, this.#numBytesPerPage);\n    this.dispatchEvent(new MemoryRequestEvent(start, end, this.#address));\n  }\n\n  #onByteSelected(e: ByteSelectedEvent): void {\n    this.#currentNavigatorMode = Mode.Submitted;\n    const addressInRange = Math.max(0, Math.min(e.data, this.#outerMemoryLength - 1));\n    this.#jumpToAddress(addressInRange);\n  }\n\n  #createSettings(): Settings {\n    return {valueTypes: this.#valueTypes, modes: this.#valueTypeModes, endianness: this.#endianness};\n  }\n\n  #onEndiannessChanged(e: EndiannessChangedEvent): void {\n    this.#endianness = e.data;\n    this.dispatchEvent(new SettingsChangedEvent(this.#createSettings()));\n    this.#render();\n  }\n\n  #isValidAddress(address: string): boolean {\n    const newAddress = parseAddress(address);\n    return newAddress !== undefined && newAddress >= 0 && newAddress < this.#outerMemoryLength;\n  }\n\n  #onAddressChange(e: AddressInputChangedEvent): void {\n    const {address, mode} = e.data;\n    const isValid = this.#isValidAddress(address);\n    const newAddress = parseAddress(address);\n    this.#currentNavigatorAddressLine = address;\n\n    if (newAddress !== undefined && isValid) {\n      this.#currentNavigatorMode = mode;\n      this.#jumpToAddress(newAddress);\n      return;\n    }\n\n    if (mode === Mode.Submitted && !isValid) {\n      this.#currentNavigatorMode = Mode.InvalidSubmit;\n    } else {\n      this.#currentNavigatorMode = Mode.Edit;\n    }\n\n    this.#render();\n  }\n\n  #onValueTypeToggled(e: ValueTypeToggledEvent): void {\n    const {type, checked} = e.data;\n    if (checked) {\n      this.#valueTypes.add(type);\n    } else {\n      this.#valueTypes.delete(type);\n    }\n    this.dispatchEvent(new SettingsChangedEvent(this.#createSettings()));\n    this.#render();\n  }\n\n  #onValueTypeModeChanged(e: ValueTypeModeChangedEvent): void {\n    e.stopImmediatePropagation();\n    const {type, mode} = e.data;\n    this.#valueTypeModes.set(type, mode);\n    this.dispatchEvent(new SettingsChangedEvent(this.#createSettings()));\n    this.#render();\n  }\n\n  #navigateHistory(e: HistoryNavigationEvent): boolean {\n    return e.data === Navigation.Forward ? this.#history.rollover() : this.#history.rollback();\n  }\n\n  #navigatePage(e: PageNavigationEvent): void {\n    const newAddress =\n        e.data === Navigation.Forward ? this.#address + this.#numBytesPerPage : this.#address - this.#numBytesPerPage;\n    const addressInRange = Math.max(0, Math.min(newAddress, this.#outerMemoryLength - 1));\n    this.#jumpToAddress(addressInRange);\n  }\n\n  #jumpToAddress(address: number): void {\n    if (address < 0 || address >= this.#outerMemoryLength) {\n      console.warn(`Specified address is out of bounds: ${address}`);\n      return;\n    }\n    this.#setAddress(address);\n    this.#update();\n  }\n\n  #getPageRangeForAddress(address: number, numBytesPerPage: number): {start: number, end: number} {\n    const pageNumber = Math.floor(address / numBytesPerPage);\n    const pageStartAddress = pageNumber * numBytesPerPage;\n    const pageEndAddress = Math.min(pageStartAddress + numBytesPerPage, this.#outerMemoryLength);\n    return {start: pageStartAddress, end: pageEndAddress};\n  }\n\n  #resize(event: ResizeEvent): void {\n    this.#numBytesPerPage = event.data;\n    this.#update();\n  }\n\n  #update(): void {\n    const {start, end} = this.#getPageRangeForAddress(this.#address, this.#numBytesPerPage);\n    if (start < this.#memoryOffset || end > this.#memoryOffset + this.#memory.length) {\n      this.dispatchEvent(new MemoryRequestEvent(start, end, this.#address));\n    } else {\n      this.#render();\n    }\n  }\n\n  #setAddress(address: number): void {\n    // If we are already showing the address that is requested, no need to act upon it.\n    if (this.#address === address) {\n      return;\n    }\n    const historyEntry = new AddressHistoryEntry(address, () => this.#jumpToAddress(address));\n    this.#history.push(historyEntry);\n    this.#address = address;\n    this.dispatchEvent(new AddressChangedEvent(this.#address));\n  }\n\n  // Returns the highlightInfo with the smallest size property that encloses the provided address.\n  // If there are multiple smallest enclosing highlights, we pick the one appearing the earliest in highlightedMemoryAreas.\n  // If no such highlightInfo exists, it returns undefined.\n  //\n  // Selecting the smallest enclosing memory highlight is a heuristic that aims to pick the\n  // most specific highlight given a provided address. This way, objects contained in other objects are\n  // potentially still accessible.\n  #getSmallestEnclosingMemoryHighlight(highlightedMemoryAreas: HighlightInfo[], address: number): HighlightInfo\n      |undefined {\n    let smallestEnclosingHighlight;\n    for (const highlightedMemory of highlightedMemoryAreas) {\n      if (highlightedMemory.startAddress <= address &&\n          address < highlightedMemory.startAddress + highlightedMemory.size) {\n        if (!smallestEnclosingHighlight) {\n          smallestEnclosingHighlight = highlightedMemory;\n        } else if (highlightedMemory.size < smallestEnclosingHighlight.size) {\n          smallestEnclosingHighlight = highlightedMemory;\n        }\n      }\n    }\n    return smallestEnclosingHighlight;\n  }\n}\n\ncustomElements.define('devtools-linear-memory-inspector-inspector', LinearMemoryInspector);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-linear-memory-inspector-inspector': LinearMemoryInspector;\n  }\n\n  interface HTMLElementEventMap {\n    'memoryrequest': MemoryRequestEvent;\n    'addresschanged': AddressChangedEvent;\n    'settingschanged': SettingsChangedEvent;\n    'deletememoryhighlight': DeleteMemoryHighlightEvent;\n  }\n}\n"]}