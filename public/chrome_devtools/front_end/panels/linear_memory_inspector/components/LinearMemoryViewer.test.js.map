{"version":3,"file":"LinearMemoryViewer.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/linear_memory_inspector/components/LinearMemoryViewer.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EACL,cAAc,EACd,0BAA0B,EAC1B,yBAAyB,EACzB,eAAe,EACf,oBAAoB,GACrB,MAAM,gCAAgC,CAAC;AAExC,OAAO,KAAK,+BAA+B,MAAM,iBAAiB,CAAC;AAEnE,MAAM,mBAAmB,GAAG,CAAC,CAAC;AAC9B,MAAM,CAAC,MAAM,yBAAyB,GAAG,YAAY,CAAC;AACtD,MAAM,CAAC,MAAM,yBAAyB,GAAG,YAAY,CAAC;AACtD,MAAM,CAAC,MAAM,mBAAmB,GAAG,MAAM,CAAC;AAC1C,MAAM,CAAC,MAAM,uBAAuB,GAAG,UAAU,CAAC;AAElD,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,KAAK,UAAU,cAAc;QAC3B,MAAM,SAAS,GAAG,eAAe,EAAE,CAAC;QACpC,MAAM,IAAI,GAAG,mBAAmB,EAAE,CAAC;QACnC,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC;QAEtB,MAAM,KAAK,GACP,MAAM,eAAe,CAAiE,SAAS,EAAE,QAAQ,CAAC,CAAC;QAC/G,MAAM,eAAe,GAAG,KAAK,CAAC,IAAI,CAAC;QACnC,MAAM,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;QAEnC,OAAO,EAAC,SAAS,EAAE,IAAI,EAAC,CAAC;IAC3B,CAAC;IAED,KAAK,UAAU,+BAA+B;QAC5C,MAAM,SAAS,GAAG,eAAe,EAAE,CAAC;QACpC,MAAM,IAAI,GAAG,mBAAmB,EAAE,CAAC;QACnC,MAAM,aAAa,GAA0E;YAC3F,YAAY,EAAE,CAAC;YACf,IAAI,EAAE,EAAE,EAAG,uEAAuE;YAClF,IAAI,EAAE,QAAQ;SACf,CAAC;QACF,MAAM,qBAAqB,GAAG;YAC5B,GAAG,IAAI;YACP,aAAa,EAAE,aAAa;SAC7B,CAAC;QAEF,MAAM,YAAY,GACd,eAAe,CAAiE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACzG,SAAS,CAAC,IAAI,GAAG,qBAAqB,CAAC;QACvC,MAAM,KAAK,GAAG,MAAM,YAAY,CAAC;QACjC,MAAM,eAAe,GAAG,KAAK,CAAC,IAAI,CAAC;QACnC,MAAM,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;QAEnC,OAAO,EAAC,SAAS,EAAE,qBAAqB,EAAC,CAAC;IAC5C,CAAC;IAED,SAAS,eAAe;QACtB,MAAM,SAAS,GAAG,IAAI,+BAA+B,CAAC,kBAAkB,CAAC,kBAAkB,EAAE,CAAC;QAC9F,MAAM,WAAW,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAClD,WAAW,CAAC,KAAK,CAAC,KAAK,GAAG,OAAO,CAAC;QAClC,WAAW,CAAC,KAAK,CAAC,MAAM,GAAG,OAAO,CAAC;QACnC,WAAW,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;QACnC,WAAW,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QACnC,oBAAoB,CAAC,WAAW,CAAC,CAAC;QAClC,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,SAAS,mBAAmB;QAC1B,MAAM,MAAM,GAAG,EAAE,CAAC;QAClB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,EAAE,CAAC,EAAE,CAAC;YAC9B,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACjB,CAAC;QAED,MAAM,IAAI,GAAG;YACX,MAAM,EAAE,IAAI,UAAU,CAAC,MAAM,CAAC;YAC9B,OAAO,EAAE,CAAC;YACV,YAAY,EAAE,CAAC;YACf,KAAK,EAAE,IAAI;SACZ,CAAC;QAEF,OAAO,IAAI,CAAC;IACd,CAAC;IAED,SAAS,cAAc,CACnB,SAAgF,EAAE,YAAoB;QACxG,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QACvC,MAAM,GAAG,GAAG,SAAS,CAAC,UAAU,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;QACpE,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC;QACvC,MAAM,WAAW,GAAG,GAAG,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;QACvD,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;QAC/B,cAAc,CAAC,WAAW,EAAE,eAAe,CAAC,CAAC;QAC7C,OAAO,WAAW,CAAC;IACrB,CAAC;IAED,SAAS,+BAA+B,CACpC,SAAgF,EAAE,YAAoB,EACtG,KAAa;QACf,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QACvC,MAAM,aAAa,GAAG,SAAS,CAAC,UAAU,CAAC,gBAAgB,CAAC,YAAY,GAAG,WAAW,CAAC,CAAC;QACxF,MAAM,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;QAClC,MAAM,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC;QACrD,MAAM,YAAY,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;QAEtC,MAAM,QAAQ,GAAG,cAAc,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;QACzD,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QACzC,MAAM,aAAa,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;QAEtC,MAAM,CAAC,WAAW,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC;IAClD,CAAC;IAED,KAAK,UAAU,qCAAqC,CAChD,SAAgF,EAAE,IAAY,EAC9F,eAAuB;QACzB,MAAM,YAAY,GAAG,eAAe,CAChC,SAAS,EAAE,cAAc,CAAC,CAAC;QAC/B,MAAM,IAAI,GAAG,yBAAyB,CAAC,SAAS,EAAE,OAAO,EAAE,cAAc,CAAC,CAAC;QAC3E,IAAI,CAAC,aAAa,CAAC,IAAI,aAAa,CAAC,SAAS,EAAE,EAAC,MAAM,EAAE,IAAI,EAAC,CAAC,CAAC,CAAC;QACjE,MAAM,KAAK,GAAG,MAAM,YAAY,CAAC;QACjC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC;IAClD,CAAC;IAED,EAAE,CAAC,iEAAiE,EAAE,GAAG,EAAE;QACzE,MAAM,IAAI,GAAG,mBAAmB,EAAE,CAAC;QACnC,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;QACtB,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QAChD,MAAM,SAAS,GAAG,IAAI,+BAA+B,CAAC,kBAAkB,CAAC,kBAAkB,EAAE,CAAC;QAC9F,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC;QACtB,oBAAoB,CAAC,SAAS,CAAC,CAAC;QAEhC,MAAM,YAAY,GAAG,yBAAyB,CAAC,SAAS,EAAE,yBAAyB,GAAG,WAAW,EAAE,eAAe,CAAC,CAAC;QACpH,MAAM,aAAa,GAAG,QAAQ,CAAC,YAAY,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;QAC3D,MAAM,CAAC,WAAW,CAAC,aAAa,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;IACnF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;QAC3C,MAAM,IAAI,GAAG,mBAAmB,EAAE,CAAC;QACnC,MAAM,SAAS,GAAG,IAAI,+BAA+B,CAAC,kBAAkB,CAAC,kBAAkB,EAAE,CAAC;QAC9F,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC;QAEtB,MAAM,WAAW,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAClD,WAAW,CAAC,KAAK,CAAC,KAAK,GAAG,OAAO,CAAC;QAClC,WAAW,CAAC,KAAK,CAAC,MAAM,GAAG,OAAO,CAAC;QACnC,WAAW,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;QACnC,WAAW,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QACnC,oBAAoB,CAAC,WAAW,CAAC,CAAC;QAElC,MAAM,YAAY,GACd,eAAe,CAAiE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACzG,WAAW,CAAC,KAAK,CAAC,KAAK,GAAG,OAAO,CAAC;QAElC,MAAM,CAAC,SAAS,CAAC,MAAM,YAAY,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;QAC3C,MAAM,EAAC,SAAS,EAAC,GAAG,MAAM,cAAc,EAAE,CAAC;QAC3C,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QACvC,MAAM,IAAI,GAAG,SAAS,CAAC,UAAU,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,CAAC;QACxE,MAAM,SAAS,GAAG,SAAS,CAAC,UAAU,CAAC,gBAAgB,CAAC,uBAAuB,CAAC,CAAC;QACjF,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACxB,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;QAChE,MAAM,EAAC,SAAS,EAAE,IAAI,EAAC,GAAG,MAAM,cAAc,EAAE,CAAC;QACjD,MAAM,WAAW,GAAG,cAAc,CAAC,SAAS,EAAE,yBAAyB,CAAC,CAAC;QACzE,MAAM,cAAc,GAAG,WAAW,CAAC,MAAM,CAAC;QAE1C,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QACvC,MAAM,SAAS,GAAG,SAAS,CAAC,UAAU,CAAC,gBAAgB,CAAC,uBAAuB,CAAC,CAAC;QACjF,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;QAE7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,cAAc,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,cAAc,IAAI,cAAc,EAAE,EAAE,CAAC,EAAE,CAAC;YAChH,MAAM,cAAc,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,UAAU,CAAC,cAAc,EAAE,eAAe,CAAC,CAAC;YAEnD,MAAM,GAAG,GAAG,cAAc,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;YACvE,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;QACpD,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;QACzC,MAAM,WAAW,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAClD,WAAW,CAAC,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC;QAEjC,MAAM,SAAS,GAAG,IAAI,+BAA+B,CAAC,kBAAkB,CAAC,kBAAkB,EAAE,CAAC;QAC9F,SAAS,CAAC,IAAI,GAAG,mBAAmB,EAAE,CAAC;QACvC,WAAW,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QACnC,oBAAoB,CAAC,WAAW,CAAC,CAAC;QAClC,MAAM,WAAW,GAAG,cAAc,CAAC,SAAS,EAAE,yBAAyB,CAAC,CAAC;QACzE,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,EAAE,mBAAmB,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;QAC/D,MAAM,EAAC,SAAS,EAAE,IAAI,EAAC,GAAG,MAAM,cAAc,EAAE,CAAC;QACjD,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QACvC,MAAM,KAAK,GAAG,SAAS,CAAC,UAAU,CAAC,gBAAgB,CAAC,yBAAyB,CAAC,CAAC;QAC/E,cAAc,CAAC,KAAK,EAAE,eAAe,CAAC,CAAC;QAEvC,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC3B,MAAM,YAAY,GAAG,KAAK,CAAC,MAAM,CAAC;QAClC,MAAM,kBAAkB,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,GAAG,YAAY,CAAC,GAAG,YAAY,CAAC;QAClF,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;QAC7C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,CAAC;YACtC,MAAM,GAAG,GAAG,MAAM,CAAC,kBAAkB,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;YACvF,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;QAC9C,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;QAC3D,MAAM,EAAC,SAAS,EAAE,IAAI,EAAC,GAAG,MAAM,cAAc,EAAE,CAAC;QACjD,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAEvC,MAAM,IAAI,GAAG,SAAS,CAAC,UAAU,CAAC,aAAa,CAAC,yBAAyB,CAAC,CAAC;QAC3E,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC;QAEzC,MAAM,YAAY,GAAG,eAAe,CAChC,SAAS,EAAE,cAAc,CAAC,CAAC;QAC/B,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,MAAM,EAAC,IAAI,EAAE,OAAO,EAAC,GAAG,MAAM,YAAY,CAAC;QAC3C,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;QACpE,MAAM,EAAC,SAAS,EAAC,GAAG,MAAM,cAAc,EAAE,CAAC;QAC3C,MAAM,KAAK,GAAG,cAAc,CAAC,SAAS,EAAE,yBAAyB,CAAC,CAAC;QACnE,MAAM,KAAK,GAAG,cAAc,CAAC,SAAS,EAAE,yBAAyB,CAAC,CAAC;QAEnE,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;QAC3D,MAAM,EAAC,SAAS,EAAC,GAAG,MAAM,cAAc,EAAE,CAAC;QAC3C,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAEvC,MAAM,WAAW,GAAG,SAAS,CAAC,UAAU,CAAC,gBAAgB,CAAC,yBAAyB,CAAC,CAAC;QACrF,MAAM,UAAU,GAAG,SAAS,CAAC,UAAU,CAAC,gBAAgB,CAAC,yBAAyB,CAAC,CAAC;QACpF,cAAc,CAAC,WAAW,EAAE,eAAe,CAAC,CAAC;QAC7C,cAAc,CAAC,UAAU,EAAE,eAAe,CAAC,CAAC;QAC5C,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC;QAE1D,MAAM,sBAAsB,GAAG,EAAE,CAAC;QAClC,MAAM,qBAAqB,GAAG,GAAG,CAAC;QAElC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,CAAC;YAC3C,MAAM,SAAS,GAAG,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YACxD,MAAM,SAAS,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;YAC3C,IAAI,SAAS,GAAG,sBAAsB,IAAI,SAAS,GAAG,qBAAqB,EAAE,CAAC;gBAC5E,MAAM,CAAC,WAAW,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;YACrC,CAAC;iBAAM,CAAC;gBACN,MAAM,CAAC,WAAW,CAAC,SAAS,EAAE,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;YACvE,CAAC;QACH,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;QAC7D,MAAM,EAAC,SAAS,EAAE,IAAI,EAAC,GAAG,MAAM,cAAc,EAAE,CAAC;QACjD,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAEvC,MAAM,SAAS,GAAG,SAAS,CAAC,UAAU,CAAC,aAAa,CAAC,yBAAyB,CAAC,CAAC;QAChF,MAAM,CAAC,UAAU,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC;QAE9C,MAAM,YAAY,GAAG,eAAe,CAChC,SAAS,EAAE,cAAc,CAAC,CAAC;QAC/B,SAAS,CAAC,KAAK,EAAE,CAAC;QAClB,MAAM,EAAC,IAAI,EAAE,OAAO,EAAC,GAAG,MAAM,YAAY,CAAC;QAC3C,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sDAAsD,EAAE,GAAG,EAAE;QAC9D,MAAM,SAAS,GAAG,IAAI,+BAA+B,CAAC,kBAAkB,CAAC,kBAAkB,EAAE,CAAC;QAC9F,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5C,MAAM,OAAO,GAAG,CAAC,CAAC;QAElB,oBAAoB,CAAC,SAAS,CAAC,CAAC;QAChC,SAAS,CAAC,IAAI,GAAG;YACf,MAAM;YACN,OAAO;YACP,YAAY,EAAE,CAAC;YACf,KAAK,EAAE,IAAI;SACZ,CAAC;QAEF,+BAA+B,CAAC,SAAS,EAAE,yBAAyB,EAAE,OAAO,CAAC,CAAC;QAC/E,+BAA+B,CAAC,SAAS,EAAE,yBAAyB,EAAE,OAAO,CAAC,CAAC;QAC/E,+BAA+B,CAAC,SAAS,EAAE,uBAAuB,EAAE,CAAC,CAAC,CAAC;IACzE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;QAC/C,MAAM,EAAC,SAAS,EAAE,IAAI,EAAC,GAAG,MAAM,cAAc,EAAE,CAAC;QACjD,MAAM,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC;QACnC,MAAM,eAAe,GAAG,aAAa,GAAG,CAAC,CAAC;QAC1C,MAAM,qCAAqC,CAAC,SAAS,EAAE,WAAW,EAAE,eAAe,CAAC,CAAC;IACvF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;QAChD,MAAM,EAAC,SAAS,EAAE,IAAI,EAAC,GAAG,MAAM,cAAc,EAAE,CAAC;QACjD,MAAM,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC;QACnC,MAAM,eAAe,GAAG,aAAa,GAAG,CAAC,CAAC;QAC1C,MAAM,qCAAqC,CAAC,SAAS,EAAE,YAAY,EAAE,eAAe,CAAC,CAAC;IACxF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;QAC/C,MAAM,EAAC,SAAS,EAAE,IAAI,EAAC,GAAG,MAAM,cAAc,EAAE,CAAC;QACjD,MAAM,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC;QAEnC,MAAM,WAAW,GAAG,cAAc,CAAC,SAAS,EAAE,yBAAyB,CAAC,CAAC;QACzE,MAAM,cAAc,GAAG,WAAW,CAAC,MAAM,CAAC;QAC1C,MAAM,eAAe,GAAG,aAAa,GAAG,cAAc,CAAC;QACvD,MAAM,qCAAqC,CAAC,SAAS,EAAE,WAAW,EAAE,eAAe,CAAC,CAAC;IACvF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;QAC7C,MAAM,EAAC,SAAS,EAAE,IAAI,EAAC,GAAG,MAAM,cAAc,EAAE,CAAC;QACjD,MAAM,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC;QAEnC,MAAM,WAAW,GAAG,cAAc,CAAC,SAAS,EAAE,yBAAyB,CAAC,CAAC;QACzE,MAAM,cAAc,GAAG,WAAW,CAAC,MAAM,CAAC;QAC1C,MAAM,eAAe,GAAG,aAAa,GAAG,cAAc,CAAC;QACvD,MAAM,qCAAqC,CAAC,SAAS,EAAE,SAAS,EAAE,eAAe,CAAC,CAAC;IACrF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;QAC9C,MAAM,EAAC,SAAS,EAAE,IAAI,EAAC,GAAG,MAAM,cAAc,EAAE,CAAC;QACjD,MAAM,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC;QAEnC,MAAM,KAAK,GAAG,0BAA0B,CAAC,SAAS,EAAE,yBAAyB,EAAE,eAAe,CAAC,CAAC;QAChG,MAAM,eAAe,GAAG,KAAK,CAAC,MAAM,CAAC;QACrC,MAAM,eAAe,GAAG,aAAa,GAAG,eAAe,CAAC;QACxD,MAAM,qCAAqC,CAAC,SAAS,EAAE,UAAU,EAAE,eAAe,CAAC,CAAC;IACtF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;QAC9C,MAAM,EAAC,SAAS,EAAE,IAAI,EAAC,GAAG,MAAM,cAAc,EAAE,CAAC;QACjD,MAAM,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC;QAEnC,MAAM,KAAK,GAAG,0BAA0B,CAAC,SAAS,EAAE,yBAAyB,EAAE,eAAe,CAAC,CAAC;QAChG,MAAM,eAAe,GAAG,KAAK,CAAC,MAAM,CAAC;QACrC,MAAM,eAAe,GAAG,aAAa,GAAG,eAAe,CAAC;QACxD,MAAM,qCAAqC,CAAC,SAAS,EAAE,QAAQ,EAAE,eAAe,CAAC,CAAC;IACpF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;QACvE,MAAM,EAAC,SAAS,EAAC,GAAG,MAAM,cAAc,EAAE,CAAC;QAC3C,MAAM,SAAS,GAAG,0BAA0B,CAAC,SAAS,EAAE,2BAA2B,EAAE,eAAe,CAAC,CAAC;QACtG,MAAM,SAAS,GAAG,0BAA0B,CAAC,SAAS,EAAE,2BAA2B,EAAE,eAAe,CAAC,CAAC;QAEtG,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACxC,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4DAA4D,EAAE,KAAK,IAAI,EAAE;QAC1E,MAAM,EAAC,SAAS,EAAE,qBAAqB,EAAC,GAAG,MAAM,+BAA+B,EAAE,CAAC;QACnF,MAAM,SAAS,GAAG,0BAA0B,CAAC,SAAS,EAAE,2BAA2B,EAAE,eAAe,CAAC,CAAC;QACtG,MAAM,SAAS,GAAG,0BAA0B,CAAC,SAAS,EAAE,2BAA2B,EAAE,eAAe,CAAC,CAAC;QAEtG,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,EAAE,qBAAqB,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC/E,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,EAAE,qBAAqB,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IACjF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oEAAoE,EAAE,KAAK,IAAI,EAAE;QAClF,MAAM,EAAC,SAAS,EAAE,qBAAqB,EAAC,GAAG,MAAM,+BAA+B,EAAE,CAAC;QACnF,MAAM,SAAS,GAAG,0BAA0B,CAAC,SAAS,EAAE,2BAA2B,EAAE,eAAe,CAAC,CAAC;QAEtG,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,CAAC;YAC1C,MAAM,aAAa,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAC3D,MAAM,KAAK,GAAG,qBAAqB,CAAC,aAAa,CAAC,YAAY,GAAG,qBAAqB,CAAC,YAAY,GAAG,CAAC,CAAC;YACxG,MAAM,CAAC,WAAW,CAAC,aAAa,EAAE,qBAAqB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QACzE,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qEAAqE,EAAE,KAAK,IAAI,EAAE;QACnF,MAAM,EAAC,SAAS,EAAE,qBAAqB,EAAC,GAAG,MAAM,+BAA+B,EAAE,CAAC;QACnF,MAAM,8BAA8B,GAAG;YACrC,GAAG,qBAAqB;YACxB,sBAAsB,EAAE,qBAAqB,CAAC,aAAa;SAC5D,CAAC;QACF,SAAS,CAAC,IAAI,GAAG,8BAA8B,CAAC;QAChD,MAAM,SAAS,GAAG,0BAA0B,CAAC,SAAS,EAAE,oBAAoB,EAAE,eAAe,CAAC,CAAC;QAE/F,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,CAAC;YAC1C,MAAM,aAAa,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAC3D,MAAM,KAAK,GAAG,qBAAqB,CAAC,aAAa,CAAC,YAAY,GAAG,qBAAqB,CAAC,YAAY,GAAG,CAAC,CAAC;YACxG,MAAM,CAAC,WAAW,CAAC,aAAa,EAAE,qBAAqB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QACzE,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+EAA+E,EAAE,KAAK,IAAI,EAAE;QAC7F,MAAM,EAAC,SAAS,EAAE,qBAAqB,EAAC,GAAG,MAAM,+BAA+B,EAAE,CAAC;QACnF,MAAM,8BAA8B,GAAG;YACrC,GAAG,qBAAqB;YACxB,sBAAsB,EAAE,qBAAqB,CAAC,aAAa;SAC5D,CAAC;QACF,SAAS,CAAC,IAAI,GAAG,8BAA8B,CAAC;QAChD,MAAM,SAAS,GAAG,0BAA0B,CAAC,SAAS,EAAE,oBAAoB,EAAE,eAAe,CAAC,CAAC;QAC/F,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IAC5B,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {\n  assertElements,\n  getElementsWithinComponent,\n  getElementWithinComponent,\n  getEventPromise,\n  renderElementIntoDOM,\n} from '../../../testing/DOMHelpers.js';\n\nimport * as LinearMemoryInspectorComponents from './components.js';\n\nconst NUM_BYTES_PER_GROUP = 4;\nexport const VIEWER_BYTE_CELL_SELECTOR = '.byte-cell';\nexport const VIEWER_TEXT_CELL_SELECTOR = '.text-cell';\nexport const VIEWER_ROW_SELECTOR = '.row';\nexport const VIEWER_ADDRESS_SELECTOR = '.address';\n\ndescribe('LinearMemoryViewer', () => {\n  async function setUpComponent() {\n    const component = createComponent();\n    const data = createComponentData();\n    component.data = data;\n\n    const event =\n        await getEventPromise<LinearMemoryInspectorComponents.LinearMemoryViewer.ResizeEvent>(component, 'resize');\n    const numBytesPerPage = event.data;\n    assert.isAbove(numBytesPerPage, 4);\n\n    return {component, data};\n  }\n\n  async function setUpComponentWithHighlightInfo() {\n    const component = createComponent();\n    const data = createComponentData();\n    const highlightInfo: LinearMemoryInspectorComponents.LinearMemoryViewerUtils.HighlightInfo = {\n      startAddress: 2,\n      size: 21,  // A large enough odd number so that the highlight spans mulitple rows.\n      type: 'bool[]',\n    };\n    const dataWithHighlightInfo = {\n      ...data,\n      highlightInfo: highlightInfo,\n    };\n\n    const eventPromise =\n        getEventPromise<LinearMemoryInspectorComponents.LinearMemoryViewer.ResizeEvent>(component, 'resize');\n    component.data = dataWithHighlightInfo;\n    const event = await eventPromise;\n    const numBytesPerPage = event.data;\n    assert.isAbove(numBytesPerPage, 4);\n\n    return {component, dataWithHighlightInfo};\n  }\n\n  function createComponent() {\n    const component = new LinearMemoryInspectorComponents.LinearMemoryViewer.LinearMemoryViewer();\n    const flexWrapper = document.createElement('div');\n    flexWrapper.style.width = '500px';\n    flexWrapper.style.height = '500px';\n    flexWrapper.style.display = 'flex';\n    flexWrapper.appendChild(component);\n    renderElementIntoDOM(flexWrapper);\n    return component;\n  }\n\n  function createComponentData() {\n    const memory = [];\n    for (let i = 0; i < 1000; ++i) {\n      memory.push(i);\n    }\n\n    const data = {\n      memory: new Uint8Array(memory),\n      address: 2,\n      memoryOffset: 0,\n      focus: true,\n    };\n\n    return data;\n  }\n\n  function getCellsPerRow(\n      component: LinearMemoryInspectorComponents.LinearMemoryViewer.LinearMemoryViewer, cellSelector: string) {\n    assert.isNotNull(component.shadowRoot);\n    const row = component.shadowRoot.querySelector(VIEWER_ROW_SELECTOR);\n    assert.instanceOf(row, HTMLDivElement);\n    const cellsPerRow = row.querySelectorAll(cellSelector);\n    assert.isNotEmpty(cellsPerRow);\n    assertElements(cellsPerRow, HTMLSpanElement);\n    return cellsPerRow;\n  }\n\n  function assertSelectedCellIsHighlighted(\n      component: LinearMemoryInspectorComponents.LinearMemoryViewer.LinearMemoryViewer, cellSelector: string,\n      index: number) {\n    assert.isNotNull(component.shadowRoot);\n    const selectedCells = component.shadowRoot.querySelectorAll(cellSelector + '.selected');\n    assert.lengthOf(selectedCells, 1);\n    assert.instanceOf(selectedCells[0], HTMLSpanElement);\n    const selectedCell = selectedCells[0];\n\n    const allCells = getCellsPerRow(component, cellSelector);\n    assert.isAtLeast(allCells.length, index);\n    const cellAtAddress = allCells[index];\n\n    assert.strictEqual(selectedCell, cellAtAddress);\n  }\n\n  async function assertEventTriggeredOnArrowNavigation(\n      component: LinearMemoryInspectorComponents.LinearMemoryViewer.LinearMemoryViewer, code: string,\n      expectedAddress: number) {\n    const eventPromise = getEventPromise<LinearMemoryInspectorComponents.LinearMemoryViewer.ByteSelectedEvent>(\n        component, 'byteselected');\n    const view = getElementWithinComponent(component, '.view', HTMLDivElement);\n    view.dispatchEvent(new KeyboardEvent('keydown', {'code': code}));\n    const event = await eventPromise;\n    assert.strictEqual(event.data, expectedAddress);\n  }\n\n  it('correctly renders bytes given a memory offset greater than zero', () => {\n    const data = createComponentData();\n    data.memoryOffset = 1;\n    assert.isAbove(data.address, data.memoryOffset);\n    const component = new LinearMemoryInspectorComponents.LinearMemoryViewer.LinearMemoryViewer();\n    component.data = data;\n    renderElementIntoDOM(component);\n\n    const selectedByte = getElementWithinComponent(component, VIEWER_BYTE_CELL_SELECTOR + '.selected', HTMLSpanElement);\n    const selectedValue = parseInt(selectedByte.innerText, 16);\n    assert.strictEqual(selectedValue, data.memory[data.address - data.memoryOffset]);\n  });\n\n  it('triggers an event on resize', async () => {\n    const data = createComponentData();\n    const component = new LinearMemoryInspectorComponents.LinearMemoryViewer.LinearMemoryViewer();\n    component.data = data;\n\n    const thinWrapper = document.createElement('div');\n    thinWrapper.style.width = '100px';\n    thinWrapper.style.height = '100px';\n    thinWrapper.style.display = 'flex';\n    thinWrapper.appendChild(component);\n    renderElementIntoDOM(thinWrapper);\n\n    const eventPromise =\n        getEventPromise<LinearMemoryInspectorComponents.LinearMemoryViewer.ResizeEvent>(component, 'resize');\n    thinWrapper.style.width = '800px';\n\n    assert.isNotNull(await eventPromise);\n  });\n\n  it('renders one address per row', async () => {\n    const {component} = await setUpComponent();\n    assert.isNotNull(component.shadowRoot);\n    const rows = component.shadowRoot.querySelectorAll(VIEWER_ROW_SELECTOR);\n    const addresses = component.shadowRoot.querySelectorAll(VIEWER_ADDRESS_SELECTOR);\n    assert.isNotEmpty(rows);\n    assert.strictEqual(rows.length, addresses.length);\n  });\n\n  it('renders addresses depending on the bytes per row', async () => {\n    const {component, data} = await setUpComponent();\n    const bytesPerRow = getCellsPerRow(component, VIEWER_BYTE_CELL_SELECTOR);\n    const numBytesPerRow = bytesPerRow.length;\n\n    assert.isNotNull(component.shadowRoot);\n    const addresses = component.shadowRoot.querySelectorAll(VIEWER_ADDRESS_SELECTOR);\n    assert.isNotEmpty(addresses);\n\n    for (let i = 0, currentAddress = data.memoryOffset; i < addresses.length; currentAddress += numBytesPerRow, ++i) {\n      const addressElement = addresses[i];\n      assert.instanceOf(addressElement, HTMLSpanElement);\n\n      const hex = currentAddress.toString(16).toUpperCase().padStart(8, '0');\n      assert.strictEqual(addressElement.innerText, hex);\n    }\n  });\n\n  it('renders unsplittable byte group', () => {\n    const thinWrapper = document.createElement('div');\n    thinWrapper.style.width = '10px';\n\n    const component = new LinearMemoryInspectorComponents.LinearMemoryViewer.LinearMemoryViewer();\n    component.data = createComponentData();\n    thinWrapper.appendChild(component);\n    renderElementIntoDOM(thinWrapper);\n    const bytesPerRow = getCellsPerRow(component, VIEWER_BYTE_CELL_SELECTOR);\n    assert.strictEqual(bytesPerRow.length, NUM_BYTES_PER_GROUP);\n  });\n\n  it('renders byte values corresponding to memory set', async () => {\n    const {component, data} = await setUpComponent();\n    assert.isNotNull(component.shadowRoot);\n    const bytes = component.shadowRoot.querySelectorAll(VIEWER_BYTE_CELL_SELECTOR);\n    assertElements(bytes, HTMLSpanElement);\n\n    const memory = data.memory;\n    const bytesPerPage = bytes.length;\n    const memoryStartAddress = Math.floor(data.address / bytesPerPage) * bytesPerPage;\n    assert.isAtMost(bytes.length, memory.length);\n    for (let i = 0; i < bytes.length; ++i) {\n      const hex = memory[memoryStartAddress + i].toString(16).toUpperCase().padStart(2, '0');\n      assert.strictEqual(bytes[i].innerText, hex);\n    }\n  });\n\n  it('triggers an event on selecting a byte value', async () => {\n    const {component, data} = await setUpComponent();\n    assert.isNotNull(component.shadowRoot);\n\n    const byte = component.shadowRoot.querySelector(VIEWER_BYTE_CELL_SELECTOR);\n    assert.instanceOf(byte, HTMLSpanElement);\n\n    const eventPromise = getEventPromise<LinearMemoryInspectorComponents.LinearMemoryViewer.ByteSelectedEvent>(\n        component, 'byteselected');\n    byte.click();\n    const {data: address} = await eventPromise;\n    assert.strictEqual(address, data.memoryOffset);\n  });\n\n  it('renders as many ascii values as byte values in a row', async () => {\n    const {component} = await setUpComponent();\n    const bytes = getCellsPerRow(component, VIEWER_BYTE_CELL_SELECTOR);\n    const ascii = getCellsPerRow(component, VIEWER_TEXT_CELL_SELECTOR);\n\n    assert.strictEqual(bytes.length, ascii.length);\n  });\n\n  it('renders ascii values corresponding to bytes', async () => {\n    const {component} = await setUpComponent();\n    assert.isNotNull(component.shadowRoot);\n\n    const asciiValues = component.shadowRoot.querySelectorAll(VIEWER_TEXT_CELL_SELECTOR);\n    const byteValues = component.shadowRoot.querySelectorAll(VIEWER_BYTE_CELL_SELECTOR);\n    assertElements(asciiValues, HTMLSpanElement);\n    assertElements(byteValues, HTMLSpanElement);\n    assert.strictEqual(byteValues.length, asciiValues.length);\n\n    const smallestPrintableAscii = 20;\n    const largestPrintableAscii = 127;\n\n    for (let i = 0; i < byteValues.length; ++i) {\n      const byteValue = parseInt(byteValues[i].innerText, 16);\n      const asciiText = asciiValues[i].innerText;\n      if (byteValue < smallestPrintableAscii || byteValue > largestPrintableAscii) {\n        assert.strictEqual(asciiText, '.');\n      } else {\n        assert.strictEqual(asciiText, String.fromCharCode(byteValue).trim());\n      }\n    }\n  });\n\n  it('triggers an event on selecting an ascii value', async () => {\n    const {component, data} = await setUpComponent();\n    assert.isNotNull(component.shadowRoot);\n\n    const asciiCell = component.shadowRoot.querySelector(VIEWER_TEXT_CELL_SELECTOR);\n    assert.instanceOf(asciiCell, HTMLSpanElement);\n\n    const eventPromise = getEventPromise<LinearMemoryInspectorComponents.LinearMemoryViewer.ByteSelectedEvent>(\n        component, 'byteselected');\n    asciiCell.click();\n    const {data: address} = await eventPromise;\n    assert.strictEqual(address, data.memoryOffset);\n  });\n\n  it('highlights selected byte value on setting an address', () => {\n    const component = new LinearMemoryInspectorComponents.LinearMemoryViewer.LinearMemoryViewer();\n    const memory = new Uint8Array([2, 3, 5, 3]);\n    const address = 2;\n\n    renderElementIntoDOM(component);\n    component.data = {\n      memory,\n      address,\n      memoryOffset: 0,\n      focus: true,\n    };\n\n    assertSelectedCellIsHighlighted(component, VIEWER_BYTE_CELL_SELECTOR, address);\n    assertSelectedCellIsHighlighted(component, VIEWER_TEXT_CELL_SELECTOR, address);\n    assertSelectedCellIsHighlighted(component, VIEWER_ADDRESS_SELECTOR, 0);\n  });\n\n  it('triggers an event on arrow down', async () => {\n    const {component, data} = await setUpComponent();\n    const addressBefore = data.address;\n    const expectedAddress = addressBefore - 1;\n    await assertEventTriggeredOnArrowNavigation(component, 'ArrowLeft', expectedAddress);\n  });\n\n  it('triggers an event on arrow right', async () => {\n    const {component, data} = await setUpComponent();\n    const addressBefore = data.address;\n    const expectedAddress = addressBefore + 1;\n    await assertEventTriggeredOnArrowNavigation(component, 'ArrowRight', expectedAddress);\n  });\n\n  it('triggers an event on arrow down', async () => {\n    const {component, data} = await setUpComponent();\n    const addressBefore = data.address;\n\n    const bytesPerRow = getCellsPerRow(component, VIEWER_BYTE_CELL_SELECTOR);\n    const numBytesPerRow = bytesPerRow.length;\n    const expectedAddress = addressBefore + numBytesPerRow;\n    await assertEventTriggeredOnArrowNavigation(component, 'ArrowDown', expectedAddress);\n  });\n\n  it('triggers an event on arrow up', async () => {\n    const {component, data} = await setUpComponent();\n    const addressBefore = data.address;\n\n    const bytesPerRow = getCellsPerRow(component, VIEWER_BYTE_CELL_SELECTOR);\n    const numBytesPerRow = bytesPerRow.length;\n    const expectedAddress = addressBefore - numBytesPerRow;\n    await assertEventTriggeredOnArrowNavigation(component, 'ArrowUp', expectedAddress);\n  });\n\n  it('triggers an event on page down', async () => {\n    const {component, data} = await setUpComponent();\n    const addressBefore = data.address;\n\n    const bytes = getElementsWithinComponent(component, VIEWER_BYTE_CELL_SELECTOR, HTMLSpanElement);\n    const numBytesPerPage = bytes.length;\n    const expectedAddress = addressBefore + numBytesPerPage;\n    await assertEventTriggeredOnArrowNavigation(component, 'PageDown', expectedAddress);\n  });\n\n  it('triggers an event on page down', async () => {\n    const {component, data} = await setUpComponent();\n    const addressBefore = data.address;\n\n    const bytes = getElementsWithinComponent(component, VIEWER_BYTE_CELL_SELECTOR, HTMLSpanElement);\n    const numBytesPerPage = bytes.length;\n    const expectedAddress = addressBefore - numBytesPerPage;\n    await assertEventTriggeredOnArrowNavigation(component, 'PageUp', expectedAddress);\n  });\n\n  it('does not highlight any bytes when no highlight info set', async () => {\n    const {component} = await setUpComponent();\n    const byteCells = getElementsWithinComponent(component, '.byte-cell.highlight-area', HTMLSpanElement);\n    const textCells = getElementsWithinComponent(component, '.text-cell.highlight-area', HTMLSpanElement);\n\n    assert.strictEqual(byteCells.length, 0);\n    assert.strictEqual(textCells.length, 0);\n  });\n\n  it('highlights correct number of bytes when highlight info set', async () => {\n    const {component, dataWithHighlightInfo} = await setUpComponentWithHighlightInfo();\n    const byteCells = getElementsWithinComponent(component, '.byte-cell.highlight-area', HTMLSpanElement);\n    const textCells = getElementsWithinComponent(component, '.text-cell.highlight-area', HTMLSpanElement);\n\n    assert.strictEqual(byteCells.length, dataWithHighlightInfo.highlightInfo.size);\n    assert.strictEqual(textCells.length, dataWithHighlightInfo.highlightInfo.size);\n  });\n\n  it('highlights byte cells at correct positions when highlight info set', async () => {\n    const {component, dataWithHighlightInfo} = await setUpComponentWithHighlightInfo();\n    const byteCells = getElementsWithinComponent(component, '.byte-cell.highlight-area', HTMLSpanElement);\n\n    for (let i = 0; i < byteCells.length; ++i) {\n      const selectedValue = parseInt(byteCells[i].innerText, 16);\n      const index = dataWithHighlightInfo.highlightInfo.startAddress - dataWithHighlightInfo.memoryOffset + i;\n      assert.strictEqual(selectedValue, dataWithHighlightInfo.memory[index]);\n    }\n  });\n\n  it('focuses highlighted byte cells when focusedMemoryHighlight provided', async () => {\n    const {component, dataWithHighlightInfo} = await setUpComponentWithHighlightInfo();\n    const dataWithFocusedMemoryHighlight = {\n      ...dataWithHighlightInfo,\n      focusedMemoryHighlight: dataWithHighlightInfo.highlightInfo,\n    };\n    component.data = dataWithFocusedMemoryHighlight;\n    const byteCells = getElementsWithinComponent(component, '.byte-cell.focused', HTMLSpanElement);\n\n    for (let i = 0; i < byteCells.length; ++i) {\n      const selectedValue = parseInt(byteCells[i].innerText, 16);\n      const index = dataWithHighlightInfo.highlightInfo.startAddress - dataWithHighlightInfo.memoryOffset + i;\n      assert.strictEqual(selectedValue, dataWithHighlightInfo.memory[index]);\n    }\n  });\n\n  it('does not focus highlighted byte cells when no focusedMemoryHighlight provided', async () => {\n    const {component, dataWithHighlightInfo} = await setUpComponentWithHighlightInfo();\n    const dataWithFocusedMemoryHighlight = {\n      ...dataWithHighlightInfo,\n      focusedMemoryHighlight: dataWithHighlightInfo.highlightInfo,\n    };\n    component.data = dataWithFocusedMemoryHighlight;\n    const byteCells = getElementsWithinComponent(component, '.byte-cell.focused', HTMLSpanElement);\n    assert.isEmpty(byteCells);\n  });\n});\n"]}