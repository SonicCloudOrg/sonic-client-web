{"version":3,"file":"ValueInterpreterDisplay.test.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/linear_memory_inspector/components/ValueInterpreterDisplay.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,EACL,kBAAkB,EAClB,0BAA0B,EAC1B,yBAAyB,EACzB,eAAe,EACf,oBAAoB,GACrB,MAAM,gCAAgC,CAAC;AACxC,OAAO,EAAC,kBAAkB,EAAC,MAAM,wCAAwC,CAAC;AAE1E,OAAO,KAAK,+BAA+B,MAAM,iBAAiB,CAAC;AAEnE,MAAM,CAAC,MAAM,uCAAuC,GAAG,aAAa,CAAC;AAErE,kBAAkB,CAAC,yBAAyB,EAAE,GAAG,EAAE;IACjD,MAAM,sBAAsB,GAAG;QAC7B,EAAC,UAAU,sGAAgF,EAAE,MAAM,EAAE,IAAI,EAAC;QAC1G,EAAC,UAAU,sGAAgF,EAAE,MAAM,EAAE,KAAK,EAAC;QAC3G,EAAC,UAAU,gGAA6E,EAAE,MAAM,EAAE,KAAK,EAAC;QACxG,EAAC,UAAU,gGAA6E,EAAE,MAAM,EAAE,IAAI,EAAC;KACxG,CAAC;IAEF,SAAS,4BAA4B,CACjC,QAIC,EACD,YAC2G;QAC7G,MAAM,gBAAgB,GAAG,EAAE,CAAC;QAC5B,MAAM,kBAAkB,GAAG,CAAC,MAAM,CAAC;QACnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,CAAC;YAC7C,MAAM,EAAC,UAAU,EAAE,MAAM,EAAC,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;YAC7C,IAAI,aAAa,CAAC;YAClB,MAAM,cAAc,GAChB,UAAU,yGAAmF,CAAC;YAClG,MAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAC3C,QAAQ,QAAQ,CAAC,IAAI,EAAE,CAAC;gBACtB;oBACE,aAAa,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,gBAAgB,CAAC;oBAC9D,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;oBACzE,MAAM;gBACR;oBACE,aAAa,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,gBAAgB,CAAC;oBAC9D,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,aAAa,EAAE,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,aAAa,EAAE,cAAc,CAAC,CAAC;oBAC5G,MAAM;gBACR;oBACE,aAAa,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,gBAAgB,CAAC;oBAC9D,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,aAAa,EAAE,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,aAAa,EAAE,cAAc,CAAC,CAAC;oBAC5G,MAAM;gBACR;oBACE,aAAa,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,gBAAgB,CAAC;oBAC9D,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,MAAM,CAAC,aAAa,CAAC,EAAE,cAAc,CAAC,CAAC,CAAC;wBAC5D,IAAI,CAAC,YAAY,CAAC,CAAC,EAAE,MAAM,CAAC,aAAa,CAAC,EAAE,cAAc,CAAC,CAAC;oBACrE,MAAM;gBACR;oBACE,aAAa,GAAG,kBAAkB,CAAC;oBACnC,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,aAAa,EAAE,cAAc,CAAC,CAAC;oBAClD,MAAM;gBACR;oBACE,aAAa,GAAG,kBAAkB,CAAC;oBACnC,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,aAAa,EAAE,cAAc,CAAC,CAAC;oBAClD,MAAM;gBACR;oBACE,aAAa,GAAG,IAAI,GAAG,gBAAgB,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;oBACrD,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,gBAAgB,EAAE,cAAc,CAAC,CAAC;oBACnD,MAAM;gBACR;oBACE,aAAa,GAAG,IAAI,GAAG,gBAAgB,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;oBACrD,IAAI,CAAC,YAAY,CAAC,CAAC,EAAE,MAAM,CAAC,gBAAgB,CAAC,EAAE,cAAc,CAAC,CAAC;oBAC/D,MAAM;gBACR;oBACE,MAAM,IAAI,KAAK,CAAC,gBAAgB,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;YACrD,CAAC;YACD,MAAM,WAAW,GACb,+BAA+B,CAAC,4BAA4B,CAAC,MAAM,CAAC,EAAC,GAAG,QAAQ,EAAE,GAAG,YAAY,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC;YAC3G,MAAM,CAAC,WAAW,CAAC,WAAW,EAAE,aAAa,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC5D,CAAC;IACH,CAAC;IAED,EAAE,CAAC,8EAA8E,EAAE,GAAG,EAAE;QACtF,MAAM,UAAU,GAAG;YACjB,MAAM,EAAE,IAAI,WAAW,CAAC,CAAC,CAAC;YAC1B,IAAI,mGAA6E;YACjF,IAAI,gGAAoF;SACzF,CAAC;QACF,4BAA4B,CAAC,UAAU,EAAE,sBAAsB,CAAC,CAAC;IACnE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+EAA+E,EAAE,GAAG,EAAE;QACvF,MAAM,UAAU,GAAG;YACjB,MAAM,EAAE,IAAI,WAAW,CAAC,CAAC,CAAC;YAC1B,IAAI,qGAA8E;YAClF,IAAI,gGAAoF;SACzF,CAAC;QAEF,4BAA4B,CAAC,UAAU,EAAE,sBAAsB,CAAC,CAAC;IACnE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+EAA+E,EAAE,GAAG,EAAE;QACvF,MAAM,UAAU,GAAG;YACjB,MAAM,EAAE,IAAI,WAAW,CAAC,CAAC,CAAC;YAC1B,IAAI,qGAA8E;YAClF,IAAI,gGAAoF;SACzF,CAAC;QAEF,4BAA4B,CAAC,UAAU,EAAE,sBAAsB,CAAC,CAAC;IACnE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+EAA+E,EAAE,GAAG,EAAE;QACvF,MAAM,UAAU,GAAG;YACjB,MAAM,EAAE,IAAI,WAAW,CAAC,CAAC,CAAC;YAC1B,IAAI,qGAA8E;YAClF,IAAI,gGAAoF;SACzF,CAAC;QAEF,4BAA4B,CAAC,UAAU,EAAE,sBAAsB,CAAC,CAAC;IACnE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yDAAyD,EAAE,GAAG,EAAE;QACjE,MAAM,UAAU,GAAG;YACjB,MAAM,EAAE,IAAI,WAAW,CAAC,CAAC,CAAC;YAC1B,IAAI,qGAAgF;YACpF,IAAI,gGAAoF;SACzF,CAAC;QAEF,4BAA4B,CAAC,UAAU,EAAE,sBAAsB,CAAC,CAAC;IACnE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yDAAyD,EAAE,GAAG,EAAE;QACjE,MAAM,UAAU,GAAG;YACjB,MAAM,EAAE,IAAI,WAAW,CAAC,CAAC,CAAC;YAC1B,IAAI,qGAAgF;YACpF,IAAI,gGAAoF;SACzF,CAAC;QAEF,4BAA4B,CAAC,UAAU,EAAE,sBAAsB,CAAC,CAAC;IACnE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;QACzD,MAAM,UAAU,GAAG;YACjB,MAAM,EAAE,IAAI,WAAW,CAAC,CAAC,CAAC;YAC1B,IAAI,yGAAkF;YACtF,IAAI,oGAAwF;SAC7F,CAAC;QAEF,4BAA4B,CAAC,UAAU,EAAE,sBAAsB,CAAC,CAAC;IACnE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;QACzD,MAAM,UAAU,GAAG;YACjB,MAAM,EAAE,IAAI,WAAW,CAAC,CAAC,CAAC;YAC1B,IAAI,yGAAkF;YACtF,IAAI,oGAAwF;SAC7F,CAAC;QAEF,4BAA4B,CAAC,UAAU,EAAE,sBAAsB,CAAC,CAAC;IACnE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;QAClD,MAAM,aAAa,GAAG,MAAM,CAAC;QAC7B,MAAM,WAAW,GAAG,+BAA+B,CAAC,4BAA4B,CAAC,WAAW,CACxF,aAAa,iGAAqF,CAAC;QACvG,MAAM,CAAC,WAAW,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;QACrD,MAAM,aAAa,GAAG,MAAM,CAAC;QAC7B,MAAM,WAAW,GAAG,+BAA+B,CAAC,4BAA4B,CAAC,WAAW,CACxF,aAAa,oGAAwF,CAAC;QAC1G,MAAM,CAAC,WAAW,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;QACpD,MAAM,eAAe,GAAG,GAAG,CAAC;QAC5B,MAAM,WAAW,GAAG,+BAA+B,CAAC,4BAA4B,CAAC,aAAa,CAC1F,eAAe,iGAAqF,CAAC;QACzG,MAAM,CAAC,WAAW,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;QACxD,MAAM,eAAe,GAAG,EAAE,CAAC;QAC3B,MAAM,WAAW,GAAG,+BAA+B,CAAC,4BAA4B,CAAC,aAAa,CAC1F,eAAe,qGAAyF,CAAC;QAC7G,MAAM,CAAC,WAAW,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;QAC9C,MAAM,eAAe,GAAG,CAAC,EAAE,CAAC;QAC5B,MAAM,WAAW,GAAG,+BAA+B,CAAC,4BAA4B,CAAC,aAAa,CAC1F,eAAe,qGAAyF,CAAC;QAC7G,MAAM,CAAC,WAAW,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;QAClD,MAAM,eAAe,GAAG,EAAE,CAAC;QAC3B,MAAM,WAAW,GAAG,+BAA+B,CAAC,4BAA4B,CAAC,aAAa,CAC1F,eAAe,+FAAmF,CAAC;QACvG,MAAM,CAAC,WAAW,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;QAChD,MAAM,eAAe,GAAG,CAAC,EAAE,CAAC;QAC5B,MAAM,WAAW,GAAG,+BAA+B,CAAC,4BAA4B,CAAC,aAAa,CAC1F,eAAe,+FAAmF,CAAC;QACvG,MAAM,CAAC,WAAW,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yFAAyF,EAAE,GAAG,EAAE;QACjG,MAAM,SAAS,GAAG,IAAI,+BAA+B,CAAC,uBAAuB,CAAC,uBAAuB,EAAE,CAAC;QACxG,MAAM,KAAK,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAChD,SAAS,CAAC,IAAI,GAAG;YACf,MAAM,EAAE,IAAI,UAAU,CAAC,KAAK,CAAC,CAAC,MAAM;YACpC,UAAU,sGAAgF;YAC1F,UAAU,EAAE,IAAI,GAAG,CAAC;;;aAGnB,CAAC;YACF,YAAY,EAAE,KAAK,CAAC,MAAM;SAC3B,CAAC;QACF,oBAAoB,CAAC,SAAS,CAAC,CAAC;QAEhC,MAAM,UAAU,GAAG,0BAA0B,CAAC,SAAS,EAAE,cAAc,EAAE,cAAc,CAAC,CAAC;QACzF,MAAM,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;QAE/B,MAAM,YAAY,GAAG,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QAClE,MAAM,cAAc,GAAG,CAAC,YAAY,EAAE,oBAAoB,CAAC,CAAC;QAC5D,MAAM,CAAC,eAAe,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yFAAyF,EAAE,GAAG,EAAE;QACjG,MAAM,SAAS,GAAG,IAAI,+BAA+B,CAAC,uBAAuB,CAAC,uBAAuB,EAAE,CAAC;QACxG,MAAM,KAAK,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC;QAChC,SAAS,CAAC,IAAI,GAAG;YACf,MAAM,EAAE,IAAI,UAAU,CAAC,KAAK,CAAC,CAAC,MAAM;YACpC,UAAU,sGAAgF;YAC1F,UAAU,EAAE,IAAI,GAAG,CAAC;;;aAGnB,CAAC;YACF,YAAY,EAAE,KAAK,CAAC,MAAM;SAC3B,CAAC;QACF,oBAAoB,CAAC,SAAS,CAAC,CAAC;QAEhC,MAAM,UAAU,GAAG,0BAA0B,CAAC,SAAS,EAAE,cAAc,EAAE,eAAe,CAAC,CAAC;QAC1F,MAAM,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;QAE/B,MAAM,YAAY,GAAG,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QAClE,MAAM,cAAc,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;QACvD,MAAM,CAAC,eAAe,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uEAAuE,EAAE,GAAG,EAAE;QAC/E,MAAM,SAAS,GAAG,IAAI,+BAA+B,CAAC,uBAAuB,CAAC,uBAAuB,EAAE,CAAC;QACxG,MAAM,KAAK,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QACvC,SAAS,CAAC,IAAI,GAAG;YACf,MAAM,EAAE,IAAI,UAAU,CAAC,KAAK,CAAC,CAAC,MAAM;YACpC,UAAU,sGAAgF;YAC1F,UAAU,EAAE,IAAI,GAAG,CAAC;;;;aAInB,CAAC;YACF,cAAc,EAAE,IAAI,GAAG,CAAC;gBACtB;;;iBAGC;gBACD;;;iBAGC;gBACD;;;iBAGC;aACF,CAAC;YACF,YAAY,EAAE,KAAK,CAAC,MAAM;SAC3B,CAAC;QACF,oBAAoB,CAAC,SAAS,CAAC,CAAC;QAEhC,MAAM,UAAU,GAAG,0BAA0B,CAAC,SAAS,EAAE,cAAc,EAAE,eAAe,CAAC,CAAC;QAC1F,MAAM,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;QAE/B,MAAM,YAAY,GAAG,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QAClE,MAAM,cAAc,GAAG,CAAC,KAAK,EAAE,QAAQ,EAAE,YAAY,EAAE,YAAY,CAAC,CAAC;QACrE,MAAM,CAAC,eAAe,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;QACtE,MAAM,SAAS,GAAG,IAAI,+BAA+B,CAAC,uBAAuB,CAAC,uBAAuB,EAAE,CAAC;QACxG,MAAM,KAAK,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC;QAChC,MAAM,OAAO,iGAAqF,CAAC;QACnG,MAAM,OAAO,oGAAwF,CAAC;QAEtG,MAAM,OAAO,GAAG,+BAA+B,CAAC,4BAA4B,CAAC,0BAA0B,EAAE,CAAC;QAC1G,OAAO,CAAC,GAAG,sGAAiF,OAAO,CAAC,CAAC;QAErG,SAAS,CAAC,IAAI,GAAG;YACf,MAAM,EAAE,IAAI,UAAU,CAAC,KAAK,CAAC,CAAC,MAAM;YACpC,UAAU,sGAAgF;YAC1F,UAAU,EAAE,IAAI,GAAG,CAAC;;aAEnB,CAAC;YACF,cAAc,EAAE,OAAO;YACvB,YAAY,EAAE,KAAK,CAAC,MAAM;SAC3B,CAAC;QAEF,MAAM,KAAK,GAAG,yBAAyB,CAAC,SAAS,EAAE,sBAAsB,EAAE,iBAAiB,CAAC,CAAC;QAC9F,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QACzC,KAAK,CAAC,KAAK,GAAG,OAAO,CAAC;QACtB,MAAM,YAAY,GACd,eAAe,CACX,SAAS,EAAE,sBAAsB,CAAC,CAAC;QAC3C,MAAM,WAAW,GAAG,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC;QACxC,KAAK,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;QACjC,MAAM,KAAK,GAAG,MAAM,YAAY,CAAC;QACjC,MAAM,CAAC,SAAS,CACZ,KAAK,CAAC,IAAI,EACV,EAAC,IAAI,qGAAgF,EAAE,IAAI,EAAE,OAAO,EAAC,CAAC,CAAC;IAC7G,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kEAAkE,EAAE,KAAK,IAAI,EAAE;QAChF,MAAM,SAAS,GAAG,IAAI,+BAA+B,CAAC,uBAAuB,CAAC,uBAAuB,EAAE,CAAC;QACxG,MAAM,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC3B,SAAS,CAAC,IAAI,GAAG;YACf,MAAM,EAAE,IAAI,UAAU,CAAC,KAAK,CAAC,CAAC,MAAM;YACpC,UAAU,sGAAgF;YAC1F,UAAU,EAAE,IAAI,GAAG,CAAC;;aAEnB,CAAC;YACF,YAAY,EAAE,KAAK,CAAC,MAAM;SAC3B,CAAC;QACF,oBAAoB,CAAC,SAAS,CAAC,CAAC;QAEhC,MAAM,MAAM,GAAG,yBAAyB,CAAC,SAAS,EAAE,uCAAuC,EAAE,iBAAiB,CAAC,CAAC;QAChH,MAAM,YAAY,GACd,eAAe,CACX,SAAS,EAAE,sBAAsB,CAAC,CAAC;QAC3C,kBAAkB,CAAC,MAAM,CAAC,CAAC;QAC3B,MAAM,KAAK,GAAG,MAAM,YAAY,CAAC;QACjC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kEAAkE,EAAE,KAAK,IAAI,EAAE;QAChF,MAAM,SAAS,GAAG,IAAI,+BAA+B,CAAC,uBAAuB,CAAC,uBAAuB,EAAE,CAAC;QACxG,MAAM,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACvC,SAAS,CAAC,IAAI,GAAG;YACf,MAAM,EAAE,IAAI,UAAU,CAAC,KAAK,CAAC,CAAC,MAAM;YACpC,UAAU,sGAAgF;YAC1F,UAAU,EAAE,IAAI,GAAG,CAAC;;aAEnB,CAAC;YACF,YAAY,EAAE,KAAK,CAAC,MAAM;SAC3B,CAAC;QACF,oBAAoB,CAAC,SAAS,CAAC,CAAC;QAEhC,MAAM,MAAM,GAAG,yBAAyB,CAAC,SAAS,EAAE,uCAAuC,EAAE,iBAAiB,CAAC,CAAC;QAChH,MAAM,YAAY,GACd,eAAe,CACX,SAAS,EAAE,sBAAsB,CAAC,CAAC;QAC3C,kBAAkB,CAAC,MAAM,CAAC,CAAC;QAC3B,MAAM,KAAK,GAAG,MAAM,YAAY,CAAC;QACjC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iEAAiE,EAAE,GAAG,EAAE;QACzE,MAAM,SAAS,GAAG,IAAI,+BAA+B,CAAC,uBAAuB,CAAC,uBAAuB,EAAE,CAAC;QACxG,MAAM,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACvC,SAAS,CAAC,IAAI,GAAG;YACf,MAAM,EAAE,IAAI,UAAU,CAAC,KAAK,CAAC,CAAC,MAAM;YACpC,UAAU,sGAAgF;YAC1F,UAAU,EAAE,IAAI,GAAG,CAAC;;;aAGnB,CAAC;YACF,YAAY,EAAE,KAAK,CAAC,MAAM;SAC3B,CAAC;QACF,oBAAoB,CAAC,SAAS,CAAC,CAAC;QAEhC,MAAM,OAAO,GAAG,0BAA0B,CAAC,SAAS,EAAE,uCAAuC,EAAE,iBAAiB,CAAC,CAAC;QAClH,MAAM,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;QAC5B,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;QACnC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wDAAwD,EAAE,GAAG,EAAE;QAChE,mEAAmE;QACnE,2EAA2E;QAC3E,yCAAyC;QAEzC,MAAM,SAAS,GAAG,IAAI,+BAA+B,CAAC,uBAAuB,CAAC,uBAAuB,EAAE,CAAC;QACxG,MAAM,KAAK,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC;QAChC,SAAS,CAAC,IAAI,GAAG;YACf,MAAM,EAAE,IAAI,UAAU,CAAC,KAAK,CAAC,CAAC,MAAM;YACpC,UAAU,sGAAgF;YAC1F,UAAU,EAAE,IAAI,GAAG,CAAC;;;;;aAKnB,CAAC;YACF,YAAY,EAAE,KAAK,CAAC,MAAM;SAC3B,CAAC;QACF,oBAAoB,CAAC,SAAS,CAAC,CAAC;QAEhC,MAAM,UAAU,GAAG,0BAA0B,CAAC,SAAS,EAAE,kBAAkB,EAAE,eAAe,CAAC,CAAC;QAC9F,MAAM,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;QAE/B,MAAM,cAAc,GAAG;YACrB,eAAe;YACf,GAAG;YACH,gBAAgB;YAChB,OAAO;YACP,QAAQ;YACR,cAAc;YACd,UAAU;YACV,gBAAgB;YAChB,YAAY;SACb,CAAC;QAEF,iEAAiE;QACjE,wEAAwE;QACxE,0EAA0E;QAE1E,2EAA2E;QAC3E,MAAM,KAAK,GAAG,QAAQ,CAAC,WAAW,EAAE,CAAC;QACrC,sCAAsC;QACtC,MAAM,SAAS,GAAG,QAAQ,CAAC,YAAY,EAAE,CAAC;QAE1C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,CAAC;YAC3C,IAAI,SAAS,KAAK,IAAI,EAAE,CAAC;gBACvB,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;YACnC,CAAC;YACD,gCAAgC;YAChC,KAAK,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;YACxC,2CAA2C;YAC3C,SAAS,EAAE,eAAe,EAAE,CAAC;YAC7B,8BAA8B;YAC9B,SAAS,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;YAE3B,MAAM,IAAI,GAAG,MAAM,CAAC,YAAY,EAAE,EAAE,QAAQ,EAAE,CAAC;YAC/C,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9C,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {\n  dispatchClickEvent,\n  getElementsWithinComponent,\n  getElementWithinComponent,\n  getEventPromise,\n  renderElementIntoDOM,\n} from '../../../testing/DOMHelpers.js';\nimport {describeWithLocale} from '../../../testing/EnvironmentHelpers.js';\n\nimport * as LinearMemoryInspectorComponents from './components.js';\n\nexport const DISPLAY_JUMP_TO_POINTER_BUTTON_SELECTOR = '[data-jump]';\n\ndescribeWithLocale('ValueInterpreterDisplay', () => {\n  const combinationsForNumbers = [\n    {endianness: LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.Endianness.Little, signed: true},\n    {endianness: LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.Endianness.Little, signed: false},\n    {endianness: LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.Endianness.Big, signed: false},\n    {endianness: LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.Endianness.Big, signed: true},\n  ];\n\n  function testNumberFormatCombinations(\n      baseData: {\n        buffer: ArrayBuffer,\n        type: LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType,\n        mode: LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueTypeMode,\n      },\n      combinations: Array<\n          {endianness: LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.Endianness, signed: boolean}>) {\n    const expectedIntValue = 20;\n    const expectedFloatValue = -234.03;\n    for (let i = 0; i < combinations.length; ++i) {\n      const {endianness, signed} = combinations[i];\n      let expectedValue;\n      const isLittleEndian =\n          endianness === LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.Endianness.Little;\n      const view = new DataView(baseData.buffer);\n      switch (baseData.type) {\n        case LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Int8:\n          expectedValue = signed ? -expectedIntValue : expectedIntValue;\n          signed ? view.setInt8(0, expectedValue) : view.setInt8(0, expectedValue);\n          break;\n        case LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Int16:\n          expectedValue = signed ? -expectedIntValue : expectedIntValue;\n          signed ? view.setInt16(0, expectedValue, isLittleEndian) : view.setUint16(0, expectedValue, isLittleEndian);\n          break;\n        case LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Int32:\n          expectedValue = signed ? -expectedIntValue : expectedIntValue;\n          signed ? view.setInt32(0, expectedValue, isLittleEndian) : view.setUint32(0, expectedValue, isLittleEndian);\n          break;\n        case LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Int64:\n          expectedValue = signed ? -expectedIntValue : expectedIntValue;\n          signed ? view.setBigInt64(0, BigInt(expectedValue), isLittleEndian) :\n                   view.setBigUint64(0, BigInt(expectedValue), isLittleEndian);\n          break;\n        case LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Float32:\n          expectedValue = expectedFloatValue;\n          view.setFloat32(0, expectedValue, isLittleEndian);\n          break;\n        case LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Float64:\n          expectedValue = expectedFloatValue;\n          view.setFloat64(0, expectedValue, isLittleEndian);\n          break;\n        case LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Pointer32:\n          expectedValue = '0x' + expectedIntValue.toString(16);\n          view.setInt32(0, expectedIntValue, isLittleEndian);\n          break;\n        case LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Pointer64:\n          expectedValue = '0x' + expectedIntValue.toString(16);\n          view.setBigUint64(0, BigInt(expectedIntValue), isLittleEndian);\n          break;\n        default:\n          throw new Error(`Unknown type ${baseData.type}`);\n      }\n      const actualValue =\n          LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.format({...baseData, ...combinations[i]});\n      assert.strictEqual(actualValue, expectedValue.toString());\n    }\n  }\n\n  it('correctly formats signed/unsigned and endianness for Integer 8-bit (decimal)', () => {\n    const formatData = {\n      buffer: new ArrayBuffer(1),\n      type: LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Int8,\n      mode: LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueTypeMode.Decimal,\n    };\n    testNumberFormatCombinations(formatData, combinationsForNumbers);\n  });\n\n  it('correctly formats signed/unsigned and endianness for Integer 16-bit (decimal)', () => {\n    const formatData = {\n      buffer: new ArrayBuffer(2),\n      type: LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Int16,\n      mode: LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueTypeMode.Decimal,\n    };\n\n    testNumberFormatCombinations(formatData, combinationsForNumbers);\n  });\n\n  it('correctly formats signed/unsigned and endianness for Integer 32-bit (decimal)', () => {\n    const formatData = {\n      buffer: new ArrayBuffer(4),\n      type: LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Int32,\n      mode: LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueTypeMode.Decimal,\n    };\n\n    testNumberFormatCombinations(formatData, combinationsForNumbers);\n  });\n\n  it('correctly formats signed/unsigned and endianness for Integer 64-bit (decimal)', () => {\n    const formatData = {\n      buffer: new ArrayBuffer(8),\n      type: LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Int64,\n      mode: LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueTypeMode.Decimal,\n    };\n\n    testNumberFormatCombinations(formatData, combinationsForNumbers);\n  });\n\n  it('correctly formats endianness for Float 32-bit (decimal)', () => {\n    const formatData = {\n      buffer: new ArrayBuffer(4),\n      type: LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Float32,\n      mode: LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueTypeMode.Decimal,\n    };\n\n    testNumberFormatCombinations(formatData, combinationsForNumbers);\n  });\n\n  it('correctly formats endianness for Float 64-bit (decimal)', () => {\n    const formatData = {\n      buffer: new ArrayBuffer(8),\n      type: LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Float64,\n      mode: LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueTypeMode.Decimal,\n    };\n\n    testNumberFormatCombinations(formatData, combinationsForNumbers);\n  });\n\n  it('correctly formats endianness for Pointer 32-bit', () => {\n    const formatData = {\n      buffer: new ArrayBuffer(4),\n      type: LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Pointer32,\n      mode: LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueTypeMode.Hexadecimal,\n    };\n\n    testNumberFormatCombinations(formatData, combinationsForNumbers);\n  });\n\n  it('correctly formats endianness for Pointer 64-bit', () => {\n    const formatData = {\n      buffer: new ArrayBuffer(8),\n      type: LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Pointer64,\n      mode: LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueTypeMode.Hexadecimal,\n    };\n\n    testNumberFormatCombinations(formatData, combinationsForNumbers);\n  });\n\n  it('correctly formats floats in decimal mode', () => {\n    const expectedFloat = 341.34;\n    const actualValue = LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.formatFloat(\n        expectedFloat, LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueTypeMode.Decimal);\n    assert.strictEqual(actualValue, '341.34');\n  });\n\n  it('correctly formats floats in scientific mode', () => {\n    const expectedFloat = 341.34;\n    const actualValue = LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.formatFloat(\n        expectedFloat, LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueTypeMode.Scientific);\n    assert.strictEqual(actualValue, '3.41e+2');\n  });\n\n  it('correctly formats integers in decimal mode', () => {\n    const expectedInteger = 120;\n    const actualValue = LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.formatInteger(\n        expectedInteger, LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueTypeMode.Decimal);\n    assert.strictEqual(actualValue, '120');\n  });\n\n  it('correctly formats integers in hexadecimal mode', () => {\n    const expectedInteger = 16;\n    const actualValue = LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.formatInteger(\n        expectedInteger, LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueTypeMode.Hexadecimal);\n    assert.strictEqual(actualValue, '0x10');\n  });\n\n  it('returns N/A for negative hex numbers', () => {\n    const negativeInteger = -16;\n    const actualValue = LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.formatInteger(\n        negativeInteger, LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueTypeMode.Hexadecimal);\n    assert.strictEqual(actualValue, 'N/A');\n  });\n\n  it('correctly formats integers in octal mode', () => {\n    const expectedInteger = 16;\n    const actualValue = LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.formatInteger(\n        expectedInteger, LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueTypeMode.Octal);\n    assert.strictEqual(actualValue, '20');\n  });\n\n  it('returns N/A for negative octal numbers', () => {\n    const expectedInteger = -16;\n    const actualValue = LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.formatInteger(\n        expectedInteger, LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueTypeMode.Octal);\n    assert.strictEqual(actualValue, 'N/A');\n  });\n\n  it('renders pointer values in LinearMemoryInspector.ValueInterpreterDisplayUtils.ValueTypes', () => {\n    const component = new LinearMemoryInspectorComponents.ValueInterpreterDisplay.ValueInterpreterDisplay();\n    const array = [1, 132, 172, 71, 43, 12, 12, 66];\n    component.data = {\n      buffer: new Uint8Array(array).buffer,\n      endianness: LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.Endianness.Little,\n      valueTypes: new Set([\n        LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Pointer32,\n        LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Pointer64,\n      ]),\n      memoryLength: array.length,\n    };\n    renderElementIntoDOM(component);\n\n    const dataValues = getElementsWithinComponent(component, '[data-value]', HTMLDivElement);\n    assert.lengthOf(dataValues, 2);\n\n    const actualValues = Array.from(dataValues).map(x => x.innerText);\n    const expectedValues = ['0x47AC8401', '0x420C0C2B47AC8401'];\n    assert.deepStrictEqual(actualValues, expectedValues);\n  });\n\n  it('renders value in selected LinearMemoryInspector.ValueInterpreterDisplayUtils.ValueTypes', () => {\n    const component = new LinearMemoryInspectorComponents.ValueInterpreterDisplay.ValueInterpreterDisplay();\n    const array = [1, 132, 172, 71];\n    component.data = {\n      buffer: new Uint8Array(array).buffer,\n      endianness: LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.Endianness.Little,\n      valueTypes: new Set([\n        LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Int16,\n        LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Float32,\n      ]),\n      memoryLength: array.length,\n    };\n    renderElementIntoDOM(component);\n\n    const dataValues = getElementsWithinComponent(component, '[data-value]', HTMLSpanElement);\n    assert.lengthOf(dataValues, 3);\n\n    const actualValues = Array.from(dataValues).map(x => x.innerText);\n    const expectedValues = ['33793', '-31743', '88328.01'];\n    assert.deepStrictEqual(actualValues, expectedValues);\n  });\n\n  it('renders only unsigned values for Octal and Hexadecimal representation', () => {\n    const component = new LinearMemoryInspectorComponents.ValueInterpreterDisplay.ValueInterpreterDisplay();\n    const array = [0xC8, 0xC9, 0xCA, 0XCB];\n    component.data = {\n      buffer: new Uint8Array(array).buffer,\n      endianness: LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.Endianness.Little,\n      valueTypes: new Set([\n        LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Int8,\n        LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Int16,\n        LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Int32,\n      ]),\n      valueTypeModes: new Map([\n        [\n          LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Int8,\n          LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueTypeMode.Octal,\n        ],\n        [\n          LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Int16,\n          LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueTypeMode.Hexadecimal,\n        ],\n        [\n          LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Int32,\n          LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueTypeMode.Decimal,\n        ],\n      ]),\n      memoryLength: array.length,\n    };\n    renderElementIntoDOM(component);\n\n    const dataValues = getElementsWithinComponent(component, '[data-value]', HTMLSpanElement);\n    assert.lengthOf(dataValues, 4);\n\n    const actualValues = Array.from(dataValues).map(x => x.innerText);\n    const expectedValues = ['310', '0xC9C8', '3419064776', '-875902520'];\n    assert.deepStrictEqual(actualValues, expectedValues);\n  });\n\n  it('triggers a value changed event on selecting a new mode', async () => {\n    const component = new LinearMemoryInspectorComponents.ValueInterpreterDisplay.ValueInterpreterDisplay();\n    const array = [1, 132, 172, 71];\n    const oldMode = LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueTypeMode.Decimal;\n    const newMode = LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueTypeMode.Scientific;\n\n    const mapping = LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.getDefaultValueTypeMapping();\n    mapping.set(LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Float32, oldMode);\n\n    component.data = {\n      buffer: new Uint8Array(array).buffer,\n      endianness: LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.Endianness.Little,\n      valueTypes: new Set([\n        LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Float32,\n      ]),\n      valueTypeModes: mapping,\n      memoryLength: array.length,\n    };\n\n    const input = getElementWithinComponent(component, '[data-mode-settings]', HTMLSelectElement);\n    assert.strictEqual(input.value, oldMode);\n    input.value = newMode;\n    const eventPromise =\n        getEventPromise<LinearMemoryInspectorComponents.ValueInterpreterDisplay.ValueTypeModeChangedEvent>(\n            component, 'valuetypemodechanged');\n    const changeEvent = new Event('change');\n    input.dispatchEvent(changeEvent);\n    const event = await eventPromise;\n    assert.deepEqual(\n        event.data,\n        {type: LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Float32, mode: newMode});\n  });\n\n  it('triggers an event on jumping to an address from a 32-bit pointer', async () => {\n    const component = new LinearMemoryInspectorComponents.ValueInterpreterDisplay.ValueInterpreterDisplay();\n    const array = [1, 0, 0, 0];\n    component.data = {\n      buffer: new Uint8Array(array).buffer,\n      endianness: LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.Endianness.Little,\n      valueTypes: new Set([\n        LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Pointer32,\n      ]),\n      memoryLength: array.length,\n    };\n    renderElementIntoDOM(component);\n\n    const button = getElementWithinComponent(component, DISPLAY_JUMP_TO_POINTER_BUTTON_SELECTOR, HTMLButtonElement);\n    const eventPromise =\n        getEventPromise<LinearMemoryInspectorComponents.ValueInterpreterDisplay.JumpToPointerAddressEvent>(\n            component, 'jumptopointeraddress');\n    dispatchClickEvent(button);\n    const event = await eventPromise;\n    assert.deepEqual(event.data, 1);\n  });\n\n  it('triggers an event on jumping to an address from a 64-bit pointer', async () => {\n    const component = new LinearMemoryInspectorComponents.ValueInterpreterDisplay.ValueInterpreterDisplay();\n    const array = [1, 0, 0, 0, 0, 0, 0, 0];\n    component.data = {\n      buffer: new Uint8Array(array).buffer,\n      endianness: LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.Endianness.Little,\n      valueTypes: new Set([\n        LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Pointer64,\n      ]),\n      memoryLength: array.length,\n    };\n    renderElementIntoDOM(component);\n\n    const button = getElementWithinComponent(component, DISPLAY_JUMP_TO_POINTER_BUTTON_SELECTOR, HTMLButtonElement);\n    const eventPromise =\n        getEventPromise<LinearMemoryInspectorComponents.ValueInterpreterDisplay.JumpToPointerAddressEvent>(\n            component, 'jumptopointeraddress');\n    dispatchClickEvent(button);\n    const event = await eventPromise;\n    assert.deepEqual(event.data, 1);\n  });\n\n  it('renders a disabled jump-to-address button if address is invalid', () => {\n    const component = new LinearMemoryInspectorComponents.ValueInterpreterDisplay.ValueInterpreterDisplay();\n    const array = [8, 0, 0, 0, 0, 0, 0, 0];\n    component.data = {\n      buffer: new Uint8Array(array).buffer,\n      endianness: LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.Endianness.Little,\n      valueTypes: new Set([\n        LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Pointer32,\n        LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Pointer64,\n      ]),\n      memoryLength: array.length,\n    };\n    renderElementIntoDOM(component);\n\n    const buttons = getElementsWithinComponent(component, DISPLAY_JUMP_TO_POINTER_BUTTON_SELECTOR, HTMLButtonElement);\n    assert.lengthOf(buttons, 2);\n    assert.isTrue(buttons[0].disabled);\n    assert.isTrue(buttons[1].disabled);\n  });\n\n  it('selects text in data-value elements if user selects it', () => {\n    // To test the failing case, set .value-type user-select to `none`.\n    // This is necessary as we render the component in isolation, so it doesn't\n    // inherit this property from its parent.\n\n    const component = new LinearMemoryInspectorComponents.ValueInterpreterDisplay.ValueInterpreterDisplay();\n    const array = [1, 132, 172, 71];\n    component.data = {\n      buffer: new Uint8Array(array).buffer,\n      endianness: LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.Endianness.Little,\n      valueTypes: new Set([\n        LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Int8,\n        LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Int16,\n        LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Float32,\n        LinearMemoryInspectorComponents.ValueInterpreterDisplayUtils.ValueType.Pointer32,\n      ]),\n      memoryLength: array.length,\n    };\n    renderElementIntoDOM(component);\n\n    const dataValues = getElementsWithinComponent(component, '.selectable-text', HTMLSpanElement);\n    assert.lengthOf(dataValues, 9);\n\n    const expectedValues = [\n      'Integer 8-bit',\n      '1',\n      'Integer 16-bit',\n      '33793',\n      '-31743',\n      'Float 32-bit',\n      '88328.01',\n      'Pointer 32-bit',\n      '0x47AC8401',\n    ];\n\n    // Workaround for selecting text (instead of double-clicking it).\n    // We can use a range to specify an element. Range can be converted into\n    // a selection. We then check if the selected text meets our expectations.\n\n    // Continuous part of a document, independent of any visual representation.\n    const range = document.createRange();\n    // Represents user's highlighted text.\n    const selection = document.getSelection();\n\n    for (let i = 0; i < dataValues.length; ++i) {\n      if (selection === null) {\n        assert.fail('Selection is null');\n      }\n      // Set range around the element.\n      range.selectNodeContents(dataValues[i]);\n      // Remove ranges associated with selection.\n      selection?.removeAllRanges();\n      // Select element using range.\n      selection?.addRange(range);\n\n      const text = window.getSelection()?.toString();\n      assert.strictEqual(text, expectedValues[i]);\n    }\n  });\n});\n"]}