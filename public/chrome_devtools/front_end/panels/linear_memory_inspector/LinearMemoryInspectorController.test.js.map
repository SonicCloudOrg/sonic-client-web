{"version":3,"file":"LinearMemoryInspectorController.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/linear_memory_inspector/LinearMemoryInspectorController.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as SDK from '../../core/sdk/sdk.js';\nimport {describeWithEnvironment} from '../../testing/EnvironmentHelpers.js';\n\nimport * as LinearMemoryInspectorComponents from './components/components.js';\nimport * as LinearMemoryInspector from './linear_memory_inspector.js';\n\nconst {LinearMemoryInspectorController} = LinearMemoryInspector;\nconst {ValueInterpreterDisplayUtils} = LinearMemoryInspectorComponents;\n\nclass MockRemoteObject extends SDK.RemoteObject.LocalJSONObject {\n  private objSubtype?: string;\n\n  constructor(array: ArrayBuffer) {\n    super(array);\n  }\n\n  override arrayBufferByteLength() {\n    return this.value.byteLength;\n  }\n\n  override get subtype(): string|undefined {\n    return 'arraybuffer';\n  }\n}\n\nfunction createWrapper(array: Uint8Array) {\n  const mockRemoteObj = new MockRemoteObject(array.buffer);\n  const mockRemoteArrayBuffer = new SDK.RemoteObject.RemoteArrayBuffer(mockRemoteObj);\n  return new LinearMemoryInspectorController.RemoteArrayBufferWrapper(mockRemoteArrayBuffer);\n}\n\ndescribeWithEnvironment('LinearMemoryInspectorController', () => {\n  it('throws an error on an invalid (out-of-bounds) memory range request', async () => {\n    const array = new Uint8Array([2, 4, 6, 2, 4]);\n    const wrapper = createWrapper(array);\n    try {\n      await LinearMemoryInspectorController.LinearMemoryInspectorController.getMemoryRange(wrapper, 10, 20);\n      throw new Error('Function did now throw.');\n    } catch (e) {\n      const error = e as Error;\n      assert.strictEqual(error.message, 'Requested range is out of bounds.');\n    }\n  });\n\n  it('throws an error on an invalid memory range request', async () => {\n    const array = new Uint8Array([2, 4, 6, 2, 4]);\n    const wrapper = createWrapper(array);\n    try {\n      await LinearMemoryInspectorController.LinearMemoryInspectorController.getMemoryRange(wrapper, 20, 10);\n      throw new Error('Function did now throw.');\n    } catch (e) {\n      const error = e as Error;\n      assert.strictEqual(error.message, 'Requested range is out of bounds.');\n    }\n  });\n\n  it('can pull updated data on memory range request', async () => {\n    const array = new Uint8Array([2, 4, 6, 2, 4]);\n    const wrapper = createWrapper(array);\n    const valuesBefore =\n        await LinearMemoryInspectorController.LinearMemoryInspectorController.getMemoryRange(wrapper, 0, array.length);\n\n    assert.strictEqual(valuesBefore.length, array.length);\n    for (let i = 0; i < array.length; ++i) {\n      assert.strictEqual(valuesBefore[i], array[i]);\n    }\n\n    const changedIndex = 0;\n    const changedValue = 10;\n    array[changedIndex] = changedValue;\n    const valuesAfter =\n        await LinearMemoryInspectorController.LinearMemoryInspectorController.getMemoryRange(wrapper, 0, array.length);\n\n    assert.strictEqual(valuesAfter.length, valuesBefore.length);\n    for (let i = 0; i < valuesBefore.length; ++i) {\n      if (i === changedIndex) {\n        assert.strictEqual(valuesAfter[i], changedValue);\n      } else {\n        assert.strictEqual(valuesAfter[i], valuesBefore[i]);\n      }\n    }\n  });\n\n  it('triggers saving and loading of settings on settings changed event', () => {\n    const instance = LinearMemoryInspectorController.LinearMemoryInspectorController.instance();\n\n    const valueTypes =\n        new Set([ValueInterpreterDisplayUtils.ValueType.Int16, ValueInterpreterDisplayUtils.ValueType.Float32]);\n    const valueTypeModes = new Map(\n        [[ValueInterpreterDisplayUtils.ValueType.Int16, ValueInterpreterDisplayUtils.ValueTypeMode.Hexadecimal]]);\n    const settings = {\n      valueTypes,\n      modes: valueTypeModes,\n      endianness: ValueInterpreterDisplayUtils.Endianness.Little,\n    };\n    const defaultSettings = instance.loadSettings();\n    instance.saveSettings(settings);\n\n    assert.notDeepEqual(defaultSettings, settings);\n\n    const actualSettings = instance.loadSettings();\n    assert.deepEqual(actualSettings, settings);\n  });\n\n  it('returns undefined when error happens in evaluateExpression', async () => {\n    const errorText = 'This is a test error';\n    const callFrame = {\n      evaluate: ({}) => {\n        return new Promise(resolve => {\n          resolve({error: errorText} as SDK.RuntimeModel.EvaluationResult);\n        });\n      },\n    } as SDK.DebuggerModel.CallFrame;\n    const stub = sinon.stub(console, 'error');\n    const instance = LinearMemoryInspectorController.LinearMemoryInspectorController.instance();\n    const expressionName = 'myCar';\n    const result = await instance.evaluateExpression(callFrame, expressionName);\n    assert.strictEqual(result, undefined);\n    assert.isTrue(stub.calledOnceWithExactly(\n        `Tried to evaluate the expression '${expressionName}' but got an error: ${errorText}`));\n  });\n\n  it('returns undefined when exceptionDetails is set on the result of evaluateExpression', async () => {\n    const exceptionText = 'This is a test exception\\'s detail text';\n    const callFrame = {\n      evaluate: ({}) => {\n        return new Promise(resolve => {\n          resolve({\n            object: {type: 'object'} as SDK.RemoteObject.RemoteObject,\n            exceptionDetails: {text: exceptionText},\n          } as SDK.RuntimeModel.EvaluationResult);\n        });\n      },\n    } as SDK.DebuggerModel.CallFrame;\n    const stub = sinon.stub(console, 'error');\n    const instance = LinearMemoryInspectorController.LinearMemoryInspectorController.instance();\n    const expressionName = 'myCar.manufacturer';\n    const result = await instance.evaluateExpression(callFrame, expressionName);\n    assert.strictEqual(result, undefined);\n    assert.isTrue(stub.calledOnceWithExactly(\n        `Tried to evaluate the expression '${expressionName}' but got an exception: ${exceptionText}`));\n  });\n\n  it('returns RemoteObject when no exception happens in evaluateExpression', async () => {\n    const expectedObj = {type: 'object'} as SDK.RemoteObject.RemoteObject;\n    const callFrame = {\n      evaluate: ({}) => {\n        return new Promise(resolve => {\n          resolve({\n            object: expectedObj,\n          } as SDK.RuntimeModel.EvaluationResult);\n        });\n      },\n    } as SDK.DebuggerModel.CallFrame;\n    const instance = LinearMemoryInspectorController.LinearMemoryInspectorController.instance();\n    const result = await instance.evaluateExpression(callFrame, 'myCar.manufacturer');\n    assert.deepEqual(result, expectedObj);\n  });\n\n  it('removes the provided highlightInfo when it is stored in the Controller', () => {\n    const highlightInfo = {startAddress: 0, size: 16, name: 'myNumbers', type: 'int[]'} as\n        LinearMemoryInspectorComponents.LinearMemoryViewerUtils.HighlightInfo;\n    const bufferId = 'someBufferId';\n    const instance = LinearMemoryInspectorController.LinearMemoryInspectorController.instance();\n\n    instance.setHighlightInfo(bufferId, highlightInfo);\n    assert.deepEqual(instance.getHighlightInfo(bufferId), highlightInfo);\n\n    instance.removeHighlight(bufferId, highlightInfo);\n    assert.deepEqual(instance.getHighlightInfo(bufferId), undefined);\n  });\n\n  it('does not change the stored highlight when the provided highlightInfo does not match', () => {\n    const highlightInfo = {startAddress: 0, size: 16, name: 'myNumbers', type: 'int[]'} as\n        LinearMemoryInspectorComponents.LinearMemoryViewerUtils.HighlightInfo;\n    const differentHighlightInfo = {startAddress: 20, size: 50, name: 'myBytes', type: 'bool[]'} as\n        LinearMemoryInspectorComponents.LinearMemoryViewerUtils.HighlightInfo;\n    const bufferId = 'someBufferId';\n    const instance = LinearMemoryInspectorController.LinearMemoryInspectorController.instance();\n\n    instance.setHighlightInfo(bufferId, highlightInfo);\n    assert.deepEqual(instance.getHighlightInfo(bufferId), highlightInfo);\n\n    instance.removeHighlight(bufferId, differentHighlightInfo);\n    assert.deepEqual(instance.getHighlightInfo(bufferId), highlightInfo);\n  });\n});\n\ndescribe('RemoteArrayBufferWrapper', () => {\n  it('correctly wraps the remote object', async () => {\n    const array = new Uint8Array([2, 4, 6, 2, 4]);\n    const wrapper = createWrapper(array);\n\n    assert.strictEqual(wrapper.length(), array.length);\n\n    const extractedArray = await wrapper.getRange(0, 3);\n    assert.lengthOf(extractedArray, 3);\n\n    for (let i = 0; i < 3; ++i) {\n      assert.deepEqual(array[i], extractedArray[i]);\n    }\n  });\n});\n"]}