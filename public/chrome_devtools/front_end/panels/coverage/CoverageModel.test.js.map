{"version":3,"file":"CoverageModel.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/coverage/CoverageModel.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as TextUtils from '../../models/text_utils/text_utils.js';\n\nimport * as Coverage from './coverage.js';\n\ndescribe('CoverageModel', () => {\n  describe('CoverageInfo', () => {\n    describe('#rangesForExport', () => {\n      it('omits ranges with count of zero', () => {\n        const segments =\n            [{end: 10, count: 0, stamp: 100}, {end: 20, count: 2, stamp: 100}, {end: 30, count: 0, stamp: 100}];\n        const info = new Coverage.CoverageModel.CoverageInfo(\n            null as unknown as TextUtils.ContentProvider.ContentProvider, 100, 10, 20,\n            Coverage.CoverageModel.CoverageType.JavaScript, {} as unknown as Coverage.CoverageModel.URLCoverageInfo);\n        info.mergeCoverage(segments);\n        const ranges = info.rangesForExport();\n        assert.deepEqual(ranges, [{start: 10, end: 20}]);\n      });\n\n      it('merges consecutive ranges with different non-zero counts', () => {\n        const segments =\n            [{end: 10, count: 0, stamp: 100}, {end: 20, count: 2, stamp: 100}, {end: 30, count: 1, stamp: 100}];\n        const info = new Coverage.CoverageModel.CoverageInfo(\n            null as unknown as TextUtils.ContentProvider.ContentProvider, 100, 10, 20,\n            Coverage.CoverageModel.CoverageType.JavaScript, {} as unknown as Coverage.CoverageModel.URLCoverageInfo);\n        info.mergeCoverage(segments);\n        const ranges = info.rangesForExport();\n        assert.deepEqual(ranges, [{start: 10, end: 30}]);\n      });\n\n      it('does not merge a range with a consecutive range with count zero', () => {\n        const segments = [{end: 10, count: 1, stamp: 100}, {end: 30, count: 0, stamp: 100}];\n        const info = new Coverage.CoverageModel.CoverageInfo(\n            null as unknown as TextUtils.ContentProvider.ContentProvider, 100, 10, 20,\n            Coverage.CoverageModel.CoverageType.JavaScript, {} as unknown as Coverage.CoverageModel.URLCoverageInfo);\n        info.mergeCoverage(segments);\n        const ranges = info.rangesForExport();\n        assert.deepEqual(ranges, [{start: 0, end: 10}]);\n      });\n    });\n  });\n\n  describe('CoverageModel', () => {\n    describe('mergeSegments', () => {\n      const checkMerge =\n          (a: Coverage.CoverageModel.CoverageSegment[], b: Coverage.CoverageModel.CoverageSegment[],\n           expectedResult: Coverage.CoverageModel.CoverageSegment[]) => {\n            const mergedAB = Coverage.CoverageModel.mergeSegments(a, b);\n            assert.deepEqual(mergedAB, expectedResult);\n            const mergedBA = Coverage.CoverageModel.mergeSegments(b, a);\n            assert.deepEqual(mergedBA, expectedResult);\n          };\n\n      it('merges coverage segments with the same timestamp correctly', () => {\n        checkMerge([], [], []);\n        checkMerge([{end: 10, count: 1, stamp: 100}], [], [{end: 10, count: 1, stamp: 100}]);\n        checkMerge(\n            [{end: 10, count: 1, stamp: 100}], [{end: 10, count: 1, stamp: 100}], [{end: 10, count: 2, stamp: 100}]);\n        checkMerge(\n            [{end: 10, count: 1, stamp: 100}], [{end: 20, count: 1, stamp: 100}],\n            [{end: 10, count: 2, stamp: 100}, {end: 20, count: 1, stamp: 100}]);\n        checkMerge(\n            [{end: 10, count: 1, stamp: 100}, {end: 20, count: 1, stamp: 100}], [],\n            [{end: 10, count: 1, stamp: 100}, {end: 20, count: 1, stamp: 100}]);\n        checkMerge(\n            [{end: 30, count: 1, stamp: 100}], [{end: 10, count: 0, stamp: 100}, {end: 20, count: 2, stamp: 100}],\n            [{end: 10, count: 1, stamp: 100}, {end: 20, count: 3, stamp: 100}, {end: 30, count: 1, stamp: 100}]);\n        checkMerge(\n            [{end: 30, count: 0, stamp: 100}], [{end: 10, count: 0, stamp: 100}, {end: 20, count: 2, stamp: 100}],\n            [{end: 10, count: 0, stamp: 100}, {end: 20, count: 2, stamp: 100}, {end: 30, count: 0, stamp: 100}]);\n      });\n\n      it('merges coverage segments with the different timestamp correctly', () => {\n        checkMerge(\n            [{end: 10, count: 1, stamp: 100}], [{end: 10, count: 1, stamp: 200}], [{end: 10, count: 2, stamp: 100}]);\n        checkMerge(\n            [{end: 10, count: 1, stamp: 100}], [{end: 20, count: 1, stamp: 200}],\n            [{end: 10, count: 2, stamp: 100}, {end: 20, count: 1, stamp: 200}]);\n        checkMerge(\n            [{end: 10, count: 1, stamp: 100}, {end: 20, count: 1, stamp: 200}], [],\n            [{end: 10, count: 1, stamp: 100}, {end: 20, count: 1, stamp: 200}]);\n        checkMerge(\n            [{end: 30, count: 1, stamp: 100}], [{end: 10, count: 0, stamp: 100}, {end: 20, count: 2, stamp: 200}],\n            [{end: 10, count: 1, stamp: 100}, {end: 20, count: 3, stamp: 100}, {end: 30, count: 1, stamp: 100}]);\n      });\n    });\n  });\n});\n"]}