{"version":3,"file":"CoverageDecorationManager.js","sourceRoot":"","sources":["../../../../../../front_end/panels/coverage/CoverageDecorationManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2017 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Common from '../../core/common/common.js';\nimport * as Platform from '../../core/platform/platform.js';\nimport type * as Bindings from '../../models/bindings/bindings.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\n\nimport {type CoverageInfo, type CoverageModel} from './CoverageModel.js';\n\nexport const decoratorType = 'coverage';\n\nexport class CoverageDecorationManager {\n  private coverageModel: CoverageModel;\n  private readonly textByProvider: Map<TextUtils.ContentProvider.ContentProvider, TextUtils.Text.Text|null>;\n  private readonly uiSourceCodeByContentProvider:\n      Platform.MapUtilities.Multimap<TextUtils.ContentProvider.ContentProvider, Workspace.UISourceCode.UISourceCode>;\n\n  readonly #workspace: Workspace.Workspace.WorkspaceImpl;\n  readonly #debuggerBinding: Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding;\n  readonly #cssBinding: Bindings.CSSWorkspaceBinding.CSSWorkspaceBinding;\n\n  constructor(\n      coverageModel: CoverageModel, workspace: Workspace.Workspace.WorkspaceImpl,\n      debuggerBinding: Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding,\n      cssBinding: Bindings.CSSWorkspaceBinding.CSSWorkspaceBinding) {\n    this.coverageModel = coverageModel;\n    this.#workspace = workspace;\n    this.#debuggerBinding = debuggerBinding;\n    this.#cssBinding = cssBinding;\n\n    this.textByProvider = new Map();\n    this.uiSourceCodeByContentProvider = new Platform.MapUtilities.Multimap();\n\n    for (const uiSourceCode of this.#workspace.uiSourceCodes()) {\n      uiSourceCode.setDecorationData(decoratorType, this);\n    }\n    this.#workspace.addEventListener(Workspace.Workspace.Events.UISourceCodeAdded, this.onUISourceCodeAdded, this);\n  }\n\n  reset(): void {\n    for (const uiSourceCode of this.#workspace.uiSourceCodes()) {\n      uiSourceCode.setDecorationData(decoratorType, undefined);\n    }\n  }\n\n  dispose(): void {\n    this.reset();\n    this.#workspace.removeEventListener(Workspace.Workspace.Events.UISourceCodeAdded, this.onUISourceCodeAdded, this);\n  }\n\n  update(updatedEntries: CoverageInfo[]): void {\n    for (const entry of updatedEntries) {\n      for (const uiSourceCode of this.uiSourceCodeByContentProvider.get(entry.getContentProvider())) {\n        uiSourceCode.setDecorationData(decoratorType, this);\n      }\n    }\n  }\n\n  /**\n   * Returns the coverage per line of the provided uiSourceCode. The resulting array has the same length\n   * as the provided `lines` array.\n   *\n   * @param uiSourceCode The UISourceCode for which to get the coverage info.\n   * @param lineMappings The caller might have applied formatting to the UISourceCode. Each entry\n   *                     in this array represents one line and the range specifies where it's found in\n   *                     the original content.\n   */\n  async usageByLine(uiSourceCode: Workspace.UISourceCode.UISourceCode, lineMappings: TextUtils.TextRange.TextRange[]):\n      Promise<(boolean | undefined)[]> {\n    const result = [];\n    await this.updateTexts(uiSourceCode, lineMappings);\n\n    for (const {startLine, startColumn, endLine, endColumn} of lineMappings) {\n      const startLocationsPromise = this.rawLocationsForSourceLocation(uiSourceCode, startLine, startColumn);\n      const endLocationsPromise = this.rawLocationsForSourceLocation(uiSourceCode, endLine, endColumn);\n      const [startLocations, endLocations] = await Promise.all([startLocationsPromise, endLocationsPromise]);\n      let used: (boolean|undefined)|undefined = undefined;\n      for (let startIndex = 0, endIndex = 0; startIndex < startLocations.length; ++startIndex) {\n        const start = startLocations[startIndex];\n        while (endIndex < endLocations.length &&\n               CoverageDecorationManager.compareLocations(start, endLocations[endIndex]) >= 0) {\n          ++endIndex;\n        }\n        if (endIndex >= endLocations.length || endLocations[endIndex].id !== start.id) {\n          continue;\n        }\n        const end = endLocations[endIndex++];\n        const text = this.textByProvider.get(end.contentProvider);\n        if (!text) {\n          continue;\n        }\n        const textValue = text.value();\n        let startOffset = Math.min(text.offsetFromPosition(start.line, start.column), textValue.length - 1);\n        let endOffset = Math.min(text.offsetFromPosition(end.line, end.column), textValue.length - 1);\n        while (startOffset <= endOffset && /\\s/.test(textValue[startOffset])) {\n          ++startOffset;\n        }\n        while (startOffset <= endOffset && /\\s/.test(textValue[endOffset])) {\n          --endOffset;\n        }\n        if (startOffset <= endOffset) {\n          used = this.coverageModel.usageForRange(end.contentProvider, startOffset, endOffset);\n        }\n        if (used) {\n          break;\n        }\n      }\n      result.push(used);\n    }\n    return result;\n  }\n\n  private async updateTexts(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode, lineMappings: TextUtils.TextRange.TextRange[]): Promise<void> {\n    const promises = [];\n    for (const range of lineMappings) {\n      for (const entry of await this.rawLocationsForSourceLocation(uiSourceCode, range.startLine, 0)) {\n        if (this.textByProvider.has(entry.contentProvider)) {\n          continue;\n        }\n        this.textByProvider.set(entry.contentProvider, null);\n        this.uiSourceCodeByContentProvider.set(entry.contentProvider, uiSourceCode);\n        promises.push(this.updateTextForProvider(entry.contentProvider));\n      }\n    }\n    await Promise.all(promises);\n  }\n\n  private async updateTextForProvider(contentProvider: TextUtils.ContentProvider.ContentProvider): Promise<void> {\n    const content = TextUtils.ContentData.ContentData.textOr(await contentProvider.requestContentData(), '');\n    this.textByProvider.set(contentProvider, new TextUtils.Text.Text(content));\n  }\n\n  private async rawLocationsForSourceLocation(\n      uiSourceCode: Workspace.UISourceCode.UISourceCode, line: number, column: number): Promise<RawLocation[]> {\n    const result: RawLocation[] = [];\n    const contentType = uiSourceCode.contentType();\n    if (contentType.hasScripts()) {\n      let locations = await this.#debuggerBinding.uiLocationToRawLocations(uiSourceCode, line, column);\n      locations = locations.filter(location => Boolean(location.script()));\n      for (const location of locations) {\n        const script = location.script();\n        if (!script) {\n          continue;\n        }\n        if (script.isInlineScript() && contentType.isDocument()) {\n          location.lineNumber -= script.lineOffset;\n          if (!location.lineNumber) {\n            location.columnNumber -= script.columnOffset;\n          }\n        }\n        result.push({\n          id: `js:${location.scriptId}`,\n          contentProvider: script,\n          line: location.lineNumber,\n          column: location.columnNumber,\n        });\n      }\n    }\n    if (contentType.isStyleSheet() || contentType.isDocument()) {\n      const rawStyleLocations =\n          this.#cssBinding.uiLocationToRawLocations(new Workspace.UISourceCode.UILocation(uiSourceCode, line, column));\n      for (const location of rawStyleLocations) {\n        const header = location.header();\n        if (!header) {\n          continue;\n        }\n        if (header.isInline && contentType.isDocument()) {\n          location.lineNumber -= header.startLine;\n          if (!location.lineNumber) {\n            location.columnNumber -= header.startColumn;\n          }\n        }\n        result.push({\n          id: `css:${location.styleSheetId}`,\n          contentProvider: header,\n          line: location.lineNumber,\n          column: location.columnNumber,\n        });\n      }\n    }\n    return result.sort(CoverageDecorationManager.compareLocations);\n  }\n\n  private static compareLocations(a: RawLocation, b: RawLocation): number {\n    return a.id.localeCompare(b.id) || a.line - b.line || a.column - b.column;\n  }\n\n  private onUISourceCodeAdded(event: Common.EventTarget.EventTargetEvent<Workspace.UISourceCode.UISourceCode>): void {\n    const uiSourceCode = event.data;\n    uiSourceCode.setDecorationData(decoratorType, this);\n  }\n}\nexport interface RawLocation {\n  id: string;\n  contentProvider: TextUtils.ContentProvider.ContentProvider;\n  line: number;\n  column: number;\n}\n"]}