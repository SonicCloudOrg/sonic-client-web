{"version":3,"file":"CoverageDecorationManager.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/coverage/CoverageDecorationManager.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as Platform from '../../core/platform/platform.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport * as Bindings from '../../models/bindings/bindings.js';\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport * as Workspace from '../../models/workspace/workspace.js';\nimport {createTarget} from '../../testing/EnvironmentHelpers.js';\nimport {describeWithMockConnection} from '../../testing/MockConnection.js';\nimport {MockProtocolBackend} from '../../testing/MockScopeChain.js';\nimport {getInitializedResourceTreeModel} from '../../testing/ResourceTreeHelpers.js';\nimport {createContentProviderUISourceCode} from '../../testing/UISourceCodeHelpers.js';\n\nimport * as Coverage from './coverage.js';\n\nconst {CoverageDecorationManager} = Coverage.CoverageDecorationManager;\n\n/** Test helper that returns the \"identity\" line ranges for any given string */\nfunction lineRangesForContent(content: string): TextUtils.TextRange.TextRange[] {\n  const ranges: TextUtils.TextRange.TextRange[] = [];\n  const text = new TextUtils.Text.Text(content);\n  for (let i = 0; i < text.lineCount(); ++i) {\n    const line = text.lineAt(i);\n    ranges.push(new TextUtils.TextRange.TextRange(i, 0, i, line.length));\n  }\n  return ranges;\n}\n\ndescribeWithMockConnection('CoverageDeocrationManager', () => {\n  let target: SDK.Target.Target;\n  let backend: MockProtocolBackend;\n  let debuggerBinding: Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding;\n  let workspace: Workspace.Workspace.WorkspaceImpl;\n  let cssBinding: Bindings.CSSWorkspaceBinding.CSSWorkspaceBinding;\n  let coverageModel: sinon.SinonStubbedInstance<Coverage.CoverageModel.CoverageModel>;\n\n  beforeEach(async () => {\n    backend = new MockProtocolBackend();\n    target = createTarget();\n    workspace = Workspace.Workspace.WorkspaceImpl.instance({forceNew: true});\n    const targetManager = SDK.TargetManager.TargetManager.instance();\n    const resourceMapping = new Bindings.ResourceMapping.ResourceMapping(targetManager, workspace);\n    debuggerBinding = Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance({\n      forceNew: true,\n      resourceMapping,\n      targetManager,\n    });\n    Bindings.IgnoreListManager.IgnoreListManager.instance({forceNew: true, debuggerWorkspaceBinding: debuggerBinding});\n    cssBinding =\n        Bindings.CSSWorkspaceBinding.CSSWorkspaceBinding.instance({forceNew: true, resourceMapping, targetManager});\n    SDK.TargetManager.TargetManager.instance().setScopeTarget(target);\n\n    // Since we wanna mock 'usageForRange' we stub the whole instance. Otherwise we'd use half\n    // a stub and half the real thing.\n    coverageModel = sinon.createStubInstance(Coverage.CoverageModel.CoverageModel);\n\n    // Wait for the resource tree model to load; otherwise, our uiSourceCodes could be asynchronously\n    // invalidated during the test.\n    await getInitializedResourceTreeModel(target);\n  });\n\n  const URL = 'http://example.com/index.js' as Platform.DevToolsPath.UrlString;\n\n  describe('usageByLine (raw)', () => {\n    it('marks lines as \"unknown\" coverge status if no coverage info is available', async () => {\n      await backend.addScript(target, {url: URL, content: 'function foo(a,b){return a+b;}'}, null);\n      const uiSourceCode = workspace.uiSourceCodeForURL(URL);\n      assert.exists(uiSourceCode);\n      await uiSourceCode.requestContentData();\n      const manager = new CoverageDecorationManager(coverageModel, workspace, debuggerBinding, cssBinding);\n\n      const usage = await manager.usageByLine(uiSourceCode, lineRangesForContent(uiSourceCode.content()));\n\n      assert.deepEqual(usage, [undefined]);\n    });\n\n    it('marks lines as covered if coverage info says so', async () => {\n      await backend.addScript(target, {url: URL, content: 'function foo(a,b){return a+b;}'}, null);\n      const uiSourceCode = workspace.uiSourceCodeForURL(URL);\n      assert.exists(uiSourceCode);\n      await uiSourceCode.requestContentData();\n      coverageModel.usageForRange.returns(true);\n      const manager = new CoverageDecorationManager(coverageModel, workspace, debuggerBinding, cssBinding);\n\n      const usage = await manager.usageByLine(uiSourceCode, lineRangesForContent(uiSourceCode.content()));\n      assert.deepEqual(usage, [true]);\n    });\n  });\n\n  describe('usageByLine (formatted)', () => {\n    it('marks lines as covered if coverage info says so', async () => {\n      const scriptContent =\n          'function mulWithOffset(n,t,e){const f=n*t;const u=f;if(e!==undefined){const n=u+e;return n}return u}';\n      const script = await backend.addScript(target, {url: URL, content: scriptContent}, null);\n      const uiSourceCode = workspace.uiSourceCodeForURL(URL);\n      assert.exists(uiSourceCode);\n      await uiSourceCode.requestContentData();\n      coverageModel.usageForRange.callsFake((contentProvider, startOffset, endOffset) => {\n        assert.strictEqual(contentProvider, script);\n        // Everything is covered except the body of the `if`.\n        return endOffset <= 70 || startOffset > 90;\n      });\n      const manager = new CoverageDecorationManager(coverageModel, workspace, debuggerBinding, cssBinding);\n\n      // clang-format off\n      // Simulate editor pretty-printing `script`.\n      const lineRanges = [\n        new TextUtils.TextRange.TextRange(0, 0, 0, 30),    // function mulWithOffset(n,t,e){\n        new TextUtils.TextRange.TextRange(0, 30, 0, 42),   //   const f=n*t;\n        new TextUtils.TextRange.TextRange(0, 42, 0, 52),   //   const u=f;\n        new TextUtils.TextRange.TextRange(0, 52, 0, 70),   //   if(e!==undefined){\n        new TextUtils.TextRange.TextRange(0, 70, 0, 82),   //     const n=u+e;\n        new TextUtils.TextRange.TextRange(0, 82, 0, 90),   //     return n\n        new TextUtils.TextRange.TextRange(0, 90, 0, 91),   //   }\n        new TextUtils.TextRange.TextRange(0, 91, 0, 99),   //   return u\n        new TextUtils.TextRange.TextRange(0, 99, 0, 100),  // }\n      ];\n      // clang-format on\n      const usage = await manager.usageByLine(uiSourceCode, lineRanges);\n\n      assert.deepEqual(usage, [true, true, true, true, false, false, false, true, true]);\n    });\n  });\n\n  describe('usageByLine (sourcemap)', () => {\n    let script: SDK.Script.Script;\n\n    beforeEach(async () => {\n      const originalContent = `\nfunction mulWithOffset(param1, param2, offset) {\n  const intermediate = param1 * param2;\n  const result = intermediate;\n  if (offset !== undefined) {\n    const intermediate = result + offset;\n    return intermediate;\n  }\n  return result;\n}\n`;\n      const sourceMapUrl = 'file:///tmp/example.js.min.map';\n      // This was minified with 'terser -m -o example.min.js --source-map \"includeSources;url=example.min.js.map\"' v5.7.0.\n      const sourceMapContent = JSON.stringify({\n        version: 3,\n        names: ['mulWithOffset', 'param1', 'param2', 'offset', 'intermediate', 'result', 'undefined'],\n        sources: ['example.js'],\n        sourcesContent: [originalContent],\n        mappings:\n            'AACA,SAASA,cAAcC,EAAQC,EAAQC,GACrC,MAAMC,EAAeH,EAASC,EAC9B,MAAMG,EAASD,EACf,GAAID,IAAWG,UAAW,CACxB,MAAMF,EAAeC,EAASF,EAC9B,OAAOC,CACT,CACA,OAAOC,CACT',\n      });\n\n      const scriptContent =\n          'function mulWithOffset(n,t,e){const f=n*t;const u=f;if(e!==undefined){const n=u+e;return n}return u}';\n      script = await backend.addScript(\n          target, {url: 'file:///tmp/bundle.js', content: scriptContent},\n          {url: sourceMapUrl, content: sourceMapContent});\n    });\n\n    it('marks lines as covered if coverage info says so', async () => {\n      const uiSourceCode = workspace.uiSourceCodeForURL('file:///tmp/example.js' as Platform.DevToolsPath.UrlString);\n      assert.exists(uiSourceCode);\n      await uiSourceCode.requestContentData();\n      coverageModel.usageForRange.callsFake((contentProvider, startOffset, endOffset) => {\n        assert.strictEqual(contentProvider, script);\n        // Everything is covered except the body of the `if`.\n        return endOffset < 70 || startOffset > 90;\n      });\n      const manager = new CoverageDecorationManager(coverageModel, workspace, debuggerBinding, cssBinding);\n\n      const usage = await manager.usageByLine(uiSourceCode, lineRangesForContent(uiSourceCode.content()));\n      assert.deepEqual(usage, [undefined, true, true, true, true, false, false, undefined, true, undefined, undefined]);\n    });\n  });\n\n  it('sets the \"decorationData\" on all existing UISourceCodes', () => {\n    const {uiSourceCode} = createContentProviderUISourceCode({url: URL, mimeType: 'text/javascript'});\n    const manager = new CoverageDecorationManager(coverageModel, workspace, debuggerBinding, cssBinding);\n\n    assert.strictEqual(uiSourceCode.getDecorationData(Coverage.CoverageDecorationManager.decoratorType), manager);\n  });\n\n  it('sets the \"decorationData\" on newly added UISourceCodes (after the manager already exists)', () => {\n    const manager = new CoverageDecorationManager(coverageModel, workspace, debuggerBinding, cssBinding);\n    const {uiSourceCode} = createContentProviderUISourceCode({url: URL, mimeType: 'text/javascript'});\n\n    assert.strictEqual(uiSourceCode.getDecorationData(Coverage.CoverageDecorationManager.decoratorType), manager);\n  });\n\n  it('does not update the \"decorationData\" on newly added UISourceCodes after being disposed', () => {\n    const manager = new CoverageDecorationManager(coverageModel, workspace, debuggerBinding, cssBinding);\n    manager.dispose();\n\n    const {uiSourceCode} = createContentProviderUISourceCode({url: URL, mimeType: 'text/javascript'});\n\n    assert.isUndefined(uiSourceCode.getDecorationData(Coverage.CoverageDecorationManager.decoratorType));\n  });\n\n  describe('reset', () => {\n    it('resets the \"decorationData\" on all existing UISourceCodes to \"undefined\"', () => {\n      const {uiSourceCode} = createContentProviderUISourceCode({url: URL, mimeType: 'text/javascript'});\n      const manager = new CoverageDecorationManager(coverageModel, workspace, debuggerBinding, cssBinding);\n\n      manager.reset();\n\n      assert.isUndefined(uiSourceCode.getDecorationData(Coverage.CoverageDecorationManager.decoratorType));\n    });\n  });\n});\n"]}