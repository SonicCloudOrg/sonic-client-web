{"version":3,"file":"SecurityModel.test.js","sourceRoot":"","sources":["../../../../../../front_end/panels/security/SecurityModel.test.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAI7B,OAAO,KAAK,QAAQ,MAAM,eAAe,CAAC;AAE1C,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;IAC7B,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;QACpC,MAAM,EAAC,oBAAoB,EAAC,GAAG,QAAQ,CAAC,aAAa,CAAC;QACtD,MAAM,EAAC,aAAa,EAAC,GAAG,QAAQ,CAAC,QAAQ,CAAC;QAE1C,EAAE,CAAC,4BAA4B,EAAE,GAAG,EAAE;YACpC,MAAM,CAAC,WAAW,CAAC,oBAAoB,8EAA8C,EAAE,CAAC,CAAC,CAAC;YAC1F,MAAM,CAAC,WAAW,CAAC,oBAAoB,8EAA8C,EAAE,CAAC,CAAC,CAAC;YAC1F,MAAM,CAAC,WAAW,CAAC,oBAAoB,kFAAgD,EAAE,CAAC,CAAC,CAAC;YAC5F,MAAM,CAAC,WAAW,CAAC,oBAAoB,0EAA4C,EAAE,CAAC,CAAC,CAAC;YACxF,MAAM,CAAC,WAAW,CAAC,oBAAoB,kEAAwC,EAAE,CAAC,CAAC,CAAC;YACpF,MAAM,CAAC,WAAW,CAAC,oBAAoB,4GAA4D,EAAE,CAAC,CAAC,CAAC;QAC1G,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;YAC3B,MAAM,CAAC,OAAO,CAAC,oBAAoB,wEAA2C,EAAE,CAAC,CAAC,CAAC;YACnF,MAAM,CAAC,OAAO,CAAC,oBAAoB,wEAA2C,EAAE,CAAC,CAAC,CAAC;YACnF,MAAM,CAAC,OAAO,CAAC,oBAAoB,0EAA4C,EAAE,CAAC,CAAC,CAAC;YACpF,MAAM,CAAC,OAAO,CAAC,oBAAoB,sEAA0C,EAAE,CAAC,CAAC,CAAC;YAClF,MAAM,CAAC,OAAO,CAAC,oBAAoB,uFAAkD,EAAE,CAAC,CAAC,CAAC;QAC5F,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uBAAuB,EAAE,GAAG,EAAE;YAC/B,MAAM,CAAC,OAAO,CAAC,oBAAoB,8EAA8C,EAAE,CAAC,CAAC,CAAC;YACtF,MAAM,CAAC,OAAO,CAAC,oBAAoB,gFAA+C,EAAE,CAAC,CAAC,CAAC;YACvF,MAAM,CAAC,OAAO,CAAC,oBAAoB,4EAA6C,EAAE,CAAC,CAAC,CAAC;YACrF,MAAM,CAAC,OAAO,CAAC,oBAAoB,wEAA2C,EAAE,CAAC,CAAC,CAAC;YACnF,MAAM,CAAC,OAAO,CAAC,oBAAoB,6FAAqD,EAAE,CAAC,CAAC,CAAC;QAC/F,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;YACxD,MAAM,CAAC,OAAO,CAAC,oBAAoB,+FAAsD,EAAE,CAAC,CAAC,CAAC;YAC9F,MAAM,CAAC,OAAO,CAAC,oBAAoB,gFAA+C,EAAE,CAAC,CAAC,CAAC;YACvF,MAAM,CAAC,OAAO,CAAC,oBAAoB,4EAA6C,EAAE,CAAC,CAAC,CAAC;QACvF,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Protocol from '../../generated/protocol.js';\n\nimport * as Security from './security.js';\n\ndescribe('SecurityModel', () => {\n  describe('securityStateCompare', () => {\n    const {securityStateCompare} = Security.SecurityModel;\n    const {SecurityState} = Protocol.Security;\n\n    it('identifies security states', () => {\n      assert.strictEqual(securityStateCompare(SecurityState.Unknown, SecurityState.Unknown), 0);\n      assert.strictEqual(securityStateCompare(SecurityState.Neutral, SecurityState.Neutral), 0);\n      assert.strictEqual(securityStateCompare(SecurityState.Insecure, SecurityState.Insecure), 0);\n      assert.strictEqual(securityStateCompare(SecurityState.Secure, SecurityState.Secure), 0);\n      assert.strictEqual(securityStateCompare(SecurityState.Info, SecurityState.Info), 0);\n      assert.strictEqual(securityStateCompare(SecurityState.InsecureBroken, SecurityState.InsecureBroken), 0);\n    });\n\n    it('ranks Info lowest', () => {\n      assert.isBelow(securityStateCompare(SecurityState.Info, SecurityState.Unknown), 0);\n      assert.isBelow(securityStateCompare(SecurityState.Info, SecurityState.Neutral), 0);\n      assert.isBelow(securityStateCompare(SecurityState.Info, SecurityState.Insecure), 0);\n      assert.isBelow(securityStateCompare(SecurityState.Info, SecurityState.Secure), 0);\n      assert.isBelow(securityStateCompare(SecurityState.Info, SecurityState.InsecureBroken), 0);\n    });\n\n    it('ranks Unknown highest', () => {\n      assert.isAbove(securityStateCompare(SecurityState.Unknown, SecurityState.Neutral), 0);\n      assert.isAbove(securityStateCompare(SecurityState.Unknown, SecurityState.Insecure), 0);\n      assert.isAbove(securityStateCompare(SecurityState.Unknown, SecurityState.Secure), 0);\n      assert.isAbove(securityStateCompare(SecurityState.Unknown, SecurityState.Info), 0);\n      assert.isAbove(securityStateCompare(SecurityState.Unknown, SecurityState.InsecureBroken), 0);\n    });\n\n    it('orders correctly from InsecureBroken to Secure', () => {\n      assert.isBelow(securityStateCompare(SecurityState.InsecureBroken, SecurityState.Insecure), 0);\n      assert.isBelow(securityStateCompare(SecurityState.Insecure, SecurityState.Neutral), 0);\n      assert.isBelow(securityStateCompare(SecurityState.Neutral, SecurityState.Secure), 0);\n    });\n  });\n});\n"]}