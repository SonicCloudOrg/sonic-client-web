{"version":3,"file":"MockIssuesManager.js","sourceRoot":"","sources":["../../../../../front_end/testing/MockIssuesManager.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAE7B,OAAO,KAAK,MAAM,MAAM,0BAA0B,CAAC;AAEnD,OAAO,KAAK,aAAa,MAAM,4CAA4C,CAAC;AAE5E,OAAO,EAAC,eAAe,EAAC,MAAM,sBAAsB,CAAC;AAGrD,MAAM,OAAO,iBAAkB,SAAQ,MAAM,CAAC,aAAa,CAAC,aAAqD;IACvG,UAAU,CAA8B;IACxC,WAAW,GAAG,IAAI,GAAG,CAAwC;QACnE,gEAA4C,CAAC,CAAC;QAC9C,sEAA+C,CAAC,CAAC;QACjD,4DAA0C,CAAC,CAAC;KAC7C,CAAC,CAAC;IAEH,8EAA8E;IACtE,SAAS,GAAG,IAAI,eAAe,CAAC,EAAE,CAA2C,CAAC;IAEtF,YAAY,MAA2C;QACrD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACvC,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED,YAAY,CAAC,EAAU;QACrB,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;YACpC,IAAI,KAAK,CAAC,UAAU,EAAE,KAAK,EAAE,EAAE,CAAC;gBAC9B,OAAO,KAAK,CAAC;YACf,CAAC;QACH,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,cAAc,CAAC,IAAoC;QACjD,IAAI,IAAI,EAAE,CAAC;YACT,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzC,CAAC;QACD,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;IAC9E,CAAC;IAED,iBAAiB,CAAC,MAAkD;QAClE,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC;IAC5B,CAAC;IAED,8BAA8B;QAC5B,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;YAC5C,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;QACvC,CAAC;QACD,IAAI,CAAC,wBAAwB,kFAAuD,CAAC;IACvF,CAAC;IAED,QAAQ,CAAC,SAAoB;QAC3B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SAAsC,CAAC,CAAC;QAC7D,IAAI,CAAC,wBAAwB,mEACsB,EAAC,KAAK,EAAE,SAAS,EAAE,WAAW,EAAE,IAAI,CAAC,SAAS,EAAC,CAAC,CAAC;IACtG,CAAC;CACF","sourcesContent":["// Copyright 2021 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../core/common/common.js';\nimport type * as SDK from '../core/sdk/sdk.js';\nimport * as IssuesManager from '../models/issues_manager/issues_manager.js';\n\nimport {MockIssuesModel} from './MockIssuesModel.js';\nimport {type StubIssue} from './StubIssue.js';\n\nexport class MockIssuesManager extends Common.ObjectWrapper.ObjectWrapper<IssuesManager.IssuesManager.EventTypes> {\n  private mockIssues: IssuesManager.Issue.Issue[];\n  private issueCounts = new Map<IssuesManager.Issue.IssueKind, number>([\n    [IssuesManager.Issue.IssueKind.Improvement, 0],\n    [IssuesManager.Issue.IssueKind.BreakingChange, 1],\n    [IssuesManager.Issue.IssueKind.PageError, 2],\n  ]);\n\n  // An empty model to pass along for the IssuesManager.Events.IssueAdded event.\n  private mockModel = new MockIssuesModel([]) as unknown as SDK.IssuesModel.IssuesModel;\n\n  constructor(issues: Iterable<IssuesManager.Issue.Issue>) {\n    super();\n    this.mockIssues = Array.from(issues);\n  }\n\n  issues() {\n    return this.mockIssues;\n  }\n\n  getIssueById(id: string): IssuesManager.Issue.Issue|null {\n    for (const issue of this.mockIssues) {\n      if (issue.getIssueId() === id) {\n        return issue;\n      }\n    }\n    return null;\n  }\n\n  numberOfIssues(kind?: IssuesManager.Issue.IssueKind): number {\n    if (kind) {\n      return this.issueCounts.get(kind) ?? 0;\n    }\n    return Array.from(this.issueCounts.values()).reduce((sum, v) => sum + v, 0);\n  }\n\n  setNumberOfIssues(counts: Map<IssuesManager.Issue.IssueKind, number>): void {\n    this.issueCounts = counts;\n  }\n\n  incrementIssueCountsOfAllKinds() {\n    for (const [key, value] of this.issueCounts) {\n      this.issueCounts.set(key, value + 1);\n    }\n    this.dispatchEventToListeners(IssuesManager.IssuesManager.Events.IssuesCountUpdated);\n  }\n\n  addIssue(mockIssue: StubIssue) {\n    this.mockIssues.push(mockIssue as IssuesManager.Issue.Issue);\n    this.dispatchEventToListeners(\n        IssuesManager.IssuesManager.Events.IssueAdded, {issue: mockIssue, issuesModel: this.mockModel});\n  }\n}\n"]}