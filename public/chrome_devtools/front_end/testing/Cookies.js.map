{"version":3,"file":"Cookies.js","sourceRoot":"","sources":["../../../../../front_end/testing/Cookies.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAqB7B,MAAM,yBAAyB,GAAsB;IACnD,IAAI,EAAE,MAAM;IACZ,KAAK,EAAE,OAAO;IACd,QAAQ,EAAE,KAAK;IACf,QAAQ,EAAE,SAAS;IACnB,MAAM,EAAE,KAAK;IACb,OAAO,EAAE,IAAI;IACb,IAAI,EAAE,SAAS;IACf,MAAM,EAAE,SAAS;IACjB,OAAO,EAAE,IAAI;IACb,IAAI,EAAE,SAAS;IACf,QAAQ,uDAAwC;IAChD,YAAY,EAAE,IAAI;IAClB,kBAAkB,EAAE,KAAK;CAC1B,CAAC;AAEF,MAAM,WAAW,GAAG,IAAI,IAAI,CAAC,mCAAmC,CAAC,CAAC;AAElE,MAAM,UAAU,YAAY,CAAC,MAAyB,EAAE,iBAAoC;IAC1F,MAAM,WAAW,GAAG,EAAC,GAAG,yBAAyB,EAAE,GAAG,iBAAiB,EAAC,CAAC;IACzE,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,WAAW,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IAC5D,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,WAAW,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IAC/D,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,WAAW,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;IACxE,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,WAAW,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;IACxE,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IAClE,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,WAAW,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;IACrE,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,WAAW,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IAC5D,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IAClE,MAAM,IAAI,GAAG,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;IAC7C,IAAI,OAAO,WAAW,CAAC,OAAO,KAAK,QAAQ,EAAE,CAAC;QAC5C,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACvB,MAAM,CAAC,WAAW,CAAE,IAAa,CAAC,WAAW,EAAE,EAAE,WAAW,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;IACnF,CAAC;SAAM,IAAI,OAAO,WAAW,CAAC,OAAO,KAAK,QAAQ,EAAE,CAAC;QACnD,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACvB,MAAM,CAAC,WAAW,CAAE,IAAa,CAAC,OAAO,EAAE,EAAE,WAAW,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;IAC/E,CAAC;SAAM,CAAC;QACN,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE,WAAW,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;IAC3D,CAAC;IACD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,WAAW,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IAC5D,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,WAAW,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;IAExE,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,WAAW,EAAE,EAAE,OAAO,CAAC,WAAW,CAAC,YAAY,CAAC,EAAE,aAAa,CAAC,CAAC;IAC3F,IAAI,MAAM,CAAC,WAAW,EAAE,EAAE,CAAC;QACzB,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,oBAAoB,EAAE,EAAE,WAAW,CAAC,YAAY,EAAE,oBAAoB,EAAE,cAAc,CAAC,CAAC;QAClH,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,EAAE,WAAW,CAAC,YAAY,EAAE,YAAY,EAAE,cAAc,CAAC,CAAC;IACpG,CAAC;IACD,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,kBAAkB,EAAE,EAAE,WAAW,CAAC,kBAAkB,EAAE,oBAAoB,CAAC,CAAC;AACxG,CAAC","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as SDK from '../core/sdk/sdk.js';\nimport * as Protocol from '../generated/protocol.js';\n\nexport interface CookieExpectation {\n  name: string;\n  value: string;\n  httpOnly?: boolean;\n  sameSite?: Protocol.Network.CookieSameSite;\n  secure?: boolean;\n  session?: boolean;\n  path?: string;\n  domain?: string;\n  expires?: null|number|string;\n  size?: number;\n  priority?: Protocol.Network.CookiePriority;\n  partitionKey?: Protocol.Network.CookiePartitionKey|null;\n  partitionKeyOpaque?: boolean;\n}\n\nconst cookieExpectationDefaults: CookieExpectation = {\n  name: 'name',\n  value: 'value',\n  httpOnly: false,\n  sameSite: undefined,\n  secure: false,\n  session: true,\n  path: undefined,\n  domain: undefined,\n  expires: null,\n  size: undefined,\n  priority: Protocol.Network.CookiePriority.Medium,\n  partitionKey: null,\n  partitionKeyOpaque: false,\n};\n\nconst requestDate = new Date('Mon Oct 18 2010 17:00:00 GMT+0000');\n\nexport function expectCookie(cookie: SDK.Cookie.Cookie, cookieExpectation: CookieExpectation) {\n  const expectation = {...cookieExpectationDefaults, ...cookieExpectation};\n  assert.strictEqual(cookie.name(), expectation.name, 'name');\n  assert.strictEqual(cookie.value(), expectation.value, 'value');\n  assert.strictEqual(cookie.httpOnly(), expectation.httpOnly, 'httpOnly');\n  assert.strictEqual(cookie.sameSite(), expectation.sameSite, 'sameSite');\n  assert.strictEqual(cookie.secure(), expectation.secure, 'secure');\n  assert.strictEqual(cookie.session(), expectation.session, 'session');\n  assert.strictEqual(cookie.path(), expectation.path, 'path');\n  assert.strictEqual(cookie.domain(), expectation.domain, 'domain');\n  const date = cookie.expiresDate(requestDate);\n  if (typeof expectation.expires === 'string') {\n    assert.isNotNull(date);\n    assert.strictEqual((date as Date).toISOString(), expectation.expires, 'expires');\n  } else if (typeof expectation.expires === 'number') {\n    assert.isNotNull(date);\n    assert.strictEqual((date as Date).getTime(), expectation.expires, 'expires');\n  } else {\n    assert.strictEqual(date, expectation.expires, 'expires');\n  }\n  assert.strictEqual(cookie.size(), expectation.size, 'size');\n  assert.strictEqual(cookie.priority(), expectation.priority, 'priority');\n\n  assert.strictEqual(cookie.partitioned(), Boolean(expectation.partitionKey), 'partitioned');\n  if (cookie.partitioned()) {\n    assert.strictEqual(cookie.hasCrossSiteAncestor(), expectation.partitionKey?.hasCrossSiteAncestor, 'partitionKey');\n    assert.strictEqual(cookie.topLevelSite(), expectation.partitionKey?.topLevelSite, 'topLevelSite');\n  }\n  assert.strictEqual(cookie.partitionKeyOpaque(), expectation.partitionKeyOpaque, 'partitionKeyOpaque');\n}\n"]}