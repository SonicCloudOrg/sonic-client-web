{"version":3,"file":"DOMHelpers.js","sourceRoot":"","sources":["../../../../../front_end/testing/DOMHelpers.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/**\n * These helpers are designed to be used when testing components or other code that renders into the DOM.\n * By using these helpers we ensure the DOM is correctly cleaned between test runs.\n *\n * Note that `resetTestDOM` is automatically run before each test (see `test_setup.ts`).\n **/\n\nimport type * as NodeText from '../ui/components/node_text/node_text.js';\nimport * as UI from '../ui/legacy/legacy.js';\n\nconst TEST_CONTAINER_ID = '__devtools-test-container-id';\n\ninterface RenderOptions {\n  allowMultipleChildren?: boolean;\n}\n\n/**\n * Renders a given element into the DOM. By default it will error if it finds an element already rendered but this can be controlled via the options.\n **/\nexport const renderElementIntoDOM = (element: HTMLElement, renderOptions: RenderOptions = {}) => {\n  const container = document.getElementById(TEST_CONTAINER_ID);\n\n  if (!container) {\n    throw new Error(`renderElementIntoDOM expects to find ${TEST_CONTAINER_ID}`);\n  }\n\n  const allowMultipleChildren = Boolean(renderOptions.allowMultipleChildren);\n\n  if (container.childNodes.length !== 0 && !allowMultipleChildren) {\n    throw new Error(`renderElementIntoDOM expects the container to be empty ${container.innerHTML}`);\n  }\n\n  container.appendChild(element);\n  return element;\n};\n\nfunction removeChildren(node: Node): void {\n  while (true) {\n    const {firstChild} = node;\n    if (firstChild === null) {\n      break;\n    }\n    const widget = UI.Widget.Widget.get(firstChild);\n    if (widget) {\n      // Child is a widget, so we have to use the Widget system to remove it from the DOM.\n      widget.detach();\n      continue;\n    }\n    // For regular children, recursively remove their children, since some of them\n    // might be widgets, and only afterwards remove the child from the current node.\n    removeChildren(firstChild);\n    node.removeChild(firstChild);\n  }\n}\n/**\n * Completely cleans out the test DOM to ensure it's empty for the next test run.\n * This is run automatically between tests - you should not be manually calling this yourself.\n **/\nexport const resetTestDOM = () => {\n  const previousContainer = document.getElementById(TEST_CONTAINER_ID);\n  if (previousContainer) {\n    removeChildren(previousContainer);\n    previousContainer.remove();\n  }\n\n  const newContainer = document.createElement('div');\n  newContainer.id = TEST_CONTAINER_ID;\n\n  document.body.appendChild(newContainer);\n};\n\ntype Constructor<T> = {\n  new (...args: unknown[]): T,\n};\n\n/**\n * Asserts that all emenents of `nodeList` are at least of type `T`.\n */\nexport function assertElements<T extends Element>(\n    nodeList: NodeListOf<Element>, elementClass: Constructor<T>): asserts nodeList is NodeListOf<T> {\n  nodeList.forEach(e => assert.instanceOf(e, elementClass));\n}\n\nexport function getElementWithinComponent<T extends HTMLElement, V extends Element>(\n    component: T, selector: string, elementClass: Constructor<V>) {\n  assert.isNotNull(component.shadowRoot);\n  const element = component.shadowRoot.querySelector(selector);\n  assert.instanceOf(element, elementClass);\n  return element;\n}\n\nexport function getElementsWithinComponent<T extends HTMLElement, V extends Element>(\n    component: T, selector: string, elementClass: Constructor<V>) {\n  assert.isNotNull(component.shadowRoot);\n  const elements = component.shadowRoot.querySelectorAll(selector);\n  assertElements(elements, elementClass);\n  return elements;\n}\n\n/* Waits for the given element to have a scrollLeft property of at least desiredScrollLeft */\nexport function waitForScrollLeft<T extends Element>(element: T, desiredScrollLeft: number): Promise<void> {\n  let lastScrollLeft = -1;\n  let scrollLeftTimeout: number|null = null;\n\n  const timeBetweenPolls = 50;\n\n  return new Promise(resolve => {\n    const pollForScrollLeft = () => {\n      const newScrollLeft = element.scrollLeft;\n      // If we get the same scroll value twice in a row, and it's at least what\n      // we want, we're done!\n      if (lastScrollLeft === newScrollLeft && newScrollLeft >= desiredScrollLeft) {\n        if (scrollLeftTimeout) {\n          window.clearTimeout(scrollLeftTimeout);\n        }\n        resolve();\n        return;\n      }\n\n      lastScrollLeft = newScrollLeft;\n      scrollLeftTimeout = window.setTimeout(pollForScrollLeft, timeBetweenPolls);\n    };\n\n    window.setTimeout(pollForScrollLeft, timeBetweenPolls);\n  });\n}\n\n/**\n * Dispatches a mouse click event.\n */\nexport function dispatchClickEvent<T extends Element>(element: T, options: MouseEventInit = {}) {\n  const clickEvent = new MouseEvent('click', options);\n  element.dispatchEvent(clickEvent);\n}\n\nexport function dispatchMouseUpEvent<T extends Element>(element: T, options: MouseEventInit = {}) {\n  const clickEvent = new MouseEvent('mouseup', options);\n  element.dispatchEvent(clickEvent);\n}\n\nexport function dispatchFocusEvent<T extends Element>(element: T, options: FocusEventInit = {}) {\n  const focusEvent = new FocusEvent('focus', options);\n  element.dispatchEvent(focusEvent);\n}\n\nexport function dispatchFocusOutEvent<T extends Element>(element: T, options: FocusEventInit = {}) {\n  const focusEvent = new FocusEvent('focusout', options);\n  element.dispatchEvent(focusEvent);\n}\n\n/**\n * Dispatches a keydown event. Errors if the event was not dispatched successfully.\n */\nexport function dispatchKeyDownEvent<T extends Element>(element: T, options: KeyboardEventInit = {}) {\n  const clickEvent = new KeyboardEvent('keydown', options);\n  const success = element.dispatchEvent(clickEvent);\n  if (!success) {\n    assert.fail('Failed to trigger keydown event successfully.');\n  }\n}\n\nexport function dispatchInputEvent<T extends Element>(element: T, options: InputEventInit = {}) {\n  const inputEvent = new InputEvent('input', options);\n  element.dispatchEvent(inputEvent);\n}\n\n/**\n * Dispatches a mouse over event.\n */\nexport function dispatchMouseOverEvent<T extends Element>(element: T, options: MouseEventInit = {}) {\n  const moveEvent = new MouseEvent('mouseover', options);\n  element.dispatchEvent(moveEvent);\n}\n/**\n * Dispatches a mouse out event.\n */\nexport function dispatchMouseOutEvent<T extends Element>(element: T, options: MouseEventInit = {}) {\n  const moveEvent = new MouseEvent('mouseout', options);\n  element.dispatchEvent(moveEvent);\n}\n\n/**\n * Dispatches a mouse move event.\n */\nexport function dispatchMouseMoveEvent<T extends Element>(element: T, options: MouseEventInit = {}) {\n  const moveEvent = new MouseEvent('mousemove', options);\n  element.dispatchEvent(moveEvent);\n}\n\n/**\n * Dispatches a mouse leave event.\n */\nexport function dispatchMouseLeaveEvent<T extends Element>(element: T, options: MouseEventInit = {}) {\n  const leaveEvent = new MouseEvent('mouseleave', options);\n  element.dispatchEvent(leaveEvent);\n}\n\n/**\n * Dispatches a clipboard copy event.\n */\nexport function dispatchCopyEvent<T extends Element>(element: T, options: ClipboardEventInit = {}) {\n  const copyEvent = new ClipboardEvent('copy', options);\n  element.dispatchEvent(copyEvent);\n}\n\n/**\n * Dispatches a clipboard paste event.\n */\nexport function dispatchPasteEvent<T extends Element>(element: T, options: ClipboardEventInit = {}) {\n  const pasteEvent = new ClipboardEvent('paste', options);\n  element.dispatchEvent(pasteEvent);\n}\n\n/**\n * Listens to an event of an element and returns a Promise that resolves to the\n * specified event type.\n */\nexport function getEventPromise<T extends Event>(element: HTMLElement, eventName: string): Promise<T> {\n  return new Promise<T>(resolve => {\n    element.addEventListener(eventName, (event: Event) => {\n      resolve(event as T);\n    }, {once: true});\n  });\n}\n\nexport async function doubleRaf() {\n  return new Promise(resolve => requestAnimationFrame(() => requestAnimationFrame(resolve)));\n}\n\nexport async function raf() {\n  return new Promise(resolve => requestAnimationFrame(resolve));\n}\n\n/**\n * It's useful to use innerHTML in the tests to have full confidence in the\n * renderer output, but LitHtml uses comment nodes to split dynamic from\n * static parts of a template, and we don't want our tests full of noise\n * from those.\n */\nexport function stripLitHtmlCommentNodes(text: string) {\n  /**\n   * LitHtml comments take the form of:\n   * <!--?lit$1234?--> or:\n   * <!--?-->\n   * And this regex matches both.\n   */\n  return text.replaceAll(/<!--\\?(lit\\$[0-9]+\\$)?-->/g, '');\n}\n\n/**\n * Returns an array of textContents.\n * Multiple consecutive newLine and space characters are removed.\n */\nexport function getCleanTextContentFromElements(el: ShadowRoot|HTMLElement, selector: string): string[] {\n  const elements = Array.from(el.querySelectorAll(selector));\n  return elements.map(element => {\n    return element.textContent ? element.textContent.trim().replace(/[ \\n]{2,}/g, '') : '';\n  });\n}\n\nexport function assertNodeTextContent(component: NodeText.NodeText.NodeText, expectedContent: string) {\n  assert.isNotNull(component.shadowRoot);\n  const content = Array.from(component.shadowRoot.querySelectorAll('span')).map(span => span.textContent).join('');\n  assert.strictEqual(content, expectedContent);\n}\n\nexport function querySelectorErrorOnMissing<T extends HTMLElement = HTMLElement>(\n    parent: HTMLElement, selector: string): T {\n  const elem = parent.querySelector<T>(selector);\n  if (!elem) {\n    throw new Error(`Expected element with selector ${selector} not found.`);\n  }\n  return elem;\n}\n"]}