{"version":3,"file":"MockConnection.js","sourceRoot":"","sources":["../../../../../front_end/testing/MockConnection.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as ProtocolClient from '../core/protocol_client/protocol_client.js';\nimport type * as SDK from '../core/sdk/sdk.js';\nimport {type ProtocolMapping} from '../generated/protocol-mapping.js';\nimport type * as ProtocolProxyApi from '../generated/protocol-proxy-api.js';\n\nimport {resetTestDOM} from './DOMHelpers.js';\nimport {deinitializeGlobalVars, initializeGlobalVars} from './EnvironmentHelpers.js';\nimport {setMockResourceTree} from './ResourceTreeHelpers.js';\n\nexport type ProtocolCommand = keyof ProtocolMapping.Commands;\nexport type ProtocolCommandParams<C extends ProtocolCommand> = ProtocolMapping.Commands[C]['paramsType'];\nexport type ProtocolResponse<C extends ProtocolCommand> = ProtocolMapping.Commands[C]['returnType'];\nexport type ProtocolCommandHandler<C extends ProtocolCommand> = (...params: ProtocolCommandParams<C>) =>\n    Omit<ProtocolResponse<C>, 'getError'>|{getError(): string};\nexport type MessageCallback = (result: string|Object) => void;\ntype Message = {\n  id: number,\n  method: ProtocolCommand,\n  params: unknown,\n  sessionId: string,\n};\n\ntype OutgoingMessageListenerEntry = {\n  promise: Promise<void>,\n  resolve: Function,\n};\n\n// Note that we can't set the Function to the correct handler on the basis\n// that we don't know which ProtocolCommand will be stored.\nconst responseMap = new Map<ProtocolCommand, Function>();\nconst outgoingMessageListenerEntryMap = new Map<ProtocolCommand, OutgoingMessageListenerEntry>();\nexport function setMockConnectionResponseHandler<C extends ProtocolCommand>(\n    command: C, handler: ProtocolCommandHandler<C>) {\n  if (responseMap.get(command)) {\n    throw new Error(`Response handler already set for ${command}`);\n  }\n\n  responseMap.set(command, handler);\n}\n\nexport function getMockConnectionResponseHandler(method: ProtocolCommand) {\n  return responseMap.get(method);\n}\n\nexport function clearMockConnectionResponseHandler(method: ProtocolCommand) {\n  responseMap.delete(method);\n}\n\nexport function clearAllMockConnectionResponseHandlers() {\n  responseMap.clear();\n}\n\nexport function registerListenerOnOutgoingMessage(method: ProtocolCommand): Promise<void> {\n  let outgoingMessageListenerEntry = outgoingMessageListenerEntryMap.get(method);\n  if (!outgoingMessageListenerEntry) {\n    let resolve = () => {};\n    const promise = new Promise<void>(r => {\n      resolve = r;\n    });\n    outgoingMessageListenerEntry = {promise, resolve};\n    outgoingMessageListenerEntryMap.set(method, outgoingMessageListenerEntry);\n  }\n  return outgoingMessageListenerEntry.promise;\n}\n\nexport function dispatchEvent<E extends keyof ProtocolMapping.Events>(\n    target: SDK.Target.Target, eventName: E, ...payload: ProtocolMapping.Events[E]) {\n  const event = eventName as ProtocolClient.InspectorBackend.QualifiedName;\n  const [domain] = ProtocolClient.InspectorBackend.splitQualifiedName(event);\n\n  const registeredEvents =\n      ProtocolClient.InspectorBackend.inspectorBackend.getOrCreateEventParameterNamesForDomainForTesting(\n          domain as keyof ProtocolProxyApi.ProtocolDispatchers);\n  const eventParameterNames = registeredEvents.get(event);\n  if (!eventParameterNames) {\n    // The event is not registered, fake-register with empty parameters.\n    registeredEvents.set(event, []);\n  }\n\n  target.dispatch({method: event, params: payload[0]});\n}\n\nasync function enable({reset = true} = {}) {\n  if (reset) {\n    responseMap.clear();\n  }\n\n  // The DevTools frontend code expects certain things to be in place\n  // before it can run. This function will ensure those things are\n  // minimally there.\n  await initializeGlobalVars({reset});\n  setMockResourceTree(true);\n\n  ProtocolClient.InspectorBackend.Connection.setFactory(() => new MockConnection());\n}\n\nclass MockConnection extends ProtocolClient.InspectorBackend.Connection {\n  messageCallback?: MessageCallback;\n  override setOnMessage(callback: MessageCallback) {\n    this.messageCallback = callback;\n  }\n\n  override sendRawMessage(message: string) {\n    void (async () => {\n      const outgoingMessage = JSON.parse(message) as Message;\n\n      const entry = outgoingMessageListenerEntryMap.get(outgoingMessage.method);\n      if (entry) {\n        outgoingMessageListenerEntryMap.delete(outgoingMessage.method);\n        entry.resolve();\n      }\n      const handler = responseMap.get(outgoingMessage.method);\n      if (!handler) {\n        return;\n      }\n\n      let result = handler.call(undefined, outgoingMessage.params) || {};\n      if ('then' in result) {\n        result = await result;\n      }\n\n      const errorMessage: string = ('getError' in result) ? result.getError() : undefined;\n      const error = errorMessage ? {message: errorMessage, code: -32000} : undefined;\n\n      this.messageCallback?.call(undefined, {\n        id: outgoingMessage.id,\n        method: outgoingMessage.method,\n        result,\n        error,\n        sessionId: outgoingMessage.sessionId,\n      });\n    })();\n  }\n}\n\nasync function disable() {\n  if (outgoingMessageListenerEntryMap.size > 0) {\n    throw new Error('MockConnection still has pending listeners. All promises should be awaited.');\n  }\n  resetTestDOM();\n  await deinitializeGlobalVars();\n  // @ts-ignore Setting back to undefined as a hard reset.\n  ProtocolClient.InspectorBackend.Connection.setFactory(undefined);\n}\n\nexport function describeWithMockConnection(title: string, fn: (this: Mocha.Suite) => void, opts: {reset: boolean} = {\n  reset: true,\n}) {\n  return describe(title, function() {\n    beforeEach(async () => await enable(opts));\n    fn.call(this);\n    afterEach(disable);\n  });\n}\n\ndescribeWithMockConnection.only = function(title: string, fn: (this: Mocha.Suite) => void, opts: {reset: boolean} = {\n  reset: true,\n}) {\n  // eslint-disable-next-line mocha/no-exclusive-tests\n  return describe.only(title, function() {\n    beforeEach(async () => await enable(opts));\n    fn.call(this);\n    afterEach(disable);\n  });\n};\n"]}