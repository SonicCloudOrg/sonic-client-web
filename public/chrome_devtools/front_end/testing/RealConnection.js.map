{"version":3,"file":"RealConnection.js","sourceRoot":"","sources":["../../../../../front_end/testing/RealConnection.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Common from '../core/common/common.js';\nimport * as Host from '../core/host/host.js';\nimport * as ProtocolClient from '../core/protocol_client/protocol_client.js';\nimport * as Root from '../core/root/root.js';\nimport * as SDK from '../core/sdk/sdk.js';\nimport * as Main from '../entrypoints/main/main.js';\n\nimport {deinitializeGlobalVars} from './EnvironmentHelpers.js';\n\nlet initialized = false;\n\ninterface KarmaConfig {\n  config: {remoteDebuggingPort: string};\n}\n\nfunction describeBody(fn: () => void) {\n  before('describeWithRealConnection', async function() {\n    if (initialized) {\n      return;\n    }\n    await deinitializeGlobalVars();\n    await import('../entrypoints/shell/shell.js');\n    await import('../panels/elements/elements-meta.js');\n    await import('../panels/sensors/sensors-meta.js');\n    await import('../entrypoints/inspector_main/inspector_main-meta.js');\n    let response = await fetch('/json/list', {method: 'PUT'});\n    const targetList = await response.json();\n\n    // There can be more than one target here. When debugging tests, the \"main\" test suite run and the debug test suite\n    // run happen in different contexts and don't share `initialized`, but the do share the same chrome instance and\n    // thus target list.\n    const mainTarget = targetList.find((t: {title: string}) => t.title === 'Karma');\n    if (!mainTarget) {\n      console.error(\n          'A target could not be found. This can happen if you are accidentally running multiple instances of Karma at once. Make sure you don\\'t have any debug sessions active when trying to run the unittests.');\n      throw new Error('Main test target not found');\n    }\n\n    const originalTargetId = mainTarget.id;\n    response = await fetch('/json/new', {method: 'PUT'});\n    const target = await response.json();\n    await fetch('/json/activate/' + originalTargetId, {method: 'PUT'});\n    /* This value comes from the `client.targetDir` setting in `karma.conf.js` */\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const {remoteDebuggingPort} = ((globalThis as unknown as {__karma__: KarmaConfig}).__karma__).config;\n    Root.Runtime.Runtime.setQueryParamForTesting('ws', `localhost:${remoteDebuggingPort}/devtools/page/${target.id}`);\n    const main = new Main.MainImpl.MainImpl();\n    await main.readyForTest();\n    initialized = true;\n  });\n\n  beforeEach('describeWithRealConnection', () => {\n    resetHostBindingStubState();\n    Common.Settings.Settings.instance().clearAll();\n  });\n\n  fn();\n\n  afterEach('describeWithRealConnection', async () => {\n    const runAfterPendingDispatches = ProtocolClient.InspectorBackend.test.deprecatedRunAfterPendingDispatches;\n    if (!runAfterPendingDispatches) {\n      throw new Error('Missing deprecatedRunAfterPendingDispatches');\n    }\n    await new Promise<void>(resolve => runAfterPendingDispatches(resolve));\n  });\n}\n\nconst realConnectionSuites: {title: string, fn: ((this: Mocha.Suite) => void), only: boolean}[] = [];\n\nexport function describeWithRealConnection(title: string, fn: (this: Mocha.Suite) => void) {\n  realConnectionSuites.push({title, fn, only: false});\n}\n// eslint-disable-next-line mocha/no-exclusive-tests\ndescribeWithRealConnection.only = function(title: string, fn: (this: Mocha.Suite) => void) {\n  realConnectionSuites.push({title, fn, only: true});\n};\n\nexport function flushRealConnectionSuits() {\n  for (const {title, fn, only} of realConnectionSuites) {\n    if (only) {\n      // eslint-disable-next-line mocha/no-exclusive-tests\n      describe.only(title, function() {\n        describeBody(fn.bind(this));\n      });\n    } else {\n      describe(title, function() {\n        describeBody(fn.bind(this));\n      });\n    }\n  }\n}\n\nexport async function getExecutionContext(runtimeModel: SDK.RuntimeModel.RuntimeModel):\n    Promise<SDK.RuntimeModel.ExecutionContext> {\n  let executionContexts = runtimeModel.executionContexts();\n  if (!executionContexts.length) {\n    await new Promise<void>(resolve => {\n      const listener = () => {\n        runtimeModel.removeEventListener(SDK.RuntimeModel.Events.ExecutionContextCreated, listener);\n        executionContexts = runtimeModel.executionContexts();\n        resolve();\n      };\n      runtimeModel.addEventListener(SDK.RuntimeModel.Events.ExecutionContextCreated, listener);\n    });\n  }\n  if (!executionContexts.length) {\n    throw new Error('Cannot get executionContext');\n  }\n  return executionContexts[0];\n}\n\nfunction resetHostBindingStubState() {\n  Host.InspectorFrontendHost.InspectorFrontendHostInstance.recordedCountHistograms.splice(0);\n  Host.InspectorFrontendHost.InspectorFrontendHostInstance.recordedEnumeratedHistograms.splice(0);\n  Host.InspectorFrontendHost.InspectorFrontendHostInstance.recordedPerformanceHistograms.splice(0);\n}\n"]}